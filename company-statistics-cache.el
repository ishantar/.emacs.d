(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ("challenge" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "emotional" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3) (text-mode . 3) (nil . 3)) "/usr/bin/cmake" (((:symbol "nil") . 1) (nil . 1)) "~/.emacs.d/auto-backup-list/" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1)) "ar" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:symbol "s2") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "experience" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "particular" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "uint_least16_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "c1_c" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) (c-mode . 1) (nil . 1)) "wchar_t" (((:file "/home/workbench-lk/c/mini.patience.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "concat" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "symbol-plist" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "-3*x*x" ((lisp-interaction-mode . 1) (nil . 1)) "defmacro" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1)) "xx*x3*1/2" ((lisp-interaction-mode . 3) (nil . 3)) "problem-block-1.core" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1) ((:keyword "ns") . 1) (clojure-mode . 1)) "nil" (((:keyword "fn") . 2) (cider-repl-mode . 12) (nil . 12) ((:keyword "defmacro") . 1) ((:keyword "if") . 4) ((:keyword "recur") . 3) ((:keyword "if-let") . 1) ((:keyword "doc") . 1)) "-1*2*3*x" ((lisp-interaction-mode . 7) (nil . 7)) "-2*-2" ((lisp-interaction-mode . 5) (nil . 5)) "xx*xx" ((lisp-interaction-mode . 1) (nil . 1)) "~/.emacs.d/.mc-lists.el" ((Custom-mode . 1) (nil . 1)) "-1*2*3x" ((lisp-interaction-mode . 1) (nil . 1)) "3x*3x" ((lisp-interaction-mode . 6) (nil . 6)) "/usr/lib/gcc/x86_64-linux-gnu/8.0.1/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "cljc" ((Custom-mode . 1) (nil . 1)) "interaction" ((Custom-mode . 1) (nil . 1)) "execv" (((:keyword "const") . 1)) "repl" ((Custom-mode . 1) (nil . 1)) "<====>" ((lisp-interaction-mode . 1) (nil . 1)) "envar" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "ldiv_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "Node") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "arglen" (((:keyword "while") . 1) ((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:symbol "nil") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "right" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "node_alloc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 5) ((:keyword "union") . 3) (c-mode . 5) (nil . 5) ((:keyword "enum") . 2)) "offsetof" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "square" (((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "/lib/init/init-d-script" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "else" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "own_square" (((:symbol "Square") . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "/var/lib/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "include" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "uint64_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 13) ((:keyword "return") . 1) (c-mode . 14) (nil . 14) ((:keyword "enum") . 8) ((:symbol "Node") . 1) ((:keyword "sizeof") . 4) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) "defn" (((:keyword "defmacro") . 1) (cider-repl-mode . 1) (nil . 1)) "le16toh" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "TNode") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "TNode" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "fork" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "exit" ((c-mode . 1) (nil . 1)) "select" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "size_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "enum") . 1) (c-mode . 1) (nil . 1)) "intel_lpss_pci" (((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "split-at" (((:keyword "let") . 1) (cider-repl-mode . 1) (nil . 1)) "__pic__" (((:keyword "struct") . 1) (c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) "branch" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "enum") . 2) (c-mode . 2) (nil . 2)) "_tpadtoggle" (((:file "/home/workbench-lk/c/tpad/v3/tpadtoggle.s.l.euid.c") . 1)) "0000" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "execve" (((:file "/home/workbench-lk/c/tpadtoggle.standards.c") . 1) ((:symbol "nil") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "special" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1) ((:symbol "kn") . 1)) "unsigned" (((:keyword "struct") . 1) (c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) "printf" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "enum") . 2) (c-mode . 3) (nil . 4) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:keyword "if") . 1) (cider-repl-mode . 1)) "bottom_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "initstate" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "white_piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Piece") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "company" ((Custom-mode . 1) (nil . 1)) "Piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_1" (((:symbol "square") . 1)) "main" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "s" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:symbol "var") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "void" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "accessor" (((:keyword "if-let") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "recur") . 1)) "out_of_bounds" (((:symbol "square") . 1)) "pp56" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3) (c-mode . 3) (nil . 3)) "string-to-int" ((clojure-mode . 2) (nil . 2)) "bits" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:keyword "struct") . 1)) "interface" ((lisp-interaction-mode . 1) (nil . 1)) "volume" ((lisp-interaction-mode . 1) (nil . 1)) "allocation" ((lisp-interaction-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "form" ((lisp-interaction-mode . 1) (nil . 1)) "subscript" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:symbol "leading") . 1) (c-mode . 1) (nil . 1)) "knight" (((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 3) (c-mode . 3) (nil . 3) ((:symbol "5") . 1)) "them" ((text-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "intent" ((nil . 5) (reb-mode . 2) ((:symbol "u") . 1) (Custom-mode . 5)) "semantics" ((lisp-interaction-mode . 1) (nil . 1)) "piece" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) (c-mode . 1) (nil . 1)) "cons" (((:keyword "doc") . 3) (cider-repl-mode . 4) (nil . 4) ((:keyword "fn") . 1)) "abstraction" ((lisp-interaction-mode . 1) (nil . 1)) "uint8" ((nil . 2) (reb-mode . 1) (Custom-mode . 1)) "backed" ((lisp-interaction-mode . 1) (nil . 1)) "done" (((:file "/home/workbench-lk/cmdline/bash/nestfor") . 1)) "declaration" (((:file "/home/lk/self/projects/lang_rust/notes.txt") . 3) (text-mode . 3) (nil . 3)) "reassignment" (((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1) (text-mode . 1) (nil . 1)) "iter_from" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "echo" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "iter_to" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) ((:keyword "function") . 1) (sh-mode . 1) (nil . 1)) "/gdrive:" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) (fundamental-mode . 1) (nil . 1)) "matchln" (((:keyword "fi") . 1) ((:keyword "do") . 1) ((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "alength" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "groupln" (((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "overlay" ((Custom-mode . 1) (nil . 1)) "c::test" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "subvec" ((cider-repl-mode . 1) (nil . 1)) "vector" ((cider-repl-mode . 7) (nil . 7) ((:keyword "fn") . 1) ((:keyword "let") . 1) ((:keyword "or") . 1) ((:keyword "defmacro") . 1) ((:keyword "doc") . 2)) "fn" (((:keyword "doc") . 2) (cider-repl-mode . 4) (nil . 4) ((:keyword "source") . 2)) "!match" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "normal" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "aclone" (((:keyword "fn") . 1) (cider-repl-mode . 1) (nil . 1)) "leq" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 4) (c-mode . 4) (nil . 4) ((:symbol "root") . 2) ((:keyword "union") . 2) ((:symbol "left") . 1) ((:keyword "return") . 1) ((:symbol "parent") . 1) ((:keyword "sizeof") . 1)) "clojure.repl/source-fn" (((:keyword "fn") . 1) (cider-repl-mode . 3) (nil . 3) ((:keyword "quote") . 2)) "/dev/sda" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "second" (((:keyword "fn") . 1) (cider-repl-mode . 1) (nil . 1)) "->" (((:keyword "quote") . 2) (cider-repl-mode . 2) (nil . 2)) "simple-symbol?" (((:keyword "recur") . 2) (cider-repl-mode . 2) (nil . 2)) "println" ((cider-repl-mode . 2) ((:keyword "let") . 1) (nil . 1)) "clojure.repl" (((:keyword "if") . 1) (cider-repl-mode . 1) (nil . 1)) "all_bits" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "top_4" (((:keyword "sizeof") . 1)) "unquote" (((:keyword "quote") . 1) (cider-repl-mode . 1) (nil . 1)) "struct" ((nil . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "uint_fast16_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "union") . 1) (c-mode . 2) (nil . 2) ((:keyword "struct") . 1)) "responsibility" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "../efi/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "quote" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "treeNode" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "node" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) ((:keyword "sizeof") . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "_________________________________" ((lisp-interaction-mode . 1) (nil . 1)) "0000.0100" ((lisp-interaction-mode . 1) (nil . 1)) "list" (((:keyword "if") . 2) (cider-repl-mode . 4) (nil . 4) ((:keyword "let") . 1) ((:keyword "defmacro") . 1)) "realloc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "if-let" (((:keyword "doc") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "recur") . 1)) "it's" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "fstab" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "cat" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "6x^2" ((lisp-interaction-mode . 2) (nil . 2)) "0000.1100" ((lisp-interaction-mode . 1) (nil . 1)) "install" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "27/2" ((lisp-interaction-mode . 2) (nil . 2)) "uint8_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 8) ((:symbol "id") . 2) ((:keyword "union") . 5) (c-mode . 15) (nil . 15) ((:keyword "struct") . 2) ((:symbol "id2") . 2) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 6) ((:keyword "while") . 4)) "8134" ((reb-mode . 1) (nil . 1)) "1603" ((reb-mode . 1) (nil . 1)) "24bit" ((Custom-mode . 1) (nil . 1)) "semantic" ((Custom-mode . 2) (nil . 2)) "term" ((Custom-mode . 1) (nil . 1)) "validity" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "cider/cider-nrepl" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) "feeling" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2) (text-mode . 2) (nil . 2)) "anxiety" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "find-doc" ((cider-repl-mode . 1) (nil . 1)) "internal" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "response" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "integrate" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "probably" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) "weight" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "deliberate" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "origin" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "scale" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "with" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "does" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "0.18.0-SNAPSHOT" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "tolerance" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "requiring" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "ns" ((cider-repl-mode . 1) (nil . 1)) "global-company-mode" (((:file "/home/lk/.emacs") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lk-windowsize" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "x*x*x" ((lisp-interaction-mode . 8) (nil . 8)) "uint_least8_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "c2_d" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 3) (c-mode . 3) (nil . 3)) "command-execute" (((:file "/home/lk/.emacs") . 1) ((:keyword "and") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package-quickstart" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "uint16_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2)) "double" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 2) ((:keyword "defmacro") . 1) (cider-repl-mode . 1)) "require" ((nil . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1)) "cond" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "1/2*1/2*1/2" ((lisp-interaction-mode . 20) (nil . 20)) "strcasecmp" (((:file "/home/workbench-lk/projects/debian/cryptsetup-git/src/cryptsetup_reencrypt.c") . 1) ((:keyword "goto") . 1) (c-mode . 1) (nil . 1)) "xxx*3/2" ((lisp-interaction-mode . 10) (nil . 10)) "-1*2" ((lisp-interaction-mode . 5) (nil . 5)) "ptrdiff_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "getc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:symbol "Node") . 2) ((:keyword "sizeof") . 2) (c-mode . 2) (nil . 2)) "Node_free_child" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 7) ((:keyword "return") . 3) (c-mode . 7) (nil . 7) ((:keyword "sizeof") . 1) ((:keyword "enum") . 3)) "grt" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 4) ((:symbol "root") . 1) ((:keyword "union") . 3) (c-mode . 4) (nil . 4) ((:symbol "right") . 1) ((:symbol "left") . 1) ((:symbol "parent") . 1) ((:keyword "sizeof") . 1)) "val" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:symbol "nil") . 1) ((:keyword "enum") . 2) (c-mode . 2) (nil . 2) ((:symbol "rt") . 1)) "lightskyblue" ((Custom-mode . 1) (nil . 1)) "sp-with-modes" (((:file "/home/lk/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "va_arg" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "coord") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "uint32_t" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3) (c-mode . 3) (nil . 3)) "line" ((nil . 1)) "offering" ((lisp-interaction-mode . 1) (nil . 1)) "capabilities" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "linux" ((Custom-mode . 1) (nil . 1)) "border." ((lisp-interaction-mode . 1) (nil . 1)) "clojure.core/quot" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "compilation" ((Custom-mode . 1) (nil . 1)) "+" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "fname" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) ((:symbol "k") . 1) (fundamental-mode . 1) (nil . 1)) "take-while" ((cider-repl-mode . 1) (nil . 1)) "coll?" (((:keyword "fn") . 3) (cider-repl-mode . 5) (nil . 5) ((:keyword "if") . 1) ((:keyword "or") . 1)) "nthnext" ((cider-repl-mode . 1) (nil . 1)) "mode" ((Custom-mode . 1) (nil . 1)) "ns-interns" (((:keyword "do") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "ns") . 1)) "clojure.lang.RT/conj" (((:keyword "do") . 1) (cider-repl-mode . 1) (nil . 1)) "clojure.lang.AFn" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) ":all" (((:keyword "ns") . 1) (cider-repl-mode . 3) (nil . 3) ((:keyword "do") . 1) ((:keyword "quote") . 1)) "ns-map" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "clojure.main" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "clojure.core" (((:keyword "ns") . 2) (cider-repl-mode . 2) (nil . 2)) "testln" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "do") . 1) (sh-mode . 1) (nil . 1)) "classlojure.core" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "indexed?" ((cider-repl-mode . 2) (nil . 2)) "seque" ((cider-repl-mode . 1) (nil . 1)) "highlight" ((Custom-mode . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "performing" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "map" (((:keyword "quote") . 1) (cider-repl-mode . 5) (nil . 5) ((:keyword "let") . 1) ((:keyword "doc") . 3)) "/boot/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "squiggly-clojure.core" (((:keyword "let") . 1) (cider-repl-mode . 1) (nil . 1)) "boardLoc" ((c-mode . 1) (nil . 1)) "0000.0000" ((lisp-interaction-mode . 1) (nil . 1)) "rest" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "int8_t" (((:keyword "union") . 1) (c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) "grub" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "syntax" ((Custom-mode . 1) (nil . 1)) "contrasts" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 4) (text-mode . 4) (nil . 4)) "adoption" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2) (text-mode . 2) (nil . 2)) "care" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "conscious" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3) (text-mode . 3) (nil . 3)) "state" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "union" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) (c-mode . 1) (nil . 1)) "UINT16_C" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "UINT8_MAX" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "hwords" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "calloc" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "int32_t" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "specifiers" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "stddef" (((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1) (c-mode . 1) (nil . 1)) "number" ((Custom-mode . 1) (nil . 1)) "true" ((clojure-mode . 1) (nil . 1)) "4clojure-check-answers" (((:keyword "let") . 1) (lisp-interaction-mode . 1) (nil . 1)) "arg-rest" (((:keyword "cond") . 3) (clojure-mode . 3) (nil . 3)) "classcastexception" ((term-mode . 2) (nil . 2)) "drop-last" (((:keyword "recur") . 1) (cider-repl-mode . 1) (nil . 1)) "clojure" ((Custom-mode . 2) (nil . 2)) "org.clojure" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "ns-aliases" (((:keyword "ns") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "do") . 1)) "clojure.tools.cli" (((:keyword "ns") . 4) (cider-repl-mode . 4) (nil . 4)) "byte-array" (((:keyword "quote") . 2) (cider-repl-mode . 2) (nil . 2)) "clojure.java.api.Clojure" (((:keyword "quote") . 1) (cider-repl-mode . 1) (nil . 1)) "seq" (((:keyword "recur") . 1) (cider-repl-mode . 3) (nil . 3) ((:keyword "doc") . 1) ((:keyword "let") . 1)) "into" (((:keyword "recur") . 1) (cider-repl-mode . 1) (nil . 1)) "pop" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "sorted-set" (((:keyword "let") . 1) (cider-repl-mode . 1) (nil . 1)) "colors" ((Custom-mode . 1) (nil . 1)) "object" (((:file "/home/lk/self/projects/lang_rust/notes.txt") . 3) (text-mode . 3) (nil . 3)) "keyed" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) (fundamental-mode . 1) (nil . 1)) "coll" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 3) (fundamental-mode . 3) (nil . 3)) "warning" ((Custom-mode . 1) (nil . 1)) "-main" (((:keyword "do") . 2) (cider-repl-mode . 2) (nil . 2)) "green" ((Custom-mode . 1) (nil . 1)) "deconj" ((cider-repl-mode . 2) (nil . 2)) "transduce" ((cider-repl-mode . 2) (nil . 2) ((:keyword "doc") . 1)) "conj" ((cider-repl-mode . 2) (nil . 2) ((:keyword "recur") . 1)) "ff2520" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "reduce" (((:keyword "fn") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "fn ") . 1)) "even-numbers" ((cider-repl-mode . 2) (nil . 2) ((:keyword "doc") . 1)) "todo" ((fundamental-mode . 1) (nil . 1)) "symbol" ((fundamental-mode . 1) (nil . 1)) "clear-agent-errors" (((:keyword "fn*") . 1) (cider-repl-mode . 1) (nil . 1)) "file" ((Custom-mode . 1) (nil . 1)) "lazy-seq" (((:file "/home/lk/self/projects/lang_clojure/brave/nb/src/nb/core.clj") . 1) ((:keyword "lazy-seq") . 1) (clojure-mode . 1) (nil . 1)) "seqable?" (((:keyword "if-let") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "if") . 1)))) company-statistics--log [("lazy-seq" (nil . 1) (clojure-mode . 1) ((:keyword "lazy-seq") . 1) ((:file "/home/lk/self/projects/lang_clojure/brave/nb/src/nb/core.clj") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("if-let" (nil . 2) (cider-repl-mode . 2) ((:keyword "doc") . 1)) ("accessor" (nil . 2) (cider-repl-mode . 2) ((:keyword "if-let") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("accessor" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("seqable?" (nil . 2) (cider-repl-mode . 2) ((:keyword "if-let") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if-let") . 1)) ("if-let" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("seqable?" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 3)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("cat" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("even-numbers" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 2)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("transduce" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) (":all" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("rest" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("6x^2" (nil . 2) (lisp-interaction-mode . 2)) ("6x^2" (nil . 1) (lisp-interaction-mode . 1)) ("27/2" (nil . 2) (lisp-interaction-mode . 2)) ("27/2" (nil . 1) (lisp-interaction-mode . 1)) ("uint8_t" (nil . 7) (c-mode . 7) ((:keyword "union") . 5) ((:symbol "id") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 7)) ("id" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint_fast16_t" (nil . 2) (c-mode . 2) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("uint_fast16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id2") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id2") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("intent" (nil . 1) (reb-mode . 2)) ("8134" (nil . 1) (reb-mode . 1)) ("uint8" (nil . 1) (reb-mode . 1)) ("intent" (nil . 1) (reb-mode . 1) ((:symbol "u") . 1)) ("intent" (nil . 1) (Custom-mode . 2)) ("1603" (nil . 1) (reb-mode . 1)) ("uint8" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("syntax" (nil . 1) (Custom-mode . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("contrasts" (nil . 4) (text-mode . 4) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 4)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("validity" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("feeling" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2)) ("feeling" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("struct" (nil . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("internal" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("adoption" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2)) ("response" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("adoption" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("integrate" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("probably" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("care" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("weight" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("validity" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("deliberate" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("conscious" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3)) ("origin" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("state" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("deliberate" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("conscious" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("require" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("does" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("struct" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("response" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("with" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("scale" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("tolerance" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("requiring" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("probably" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("node" (nil . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("challenge" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("emotional" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3)) ("emotional" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("node" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("anxiety" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("responsibility" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("conscious" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("requiring" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("with" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("emotional" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("experience" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("them" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("particular" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("probably" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("c2_d" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 3)) ("c2_d" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("c1_c" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("c2_d" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("double" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint16_t" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 2)) ("uint16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint_least16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint_least8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("ar" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "s2") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("x*x*x" (nil . 8) (lisp-interaction-mode . 8)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 20) (lisp-interaction-mode . 20)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-3*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("xx*xx" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 3) (lisp-interaction-mode . 3)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 7) (lisp-interaction-mode . 7)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 5) (lisp-interaction-mode . 5)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 10) (lisp-interaction-mode . 10)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 5) (lisp-interaction-mode . 5)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("<====>" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 6) (lisp-interaction-mode . 6)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("lightskyblue" (nil . 1) (Custom-mode . 1)) ("va_arg" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "coord") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 5) (c-mode . 5) ((:keyword "union") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 5)) ("offsetof" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 4) (c-mode . 4) ((:keyword "union") . 3) ((:symbol "root") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 4)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "union") . 2) ((:symbol "root") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "right") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("right" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "left") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "left") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "root") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 13) (c-mode . 13) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 13)) ("void" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 7) (c-mode . 7) ((:keyword "return") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 7)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("val" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 8) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("size_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("getc" (nil . 2) (c-mode . 2) ((:keyword "sizeof") . 2) ((:symbol "Node") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("ldiv_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("ptrdiff_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("TNode" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("getc" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("le16toh" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "TNode") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("branch" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("branch" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 4) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "parent") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "parent") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("printf" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("printf" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("val" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:symbol "rt") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("union" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("s" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "var") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("main" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("initstate" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("UINT16_C" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("UINT8_MAX" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 6)) ("printf" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("hwords" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint32_t" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3)) ("uint32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("calloc" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 4) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("int32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("pp56" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3)) ("pp56" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("pp56" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("special" (nil . 2) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("specifiers" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("subscript" (nil . 1) (c-mode . 1) ((:symbol "leading") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("knight" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 3)) ("stddef" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("knight" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("special" (nil . 1) (c-mode . 1) ((:symbol "kn") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("knight" (nil . 1) (c-mode . 1) ((:symbol "5") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("linux" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("number" (nil . 1) (Custom-mode . 1)) ("true" (nil . 1) (clojure-mode . 1)) ("string-to-int" (nil . 2) (clojure-mode . 2)) ("string-to-int" (nil . 1) (clojure-mode . 1)) ("4clojure-check-answers" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "let") . 1)) ("arg-rest" (nil . 3) (clojure-mode . 3) ((:keyword "cond") . 3)) ("arg-rest" (nil . 1) (clojure-mode . 1) ((:keyword "cond") . 1)) ("arg-rest" (nil . 1) (clojure-mode . 1) ((:keyword "cond") . 1)) ("classcastexception" (nil . 2) (term-mode . 2)) ("classcastexception" (nil . 1) (term-mode . 1)) ("drop-last" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("clojure" (nil . 1) (Custom-mode . 1)) ("org.clojure" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("ns-aliases" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.tools.cli" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("byte-array" (nil . 2) (cider-repl-mode . 2) ((:keyword "quote") . 2)) ("byte-array" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("clojure.java.api.Clojure" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("clojure" (nil . 1) (Custom-mode . 1)) ("seq" (nil . 2) (cider-repl-mode . 2) ((:keyword "recur") . 1)) ("into" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("pop" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("seq" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("sorted-set" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("colors" (nil . 1) (Custom-mode . 1)) ("object" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 3)) ("object" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1)) ("object" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1)) ("declaration" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 3)) ("declaration" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1)) ("reassignment" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1)) ("declaration" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/lang_rust/notes.txt") . 1)) ("compilation" (nil . 1) (Custom-mode . 1)) ("keyed" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("coll" (nil . 3) (fundamental-mode . 3) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 3)) ("fname" (nil . 1) (fundamental-mode . 1) ((:symbol "k") . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("coll" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("/gdrive:" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("coll" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("nthnext" (nil . 1) (cider-repl-mode . 1)) ("take-while" (nil . 1) (cider-repl-mode . 1)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("coll?" (nil . 2) (cider-repl-mode . 2) ((:keyword "fn") . 2)) ("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("printf" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("ns-aliases" (nil . 1) (cider-repl-mode . 1) ((:keyword "do") . 1)) ("ns-interns" (nil . 2) (cider-repl-mode . 2) ((:keyword "do") . 1)) ("clojure.lang.RT/conj" (nil . 1) (cider-repl-mode . 1) ((:keyword "do") . 1)) ("clojure.tools.cli" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("alength" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.tools.cli" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("ns-map" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("ns-interns" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) (":all" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.core" (nil . 2) (cider-repl-mode . 2) ((:keyword "ns") . 2)) ("clojure.tools.cli" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.core" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.main" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("clojure.lang.AFn" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("classlojure.core" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("warning" (nil . 1) (Custom-mode . 1)) ("-main" (nil . 2) (cider-repl-mode . 2) ((:keyword "do") . 2)) ("-main" (nil . 1) (cider-repl-mode . 1) ((:keyword "do") . 1)) ("overlay" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) (":all" (nil . 1) (cider-repl-mode . 1) ((:keyword "do") . 1)) ("indexed?" (nil . 2) (cider-repl-mode . 2)) ("indexed?" (nil . 1) (cider-repl-mode . 1)) ("seque" (nil . 1) (cider-repl-mode . 1)) ("subvec" (nil . 1) (cider-repl-mode . 1)) ("deconj" (nil . 2) (cider-repl-mode . 2)) ("transduce" (nil . 1) (cider-repl-mode . 1)) ("conj" (nil . 1) (cider-repl-mode . 1)) ("deconj" (nil . 1) (cider-repl-mode . 1)) ("vector" (nil . 1) (cider-repl-mode . 1)) ("reduce" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("even-numbers" (nil . 1) (cider-repl-mode . 1)) ("todo" (nil . 1) (fundamental-mode . 1)) ("symbol" (nil . 1) (fundamental-mode . 1)) ("fn" (nil . 4) (cider-repl-mode . 4) ((:keyword "doc") . 2)) ("fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "source") . 2)) ("fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "source") . 1)) ("clojure.repl/source-fn" (nil . 3) (cider-repl-mode . 3) ((:keyword "fn") . 1)) ("clear-agent-errors" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn*") . 1)) ("nil" (nil . 8) (cider-repl-mode . 8) ((:keyword "fn") . 2)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("second" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("map" (nil . 2) (cider-repl-mode . 2) ((:keyword "quote") . 1)) ("double" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("defn" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("simple-symbol?" (nil . 2) (cider-repl-mode . 2) ((:keyword "recur") . 2)) ("simple-symbol?" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 4)) ("clojure.repl" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("reduce" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn ") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("seq" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("squiggly-clojure.core" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("aclone" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("list" (nil . 4) (cider-repl-mode . 4) ((:keyword "if") . 2)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "or") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "or") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("conj" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("split-at" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("println" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("+" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("clojure.core/quot" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("quote" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("unquote" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("clojure.repl/source-fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 2)) ("clojure.repl/source-fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("->" (nil . 2) (cider-repl-mode . 2) ((:keyword "quote") . 2)) ("->" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("file" (nil . 1) (Custom-mode . 1))] company-statistics--index 27)