(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ("modeline" ((Custom-mode . 1) (nil . 1)) "/usr/bin/cmake" (((:symbol "nil") . 1) (nil . 1)) "~/.emacs.d/auto-backup-list/" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1)) "backquote-backquote-symbol" (((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1) (inferior-emacs-lisp-mode . 1) (nil . 1)) "apply-partially" (((:keyword "lambda") . 3) (emacs-lisp-mode . 4) (nil . 4) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 2) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1)) "wchar_t" (((:file "/home/workbench-lk/c/mini.patience.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "concat" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "symbol-plist" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "args" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "map-let") . 1)) "defmacro" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1)) "*string-output*" ((emacs-lisp-mode . 1) (nil . 1)) "problem-block-1.core" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1) ((:keyword "ns") . 1) (clojure-mode . 1)) "nil" (((:keyword "recur") . 3) ((:keyword "if-let") . 1) ((:keyword "doc") . 1)) "ARGS" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "backquote" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "while") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ARGS2" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 6) ((:keyword "let") . 3) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "if") . 1) ((:keyword "while") . 1) ((:keyword "setq") . 2)) "~/.emacs.d/.mc-lists.el" ((Custom-mode . 1) (nil . 1)) "xxx*3/2" ((lisp-interaction-mode . 1) (nil . 1)) "/usr/lib/gcc/x86_64-linux-gnu/8.0.1/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "cljc" ((Custom-mode . 1) (nil . 1)) "interaction" ((Custom-mode . 2) (nil . 2)) "execv" (((:keyword "const") . 1)) "repl" ((Custom-mode . 1) (nil . 1)) "c-mode-hook" (((:keyword "λ") . 2) (lisp-interaction-mode . 2) (nil . 2)) "envar" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "arglen" (((:keyword "while") . 1) ((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:symbol "nil") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "right" ((nil . 1) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1)) "node_alloc" (((:keyword "enum") . 1)) "lock" ((Custom-mode . 1) (nil . 1)) "square" (((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "/lib/init/init-d-script" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "else" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "own_square" (((:symbol "Square") . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "/var/lib/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "with" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "uint64_t" (((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/fnptr.c") . 2) ((:keyword "sizeof") . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) (c-mode . 1) (nil . 1)) "operators" ((Custom-mode . 1) (nil . 1)) "getc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "Node") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "fork" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "exit" ((c-mode . 1) (nil . 1)) "select" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "intel_lpss_pci" (((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "split-at" (((:keyword "let") . 1) (cider-repl-mode . 1) (nil . 1)) "cstyle" ((Custom-mode . 3) (nil . 3)) "_tpadtoggle" (((:file "/home/workbench-lk/c/tpad/v3/tpadtoggle.s.l.euid.c") . 1)) "0000" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "execve" (((:file "/home/workbench-lk/c/tpadtoggle.standards.c") . 1) ((:symbol "nil") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "special" ((c-mode . 1) (nil . 1)) "semantic-complete-inline-analyzer-displayor-class" (((:file "/home/lk/.emacs.d/init.el") . 2) ((:keyword "lambda") . 2) (emacs-lisp-mode . 2) (nil . 2)) "printf" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "enum") . 1) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) "bottom_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "as_ptr" (((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1) ((:symbol "s") . 1) ((:keyword "mut") . 1) (rustic-mode . 1) (nil . 1)) "white_piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Piece") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "company" ((Custom-mode . 3) (nil . 3)) "Piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_1" (((:symbol "square") . 1)) "compile-init" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "accessor" (((:keyword "if-let") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "recur") . 1)) "out_of_bounds" (((:symbol "square") . 1)) "ULLONG_MAX" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "string-to-int" ((clojure-mode . 1) (nil . 1)) "bits" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "interface" ((lisp-interaction-mode . 1) (nil . 1)) "volume" ((lisp-interaction-mode . 1) (nil . 1)) "allocation" ((lisp-interaction-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "form" ((lisp-interaction-mode . 1) (nil . 1)) "eldoc-overlay-disable" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "intent" ((reb-mode . 1) (Custom-mode . 1)) "semantics" ((lisp-interaction-mode . 1) (nil . 3) (Custom-mode . 2)) "piece" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) (c-mode . 1) (nil . 1)) "cons" (((:keyword "doc") . 2) (cider-repl-mode . 2) (nil . 5) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 2) ((:keyword "%h") . 1) (emacs-lisp-mode . 2) ((:keyword "λ") . 1) ((:keyword "if") . 1) (lisp-interaction-mode . 1)) "abstraction" ((lisp-interaction-mode . 1) (nil . 1)) "stickyfunc" ((Custom-mode . 2) (nil . 2)) "backed" ((lisp-interaction-mode . 1) (nil . 1)) "done" (((:file "/home/workbench-lk/cmdline/bash/nestfor") . 1)) "analyzer" ((Custom-mode . 2) (nil . 2)) "iter_from" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "echo" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "iter_to" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) ((:keyword "function") . 1) (sh-mode . 1) (nil . 1)) "matchln" (((:keyword "fi") . 1) ((:keyword "do") . 1) ((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "groupln" (((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "overlay" ((Custom-mode . 4) (nil . 4)) "c::test" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "defun" (((:keyword "defalias") . 1) (lisp-interaction-mode . 1) (nil . 1)) "vector" ((cider-repl-mode . 4) (nil . 4) ((:keyword "or") . 1) ((:keyword "defmacro") . 1) ((:keyword "doc") . 2)) "fn" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) ((:keyword "doc") . 1) ((:keyword "source") . 1) (cider-repl-mode . 1)) "!match" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "normal" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "leq" (((:keyword "union") . 1) ((:symbol "root") . 1)) "clojure.repl/source-fn" (((:keyword "quote") . 2)) "/dev/sda" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "->" (((:keyword "quote") . 2) (cider-repl-mode . 2) (nil . 2)) "simple-symbol?" (((:keyword "recur") . 1) (cider-repl-mode . 1) (nil . 1)) "println" ((cider-repl-mode . 2) ((:keyword "let") . 1) (nil . 1)) "background" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "all_bits" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "top_4" (((:keyword "sizeof") . 1)) "unquote" (((:keyword "quote") . 1) (cider-repl-mode . 1) (nil . 1)) "struct" ((text-mode . 1) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "uint_fast16_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "../efi/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "quote" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "treeNode" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "node" (((:keyword "struct") . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1)) "_________________________________" ((lisp-interaction-mode . 1) (nil . 1)) "0000.0100" ((lisp-interaction-mode . 1) (nil . 1)) "list" (((:keyword "if") . 2) (cider-repl-mode . 4) (nil . 4) ((:keyword "let") . 1) ((:keyword "defmacro") . 1)) "realloc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "if-let" (((:keyword "doc") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "recur") . 1)) "it's" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "fstab" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "cat" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "6x^2" ((lisp-interaction-mode . 2) (nil . 2)) "0000.1100" ((lisp-interaction-mode . 1) (nil . 1)) "install" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "27/2" ((lisp-interaction-mode . 2) (nil . 2)) "uint8_t" (((:symbol "id") . 1) ((:symbol "id2") . 1) ((:keyword "struct") . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 7) (c-mode . 7) (nil . 7) ((:keyword "const") . 5)) "lptrf" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "typedef") . 1) (c-mode . 1) (nil . 1)) "24bit" ((Custom-mode . 1) (nil . 1)) "semantic" ((Custom-mode . 13) (nil . 13)) "term" ((Custom-mode . 1) (nil . 1)) "validity" ((text-mode . 1) (nil . 1)) "cider/cider-nrepl" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) "feeling" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "find-doc" ((cider-repl-mode . 1) (nil . 1)) "egg-minor-mode" (((:keyword "fmap") . 2) (emacs-lisp-mode . 2) (nil . 2)) "response" ((text-mode . 1) (nil . 1)) "probably" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "00aeae" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "requiring" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "deliberate" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "nil." (((:keyword "fmap") . 1) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "λ") . 1) ((:keyword "function") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "let") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 2) ((:keyword "and") . 1) ((:keyword "lambda") . 1)) "/tmp/emacs/irony.2018-09-13_06h-04m-51s.log" ((Custom-mode . 2) (nil . 2)) "0.18.0-SNAPSHOT" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "flycheck-cstyle" (((:keyword "require") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "defmacro") . 1)) "auto" ((Custom-mode . 1) (nil . 1)) "ns" ((cider-repl-mode . 1) (nil . 1)) "global-company-mode" (((:file "/home/lk/.emacs") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1)) "lk-windowsize" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "defun") . 1)) "funcall" (((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 2) (inferior-emacs-lisp-mode . 2) (nil . 2)) "help" ((inferior-emacs-lisp-mode . 1) (nil . 1)) "n3_Obj" (((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "command-execute" (((:file "/home/lk/.emacs") . 1) ((:keyword "and") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package-quickstart" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "uint16_t" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "typedef") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1)) "335f86" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "cond" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "edebug--read" (((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1) (inferior-emacs-lisp-mode . 1) (nil . 1)) "strcasecmp" (((:file "/home/workbench-lk/projects/debian/cryptsetup-git/src/cryptsetup_reencrypt.c") . 1) ((:keyword "goto") . 1) (c-mode . 1) (nil . 1)) "Effect" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "indent" ((Custom-mode . 1) (nil . 1)) "system" ((Custom-mode . 1) (nil . 1)) "grt" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "val" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "enum") . 1) (c-mode . 1) (nil . 1)) "sp-with-modes" (((:file "/home/lk/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "line" ((nil . 4) (Custom-mode . 3)) "offering" ((lisp-interaction-mode . 1) (nil . 1)) "capabilities" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "border." ((lisp-interaction-mode . 1) (nil . 1)) "clojure.core/quot" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "compilation" ((Custom-mode . 1) (nil . 1)) "+" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 2) ((:keyword "λ") . 1) (lisp-interaction-mode . 1)) "coll?" ((cider-repl-mode . 1) (nil . 1) ((:keyword "if") . 1) ((:keyword "or") . 1) ((:keyword "fn") . 1)) "mode" ((Custom-mode . 24) (nil . 24)) "ns-interns" ((cider-repl-mode . 1) (nil . 1)) ":all" ((cider-repl-mode . 1) (nil . 1) ((:keyword "quote") . 1)) "testln" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "do") . 1) (sh-mode . 1) (nil . 1)) ":end2" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "highlight" ((Custom-mode . 5) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 5)) "performing" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "map" ((cider-repl-mode . 3) (nil . 3) ((:keyword "let") . 1) ((:keyword "doc") . 3)) "/boot/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "operate" ((Custom-mode . 1) (nil . 1)) "boardLoc" ((c-mode . 1) (nil . 1)) "0000.0000" ((lisp-interaction-mode . 1) (nil . 1)) "rest" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "int8_t" ((c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "switch") . 1)) "grub" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "flycheck-inline-mode" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 2) ((:keyword "λ") . 1) (lisp-interaction-mode . 1)) "~/.emacs.d/irony/bin/irony-server" ((Custom-mode . 1) (nil . 1)) "c/c++-clang" (((:keyword "fmap") . 1) (emacs-lisp-mode . 1) (nil . 1)) "func" ((Custom-mode . 1) (nil . 1)) "decoration" ((Custom-mode . 1) (nil . 1)) "eldoc" ((Custom-mode . 4) (nil . 5) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1)) "bitmap" ((Custom-mode . 1) (nil . 1)) "ret" (((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1) ((:keyword "return") . 1) (rustic-mode . 1) (nil . 1)) "enable" ((Custom-mode . 1) (nil . 1)) "intmax_t" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "uint" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) (c-mode . 1) (nil . 1)) "c-turn-on-eldoc-mode" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "m64_bit" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) (c-mode . 1) (nil . 1)) "printfspam" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 2) (c-mode . 2) (nil . 2) ((:keyword "for") . 1)) "andmask64__below_nth_bit" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "classcastexception" ((term-mode . 1) (nil . 1)) "10" ((lisp-interaction-mode . 1) (nil . 1)) "mask_low_n" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "31" ((lisp-interaction-mode . 1) (nil . 1)) "clojure.core" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "byte-array" (((:keyword "quote") . 1) (cider-repl-mode . 1) (nil . 1)) "primes-assoc" (((:keyword "if") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "fn") . 1)) "seq" ((cider-repl-mode . 1) (nil . 1)) "char" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "~/bin/" ((Custom-mode . 1) (nil . 1)) "asciidoc" ((Custom-mode . 1) (nil . 1)) "warning" ((Custom-mode . 2) (nil . 2)) "original" (((:file "/home/lk/.emacs.d/elpa/fn-20170210.204/fn-pkg.el") . 1) (xah-elisp-mode . 1) (nil . 1)) "green" ((Custom-mode . 1) (nil . 1)) "transduce" ((cider-repl-mode . 1) (nil . 1) ((:keyword "doc") . 1)) "conj" ((cider-repl-mode . 1) (nil . 1) ((:keyword "recur") . 1)) "ff2520" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "reduce" ((nil . 1) ((:keyword "cond") . 1) (lisp-interaction-mode . 1)) "even-numbers" ((cider-repl-mode . 1) (nil . 1) ((:keyword "doc") . 1)) "setup" ((Custom-mode . 3) (nil . 3)) "symbol" ((nil . 3) (Custom-mode . 3)) "file" ((Custom-mode . 1) (nil . 2) (lisp-interaction-mode . 1)) "lazy-seq" (((:file "/home/lk/self/projects/lang_clojure/brave/nb/src/nb/core.clj") . 1) ((:keyword "lazy-seq") . 1) (clojure-mode . 1) (nil . 1)) "seqable?" (((:keyword "if-let") . 1) (cider-repl-mode . 2) (nil . 2) ((:keyword "if") . 1)) "comment" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "id" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "fp" (((:file "/home/lk/self/projects/lang_c/fnptr.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "../primitive.h" (((:file "/home/lk/self/projects/lang_c/lispy/types/tests/primitive.c.test") . 1) (fundamental-mode . 1) (nil . 1)) "ptrsize" (((:file "/home/lk/self/projects/lang_c/lispy/types/tests/t.primitive.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "str" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 2) ((:keyword "return") . 1) (c-mode . 2) (nil . 2) ((:keyword "sizeof") . 1)) "__ptr_t" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "__ssize_t_defined" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "id_t" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) ((:keyword "typedef") . 1) (c-mode . 1) (nil . 1)) "UINTPTR_MAX" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) (c-mode . 1) (nil . 1)) "uintptr_t" (((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1) (c-mode . 1) (nil . 1)) "ab00eb" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "auto-highlight-symbol" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "face" ((Custom-mode . 5) (nil . 5)) "flycheck-clang-analyzer" (((:file "/home/lk/.emacs.d/init.el") . 3) ((:keyword "lambda") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "defmacro") . 1)) "flycheck" ((Custom-mode . 14) (nil . 14)) "contrasts" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "emacs-lisp-mode" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "checkdoc-minor-mode" (((:keyword "fmap") . 1) (emacs-lisp-mode . 1) (nil . 1)) "c/c++-cppcheck" (((:keyword "fmap") . 1) (emacs-lisp-mode . 1) (nil . 1)) "adoption" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "a800e8" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "irony" ((Custom-mode . 4) (nil . 4)) "n_Obj" (((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "obj_node" (((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2)) "symbol-function" (((:file "/home/lk/.emacs.d/init.el") . 3) ((:keyword "or") . 1) (emacs-lisp-mode . 3) (nil . 4) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1) (inferior-emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:keyword "interactive") . 1)) "apply" (((:keyword "lambda") . 1) (lisp-interaction-mode . 1) (nil . 2) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1) (inferior-emacs-lisp-mode . 1)) "expression" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "1000" (((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1) ((:keyword "%h") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1)) "closure" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "%h") . 1) (emacs-lisp-mode . 1) (nil . 1)) "concatenate" (((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "seq-do-indexed" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "alias" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "elem" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "λ") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lexical-binding:" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eval" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "col-space" (((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 4) ((:keyword "lambda") . 1) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "if") . 1) ((:keyword "and") . 2)) "applying" (((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "auto-complete-mode" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "1111" (((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sequencep" (((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1) ((:keyword "let*") . 1) (emacs-lisp-mode . 1) (nil . 1)) "COLS" (((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "x*x*x" ((lisp-interaction-mode . 1) (nil . 1)) "first" (((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1) ((:keyword "setf") . 1) (emacs-lisp-mode . 1) (nil . 1)) "semantic-decoration-on-includes" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "progn") . 1) (emacs-lisp-mode . 1) (nil . 1)) "flycheck-clang-tidy" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "flycheck-clang-analyser-setup" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "call-c-eldoc-cleanup" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "ac-etags-setup" (((:keyword "λ") . 1) (lisp-interaction-mode . 1) (nil . 1)) "modes" ((Custom-mode . 2) (nil . 2)) "hook" ((Custom-mode . 2) (nil . 6) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 4) (fundamental-mode . 4)) "3x*3x" ((lisp-interaction-mode . 1) (nil . 1)) "1/2*1/2*1/2" ((lisp-interaction-mode . 1) (nil . 1)) "ac" ((Custom-mode . 2) (nil . 2)) "statistics" ((Custom-mode . 1) (nil . 1)) "minibuffer" ((Custom-mode . 1) (nil . 1)) "inline" ((Custom-mode . 1) (nil . 1)) "tooltip" ((Custom-mode . 1) (nil . 2) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1) ((:keyword "defcustom") . 1) (emacs-lisp-mode . 1)) "semantic-custom-minor-modes-hook" (((:keyword "defun") . 1) (lisp-interaction-mode . 1) (nil . 1)) "arguments" ((Custom-mode . 1) (nil . 1)) "minor" ((Custom-mode . 2) (nil . 2)) "more" ((Custom-mode . 1) (nil . 1)) "lambda" ((Custom-mode . 2) (nil . 4) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) ((:keyword "λ") . 1) (lisp-interaction-mode . 1)) "cider-enlighten-mode" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evaluation." ((lisp-interaction-mode . 1) (nil . 1)) "branch" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "enum") . 1) (c-mode . 1) (nil . 1)) "add-hook" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "global-auto-complete-mode" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "prog-minor-modes" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "autocompletion" ((Custom-mode . 1) (nil . 1)) "emacs-lisp-macroexpand" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "λ") . 1) (emacs-lisp-mode . 1) (nil . 1)) "macro" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "defalias") . 1) (emacs-lisp-mode . 1) (nil . 1)) "alloc_pages" (((:file "/home/lk/self/projects/lang_c/pcast.c") . 1) ((:keyword "typedef") . 1) (c-mode . 1) (nil . 1)) "emacs-lisp-mode-hook" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "semantic-default-elisp-setup" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "gc-cons-threshold" (((:file "/home/lk/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "button" ((Custom-mode . 2) (nil . 2)) "include" ((Custom-mode . 2) (nil . 2)) "lightsalmon3" ((Custom-mode . 2) (nil . 2)) "bitmaps" ((Custom-mode . 1) (nil . 1)) "symbol-overlay" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "wordbreak" (((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1) ((:keyword "mut") . 1) (rustic-mode . 1) (nil . 1)) "config" ((Custom-mode . 2) (nil . 2)) "unsigned" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 5) ((:keyword "sizeof") . 3) (c-mode . 5) (nil . 5) ((:keyword "return") . 1) ((:keyword "while") . 1)) "/usr/local/include/" ((Custom-mode . 1) (nil . 1)) "__LONG_LONG_MAX__" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "__LONG_MAX__" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "__UINTMAX_WIDTH__" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 2) ((:keyword "sizeof") . 2) (c-mode . 2) (nil . 2)) "WINT_MAX" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "andmask8__bottom_n_bits" (((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 3) (c-mode . 3) (nil . 3)) "2048" ((lisp-interaction-mode . 1) (nil . 1)) "7395" ((lisp-interaction-mode . 1) (nil . 1)) "-take" (((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cider" ((Custom-mode . 1) (nil . 1)) "rust" ((lisp-interaction-mode . 1) (nil . 1)) "all" ((Custom-mode . 1) (nil . 1)) "stop" ((Custom-mode . 1) (nil . 1)) "auto-complete" (((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1) ((:keyword "defcustom") . 1) (emacs-lisp-mode . 1) (nil . 1)) "symbol-value" (((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 3) ((:keyword "defcustom") . 1) (emacs-lisp-mode . 3) (nil . 4) ((:keyword "lambda") . 1) ((:keyword "or") . 1) ((:keyword "setq") . 1) (lisp-interaction-mode . 1)) "ac-stop-flycheck-on-completing" (((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 7) ((:keyword "defcustom") . 1) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "lambda") . 3) ((:keyword "or") . 1) ((:keyword "setf") . 2)) "ac-stop-flymake-on-completing" (((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 4) ((:keyword "defcustom") . 2) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "lambda") . 1) ((:keyword "or") . 1)) "-main" (((:keyword "do") . 1) (cider-repl-mode . 1) (nil . 1)) "opencl-constant-regexp" (((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 1) ((:keyword "progn") . 1) (emacs-lisp-mode . 1) (nil . 1)) "indexed?" ((cider-repl-mode . 1) (nil . 1)) "malinka" ((Custom-mode . 1) (nil . 1)) "make-symbol" (((:keyword "defalias") . 1) (lisp-interaction-mode . 1) (nil . 1)) "deconj" ((cider-repl-mode . 1) (nil . 1)) "clang" ((Custom-mode . 1) (nil . 1)) "default" ((Custom-mode . 1) (nil . 1)) "argument" ((Custom-mode . 1) (nil . 1)))) company-statistics--log [("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("list" (nil . 4) (cider-repl-mode . 4) ((:keyword "if") . 2)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "fn") . 1)) ("coll?" (nil . 1) (cider-repl-mode . 1) ((:keyword "or") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "or") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("conj" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("split-at" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("println" (nil . 1) (cider-repl-mode . 1) ((:keyword "let") . 1)) ("list" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "defmacro") . 1)) ("+" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("clojure.core/quot" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("quote" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("unquote" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("clojure.repl/source-fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 2)) ("clojure.repl/source-fn" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("->" (nil . 2) (cider-repl-mode . 2) ((:keyword "quote") . 2)) ("->" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("file" (nil . 1) (Custom-mode . 1)) ("lazy-seq" (nil . 1) (clojure-mode . 1) ((:keyword "lazy-seq") . 1) ((:file "/home/lk/self/projects/lang_clojure/brave/nb/src/nb/core.clj") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("if-let" (nil . 2) (cider-repl-mode . 2) ((:keyword "doc") . 1)) ("accessor" (nil . 2) (cider-repl-mode . 2) ((:keyword "if-let") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("accessor" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("seqable?" (nil . 2) (cider-repl-mode . 2) ((:keyword "if-let") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "if-let") . 1)) ("if-let" (nil . 1) (cider-repl-mode . 1) ((:keyword "recur") . 1)) ("seqable?" (nil . 1) (cider-repl-mode . 1) ((:keyword "if") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 3)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("map" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("cat" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("even-numbers" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 2)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("vector" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("cons" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("nil" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("transduce" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) (":all" (nil . 1) (cider-repl-mode . 1) ((:keyword "quote") . 1)) ("rest" (nil . 1) (cider-repl-mode . 1) ((:keyword "doc") . 1)) ("6x^2" (nil . 2) (lisp-interaction-mode . 2)) ("6x^2" (nil . 1) (lisp-interaction-mode . 1)) ("27/2" (nil . 2) (lisp-interaction-mode . 2)) ("27/2" (nil . 1) (lisp-interaction-mode . 1)) ("comment" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/fnptr.c") . 2)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/fnptr.c") . 1)) ("fp" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/fnptr.c") . 1)) ("../primitive.h" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/tests/primitive.c.test") . 1)) ("ptrsize" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/tests/t.primitive.c") . 1)) ("str" (nil . 2) (c-mode . 2) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 2)) ("str" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("uint16_t" (nil . 1) (c-mode . 1) ((:keyword "typedef") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:keyword "switch") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("__ptr_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("__ssize_t_defined" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("lptrf" (nil . 1) (c-mode . 1) ((:keyword "typedef") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("id_t" (nil . 1) (c-mode . 1) ((:keyword "typedef") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("UINTPTR_MAX" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("uintptr_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/lispy/types/primitive.h") . 1)) ("ab00eb" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("stickyfunc" (nil . 2) (Custom-mode . 2)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic-complete-inline-analyzer-displayor-class" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "lambda") . 2) ((:file "/home/lk/.emacs.d/init.el") . 2)) ("semantic-complete-inline-analyzer-displayor-class" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("flycheck-inline-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("auto-highlight-symbol" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 2)) ("line" (nil . 1) (Custom-mode . 1)) ("face" (nil . 4) (Custom-mode . 4)) ("flycheck-clang-analyzer" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "lambda") . 2) ((:file "/home/lk/.emacs.d/init.el") . 2)) ("flycheck-clang-analyzer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("flycheck" (nil . 2) (Custom-mode . 2)) ("~/.emacs.d/irony/bin/irony-server" (nil . 1) (Custom-mode . 1)) ("emacs-lisp-mode" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("checkdoc-minor-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "fmap") . 1)) ("egg-minor-mode" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "fmap") . 2)) ("c/c++-clang" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "fmap") . 1)) ("c/c++-cppcheck" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "fmap") . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("func" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("stickyfunc" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("decoration" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("eldoc" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("00aeae" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("overlay" (nil . 1) (Custom-mode . 1)) ("egg-minor-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "fmap") . 1)) ("nil." (nil . 3) (emacs-lisp-mode . 3) ((:keyword "fmap") . 1)) ("nil." (nil . 1) (emacs-lisp-mode . 1) ((:keyword "λ") . 1)) ("nil." (nil . 1) (emacs-lisp-mode . 1) ((:keyword "function") . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("auto" (nil . 1) (Custom-mode . 1)) ("modeline" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("flycheck-cstyle" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1)) ("/tmp/emacs/irony.2018-09-13_06h-04m-51s.log" (nil . 2) (Custom-mode . 2)) ("/tmp/emacs/irony.2018-09-13_06h-04m-51s.log" (nil . 1) (Custom-mode . 1)) ("semantics" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("flycheck-cstyle" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defmacro") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("flycheck-clang-analyzer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defmacro") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("a800e8" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("irony" (nil . 1) (Custom-mode . 1)) ("n_Obj" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1)) ("n3_Obj" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1)) ("obj_node" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 2)) ("obj_node" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1)) ("struct" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/lispy/lHAMT.c") . 1)) ("right" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("symbol-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("apply" (nil . 2) (lisp-interaction-mode . 1) ((:keyword "lambda") . 1)) ("apply-partially" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "lambda") . 3)) ("help" (nil . 1) (inferior-emacs-lisp-mode . 1)) ("backquote-backquote-symbol" (nil . 1) (inferior-emacs-lisp-mode . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("funcall" (nil . 2) (inferior-emacs-lisp-mode . 2) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 2)) ("symbol-function" (nil . 1) (inferior-emacs-lisp-mode . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("apply" (nil . 1) (inferior-emacs-lisp-mode . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("funcall" (nil . 1) (inferior-emacs-lisp-mode . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("edebug--read" (nil . 1) (inferior-emacs-lisp-mode . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("1000" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "%h") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrm.el") . 1)) ("cons" (nil . 1) (emacs-lisp-mode . 2) ((:keyword "%h") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 2)) ("closure" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "%h") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("args" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("expression" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 7) (emacs-lisp-mode . 7) ((:keyword "let") . 3) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 6)) ("*string-output*" (nil . 1) (emacs-lisp-mode . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1)) ("concatenate" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1)) ("args" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "map-let") . 1)) ("seq-do-indexed" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("elem" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "λ") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("cons" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "λ") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("lexical-binding:" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("nil." (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("alias" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 2) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("eval" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("ARGS2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("backquote" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("apply-partially" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 2)) ("apply-partially" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("Effect" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("1111" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("1000" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/rdrn.el") . 1)) ("sequencep" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let*") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("COLS" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("first" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setf") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("col-space" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 4)) ("col-space" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("col-space" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "and") . 2) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("col-space" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "and") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("nil." (nil . 1) (emacs-lisp-mode . 1) ((:keyword "and") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 2)) ("nil." (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("applying" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/self/projects/emacs-git/reduce-n.el") . 1)) ("semantic-decoration-on-includes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("lk-windowsize" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("flycheck-clang-tidy" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("call-c-eldoc-cleanup" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("c-mode-hook" (nil . 2) (lisp-interaction-mode . 2) ((:keyword "λ") . 2)) ("flycheck-clang-analyser-setup" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("c-mode-hook" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("ac-etags-setup" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("auto-complete-mode" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("flycheck-inline-mode" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("symbol" (nil . 1) (Custom-mode . 1)) ("hook" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("modes" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("eldoc" (nil . 1) (Custom-mode . 1)) ("global-company-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("ac" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("lock" (nil . 1) (Custom-mode . 1)) ("symbol" (nil . 1) (Custom-mode . 1)) ("statistics" (nil . 1) (Custom-mode . 1)) ("minibuffer" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("inline" (nil . 1) (Custom-mode . 1)) ("tooltip" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic-custom-minor-modes-hook" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "defun") . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("cstyle" (nil . 1) (Custom-mode . 1)) ("hook" (nil . 1) (Custom-mode . 1)) ("arguments" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("minor" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("more" (nil . 1) (Custom-mode . 1)) ("lambda" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("indent" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("interaction" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("lambda" (nil . 1) (Custom-mode . 1)) ("cider-enlighten-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("evaluation." (nil . 1) (lisp-interaction-mode . 1)) ("apply-partially" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("add-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("global-auto-complete-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("prog-minor-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("autocompletion" (nil . 1) (Custom-mode . 1)) ("emacs-lisp-macroexpand" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "λ") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("macro" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defalias") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("alloc_pages" (nil . 1) (c-mode . 1) ((:keyword "typedef") . 1) ((:file "/home/lk/self/projects/lang_c/pcast.c") . 1)) ("emacs-lisp-mode-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("semantic-default-elisp-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("gc-cons-threshold" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("button" (nil . 2) (Custom-mode . 2)) ("face" (nil . 1) (Custom-mode . 1)) ("button" (nil . 1) (Custom-mode . 1)) ("include" (nil . 1) (Custom-mode . 1)) ("system" (nil . 1) (Custom-mode . 1)) ("company" (nil . 1) (Custom-mode . 1)) ("compilation" (nil . 1) (Custom-mode . 1)) ("warning" (nil . 1) (Custom-mode . 1)) ("warning" (nil . 1) (Custom-mode . 1)) ("lightsalmon3" (nil . 2) (Custom-mode . 2)) ("lightsalmon3" (nil . 1) (Custom-mode . 1)) ("bitmap" (nil . 1) (Custom-mode . 1)) ("bitmaps" (nil . 1) (Custom-mode . 1)) ("semantics" (nil . 1) (Custom-mode . 1)) ("compile-init" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("symbol-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("as_ptr" (nil . 1) (rustic-mode . 1) ((:keyword "mut") . 1) ((:symbol "s") . 1) ((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1)) ("symbol-overlay" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("ret" (nil . 1) (rustic-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1)) ("wordbreak" (nil . 1) (rustic-mode . 1) ((:keyword "mut") . 1) ((:file "/home/lk/self/projects/lang_rust/tut/libtut/src/main.rs") . 1)) ("config" (nil . 2) (Custom-mode . 2)) ("config" (nil . 1) (Custom-mode . 1)) ("enable" (nil . 1) (Custom-mode . 1)) ("include" (nil . 1) (Custom-mode . 1)) ("/usr/local/include/" (nil . 1) (Custom-mode . 1)) ("unsigned" (nil . 5) (c-mode . 5) ((:keyword "sizeof") . 3) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 5)) ("intmax_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("__LONG_LONG_MAX__" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("__LONG_MAX__" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("__UINTMAX_WIDTH__" (nil . 2) (c-mode . 2) ((:keyword "sizeof") . 2) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 2)) ("__UINTMAX_WIDTH__" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("WINT_MAX" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("uint" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("ULLONG_MAX" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("eldoc" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("eldoc-overlay-disable" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("c-turn-on-eldoc-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("m64_bit" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("andmask8__bottom_n_bits" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 3)) ("uint8_t" (nil . 7) (c-mode . 7) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 7)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("printf" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("andmask8__bottom_n_bits" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("andmask8__bottom_n_bits" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("printfspam" (nil . 2) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 2)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "const") . 5) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("andmask64__below_nth_bit" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("printfspam" (nil . 1) (c-mode . 1) ((:keyword "for") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("file" (nil . 1) (lisp-interaction-mode . 1)) ("10" (nil . 1) (lisp-interaction-mode . 1)) ("2048" (nil . 1) (lisp-interaction-mode . 1)) ("31" (nil . 1) (lisp-interaction-mode . 1)) ("7395" (nil . 1) (lisp-interaction-mode . 1)) ("reduce" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "cond") . 1)) ("cons" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "if") . 1)) ("-take" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1)) ("primes-assoc" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "if") . 1)) ("primes-assoc" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "fn") . 1)) ("mask_low_n" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("char" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/kwtrie.c") . 1)) ("irony" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("irony" (nil . 1) (Custom-mode . 1)) ("eldoc" (nil . 1) (Custom-mode . 1)) ("~/bin/" (nil . 1) (Custom-mode . 1)) ("cider" (nil . 1) (Custom-mode . 1)) ("rust" (nil . 1) (lisp-interaction-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("analyzer" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("cstyle" (nil . 1) (Custom-mode . 1)) ("asciidoc" (nil . 1) (Custom-mode . 1)) ("minor" (nil . 1) (Custom-mode . 1)) ("modes" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("all" (nil . 1) (Custom-mode . 1)) ("ac" (nil . 1) (Custom-mode . 1)) ("stop" (nil . 1) (Custom-mode . 1)) ("tooltip" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defcustom") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("auto-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defcustom") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("symbol-value" (nil . 4) (emacs-lisp-mode . 3) ((:keyword "defcustom") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 3)) ("ac-stop-flycheck-on-completing" (nil . 7) (emacs-lisp-mode . 7) ((:keyword "defcustom") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 7)) ("ac-stop-flymake-on-completing" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "defcustom") . 2) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 4)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 3) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("symbol-value" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flymake-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("symbol-value" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flymake-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flymake-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defcustom") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("symbol-value" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "setq") . 1)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setf") . 2) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("ac-stop-flycheck-on-completing" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setf") . 1) ((:file "/home/lk/.emacs.d/ac-fly-modes-patch.el") . 1)) ("line" (nil . 1) (Custom-mode . 1)) (":end2" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("lambda" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("original" (nil . 1) (xah-elisp-mode . 1) ((:file "/home/lk/.emacs.d/elpa/fn-20170210.204/fn-pkg.el") . 1)) ("symbol-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("fn" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("hook" (nil . 1) (fundamental-mode . 4) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 4)) ("hook" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 1)) ("hook" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 1)) ("hook" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 1)) ("opencl-constant-regexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/xem-backup/init-prune-snippets") . 1)) ("malinka" (nil . 1) (Custom-mode . 1)) ("make-symbol" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "defalias") . 1)) ("defun" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "defalias") . 1)) ("+" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "λ") . 1)) ("company" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("clang" (nil . 1) (Custom-mode . 1)) ("analyzer" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("cstyle" (nil . 1) (Custom-mode . 1)) ("setup" (nil . 3) (Custom-mode . 3)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("irony" (nil . 1) (Custom-mode . 1)) ("setup" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("default" (nil . 1) (Custom-mode . 1)) ("setup" (nil . 1) (Custom-mode . 1)) ("eldoc" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("overlay" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("overlay" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("operators" (nil . 1) (Custom-mode . 1)) ("symbol" (nil . 1) (Custom-mode . 1)) ("overlay" (nil . 1) (Custom-mode . 1)) ("background" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("335f86" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("operate" (nil . 1) (Custom-mode . 1)) ("argument" (nil . 1) (Custom-mode . 1))] company-statistics--index 0)