(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ("my.lib" (((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/test/tryclj/core_test.clj") . 1) ((:keyword "deftest") . 1) (clojure-mode . 1) (nil . 1)) "combinatorics" (((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/test/tryclj/core_test.clj") . 1) ((:keyword "deftest") . 1) (clojure-mode . 1) (nil . 1)) "/usr/bin/cmake" (((:symbol "nil") . 1) (nil . 1)) "~/.emacs.d/auto-backup-list/" ((Custom-mode . 3) (nil . 6) ((:file "/home/lk/.emacs.d/early-init.el") . 2) (emacs-lisp-mode . 3) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "unless") . 1)) "quote" ((Custom-mode . 1) (nil . 1)) "that" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) (clojure-mode . 1) (nil . 1)) "setenv" ((lisp-interaction-mode . 1) (nil . 1)) "Terminal" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "shell-command" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "progn") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package-enable-at-startup" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "wchar_t" (((:file "/home/workbench-lk/c/mini.patience.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "concat" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 2) ((:keyword "defn") . 1) (cider-repl-mode . 1)) "symbol-plist" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":plugins" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "defmacro" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1)) "0.2.12" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "org.clojure/tools.nrepl" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "problem-block-1.core" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 2) ((:keyword "ns") . 2) (clojure-mode . 2) (nil . 3) (cider-repl-mode . 1)) "flycheck" ((Custom-mode . 4) (nil . 5) ((:file "/home/lk/self/.notes") . 1) (fundamental-mode . 1)) "true" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "val" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) ":gen-class" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1) ((:keyword "ns") . 1) (clojure-mode . 1) (nil . 1)) "mode" ((Custom-mode . 7) (nil . 7)) "~/.emacs.d/.mc-lists.el" ((Custom-mode . 2) (nil . 2)) "prn" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "prnt-strng" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "defn" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "conj" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "read" (((:keyword "defn") . 1) (cider-repl-mode . 1) (nil . 1)) "apropos" (((:keyword "def") . 1) (cider-repl-mode . 1) (nil . 1)) "/usr/lib/gcc/x86_64-linux-gnu/8.0.1/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "list?" ((cider-repl-mode . 1) (nil . 1)) "rest" ((cider-repl-mode . 1) (nil . 1)) "execv" (((:keyword "const") . 1)) "repl" ((Custom-mode . 2) (nil . 2)) "cljc" ((Custom-mode . 2) (nil . 2)) "envar" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "sp-qfix-repl" (((:keyword "interactive") . 1) (lisp-interaction-mode . 1) (nil . 1)) "arglen" (((:keyword "while") . 1) ((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:symbol "nil") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "signal" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-local-pair" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "progn") . 1) (emacs-lisp-mode . 1) (nil . 1)) "squeezes" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "square" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 6) ((:keyword "struct") . 4) (c-mode . 11) (nil . 11) ((:symbol "nil") . 1) ((:symbol "nm") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 4) ((:symbol "board") . 4) ((:keyword "union") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "avar") . 1) ((:keyword "return") . 1) ((:keyword "sizeof") . 1)) "/lib/init/init-d-script" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "else" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4) ((:keyword "struct") . 4) (c-mode . 4) (nil . 4) ((:symbol "i") . 1)) "own_square" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 7) ((:keyword "struct") . 4) (c-mode . 7) (nil . 7) ((:symbol "Square") . 2) ((:symbol "square") . 1)) "/var/lib/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "include" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 6) ((:keyword "struct") . 5) (c-mode . 6) (nil . 9) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3) (text-mode . 3)) "forward" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "board" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4) ((:keyword "struct") . 1) (c-mode . 5) (nil . 5) ((:symbol "chessimpl") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "1") . 1) ((:keyword "union") . 1)) "occupied" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 9) ((:keyword "struct") . 7) (c-mode . 10) (nil . 10) ((:symbol "own") . 1) ((:symbol "Square") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "sqr") . 1) ((:keyword "union") . 1)) "is_lesser" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Square") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "const" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "fork" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "exit" ((c-mode . 1) (nil . 1)) "select" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "occupied_white" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "intel_lpss_pci" (((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "static" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "member" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "piece") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pic__" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) "car_size" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "_tpadtoggle" (((:file "/home/workbench-lk/c/tpad/v3/tpadtoggle.s.l.euid.c") . 1)) "0000" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2)) "execve" (((:file "/home/workbench-lk/c/tpadtoggle.standards.c") . 1) ((:symbol "nil") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "Piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 6) ((:symbol "board") . 5) ((:keyword "struct") . 6) (c-mode . 6) (nil . 6)) "empty" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) ((:keyword "struct") . 1) (c-mode . 2) (nil . 2)) "unsigned" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) ((:keyword "struct") . 1) (c-mode . 2) (nil . 2)) "Square" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 3) ((:symbol "board") . 3) ((:keyword "struct") . 3) (c-mode . 3) (nil . 3)) "total" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Square") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "movement_nd_flag" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 3) ((:symbol "Piece") . 3) ((:keyword "struct") . 3) (c-mode . 3) (nil . 3)) "white_piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) ((:symbol "Piece") . 2) ((:keyword "struct") . 2) (c-mode . 5) (nil . 5) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3) ((:symbol "piece") . 3) ((:keyword "sizeof") . 3)) "company" ((Custom-mode . 1) (nil . 1)) "printf" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_1" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Square") . 1) ((:keyword "struct") . 1) (c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "square") . 2) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:keyword "sizeof") . 1)) "movement_nh_flag" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Piece") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "nonaxial_movement" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Piece") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "block" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "these" ((nil . 3) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 7) (text-mode . 7)) "out_of_bounds" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4) ((:symbol "Square") . 1) ((:keyword "struct") . 1) (c-mode . 4) (nil . 4) ((:symbol "square") . 2) ((:symbol "nm") . 1)) "ignorepermit" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "interchangeable" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "bits" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) (c-mode . 4) (nil . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 2) ((:keyword "struct") . 2)) "interface" ((lisp-interaction-mode . 1) (nil . 1)) "volume" ((lisp-interaction-mode . 1) (nil . 1)) "allocation" ((nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) ((:symbol "nil") . 1) (lisp-interaction-mode . 1)) "form" ((lisp-interaction-mode . 1) (nil . 1)) "capabilities" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2) (c-mode . 2) (nil . 2)) "adjacent_movement" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "additional" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 2) ((:symbol "nil") . 1) (Custom-mode . 1)) "them" (((:file "/home/lk/self/projects/journal/ancient/the-usual-allusions.txt") . 1) (text-mode . 1) (nil . 1)) "intent" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3) (text-mode . 3) (nil . 3)) "semantics" ((lisp-interaction-mode . 1) (nil . 1)) "tests" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "piece" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2) ((:symbol "board") . 2) ((:keyword "union") . 1) (c-mode . 2) (nil . 2) ((:keyword "sizeof") . 1)) "__pad_total_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "square") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "abstraction" ((lisp-interaction-mode . 1) (nil . 1)) "uint8" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) ((:symbol "int_t") . 1) (text-mode . 1) (nil . 1)) "backed" ((lisp-interaction-mode . 1) (nil . 1)) "done" (((:file "/home/workbench-lk/cmdline/bash/nestfor") . 1)) "common" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "nil") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "square") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "debuggy_rawtest" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "iter_from" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "echo" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "iter_to" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) ((:keyword "function") . 1) (sh-mode . 1) (nil . 1)) "00baa5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "matchln" (((:keyword "fi") . 1) ((:keyword "do") . 1) ((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "00efff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "groupln" (((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "darkorange3" ((Custom-mode . 1) (nil . 1)) "c::test" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "violetred1" ((Custom-mode . 1) (nil . 1)) "ff2520" (((:symbol "nil") . 2) (Custom-mode . 2) (nil . 2)) "normal" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 2) (nil . 2)) "!match" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) ":inherit" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "/boot/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "install" (((:symbol "nil") . 1)) "Green" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "/dev/sda" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "DarkOrange3" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "/etc/.pwd.lock" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "performing" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2) (text-mode . 2) (nil . 2)) "println" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 7) ((:keyword "ns") . 1) (cider-repl-mode . 6) ((:keyword "defn") . 1)) "previously" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "note" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 5) (text-mode . 5) (nil . 5)) "mount" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "nowfiles" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "unencrypted" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "need" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "installation" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "/usr/share/grub/ascii.h" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "used" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3) ((:symbol "nil") . 1) (text-mode . 3) (nil . 3)) "args" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 2) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) ((:symbol "nil") . 1) (fundamental-mode . 1)) "../efi/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2) (text-mode . 2) (nil . 2)) "configured" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3) (text-mode . 3) (nil . 3)) "'10s" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "mkdir" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "fstab" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 4) ((:symbol "TYPE") . 1) (text-mode . 4) (nil . 4)) "embedded" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3) (text-mode . 3) (nil . 3)) "share" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "file" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3) (text-mode . 3) (nil . 3)) "crypto" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) ((:symbol "nil") . 1) (text-mode . 1) (nil . 1)) "following" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "device" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "your" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 5) (text-mode . 5) (nil . 5)) "it's" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2) (text-mode . 2) (nil . 3) ((:file "/home/lk/self/projects/journal/ancient/seventeen-syllables.txxt") . 1) (fundamental-mode . 1)) "core" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "xxxx" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "grub" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 4) (text-mode . 4) (nil . 4)) "encrypted" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "normally" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "from" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "path" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "/etc/fstab" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "subvol" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) ((:symbol "nil") . 1) (text-mode . 1) (nil . 1)) "text" ((Custom-mode . 1) (nil . 1)) "cd-create-profile" ((shell-mode . 1) (nil . 1)) "git" ((shell-mode . 1) (nil . 1)) "scripts/../" (((:symbol "nil") . 3) (shell-mode . 3) (nil . 3)) "~/.nicotine/" ((shell-mode . 1) (nil . 1)) "~/.bash_history" ((shell-mode . 1) (nil . 1)) "/bin/bash" ((Custom-mode . 1) (nil . 1)) "cksum" ((shell-mode . 1) (nil . 1)) "24bit" ((Custom-mode . 2) (nil . 2)) "/usr/share/emacs/26.1/" ((Custom-mode . 1) (nil . 1)) "/usr/share/emacs/26.1/lisp/" ((Custom-mode . 1) (nil . 1)) "256color" ((Custom-mode . 1) (nil . 1)) "term" ((Custom-mode . 3) (nil . 4) ((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1)) "hide" ((Custom-mode . 1) (nil . 1)) "selecting" ((Custom-mode . 1) (nil . 1)) "cider/cider-nrepl" (((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 2) ((:keyword "defproject") . 5) (clojure-mode . 6) (nil . 6) ((:file "/home/lk/self/projects/lang_clojure/cider-handler/project.clj") . 1) ((:file "/home/lk/self/projects/lang_clojure/cider-nrepl-handler/project.clj") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 2)) "terminfo" ((Custom-mode . 1) (nil . 1)) "tryclj.core" (((:keyword "ns") . 1) (cider-repl-mode . 2) (nil . 2)) ":gen" (((:keyword "ns") . 1) (cider-repl-mode . 1) (nil . 1)) "find-doc" ((cider-repl-mode . 2) (nil . 2)) "../../cider-handler/" ((term-mode . 1) (nil . 1)) ":dependencies" (((:file "/home/lk/self/projects/lang_clojure/cider-handler/project.clj") . 1) (clojure-mode . 1) (nil . 1)) "eldoc" ((Custom-mode . 1) (nil . 1)) "function" ((Custom-mode . 1) (nil . 1)) "clojure" ((Custom-mode . 1) (nil . 1)) "modeformatting" ((Custom-mode . 1) (nil . 1)) "reporting" (((:file "/home/lk/self/.notes") . 1) (fundamental-mode . 1) (nil . 1)) "/usr/lib/jvm/java-10-openjdk/bin/" ((Custom-mode . 1) (nil . 1)) "cider-handler" (((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/cider_handler.clj") . 1) ((:keyword "defn") . 1) (clojure-mode . 1) (nil . 1)) "0.18.0-SNAPSHOT" (((:file "/home/lk/.lein/profiles.clj") . 1) (clojure-mode . 7) (nil . 7) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/profiles.clj") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 2) ((:keyword "defproject") . 5) ((:file "/home/lk/self/projects/lang_clojure/cider-nrepl-handler/project.clj") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 2)) ":profiles" (((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "ns" ((cider-repl-mode . 2) (nil . 2)) "attr-map?" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) ((:keyword "ns") . 1) (clojure-mode . 1) (nil . 1)) "global-company-mode" (((:file "/home/lk/.emacs") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lk-windowsize" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "assignment" (((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1) (clojure-mode . 1) (nil . 1)) "window-state-get" ((lisp-interaction-mode . 1) (nil . 1)) "theme-lksettings-2018-06-07" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "unless") . 1) (emacs-lisp-mode . 1) (nil . 1)) "command-execute" (((:file "/home/lk/.emacs") . 1) ((:keyword "and") . 1) (emacs-lisp-mode . 1) (nil . 1)) "custom-set-variables" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package-quickstart" (((:file "/home/lk/.emacs.d/early-init.el") . 2) (emacs-lisp-mode . 2) (nil . 2)) "package-user-dir" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "require" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "unless") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cond" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "comments" ((Custom-mode . 1) (nil . 1)) ":exclusions" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "org.clojure/clojure" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "prob-eq-true" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/core.clj") . 1) ((:keyword "defn") . 1) (clojure-mode . 1) (nil . 1)) "memory" (((:file "/home/lk/self/projects/journal/ancient/i-trace-the-lines.txt") . 1) (text-mode . 1) (nil . 1)) "strcasecmp" (((:file "/home/workbench-lk/projects/debian/cryptsetup-git/src/cryptsetup_reencrypt.c") . 1) ((:keyword "goto") . 1) (c-mode . 1) (nil . 1)) "gnus-select-method" (((:file "/home/lk/.emacs.d/.gnus.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "comp" (((:symbol "highwinds-media") . 1) (Custom-mode . 1) (nil . 1)) "print" ((cider-repl-mode . 1) (nil . 1)) "interaction" ((Custom-mode . 2) (nil . 2)) "sp-clojure-modes" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "smartparens" (((:file "/home/lk/.emacs.d/init.el") . 2) ((:keyword "or") . 2) (emacs-lisp-mode . 2) (nil . 2)) "smartparens-global-mode" (((:file "/home/lk/.emacs.d/init.el") . 2) ((:keyword "or") . 2) (emacs-lisp-mode . 2) (nil . 2)) "hacking" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ansi-color-faces-vector" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "or") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-with-modes" (((:file "/home/lk/.emacs.d/init.el") . 2) ((:keyword "progn") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "sp-with-modes") . 1)) "sp-lisp-modes" (((:file "/home/lk/.emacs.d/init.el") . 4) ((:keyword "sp-with-modes") . 3) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "progn") . 1)) "traversable" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "line" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 7) (Custom-mode . 6)) "offering" ((lisp-interaction-mode . 1) (nil . 1)) "encodes" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "assert" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "diagonal" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "border." ((lisp-interaction-mode . 1) (nil . 1)) "multi_movement" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "piece") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "bitwise" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "colour" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "pce") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "sqr" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "int" (((:file "/home/lk/self/projects/lang_c/boolsize.c") . 1) (c-mode . 1) (nil . 1)) "00dbd5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "00fad5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "grey20" ((Custom-mode . 1) (nil . 1)) "00dcd5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "monochrome" ((Custom-mode . 1) (nil . 1)) "d5d969" (((:symbol "nil") . 3) (Custom-mode . 3) (nil . 3)) "mono" ((Custom-mode . 1) (nil . 1)) "serif" ((Custom-mode . 1) (nil . 1)) "custom-theme-set-faces" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "unless") . 1) (emacs-lisp-mode . 1) (nil . 1)) "00bfff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "ff00ff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "show-paren-mismatch" ((lisp-interaction-mode . 1) (nil . 1)) "error" ((Custom-mode . 7) (nil . 7)) "compile" ((Custom-mode . 1) (nil . 1)) "testln" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "do") . 1) (sh-mode . 1) (nil . 1)) "2d3743" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "info" ((Custom-mode . 1) (nil . 1)) "green" ((Custom-mode . 2) (nil . 2)) "highlight" ((Custom-mode . 4) (nil . 6) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 2)) "gold" ((Custom-mode . 1) (nil . 1)) "boot" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)))) company-statistics--log [("/etc/.pwd.lock" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("performing" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2)) ("boot" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("install" (nil . 1) (text-mode . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("performing" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("println" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("previously" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("note" (nil . 5) (text-mode . 5) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 5)) ("/boot/" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("mount" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("note" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("/boot/" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("note" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("these" (nil . 1) (text-mode . 7) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 7)) ("nowfiles" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("unencrypted" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("need" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("installation" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("/usr/share/grub/ascii.h" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("used" (nil . 3) (text-mode . 3) ((:symbol "nil") . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3)) ("used" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("args" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("../efi/" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2)) ("../efi/" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("configured" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3)) ("'10s" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("mkdir" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("configured" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("configured" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("install" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("fstab" (nil . 4) (text-mode . 4) ((:symbol "TYPE") . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 4)) ("embedded" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("share" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("file" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 3)) ("crypto" (nil . 1) (text-mode . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("following" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("device" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("note" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("your" (nil . 5) (text-mode . 5) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 5)) ("it's" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 2)) ("these" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("core" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("it's" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("fstab" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("file" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("note" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("fstab" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("xxxx" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("fstab" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("embedded" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("grub" (nil . 4) (text-mode . 4) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 4)) ("your" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("file" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("encrypted" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("grub" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("normally" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("from" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("your" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("path" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("install" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("/etc/fstab" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("your" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("subvol" (nil . 1) (text-mode . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("your" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("used" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("boot" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("grub" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("boot" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("grub" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("embedded" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1)) ("text" (nil . 1) (Custom-mode . 1)) ("cd-create-profile" (nil . 1) (shell-mode . 1)) ("git" (nil . 1) (shell-mode . 1)) ("scripts/../" (nil . 3) (shell-mode . 3) ((:symbol "nil") . 3)) ("scripts/../" (nil . 1) (shell-mode . 1) ((:symbol "nil") . 1)) ("scripts/../" (nil . 1) (shell-mode . 1) ((:symbol "nil") . 1)) ("~/.nicotine/" (nil . 1) (shell-mode . 1)) ("~/.bash_history" (nil . 1) (shell-mode . 1)) ("/bin/bash" (nil . 1) (Custom-mode . 1)) ("cksum" (nil . 1) (shell-mode . 1)) ("24bit" (nil . 2) (Custom-mode . 2)) ("/usr/share/emacs/26.1/" (nil . 1) (Custom-mode . 1)) ("/usr/share/emacs/26.1/lisp/" (nil . 1) (Custom-mode . 1)) ("24bit" (nil . 1) (Custom-mode . 1)) ("256color" (nil . 1) (Custom-mode . 1)) ("term" (nil . 2) (Custom-mode . 2)) ("term" (nil . 1) (Custom-mode . 1)) ("hide" (nil . 1) (Custom-mode . 1)) ("selecting" (nil . 1) (Custom-mode . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1)) ("terminfo" (nil . 1) (Custom-mode . 1)) ("tryclj.core" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) (":gen" (nil . 1) (cider-repl-mode . 1) ((:keyword "ns") . 1)) ("println" (nil . 1) (cider-repl-mode . 2) ((:keyword "ns") . 1)) ("println" (nil . 1) (cider-repl-mode . 1)) ("find-doc" (nil . 2) (cider-repl-mode . 2)) ("find-doc" (nil . 1) (cider-repl-mode . 1)) ("../../cider-handler/" (nil . 1) (term-mode . 1)) (":dependencies" (nil . 1) (clojure-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/cider-handler/project.clj") . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/cider-handler/project.clj") . 1)) ("eldoc" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("function" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/.notes") . 1)) ("clojure" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("modeformatting" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("reporting" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/.notes") . 1)) ("/usr/lib/jvm/java-10-openjdk/bin/" (nil . 1) (Custom-mode . 1)) ("cider-handler" (nil . 1) (clojure-mode . 1) ((:keyword "defn") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/cider_handler.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 4) (clojure-mode . 4) ((:file "/home/lk/.lein/profiles.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/profiles.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 2) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/cider-nrepl-handler/project.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/cider-nrepl-handler/project.clj") . 1)) (":profiles" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1)) ("ns" (nil . 2) (cider-repl-mode . 2)) ("args" (nil . 1) (fundamental-mode . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("attr-map?" (nil . 1) (clojure-mode . 1) ((:keyword "ns") . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("my.lib" (nil . 1) (clojure-mode . 1) ((:keyword "deftest") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/test/tryclj/core_test.clj") . 1)) ("combinatorics" (nil . 1) (clojure-mode . 1) ((:keyword "deftest") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/test/tryclj/core_test.clj") . 1)) ("ns" (nil . 1) (cider-repl-mode . 1)) ("println" (nil . 1) (cider-repl-mode . 1)) ("tryclj.core" (nil . 1) (cider-repl-mode . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (Custom-mode . 1)) ("quote" (nil . 1) (Custom-mode . 1)) ("assignment" (nil . 1) (clojure-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("that" (nil . 1) (clojure-mode . 1) ((:file "/home/lk/self/projects/lang_clojure/docs/.notes") . 1)) ("window-state-get" (nil . 1) (lisp-interaction-mode . 1)) ("setenv" (nil . 1) (lisp-interaction-mode . 1)) ("term" (nil . 1) (Custom-mode . 1)) ("term" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("Terminal" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("theme-lksettings-2018-06-07" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "unless") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("custom-set-variables" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/early-init.el") . 1)) ("package-enable-at-startup" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/early-init.el") . 1)) ("package-quickstart" (nil . 2) (emacs-lisp-mode . 2) ((:file "/home/lk/.emacs.d/early-init.el") . 2)) ("package-user-dir" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/early-init.el") . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (emacs-lisp-mode . 2) ((:file "/home/lk/.emacs.d/early-init.el") . 2)) ("package-quickstart" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/early-init.el") . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/lk/.emacs.d/early-init.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "unless") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("comments" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 2)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 2)) (":plugins" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("org.clojure/tools.nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("0.2.12" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) (":exclusions" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("org.clojure/clojure" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) ("prob-eq-true" (nil . 1) (clojure-mode . 1) ((:keyword "defn") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/core.clj") . 1)) ("problem-block-1.core" (nil . 3) (clojure-mode . 2) ((:keyword "ns") . 2) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 2)) ("problem-block-1.core" (nil . 1) (cider-repl-mode . 1)) ("problem-block-1.core" (nil . 1) (clojure-mode . 1) ((:keyword "ns") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1)) ("true" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("val" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) (":gen-class" (nil . 1) (clojure-mode . 1) ((:keyword "ns") . 1) ((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1)) ("them" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/ancient/the-usual-allusions.txt") . 1)) ("it's" (nil . 1) (fundamental-mode . 1) ((:file "/home/lk/self/projects/journal/ancient/seventeen-syllables.txxt") . 1)) ("memory" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/ancient/i-trace-the-lines.txt") . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "unless") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (Custom-mode . 1)) ("~/.emacs.d/.mc-lists.el" (nil . 2) (Custom-mode . 2)) ("~/.emacs.d/.mc-lists.el" (nil . 1) (Custom-mode . 1)) ("~/.emacs.d/auto-backup-list/" (nil . 1) (Custom-mode . 1)) ("gnus-select-method" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/lk/.emacs.d/.gnus.el") . 1)) ("comp" (nil . 1) (Custom-mode . 1) ((:symbol "highwinds-media") . 1)) ("cider/cider-nrepl" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1)) ("0.18.0-SNAPSHOT" (nil . 1) (clojure-mode . 1) ((:keyword "defproject") . 1) ((:file "/home/lk/self/projects/lang_clojure/tut1/tryclj/project.clj") . 1)) ("prn" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("println" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("prnt-strng" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("defn" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("conj" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("read" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("concat" (nil . 1) (cider-repl-mode . 1) ((:keyword "defn") . 1)) ("apropos" (nil . 1) (cider-repl-mode . 1) ((:keyword "def") . 1)) ("print" (nil . 1) (cider-repl-mode . 1)) ("println" (nil . 1) (cider-repl-mode . 1)) ("println" (nil . 1) (cider-repl-mode . 1)) ("rest" (nil . 1) (cider-repl-mode . 1)) ("list?" (nil . 1) (cider-repl-mode . 1)) ("repl" (nil . 2) (Custom-mode . 2)) ("cljc" (nil . 2) (Custom-mode . 2)) ("interaction" (nil . 2) (Custom-mode . 2)) ("mode" (nil . 1) (Custom-mode . 1)) ("repl" (nil . 1) (Custom-mode . 1)) ("cljc" (nil . 1) (Custom-mode . 1)) ("interaction" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("sp-qfix-repl" (nil . 1) (lisp-interaction-mode . 1) ((:keyword "interactive") . 1)) ("sp-clojure-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("smartparens" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("smartparens-global-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("hacking" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("smartparens" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("signal" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("smartparens-global-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("ansi-color-faces-vector" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("sp-with-modes" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/init.el") . 2)) ("sp-with-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("sp-lisp-modes" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "sp-with-modes") . 3) ((:file "/home/lk/.emacs.d/init.el") . 3)) ("sp-lisp-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("sp-lisp-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("sp-lisp-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("sp-local-pair" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("squeezes" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("square" (nil . 4) (c-mode . 4) ((:keyword "struct") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4)) ("square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("else" (nil . 4) (c-mode . 4) ((:keyword "struct") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4)) ("else" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "i") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("else" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("else" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("include" (nil . 5) (c-mode . 5) ((:keyword "struct") . 5) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 5)) ("forward" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("include" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("board" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 7) (c-mode . 7) ((:keyword "struct") . 7) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 7)) ("block" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("include" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("include" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("allocation" (nil . 1) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2)) ("include" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("allocation" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied_white" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("static" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("const" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("member" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("is_lesser" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("car_size" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("0000" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2)) ("0000" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 4) (c-mode . 4) ((:keyword "struct") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 4)) ("own_square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "own") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("empty" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Piece" (nil . 6) (c-mode . 6) ((:keyword "struct") . 6) ((:symbol "board") . 5) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 6)) ("Square" (nil . 3) (c-mode . 3) ((:keyword "struct") . 3) ((:symbol "board") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 3)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("white_piece" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:symbol "Piece") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2)) ("Piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("movement_nd_flag" (nil . 3) (c-mode . 3) ((:keyword "struct") . 3) ((:symbol "Piece") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 3)) ("movement_nd_flag" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("printf" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("total" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("nonaxial_movement" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("Piece" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("movement_nh_flag" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("movement_nd_flag" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("out_of_bounds" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("__pad_square_1" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "Square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("out_of_bounds" (nil . 1) (c-mode . 1) ((:symbol "square") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("traversable" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("include" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("board" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("board" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("out_of_bounds" (nil . 1) (c-mode . 1) ((:symbol "nm") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("out_of_bounds" (nil . 1) (c-mode . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:symbol "nm") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 1) (c-mode . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("bits" (nil . 2) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2)) ("ignorepermit" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("empty" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("own_square" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("line" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("capabilities" (nil . 2) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 2)) ("bits" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("adjacent_movement" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("additional" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("encodes" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("capabilities" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("assert" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("board" (nil . 1) (c-mode . 1) ((:symbol "chessimpl") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) ("intent" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3)) ("intent" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("interchangeable" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("diagonal" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("tests" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("include" (nil . 1) (text-mode . 3) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("intent" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("uint8" (nil . 1) (text-mode . 1) ((:symbol "int_t") . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("board" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "1") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("piece" (nil . 2) (c-mode . 2) ((:keyword "union") . 1) ((:symbol "board") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 3) ((:symbol "board") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 4)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("multi_movement" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "avar") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("__pad_square_1" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "square") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 3) ((:symbol "piece") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("__pad_square_1" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("__pad_total_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 2)) ("bitwise" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("common" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("__pad_square_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("debuggy_rawtest" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("colour" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "pce") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("sqr" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("int" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/boolsize.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("00dbd5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00fad5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00baa5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00dcd5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("d5d969" (nil . 3) (Custom-mode . 3) ((:symbol "nil") . 3)) ("d5d969" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("d5d969" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("grey20" (nil . 1) (Custom-mode . 1)) ("additional" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("monochrome" (nil . 1) (Custom-mode . 1)) ("mono" (nil . 1) (Custom-mode . 1)) ("serif" (nil . 1) (Custom-mode . 1)) ("custom-theme-set-faces" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "unless") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("00bfff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00efff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("ff00ff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("show-paren-mismatch" (nil . 1) (lisp-interaction-mode . 1)) ("error" (nil . 7) (Custom-mode . 7)) ("error" (nil . 1) (Custom-mode . 1)) ("compile" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("2d3743" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("darkorange3" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 6)) ("violetred1" (nil . 1) (Custom-mode . 1)) ("info" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("green" (nil . 2) (Custom-mode . 2)) ("line" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("green" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("ff2520" (nil . 2) (Custom-mode . 2) ((:symbol "nil") . 2)) ("highlight" (nil . 6) (Custom-mode . 4)) ("ff2520" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("normal" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "deftheme") . 2) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("highlight" (nil . 1) (emacs-lisp-mode . 2) ((:keyword "deftheme") . 2) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2)) ("normal" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("Green" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("highlight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("gold" (nil . 1) (Custom-mode . 1)) ("DarkOrange3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1))] company-statistics--index 0)