(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ("challenge" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "emotional" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3) (text-mode . 3) (nil . 3)) "/usr/bin/cmake" (((:symbol "nil") . 1) (nil . 1)) "~/.emacs.d/auto-backup-list/" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1)) "ar" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:symbol "s2") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "experience" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "particular" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "uint_least16_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "c1_c" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) (c-mode . 1) (nil . 1)) "wchar_t" (((:file "/home/workbench-lk/c/mini.patience.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "concat" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "symbol-plist" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "-3*x*x" ((lisp-interaction-mode . 1) (nil . 1)) "defmacro" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1)) "xx*x3*1/2" ((lisp-interaction-mode . 3) (nil . 3)) "problem-block-1.core" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/src/problem_block_1/elementary.clj") . 1) ((:keyword "ns") . 1) (clojure-mode . 1)) "flycheck" ((Custom-mode . 3) (nil . 3)) "-1*2*3*x" ((lisp-interaction-mode . 7) (nil . 7)) "-2*-2" ((lisp-interaction-mode . 5) (nil . 5)) "xx*xx" ((lisp-interaction-mode . 1) (nil . 1)) "~/.emacs.d/.mc-lists.el" ((Custom-mode . 1) (nil . 1)) "-1*2*3x" ((lisp-interaction-mode . 1) (nil . 1)) "3x*3x" ((lisp-interaction-mode . 6) (nil . 6)) "/usr/lib/gcc/x86_64-linux-gnu/8.0.1/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "cljc" ((Custom-mode . 1) (nil . 1)) "interaction" ((Custom-mode . 1) (nil . 1)) "execv" (((:keyword "const") . 1)) "repl" ((Custom-mode . 1) (nil . 1)) "<====>" ((lisp-interaction-mode . 1) (nil . 1)) "envar" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "ldiv_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "Node") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "arglen" (((:keyword "while") . 1) ((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:symbol "nil") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "right" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "node_alloc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 5) ((:keyword "union") . 3) (c-mode . 5) (nil . 5) ((:keyword "enum") . 2)) "offsetof" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) (c-mode . 1) (nil . 1)) "square" ((c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 5) ((:symbol "board") . 4) ((:keyword "union") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "avar") . 1) ((:keyword "return") . 1) ((:keyword "sizeof") . 2) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) "/lib/init/init-d-script" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "else" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "own_square" (((:symbol "Square") . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "/var/lib/" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "include" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3) (text-mode . 4) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "uint64_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 13) ((:keyword "return") . 1) (c-mode . 14) (nil . 14) ((:keyword "enum") . 8) ((:symbol "Node") . 1) ((:keyword "sizeof") . 4) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) "board" ((c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "1") . 1) ((:keyword "union") . 1)) "occupied" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2) ((:symbol "sqr") . 2) ((:keyword "union") . 1) ((:keyword "sizeof") . 1)) "le16toh" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "TNode") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "TNode" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "fork" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) (c-mode . 1) (nil . 1)) "exit" ((c-mode . 1) (nil . 1)) "select" (((:file "/home/workbench-lk/c/tpadexec.c") . 1) ((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "size_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "enum") . 1) (c-mode . 1) (nil . 1)) "intel_lpss_pci" (((:keyword "const") . 1) (c-mode . 1) (nil . 1)) "static" (((:keyword "struct") . 1) (c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) "__pic__" (((:keyword "struct") . 2) (c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:symbol "NM") . 1) ((:keyword "const") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) "branch" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "enum") . 2) (c-mode . 2) (nil . 2)) "_tpadtoggle" (((:file "/home/workbench-lk/c/tpad/v3/tpadtoggle.s.l.euid.c") . 1)) "0000" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "execve" (((:file "/home/workbench-lk/c/tpadtoggle.standards.c") . 1) ((:symbol "nil") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "special" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1) ((:symbol "kn") . 1)) "unsigned" (((:keyword "struct") . 1) (c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) "printf" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "enum") . 2) (c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) "total" ((c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "sqr") . 1) ((:keyword "sizeof") . 1)) "initstate" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "white_piece" ((c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3) ((:symbol "piece") . 3) ((:keyword "sizeof") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:symbol "Piece") . 1) ((:keyword "struct") . 1)) "company" ((Custom-mode . 1) (nil . 1)) "Piece" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_1" ((c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "square") . 2) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:keyword "sizeof") . 1)) "main" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "s" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:symbol "var") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "void" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "3000" ((lisp-interaction-mode . 1) (nil . 1)) "out_of_bounds" ((c-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "sqr") . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1)) "pp56" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3) (c-mode . 3) (nil . 3)) "interchangeable" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "bits" ((c-mode . 4) (nil . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 2) ((:keyword "struct") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 2) ((:symbol "low") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1)) "interface" ((lisp-interaction-mode . 1) (nil . 1)) "volume" ((lisp-interaction-mode . 1) (nil . 1)) "allocation" ((lisp-interaction-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "form" ((lisp-interaction-mode . 1) (nil . 1)) "subscript" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) ((:symbol "leading") . 1) (c-mode . 1) (nil . 1)) "knight" (((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 3) (c-mode . 3) (nil . 3) ((:symbol "5") . 1)) "additional" ((nil . 1) ((:symbol "nil") . 1) (Custom-mode . 1)) "them" ((text-mode . 1) (nil . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "intent" ((nil . 6) (reb-mode . 2) ((:symbol "u") . 1) (Custom-mode . 5) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1)) "semantics" ((lisp-interaction-mode . 1) (nil . 1)) "tests" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "piece" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2) ((:symbol "board") . 2) ((:keyword "union") . 1) (c-mode . 2) (nil . 2) ((:keyword "sizeof") . 1)) "__pad_total_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "square") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "abstraction" ((lisp-interaction-mode . 1) (nil . 1)) "uint8" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) ((:symbol "int_t") . 1) (text-mode . 1) (nil . 3) (reb-mode . 1) (Custom-mode . 1)) "backed" ((lisp-interaction-mode . 1) (nil . 1)) "done" (((:file "/home/workbench-lk/cmdline/bash/nestfor") . 1)) "common" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:symbol "nil") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "__pad_square_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "square") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "debuggy_rawtest" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "iter_from" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "echo" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) (sh-mode . 1) (nil . 1)) "iter_to" (((:file "/home/workbench-lk/cmdline/bash/seqvar") . 1) ((:keyword "function") . 1) (sh-mode . 1) (nil . 1)) "00baa5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "matchln" (((:keyword "fi") . 1) ((:keyword "do") . 1) ((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "00efff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "groupln" (((:keyword "bash") . 1) ((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) (sh-mode . 1) (nil . 1)) "darkorange3" ((Custom-mode . 1) (nil . 1)) "c::test" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) "violetred1" ((Custom-mode . 1) (nil . 1)) "ff2520" (((:symbol "nil") . 2) (Custom-mode . 2) (nil . 2)) "normal" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 2) (nil . 2)) "!match" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "done") . 1) (sh-mode . 1) (nil . 1)) ":inherit" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "bottom" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "leq" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 5) ((:symbol "node") . 1) ((:keyword "struct") . 1) (c-mode . 5) (nil . 5) ((:symbol "root") . 2) ((:keyword "union") . 2) ((:symbol "left") . 1) ((:keyword "return") . 1) ((:symbol "parent") . 1) ((:keyword "sizeof") . 1)) "Green" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "/dev/sda" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "DarkOrange3" (((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "arcturus" (((:file "/home/lk/self/projects/journal/programming/lang_c/macro.txt") . 1) (text-mode . 1) (nil . 1)) "tempnam" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "sqr") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "println" ((cider-repl-mode . 1)) "__low_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "sqr") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "all_bits" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2) ((:keyword "sizeof") . 2) (c-mode . 2) (nil . 2) ((:symbol "board") . 1)) "top_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3) ((:symbol "board") . 3) ((:keyword "sizeof") . 2) (c-mode . 3) (nil . 3) ((:keyword "union") . 1)) "game_state" (((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "struct" (((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 3) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "uint_fast16_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "union") . 1) (c-mode . 2) (nil . 2) ((:keyword "struct") . 1)) "responsibility" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "../efi/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "adjacent" (((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1) ((:symbol "nil") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "treeNode" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2)) "node" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 6) ((:symbol "nil") . 1) ((:keyword "struct") . 4) (c-mode . 6) (nil . 8) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) ((:keyword "sizeof") . 1)) "______________________________________" ((lisp-interaction-mode . 1) (nil . 1)) "0000.0000" ((lisp-interaction-mode . 4) (nil . 4)) "file" (((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1) ((:keyword "for") . 1) (c-mode . 1) (nil . 1)) "realloc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "struct") . 1) (c-mode . 2) (nil . 2) ((:keyword "return") . 1)) "_________________________________" ((lisp-interaction-mode . 6) (nil . 6)) "0000.0010" ((lisp-interaction-mode . 1) (nil . 1)) "it's" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "fstab" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "0000.0100" ((lisp-interaction-mode . 2) (nil . 2)) "0000.1110" ((lisp-interaction-mode . 1) (nil . 1)) "0000.1010" ((lisp-interaction-mode . 1) (nil . 1)) "0000.1100" ((lisp-interaction-mode . 2) (nil . 2)) "install" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "0001.1110" ((lisp-interaction-mode . 1) (nil . 1)) "uint" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "uint8_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 8) ((:symbol "id") . 2) ((:keyword "union") . 5) (c-mode . 15) (nil . 15) ((:keyword "struct") . 2) ((:symbol "id2") . 2) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 6) ((:keyword "while") . 4)) "8134" ((reb-mode . 1) (nil . 1)) "1603" ((reb-mode . 1) (nil . 1)) "24bit" ((Custom-mode . 1) (nil . 1)) "semantic" ((Custom-mode . 1) (nil . 1)) "term" ((Custom-mode . 1) (nil . 1)) "validity" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "cider/cider-nrepl" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1)) "feeling" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2) (text-mode . 2) (nil . 2)) "anxiety" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "find-doc" ((cider-repl-mode . 1) (nil . 1)) "internal" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "response" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) "integrate" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "probably" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) "weight" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "deliberate" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "origin" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "scale" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "with" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "does" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "0.18.0-SNAPSHOT" (((:file "/home/lk/self/projects/lang_clojure/4clojure/problem-block-1/project.clj") . 1) ((:keyword "defproject") . 1) (clojure-mode . 1) (nil . 1)) "tolerance" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "requiring" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2) (text-mode . 2) (nil . 2)) "ns" ((cider-repl-mode . 1) (nil . 1)) "global-company-mode" (((:file "/home/lk/.emacs") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lk-windowsize" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "x*x*x" ((lisp-interaction-mode . 8) (nil . 8)) "uint_least8_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "c2_d" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 3) (c-mode . 3) (nil . 3)) "command-execute" (((:file "/home/lk/.emacs") . 1) ((:keyword "and") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package-quickstart" (((:file "/home/lk/.emacs.d/early-init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "uint16_t" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 2) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2)) "double" (((:file "/home/lk/self/projects/lang_c/index-out.c") . 1) ((:keyword "struct") . 1) (c-mode . 1) (nil . 1)) "require" ((nil . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1)) "cond" (((:file "/home/lk/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "1/2*1/2*1/2" ((lisp-interaction-mode . 20) (nil . 20)) "strcasecmp" (((:file "/home/workbench-lk/projects/debian/cryptsetup-git/src/cryptsetup_reencrypt.c") . 1) ((:keyword "goto") . 1) (c-mode . 1) (nil . 1)) "xxx*3/2" ((lisp-interaction-mode . 10) (nil . 10)) "-1*2" ((lisp-interaction-mode . 5) (nil . 5)) "ptrdiff_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "getc" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:symbol "Node") . 2) ((:keyword "sizeof") . 2) (c-mode . 2) (nil . 2)) "Node_free_child" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 7) ((:keyword "return") . 3) (c-mode . 7) (nil . 7) ((:keyword "sizeof") . 1) ((:keyword "enum") . 3)) "grt" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 4) ((:symbol "root") . 1) ((:keyword "union") . 3) (c-mode . 4) (nil . 4) ((:symbol "right") . 1) ((:symbol "left") . 1) ((:symbol "parent") . 1) ((:keyword "sizeof") . 1)) "val" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:symbol "nil") . 1) ((:keyword "enum") . 2) (c-mode . 2) (nil . 2) ((:symbol "rt") . 1)) "lightskyblue" ((Custom-mode . 1) (nil . 1)) "sp-with-modes" (((:file "/home/lk/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "va_arg" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:symbol "coord") . 1) ((:keyword "return") . 1) (c-mode . 1) (nil . 1)) "uint32_t" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3) (c-mode . 3) (nil . 3)) "line" ((nil . 7) (Custom-mode . 7)) "offering" ((lisp-interaction-mode . 1) (nil . 1)) "capabilities" (((:file "/home/lk/self/projects/lang_c/chessimpl.c") . 1) (c-mode . 1) (nil . 1)) "linux" ((Custom-mode . 1) (nil . 1)) "diagonal" (((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1) (text-mode . 1) (nil . 1)) "border." ((lisp-interaction-mode . 1) (nil . 1)) "multi_movement" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "piece") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "bitwise" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1) ((:keyword "struct") . 2) (c-mode . 2) (nil . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) "colour" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "pce") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "sqr" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1) ((:symbol "board") . 1) ((:keyword "sizeof") . 1) (c-mode . 1) (nil . 1)) "int" (((:file "/home/lk/self/projects/lang_c/boolsize.c") . 1) (c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1) ((:keyword "for") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "struct") . 1)) "00dbd5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "00fad5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "grey20" ((Custom-mode . 1) (nil . 1)) "00dcd5" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "monochrome" ((Custom-mode . 1) (nil . 1)) "d5d969" (((:symbol "nil") . 3) (Custom-mode . 3) (nil . 3)) "mono" ((Custom-mode . 1) (nil . 1)) "serif" ((Custom-mode . 1) (nil . 1)) "custom-theme-set-faces" (((:file "/home/lk/.emacs.d/init.el") . 1) ((:keyword "unless") . 1) (emacs-lisp-mode . 1) (nil . 1)) "00bfff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "ff00ff" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "show-paren-mismatch" ((lisp-interaction-mode . 1) (nil . 1)) "error" ((Custom-mode . 7) (nil . 7)) "compile" ((Custom-mode . 1) (nil . 1)) "testln" (((:file "/home/lk/self/workbench/shell/dudiff-a") . 1) ((:keyword "do") . 1) (sh-mode . 1) (nil . 1)) "2d3743" (((:symbol "nil") . 1) (Custom-mode . 1) (nil . 1)) "info" ((Custom-mode . 1) (nil . 1)) "green" ((Custom-mode . 2) (nil . 2)) "highlight" ((Custom-mode . 4) (nil . 6) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 2)) "gold" ((Custom-mode . 1) (nil . 1)) "performing" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "identifier" (((:file "/home/lk/self/projects/journal/programming/lang_c/macro.txt") . 1) (text-mode . 1) (nil . 1)) "/boot/" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "bottom_4" (((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2) ((:symbol "board") . 2) ((:keyword "sizeof") . 2) (c-mode . 2) (nil . 2)) "boardLoc" (((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1) ((:keyword "struct") . 3) (c-mode . 4) (nil . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 3) ((:keyword "union") . 1)) "0000.0110" ((lisp-interaction-mode . 1) (nil . 1)) "0000.1000" ((lisp-interaction-mode . 3) (nil . 3)) "int8_t" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 1) ((:keyword "union") . 2) (c-mode . 3) (nil . 3) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) "grub" (((:file "/home/lk/self/workbench/boottime/grub/howto.txt") . 1) (text-mode . 1) (nil . 1)) "id" (((:file "/home/lk/self/projects/lang_c/inttree.c") . 2) ((:keyword "union") . 2) (c-mode . 2) (nil . 2)) "syntax" ((Custom-mode . 1) (nil . 1)) "contrasts" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 4) (text-mode . 4) (nil . 4)) "adoption" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2) (text-mode . 2) (nil . 2)) "care" (((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1) (text-mode . 1) (nil . 1)) "conscious" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3) (text-mode . 3) (nil . 3)) "state" (((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1) (text-mode . 1) (nil . 1)) "union" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) (c-mode . 1) (nil . 1)) "UINT16_C" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "UINT8_MAX" (((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1) ((:keyword "union") . 1) (c-mode . 1) (nil . 1)) "hwords" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "calloc" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "int32_t" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "specifiers" (((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1) (c-mode . 1) (nil . 1)) "stddef" (((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1) (c-mode . 1) (nil . 1)) "number" ((Custom-mode . 1) (nil . 1)))) company-statistics--log [("interchangeable" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("diagonal" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("tests" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("include" (nil . 1) (text-mode . 3) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 3)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("intent" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("uint8" (nil . 1) (text-mode . 1) ((:symbol "int_t") . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/lang_c/notes_to_self.txt") . 1)) ("board" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "1") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("piece" (nil . 2) (c-mode . 2) ((:keyword "union") . 1) ((:symbol "board") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 3) ((:symbol "board") . 4) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 4)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("multi_movement" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "avar") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("__pad_square_1" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "square") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 3) ((:symbol "piece") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("__pad_square_1" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("__pad_total_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 2)) ("bitwise" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("common" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("__pad_square_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "square") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("white_piece" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "piece") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("debuggy_rawtest" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("colour" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "pce") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("sqr" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("int" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/boolsize.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("00dbd5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00fad5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00baa5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00dcd5" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("d5d969" (nil . 3) (Custom-mode . 3) ((:symbol "nil") . 3)) ("d5d969" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("d5d969" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("grey20" (nil . 1) (Custom-mode . 1)) ("additional" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("monochrome" (nil . 1) (Custom-mode . 1)) ("mono" (nil . 1) (Custom-mode . 1)) ("serif" (nil . 1) (Custom-mode . 1)) ("custom-theme-set-faces" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "unless") . 1) ((:file "/home/lk/.emacs.d/init.el") . 1)) ("00bfff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("00efff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("ff00ff" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("show-paren-mismatch" (nil . 1) (lisp-interaction-mode . 1)) ("error" (nil . 7) (Custom-mode . 7)) ("error" (nil . 1) (Custom-mode . 1)) ("compile" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("2d3743" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("error" (nil . 1) (Custom-mode . 1)) ("darkorange3" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 6)) ("violetred1" (nil . 1) (Custom-mode . 1)) ("info" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("green" (nil . 2) (Custom-mode . 2)) ("line" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("green" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("ff2520" (nil . 2) (Custom-mode . 2) ((:symbol "nil") . 2)) ("highlight" (nil . 6) (Custom-mode . 4)) ("ff2520" (nil . 1) (Custom-mode . 1) ((:symbol "nil") . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("highlight" (nil . 1) (Custom-mode . 1)) ("normal" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "deftheme") . 2) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("highlight" (nil . 1) (emacs-lisp-mode . 2) ((:keyword "deftheme") . 2) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 2)) ("normal" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("Green" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("highlight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("flycheck" (nil . 1) (Custom-mode . 1)) ("gold" (nil . 1) (Custom-mode . 1)) ("DarkOrange3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/lk/.emacs.d/local-faces-theme.el") . 1)) ("identifier" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/programming/lang_c/macro.txt") . 1)) ("arcturus" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/programming/lang_c/macro.txt") . 1)) ("tempnam" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("occupied" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("out_of_bounds" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("square" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("total" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("__low_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "sqr") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("all_bits" (nil . 2) (c-mode . 2) ((:keyword "sizeof") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2)) ("all_bits" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("top_4" (nil . 3) (c-mode . 3) ((:keyword "sizeof") . 2) ((:symbol "board") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 3)) ("top_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("bottom_4" (nil . 2) (c-mode . 2) ((:keyword "sizeof") . 2) ((:symbol "board") . 2) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 2)) ("bottom" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl-boardstructures.h") . 1)) ("top_4" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("bottom_4" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "board") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/chessimpl.c") . 1)) ("boardLoc" (nil . 4) (c-mode . 4) ((:keyword "struct") . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1)) ("int" (nil . 1) (c-mode . 1) ((:keyword "for") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1)) ("file" (nil . 1) (c-mode . 1) ((:keyword "for") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/board.h") . 1)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "const") . 1) ((:symbol "NM") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("struct" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("boardLoc" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 3)) ("game_state" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("static" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("boardLoc" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("boardLoc" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("adjacent" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("bitwise" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 2)) ("bits" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "low") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("treeNode" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("int" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("treeNode" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node" (nil . 5) (c-mode . 5) ((:keyword "struct") . 4) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 5)) ("node" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("realloc" (nil . 2) (c-mode . 2) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("node" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("realloc" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("______________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 6) (lisp-interaction-mode . 6)) ("3000" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("_________________________________" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0000" (nil . 4) (lisp-interaction-mode . 4)) ("0000.0000" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0010" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0000" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0100" (nil . 2) (lisp-interaction-mode . 2)) ("0000.0100" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0110" (nil . 1) (lisp-interaction-mode . 1)) ("0000.0000" (nil . 1) (lisp-interaction-mode . 1)) ("0000.1000" (nil . 3) (lisp-interaction-mode . 3)) ("0000.1000" (nil . 1) (lisp-interaction-mode . 1)) ("0000.1010" (nil . 1) (lisp-interaction-mode . 1)) ("0000.1000" (nil . 1) (lisp-interaction-mode . 1)) ("0000.1100" (nil . 2) (lisp-interaction-mode . 2)) ("0000.1100" (nil . 1) (lisp-interaction-mode . 1)) ("0000.1110" (nil . 1) (lisp-interaction-mode . 1)) ("0001.1110" (nil . 1) (lisp-interaction-mode . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("id" (nil . 2) (c-mode . 2) ((:keyword "union") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("uint8_t" (nil . 7) (c-mode . 7) ((:keyword "union") . 5) ((:symbol "id") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 7)) ("id" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint_fast16_t" (nil . 2) (c-mode . 2) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("uint_fast16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id2") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "id2") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("intent" (nil . 1) (reb-mode . 2)) ("8134" (nil . 1) (reb-mode . 1)) ("uint8" (nil . 1) (reb-mode . 1)) ("intent" (nil . 1) (reb-mode . 1) ((:symbol "u") . 1)) ("intent" (nil . 1) (Custom-mode . 2)) ("1603" (nil . 1) (reb-mode . 1)) ("uint8" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("syntax" (nil . 1) (Custom-mode . 1)) ("unsigned" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/boardLoc.h") . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("intent" (nil . 1) (Custom-mode . 1)) ("semantic" (nil . 1) (Custom-mode . 1)) ("mode" (nil . 1) (Custom-mode . 1)) ("contrasts" (nil . 4) (text-mode . 4) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 4)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("validity" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("feeling" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2)) ("feeling" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("contrasts" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("struct" (nil . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("internal" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("adoption" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 2)) ("response" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("adoption" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("integrate" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("probably" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("care" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("weight" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/mbti_variant_18-07-18.txt") . 1)) ("validity" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("deliberate" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("conscious" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3)) ("origin" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("state" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("deliberate" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("conscious" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("require" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("does" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("struct" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("response" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("with" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("scale" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("tolerance" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("requiring" (nil . 2) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("probably" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("node" (nil . 1) (text-mode . 2) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 2)) ("challenge" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("emotional" (nil . 3) (text-mode . 3) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 3)) ("emotional" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("node" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("anxiety" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("responsibility" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("conscious" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("requiring" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("include" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("with" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("emotional" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("experience" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("them" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("particular" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("probably" (nil . 1) (text-mode . 1) ((:file "/home/lk/self/projects/journal/emotional-axioms.txt") . 1)) ("c2_d" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 3)) ("c2_d" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("c1_c" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("c2_d" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("double" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint16_t" (nil . 2) (c-mode . 2) ((:keyword "struct") . 2) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 2)) ("uint16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint_least16_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("uint_least8_t" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("ar" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "s2") . 1) ((:file "/home/lk/self/projects/lang_c/index-out.c") . 1)) ("x*x*x" (nil . 8) (lisp-interaction-mode . 8)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 20) (lisp-interaction-mode . 20)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-3*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("xx*xx" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 3) (lisp-interaction-mode . 3)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 7) (lisp-interaction-mode . 7)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 5) (lisp-interaction-mode . 5)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 10) (lisp-interaction-mode . 10)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("x*x*x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3*x" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xx*x3*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 5) (lisp-interaction-mode . 5)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("<====>" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("xxx*3/2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 6) (lisp-interaction-mode . 6)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("3x*3x" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("-1*2" (nil . 1) (lisp-interaction-mode . 1)) ("-2*-2" (nil . 1) (lisp-interaction-mode . 1)) ("1/2*1/2*1/2" (nil . 1) (lisp-interaction-mode . 1)) ("lightskyblue" (nil . 1) (Custom-mode . 1)) ("va_arg" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "coord") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 5) (c-mode . 5) ((:keyword "union") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 5)) ("offsetof" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 4) (c-mode . 4) ((:keyword "union") . 3) ((:symbol "root") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 4)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "union") . 2) ((:symbol "root") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "right") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("right" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "left") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "left") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:symbol "root") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("__pic__" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 13) (c-mode . 13) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 13)) ("void" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 7) (c-mode . 7) ((:keyword "return") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 7)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("val" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:symbol "nil") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 8) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("size_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("getc" (nil . 2) (c-mode . 2) ((:keyword "sizeof") . 2) ((:symbol "Node") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("ldiv_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("ptrdiff_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("TNode" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("getc" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("le16toh" (nil . 1) (c-mode . 1) ((:keyword "struct") . 1) ((:symbol "TNode") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("branch" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("branch" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 3) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 4) ((:symbol "Node") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("leq" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "parent") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("grt" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:symbol "parent") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node" (nil . 1) (c-mode . 1) ((:keyword "sizeof") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("Node_free_child" (nil . 1) (c-mode . 1) ((:keyword "return") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("node_alloc" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("printf" (nil . 2) (c-mode . 2) ((:keyword "enum") . 2) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 2)) ("printf" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("val" (nil . 1) (c-mode . 1) ((:keyword "enum") . 1) ((:symbol "rt") . 1) ((:file "/home/lk/self/projects/lang_c/inttree.c") . 1)) ("union" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("s" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:symbol "var") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("main" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("initstate" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("UINT16_C" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("UINT8_MAX" (nil . 1) (c-mode . 1) ((:keyword "union") . 1) ((:file "/home/lk/self/projects/lang_c/unsignarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 6)) ("printf" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint64_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("hwords" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint32_t" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3)) ("uint32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("calloc" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 4) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:keyword "while") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("uint8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("int32_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("pp56" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 3)) ("pp56" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("bits" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("pp56" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("special" (nil . 2) (c-mode . 2) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("specifiers" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("subscript" (nil . 1) (c-mode . 1) ((:symbol "leading") . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("int8_t" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/ptrarith.c") . 1)) ("knight" (nil . 3) (c-mode . 3) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 3)) ("stddef" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("knight" (nil . 1) (c-mode . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("special" (nil . 1) (c-mode . 1) ((:symbol "kn") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("knight" (nil . 1) (c-mode . 1) ((:symbol "5") . 1) ((:file "/home/lk/self/projects/lang_c/chessimpl/bf-scratch.txt") . 1)) ("linux" (nil . 1) (Custom-mode . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("number" (nil . 1) (Custom-mode . 1))] company-statistics--index 0)