;; Object semanticdb-project-database-file-169b4ec
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-169b4ec"
  :tables
  (list
    (semanticdb-table "semanticdb-table-17a26c8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("diary-lib" include nil nil [2643 2663])
            ("cl-lib" include nil nil [2664 2681])
            ("todo-directory" variable
               (:documentation "Directory where user's todo files are saved."
                :default-value (locate-user-emacs-file "todo/"))
                nil [2926 3068])
            ("todo-files" function
               (:documentation "Default value of `todo-files-function'.
This returns the case-insensitive alphabetically sorted list of
file truenames in `todo-directory' with the extension
\".todo\".  With non-nil ARCHIVES return the list of archive file
truenames (those with the extension \".toda\")."
                :arguments ("archives"))
                nil [3070 3677])
            ("todo-files-function" variable
               (:documentation "Function returning the value of the variable `todo-files'.
This function should take an optional argument that, if non-nil,
makes it return the value of the variable `todo-archives'."
                :default-value nil)
                nil [3679 3943])
            ("todo-files" variable
               (:documentation "List of truenames of user's todo files."
                :default-value (funcall todo-files-function))
                nil [3945 4038])
            ("todo-archives" variable
               (:documentation "List of truenames of user's todo archives."
                :default-value (funcall todo-files-function t))
                nil [4040 4141])
            ("todo-visited" variable (:documentation "List of todo files visited in this session by `todo-show'.
Used to determine initial display according to the value of
`todo-show-first'.") nil [4143 4310])
            ("todo-file-buffers" variable (:documentation "List of file names of live Todo mode buffers.") nil [4312 4392])
            ("todo-global-current-todo-file" variable (:documentation "Variable holding name of current todo file.
Used by functions called from outside of Todo mode to visit the
current todo file rather than the default todo file (i.e. when
users option `todo-show-current-file' is non-nil).") nil [4394 4662])
            ("todo-current-todo-file" variable (:documentation "Variable holding the name of the currently active todo file.") nil [4664 4764])
            ("todo-categories" variable (:documentation "Alist of categories in the current todo file.
The elements are cons cells whose car is a category name and
whose cdr is a vector of the category's item counts.  These are,
in order, the numbers of todo items, of todo items included in
the Diary, of done items and of archived items.") nil [4766 5081])
            ("todo-category-number" variable
               (:documentation "Variable holding the number of the current todo category.
Todo categories are numbered starting from 1."
                :default-value 1)
                nil [5083 5222])
            ("todo-categories-with-marks" variable (:documentation "Alist of categories and number of marked items they contain.") nil [5224 5328])
            ("todo-category-beg" variable
               (:documentation "String marking beginning of category (inserted with its name)."
                :constant-flag t
                :default-value "--==-- ")
                nil [5330 5435])
            ("todo-category-done" variable
               (:documentation "String marking beginning of category's done items."
                :constant-flag t
                :default-value "==--== DONE ")
                nil [5437 5536])
            ("todo-done-separator-string" variable
               (:documentation "String determining the value of variable `todo-done-separator'.
If the string consists of a single character,
`todo-done-separator' will be the string made by repeating this
character for the width of the window, and the length is
automatically recalculated when the window width changes.  If the
string consists of more (or less) than one character, it will be
the value of `todo-done-separator'."
                :default-value "=")
                nil [5538 6103])
            ("todo-done-separator" function (:documentation "Return string used as value of variable `todo-done-separator'.") nil [6105 6396])
            ("todo-done-separator" variable
               (:documentation "String used to visually separate done from not done items.
Displayed as an overlay instead of `todo-category-done' when
done items are shown.  Its value is determined by user option
`todo-done-separator-string'."
                :default-value (todo-done-separator))
                nil [6398 6664])
            ("todo-show-done-only" variable (:documentation "If non-nil display only done items in current category.
Set by the command `todo-toggle-view-done-only' and used by
`todo-category-select'.") nil [6666 6842])
            ("todo-nondiary-marker" variable
               (:documentation "List of strings surrounding item date to block diary inclusion.
The first string is inserted before the item date and must be a
non-empty string that does not match a diary date in order to
have its intended effect.  The second string is inserted after
the diary date."
                :default-value '("[" "]"))
                nil [6844 7286])
            ("todo-nondiary-start" variable
               (:documentation "String inserted before item date to block diary inclusion."
                :constant-flag t
                :default-value (nth 0 todo-nondiary-marker))
                nil [7288 7410])
            ("todo-nondiary-end" variable
               (:documentation "String inserted after item date matching `todo-nondiary-start'."
                :constant-flag t
                :default-value (nth 1 todo-nondiary-marker))
                nil [7412 7537])
            ("todo-month-name-array" variable
               (:documentation "Array of month names, in order.
The final element is \"*\", indicating an unspecified month."
                :constant-flag t
                :default-value (vconcat calendar-month-name-array (vector "*")))
                nil [7539 7719])
            ("todo-month-abbrev-array" variable
               (:documentation "Array of abbreviated month names, in order.
The final element is \"*\", indicating an unspecified month."
                :constant-flag t
                :default-value (vconcat calendar-month-abbrev-array (vector "*")))
                nil [7721 7917])
            ("todo-date-pattern" variable
               (:documentation "Regular expression matching a todo item date header."
                :constant-flag t
                :default-value (let ((dayname (diary-name-pattern calendar-day-name-array nil t))) (concat "\\(?4:\\(?5:" dayname "\\)\\|" (calendar-dlet* ((dayname) (monthname (format "\\(?6:%s\\)" (diary-name-pattern todo-month-name-array todo-month-abbrev-array))) (month "\\(?7:[0-9]+\\|\\*\\)") (day "\\(?8:[0-9]+\\|\\*\\)") (year "-?\\(?9:[0-9]+\\|\\*\\)")) (mapconcat #'eval calendar-date-display-form "")) "\\)")))
                nil [7919 8464])
            ("todo-date-string-start" variable
               (:documentation "Regular expression matching part of item header before the date."
                :constant-flag t
                :default-value (concat "^\\(" (regexp-quote todo-nondiary-start) "\\|" (regexp-quote diary-nonmarking-symbol) "\\)?"))
                nil [8624 8834])
            ("todo-done-string" variable
               (:documentation "Identifying string appended to the front of done todo items."
                :default-value "DONE ")
                nil [8836 9045])
            ("todo-done-string-start" variable
               (:documentation "Regular expression matching start of done item."
                :constant-flag t
                :default-value (concat "^\\[" (regexp-quote todo-done-string)))
                nil [9047 9182])
            ("todo-item-start" variable
               (:documentation "String identifying start of a todo item."
                :constant-flag t
                :default-value (concat "\\(" todo-date-string-start "\\|" todo-done-string-start "\\)" todo-date-pattern))
                nil [9184 9356])
            ("todo-prefix" variable (:documentation "String prefixed to todo items for visual distinction.") nil [9551 9979])
            ("todo-number-prefix" variable
               (:documentation "Non-nil to prefix items with consecutively increasing integers.
These reflect the priorities of the items in each category."
                :default-value t)
                nil [9981 10248])
            ("todo-mode-line-control" function
               (:documentation "Return a mode line control for todo or archive file buffers.
Argument CAT is the name of the current todo category.
This function is the value of the user variable
`todo-mode-line-function'."
                :arguments ("cat"))
                nil [10250 10608])
            ("todo-mode-line-function" variable
               (:documentation "Function that returns a mode line control for Todo mode buffers.
The function expects one argument holding the name of the current
todo category.  The resulting control becomes the local value of
`mode-line-buffer-identification' in each Todo mode buffer."
                :default-value nil)
                nil [10610 10971])
            ("todo-highlight-item" variable (:documentation "Non-nil means highlight items at point.") nil [10973 11167])
            ("todo-wrap-lines" variable
               (:documentation "Non-nil to activate Visual Line mode and use wrap prefix."
                :default-value t)
                nil [11169 11300])
            ("todo-indent-to-here" variable
               (:documentation "Number of spaces to indent continuation lines of items.
This must be a positive number to ensure such items are fully
shown in the Fancy Diary display."
                :default-value 3)
                nil [11302 11708])
            ("todo-indent" function (:documentation "Indent from point to `todo-indent-to-here'.") nil [11710 11834])
            ("todo-show-with-done" variable (:documentation "Non-nil to display done items in all categories.") nil [11836 11964])
            ("todo-key-prompt" variable
               (:documentation "Face for making keys in item insertion prompt stand out."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [12139 12270])
            ("todo-mark" variable
               (:documentation "Face for marks on marked items."
                :default-value '((((class color) (min-colors 88) (background light)) (:weight bold :foreground "Red1")) (((class color) (min-colors 88) (background dark)) (:weight bold :foreground "Pink")) (((class color) (min-colors 16) (background light)) (:weight bold :foreground "Red1")) (((class color) (min-colors 16) (background dark)) (:weight bold :foreground "Pink")) (((class color) (min-colors 8)) (:foreground "red")) (t (:weight bold :inverse-video t)))
                :type "face")
                nil [12272 12936])
            ("todo-prefix-string" variable
               (:documentation "Face for todo item prefix or numerical priority string."
                :default-value '((((class grayscale) (background light)) (:foreground "LightGray" :weight bold :underline t)) (((class grayscale) (background dark)) (:foreground "Gray50" :weight bold :underline t)) (((class color) (min-colors 88) (background light)) (:foreground "dark cyan")) (((class color) (min-colors 88) (background dark)) (:foreground "Aquamarine")) (((class color) (min-colors 16) (background light)) (:foreground "CadetBlue")) (((class color) (min-colors 16) (background dark)) (:foreground "Aquamarine")) (((class color) (min-colors 8)) (:foreground "magenta")) (t (:weight bold :underline t)))
                :type "face")
                nil [12938 13722])
            ("todo-top-priority" variable
               (:documentation "Face for top priority todo item numerical priority string.
The item's priority number string has this face if the number is
less than or equal the category's top priority setting."
                :default-value '((default :weight bold) (((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :slant italic))
                :type "face")
                nil [13724 14664])
            ("todo-nondiary" variable
               (:documentation "Face for non-diary markers around todo item date/time header."
                :default-value '((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t))
                :type "face")
                nil [14666 15396])
            ("todo-date" variable
               (:documentation "Face for the date string of a todo item."
                :default-value '((t :inherit diary))
                :type "face")
                nil [15398 15507])
            ("todo-time" variable
               (:documentation "Face for the time string of a todo item."
                :default-value '((t :inherit diary-time))
                :type "face")
                nil [15509 15623])
            ("todo-diary-expired" variable
               (:documentation "Face for expired dates of diary items."
                :default-value '((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue") (t :inverse-video t))
                :type "face")
                nil [15625 16421])
            ("todo-done-sep" variable
               (:documentation "Face for separator string between done and not done todo items."
                :default-value '((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold))
                :type "face")
                nil [16423 17168])
            ("todo-done" variable
               (:documentation "Face for done todo item header string."
                :default-value '((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold))
                :type "face")
                nil [17170 17859])
            ("todo-comment" variable
               (:documentation "Face for comments appended to done todo items."
                :default-value '((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic))
                :type "face")
                nil [17861 18726])
            ("todo-search" variable
               (:documentation "Face for matches found by `todo-search'."
                :default-value '((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "RoyalBlue3")) (((class color) (min-colors 8) (background light)) (:foreground "black" :background "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "white" :background "blue")) (((type tty) (class mono)) (:inverse-video t)) (t (:background "gray")))
                :type "face")
                nil [18728 19366])
            ("todo-button" variable
               (:documentation "Face for buttons in table of categories."
                :default-value '((((type tty)) (:foreground "black" :background "yellow3")) (((class grayscale color) (background light)) (:background "gray85")) (((class grayscale color) (background dark)) (:background "dim gray")) (t (:slant italic)))
                :type "face")
                nil [19368 19758])
            ("todo-sorted-column" variable
               (:documentation "Face for sorted column in table of categories."
                :default-value '((((type tty)) (:inverse-video t)) (((class color) (background light)) (:background "grey85")) (((class color) (background dark)) (:background "grey85" :foreground "grey10")) (t (:background "gray")))
                :type "face")
                nil [19760 20109])
            ("todo-archived-only" variable
               (:documentation "Face for archived-only category names in table of categories."
                :default-value '((((class color) (background light)) (:foreground "grey50")) (((class color) (background dark)) (:foreground "grey70")) (t (:foreground "gray")))
                :type "face")
                nil [20111 20442])
            ("todo-category-string" variable
               (:documentation "Face for category-file header in Todo Filtered Items mode."
                :default-value '((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t))
                :type "face")
                nil [20444 21180])
            ("todo-short-file-name" function
               (:documentation "Return the short form of todo file FILE's name.
This lacks the extension and directory components."
                :arguments ("file"))
                nil [21723 21946])
            ("todo--files-type-list" function nil nil [21948 22076])
            ("todo-default-todo-file" variable
               (:documentation "Todo file visited by first session invocation of `todo-show'."
                :default-value (todo-short-file-name (car (funcall todo-files-function))))
                nil [22078 22323])
            ("todo-show-current-file" variable
               (:documentation "Non-nil to make `todo-show' visit the current todo file.
Otherwise, `todo-show' always visits `todo-default-todo-file'."
                :default-value t)
                nil [22325 22593])
            ("todo-show-first" variable
               (:documentation "What action to take on first use of `todo-show' on a file."
                :default-value 'first)
                nil [22595 22941])
            ("todo-add-item-if-new-category" variable
               (:documentation "Non-nil to prompt for an item after adding a new category."
                :default-value t)
                nil [22943 23086])
            ("todo-initial-file" variable
               (:documentation "Default file name offered on adding first todo file."
                :default-value "Todo")
                nil [23088 23212])
            ("todo-initial-category" variable
               (:documentation "Default category name offered on initializing a new todo file."
                :default-value "Todo")
                nil [23214 23352])
            ("todo-category-completions-files" variable (:documentation "List of files for building `todo-read-category' completions.") nil [23354 23522])
            ("todo-completion-ignore-case" variable (:documentation "Non-nil means case is ignored by `todo-read-*' functions.") nil [23524 23661])
            ("todo-show" function
               (:documentation "Visit a todo file and display one of its categories.

When invoked in Todo mode, Todo Archive mode or Todo Filtered
Items mode, or when invoked anywhere else with a prefix argument,
prompt for which todo file to visit.  When invoked outside of a
Todo mode buffer without a prefix argument, visit
`todo-default-todo-file'.  Subsequent invocations from outside of
Todo mode revisit this file or, with option
`todo-show-current-file' non-nil (the default), whichever todo
file was last visited.

If you call this command before you have created any todo file in
the current format, and you have a todo file in old format, it
will ask you whether to convert that file and show it.
Otherwise, calling this command before any todo file exists
prompts for a file name and an initial category (defaulting to
`todo-initial-file' and `todo-initial-category'), creates both of
these, visits the file and displays the category, and if option
`todo-add-item-if-new-category' is non-nil (the default), prompts
for the first item.

The first invocation of this command on an existing todo file
interacts with the option `todo-show-first': if its value is
`first' (the default), show the first category in the file; if
its value is `table', show the table of categories in the file;
if its value is one of `top', `diary' or `regexp', show the
corresponding saved top priorities, diary items, or regexp items
file, if any.  Subsequent invocations always show the file's
current (i.e., last displayed) category.

In Todo mode just the category's unfinished todo items are shown
by default.  The done items are hidden, but typing
`\\[todo-toggle-view-done-items]' displays them below the todo
items.  With non-nil user option `todo-show-with-done' both todo
and done items are always shown on visiting a category."
                :user-visible-flag t
                :arguments ("solicit-file" "interactive"))
                nil [23678 31230])
            ("todo-save" function
               (:documentation "Save the current todo file."
                :user-visible-flag t)
                nil [31232 31445])
            ("todo-descending-counts" variable nil nil [31447 31478])
            ("todo-quit" function
               (:documentation "Exit the current Todo-related buffer.
Depending on the specific mode, this either kills the buffer or
buries it and restores state as needed."
                :user-visible-flag t)
                nil [31480 32854])
            ("todo-skip-archived-categories" variable (:documentation "Non-nil to handle categories with only archived items specially.

Sequential category navigation using \\[todo-forward-category]
or \\[todo-backward-category] skips categories that contain only
archived items.  Other commands still recognize these categories.
In Todo Categories mode (\\[todo-show-categories-table]) these
categories shown in `todo-archived-only' face and pressing the
category button visits the category in the archive instead of the
todo file.") nil [33064 33616])
            ("todo-forward-category" function
               (:documentation "Visit the numerically next category in this todo file.
If the current category is the highest numbered, visit the first
category.  With non-nil argument BACK, visit the numerically
previous category (the highest numbered one, if the current
category is the first)."
                :user-visible-flag t
                :arguments ("back"))
                nil [33618 34535])
            ("todo-backward-category" function
               (:documentation "Visit the numerically previous category in this todo file.
If the current category is the highest numbered, visit the first
category."
                :user-visible-flag t)
                nil [34537 34752])
            ("todo-categories-buffer" variable nil nil [34754 34785])
            ("todo-jump-to-category" function
               (:documentation "Prompt for a category in a todo file and jump to it.

With non-nil FILE (interactively a prefix argument), prompt for a
specific todo file and choose (with TAB completion) a category
in it to jump to; otherwise, choose and jump to any category in
either the current todo file or a file in
`todo-category-completions-files'.

Also accept a non-existing category name and ask whether to add a
new category by that name; on confirmation, add it and jump to
that category, and if option `todo-add-item-if-new-category' is
non-nil (the default), then prompt for the first item.

In noninteractive calls non-nil WHERE specifies either the goal
category or its file.  If its value is `archive', the choice of
categories is restricted to the current archive file or the
archive you were prompted to choose; this is used by
`todo-jump-to-archive-category'.  If its value is the name of a
category, jump directly to that category; this is used in Todo
Categories mode."
                :user-visible-flag t
                :arguments ("file" "where"))
                nil [34787 37669])
            ("todo-next-item" function
               (:documentation "Move point down to the beginning of the next item.
With positive numerical prefix COUNT, move point COUNT items
downward.

If the category's done items are hidden, this command also moves
point to the empty line below the last todo item from any higher
item in the category, i.e., when invoked with or without a prefix
argument.  If the category's done items are visible, this command
called with a prefix argument only moves point to a lower item,
e.g., with point on the last todo item and called with prefix 1,
it moves point to the first done item; but if called with point
on the last todo item without a prefix argument, it moves point
to the empty line above the done items separator."
                :user-visible-flag t
                :arguments ("count"))
                nil [37671 38724])
            ("todo-previous-item" function
               (:documentation "Move point up to start of item with next higher priority.
With positive numerical prefix COUNT, move point COUNT items
upward.

If the category's done items are visible, this command called
with a prefix argument only moves point to a higher item, e.g.,
with point on the first done item and called with prefix 1, it
moves to the last todo item; but if called with point on the
first done item without a prefix argument, it moves point to the
empty line above the done items separator."
                :user-visible-flag t
                :arguments ("count"))
                nil [38726 39693])
            ("todo-toggle-prefix-numbers" function
               (:documentation "Hide item numbering if shown, show if hidden."
                :user-visible-flag t)
                nil [39886 40404])
            ("todo-toggle-view-done-items" function
               (:documentation "Show hidden or hide visible done items in current category."
                :user-visible-flag t)
                nil [40406 41209])
            ("todo-toggle-view-done-only" function
               (:documentation "Switch between displaying only done or only todo items."
                :user-visible-flag t)
                nil [41211 41449])
            ("todo-toggle-item-highlighting" function
               (:documentation "Highlight or unhighlight the todo item the cursor is on."
                :user-visible-flag t)
                nil [41451 41762])
            ("todo--item-headers-hidden" variable (:documentation "Non-nil if item date-time headers in current buffer are hidden.") nil [41764 41870])
            ("todo-toggle-item-header" function
               (:documentation "Hide or show item date-time headers in the current file.
With done items, this hides only the done date-time string, not
the original date-time string."
                :user-visible-flag t)
                nil [41872 43135])
            ("todo-add-file" function
               (:documentation "Name and initialize a new todo file.
Interactively, prompt for a category and display it, and if
option `todo-add-item-if-new-category' is non-nil (the default),
prompt for the first item.
Noninteractively, return the name of the new file."
                :user-visible-flag t)
                nil [43330 44493])
            ("todo-rename-file" function
               (:documentation "Rename the current todo file.
With prefix ARG, prompt for a todo file and rename it.
If there are corresponding archive or filtered items files,
rename these accordingly.  If there are live buffers visiting
these files, also rename them accordingly."
                :user-visible-flag t
                :arguments ("arg"))
                nil [44495 46352])
            ("todo-delete-file" function
               (:documentation "Delete the current todo, archive or filtered items file.
If the todo file has a corresponding archive file, or vice versa,
prompt whether to delete that as well.  Also kill the buffers
visiting the deleted files."
                :user-visible-flag t)
                nil [46354 49146])
            ("todo-edit-buffer" variable
               (:documentation "Name of current buffer in Todo Edit mode."
                :default-value "*Todo Edit*")
                nil [49148 49233])
            ("todo-edit-file" function
               (:documentation "Put current buffer in `todo-edit-mode'.
This makes the entire file visible and the buffer writable and
you can use the self-insertion keys and standard Emacs editing
commands to make changes.  To return to Todo mode, type
\\[todo-edit-quit].  This runs a file format check, signaling
an error if the format has become invalid.  However, this check
cannot tell if the number of items changed, which could result in
the file containing inconsistent information.  For this reason
this command should be used with caution."
                :user-visible-flag t)
                nil [49235 50619])
            ("todo-add-category" function
               (:documentation "Add a new category to a todo file.

Called interactively with prefix argument FILE, prompt for a file
and then for a new category to add to that file, otherwise prompt
just for a category to add to the current todo file.  After
adding the category, visit it in Todo mode and if option
`todo-add-item-if-new-category' is non-nil (the default), prompt
for the first item.

Non-interactively, add category CAT to file FILE; if FILE is nil,
add CAT to the current todo file.  After adding the category,
return the new category number."
                :user-visible-flag t
                :arguments ("file" "cat"))
                nil [50621 52564])
            ("todo-rename-category" function
               (:documentation "Rename current todo category.
If this file has an archive containing this category, rename the
category there as well."
                :user-visible-flag t)
                nil [52566 53667])
            ("todo-delete-category" function
               (:documentation "Delete current todo category provided it contains no items.
With prefix ARG delete the category even if it does contain
todo or done items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [53669 56053])
            ("todo-move-category" function
               (:documentation "Move current category to a different todo file.
If the todo file chosen does not exist, it is created.
If the current category has archived items, also move those to
the archive of the file moved to, creating it if it does not exist."
                :user-visible-flag t)
                nil [56055 61416])
            ("todo-merge-category" function
               (:documentation "Merge current category into another existing category.

With prefix argument FILE, prompt for a specific todo file and
choose (with TAB completion) a category in it to merge into;
otherwise, choose and merge into a category in either the
current todo file or a file in `todo-category-completions-files'.

After merging, the source category's todo and done items are
appended to the chosen goal category's todo and done items,
respectively.  The goal category becomes the current category,
and the source category is deleted.

If both the source and goal categories also have archived items,
they are also merged.  If only the source category has archived
items, the goal category is added as a new category to the
archive file and the source category is deleted."
                :user-visible-flag t
                :arguments ("file"))
                nil [61418 67027])
            ("todo-include-in-diary" variable (:documentation "Non-nil to allow new todo items to be included in the diary.") nil [67209 67348])
            ("todo-diary-nonmarking" variable (:documentation "Non-nil to insert new todo diary items as nonmarking by default.
This appends `diary-nonmarking-symbol' to the front of an item on
insertion provided it doesn't begin with `todo-nondiary-marker'.") nil [67350 67624])
            ("todo-always-add-time-string" variable (:documentation "Non-nil adds current time to a new item's date header by default.
When the todo insertion commands have a non-nil \"maybe-notime\"
argument, this reverses the effect of
`todo-always-add-time-string': if t, these commands omit the
current time, if nil, they include it.") nil [67626 67979])
            ("todo-use-only-highlighted-region" variable
               (:documentation "Non-nil to enable inserting only highlighted region as new item."
                :default-value t)
                nil [67981 68133])
            ("todo-default-priority" variable
               (:documentation "Default priority of new and moved items."
                :default-value 'first)
                nil [68135 68335])
            ("todo-item-mark" variable
               (:documentation "String used to mark items.
To ensure item marking works, change the value of this option
only when no items are marked."
                :default-value "*")
                nil [68337 68856])
            ("todo-comment-string" variable
               (:documentation "String inserted before optional comment appended to done item."
                :default-value "COMMENT")
                nil [68858 69077])
            ("todo-undo-item-omit-comment" variable
               (:documentation "Whether to omit done item comment on undoing the item.
Nil means never omit the comment, t means always omit it, `ask'
means prompt user and omit comment only on confirmation."
                :default-value 'ask)
                nil [69079 69419])
            ("todo-toggle-mark-item" function
               (:documentation "Mark item with `todo-item-mark' if unmarked, otherwise unmark it.
With positive numerical prefix argument N, change the marking of
the next N items in the current category.  If both the todo and
done items sections are visible, the sequence of N items can
consist of the last todo items and the first done items."
                :user-visible-flag t
                :arguments ("n"))
                nil [69421 71126])
            ("todo-mark-category" function
               (:documentation "Mark all visible items in this category with `todo-item-mark'."
                :user-visible-flag t)
                nil [71128 72127])
            ("todo-unmark-category" function
               (:documentation "Remove `todo-item-mark' from all visible items in this category."
                :user-visible-flag t)
                nil [72129 72757])
            ("todo-date-from-calendar" variable (:documentation "Helper variable for setting item date from the Emacs Calendar.") nil [72759 72862])
            ("todo-insert-item--parameters" variable nil nil [72864 72901])
            ("todo-insert-item" function
               (:documentation "Choose an item insertion operation and carry it out.
This inserts a new todo item into a category.

With no prefix argument ARG, add the item to the current
category; with one prefix argument (`C-u'), prompt for a category
from the current todo file; with two prefix arguments (`C-u
C-u'), first prompt for a todo file, then a category in that
file.  If a non-existing category is entered, ask whether to add
it to the todo file; if answered affirmatively, add the category
and insert the item there.

There are a number of item insertion parameters which can be
combined by entering specific keys to produce different insertion
commands.  After entering each key, a message shows which have
already been entered and which remain available.  See
`(todo-mode) Inserting New Items' for details of the parameters,
their associated keys and their effects."
                :user-visible-flag t
                :arguments ("arg"))
                nil [72903 73900])
            ("todo-insert-item--basic" function
               (:documentation "Function implementing the core of `todo-insert-item'."
                :arguments ("arg" "diary-type" "date-type" "time" "where"))
                nil [73902 79914])
            ("todo-set-date-from-calendar" function (:documentation "Return string of date chosen from Calendar.") nil [79916 81139])
            ("todo-insert-item-from-calendar" function
               (:documentation "Prompt for and insert a new item with date selected from calendar.
Invoked without prefix argument ARG, insert the item into the
current category, without one prefix argument, prompt for the
category from the current todo file or from one listed in
`todo-category-completions-files'; with two prefix arguments,
prompt for a todo file and then for a category in it."
                :user-visible-flag t
                :arguments ("arg"))
                nil [81141 81751])
            ("define-key" code nil nil [81753 81820])
            ("todo-delete-item" function
               (:documentation "Delete at least one item in this category.
If there are marked items, delete all of these; otherwise, delete
the item at point."
                :user-visible-flag t)
                nil [81822 83696])
            ("todo-edit-item" function
               (:documentation "Choose an editing operation for the current item and carry it out."
                :user-visible-flag t
                :arguments ("arg"))
                nil [83698 84074])
            ("todo-edit-item--text" function
               (:documentation "Function providing the text editing facilities of `todo-edit-item'."
                :arguments ("arg"))
                nil [84076 87729])
            ("todo-edit-quit" function
               (:documentation "Return from Todo Edit mode to Todo mode.
If the item contains hard line breaks, make sure the following
lines are indented by `todo-indent-to-here' to conform to diary
format.

If the whole file was in Todo Edit mode, check before returning
whether the file is still a valid todo file and if so, also
recalculate the todo file's categories sexp, in case changes were
made in the number or names of categories."
                :user-visible-flag t)
                nil [87731 90008])
            ("todo-edit-item--header" function
               (:documentation "Function providing header editing facilities of `todo-edit-item'."
                :arguments ("what" "inc"))
                nil [90010 96627])
            ("todo-edit-item--diary-inclusion" function
               (:documentation "Function providing diary marking facilities of `todo-edit-item'."
                :arguments ("nonmarking"))
                nil [96629 98232])
            ("todo-edit-category-diary-inclusion" function
               (:documentation "Make all items in this category diary items.
With prefix ARG, make all items in this category non-diary
items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [98234 99586])
            ("todo-edit-category-diary-nonmarking" function
               (:documentation "Add `diary-nonmarking-symbol' to all diary items in this category.
With prefix ARG, remove `diary-nonmarking-symbol' from all diary
items in this category."
                :user-visible-flag t
                :arguments ("arg"))
                nil [99588 100301])
            ("todo-set-item-priority" function
               (:documentation "Prompt for and set ITEM's priority in CATegory.

Interactively, ITEM is the todo item at point, CAT is the current
category, and the priority is a number between 1 and the number
of items in the category.  Non-interactively, non-nil NEW means
ITEM is a new item and the lowest priority is one more than the
number of items in CAT.

The new priority is set either interactively by prompt or by a
numerical prefix argument, or noninteractively by argument ARG,
whose value can be either of the symbols `raise' or `lower',
meaning to raise or lower the item's priority by one."
                :user-visible-flag t
                :arguments ("item" "cat" "new" "arg"))
                nil [100303 105829])
            ("todo-raise-item-priority" function
               (:documentation "Raise priority of current item by moving it up by one item."
                :user-visible-flag t)
                nil [105831 105992])
            ("todo-lower-item-priority" function
               (:documentation "Lower priority of current item by moving it down by one item."
                :user-visible-flag t)
                nil [105994 106157])
            ("todo-move-item" function
               (:documentation "Move at least one todo or done item to another category.
If there are marked items, move all of these; otherwise, move
the item at point.

With prefix argument FILE, prompt for a specific todo file and
choose (with TAB completion) a category in it to move the item or
items to; otherwise, choose and move to any category in either
the current todo file or one of the files in
`todo-category-completions-files'.  If the chosen category is
not an existing categories, then it is created and the item(s)
become(s) the first entry/entries in that category.

With moved todo items, prompt to set the priority in the category
moved to (with multiple todo items, the one that had the highest
priority in the category moved from gets the new priority and the
rest of the moved todo items are inserted in sequence below it).
Moved done items are appended to the top of the done items
section in the category moved to."
                :user-visible-flag t
                :arguments ("file"))
                nil [106159 112689])
            ("todo-item-done" function
               (:documentation "Tag a todo item in this category as done and relocate it.

With prefix argument ARG prompt for a comment and append it to
the done item; this is only possible if there are no marked
items.  If there are marked items, tag all of these with
`todo-done-string' plus the current date and, if
`todo-always-add-time-string' is non-nil, the current time;
otherwise, just tag the item at point.  Items tagged as done are
relocated to the category's (by default hidden) done section.  If
done items are visible on invoking this command, they remain
visible."
                :user-visible-flag t
                :arguments ("arg"))
                nil [112691 116377])
            ("todo-item-undone" function
               (:documentation "Restore at least one done item to this category's todo section.
Prompt for the new priority.  If there are marked items, undo all
of these, giving the first undone item the new priority and the
rest following directly in sequence; otherwise, undo just the
item at point.

If the done item has a comment, ask whether to omit the comment
from the restored item.  With multiple marked done items with
comments, only ask once, and if affirmed, omit subsequent
comments without asking."
                :user-visible-flag t)
                nil [116379 119972])
            ("todo-find-archive" function
               (:documentation "Visit the archive of the current todo category, if it exists.
If the category has no archived items, prompt to visit the
archive anyway.  If there is no archive for this file or with
non-nil argument ASK, prompt to visit another archive.

The buffer showing the archive is in Todo Archive mode.  The
first visit in a session displays the first category in the
archive, subsequent visits return to the last category
displayed."
                :user-visible-flag t
                :arguments ("ask"))
                nil [120160 121745])
            ("todo-choose-archive" function
               (:documentation "Choose an archive and visit it."
                :user-visible-flag t)
                nil [121747 121853])
            ("todo-archive-done-item" function
               (:documentation "Archive at least one done item in this category.

With prefix argument ALL, prompt whether to archive all done
items in this category and on confirmation archive them.
Otherwise, if there are marked done items (and no marked todo
items), archive all of these; otherwise, archive the done item at
point.

If the archive of this file does not exist, it is created.  If
this category does not exist in the archive, it is created."
                :user-visible-flag t
                :arguments ("all"))
                nil [121855 126945])
            ("todo-unarchive-items" function
               (:documentation "Unarchive at least one item in this archive category.
If there are marked items, unarchive all of these; otherwise,
unarchive the item at point.

Unarchived items are restored as done items to the corresponding
category in the todo file, inserted at the top of done items
section.  If all items in the archive category have been
restored, the category is deleted from the archive.  If this was
the only category in the archive, the archive file is deleted."
                :user-visible-flag t)
                nil [126947 130958])
            ("todo-jump-to-archive-category" function
               (:documentation "Prompt for a category in a todo archive and jump to it.
With prefix argument FILE, prompt for an archive and choose (with
TAB completion) a category in it to jump to; otherwise, choose
and jump to any category in the current archive."
                :user-visible-flag t
                :arguments ("file"))
                nil [130960 131312])
            ("todo-categories-category-label" variable
               (:documentation "Category button label in Todo Categories mode."
                :default-value "Category")
                nil [131525 131671])
            ("todo-categories-todo-label" variable
               (:documentation "Todo button label in Todo Categories mode."
                :default-value "Todo")
                nil [131673 131807])
            ("todo-categories-diary-label" variable
               (:documentation "Diary button label in Todo Categories mode."
                :default-value "Diary")
                nil [131809 131946])
            ("todo-categories-done-label" variable
               (:documentation "Done button label in Todo Categories mode."
                :default-value "Done")
                nil [131948 132082])
            ("todo-categories-archived-label" variable
               (:documentation "Archived button label in Todo Categories mode."
                :default-value "Archived")
                nil [132084 132230])
            ("todo-categories-totals-label" variable
               (:documentation "String to label total item counts in Todo Categories mode."
                :default-value "Totals")
                nil [132232 132386])
            ("todo-categories-number-separator" variable
               (:documentation "String between number and category in Todo Categories mode.
This separates the number from the category name in the default
categories display according to priority."
                :default-value " | ")
                nil [132388 132650])
            ("todo-categories-align" variable
               (:documentation "Alignment of category names in Todo Categories mode."
                :default-value 'center)
                nil [132652 132835])
            ("todo-show-categories-table" function
               (:documentation "Display a table of the current file's categories and item counts.

In the initial display the lines of the table are numbered,
indicating the current order of the categories when sequentially
navigating through the todo file with `\\[todo-forward-category]'
and `\\[todo-backward-category]'.  You can reorder the lines, and
hence the category sequence, by typing `\\[todo-raise-category]'
or `\\[todo-lower-category]' to raise or lower the category at
point, or by typing `\\[todo-set-category-number]' and entering a
number at the prompt or by typing `\\[todo-set-category-number]'
with a numeric prefix.  If you save the todo file after
reordering the categories, the new order persists in subsequent
Emacs sessions.

The labels above the category names and item counts are buttons,
and clicking these changes the display: sorted by category name
or by the respective item counts (alternately descending or
ascending).  In these displays the categories are not numbered
and `\\[todo-set-category-number]', `\\[todo-raise-category]' and
`\\[todo-lower-category]' are disabled.  (Programmatically, the
sorting is triggered by passing a non-nil SORTKEY argument.)

In addition, the lines with the category names and item counts
are buttonized, and pressing one of these button jumps to the
category in Todo mode (or Todo Archive mode, for categories
containing only archived items, provided user option
`todo-skip-archived-categories' is non-nil.  These categories
are shown in `todo-archived-only' face."
                :user-visible-flag t)
                nil [132837 134489])
            ("todo-next-button" function
               (:documentation "Move point to the Nth next button in the table of categories."
                :user-visible-flag t
                :arguments ("n"))
                nil [134491 134804])
            ("todo-previous-button" function
               (:documentation "Move point to the Nth previous button in the table of categories."
                :user-visible-flag t
                :arguments ("n"))
                nil [134806 135128])
            ("todo-set-category-number" function
               (:documentation "Change number of category at point in the table of categories.

With ARG nil, prompt for the new number.  Alternatively, the
enter the new number with numerical prefix ARG.  Otherwise, if
ARG is either of the symbols `raise' or `lower', raise or lower
the category line in the table by one, respectively, thereby
decreasing or increasing its number."
                :user-visible-flag t
                :arguments ("arg"))
                nil [135130 137484])
            ("todo-raise-category" function
               (:documentation "Raise priority of category at point in the table of categories."
                :user-visible-flag t)
                nil [137486 137636])
            ("todo-lower-category" function
               (:documentation "Lower priority of category at point in the table of categories."
                :user-visible-flag t)
                nil [137638 137788])
            ("todo-sort-categories-alphabetically-or-numerically" function
               (:documentation "Sort table of categories alphabetically or numerically."
                :user-visible-flag t)
                nil [137790 138212])
            ("todo-sort-categories-by-todo" function
               (:documentation "Sort table of categories by number of todo items."
                :user-visible-flag t)
                nil [138214 138434])
            ("todo-sort-categories-by-diary" function
               (:documentation "Sort table of categories by number of diary items."
                :user-visible-flag t)
                nil [138436 138659])
            ("todo-sort-categories-by-done" function
               (:documentation "Sort table of categories by number of non-archived done items."
                :user-visible-flag t)
                nil [138661 138894])
            ("todo-sort-categories-by-archived" function
               (:documentation "Sort table of categories by number of archived items."
                :user-visible-flag t)
                nil [138896 139128])
            ("todo-categories-buffer" variable
               (:documentation "Name of buffer in Todo Categories mode."
                :default-value "*Todo Categories*")
                nil [139130 139225])
            ("todo-longest-category-name-length" function
               (:documentation "Return the length of the longest name in list CATEGORIES."
                :arguments ("categories"))
                nil [139227 139447])
            ("todo-adjusted-category-label-length" function (:documentation "Return adjusted length of category label button.
The adjustment ensures proper tabular alignment in Todo
Categories mode.") nil [139449 139918])
            ("todo-padded-string" function
               (:documentation "Return category name or label string STR padded with spaces.
The placement of the padding is determined by the value of user
option `todo-categories-align'."
                :arguments ("str"))
                nil [139920 140826])
            ("todo-descending-counts" variable (:documentation "List of keys for category counts sorted in descending order.") nil [140828 140928])
            ("todo-sort" function
               (:documentation "Return a copy of LIST, possibly sorted according to KEY."
                :arguments ("list" "key"))
                nil [140930 141755])
            ("todo-display-sorted" function
               (:documentation "Keep point on the TYPE count sorting button just clicked."
                :arguments ("type"))
                nil [141757 141945])
            ("todo-label-to-key" function
               (:documentation "Return symbol for sort key associated with LABEL."
                :arguments ("label"))
                nil [141947 142424])
            ("todo-insert-sort-button" function
               (:documentation "Insert button for displaying categories sorted by item counts.
LABEL determines which type of count is sorted."
                :arguments ("label"))
                nil [142426 143258])
            ("todo-total-item-counts" function (:documentation "Return a list of total item counts for the current file.") nil [143260 143499])
            ("todo-categories-category-number" variable (:documentation "Variable for numbering categories in Todo Categories mode.") nil [143501 143606])
            ("todo-insert-category-line" function
               (:documentation "Insert button with category CAT's name and item counts.
With non-nil argument NONUM show only these; otherwise, insert a
number in front of the button indicating the category's priority.
The number and the category name are separated by the string
which is the value of the user option
`todo-categories-number-separator'."
                :arguments ("cat" "nonum"))
                nil [143608 146312])
            ("todo-display-categories" function (:documentation "Prepare buffer for displaying table of categories and item counts.") nil [146314 147874])
            ("todo-update-categories-display" function
               (:documentation "Populate table of categories and sort by SORTKEY."
                :arguments ("sortkey"))
                nil [147876 149471])
            ("todo-search" function
               (:documentation "Search for a regular expression in this todo file.
The search runs through the whole file and encompasses all and
only todo and done items; it excludes category names.  Multiple
matches are shown sequentially, highlighted in `todo-search'
face."
                :user-visible-flag t)
                nil [149669 151907])
            ("todo-clear-matches" function
               (:documentation "Remove highlighting on matches found by todo-search."
                :user-visible-flag t)
                nil [151909 152071])
            ("todo-top-priorities-overrides" variable (:documentation "List of rules specifying number of top priority items to show.
These rules override `todo-top-priorities' on invocations of
`\\[todo-filter-top-priorities]' and
`\\[todo-filter-top-priorities-multifile]'.  Each rule is a list
of the form (FILE NUM ALIST), where FILE is a member of
`todo-files', NUM is a number specifying the default number of
top priority items for each category in that file, and ALIST,
when non-nil, consists of conses of a category name in FILE and a
number specifying the default number of top priority items in
that category, which overrides NUM.

This variable should be set interactively by
`\\[todo-set-top-priorities-in-file]' or
`\\[todo-set-top-priorities-in-category]'.") nil [152073 152861])
            ("todo-top-priorities" variable
               (:documentation "Default number of top priorities shown by `todo-filter-top-priorities'."
                :default-value 1)
                nil [152863 153013])
            ("todo-filter-files" variable (:documentation "List of default files for multifile item filtering.") nil [153015 153169])
            ("todo-filter-done-items" variable (:documentation "Non-nil to include done items when processing regexp filters.
Done items from corresponding archive files are also included.") nil [153171 153379])
            ("todo-set-top-priorities-in-file" function
               (:documentation "Set number of top priorities for this file.
See `todo-set-top-priorities' for more details."
                :user-visible-flag t)
                nil [153381 153563])
            ("todo-set-top-priorities-in-category" function
               (:documentation "Set number of top priorities for this category.
See `todo-set-top-priorities' for more details."
                :user-visible-flag t)
                nil [153565 153757])
            ("todo-filter-top-priorities" function
               (:documentation "Display a list of top priority items from different categories.
The categories can be any of those in the current todo file.

With numerical prefix ARG show at most ARG top priority items
from each category.  With `C-u' as prefix argument show the
numbers of top priority items specified by category in
`todo-top-priorities-overrides', if this has an entry for the file(s);
otherwise show `todo-top-priorities' items per category in the
file(s).  With no prefix argument, if a top priorities file for
the current todo file has previously been saved (see
`todo-save-filtered-items-buffer'), visit this file; if there is
no such file, build the list as with prefix argument `C-u'.

  The prefix ARG regulates how many top priorities from
each category to show, as described above."
                :user-visible-flag t
                :arguments ("arg"))
                nil [153759 154643])
            ("todo-filter-top-priorities-multifile" function
               (:documentation "Display a list of top priority items from different categories.
The categories are a subset of the categories in the files listed
in `todo-filter-files', or if this nil, in the files chosen from
a file selection dialog that pops up in this case.

With numerical prefix ARG show at most ARG top priority items
from each category in each file.  With `C-u' as prefix argument
show the numbers of top priority items specified in
`todo-top-priorities-overrides', if this is non-nil; otherwise show
`todo-top-priorities' items per category.  With no prefix
argument, if a top priorities file for the chosen todo files
exists (see `todo-save-filtered-items-buffer'), visit this file;
if there is no such file, do the same as with prefix argument
`C-u'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [154645 155508])
            ("todo-filter-diary-items" function
               (:documentation "Display a list of todo diary items from different categories.
The categories can be any of those in the current todo file.

Called with no prefix ARG, if a diary items file for the current
todo file has previously been saved (see
`todo-save-filtered-items-buffer'), visit this file; if there is
no such file, build the list of diary items.  Called with a
prefix argument, build the list even if there is a saved file of
diary items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [155510 156047])
            ("todo-filter-diary-items-multifile" function
               (:documentation "Display a list of todo diary items from different categories.
The categories are a subset of the categories in the files listed
in `todo-filter-files', or if this nil, in the files chosen from
a file selection dialog that pops up in this case.

Called with no prefix ARG, if a diary items file for the chosen
todo files has previously been saved (see
`todo-save-filtered-items-buffer'), visit this file; if there is
no such file, build the list of diary items.  Called with a
prefix argument, build the list even if there is a saved file of
diary items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [156049 156719])
            ("todo-filter-regexp-items" function
               (:documentation "Prompt for a regular expression and display items that match it.
The matches can be from any categories in the current todo file
and with non-nil option `todo-filter-done-items', can include
not only todo items but also done items, including those in
Archive files.

Called with no prefix ARG, if a regexp items file for the current
todo file has previously been saved (see
`todo-save-filtered-items-buffer'), visit this file; if there is
no such file, build the list of regexp items.  Called with a
prefix argument, build the list even if there is a saved file of
regexp items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [156721 157406])
            ("todo-filter-regexp-items-multifile" function
               (:documentation "Prompt for a regular expression and display items that match it.
The matches can be from any categories in the files listed in
`todo-filter-files', or if this nil, in the files chosen from a
file selection dialog that pops up in this case.  With non-nil
option `todo-filter-done-items', the matches can include not
only todo items but also done items, including those in Archive
files.

Called with no prefix ARG, if a regexp items file for the current
todo file has previously been saved (see
`todo-save-filtered-items-buffer'), visit this file; if there is
no such file, build the list of regexp items.  Called with a
prefix argument, build the list even if there is a saved file of
regexp items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [157408 158225])
            ("todo--fifiles-history" variable (:documentation "List of short file names used by todo-find-filtered-items-file.") nil [158227 158329])
            ("todo-find-filtered-items-file" function
               (:documentation "Choose a filtered items file and visit it."
                :user-visible-flag t)
                nil [158331 159161])
            ("todo-go-to-source-item" function
               (:documentation "Display the file and category of the filtered item at point."
                :user-visible-flag t)
                nil [159163 160228])
            ("todo-multiple-filter-files" variable (:documentation "List of files selected from `todo-multiple-filter-files' widget.") nil [160230 160338])
            ("todo-multiple-filter-files-widget" variable (:documentation "Variable holding widget created by `todo-multiple-filter-files'.") nil [160340 160455])
            ("todo-multiple-filter-files" function (:documentation "Pop to a buffer with a widget for choosing multiple filter files.") nil [160457 161672])
            ("todo-filtered-items-buffer" variable
               (:documentation "Initial name of buffer in Todo Filter Items mode."
                :constant-flag t
                :default-value "Todo filtered items")
                nil [161674 161787])
            ("todo-top-priorities-buffer" variable
               (:documentation "Buffer type string for `todo-filter-items'."
                :constant-flag t
                :default-value "Todo top priorities")
                nil [161789 161896])
            ("todo-diary-items-buffer" variable
               (:documentation "Buffer type string for `todo-filter-items'."
                :constant-flag t
                :default-value "Todo diary items")
                nil [161898 161999])
            ("todo-regexp-items-buffer" variable
               (:documentation "Buffer type string for `todo-filter-items'."
                :constant-flag t
                :default-value "Todo regexp items")
                nil [162001 162104])
            ("todo-filter-items" function
               (:documentation "Display a list of items filtered by FILTER.
The values of FILTER can be `top' for top priority items, a cons
of `top' and a number passed by the caller, `diary' for diary
items, or `regexp' for items matching a regular expression
entered by the user.  The items can come from any categories in
the current todo file or, with non-nil MULTIFILE, from several
files.  If NEW is nil, visit an appropriate file containing the
list of filtered items; if there is no such file, or with non-nil
NEW, build the list and display it.

See the documentation strings of the commands
`todo-filter-top-priorities', `todo-filter-diary-items',
`todo-filter-regexp-items', and those of the corresponding
multifile commands for further details."
                :arguments ("filter" "new" "multifile"))
                nil [162106 164704])
            ("todo-filter-items-1" function
               (:documentation "Build a list of items by applying FILTER to FILE-LIST.
Internal subroutine called by `todo-filter-items', which passes
the values of FILTER and FILE-LIST."
                :arguments ("filter" "file-list"))
                nil [164706 170721])
            ("todo-set-top-priorities" function
               (:documentation "Set number of top priorities shown by `todo-filter-top-priorities'.
With non-nil ARG, set the number only for the current Todo
category; otherwise, set the number for all categories in the
current todo file.

Calling this function via either of the commands
`todo-set-top-priorities-in-file' or
`todo-set-top-priorities-in-category' is the recommended way to
set the user customizable option `todo-top-priorities-overrides'."
                :arguments ("arg"))
                nil [170723 172216])
            ("todo-find-item" function
               (:documentation "Search for filtered item STR in its saved todo file.
Return the list (FOUND FILE CAT), where CAT and FILE are the
item's category and file, and FOUND is a cons cell if the search
succeeds, whose car is the start of the item in FILE and whose
cdr is `done', if the item is now a done item, `changed', if its
text was truncated or augmented or, for a top priority item, if
its priority has changed, and `same' otherwise."
                :arguments ("str"))
                nil [172218 175165])
            ("todo-check-filtered-items-file" function (:documentation "Check if filtered items file is up to date and a show suitable message.") nil [175167 175933])
            ("todo-filter-items-filename" function (:documentation "Return absolute file name for saving this Filtered Items buffer.") nil [175935 176789])
            ("todo-save-filtered-items-buffer" function (:documentation "Save current Filtered Items buffer to a file.
If the file already exists, overwrite it only on confirmation.") nil [176791 177138])
            ("todo-print-buffer-function" variable
               (:documentation "Function called by `todo-print-buffer' to print Todo mode buffers.
Called with one argument which can either be:
- a string, naming a file to save the print image to.
- nil, to send the image to the printer."
                :default-value nil)
                nil [177334 177644])
            ("todo-print-buffer" variable
               (:documentation "Name of buffer with printable version of Todo mode buffer."
                :default-value "*Todo Print*")
                nil [177646 177750])
            ("todo-print-buffer" function
               (:documentation "Produce a printable version of the current Todo mode buffer.
This converts overlays and soft line wrapping and, depending on
the value of `todo-print-buffer-function', includes faces.  With
non-nil argument TO-FILE write the printable version to a file;
otherwise, send it to the default printer."
                :user-visible-flag t
                :arguments ("to-file"))
                nil [177752 179528])
            ("todo-print-buffer-to-file" function
               (:documentation "Save printable version of this Todo mode buffer to a file."
                :user-visible-flag t)
                nil [179530 179669])
            ("todo-legacy-date-time-regexp" variable
               (:documentation "Regexp matching legacy todo-mode.el item date-time strings.
In order for `todo-convert-legacy-files' to correctly convert
this string to the current Todo mode format, the regexp must
contain four explicitly numbered groups (see `(elisp) Regexp
Backslash'), where group 1 matches a string for the year, group 2
a string for the month, group 3 a string for the day and group 4
a string for the time.  The default value converts date-time
strings built using the default value of
`todo-time-string-format' from todo-mode.el."
                :default-value (concat "\\(?1:[0-9]\\{4\\}\\)-\\(?2:[0-9]\\{2\\}\\)-" "\\(?3:[0-9]\\{2\\}\\) \\(?4:[0-9]\\{2\\}:[0-9]\\{2\\}\\)"))
                nil [179861 180578])
            ("todo-convert-legacy-date-time" function (:documentation "Return converted date-time string.
Helper function for `todo-convert-legacy-files'.") nil [180580 181055])
            ("todo-convert-legacy-files" function
               (:documentation "Convert legacy todo files to the current Todo mode format.
The old-style files named by the variables `todo-file-do' and
`todo-file-done' from the old package are converted to the new
format and saved (the latter as a todo archive file) with a new
name in `todo-directory'.  See also the documentation string of
`todo-legacy-date-time-regexp' for further details."
                :user-visible-flag t)
                nil [181057 188445])
            ("todo-absolute-file-name" function
               (:documentation "Return the absolute file name of short todo file NAME.
With TYPE `archive' or `top' return the absolute file name of the
short todo archive or top priorities file name, respectively."
                :arguments ("name" "type"))
                nil [188669 189201])
            ("todo-check-file" function
               (:documentation "Check the state associated with FILE and update it if necessary.
If FILE exists, return t.  If it does not exist and there is no
live buffer with its content, return nil; if there is such a
buffer and the user tries to show it, ask whether to restore
FILE, and if confirmed, do so and return t; else delete the
buffer, clean up the state and return nil."
                :arguments ("file"))
                nil [189203 190833])
            ("todo-category-number" function
               (:documentation "Return the number of category CAT in this todo file.
The buffer-local variable `todo-category-number' holds this
number as its value."
                :arguments ("cat"))
                nil [190835 191257])
            ("todo-current-category" function (:documentation "Return the name of the current category.") nil [191259 191392])
            ("todo-category-select" function (:documentation "Display the current category correctly.") nil [191394 193348])
            ("todo-get-count" function
               (:documentation "Return count of TYPE items in CATEGORY.
If CATEGORY is nil, default to the current category."
                :arguments ("type" "category"))
                nil [193350 193735])
            ("todo-update-count" function
               (:documentation "Change count of TYPE items in CATEGORY by integer INCREMENT.
With nil or omitted CATEGORY, default to the current category."
                :arguments ("type" "increment" "category"))
                nil [193737 194198])
            ("todo-set-categories" function (:documentation "Set `todo-categories' from the sexp at the top of the file.") nil [194200 194768])
            ("todo-update-categories-sexp" function (:documentation "Update the `todo-categories' sexp at the top of the file.") nil [194770 195277])
            ("todo-make-categories-list" function
               (:documentation "Return an alist of todo categories and their item counts.
With non-nil argument FORCE parse the entire file to build the
list; otherwise, get the value by reading the sexp at the top of
the file."
                :arguments ("force"))
                nil [195279 198210])
            ("todo-repair-categories-sexp" function
               (:documentation "Repair corrupt todo file categories sexp.
This should only be needed as a consequence of careless manual
editing or a bug in todo.el.

*Warning*: Calling this command restores the category order to
the list element order in the todo file categories sexp, so any
order changes made in Todo Categories mode will have to be made
again."
                :user-visible-flag t)
                nil [198212 198695])
            ("todo-check-format" function (:documentation "Signal an error if the current todo file is ill-formatted.
Otherwise return t.  Display a warning if the file is well-formed
but the categories sexp differs from the current value of
`todo-categories'.") nil [198697 200352])
            ("todo-item-start" function (:documentation "Move to start of current todo item and return its position.") nil [200354 201275])
            ("todo-item-end" function (:documentation "Move to end of current todo item and return its position.") nil [201277 202514])
            ("todo-item-string" function (:documentation "Return bare text of current item as a string.") nil [202516 202756])
            ("todo-forward-item" function
               (:documentation "Move point COUNT items down (by default, move down by one item)."
                :arguments ("count"))
                nil [202758 203512])
            ("todo-backward-item" function
               (:documentation "Move point up to start of item with next higher priority.
With positive numerical prefix COUNT, move point COUNT items
upward.

If the category's done items are visible, this command called
with a prefix argument only moves point to a higher item, e.g.,
with point on the first done item and called with prefix 1, it
moves to the last todo item; but if called with point on the
first done item without a prefix argument, it moves point to the
empty line above the done items separator."
                :arguments ("count"))
                nil [204128 206070])
            ("todo-remove-item" function (:documentation "Internal function called in editing, deleting or moving items.") nil [206072 206420])
            ("todo-diary-item-p" function (:documentation "Return non-nil if item at point has diary entry format.") nil [206422 206667])
            ("todo-diary-goto-entry" function
               (:documentation "Jump to the diary entry for the BUTTON at point.
If the entry is a todo item, display its category properly.
Overrides `diary-goto-entry'."
                :arguments ("button"))
                nil [207019 208363])
            ("add-function" code nil nil [208365 208439])
            ("todo-revert-buffer" function
               (:documentation "Call `revert-buffer', preserving buffer's current modes.
Also preserve category display, if applicable."
                :user-visible-flag t
                :arguments ("ignore-auto" "noconfirm"))
                nil [208441 208985])
            ("todo-desktop-save-buffer" function (:arguments ("_dir")) nil [208987 209090])
            ("declare-function" code nil nil [209092 209208])
            ("todo-restore-desktop-buffer" function (:arguments ("file" "buffer" "misc")) nil [209210 209469])
            ("add-to-list" code nil nil [209471 209563])
            ("todo-done-item-p" function (:documentation "Return non-nil if item at point is a done item.") nil [209565 209725])
            ("todo-done-item-section-p" function (:documentation "Return non-nil if point is in category's done items section.") nil [209727 210013])
            ("todo--user-error-if-marked-done-item" function (:documentation "Signal user error on marked done items.
Helper function for editing commands that apply only to (possibly
marked) not done todo items.") nil [210015 210618])
            ("todo-reset-done-separator" function
               (:documentation "Replace existing overlays of done items separator string SEP."
                :arguments ("sep"))
                nil [210620 211347])
            ("todo-get-overlay" function
               (:documentation "Return the overlay at point whose `todo' property has value VAL."
                :arguments ("val"))
                nil [211349 212094])
            ("todo-marked-item-p" function (:documentation "Non-nil if this item begins with `todo-item-mark'.
In that case, return the item's prefix overlay.") nil [212096 212580])
            ("todo-insert-with-overlays" function
               (:documentation "Insert ITEM at point and update prefix and header overlays."
                :arguments ("item"))
                nil [212582 213650])
            ("todo-prefix-overlays" function (:documentation "Update the prefix overlays of the current category's items.
The overlay's value is the string `todo-prefix' or with non-nil
`todo-number-prefix' an integer in the sequence from 1 to
the number of todo or done items in the category indicating the
item's priority.  Todo and done items are numbered independently
of each other.") nil [213652 215635])
            ("todo-insert-item--parameters" variable
               (:documentation "List of all item insertion parameters.
Passed by `todo-insert-item' to `todo-insert-item--next-param' to
dynamically create item insertion commands."
                :constant-flag t
                :default-value '((default copy) (diary nonmarking) (calendar date dayname) time (here region)))
                nil [216370 216644])
            ("todo-insert-item--next-param" function
               (:documentation "Generate and invoke an item insertion command.
Dynamically generate the command, its arguments ARGS and its key
binding by recursing through the list of parameters PARAMS,
taking the LAST from a sublist and prompting with KEYS-SO-FAR
keys already entered and those still available."
                :arguments ("args" "params" "last" "keys-so-far"))
                nil [216646 222405])
            ("todo-edit-item--next-key" function (:arguments ("type" "arg")) nil [222407 225017])
            ("todo-y-with-space" variable (:documentation "Non-nil means allow SPC to affirm a \"y or n\" question.") nil [225212 225338])
            ("todo-y-or-n-p" function
               (:documentation "Ask \"y or n\" question PROMPT and return t if answer is \"y\".
Also return t if answer is \"Y\", but unlike `y-or-n-p', allow
SPC to affirm the question only if option `todo-y-with-space' is
non-nil."
                :arguments ("prompt"))
                nil [225340 225725])
            ("todo-category-completions" function
               (:documentation "Return a list of completions for `todo-read-category'.
Each element of the list is a cons of a category name and the
file or list of files (as short file names) it is in.  The files
are either the current (or if there is none, the default) todo
file plus the files listed in `todo-category-completions-files',
or, with non-nil ARCHIVE, the current archive file.

Before calculating the completions, update the value of
`todo-category-completions-files' in case any files named in it
have been removed."
                :arguments ("archive"))
                nil [225727 228726])
            ("todo-read-file-name" function
               (:documentation "Choose and return the name of a todo file, prompting with PROMPT.

Show completions with TAB or SPC; the names are shown in short
form but the absolute truename is returned.  With non-nil ARCHIVE
return the absolute truename of a todo archive file.  With non-nil
MUSTMATCH the name of an existing file must be chosen;
otherwise, a new file name is allowed."
                :arguments ("prompt" "archive" "mustmatch"))
                nil [228728 230070])
            ("todo-read-category" function
               (:documentation "Choose and return a category name, prompting with PROMPT.
Show completions for existing categories with TAB or SPC.

The argument MATCH-TYPE specifies the matching requirements on
the category name: with the value `todo' or `archive' the name
must complete to that of an existing todo or archive category,
respectively; with the value `add' the name must not be that of
an existing category; with all other values both existing and new
valid category names are accepted.

With non-nil argument FILE prompt for a file and complete only
against categories in that file; otherwise complete against all
categories from `todo-category-completions-files'."
                :arguments ("prompt" "match-type" "file"))
                nil [230072 234133])
            ("todo-validate-name" function
               (:documentation "Prompt for new NAME for TYPE until it is valid, then return it.
TYPE can be either of the symbols `file' or `category'."
                :arguments ("name" "type"))
                nil [234135 235815])
            ("todo-read-date" function
               (:documentation "Prompt for Gregorian date and return it in the current format.

With non-nil ARG, prompt for and return only the date component
specified by ARG, which can be one of these symbols:
`month' (prompt for name, return name or number according to
value of `calendar-date-display-form'), `day' of month, or
`year'.  The value of each of these components can be `*',
indicating an unspecified month, day, or year.

When ARG is `day', non-nil arguments MO and YR determine the
number of the last the day of the month."
                :arguments ("arg" "mo" "yr"))
                nil [235878 238877])
            ("todo-read-dayname" function (:documentation "Choose name of a day of the week with completion and return it.") nil [238879 239138])
            ("todo-read-time" function (:documentation "Prompt for and return a valid clock time as a string.

Valid time strings are those matching `diary-time-regexp'.
Typing `<return>' at the prompt returns the current time, if the
user option `todo-always-add-time-string' is non-nil, otherwise
the empty string (i.e., no time string).") nil [239140 239757])
            ("todo" customgroup
               (:documentation "Create and maintain categorized lists of todo items."
                :user-visible-flag t)
                nil [239961 240114])
            ("todo-edit" customgroup
               (:documentation "User options for adding and editing todo items."
                :user-visible-flag t)
                nil [240116 240225])
            ("todo-categories" customgroup
               (:documentation "User options for Todo Categories mode."
                :user-visible-flag t)
                nil [240227 240333])
            ("todo-filtered" customgroup
               (:documentation "User options for Todo Filter Items mode."
                :user-visible-flag t)
                nil [240335 240441])
            ("todo-display" customgroup
               (:documentation "User display options for Todo mode."
                :user-visible-flag t)
                nil [240443 240543])
            ("todo-faces" customgroup
               (:documentation "Faces for the Todo modes."
                :user-visible-flag t)
                nil [240545 240633])
            ("todo-set-show-current-file" function
               (:documentation "The :set function for user option `todo-show-current-file'."
                :arguments ("symbol" "value"))
                nil [240635 240926])
            ("todo-reset-prefix" function
               (:documentation "The :set function for `todo-prefix' and `todo-number-prefix'."
                :arguments ("symbol" "value"))
                nil [240928 241352])
            ("todo-reset-nondiary-marker" function
               (:documentation "The :set function for user option `todo-nondiary-marker'."
                :arguments ("symbol" "value"))
                nil [241354 242795])
            ("todo-reset-done-separator-string" function
               (:documentation "The :set function for `todo-done-separator-string'."
                :arguments ("symbol" "value"))
                nil [242797 243334])
            ("todo-reset-done-string" function
               (:documentation "The :set function for user option `todo-done-string'."
                :arguments ("symbol" "value"))
                nil [243336 244346])
            ("todo-reset-comment-string" function
               (:documentation "The :set function for user option `todo-comment-string'."
                :arguments ("symbol" "value"))
                nil [244348 245202])
            ("todo-reset-highlight-item" function
               (:documentation "The :set function for user option `todo-highlight-item'."
                :arguments ("symbol" "value"))
                nil [245204 245733])
            ("todo-update-filelist-defcustoms" function (:documentation "Update defcustoms that provide choice list of todo files.") nil [245735 246086])
            ("todo-nondiary-marker-matcher" function
               (:documentation "Search for todo item nondiary markers within LIM for font-locking."
                :arguments ("lim"))
                nil [246268 246589])
            ("todo-diary-nonmarking-matcher" function
               (:documentation "Search for diary nonmarking symbol within LIM for font-locking."
                :arguments ("lim"))
                nil [246591 246841])
            ("todo-date-string-matcher" function
               (:documentation "Search for todo item date string within LIM for font-locking."
                :arguments ("lim"))
                nil [246843 247043])
            ("todo-time-string-matcher" function
               (:documentation "Search for todo item time string within LIM for font-locking."
                :arguments ("lim"))
                nil [247045 247290])
            ("todo-diary-expired-matcher" function
               (:documentation "Search for expired diary item date within LIM for font-locking."
                :arguments ("lim"))
                nil [247292 247979])
            ("todo-done-string-matcher" function
               (:documentation "Search for done todo item header within LIM for font-locking."
                :arguments ("lim"))
                nil [247981 248170])
            ("todo-comment-string-matcher" function
               (:documentation "Search for done todo item comment within LIM for font-locking."
                :arguments ("lim"))
                nil [248172 248363])
            ("todo-category-string-matcher-1" function
               (:documentation "Search for todo category name within LIM for font-locking.
This is for fontifying category and file names appearing in Todo
Filtered Items mode following done items."
                :arguments ("lim"))
                nil [248365 248889])
            ("todo-category-string-matcher-2" function
               (:documentation "Search for todo category name within LIM for font-locking.
This is for fontifying category and file names appearing in Todo
Filtered Items mode following todo (not done) items."
                :arguments ("lim"))
                nil [248891 249363])
            ("todo-nondiary-face" variable (:default-value 'todo-nondiary) nil [249365 249407])
            ("todo-date-face" variable (:default-value 'todo-date) nil [249408 249442])
            ("todo-time-face" variable (:default-value 'todo-time) nil [249443 249477])
            ("todo-diary-expired-face" variable (:default-value 'todo-diary-expired) nil [249478 249530])
            ("todo-done-sep-face" variable (:default-value 'todo-done-sep) nil [249531 249573])
            ("todo-done-face" variable (:default-value 'todo-done) nil [249574 249608])
            ("todo-comment-face" variable (:default-value 'todo-comment) nil [249609 249649])
            ("todo-category-string-face" variable (:default-value 'todo-category-string) nil [249650 249706])
            ("todo-font-lock-keywords" variable
               (:documentation "Font-locking for Todo modes."
                :default-value (list '(todo-nondiary-marker-matcher 1 todo-nondiary-face t) '(todo-nondiary-marker-matcher 2 todo-nondiary-face t) '(todo-diary-nonmarking-matcher 1 font-lock-constant-face t) '(todo-date-string-matcher 1 todo-date-face t) '(todo-time-string-matcher 1 todo-time-face t) '(todo-done-string-matcher 0 todo-done-face t) '(todo-comment-string-matcher 1 todo-comment-face t) '(todo-category-string-matcher-1 1 todo-category-string-face t t) '(todo-category-string-matcher-2 1 todo-category-string-face t t) '(todo-diary-expired-matcher 1 todo-diary-expired-face t) '(todo-diary-expired-matcher 2 todo-diary-expired-face t t)))
                nil [249707 250510])
            ("todo-key-bindings-t" variable
               (:documentation "List of key bindings for Todo mode only."
                :default-value `(("Af" todo-find-archive) ("Ac" todo-choose-archive) ("Ad" todo-archive-done-item) ("Cv" todo-toggle-view-done-items) ("v" todo-toggle-view-done-items) ("Ca" todo-add-category) ("Cr" todo-rename-category) ("Cg" todo-merge-category) ("Cm" todo-move-category) ("Ck" todo-delete-category) ("Cts" todo-set-top-priorities-in-category) ("Cey" todo-edit-category-diary-inclusion) ("Cek" todo-edit-category-diary-nonmarking) ("Fa" todo-add-file) ("Fr" todo-rename-file) ("Ff" todo-find-filtered-items-file) ("FV" todo-toggle-view-done-only) ("V" todo-toggle-view-done-only) ("Ftt" todo-filter-top-priorities) ("Ftm" todo-filter-top-priorities-multifile) ("Fts" todo-set-top-priorities-in-file) ("Fyy" todo-filter-diary-items) ("Fym" todo-filter-diary-items-multifile) ("Fxx" todo-filter-regexp-items) ("Fxm" todo-filter-regexp-items-multifile) ("e" todo-edit-item) ("d" todo-item-done) ("i" todo-insert-item) ("k" todo-delete-item) ("m" todo-move-item) ("u" todo-item-undone) ([remap newline] newline-and-indent)))
                nil [250691 252061])
            ("todo-key-bindings-t+a+f" variable
               (:documentation "List of key bindings for Todo, Archive, and Filtered Items modes."
                :default-value `(("C*" todo-mark-category) ("Cu" todo-unmark-category) ("Fh" todo-toggle-item-header) ("h" todo-toggle-item-header) ("Fk" todo-delete-file) ("Fe" todo-edit-file) ("FH" todo-toggle-item-highlighting) ("H" todo-toggle-item-highlighting) ("FN" todo-toggle-prefix-numbers) ("N" todo-toggle-prefix-numbers) ("PB" todo-print-buffer) ("PF" todo-print-buffer-to-file) ("j" todo-jump-to-category) ("n" todo-next-item) ("p" todo-previous-item) ("q" todo-quit) ("s" todo-save) ("t" todo-show)))
                nil [252063 252737])
            ("todo-key-bindings-t+a" variable
               (:documentation "List of key bindings for Todo and Todo Archive modes."
                :default-value `(("Fc" todo-show-categories-table) ("S" todo-search) ("X" todo-clear-matches) ("b" todo-backward-category) ("f" todo-forward-category) ("*" todo-toggle-mark-item)))
                nil [252739 253028])
            ("todo-key-bindings-t+f" variable
               (:documentation "List of key bindings for Todo and Todo Filtered Items modes."
                :default-value `(("l" todo-lower-item-priority) ("r" todo-raise-item-priority) ("#" todo-set-item-priority)))
                nil [253030 253238])
            ("todo-mode-map" variable
               (:documentation "Todo mode keymap."
                :default-value (let ((map (make-keymap))) (dolist (kb todo-key-bindings-t) (define-key map (nth 0 kb) (nth 1 kb))) (dolist (kb todo-key-bindings-t+a+f) (define-key map (nth 0 kb) (nth 1 kb))) (dolist (kb todo-key-bindings-t+a) (define-key map (nth 0 kb) (nth 1 kb))) (dolist (kb todo-key-bindings-t+f) (define-key map (nth 0 kb) (nth 1 kb))) map))
                nil [253240 253662])
            ("todo-archive-mode-map" variable
               (:documentation "Todo Archive mode keymap."
                :default-value (let ((map (make-sparse-keymap))) (dolist (kb todo-key-bindings-t+a+f) (define-key map (nth 0 kb) (nth 1 kb))) (dolist (kb todo-key-bindings-t+a) (define-key map (nth 0 kb) (nth 1 kb))) (define-key map "a" 'todo-jump-to-archive-category) (define-key map "u" 'todo-unarchive-items) map))
                nil [253664 254044])
            ("todo-edit-mode-map" variable
               (:documentation "Todo Edit mode keymap."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "" 'todo-edit-quit) (define-key map [remap newline] 'newline-and-indent) map))
                nil [254046 254250])
            ("todo-categories-mode-map" variable
               (:documentation "Todo Categories mode keymap."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "c" 'todo-sort-categories-alphabetically-or-numerically) (define-key map "t" 'todo-sort-categories-by-todo) (define-key map "y" 'todo-sort-categories-by-diary) (define-key map "d" 'todo-sort-categories-by-done) (define-key map "a" 'todo-sort-categories-by-archived) (define-key map "#" 'todo-set-category-number) (define-key map "l" 'todo-lower-category) (define-key map "r" 'todo-raise-category) (define-key map "n" 'todo-next-button) (define-key map "p" 'todo-previous-button) (define-key map [tab] 'todo-next-button) (define-key map [backtab] 'todo-previous-button) (define-key map "q" 'todo-quit) map))
                nil [254252 255032])
            ("todo-filtered-items-mode-map" variable
               (:documentation "Todo Filtered Items mode keymap."
                :default-value (let ((map (make-sparse-keymap))) (dolist (kb todo-key-bindings-t+a+f) (define-key map (nth 0 kb) (nth 1 kb))) (dolist (kb todo-key-bindings-t+f) (define-key map (nth 0 kb) (nth 1 kb))) (define-key map "g" 'todo-go-to-source-item) (define-key map [remap newline] 'todo-go-to-source-item) map))
                nil [255034 255435])
            ("easy-menu-define" code nil nil [255437 258329])
            ("todo-show-current-file" function (:documentation "Visit current instead of default todo file with `todo-show'.
Added to `pre-command-hook' in Todo mode when user option
`todo-show-current-file' is set to non-nil.") nil [258534 258796])
            ("todo-update-buffer-list" function (:documentation "Make current Todo mode buffer file car of `todo-file-buffers'.
This function is added to `post-command-hook' in Todo mode.") nil [259504 259860])
            ("todo-reset-global-current-todo-file" function (:documentation "Update the value of `todo-global-current-todo-file'.
This becomes the latest existing todo file or, if there is none,
the value of `todo-default-todo-file'.
This function is added to `kill-buffer-hook' in Todo mode.") nil [259862 260378])
            ("todo-reset-and-enable-done-separator" function (:documentation "Show resized done items separator overlay after window change.
Added to `window-configuration-change-hook' in Todo mode.") nil [260380 260752])
            ("todo-modes-set-1" function (:documentation "Make some settings that apply to multiple Todo modes.") nil [260754 261164])
            ("todo-hl-line-range" function (:documentation "Make `todo-toggle-item-highlighting' highlight entire item.") nil [261166 261364])
            ("todo-modes-set-2" function (:documentation "Make some settings that apply to multiple Todo modes.") nil [261366 261679])
            ("todo-modes-set-3" function (:documentation "Make some settings that apply to multiple Todo modes.") nil [261681 261926])
            ("put" code nil nil [261928 261965])
            ("define-derived-mode" code nil nil [261982 263051])
            ("put" code nil nil [263053 263098])
            ("define-derived-mode" code nil nil [263239 263548])
            ("define-derived-mode" code nil nil [263550 264235])
            ("put" code nil nil [264237 264285])
            ("define-derived-mode" code nil nil [264287 264906])
            ("put" code nil nil [264908 264960])
            ("define-derived-mode" code nil nil [264977 265186])
            ("todo-mode" package nil nil [265269 265289]))          
      :file "todo-mode.el.gz"
      :pointmax 265318
      :fsize 61723
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1905124"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("timeclock" customgroup
               (:documentation "Keeping track of the time that gets spent."
                :user-visible-flag t)
                nil [3092 3178])
            ("timeclock-file" variable
               (:documentation "The file used to store timeclock data in."
                :default-value (locate-user-emacs-file "timelog" ".timelog"))
                nil [3201 3404])
            ("timeclock-workday" variable
               (:documentation "The length of a work period in seconds."
                :default-value (* 8 60 60))
                nil [3406 3528])
            ("timeclock-relative" variable
               (:documentation "Whether to make reported time relative to `timeclock-workday'.
For example, if the length of a normal workday is eight hours, and you
work four hours on Monday, then the amount of time \"remaining\" on
Tuesday is twelve hours -- relative to an averaged work period of
eight hours -- or eight hours, non-relative.  So relative time takes
into account any discrepancy of time under-worked or over-worked on
previous days.  This only affects the timeclock mode line display."
                :default-value t)
                nil [3530 4075])
            ("timeclock-get-project-function" variable
               (:documentation "The function used to determine the name of the current project.
When clocking in, and no project is specified, this function will be
called to determine what is the current project to be worked on.
If this variable is nil, no questions will be asked."
                :default-value 'timeclock-ask-for-project)
                nil [4077 4439])
            ("timeclock-get-reason-function" variable
               (:documentation "A function used to determine the reason for clocking out.
When clocking out, and no reason is specified, this function will be
called to determine what is the reason.
If this variable is nil, no questions will be asked."
                :default-value 'timeclock-ask-for-reason)
                nil [4441 4770])
            ("timeclock-get-workday-function" variable (:documentation "A function used to determine the length of today's workday.
The first time that a user clocks in each day, this function will be
called to determine what is the length of the current workday.  If
the return value is nil, or equal to `timeclock-workday', nothing special
will be done.  If it is a quantity different from `timeclock-workday',
however, a record will be output to the timelog file to note the fact that
that day has a length that is different from the norm.") nil [4772 5352])
            ("timeclock-ask-before-exiting" variable
               (:documentation "If non-nil, ask if the user wants to clock out before exiting Emacs.
This variable only has effect if set with \\[customize]."
                :default-value t)
                nil [5354 5761])
            ("timeclock-update-timer" variable (:documentation "The timer used to update `timeclock-mode-string'.") nil [5763 5852])
            ("define-obsolete-variable-alias" code nil nil [5854 5952])
            ("display-time-hook" variable nil nil [5976 6002])
            ("timeclock-mode-line-display" variable nil nil [6003 6039])
            ("timeclock-use-display-time" variable
               (:documentation "If non-nil, use `display-time-hook' for doing mode line updates.
The advantage of this is that one less timer has to be set running
amok in Emacs's process space.  The disadvantage is that it requires
you to have `display-time' running.  If you don't want to use
`display-time', but still want the mode line to show how much time is
left, set this variable to nil.  Changing the value of this variable
while timeclock information is being displayed in the mode line has no
effect.  You should call the function `timeclock-mode-line-display' with
a positive argument to force an update."
                :default-value t)
                nil [6041 7549])
            ("timeclock-first-in-hook" variable (:documentation "A hook run for the first \"in\" event each day.
Note that this hook is run before recording any events.  Thus the
value of `timeclock-hours-today', `timeclock-last-event' and the
return value of function `timeclock-last-period' are relative previous
to today.") nil [7551 7888])
            ("timeclock-load-hook" variable (:documentation "Hook that gets run after timeclock has been loaded.") nil [7890 8015])
            ("timeclock-in-hook" variable (:documentation "A hook run every time an \"in\" event is recorded.") nil [8017 8139])
            ("timeclock-day-over-hook" variable (:documentation "A hook that is run when the workday has been completed.
This hook is only run if the current time remaining is being displayed
in the mode line.  See the variable `timeclock-mode-line-display'.") nil [8141 8412])
            ("timeclock-out-hook" variable (:documentation "A hook run every time an \"out\" event is recorded.") nil [8414 8538])
            ("timeclock-done-hook" variable (:documentation "A hook run every time a project is marked as completed.") nil [8540 8669])
            ("timeclock-event-hook" variable (:documentation "A hook run every time any event is recorded.") nil [8671 8790])
            ("timeclock-last-event" variable (:documentation "A list containing the last event that was recorded.
The format of this list is (CODE TIME PROJECT).") nil [8792 8929])
            ("timeclock-last-event-workday" variable (:documentation "The number of seconds in the workday of `timeclock-last-event'.") nil [8931 9040])
            ("timeclock-discrepancy" variable (:documentation "A variable containing the time discrepancy before the last event.
Normally, timeclock assumes that you intend to work for
`timeclock-workday' seconds every day.  Any days in which you work
more or less than this amount is considered either a positive or
a negative discrepancy.  If you work in such a manner that the
discrepancy is always brought back to zero, then you will by
definition have worked an average amount equal to `timeclock-workday'
each day.") nil [9067 9563])
            ("timeclock-elapsed" variable (:documentation "A variable containing the time elapsed for complete periods today.
This value is not accurate enough to be useful by itself.  Rather,
call `timeclock-workday-elapsed', to determine how much time has been
worked so far today.  Also, if `timeclock-relative' is nil, this value
will be the same as `timeclock-discrepancy'.") nil [9565 9919])
            ("timeclock-use-elapsed" variable (:documentation "Non-nil if the mode line should display time elapsed, not remaining.") nil [9921 10028])
            ("timeclock-last-period" variable (:documentation "Integer representing the number of seconds in the last period.
Note that you shouldn't access this value, but instead should use the
function `timeclock-last-period'.") nil [10030 10235])
            ("timeclock-mode-string" variable (:documentation "The timeclock string (optionally) displayed in the mode line.
The time is bracketed by <> if you are clocked in, otherwise by [].") nil [10237 10405])
            ("timeclock-day-over" variable (:documentation "The date of the last day when notified \"day over\" for.") nil [10407 10499])
            ("define-obsolete-function-alias" code nil nil [10522 10620])
            ("define-minor-mode" code nil nil [10637 12795])
            ("timeclock-time-to-date" function
               (:documentation "Convert the TIME value to a textual date string."
                :arguments ("time"))
                nil [12797 12939])
            ("timeclock-in" function
               (:documentation "Clock in, recording the current time moment in the timelog.
With a numeric prefix ARG, record the fact that today has only that
many hours in it to be worked.  If ARG is a non-numeric prefix argument
(non-nil, but not a number), 0 is assumed (working on a holiday or
weekend).  *If not called interactively, ARG should be the number of
_seconds_ worked today*.  This feature only has effect the first time
this function is called within a day.

PROJECT is the project being clocked into.  If PROJECT is nil, and
FIND-PROJECT is non-nil -- or the user calls `timeclock-in'
interactively -- call the function `timeclock-get-project-function' to
discover the name of the project."
                :user-visible-flag t
                :arguments ("arg" "project" "find-project"))
                nil [12956 14948])
            ("timeclock-out" function
               (:documentation "Clock out, recording the current time moment in the timelog.
If a prefix ARG is given, the user has completed the project that was
begun during the last time segment.

REASON is the user's reason for clocking out.  If REASON is nil, and
FIND-REASON is non-nil -- or the user calls `timeclock-out'
interactively -- call the function `timeclock-get-reason-function' to
discover the reason."
                :user-visible-flag t
                :arguments ("arg" "reason" "find-reason"))
                nil [14965 15891])
            ("timeclock-workday-remaining" function
               (:documentation "Return the number of seconds until the workday is complete.
The amount returned is relative to the value of `timeclock-workday'.
If TODAY-ONLY is non-nil, the value returned will be relative only to
the time worked today, and not to past time."
                :arguments ("today-only"))
                nil [15962 16413])
            ("timeclock-status-string" function
               (:documentation "Report the overall timeclock status at the present moment.
If SHOW-SECONDS is non-nil, display second resolution.
If TODAY-ONLY is non-nil, the display will be relative only to time
worked today, ignoring the time worked on previous days."
                :user-visible-flag t
                :arguments ("show-seconds" "today-only"))
                nil [16430 17559])
            ("timeclock-change" function
               (:documentation "Change to working on a different project.
This clocks out of the current project, then clocks in on a new one.
With a prefix ARG, consider the previous project as finished at the
time of changeover.  PROJECT is the name of the last project you were
working on."
                :user-visible-flag t
                :arguments ("arg" "project"))
                nil [17576 17998])
            ("timeclock-query-out" function (:documentation "Ask the user whether to clock out.
This is a useful function for adding to `kill-emacs-query-functions'.") nil [18015 18356])
            ("timeclock-reread-log" function
               (:documentation "Re-read the timeclock, to account for external changes.
Returns the new value of `timeclock-discrepancy'."
                :user-visible-flag t)
                nil [18373 18714])
            ("timeclock-seconds-to-string" function
               (:documentation "Convert SECONDS into a compact time string.
If SHOW-SECONDS is non-nil, make the resolution of the return string
include the second count.  If REVERSE-LEADER is non-nil, it means to
output a \"+\" if the time value is negative, rather than a \"-\".
This is used when negative time values have an inverted meaning (such
as with time remaining, where negative time really means overtime)."
                :arguments ("seconds" "show-seconds" "reverse-leader"))
                nil [18716 19599])
            ("timeclock-currently-in-p" function (:documentation "Return non-nil if the user is currently clocked in.") nil [19601 19736])
            ("timeclock-workday-remaining-string" function
               (:documentation "Return a string representing the amount of time left today.
Display second resolution if SHOW-SECONDS is non-nil.  If TODAY-ONLY
is non-nil, the display will be relative only to time worked today.
See `timeclock-relative' for more information about the meaning of
\"relative to today\"."
                :user-visible-flag t
                :arguments ("show-seconds" "today-only"))
                nil [19753 20343])
            ("timeclock-workday-elapsed" function (:documentation "Return the number of seconds worked so far today.
If RELATIVE is non-nil, the amount returned will be relative to past
time worked.  The default is to return only the time that has elapsed
so far today.") nil [20345 20680])
            ("timeclock-workday-elapsed-string" function
               (:documentation "Return a string representing the amount of time worked today.
Display seconds resolution if SHOW-SECONDS is non-nil.  If RELATIVE is
non-nil, the amount returned will be relative to past time worked."
                :user-visible-flag t
                :arguments ("show-seconds"))
                nil [20697 21165])
            ("define-obsolete-function-alias" code nil nil [21167 21245])
            ("define-obsolete-function-alias" code nil nil [21246 21331])
            ("timeclock-when-to-leave" function
               (:documentation "Return a time value representing the end of today's workday.
If TODAY-ONLY is non-nil, the value returned will be relative only to
the time worked today, and not to past time."
                :arguments ("today-only"))
                nil [21402 21808])
            ("timeclock-when-to-leave-string" function
               (:documentation "Return a string representing the end of today's workday.
This string is relative to the value of `timeclock-workday'.  If
SHOW-SECONDS is non-nil, the value printed/returned will include
seconds.  If TODAY-ONLY is non-nil, the value returned will be
relative only to the time worked today, and not to past time."
                :user-visible-flag t
                :arguments ("show-seconds" "today-only"))
                nil [21825 22570])
            ("timeclock-make-hours-explicit" function
               (:documentation "Specify all workday lengths in `timeclock-file'.
OLD-DEFAULT hours are set for every day that has no number indicated."
                :user-visible-flag t
                :arguments ("old-default"))
                nil [22572 23898])
            ("timeclock-project-list" variable nil nil [23925 23960])
            ("timeclock-last-project" variable nil nil [23961 23996])
            ("timeclock-completing-read" function
               (:documentation "A version of `completing-read' that works on both Emacs and XEmacs.
PROMPT, ALIST and DEFAULT are used for the PROMPT, COLLECTION and DEF
arguments of `completing-read'."
                :arguments ("prompt" "alist" "default"))
                nil [23998 24437])
            ("timeclock-ask-for-project" function (:documentation "Ask the user for the project they are clocking into.") nil [24439 24793])
            ("timeclock-reason-list" variable nil nil [24795 24829])
            ("timeclock-ask-for-reason" function (:documentation "Ask the user for the reason they are clocking out.") nil [24831 25024])
            ("define-obsolete-function-alias" code nil nil [25026 25122])
            ("timeclock-update-mode-line" function
               (:documentation "Update the `timeclock-mode-string' displayed in the mode line.
The value of `timeclock-relative' affects the display as described in
that variable's documentation."
                :user-visible-flag t)
                nil [25124 26034])
            ("put" code nil nil [26036 26088])
            ("timeclock-log" function
               (:documentation "Log the event CODE to the timeclock log, at the time of call.
If PROJECT is a string, it represents the project which the event is
being logged for.  Normally only \"in\" events specify a project."
                :arguments ("code" "project"))
                nil [26090 27214])
            ("timeclock-moment-regexp" variable (:default-value (concat "\\([bhioO]\\)\\s-+" "\\([0-9]+\\)/\\([0-9]+\\)/\\([0-9]+\\)\\s-+" "\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\)[ 	]*" "\\([^
]*\\)")) nil [27216 27394])
            ("timeclock-read-moment" function (:documentation "Read the moment under point from the timelog.") nil [27396 27945])
            ("timeclock-last-period" function
               (:documentation "Return the value of the last event period.
If the last event was a clock-in, the period will be open ended, and
growing every second.  Otherwise, it is a fixed amount which has been
recorded to disk.  If MOMENT is non-nil, use that as the current time.
This is only provided for coherency when used by
`timeclock-discrepancy'."
                :arguments ("moment"))
                nil [27947 28471])
            ("timeclock-entry-length" function
               (:documentation "Return the length of ENTRY in seconds."
                :arguments ("entry"))
                nil [28473 28619])
            ("timeclock-entry-begin" function
               (:documentation "Return the start time of ENTRY."
                :arguments ("entry"))
                nil [28621 28711])
            ("timeclock-entry-end" function
               (:documentation "Return the end time of ENTRY."
                :arguments ("entry"))
                nil [28713 28800])
            ("timeclock-entry-project" function
               (:documentation "Return the project of ENTRY."
                :arguments ("entry"))
                nil [28802 28893])
            ("timeclock-entry-comment" function
               (:documentation "Return the comment of ENTRY."
                :arguments ("entry"))
                nil [28895 28986])
            ("timeclock-entry-list-length" function
               (:documentation "Return the total length of ENTRY-LIST in seconds."
                :arguments ("entry-list"))
                nil [28988 29219])
            ("timeclock-entry-list-begin" function
               (:documentation "Return the start time of the first element of ENTRY-LIST."
                :arguments ("entry-list"))
                nil [29221 29376])
            ("timeclock-entry-list-end" function
               (:documentation "Return the end time of the last element of ENTRY-LIST."
                :arguments ("entry-list"))
                nil [29378 29533])
            ("timeclock-entry-list-span" function
               (:documentation "Return the total time in seconds spanned by ENTRY-LIST."
                :arguments ("entry-list"))
                nil [29535 29759])
            ("timeclock-entry-list-break" function
               (:documentation "Return the total break time (span - length) in ENTRY-LIST."
                :arguments ("entry-list"))
                nil [29761 29965])
            ("timeclock-entry-list-projects" function
               (:documentation "Return a list of all the projects in ENTRY-LIST."
                :arguments ("entry-list"))
                nil [29967 30273])
            ("timeclock-day-required" function
               (:documentation "Return the required length of DAY in seconds, default `timeclock-workday'."
                :arguments ("day"))
                nil [30275 30428])
            ("timeclock-day-length" function
               (:documentation "Return the actual length of DAY in seconds."
                :arguments ("day"))
                nil [30430 30557])
            ("timeclock-day-debt" function
               (:documentation "Return the debt (required - actual) associated with DAY, in seconds."
                :arguments ("day"))
                nil [30559 30734])
            ("timeclock-day-begin" function
               (:documentation "Return the start time of DAY."
                :arguments ("day"))
                nil [30736 30847])
            ("timeclock-day-end" function
               (:documentation "Return the end time of DAY."
                :arguments ("day"))
                nil [30849 30954])
            ("timeclock-day-span" function
               (:documentation "Return the span of DAY."
                :arguments ("day"))
                nil [30956 31059])
            ("timeclock-day-break" function
               (:documentation "Return the total break time of DAY."
                :arguments ("day"))
                nil [31061 31178])
            ("timeclock-day-projects" function
               (:documentation "Return a list of all the projects in DAY."
                :arguments ("day"))
                nil [31180 31310])
            ("timeclock-day-list-template" function
               (:documentation "Template for summing the result of FUNC on each element of DAY-LIST."
                :arguments ("func" "day-list"))
                nil [31312 31546])
            ("timeclock-day-list-required" function
               (:documentation "Return total required length of DAY-LIST, in seconds."
                :arguments ("day-list"))
                nil [31548 31718])
            ("timeclock-day-list-length" function
               (:documentation "Return actual length of DAY-LIST, in seconds."
                :arguments ("day-list"))
                nil [31720 31878])
            ("timeclock-day-list-debt" function
               (:documentation "Return total debt (required - actual) of DAY-LIST."
                :arguments ("day-list"))
                nil [31880 32039])
            ("timeclock-day-list-begin" function
               (:documentation "Return the start time of DAY-LIST."
                :arguments ("day-list"))
                nil [32041 32165])
            ("timeclock-day-list-end" function
               (:documentation "Return the end time of DAY-LIST."
                :arguments ("day-list"))
                nil [32167 32292])
            ("timeclock-day-list-span" function
               (:documentation "Return the span of DAY-LIST."
                :arguments ("day-list"))
                nil [32294 32431])
            ("timeclock-day-list-break" function
               (:documentation "Return the total break of DAY-LIST."
                :arguments ("day-list"))
                nil [32433 32579])
            ("timeclock-day-list-projects" function
               (:documentation "Return a list of all the projects in DAY-LIST."
                :arguments ("day-list"))
                nil [32581 32869])
            ("timeclock-current-debt" function
               (:documentation "Return the seconds debt from LOG-DATA, default `timeclock-log-data'."
                :arguments ("log-data"))
                nil [32871 33043])
            ("timeclock-day-alist" function
               (:documentation "Return the date alist from LOG-DATA, default `timeclock-log-data'."
                :arguments ("log-data"))
                nil [33045 33212])
            ("timeclock-day-list" function
               (:documentation "Return a list of the cdrs of the date alist from LOG-DATA."
                :arguments ("log-data"))
                nil [33214 33466])
            ("timeclock-project-alist" function
               (:documentation "Return the project alist from LOG-DATA, default `timeclock-log-data'."
                :arguments ("log-data"))
                nil [33468 33642])
            ("timeclock-log-data" function
               (:documentation "Return the contents of the timelog file, in a useful format.
If the optional argument RECENT-ONLY is non-nil, only show the contents
from the last point where the time debt (see below) was set.
If the optional argument FILENAME is non-nil, it is used instead of
the file specified by `timeclock-file.'

A timelog contains data in the form of a single entry per line.
Each entry has the form:

  CODE YYYY/MM/DD HH:MM:SS [COMMENT]

CODE is one of: b, h, i, o or O.  COMMENT is optional when the code is
i, o or O.  The meanings of the codes are:

  b  Set the current time balance, or \"time debt\".  Useful when
     archiving old log data, when a debt must be carried forward.
     The COMMENT here is the number of seconds of debt.

  h  Set the required working time for the given day.  This must
     be the first entry for that day.  The COMMENT in this case is
     the number of hours in this workday.  Floating point amounts
     are allowed.

  i  Clock in.  The COMMENT in this case should be the name of the
     project worked on.

  o  Clock out.  COMMENT is unnecessary, but can be used to provide
     a description of how the period went, for example.

  O  Final clock out.  Whatever project was being worked on, it is
     now finished.  Useful for creating summary reports.

When this function is called, it will return a data structure with the
following format:

  (DEBT ENTRIES-BY-DAY ENTRIES-BY-PROJECT)

DEBT is a floating point number representing the number of seconds
“owed” before any work was done.  For a new file (one without a `b'
entry), this is always zero.

The two entries lists have similar formats.  They are both alists,
where the CAR is the index, and the CDR is a list of time entries.
For ENTRIES-BY-DAY, the CAR is a textual date string, of the form
YYYY/MM/DD.  For ENTRIES-BY-PROJECT, it is the name of the project
worked on, or t for the default project.

The CDR for ENTRIES-BY-DAY is slightly different than for
ENTRIES-BY-PROJECT.  It has the following form:

  (DAY-LENGTH TIME-ENTRIES...)

For ENTRIES-BY-PROJECT, there is no DAY-LENGTH member.  It is simply a
list of TIME-ENTRIES.  Note that if DAY-LENGTH is nil, it means
whatever is the default should be used.

A TIME-ENTRY is a recorded time interval.  It has the following format
(although generally one does not have to manipulate these entries
directly; see below):

  (BEGIN-TIME END-TIME PROJECT [COMMENT] [FINAL-P])

Anyway, suffice it to say there are a lot of structures.  Typically
the user is expected to manipulate to the day(s) or project(s) that he
or she wants, at which point the following helper functions may be
used:

  timeclock-day-required
  timeclock-day-length
  timeclock-day-debt
  timeclock-day-begin
  timeclock-day-end
  timeclock-day-span
  timeclock-day-break
  timeclock-day-projects

  timeclock-day-list-required
  timeclock-day-list-length
  timeclock-day-list-debt
  timeclock-day-list-begin
  timeclock-day-list-end
  timeclock-day-list-span
  timeclock-day-list-break
  timeclock-day-list-projects

  timeclock-entry-length
  timeclock-entry-begin
  timeclock-entry-end
  timeclock-entry-project
  timeclock-entry-comment

  timeclock-entry-list-length
  timeclock-entry-list-begin
  timeclock-entry-list-end
  timeclock-entry-list-span
  timeclock-entry-list-break
  timeclock-entry-list-projects

A few comments should make the use of the above functions obvious:

  `required' is the amount of time that must be spent during a day, or
  sequence of days, in order to have no debt.

  `length' is the actual amount of time that was spent.

  `debt' is the difference between required time and length.  A
  negative debt signifies overtime.

  `begin' is the earliest moment at which work began.

  `end' is the final moment work was done.

  `span' is the difference between begin and end.

  `break' is the difference between span and length.

  `project' is the project that was worked on, and `projects' is a
  list of all the projects that were worked on during a given period.

  `comment', where it applies, could mean anything.

There are a few more functions available, for locating day and entry
lists:

  timeclock-day-alist LOG-DATA
  timeclock-project-alist LOG-DATA
  timeclock-current-debt LOG-DATA

See the documentation for the given function if more info is needed."
                :arguments ("recent-only" "filename"))
                nil [33644 40311])
            ("timeclock-find-discrep" function (:documentation "Calculate time discrepancies, in seconds.
The result is a three element list, containing the total time
discrepancy, today's discrepancy, and the time worked today.") nil [40313 43957])
            ("timeclock-day-base" function
               (:documentation "Given a time within a day, return 0:0:0 within that day.
If optional argument TIME is non-nil, use that instead of the current time."
                :arguments ("time"))
                nil [44014 44368])
            ("timeclock-mean" function
               (:documentation "Compute the arithmetic mean of the values in the list L."
                :arguments ("l"))
                nil [44370 44616])
            ("timeclock-generate-report" function
               (:documentation "Generate a summary report based on the current timelog file.
By default, the report is in plain text, but if the optional argument
HTML-P is non-nil, HTML markup is added."
                :user-visible-flag t
                :arguments ("html-p"))
                nil [44618 50835])
            ("timeclock-visit-timelog" function
               (:documentation "Open the file named by `timeclock-file' in another window."
                :user-visible-flag t)
                nil [50868 51023])
            ("timeclock" package nil nil [51025 51045])
            ("run-hooks" code nil nil [51047 51079])
            ("if" code nil nil [51194 51258]))          
      :file "timeclock.el.gz"
      :pointmax 51287
      :fsize 13453
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-22fbfa0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("with-decoded-time-value" function
               (:documentation "Decode a time value and bind it according to VARLIST, then eval BODY.

The value of the last form in BODY is returned.

Each element of the list VARLIST is a list of the form
(HIGH-SYMBOL LOW-SYMBOL MICRO-SYMBOL [PICO-SYMBOL [TYPE-SYMBOL]] TIME-VALUE).
The time value TIME-VALUE is decoded and the result is bound to
the symbols HIGH-SYMBOL, LOW-SYMBOL and MICRO-SYMBOL.
The optional PICO-SYMBOL is bound to the picoseconds part.

The optional TYPE-SYMBOL is bound to the type of the time value.
Type 0 is the cons cell (HIGH . LOW), type 1 is the list (HIGH
LOW), type 2 is the list (HIGH LOW MICRO), and type 3 is the
list (HIGH LOW MICRO PICO)."
                :arguments ("varlist" "body"))
                nil [1600 4231])
            ("encode-time-value" function
               (:documentation "Encode HIGH, LOW, MICRO, and PICO into a time value of type TYPE.
Type 0 is the cons cell (HIGH . LOW), type 1 is the list (HIGH LOW),
type 2 is (HIGH LOW MICRO), and type 3 is (HIGH LOW MICRO PICO).

For backward compatibility, if only four arguments are given,
it is assumed that PICO was omitted and should be treated as zero."
                :arguments ("high" "low" "micro" "pico" "type"))
                nil [4233 4847])
            ("make-obsolete" code nil nil [4849 4894])
            ("make-obsolete" code nil nil [4895 4946])
            ("parse-time-string" function (:prototype-flag t) nil [4948 4990])
            ("timezone-make-date-arpa-standard" function (:prototype-flag t) nil [4991 5046])
            ("date-to-time" function
               (:documentation "Parse a string DATE that represents a date-time and return a time value.
If DATE lacks timezone information, GMT is assumed."
                :arguments ("date"))
                nil [5323 5939])
            ("defalias" code nil nil [5956 5995])
            ("seconds-to-time" function
               (:documentation "Convert SECONDS to a time value."
                :arguments ("seconds"))
                nil [6012 6105])
            ("days-to-time" function
               (:documentation "Convert DAYS into a time value."
                :arguments ("days"))
                nil [6122 6294])
            ("time-since" function
               (:documentation "Return the time elapsed since TIME.
TIME should be either a time value or a date-time string."
                :arguments ("time"))
                nil [6311 6567])
            ("define-obsolete-function-alias" code nil nil [6584 6653])
            ("date-to-day" function
               (:documentation "Return the number of days between year 1 and DATE.
DATE should be a date-time string."
                :arguments ("date"))
                nil [6670 6823])
            ("days-between" function
               (:documentation "Return the number of days between DATE1 and DATE2.
DATE1 and DATE2 should be date-time strings."
                :arguments ("date1" "date2"))
                nil [6840 7020])
            ("date-leap-year-p" function
               (:documentation "Return t if YEAR is a leap year."
                :arguments ("year"))
                nil [7037 7195])
            ("time-date--day-in-year" function
               (:documentation "Return the day number within the year corresponding to the decoded time TIM."
                :arguments ("tim"))
                nil [7197 7608])
            ("time-to-day-in-year" function
               (:documentation "Return the day number within the year corresponding to TIME."
                :arguments ("time"))
                nil [7625 7770])
            ("time-to-days" function
               (:documentation "The number of days between the Gregorian date 0001-12-31bce and TIME.
TIME should be a time value.
The Gregorian date Sunday, December 31, 1bce is imaginary."
                :arguments ("time"))
                nil [7787 8257])
            ("time-to-number-of-days" function
               (:documentation "Return the number of days represented by TIME.
Returns a floating point number."
                :arguments ("time"))
                nil [8285 8443])
            ("safe-date-to-time" function
               (:documentation "Parse a string DATE that represents a date-time and return a time value.
If DATE is malformed, return a time value of zeros."
                :arguments ("date"))
                nil [8460 8688])
            ("format-seconds" function
               (:documentation "Use format control STRING to format the number SECONDS.
The valid format specifiers are:
%y is the number of (365-day) years.
%d is the number of days.
%h is the number of hours.
%m is the number of minutes.
%s is the number of seconds.
%z is a non-printing control flag (see below).
%% is a literal \"%\".

Upper-case specifiers are followed by the unit-name (e.g. \"years\").
Lower-case specifiers return only the unit.

\"%\" may be followed by a number specifying a width, with an
optional leading \".\" for zero-padding.  For example, \"%.3Y\" will
return something of the form \"001 year\".

The \"%z\" specifier does not print anything.  When it is used, specifiers
must be given in order of decreasing size.  To the left of \"%z\", nothing
is output until the first non-zero unit is encountered."
                :arguments ("string" "seconds"))
                nil [8707 11886])
            ("seconds-to-string" variable
               (:documentation "Formatting used by the function `seconds-to-string'."
                :default-value (list (list 1 "ms" 0.001) (list 100 "s" 1) (list (* 60 100) "m" 60.0) (list (* 3600 30) "h" 3600.0) (list (* 3600 24 400) "d" (* 3600.0 24.0)) (list nil "y" (* 365.25 24 3600))))
                nil [11888 12191])
            ("seconds-to-string" function
               (:documentation "Convert the time interval in seconds to a short string."
                :arguments ("delay"))
                nil [12207 12622])
            ("time-date" package nil nil [12624 12644]))          
      :file "time-date.el.gz"
      :pointmax 12673
      :fsize 4493
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!calendar!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
