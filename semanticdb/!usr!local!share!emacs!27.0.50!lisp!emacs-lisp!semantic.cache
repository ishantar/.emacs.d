;; Object semanticdb-project-database-file-23edf3c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-23edf3c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1bbbcb0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode-pretty-mode-name" function (:arguments ("mode" "lighter")) nil [2075 3574])
            ("easy-mmode--arg-docstring" variable
               (:constant-flag t
                :default-value "

If called interactively, enable %s if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is `toggle'; disable the mode otherwise.")
                nil [3576 3847])
            ("easy-mmode--mode-docstring" function (:arguments ("doc" "mode-pretty-name" "keymap-sym")) nil [3849 4341])
            ("defalias" code nil nil [4358 4417])
            ("define-minor-mode" function (:arguments ("mode" "doc" "init-value" "lighter" "keymap" "body")) nil [4433 15048])
            ("defalias" code nil nil [15102 15173])
            ("defalias" code nil nil [15189 15255])
            ("define-globalized-minor-mode" function (:arguments ("global-mode" "mode" "turn-on" "keys")) nil [15271 21157])
            ("easy-mmode-set-keymap-parents" function (:arguments ("m" "parents")) nil [21190 21330])
            ("easy-mmode-define-keymap" function (:arguments ("bs" "name" "m" "args")) nil [21347 23058])
            ("easy-mmode-defmap" function (:arguments ("m" "bs" "doc" "args")) nil [23075 23430])
            ("easy-mmode-define-syntax" function (:arguments ("css" "args")) nil [23468 23910])
            ("easy-mmode-defsyntax" function (:arguments ("st" "css" "doc" "args")) nil [23927 24263])
            ("easy-mmode-define-navigation" function (:arguments ("base" "re" "name" "endfun" "narrowfun" "body")) nil [24310 27256])
            ("easy-mmode" package nil nil [27259 27280]))          
      :file "easy-mmode.el.gz"
      :pointmax 27310
      :fsize 8826
      :lastmodtime '(23372 65469 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1bbbcd0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1547 1564])
            ("macroexp" include nil nil [1565 1584])
            ("gv" include nil nil [1660 1673])
            ("cl--pop2" function (:arguments ("place")) nil [1675 1803])
            ("cl--optimize-safety" variable nil nil [1805 1833])
            ("cl--optimize-speed" variable nil nil [1834 1861])
            ("cl--compiler-macro-list*" function (:arguments ("_form" "arg" "others")) nil [2068 2279])
            ("define-obsolete-function-alias" code nil nil [2464 2561])
            ("cl--simple-funcs" variable
               (:constant-flag t
                :default-value '(car cdr nth aref elt if and or + - 1+ 1- min max car-safe cdr-safe progn prog1 prog2))
                nil [2707 2829])
            ("cl--safe-funcs" variable
               (:constant-flag t
                :default-value '(* / % length memq list vector vectorp < > <= >= = error))
                nil [2830 2919])
            ("cl--simple-expr-p" function (:arguments ("x" "size")) nil [2921 3424])
            ("cl--simple-exprs-p" function (:arguments ("xs")) nil [3426 3539])
            ("cl--safe-expr-p" function (:arguments ("x")) nil [3541 3917])
            ("cl--const-expr-p" function (:arguments ("x")) nil [3982 4240])
            ("cl--const-expr-val" function (:arguments ("x")) nil [4242 4607])
            ("cl--expr-contains" function (:arguments ("x" "y")) nil [4609 5254])
            ("cl--expr-contains-any" function (:arguments ("x" "y")) nil [5256 5357])
            ("cl--expr-depends-p" function (:arguments ("x" "y")) nil [5359 5551])
            ("cl--gensym-counter" variable nil nil [5567 5596])
            ("cl-gensym" function (:arguments ("prefix")) nil [5612 5969])
            ("cl--gentemp-counter" variable nil nil [5971 6001])
            ("cl-gentemp" function (:arguments ("prefix")) nil [6017 6385])
            ("def-edebug-spec" code nil nil [6412 6481])
            ("def-edebug-spec" code nil nil [6483 6561])
            ("def-edebug-spec" code nil nil [6563 6916])
            ("def-edebug-spec" code nil nil [6918 7003])
            ("def-edebug-spec" code nil nil [7005 7105])
            ("def-edebug-spec" code nil nil [7107 7166])
            ("def-edebug-spec" code nil nil [7168 7612])
            ("def-edebug-spec" code nil nil [7614 7649])
            ("cl--lambda-list-keywords" variable
               (:constant-flag t
                :default-value '(&optional &rest &key &allow-other-keys &aux &whole &body &environment))
                nil [7651 7761])
            ("cl--bind-block" variable nil nil [8409 8432])
            ("cl--bind-defs" variable nil nil [8489 8511])
            ("cl--bind-enquote" variable nil nil [8568 8593])
            ("cl--bind-lets" variable nil nil [8648 8670])
            ("cl--bind-forms" variable nil nil [8671 8694])
            ("cl--transform-lambda" function (:arguments ("form" "bind-block")) nil [8696 13463])
            ("cl-defun" function (:arguments ("name" "args" "body")) nil [13480 14730])
            ("cl-iter-defun" function (:arguments ("name" "args" "body")) nil [14747 15552])
            ("def-edebug-spec" code nil nil [15718 16233])
            ("def-edebug-spec" code nil nil [16235 16292])
            ("def-edebug-spec" code nil nil [16294 16817])
            ("cl-defmacro" function (:arguments ("name" "args" "body")) nil [16834 17901])
            ("def-edebug-spec" code nil nil [17903 18063])
            ("def-edebug-spec" code nil nil [18117 18371])
            ("cl-function" function (:arguments ("func")) nil [18388 18829])
            ("cl--make-usage-var" function (:arguments ("x")) nil [18831 19027])
            ("cl--make-usage-args" function (:arguments ("arglist")) nil [19029 20866])
            ("cl--do-&aux" function (:arguments ("args")) nil [20868 21357])
            ("cl--do-arglist" function (:arguments ("args" "expr" "num")) nil [21359 27458])
            ("cl--arglist-args" function (:arguments ("args")) nil [27460 27919])
            ("cl-destructuring-bind" function (:arguments ("args" "expr" "body")) nil [27936 28451])
            ("cl--not-toplevel" variable nil nil [28484 28513])
            ("cl-eval-when" function (:arguments ("when" "body")) nil [28530 29415])
            ("cl--compile-time-too" function (:arguments ("form")) nil [29417 29933])
            ("cl-load-time-value" function (:arguments ("form" "_read-only")) nil [29950 31125])
            ("cl-case" function (:arguments ("expr" "clauses")) nil [31180 32663])
            ("cl-ecase" function (:arguments ("expr" "clauses")) nil [32680 32928])
            ("cl-typecase" function (:arguments ("expr" "clauses")) nil [32945 34013])
            ("cl-etypecase" function (:arguments ("expr" "clauses")) nil [34030 34291])
            ("cl-block" function (:arguments ("name" "body")) nil [34332 35079])
            ("cl-return" function (:arguments ("result")) nil [35096 35294])
            ("cl-return-from" function (:arguments ("name" "result")) nil [35311 35816])
            ("cl--loop-args" variable nil nil [35845 35867])
            ("cl--loop-accum-var" variable nil nil [35868 35895])
            ("cl--loop-accum-vars" variable nil nil [35896 35924])
            ("cl--loop-bindings" variable nil nil [35925 35951])
            ("cl--loop-body" variable nil nil [35952 35974])
            ("cl--loop-finally" variable nil nil [35975 36000])
            ("cl--loop-finish-flag" variable nil nil [36001 36030])
            ("cl--loop-first-flag" variable nil nil [36078 36106])
            ("cl--loop-initially" variable nil nil [36107 36134])
            ("cl--loop-iterator-function" variable nil nil [36135 36170])
            ("cl--loop-name" variable nil nil [36171 36193])
            ("cl--loop-result" variable nil nil [36194 36218])
            ("cl--loop-result-explicit" variable nil nil [36219 36252])
            ("cl--loop-result-var" variable nil nil [36253 36281])
            ("cl--loop-steps" variable nil nil [36282 36305])
            ("cl--loop-symbol-macs" variable nil nil [36306 36335])
            ("cl--loop-guard-cond" variable nil nil [36336 36364])
            ("cl--loop-set-iterator-function" function (:arguments ("kind" "iterator")) nil [36366 36638])
            ("cl-loop" function (:arguments ("loop-args")) nil [36655 43633])
            ("cl--parse-loop-clause" function nil nil [48202 67595])
            ("cl--unused-var-p" function (:arguments ("sym")) nil [67597 67680])
            ("cl--loop-let" function (:arguments ("specs" "body" "par")) nil [67682 70040])
            ("cl--loop-handle-accum" function (:arguments ("def" "func")) nil [70042 70667])
            ("cl--loop-build-ands" function (:arguments ("clauses")) nil [70669 71864])
            ("cl-do" function (:arguments ("steps" "endtest" "body")) nil [71923 72269])
            ("cl-do*" function (:arguments ("steps" "endtest" "body")) nil [72286 72504])
            ("cl--expand-do-loop" function (:arguments ("steps" "endtest" "body" "star")) nil [72506 73213])
            ("cl-dolist" function (:arguments ("spec" "body")) nil [73230 73725])
            ("cl-dotimes" function (:arguments ("spec" "body")) nil [73742 74177])
            ("cl--tagbody-alist" variable nil nil [74179 74209])
            ("cl-tagbody" function (:arguments ("labels-or-stmts")) nil [74226 76382])
            ("cl--prog" function (:arguments ("binder" "bindings" "body")) nil [76384 76622])
            ("cl-prog" function (:arguments ("bindings" "body")) nil [76639 76837])
            ("cl-prog*" function (:arguments ("bindings" "body")) nil [76854 77055])
            ("cl-do-symbols" function (:arguments ("spec" "body")) nil [77072 77585])
            ("cl-do-all-symbols" function (:arguments ("spec" "body")) nil [77602 77869])
            ("cl-psetq" function (:arguments ("args")) nil [77905 78192])
            ("cl-progv" function (:arguments ("symbols" "values" "body")) nil [78243 79211])
            ("cl--labels-magic" variable
               (:constant-flag t
                :default-value (make-symbol "cl--labels-magic"))
                nil [79213 79273])
            ("cl--labels-convert-cache" variable nil nil [79275 79312])
            ("cl--labels-convert" function (:arguments ("f")) nil [79314 80212])
            ("cl-flet" function (:arguments ("bindings" "body")) nil [80229 82081])
            ("cl-flet*" function (:arguments ("bindings" "body")) nil [82098 82493])
            ("cl-labels" function (:arguments ("bindings" "body")) nil [82510 83754])
            ("cl-macrolet" function (:arguments ("bindings" "body")) nil [83860 84677])
            ("cl--sm-macroexpand" function (:arguments ("orig-fun" "exp" "env")) nil [84679 90972])
            ("cl-symbol-macrolet" function (:arguments ("bindings" "body")) nil [90989 92535])
            ("cl-multiple-value-bind" function (:arguments ("vars" "form" "body")) nil [92574 93305])
            ("cl-multiple-value-setq" function (:arguments ("vars" "form")) nil [93322 94277])
            ("cl-locally" function (:arguments ("body")) nil [94314 94418])
            ("cl-the" function (:arguments ("type" "form")) nil [94434 94940])
            ("cl--proclaim-history" variable (:default-value t) nil [94942 94973])
            ("cl--declare-stack" variable (:default-value t) nil [95000 95028])
            ("cl--do-proclaim" function (:arguments ("spec" "hist")) nil [95059 96567])
            ("cl--proclaims-deferred" variable nil nil [96631 96662])
            ("let" code nil nil [96663 96783])
            ("cl-declare" function (:arguments ("specs")) nil [96800 97193])
            ("cl-psetf" function (:arguments ("args")) nil [97299 98148])
            ("cl-remf" function (:arguments ("place" "tag")) nil [98165 98632])
            ("cl-shiftf" function (:arguments ("place" "args")) nil [98649 99136])
            ("cl-rotatef" function (:arguments ("args")) nil [99153 100065])
            ("cl--letf" function (:arguments ("bindings" "simplebinds" "binds" "body")) nil [100235 102566])
            ("cl-letf" function (:arguments ("bindings" "body")) nil [102583 103589])
            ("cl-letf*" function (:arguments ("bindings" "body")) nil [103606 103971])
            ("cl-callf" function (:arguments ("func" "place" "args")) nil [103988 104443])
            ("cl-callf2" function (:arguments ("func" "arg1" "place" "args")) nil [104460 105108])
            ("cl-defsubst" function (:arguments ("name" "args" "body")) nil [105125 106627])
            ("cl--defsubst-expand" function (:arguments ("argns" "body" "simple" "whole" "_unsafe" "argvs")) nil [106629 107755])
            ("cl--sublis" function (:arguments ("alist" "tree")) nil [107757 108029])
            ("cl--find-class" function (:arguments ("type")) nil [108048 108106])
            ("cl--struct-default-parent" variable nil nil [108218 108256])
            ("cl-defstruct" function (:arguments ("struct" "descs")) nil [108273 121745])
            ("cl--struct-all-parents" function (:arguments ("class")) nil [121783 122156])
            ("pcase-defmacro" code nil nil [122173 123009])
            ("cl--defstruct-predicate" function (:arguments ("type")) nil [123011 123269])
            ("cl--pcase-mutually-exclusive-p" function (:arguments ("orig" "pred1" "pred2")) nil [123271 124628])
            ("advice-add" code nil nil [124629 124723])
            ("cl-struct-sequence-type" function (:arguments ("struct-type")) nil [124726 125057])
            ("cl-struct-slot-info" function (:arguments ("struct-type")) nil [125059 126038])
            ("define-error" code nil nil [126040 126105])
            ("cl-struct-slot-offset" function (:arguments ("struct-type" "slot-name")) nil [126107 126644])
            ("byte-compile-function-environment" variable nil nil [126646 126688])
            ("byte-compile-macro-environment" variable nil nil [126689 126728])
            ("cl--macroexp-fboundp" function (:arguments ("sym")) nil [126730 127083])
            ("put" code nil nil [127085 127125])
            ("put" code nil nil [127126 127166])
            ("put" code nil nil [127167 127210])
            ("put" code nil nil [127211 127257])
            ("put" code nil nil [127258 127309])
            ("put" code nil nil [127310 127358])
            ("define-inline" code nil nil [127376 129884])
            ("cl-check-type" function (:arguments ("form" "type" "string")) nil [129902 130468])
            ("cl-assert" function (:arguments ("form" "show-args" "string" "args")) nil [130485 131569])
            ("cl-define-compiler-macro" function (:arguments ("func" "args" "body")) nil [131608 133132])
            ("cl-compiler-macroexpand" function (:arguments ("form")) nil [133149 133803])
            ("cl--active-block-names" variable nil nil [133846 133881])
            ("cl-define-compiler-macro" code nil nil [133883 134487])
            ("cl-define-compiler-macro" code nil nil [134489 134682])
            ("cl--compiler-macro-member" function (:arguments ("form" "a" "list" "keys")) nil [134759 135073])
            ("cl--compiler-macro-assoc" function (:arguments ("form" "a" "list" "keys")) nil [135075 135480])
            ("cl--compiler-macro-adjoin" function (:arguments ("form" "a" "list" "keys")) nil [135497 135714])
            ("cl--compiler-macro-get" function (:arguments ("_form" "sym" "prop" "def")) nil [135716 135858])
            ("dolist" code nil nil [135860 136410])
            ("cl-proclaim" code nil nil [136440 136563])
            ("mapc" code nil nil [136603 136862])
            ("mapc" code nil nil [136912 137074])
            ("cl-deftype" function (:arguments ("name" "arglist" "body")) nil [137118 137472])
            ("cl-deftype" code nil nil [137474 137536])
            ("define-inline" code nil nil [137643 138444])
            ("run-hooks" code nil nil [138446 138476])
            ("cl-macs" package nil nil [138579 138597]))          
      :file "cl-macs.el.gz"
      :pointmax 138624
      :fsize 34916
      :lastmodtime '(23398 8371 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c50dc0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1121 1571])
            ("function-put" code nil nil [1572 1614])
            ("function-put" code nil nil [1615 1663])
            ("macro-declaration-function" variable (:default-value nil) nil [1784 2116])
            ("defalias" code nil nil [2118 3260])
            ("defun-declarations-alist" variable (:default-value (list (list 'advertised-calling-convention #'(lambda (f _args arglist when) (list 'set-advertised-calling-convention (list 'quote f) (list 'quote arglist) (list 'quote when)))) (list 'obsolete #'(lambda (f _args new-name when) (list 'make-obsolete (list 'quote f) (list 'quote new-name) (list 'quote when)))) (list 'interactive-only #'(lambda (f _args instead) (list 'function-put (list 'quote f) ''interactive-only (list 'quote instead)))) (list 'pure #'(lambda (f _args val) (list 'function-put (list 'quote f) ''pure (list 'quote val))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list 'side-effect-free #'(lambda (f _args val) (list 'function-put (list 'quote f) ''side-effect-free (list 'quote val))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list 'compiler-macro #'(lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) 'lambda)) `(eval-and-compile (function-put ',f 'compiler-macro #',compiler-function)) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro"))) (data (cdr compiler-function))) `(progn (eval-and-compile (function-put ',f 'compiler-macro #',cfname)) :autoload-end (eval-and-compile (defun ,cfname (,@(car data) ,@args) ,@(cdr data)))))))) (list 'doc-string #'(lambda (f _args pos) (list 'function-put (list 'quote f) ''doc-string-elt (list 'quote pos)))) (list 'indent #'(lambda (f _args val) (list 'function-put (list 'quote f) ''lisp-indent-function (list 'quote val)))))) nil [3516 6606])
            ("macro-declarations-alist" variable (:default-value (cons (list 'debug #'(lambda (name _args spec) (list 'progn :autoload-end (list 'put (list 'quote name) ''edebug-form-spec (list 'quote spec))))) (cons (list 'no-font-lock-keyword #'(lambda (name _args val) (list 'function-put (list 'quote name) ''no-font-lock-keyword (list 'quote val)))) defun-declarations-alist))) nil [6608 7383])
            ("defalias" code nil nil [7385 9638])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9687 12270])
            ("defalias" code nil nil [12352 12538])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13549 14021])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test 'eq :weakness 'key)) nil [14023 14101])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [14103 14473])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [14475 15368])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [15370 16337])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [16339 17170])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [17173 19014])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [19344 19780])
            ("dont-compile" function (:arguments ("body")) nil [19782 20091])
            ("eval-when-compile" function (:arguments ("body")) nil [20334 20827])
            ("eval-and-compile" function (:arguments ("body")) nil [20829 21415])
            ("with-no-warnings" function (:arguments ("body")) nil [21417 21625])
            ("make-obsolete-variable" code nil nil [22920 23029])
            ("make-obsolete" code nil nil [23030 23121]))          
      :file "byte-run.el.gz"
      :pointmax 23149
      :fsize 6800
      :lastmodtime '(23372 65469 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
