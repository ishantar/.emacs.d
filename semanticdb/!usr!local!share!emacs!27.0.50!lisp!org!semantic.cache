;; Object semanticdb-project-database-file-18fc9b0
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-18fc9b0"
  :tables
  (list
    (semanticdb-table "semanticdb-table-20d0958"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-inhibit-highlight-removal" variable nil nil [2832 2874])
            ("defvar-local" code nil nil [2902 3006])
            ("cl-lib" include nil nil [3037 3054])
            ("gnus-sum" include nil nil [3075 3094])
            ("calendar" include nil nil [3097 3116])
            ("find-func" include nil nil [3117 3137])
            ("format-spec" include nil nil [3138 3160])
            ("or" code nil nil [3162 3557])
            ("org-macs" include nil nil [3559 3578])
            ("org-compat" include nil nil [3579 3600])
            ("org-outline-regexp" variable
               (:documentation "Regexp to match Org headlines."
                :default-value "\\*+ ")
                nil [3975 4045])
            ("org-outline-regexp-bol" variable
               (:documentation "Regexp to match Org headlines.
This is similar to `org-outline-regexp' but additionally makes
sure that we are at the beginning of the line."
                :default-value "^\\*+ ")
                nil [4047 4232])
            ("org-heading-regexp" variable
               (:documentation "Matches a headline, putting stars and text into groups.
Stars are put in group 1 and the trimmed body in group 2."
                :default-value "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [4234 4420])
            ("declare-function" code nil nil [4422 4482])
            ("declare-function" code nil nil [4483 4554])
            ("declare-function" code nil nil [4555 4628])
            ("declare-function" code nil nil [4629 4691])
            ("declare-function" code nil nil [4692 4767])
            ("declare-function" code nil nil [4768 4856])
            ("declare-function" code nil nil [4857 4920])
            ("declare-function" code nil nil [4921 4992])
            ("declare-function" code nil nil [4993 5079])
            ("declare-function" code nil nil [5080 5147])
            ("declare-function" code nil nil [5148 5215])
            ("declare-function" code nil nil [5216 5309])
            ("declare-function" code nil nil [5310 5395])
            ("declare-function" code nil nil [5396 5489])
            ("declare-function" code nil nil [5490 5566])
            ("declare-function" code nil nil [5567 5637])
            ("declare-function" code nil nil [5638 5706])
            ("declare-function" code nil nil [5707 5768])
            ("declare-function" code nil nil [5769 5822])
            ("declare-function" code nil nil [5823 5882])
            ("declare-function" code nil nil [5883 5977])
            ("declare-function" code nil nil [5978 6034])
            ("declare-function" code nil nil [6035 6099])
            ("declare-function" code nil nil [6100 6172])
            ("declare-function" code nil nil [6173 6236])
            ("declare-function" code nil nil [6237 6309])
            ("declare-function" code nil nil [6310 6367])
            ("declare-function" code nil nil [6368 6434])
            ("declare-function" code nil nil [6435 6520])
            ("declare-function" code nil nil [6521 6580])
            ("declare-function" code nil nil [6581 6650])
            ("declare-function" code nil nil [6651 6745])
            ("declare-function" code nil nil [6746 6818])
            ("declare-function" code nil nil [6819 6901])
            ("declare-function" code nil nil [6902 6971])
            ("declare-function" code nil nil [6972 7031])
            ("declare-function" code nil nil [7032 7093])
            ("declare-function" code nil nil [7094 7146])
            ("declare-function" code nil nil [7147 7210])
            ("declare-function" code nil nil [7211 7274])
            ("declare-function" code nil nil [7275 7343])
            ("declare-function" code nil nil [7344 7415])
            ("declare-function" code nil nil [7416 7481])
            ("declare-function" code nil nil [7482 7531])
            ("declare-function" code nil nil [7532 7601])
            ("declare-function" code nil nil [7602 7675])
            ("declare-function" code nil nil [7676 7731])
            ("declare-function" code nil nil [7732 7807])
            ("declare-function" code nil nil [7808 7884])
            ("declare-function" code nil nil [7885 7946])
            ("declare-function" code nil nil [7947 8004])
            ("declare-function" code nil nil [8005 8072])
            ("declare-function" code nil nil [8073 8140])
            ("declare-function" code nil nil [8141 8208])
            ("declare-function" code nil nil [8209 8285])
            ("declare-function" code nil nil [8286 8348])
            ("declare-function" code nil nil [8349 8415])
            ("declare-function" code nil nil [8416 8468])
            ("declare-function" code nil nil [8469 8528])
            ("declare-function" code nil nil [8529 8605])
            ("declare-function" code nil nil [8606 8732])
            ("declare-function" code nil nil [8733 8791])
            ("declare-function" code nil nil [8792 8865])
            ("declare-function" code nil nil [8866 8930])
            ("declare-function" code nil nil [8931 8989])
            ("declare-function" code nil nil [8990 9043])
            ("declare-function" code nil nil [9044 9133])
            ("declare-function" code nil nil [9134 9222])
            ("ffap-url-regexp" variable nil nil [9224 9248])
            ("org-element-paragraph-separate" variable nil nil [9249 9288])
            ("org-uniquify" function
               (:documentation "Non-destructively remove duplicate elements from LIST."
                :arguments ("list"))
                nil [9290 9434])
            ("org-get-at-bol" function
               (:documentation "Get text property PROPERTY at the beginning of line."
                :arguments ("property"))
                nil [9436 9575])
            ("org-trim" function
               (:documentation "Remove whitespace at the beginning and the end of string S.
When optional argument KEEP-LEAD is non-nil, removing blank lines
at the beginning of the string does not affect leading indentation."
                :arguments ("s" "keep-lead"))
                nil [9577 9956])
            ("org-babel-load-languages" variable nil nil [10021 10054])
            ("org-babel-do-load-languages" function
               (:documentation "Load the languages defined in `org-babel-load-languages'."
                :arguments ("sym" "value"))
                nil [10071 10519])
            ("declare-function" code nil nil [10521 10607])
            ("org-babel-load-file" function
               (:documentation "Load Emacs Lisp source code blocks in the Org FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With prefix
arg (noninteractively: 2nd arg) COMPILE the tangled Emacs Lisp
file to byte-code before it is loaded."
                :user-visible-flag t
                :arguments ("file" "compile"))
                nil [10623 11829])
            ("org-babel-load-languages" variable
               (:documentation "Languages which can be evaluated in Org buffers.
This list can be used to load support for any of the languages
below, note that each language will depend on a different set of
system executables and/or Emacs modes.  When a language is
\"loaded\", then code blocks in that language can be evaluated
with `org-babel-execute-src-block' bound by default to C-c
C-c (note the `org-babel-no-eval-on-ctrl-c-ctrl-c' variable can
be set to remove code block evaluation from the C-c C-c
keybinding.  By default only Emacs Lisp (which has no
requirements) is loaded."
                :default-value '((emacs-lisp . t)))
                nil [11831 14040])
            ("org-clone-delete-id" variable (:documentation "Remove ID property of clones of a subtree.
When non-nil, clones of a subtree don't inherit the ID property.
Otherwise they inherit the ID property with a new unique
identifier.") nil [14071 14339])
            ("org-check-version" code nil nil [14353 14372])
            ("org-version" function
               (:documentation "Show the Org version.
Interactively, or when MESSAGE is non-nil, show it in echo area.
With prefix argument, or when HERE is non-nil, insert it at point.
In non-interactive uses, a reduced version string is output unless
FULL is given."
                :user-visible-flag t
                :arguments ("here" "full" "message"))
                nil [14389 15689])
            ("org-version" variable
               (:constant-flag t
                :default-value (org-version))
                nil [15691 15727])
            ("org-block-regexp" variable
               (:documentation "Regular expression for hiding blocks."
                :constant-flag t
                :default-value "^[ 	]*#\\+begin_?\\([^ 
]+\\)\\(\\([^
]+\\)\\)?
\\([^ ]+?\\)#\\+end_?\\1[ 	]*$")
                nil [15765 15925])
            ("org-dblock-start-re" variable
               (:documentation "Matches the start line of a dynamic block, with parameters."
                :constant-flag t
                :default-value "^[ 	]*#\\+\\(?:BEGIN\\|begin\\):[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?")
                nil [15927 16097])
            ("org-dblock-end-re" variable
               (:documentation "Matches the end of a dynamic block."
                :constant-flag t
                :default-value "^[ 	]*#\\+\\(?:END\\|end\\)\\([: 	
]\\|$\\)")
                nil [16099 16218])
            ("org-clock-string" variable
               (:documentation "String used as prefix for timestamps clocking work hours on an item."
                :constant-flag t
                :default-value "CLOCK:")
                nil [16245 16354])
            ("org-closed-string" variable
               (:documentation "String used as the prefix for timestamps logging closing a TODO entry."
                :default-value "CLOSED:")
                nil [16356 16467])
            ("org-deadline-string" variable
               (:documentation "String to mark deadline entries.
\\<org-mode-map>
A deadline is this string, followed by a time stamp.  It must be
a word, terminated by a colon.  You can insert a schedule keyword
and a timestamp with `\\[org-deadline]'."
                :default-value "DEADLINE:")
                nil [16469 16735])
            ("org-scheduled-string" variable
               (:documentation "String to mark scheduled TODO entries.
\\<org-mode-map>
A schedule is this string, followed by a time stamp.  It must be
a word, terminated by a colon.  You can insert a schedule keyword
and a timestamp with `\\[org-schedule]'."
                :default-value "SCHEDULED:")
                nil [16737 17011])
            ("org-ds-keyword-length" variable
               (:documentation "Maximum length of the DEADLINE and SCHEDULED keywords."
                :constant-flag t
                :default-value (+ 2 (apply #'max (mapcar #'length (list org-deadline-string org-scheduled-string org-clock-string org-closed-string)))))
                nil [17013 17248])
            ("org-planning-line-re" variable
               (:documentation "Matches a line with planning info.
Matched keyword is in group 1."
                :constant-flag t
                :default-value (concat "^[ 	]*" (regexp-opt (list org-closed-string org-deadline-string org-scheduled-string) t)))
                nil [17250 17464])
            ("org-clock-line-re" variable
               (:documentation "Matches a line with clock info."
                :constant-flag t
                :default-value (concat "^[ 	]*" org-clock-string))
                nil [17466 17568])
            ("org-deadline-regexp" variable
               (:documentation "Matches the DEADLINE keyword."
                :constant-flag t
                :default-value (concat "\\<" org-deadline-string))
                nil [17570 17669])
            ("org-deadline-time-regexp" variable
               (:documentation "Matches the DEADLINE keyword together with a time stamp."
                :constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+\\)>"))
                nil [17671 17822])
            ("org-deadline-time-hour-regexp" variable
               (:documentation "Matches the DEADLINE keyword together with a time-and-hour stamp."
                :constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [17824 18037])
            ("org-deadline-line-regexp" variable
               (:documentation "Matches the DEADLINE keyword and the rest of the line."
                :constant-flag t
                :default-value (concat "\\<\\(" org-deadline-string "\\).*"))
                nil [18039 18181])
            ("org-scheduled-regexp" variable
               (:documentation "Matches the SCHEDULED keyword."
                :constant-flag t
                :default-value (concat "\\<" org-scheduled-string))
                nil [18183 18285])
            ("org-scheduled-time-regexp" variable
               (:documentation "Matches the SCHEDULED keyword together with a time stamp."
                :constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+\\)>"))
                nil [18287 18441])
            ("org-scheduled-time-hour-regexp" variable
               (:documentation "Matches the SCHEDULED keyword together with a time-and-hour stamp."
                :constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [18443 18659])
            ("org-closed-time-regexp" variable
               (:documentation "Matches the CLOSED keyword together with a time stamp."
                :constant-flag t
                :default-value (concat "\\<" org-closed-string " *\\[\\([^]]+\\)\\]"))
                nil [18661 18810])
            ("org-keyword-time-regexp" variable
               (:documentation "Matches any of the 4 keywords, together with the time stamp."
                :constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18812 19068])
            ("org-keyword-time-not-clock-regexp" variable
               (:documentation "Matches any of the 3 keywords, together with the time stamp."
                :constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [19070 19315])
            ("org-maybe-keyword-time-regexp" variable
               (:documentation "Matches a timestamp, possibly preceded by a keyword."
                :constant-flag t
                :default-value (concat "\\(\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) "\\)?" " *\\([[<][0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?[]>]" "\\|" "<%%([^
>]*>\\)"))
                nil [19317 19658])
            ("org-all-time-keywords" variable
               (:documentation "List of time keywords."
                :constant-flag t
                :default-value (mapcar (lambda (w) (substring w 0 -1)) (list org-scheduled-string org-deadline-string org-clock-string org-closed-string)))
                nil [19660 19850])
            ("org-drawer-regexp" variable
               (:documentation "Matches first or last line of a hidden block.
Group 1 contains drawer's name or \"END\"."
                :constant-flag t
                :default-value "^[ 	]*:\\(\\(?:\\w\\|[-_]\\)+\\):[ 	]*$")
                nil [19865 20030])
            ("org-property-start-re" variable
               (:documentation "Regular expression matching the first line of a property drawer."
                :constant-flag t
                :default-value "^[ 	]*:PROPERTIES:[ 	]*$")
                nil [20032 20162])
            ("org-property-end-re" variable
               (:documentation "Regular expression matching the last line of a property drawer."
                :constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [20164 20284])
            ("org-clock-drawer-start-re" variable
               (:documentation "Regular expression matching the first line of a clock drawer."
                :constant-flag t
                :default-value "^[ 	]*:CLOCK:[ 	]*$")
                nil [20286 20412])
            ("org-clock-drawer-end-re" variable
               (:documentation "Regular expression matching the last line of a clock drawer."
                :constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [20414 20535])
            ("org-property-drawer-re" variable
               (:documentation "Matches an entire property drawer."
                :constant-flag t
                :default-value (concat "^[ 	]*:PROPERTIES:[ 	]*
" "\\(?:[ 	]*:\\S-+:\\(?: .*\\)?[ 	]*
\\)*?" "[ 	]*:END:[ 	]*$"))
                nil [20537 20723])
            ("org-clock-drawer-re" variable
               (:documentation "Matches an entire clock drawer."
                :constant-flag t
                :default-value (concat "\\(" org-clock-drawer-start-re "\\)[^ ]*?\\(" org-clock-drawer-end-re "\\)
?"))
                nil [20725 20888])
            ("org-heading-keyword-regexp-format" variable
               (:documentation "Printf format for a regexp matching a headline with some keyword.
This regexp will match the headline of any node which has the
exact keyword that is put into the format.  The keyword isn't in
any group by default, but the stars and the body are."
                :constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20905 21255])
            ("org-heading-keyword-maybe-regexp-format" variable
               (:documentation "Printf format for a regexp matching a headline, possibly with some keyword.
This regexp can match any headline with the specified keyword, or
without a keyword.  The keyword isn't in any group by default,
but the stars and the body are."
                :constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)?\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [21257 21604])
            ("org-archive-tag" variable
               (:documentation "The tag that marks a subtree as archived.
An archived subtree does not open during visibility cycling, and does
not contribute to the agenda listings."
                :constant-flag t
                :default-value "ARCHIVE")
                nil [21606 21797])
            ("org-comment-string" variable
               (:documentation "Entries starting with this keyword will never be exported.
\\<org-mode-map>
An entry can be toggled between COMMENT and normal with
`\\[org-toggle-comment]'."
                :constant-flag t
                :default-value "COMMENT")
                nil [21819 22022])
            ("org-latex-regexps" variable
               (:documentation "Regular expressions for matching embedded LaTeX."
                :constant-flag t
                :default-value '(("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$1" "\\([^$]\\|^\\)\\(\\$[^ 	
,;.$]\\$\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("$" "\\([^$]\\|^\\)\\(\\(\\$\\([^ 	
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^ 	
,.$]\\)\\$\\)\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 nil) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 nil)))
                nil [22065 22858])
            ("org-effort-property" variable
               (:documentation "The property that is being used to keep track of effort estimates.
Effort estimates given in this property need to have the format H:MM."
                :constant-flag t
                :default-value "Effort")
                nil [22880 23060])
            ("org-table-any-line-regexp" variable
               (:documentation "Detect an org-type or table-type table."
                :constant-flag t
                :default-value "^[ 	]*\\(|\\|\\+-[-+]\\)")
                nil [23074 23182])
            ("org-table-line-regexp" variable
               (:documentation "Detect an org-type table line."
                :constant-flag t
                :default-value "^[ 	]*|")
                nil [23184 23262])
            ("org-table-dataline-regexp" variable
               (:documentation "Detect an org-type table line."
                :constant-flag t
                :default-value "^[ 	]*|[^-]")
                nil [23264 23350])
            ("org-table-hline-regexp" variable
               (:documentation "Detect an org-type table hline."
                :constant-flag t
                :default-value "^[ 	]*|-")
                nil [23352 23433])
            ("org-table1-hline-regexp" variable
               (:documentation "Detect a table-type table hline."
                :constant-flag t
                :default-value "^[ 	]*\\+-[-+]")
                nil [23435 23524])
            ("org-table-any-border-regexp" variable
               (:documentation "Detect the first line outside a table when searching from within it.
This works for both table types."
                :constant-flag t
                :default-value "^[ 	]*[^|+ 	]")
                nil [23526 23688])
            ("org-TBLFM-regexp" variable
               (:documentation "Detect a #+TBLFM line."
                :constant-flag t
                :default-value "^[ 	]*#\\+TBLFM: ")
                nil [23690 23765])
            ("org-ts-regexp" variable
               (:documentation "Regular expression for fast time stamp matching."
                :constant-flag t
                :default-value "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)>")
                nil [23783 23921])
            ("org-ts-regexp-inactive" variable
               (:documentation "Regular expression for fast inactive time stamp matching."
                :constant-flag t
                :default-value "\\[\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)\\]")
                nil [23923 24085])
            ("org-ts-regexp-both" variable
               (:documentation "Regular expression for fast time stamp matching."
                :constant-flag t
                :default-value "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?\\)[]>]")
                nil [24087 24237])
            ("org-ts-regexp0" variable
               (:documentation "Regular expression matching time strings for analysis.
This one does not require the space after the date, so it can be used
on a string that terminates immediately after the date."
                :constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\( +[^]+0-9>
 -]+\\)?\\( +\\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [24239 24589])
            ("org-ts-regexp1" variable
               (:documentation "Regular expression matching time strings for analysis."
                :constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>
 -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [24591 24811])
            ("org-ts-regexp2" variable
               (:documentation "Regular expression matching time stamps, with groups."
                :constant-flag t
                :default-value (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>"))
                nil [24813 24944])
            ("org-ts-regexp3" variable
               (:documentation "Regular expression matching time stamps (also [..]), with groups."
                :constant-flag t
                :default-value (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]"))
                nil [24946 25096])
            ("org-tr-regexp" variable
               (:documentation "Regular expression matching a time stamp range."
                :constant-flag t
                :default-value (concat org-ts-regexp "--?-?" org-ts-regexp))
                nil [25098 25219])
            ("org-tr-regexp-both" variable
               (:documentation "Regular expression matching a time stamp range."
                :constant-flag t
                :default-value (concat org-ts-regexp-both "--?-?" org-ts-regexp-both))
                nil [25221 25359])
            ("org-tsr-regexp" variable
               (:documentation "Regular expression matching a time stamp or time stamp range."
                :constant-flag t
                :default-value (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?"))
                nil [25361 25512])
            ("org-tsr-regexp-both" variable
               (:documentation "Regular expression matching a time stamp or time stamp range.
The time stamps may be either active or inactive."
                :constant-flag t
                :default-value (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?"))
                nil [25514 25730])
            ("org-repeat-re" variable
               (:documentation "Regular expression for specifying repeated events.
After a match, group 1 contains the repeat expression."
                :constant-flag t
                :default-value "<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*?\\([.+]?\\+[0-9]+[hdwmy]\\(/[0-9]+[hdwmy]\\)?\\)")
                nil [25732 25963])
            ("org-time-stamp-formats" variable
               (:documentation "Formats for `format-time-string' which are used for time stamps."
                :constant-flag t
                :default-value '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>"))
                nil [25965 26110])
            ("org" customgroup
               (:documentation "Outline-based notes management and organizer."
                :user-visible-flag t)
                nil [26140 26259])
            ("org-mode-hook" variable (:documentation "Mode hook for Org mode, run after the mode was turned on.") nil [26261 26380])
            ("org-load-hook" variable (:documentation "Hook that is run after org.el has been loaded.") nil [26382 26490])
            ("org-log-buffer-setup-hook" variable (:documentation "Hook that is run after an Org log buffer is created.") nil [26492 26636])
            ("org-modules" variable nil nil [26638 26658])
            ("org-modules-loaded" variable (:documentation "Have the modules been loaded already?") nil [26676 26749])
            ("org-load-modules-maybe" function
               (:documentation "Load all extensions listed in `org-modules'."
                :arguments ("force"))
                nil [26751 27065])
            ("org-set-modules" function
               (:documentation "Set VAR to VALUE and call `org-load-modules-maybe' with the force flag."
                :arguments ("var" "value"))
                nil [27067 27292])
            ("org-modules" variable
               (:documentation "Modules that should always be loaded together with org.el.

If a description starts with <C>, the file is not part of Emacs
and loading it will require that you have downloaded and properly
installed the Org mode distribution.

You can also use this system to load external packages (i.e. neither Org
core modules, nor modules from the CONTRIB directory).  Just add symbols
to the end of the list.  If the package is called org-xyz.el, then you need
to add the symbol `xyz', and the package must have a call to:

   (provide \\='org-xyz)

For export specific modules, see also `org-export-backends'."
                :default-value '(org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail))
                nil [27294 32693])
            ("org-export-registered-backends" variable nil nil [32695 32734])
            ("declare-function" code nil nil [32749 32826])
            ("declare-function" code nil nil [32827 32886])
            ("org-export-backends" variable
               (:documentation "List of export back-ends that should be always available.

If a description starts with <C>, the file is not part of Emacs
and loading it will require that you have downloaded and properly
installed the Org mode distribution.

Unlike to `org-modules', libraries in this list will not be
loaded along with Org, but only once the export framework is
needed.

This variable needs to be set before org.el is loaded.  If you
need to make a change while Emacs is running, use the customize
interface or run the following code, where VAL stands for the new
value of the variable, after updating it:

  (progn
    (setq org-export-registered-backends
          (cl-remove-if-not
           (lambda (backend)
             (let ((name (org-export-backend-name backend)))
               (or (memq name val)
                   (catch \\='parentp
                     (dolist (b val)
                       (and (org-export-derived-backend-p b name)
                            (throw \\='parentp t)))))))
           org-export-registered-backends))
    (let ((new-list (mapcar #\\='org-export-backend-name
                            org-export-registered-backends)))
      (dolist (backend val)
        (cond
         ((not (load (format \"ox-%s\" backend) t t))
          (message \"Problems while trying to load export back-end \\=`%s\\='\"
                   backend))
         ((not (memq backend new-list)) (push backend new-list))))
      (set-default \\='org-export-backends new-list)))

Adding a back-end to this list will also pull the back-end it
depends on, if any."
                :default-value '(ascii html icalendar latex odt))
                nil [32887 37127])
            ("eval-after-load" code nil nil [37129 37357])
            ("org-support-shift-select" variable (:documentation "Non-nil means make shift-cursor commands select text when possible.
\\<org-mode-map>
In Emacs 23, when `shift-select-mode' is on, shifted cursor keys
start selecting a region, or enlarge regions started in this way.
In Org mode, in special contexts, these same keys are used for
other purposes, important enough to compete with shift selection.
Org tries to balance these needs by supporting `shift-select-mode'
outside these special contexts, under control of this variable.

The default of this variable is nil, to avoid confusing behavior.  Shifted
cursor keys will then execute Org commands in the following contexts:
- on a headline, changing TODO state (left/right) and priority (up/down)
- on a time stamp, changing the time
- in a plain list item, changing the bullet type
- in a property definition line, switching between allowed values
- in the BEGIN line of a clock table (changing the time block).
Outside these contexts, the commands will throw an error.

When this variable is t and the cursor is not in a special
context, Org mode will support shift-selection for making and
enlarging regions.  To make this more effective, the bullet
cycling will no longer happen anywhere in an item line, but only
if the cursor is exactly on the bullet.

If you set this variable to the symbol `always', then the keys
will not be special in headlines, property lines, and item lines,
to make shift selection work there as well.  If this is what you
want, you can use the following alternative commands:
`\\[org-todo]' and `\\[org-priority]' to change TODO state and priority,
`\\[universal-argument] \\[universal-argument] \\[org-todo]' can be used to switch TODO sets,
`\\[org-ctrl-c-minus]' to cycle item bullet types,
and properties can be edited by hand or in column view.

However, when the cursor is on a timestamp, shift-cursor commands
will still edit the time stamp - this is just too good to give up.") nil [37359 39485])
            ("org-loop-over-headlines-in-active-region" variable (:documentation "Shall some commands act upon headlines in the active region?

When set to t, some commands will be performed in all headlines
within the active region.

When set to `start-level', some commands will be performed in all
headlines within the active region, provided that these headlines
are of the same level than the first one.

When set to a string, those commands will be performed on the
matching headlines within the active region.  Such string must be
a tags/property/todo match as it is used in the agenda tags view.

The list of commands is: `org-schedule', `org-deadline',
`org-todo', `org-archive-subtree', `org-archive-set-tag' and
`org-archive-to-archive-sibling'.  The archiving commands skip
already archived entries.") nil [39487 40576])
            ("org-startup" customgroup
               (:documentation "Options concerning startup of Org mode."
                :user-visible-flag t)
                nil [40578 40683])
            ("org-startup-folded" variable
               (:documentation "Non-nil means entering Org mode will switch to OVERVIEW.

This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: fold              (or `overview', this is equivalent)
   #+STARTUP: nofold            (or `showall', this is equivalent)
   #+STARTUP: content
   #+STARTUP: showeverything

Set `org-agenda-inhibit-startup' to a non-nil value if you want
to ignore this option when Org opens agenda files for the first
time."
                :default-value t)
                nil [40685 41436])
            ("org-startup-truncated" variable
               (:documentation "Non-nil means entering Org mode will set `truncate-lines'.
This is useful since some lines containing links can be very long and
uninteresting.  Also tables look terrible when wrapped.

The variable `org-startup-truncated' allows to configure
truncation for Org mode different to the other modes that use the
variable `truncate-lines' and as a shortcut instead of putting
the variable `truncate-lines' into the `org-mode-hook'.  If one
wants to configure truncation for Org mode not statically but
dynamically e. g. in a hook like `ediff-prepare-buffer-hook' then
the variable `truncate-lines' has to be used because in such a
case it is too late to set the variable `org-startup-truncated'."
                :default-value t)
                nil [41438 42208])
            ("org-startup-indented" variable (:documentation "Non-nil means turn on `org-indent-mode' on startup.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: indent
   #+STARTUP: noindent") nil [42210 42586])
            ("org-use-sub-superscripts" variable
               (:documentation "Non-nil means interpret \"_\" and \"^\" for display.

If you want to control how Org exports those characters, see
`org-export-with-sub-superscripts'.  `org-use-sub-superscripts'
used to be an alias for `org-export-with-sub-superscripts' in
Org <8.0, it is not anymore.

When this option is turned on, you can use TeX-like syntax for
sub- and superscripts within the buffer.  Several characters after
\"_\" or \"^\" will be considered as a single item - so grouping
with {} is normally not needed.  For example, the following things
will be parsed as single sub- or superscripts:

 10^24   or   10^tau     several digits will be considered 1 item.
 10^-12  or   10^-tau    a leading sign with digits or a word
 x^2-y^3                 will be read as x^2 - y^3, because items are
			 terminated by almost any nonword/nondigit char.
 x_{i^2} or   x^(2-i)    braces or parenthesis do grouping.

Still, ambiguity is possible.  So when in doubt, use {} to enclose
the sub/superscript.  If you set this variable to the symbol `{}',
the braces are *required* in order to trigger interpretations as
sub/superscript.  This can be helpful in documents that need \"_\"
frequently in plain text."
                :default-value t)
                nil [42588 44020])
            ("org-startup-with-beamer-mode" variable (:documentation "Non-nil means turn on `org-beamer-mode' on startup.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: beamer") nil [44022 44310])
            ("org-startup-align-all-tables" variable (:documentation "Non-nil means align all tables when visiting a file.
This is useful when the column width in tables is forced with <N> cookies
in table fields.  Such tables will look correct only after the first re-align.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
   #+STARTUP: align
   #+STARTUP: noalign") nil [44312 44756])
            ("org-startup-with-inline-images" variable (:documentation "Non-nil means show inline images when loading a new Org file.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
   #+STARTUP: inlineimages
   #+STARTUP: noinlineimages") nil [44758 45092])
            ("org-startup-with-latex-preview" variable (:documentation "Non-nil means preview LaTeX fragments when loading a new Org file.

This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
   #+STARTUP: latexpreview
   #+STARTUP: nolatexpreview") nil [45094 45468])
            ("org-insert-mode-line-in-empty-file" variable (:documentation "Non-nil means insert the first line setting Org mode in empty files.
When the function `org-mode' is called interactively in an empty file, this
normally means that the file name does not automatically trigger Org mode.
To ensure that the file will always be in Org mode in the future, a
line enforcing Org mode will be inserted into the buffer, if this option
has been set.") nil [45470 45938])
            ("defvaralias" code nil nil [45940 46000])
            ("org-replace-disputed-keys" variable (:documentation "Non-nil means use alternative key bindings for some keys.
Org mode uses S-<cursor> keys for changing timestamps and priorities.
These keys are also used by other packages like shift-selection-mode'
(built into Emacs 23), `CUA-mode' or `windmove.el'.
If you want to use Org mode together with one of these other modes,
or more generally if you would like to move some Org mode commands to
other keys, set this variable and configure the keys with the variable
`org-disputed-keys'.

This option is only relevant at load-time of Org mode, and must be set
*before* org.el is loaded.  Changing it requires a restart of Emacs to
become effective.") nil [46002 46728])
            ("org-use-extra-keys" variable (:documentation "Non-nil means use extra key sequence definitions for certain commands.
This happens automatically if `window-system' is nil.  This
variable lets you do the same manually.  You must set it before
loading Org.") nil [46730 47015])
            ("org-disputed-keys" variable
               (:documentation "Keys for which Org mode and other modes compete.
This is an alist, cars are the default keys, second element specifies
the alternative to use when `org-replace-disputed-keys' is t.

Keys can be specified in any syntax supported by `define-key'.
The value of this option takes effect only at Org mode startup,
therefore you'll have to restart Emacs to apply it after changing."
                :default-value '(([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)])))
                nil [47017 47701])
            ("org-key" function
               (:documentation "Select key according to `org-replace-disputed-keys' and `org-disputed-keys'.
Or return the original if not disputed."
                :arguments ("key"))
                nil [47703 48060])
            ("org-defkey" function
               (:documentation "Define a key, possibly translated, as returned by `org-key'."
                :arguments ("keymap" "key" "def"))
                nil [48062 48202])
            ("org-ellipsis" variable (:documentation "The ellipsis to use in the Org mode outline.

When nil, just use the standard three dots.  When a non-empty string,
use that string instead.

The change affects only Org mode (which will then use its own display table).
Changing this requires executing `\\[org-mode]' in a buffer to become
effective.") nil [48204 48711])
            ("org-display-table" variable (:documentation "The display table for Org mode, in case `org-ellipsis' is non-nil.") nil [48713 48814])
            ("org-keywords" customgroup
               (:documentation "Keywords in Org mode."
                :user-visible-flag t)
                nil [48816 48905])
            ("org-closed-keep-when-no-todo" variable (:documentation "Remove CLOSED: time-stamp when switching back to a non-todo state?") nil [48907 49133])
            ("org-structure" customgroup
               (:documentation "Options concerning the general structure of Org files."
                :user-visible-flag t)
                nil [49135 49259])
            ("org-reveal-location" customgroup
               (:documentation "Options about how to make context of a location visible."
                :user-visible-flag t)
                nil [49261 49409])
            ("org-show-context-detail" variable
               (:documentation "Alist between context and visibility span when revealing a location.

\\<org-mode-map>Some actions may move point into invisible
locations.  As a consequence, Org always expose a neighborhood
around point.  How much is shown depends on the initial action,
or context.  Valid contexts are

  agenda         when exposing an entry from the agenda
  org-goto       when using the command `org-goto' (`\\[org-goto]')
  occur-tree     when using the command `org-occur' (`\\[org-sparse-tree] /')
  tags-tree      when constructing a sparse tree based on tags matches
  link-search    when exposing search matches associated with a link
  mark-goto      when exposing the jump goal of a mark
  bookmark-jump  when exposing a bookmark location
  isearch        when exiting from an incremental search
  default        default for all contexts not set explicitly

Allowed visibility spans are

  minimal        show current headline; if point is not on headline,
                 also show entry

  local          show current headline, entry and next headline

  ancestors      show current headline and its direct ancestors; if
                 point is not on headline, also show entry

  lineage        show current headline, its direct ancestors and all
                 their children; if point is not on headline, also show
                 entry and first child

  tree           show current headline, its direct ancestors and all
                 their children; if point is not on headline, also show
                 entry and all children

  canonical      show current headline, its direct ancestors along with
                 their entries and children; if point is not located on
                 the headline, also show current entry and all children

As special cases, a nil or t value means show all contexts in
`minimal' or `canonical' view, respectively.

Some views can make displayed information very compact, but also
make it harder to edit the location of the match.  In such
a case, use the command `org-reveal' (`\\[org-reveal]') to show
more context."
                :default-value '((agenda . local) (bookmark-jump . lineage) (isearch . lineage) (default . ancestors)))
                nil [49411 52266])
            ("org-indirect-buffer-display" variable
               (:documentation "How should indirect tree buffers be displayed?

This applies to indirect buffers created with the commands
`org-tree-to-indirect-buffer' and `org-agenda-tree-to-indirect-buffer'.

Valid values are:
current-window   Display in the current window
other-window     Just display in another window.
dedicated-frame  Create one new frame, and re-use it each time.
new-frame        Make a new frame each time.  Note that in this case
                 previously-made indirect buffers are kept, and you need to
                 kill these buffers yourself."
                :default-value 'other-window)
                nil [52268 53162])
            ("org-use-speed-commands" variable (:documentation "Non-nil means activate single letter commands at beginning of a headline.
This may also be a function to test for appropriate locations where speed
commands should be active.

For example, to activate speed commands when the point is on any
star at the beginning of the headline, you can do this:

  (setq org-use-speed-commands
      (lambda () (and (looking-at org-outline-regexp) (looking-back \"^\\**\"))))") nil [53164 53752])
            ("org-speed-commands-user" variable (:documentation "Alist of additional speed commands.
This list will be checked before `org-speed-commands-default'
when the variable `org-use-speed-commands' is non-nil
and when the cursor is at the beginning of a headline.
The car of each entry is a string with a single letter, which must
be assigned to `self-insert-command' in the global map.
The cdr is either a command to be called interactively, a function
to be called, or a form to be evaluated.
An entry that is just a list with a single string will be interpreted
as a descriptive headline that will be added when listing the speed
commands in the Help buffer using the `?' speed command.") nil [53754 54715])
            ("org-bookmark-names-plist" variable
               (:documentation "Names for bookmarks automatically set by some Org commands.
This can provide strings as names for a number of bookmarks Org sets
automatically.  The following keys are currently implemented:
  :last-capture
  :last-capture-marker
  :last-refile
When a key does not show up in the property list, the corresponding bookmark
is not set."
                :default-value '(:last-capture "org-capture-last-stored" :last-refile "org-refile-last-stored" :last-capture-marker "org-capture-last-stored-marker"))
                nil [54717 55275])
            ("org-cycle" customgroup
               (:documentation "Options concerning visibility cycling in Org mode."
                :user-visible-flag t)
                nil [55277 55399])
            ("org-cycle-skip-children-state-if-no-children" variable
               (:documentation "Non-nil means skip CHILDREN state in entries that don't have any."
                :default-value t)
                nil [55401 55566])
            ("org-cycle-max-level" variable (:documentation "Maximum level which should still be subject to visibility cycling.
Levels higher than this will, for cycling, be treated as text, not a headline.
When `org-odd-levels-only' is set, a value of N in this variable actually
means 2N-1 stars as the limiting headline.
When nil, cycle all levels.
Note that the limiting level of cycling is also influenced by
`org-inlinetask-min-level'.  When `org-cycle-max-level' is not set but
`org-inlinetask-min-level' is, cycling will be limited to levels one less
than its value.") nil [55568 56224])
            ("org-hide-block-startup" variable (:documentation "Non-nil means entering Org mode will fold all blocks.
This can also be set in on a per-file basis with

#+STARTUP: hideblocks
#+STARTUP: showblocks") nil [56226 56475])
            ("org-cycle-global-at-bob" variable (:documentation "Cycle globally if cursor is at beginning of buffer and not at a headline.

This makes it possible to do global cycling without having to use `S-TAB'
or `\\[universal-argument] TAB'.  For this special case to work, the first line of the buffer
must not be a headline -- it may be empty or some other text.

When used in this way, `org-cycle-hook' is disabled temporarily to make
sure the cursor stays at the beginning of the buffer.

When this option is nil, don't do anything special at the beginning of
the buffer.") nil [56477 57075])
            ("org-cycle-level-after-item/entry-creation" variable
               (:documentation "Non-nil means cycle entry level or item indentation in new empty entries.

When the cursor is at the end of an empty headline, i.e., with only stars
and maybe a TODO keyword, TAB will then switch the entry to become a child,
and then all possible ancestor states, before returning to the original state.
This makes data entry extremely fast:  M-RET to create a new headline,
on TAB to make it a child, two or more tabs to make it a (grand-)uncle.

When the cursor is at the end of an empty plain list item, one TAB will
make it a subitem, two or more tabs will back up to make this an item
higher up in the item hierarchy."
                :default-value t)
                nil [57077 57796])
            ("org-cycle-emulate-tab" variable
               (:documentation "Where should `org-cycle' emulate TAB.
nil         Never
white       Only in completely white lines
whitestart  Only at the beginning of lines, before the first non-white char
t           Everywhere except in headlines
exc-hl-bol  Everywhere except at the start of a headline
If TAB is used in a place where it does not emulate TAB, the current subtree
visibility is cycled."
                :default-value t)
                nil [57798 58504])
            ("org-cycle-separator-lines" variable
               (:documentation "Number of empty lines needed to keep an empty line between collapsed trees.
If you leave an empty line between the end of a subtree and the following
headline, this empty line is hidden when the subtree is folded.
Org mode will leave (exactly) one empty line visible if the number of
empty lines is equal or larger to the number given in this variable.
So the default 2 means at least 2 empty lines after the end of a subtree
are needed to produce free space between a collapsed subtree and the
following headline.

If the number is negative, and the number of empty lines is at least -N,
all empty lines are shown.

Special case: when 0, never leave empty lines in collapsed view."
                :default-value 2)
                nil [58506 59268])
            ("put" code nil nil [59269 59332])
            ("org-pre-cycle-hook" variable (:documentation "Hook that is run before visibility cycling is happening.
The function(s) in this hook must accept a single argument which indicates
the new state that will be set right after running this hook.  The
argument is a symbol.  Before a global state change, it can have the values
`overview', `content', or `all'.  Before a local state change, it can have
the values `folded', `children', or `subtree'.") nil [59334 59803])
            ("org-cycle-hook" variable
               (:documentation "Hook that is run after `org-cycle' has changed the buffer visibility.
The function(s) in this hook must accept a single argument which indicates
the new state that was set by the most recent `org-cycle' command.  The
argument is a symbol.  After a global state change, it can have the values
`overview', `contents', or `all'.  After a local state change, it can have
the values `folded', `children', or `subtree'."
                :default-value '(org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-show-empty-lines org-optimize-window-after-visibility-change))
                nil [59805 60486])
            ("org-edit-structure" customgroup
               (:documentation "Options concerning structure editing in Org mode."
                :user-visible-flag t)
                nil [60488 60627])
            ("org-odd-levels-only" variable (:documentation "Non-nil means skip even levels and only use odd levels for the outline.
This has the effect that two stars are being added/taken away in
promotion/demotion commands.  It also influences how levels are
handled by the exporters.
Changing it requires restart of `font-lock-mode' to become effective
for fontification also in regions already fontified.
You may also set this on a per-file basis by adding one of the following
lines to the buffer:

   #+STARTUP: odd
   #+STARTUP: oddeven") nil [60629 61223])
            ("org-adapt-indentation" variable
               (:documentation "Non-nil means adapt indentation to outline node level.

When this variable is set, Org assumes that you write outlines by
indenting text in each node to align with the headline (after the
stars).  The following issues are influenced by this variable:

- The indentation is increased by one space in a demotion
  command, and decreased by one in a promotion command.  However,
  in the latter case, if shifting some line in the entry body
  would alter document structure (e.g., insert a new headline),
  indentation is not changed at all.

- Property drawers and planning information is inserted indented
  when this variable is set.  When nil, they will not be indented.

- TAB indents a line relative to current level.  The lines below
  a headline will be indented when this variable is set.

Note that this is all about true indentation, by adding and
removing space characters.  See also `org-indent.el' which does
level-dependent indentation in a virtual way, i.e. at display
time in Emacs."
                :default-value t)
                nil [61225 62307])
            ("defvaralias" code nil nil [62309 62364])
            ("org-special-ctrl-a/e" variable (:documentation "Non-nil means `C-a' and `C-e' behave specially in headlines and items.

When t, `C-a' will bring back the cursor to the beginning of the
headline text, i.e. after the stars and after a possible TODO
keyword.  In an item, this will be the position after bullet and
check-box, if any.  When the cursor is already at that position,
another `C-a' will bring it to the beginning of the line.

`C-e' will jump to the end of the headline, ignoring the presence
of tags in the headline.  A second `C-e' will then jump to the
true end of the line, after any tags.  This also means that, when
this variable is non-nil, `C-e' also will never jump beyond the
end of the heading of a folded section, i.e. not after the
ellipses.

When set to the symbol `reversed', the first `C-a' or `C-e' works
normally, going to the true line boundary first.  Only a directly
following, identical keypress will bring the cursor to the
special positions.

This may also be a cons cell where the behavior for `C-a' and
`C-e' is set separately.") nil [62366 63986])
            ("org-special-ctrl-k" variable (:documentation "Non-nil means `C-k' will behave specially in headlines.
When nil, `C-k' will call the default `kill-line' command.
When t, the following will happen while the cursor is in the headline:

- When the cursor is at the beginning of a headline, kill the entire
  line and possible the folded subtree below the line.
- When in the middle of the headline text, kill the headline up to the tags.
- When after the headline text, kill the tags.") nil [63988 64507])
            ("org-ctrl-k-protect-subtree" variable (:documentation "Non-nil means, do not delete a hidden subtree with C-k.
When set to the symbol `error', simply throw an error when C-k is
used to kill (part-of) a headline that has hidden text behind it.
Any other non-nil value will result in a query to the user, if it is
OK to kill that hidden subtree.  When nil, kill without remorse.") nil [64509 65122])
            ("org-special-ctrl-o" variable
               (:documentation "Non-nil means, make `C-o' insert a row in tables."
                :default-value t)
                nil [65124 65256])
            ("org-catch-invisible-edits" variable (:documentation "Check if in invisible region before inserting or deleting a character.
Valid values are:

nil              Do not check, so just do invisible edits.
error            Throw an error and do nothing.
show             Make point visible, and do the requested edit.
show-and-error   Make point visible, then throw an error and abort the edit.
smart            Make point visible, and do insertion/deletion if it is
                 adjacent to visible text and the change feels predictable.
                 Never delete a previously invisible character or add in the
                 middle or right after an invisible region.  Basically, this
                 allows insertion and backward-delete right before ellipses.
                 FIXME: maybe in this case we should not even show?") nil [65258 66423])
            ("org-yank-folded-subtrees" variable
               (:documentation "Non-nil means when yanking subtrees, fold them.
If the kill is a single subtree, or a sequence of subtrees, i.e. if
it starts with a heading and all other headings in it are either children
or siblings, then fold all the subtrees.  However, do this only if no
text after the yank would be swallowed into a folded tree by this action."
                :default-value t)
                nil [66425 66847])
            ("org-yank-adjusted-subtrees" variable (:documentation "Non-nil means when yanking subtrees, adjust the level.
With this setting, `org-paste-subtree' is used to insert the subtree, see
this function for details.") nil [66849 67097])
            ("org-M-RET-may-split-line" variable
               (:documentation "Non-nil means M-RET will split the line at the cursor position.
When nil, it will go to the end of the line before making a
new line.
You may also set this option in a different way for different
contexts.  Valid contexts are:

headline  when creating a new headline
item      when creating a new item
table     in a table field
default   the value to be used for all contexts not explicitly
          customized"
                :default-value '((default . t)))
                nil [67099 67874])
            ("org-insert-heading-respect-content" variable (:documentation "Non-nil means insert new headings after the current subtree.
\\<org-mode-map>
When nil, the new heading is created directly after the current line.
The commands `\\[org-insert-heading-respect-content]' and `\\[org-insert-todo-heading-respect-content]' turn this variable on
for the duration of the command.") nil [67877 68281])
            ("org-blank-before-new-entry" variable
               (:documentation "Should `org-insert-heading' leave a blank line before new heading/item?
The value is an alist, with `heading' and `plain-list-item' as CAR,
and a boolean flag as CDR.  The cdr may also be the symbol `auto', in
which case Org will look at the surrounding headings/items and try to
make an intelligent decision whether to insert a blank line or not."
                :default-value '((heading . auto) (plain-list-item . auto)))
                nil [68283 69010])
            ("org-insert-heading-hook" variable (:documentation "Hook being run after inserting a new heading.") nil [69012 69144])
            ("org-enable-fixed-width-editor" variable
               (:documentation "Non-nil means lines starting with \":\" are treated as fixed-width.
This currently only means they are never auto-wrapped.
When nil, such lines will be treated like ordinary lines."
                :default-value t)
                nil [69146 69420])
            ("org-goto-auto-isearch" variable
               (:documentation "Non-nil means typing characters in `org-goto' starts incremental search.
When nil, you can use these keybindings to navigate the buffer:

  q    Quit the org-goto interface
  n    Go to the next visible heading
  p    Go to the previous visible heading
  f    Go one heading forward on same level
  b    Go one heading backward on same level
  u    Go one heading up"
                :default-value t)
                nil [69422 69874])
            ("org-sparse-trees" customgroup
               (:documentation "Options concerning sparse trees in Org mode."
                :user-visible-flag t)
                nil [69876 70006])
            ("org-highlight-sparse-tree-matches" variable
               (:documentation "Non-nil means highlight all matches that define a sparse tree.
The highlights will automatically disappear the next time the buffer is
changed by an edit command."
                :default-value t)
                nil [70008 70266])
            ("org-remove-highlights-with-change" variable
               (:documentation "Non-nil means any change to the buffer will remove temporary highlights.
\\<org-mode-map>Such highlights are created by `org-occur' and `org-clock-display'.
When nil, `\\[org-ctrl-c-ctrl-c]' needs to be used to get rid of the highlights.
The highlights created by `org-toggle-latex-fragment' always need
`\\[org-toggle-latex-fragment]' to be removed."
                :default-value t)
                nil [70268 70737])
            ("org-occur-case-fold-search" variable
               (:documentation "Non-nil means `org-occur' should be case-insensitive.
If set to `smart' the search will be case-insensitive only if it
doesn't specify any upper case character."
                :default-value t)
                nil [70739 71151])
            ("org-occur-hook" variable
               (:documentation "Hook that is run after `org-occur' has constructed a sparse tree.
This can be used to recenter the window to show as much of the structure
as possible."
                :default-value '(org-first-headline-recenter))
                nil [71153 71407])
            ("org-imenu-and-speedbar" customgroup
               (:documentation "Options concerning imenu and speedbar in Org mode."
                :user-visible-flag t)
                nil [71409 71557])
            ("org-imenu-depth" variable
               (:documentation "The maximum level for Imenu access to Org headlines.
This also applied for speedbar access."
                :default-value 2)
                nil [71559 71734])
            ("org-table" customgroup
               (:documentation "Options concerning tables in Org mode."
                :user-visible-flag t)
                nil [71736 71836])
            ("org-self-insert-cluster-for-undo" variable (:documentation "Non-nil means cluster self-insert commands for undo when possible.
If this is set, then, like in the Emacs command loop, 20 consecutive
characters will be undone together.
This is configurable, because there is some impact on typing performance.") nil [71838 72173])
            ("org-table-tab-recognizes-table.el" variable
               (:documentation "Non-nil means TAB will automatically notice a table.el table.
When it sees such a table, it moves point into it and - if necessary -
calls `table-recognize-table'."
                :default-value t)
                nil [72175 72435])
            ("org-link" customgroup
               (:documentation "Options concerning links in Org mode."
                :user-visible-flag t)
                nil [72437 72534])
            ("defvar-local" code nil nil [72536 72696])
            ("org-link-parameters" variable
               (:documentation "An alist of properties that defines all the links in Org mode.
The key in each association is a string of the link type.
Subsequent optional elements make up a p-list of link properties.

:follow - A function that takes the link path as an argument.

:export - A function that takes the link path, description and
export-backend as arguments.

:store - A function responsible for storing the link.  See the
function `org-store-link-functions'.

:complete - A function that inserts a link with completion.  The
function takes one optional prefix arg.

:face - A face for the link, or a function that returns a face.
The function takes one argument which is the link path.  The
default face is `org-link'.

:mouse-face - The mouse-face. The default is `highlight'.

:display - `full' will not fold the link in descriptive
display.  Default is `org-link'.

:help-echo - A string or function that takes (window object position)
as arguments and returns a string.

:keymap - A keymap that is active on the link.  The default is
`org-mouse-map'.

:htmlize-link - A function for the htmlize-link.  Defaults
to (list :uri \"type:path\")

:activate-func - A function to run at the end of font-lock
activation.  The function must accept (link-start link-end path bracketp)
as arguments."
                :default-value '(("doi" :follow org--open-doi-link) ("elisp" :follow org--open-elisp-link) ("file" :complete org-file-complete-link) ("ftp" :follow (lambda (path) (browse-url (concat "ftp:" path)))) ("help" :follow org--open-help-link) ("http" :follow (lambda (path) (browse-url (concat "http:" path)))) ("https" :follow (lambda (path) (browse-url (concat "https:" path)))) ("mailto" :follow (lambda (path) (browse-url (concat "mailto:" path)))) ("news" :follow (lambda (path) (browse-url (concat "news:" path)))) ("shell" :follow org--open-shell-link)))
                nil [72698 74726])
            ("org-link-get-parameter" function
               (:documentation "Get TYPE link property for KEY.
TYPE is a string and KEY is a plist keyword."
                :arguments ("type" "key"))
                nil [74728 74913])
            ("org-link-set-parameters" function
               (:documentation "Set link TYPE properties to PARAMETERS.
  PARAMETERS should be :key val pairs."
                :arguments ("type" "parameters"))
                nil [74915 75294])
            ("org-link-types" function (:documentation "Return a list of known link types.") nil [75296 75397])
            ("org-link-abbrev-alist" variable (:documentation "Alist of link abbreviations.
The car of each element is a string, to be replaced at the start of a link.
The cdrs are replacement values, like (\"linkkey\" . REPLACE).  Abbreviated
links in Org buffers can have an optional tag after a double colon, e.g.,

     [[linkkey:tag][description]]

The `linkkey' must be a single word, starting with a letter, followed
by letters, numbers, `-' or `_'.

If REPLACE is a string, the tag will simply be appended to create the link.
If the string contains \"%s\", the tag will be inserted there.  If the string
contains \"%h\", it will cause a url-encoded version of the tag to be inserted
at that point (see the function `url-hexify-string').  If the string contains
the specifier \"%(my-function)\", then the custom function `my-function' will
be invoked: this function takes the tag as its only argument and must return
a string.

REPLACE may also be a function that will be called with the tag as the
only argument to create the link, which should be returned as a string.

See the manual for examples.") nil [75399 76618])
            ("org-descriptive-links" variable
               (:documentation "Non-nil means Org will display descriptive links.
E.g. [[https://orgmode.org][Org website]] will be displayed as
\"Org Website\", hiding the link itself and just displaying its
description.  When set to nil, Org will display the full links
literally.

You can interactively set the value of this variable by calling
`org-toggle-link-display' or from the menu Org>Hyperlinks menu."
                :default-value t)
                nil [76620 77075])
            ("org-link-file-path-type" variable
               (:documentation "How the path name in file links should be stored.
Valid values are:

relative  Relative to the current directory, i.e. the directory of the file
          into which the link is being inserted.
absolute  Absolute path, if possible with ~ for home directory.
noabbrev  Absolute path, no abbreviation of home directory.
adaptive  Use relative path for files in the current directory and sub-
          directories of it.  For other files, use an absolute path."
                :default-value 'adaptive)
                nil [77077 77702])
            ("defvaralias" code nil nil [77704 77758])
            ("org-highlight-links" variable
               (:documentation "Types of links that should be highlighted in Org files.

This is a list of symbols, each one of them leading to the
highlighting of a certain link type.

You can still open links that are not highlighted.

In principle, it does not hurt to turn on highlighting for all
link types.  There may be a small gain when turning off unused
link types.  The types are:

bracket   The recommended [[link][description]] or [[link]] links with hiding.
angle     Links in angular brackets that may contain whitespace like
          <bbdb:Carsten Dominik>.
plain     Plain links in normal text, no whitespace, like http://google.com.
radio     Text that is matched by a radio target, see manual for details.
tag       Tag settings in a headline (link to tag search).
date      Time stamps (link to calendar).
footnote  Footnote labels.

If you set this variable during an Emacs session, use `org-mode-restart'
in the Org buffer so that the change takes effect."
                :default-value '(bracket angle plain radio tag date footnote))
                nil [77759 79162])
            ("org-make-link-description-function" variable (:documentation "Function to use for generating link descriptions from links.
This function must take two parameters: the first one is the
link, the second one is the description generated by
`org-insert-link'.  The function should return the description to
use.") nil [79164 79524])
            ("org-link-store" customgroup
               (:documentation "Options concerning storing links in Org mode."
                :user-visible-flag t)
                nil [79526 79648])
            ("org-url-hexify-p" variable
               (:documentation "When non-nil, hexify URL when creating a link."
                :default-value t)
                nil [79650 79791])
            ("org-email-link-description-format" variable
               (:documentation "Format of the description part of a link to an email or usenet message.
The following %-escapes will be replaced by corresponding information:

%F   full \"From\" field
%f   name, taken from \"From\" field, address if no name
%T   full \"To\" field
%t   first name in \"To\" field, address if no name
%c   correspondent.  Usually \"from NAME\", but if you sent it yourself, it
     will be \"to NAME\".  See also the variable `org-from-is-user-regexp'.
%s   subject
%d   date
%m   message-id.

You may use normal field width specification between the % and the letter.
This is for example useful to limit the length of the subject.

Examples: \"%f on: %.30s\", \"Email from %f\", \"Email %c\""
                :default-value "Email %c: %.30s")
                nil [79793 80594])
            ("org-from-is-user-regexp" variable
               (:documentation "Regexp matched against the \"From:\" header of an email or usenet message.
It should match if the message is from the user him/herself."
                :default-value (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2))))
                nil [80596 81156])
            ("org-context-in-file-links" variable
               (:documentation "Non-nil means file links from `org-store-link' contain context.
\\<org-mode-map>
A search string will be added to the file name with :: as separator
and used to find the context when the link is activated by the command
`org-open-at-point'.  When this option is t, the entire active region
will be placed in the search string of the file link.  If set to a
positive integer, only the first n lines of context will be stored.

Using a prefix arg to the command `org-store-link' (`\\[universal-argument] \\[org-store-link]')
negates this setting for the duration of the command."
                :default-value t)
                nil [81158 81839])
            ("org-keep-stored-link-after-insertion" variable (:documentation "Non-nil means keep link in list for entire session.
\\<org-mode-map>
The command `org-store-link' adds a link pointing to the current
location to an internal list.  These links accumulate during a session.
The command `org-insert-link' can be used to insert links into any
Org file (offering completion for all stored links).

When this option is nil, every link which has been inserted once using
`\\[org-insert-link]' will be removed from the list, to make completing the unused
links more efficient.") nil [81841 82444])
            ("org-link-follow" customgroup
               (:documentation "Options concerning following links in Org mode."
                :user-visible-flag t)
                nil [82446 82572])
            ("org-link-translation-function" variable (:documentation "Function to translate links with different syntax to Org syntax.
This can be used to translate links created for example by the Planner
or emacs-wiki packages to Org syntax.
The function must accept two parameters, a TYPE containing the link
protocol name like \"rmail\" or \"gnus\" as a string, and the linked path,
which is everything after the link protocol.  It should return a cons
with possibly modified values of type and path.
Org contains a function for this, so if you set this variable to
`org-translate-link-from-planner', you should be able follow many
links created by planner.") nil [82574 83282])
            ("org-follow-link-hook" variable (:documentation "Hook that is run after a link has been followed.") nil [83284 83413])
            ("org-tab-follows-link" variable (:documentation "Non-nil means on links TAB will follow the link.
Needs to be set before org.el is loaded.
This really should not be used, it does not make sense, and the
implementation is bad.") nil [83415 83675])
            ("org-return-follows-link" variable (:documentation "Non-nil means on links RET will follow the link.
In tables, the special behavior of RET has precedence.") nil [83677 83867])
            ("org-mouse-1-follows-link" variable
               (:documentation "Non-nil means mouse-1 on a link will follow the link.
A longer mouse click will still set point.  Needs to be set
before org.el is loaded."
                :default-value (if (boundp 'mouse-1-click-follows-link) mouse-1-click-follows-link t))
                nil [83869 84422])
            ("org-mark-ring-length" variable
               (:documentation "Number of different positions to be recorded in the ring.
Changing this requires a restart of Emacs to work correctly."
                :default-value 4)
                nil [84424 84624])
            ("org-link-search-must-match-exact-headline" variable
               (:documentation "Non-nil means internal fuzzy links can only match headlines.

When nil, the a fuzzy link may point to a target or a named
construct in the document.  When set to the special value
`query-to-create', offer to create a new headline when none
matched.

Spaces and statistics cookies are ignored during heading searches."
                :default-value 'query-to-create)
                nil [84626 85267])
            ("org-link-frame-setup" variable
               (:documentation "Setup the frame configuration for following links.
When following a link with Emacs, it may often be useful to display
this link in another window or frame.  This variable can be used to
set this up for the different types of links.
For VM, use any of
    `vm-visit-folder'
    `vm-visit-folder-other-window'
    `vm-visit-folder-other-frame'
For Gnus, use any of
    `gnus'
    `gnus-other-frame'
    `org-gnus-no-new-news'
For FILE, use any of
    `find-file'
    `find-file-other-window'
    `find-file-other-frame'
For Wanderlust use any of
    `wl'
    `wl-other-frame'
For the calendar, use the variable `calendar-setup'.
For BBDB, it is currently only possible to display the matches in
another window."
                :default-value '((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame)))
                nil [85269 86842])
            ("org-display-internal-link-with-indirect-buffer" variable (:documentation "Non-nil means use indirect buffer to display infile links.
Activating internal links (from one location in a file to another location
in the same file) normally just jumps to the location.  When the link is
activated with a `\\[universal-argument]' prefix (or with mouse-3), the link is displayed in
another window.  When this option is set, the other window actually displays
an indirect buffer clone of the current buffer, to avoid any visibility
changes to the current buffer.") nil [86844 87435])
            ("org-open-non-existing-files" variable (:documentation "Non-nil means `org-open-file' will open non-existing files.
When nil, an error will be generated.
This variable applies only to external applications because they
might choke on non-existing files.  If the link is to a file that
will be opened in Emacs, the variable is ignored.") nil [87437 87806])
            ("org-open-directory-means-index-dot-org" variable (:documentation "Non-nil means a link to a directory really means to index.org.
When nil, following a directory link will run dired or open a finder/explorer
window on that directory.") nil [87808 88076])
            ("org-confirm-shell-link-function" variable
               (:documentation "Non-nil means ask for confirmation before executing shell links.
Shell links can be dangerous: just think about a link

     [[shell:rm -rf ~/*][Google Search]]

This link would show up in your Org document as \"Google Search\",
but really it would remove your entire home directory.
Therefore we advise against setting this variable to nil.
Just change it to `y-or-n-p' if you want to confirm with a
single keystroke rather than having to type \"yes\"."
                :default-value 'yes-or-no-p)
                nil [88078 88787])
            ("put" code nil nil [88788 88905])
            ("org-confirm-shell-link-not-regexp" variable (:documentation "A regexp to skip confirmation for shell links.") nil [88907 89066])
            ("org-confirm-elisp-link-function" variable
               (:documentation "Non-nil means ask for confirmation before executing Emacs Lisp links.
Elisp links can be dangerous: just think about a link

     [[elisp:(shell-command \"rm -rf ~/*\")][Google Search]]

This link would show up in your Org document as \"Google Search\",
but really it would remove your entire home directory.
Therefore we advise against setting this variable to nil.
Just change it to `y-or-n-p' if you want to confirm with a
single keystroke rather than having to type \"yes\"."
                :default-value 'yes-or-no-p)
                nil [89068 89802])
            ("put" code nil nil [89803 89920])
            ("org-confirm-elisp-link-not-regexp" variable (:documentation "A regexp to skip confirmation for Elisp links.") nil [89922 90081])
            ("org-file-apps-defaults-gnu" variable
               (:documentation "Default file applications on a UNIX or GNU/Linux system.
See `org-file-apps'."
                :constant-flag t
                :default-value '((remote . emacs) (system . mailcap) (t . mailcap)))
                nil [90083 90265])
            ("org-file-apps-defaults-macosx" variable
               (:documentation "Default file applications on a macOS system.
The system \"open\" is known as a default, but we use X11 applications
for some files for which the OS does not have a good default.
See `org-file-apps'."
                :constant-flag t
                :default-value '((remote . emacs) (system . "open %s") ("ps.gz" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s") (t . "open %s")))
                nil [90267 90681])
            ("org-file-apps-defaults-windowsnt" variable
               (:documentation "Default file applications on a Windows NT system.
The system \"open\" is used for most files.
See `org-file-apps'."
                :constant-flag t
                :default-value (list '(remote . emacs) (cons 'system (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file)))) (cons t (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file))))))
                nil [90683 91051])
            ("org-file-apps" variable
               (:documentation "External applications for opening `file:path' items in a document.
\\<org-mode-map>
Org mode uses system defaults for different file types, but
you can use this variable to set the application for a given file
extension.  The entries in this list are cons cells where the car identifies
files and the cdr the corresponding command.

Possible values for the file identifier are:

 \"string\"    A string as a file identifier can be interpreted in different
               ways, depending on its contents:

               - Alphanumeric characters only:
                 Match links with this file extension.
                 Example: (\"pdf\" . \"evince %s\")
                          to open PDFs with evince.

               - Regular expression: Match links where the
                 filename matches the regexp.  If you want to
                 use groups here, use shy groups.

                 Example: (\"\\\\.x?html\\\\\\='\" . \"firefox %s\")
                          (\"\\\\(?:xhtml\\\\|html\\\\)\\\\\\='\" . \"firefox %s\")
                          to open *.html and *.xhtml with firefox.

               - Regular expression which contains (non-shy) groups:
                 Match links where the whole link, including \"::\", and
                 anything after that, matches the regexp.
                 In a custom command string, %1, %2, etc. are replaced with
                 the parts of the link that were matched by the groups.
                 For backwards compatibility, if a command string is given
                 that does not use any of the group matches, this case is
                 handled identically to the second one (i.e. match against
                 file name only).
                 In a custom function, you can access the group matches with
                 (match-string n link).

                 Example: (\"\\\\.pdf::\\\\(\\\\d+\\\\)\\\\\\='\" . \"evince -p %1 %s\")
                     to open [[file:document.pdf::5]] with evince at page 5.

 `directory'   Matches a directory
 `remote'      Matches a remote file, accessible through tramp or efs.
               Remote files most likely should be visited through Emacs
               because external applications cannot handle such paths.
`auto-mode'    Matches files that are matched by any entry in `auto-mode-alist',
               so all files Emacs knows how to handle.  Using this with
               command `emacs' will open most files in Emacs.  Beware that this
               will also open html files inside Emacs, unless you add
               (\"html\" . default) to the list as well.
 `system'      The system command to open files, like `open' on Windows
               and macOS, and mailcap under GNU/Linux.  This is the command
               that will be selected if you call `org-open-at-point' with a
               double prefix argument (`\\[universal-argument] \\[universal-argument] \\[org-open-at-point]').
 t             Default for files not matched by any of the other options.

Possible values for the command are:

 `emacs'       The file will be visited by the current Emacs process.
 `default'     Use the default application for this file type, which is the
               association for t in the list, most likely in the system-specific
               part.  This can be used to overrule an unwanted setting in the
               system-specific variable.
 `system'      Use the system command for opening files, like \"open\".
               This command is specified by the entry whose car is `system'.
               Most likely, the system-specific version of this variable
               does define this command, but you can overrule/replace it
               here.
`mailcap'      Use command specified in the mailcaps.
 string        A command to be executed by a shell; %s will be replaced
               by the path to the file.
 function      A Lisp function, which will be called with two arguments:
               the file path and the original link string, without the
               \"file:\" prefix.

For more examples, see the system specific constants
`org-file-apps-defaults-macosx'
`org-file-apps-defaults-windowsnt'
`org-file-apps-defaults-gnu'."
                :default-value '((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . default)))
                nil [91053 95977])
            ("org-doi-server-url" variable
               (:documentation "The URL of the DOI server."
                :default-value "http://dx.doi.org/")
                nil [95979 96121])
            ("org-refile" customgroup
               (:documentation "Options concerning refiling entries in Org mode."
                :user-visible-flag t)
                nil [96123 96235])
            ("org-directory" variable
               (:documentation "Directory with Org files.
This is just a default location to look for Org files.  There is no need
at all to put your files into this directory.  It is used in the
following situations:

1. When a capture template specifies a target file that is not an
   absolute path.  The path will then be interpreted relative to
   `org-directory'
2. When the value of variable `org-agenda-files' is a single file, any
   relative paths in this file will be taken as relative to
   `org-directory'."
                :default-value "~/org")
                nil [96237 96824])
            ("org-default-notes-file" variable
               (:documentation "Default target for storing notes.
Used as a fall back file for org-capture.el, for templates that
do not specify a target file."
                :default-value (convert-standard-filename "~/.notes"))
                nil [96826 97088])
            ("org-goto-interface" variable
               (:documentation "The default interface to be used for `org-goto'.
Allowed values are:
outline                  The interface shows an outline of the relevant file
                         and the correct heading is found by moving through
                         the outline or by searching with incremental search.
outline-path-completion  Headlines in the current buffer are offered via
                         completion.  This is the interface also used by
                         the refile command."
                :default-value 'outline)
                nil [97090 97763])
            ("org-goto-max-level" variable
               (:documentation "Maximum target level when running `org-goto' with refile interface."
                :default-value 5)
                nil [97765 97907])
            ("org-reverse-note-order" variable (:documentation "Non-nil means store new notes at the beginning of a file or entry.
When nil, new notes will be filed to the end of a file or entry.
This can also be a list with cons cells of regular expressions that
are matched against file names, and values.") nil [97909 98392])
            ("org-log-refile" variable (:documentation "Information to record when a task is refiled.

Possible values are:

nil     Don't add anything
time    Add a time stamp to the task
note    Prompt for a note and add it with template `org-log-note-headings'

This option can also be set with on a per-file-basis with

   #+STARTUP: nologrefile
   #+STARTUP: logrefile
   #+STARTUP: lognoterefile

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords.

When bulk-refiling from the agenda, the value `note' is forbidden and
will temporarily be changed to `time'.") nil [98394 99205])
            ("org-refile-targets" variable (:documentation "Targets for refiling entries with `\\[org-refile]'.
This is a list of cons cells.  Each cell contains:
- a specification of the files to be considered, either a list of files,
  or a symbol whose function or variable value will be used to retrieve
  a file name or a list of file names.  If you use `org-agenda-files' for
  that, all agenda files will be scanned for targets.  Nil means consider
  headings in the current buffer.
- A specification of how to find candidate refile targets.  This may be
  any of:
  - a cons cell (:tag . \"TAG\") to identify refile targets by a tag.
    This tag has to be present in all target headlines, inheritance will
    not be considered.
  - a cons cell (:todo . \"KEYWORD\") to identify refile targets by
    todo keyword.
  - a cons cell (:regexp . \"REGEXP\") with a regular expression matching
    headlines that are refiling targets.
  - a cons cell (:level . N).  Any headline of level N is considered a target.
    Note that, when `org-odd-levels-only' is set, level corresponds to
    order in hierarchy, not to the number of stars.
  - a cons cell (:maxlevel . N).  Any headline with level <= N is a target.
    Note that, when `org-odd-levels-only' is set, level corresponds to
    order in hierarchy, not to the number of stars.

Each element of this list generates a set of possible targets.
The union of these sets is presented (with completion) to
the user by `org-refile'.

You can set the variable `org-refile-target-verify-function' to a function
to verify each headline found by the simple criteria above.

When this variable is nil, all top-level headlines in the current buffer
are used, equivalent to the value `((nil . (:level . 1))'.") nil [99207 101531])
            ("org-refile-target-verify-function" variable (:documentation "Function to verify if the headline at point should be a refile target.
The function will be called without arguments, with point at the
beginning of the headline.  It should return t and leave point
where it is if the headline is a valid target for refiling.

If the target should not be selected, the function must return nil.
In addition to this, it may move point to a place from where the search
should be continued.  For example, the function may decide that the entire
subtree of the current entry should be excluded and move point to the end
of the subtree.") nil [101533 102219])
            ("org-refile-use-cache" variable (:documentation "Non-nil means cache refile targets to speed up the process.
\\<org-mode-map>The cache for a particular file will be updated automatically when
the buffer has been killed, or when any of the marker used for flagging
refile targets no longer points at a live buffer.
If you have added new entries to a buffer that might themselves be targets,
you need to clear the cache manually by pressing `C-0 \\[org-refile]' or,
if you find that easier, `\\[universal-argument] \\[universal-argument] \\[universal-argument] \\[org-refile]'.") nil [102221 102850])
            ("org-refile-use-outline-path" variable (:documentation "Non-nil means provide refile targets as paths.
So a level 3 headline will be available as level1/level2/level3.

When the value is `file', also include the file name (without directory)
into the path.  In this case, you can also stop the completion after
the file name, to get entries inserted as top level in the file.

When `full-file-path', include the full file path.

When `buffer-name', use the buffer name.") nil [102852 103558])
            ("org-outline-path-complete-in-steps" variable
               (:documentation "Non-nil means complete the outline path in hierarchical steps.
When Org uses the refile interface to select an outline path (see
`org-refile-use-outline-path'), the completion of the path can be
done in a single go, or it can be done in steps down the headline
hierarchy.  Going in steps is probably the best if you do not use
a special completion package like `ido' or `icicles'.  However,
when using these packages, going in one step can be very fast,
while still showing the whole path to the entry."
                :default-value t)
                nil [103560 104153])
            ("org-refile-allow-creating-parent-nodes" variable (:documentation "Non-nil means allow the creation of new nodes as refile targets.
New nodes are then created by adding \"/new node name\" to the completion
of an existing node.  When the value of this variable is `confirm',
new node creation must be confirmed by the user (recommended).
When nil, the completion must match an existing entry.

Note that, if the new heading is not seen by the criteria
listed in `org-refile-targets', multiple instances of the same
heading would be created by trying again to file under the new
heading.") nil [104155 104876])
            ("org-refile-active-region-within-subtree" variable (:documentation "Non-nil means also refile active region within a subtree.

By default `org-refile' doesn't allow refiling regions if they
don't contain a set of subtrees, but it might be convenient to
do so sometimes: in that case, the first line of the region is
converted to a headline before refiling.") nil [104878 105282])
            ("org-todo" customgroup
               (:documentation "Options concerning TODO items in Org mode."
                :user-visible-flag t)
                nil [105284 105386])
            ("org-progress" customgroup
               (:documentation "Options concerning Progress logging in Org mode."
                :user-visible-flag t)
                nil [105388 105509])
            ("org-todo-interpretation-widgets" variable
               (:documentation "The available interpretation symbols for customizing `org-todo-keywords'.
Interested libraries should add to this list."
                :default-value '((:tag "Sequence (cycling hits every state)" sequence) (:tag "Type     (cycling directly to DONE)" type)))
                nil [105511 105788])
            ("org-todo-keywords" variable
               (:documentation "List of TODO entry keyword sequences and their interpretation.
\\<org-mode-map>This is a list of sequences.

Each sequence starts with a symbol, either `sequence' or `type',
indicating if the keywords should be interpreted as a sequence of
action steps, or as different types of TODO items.  The first
keywords are states requiring action - these states will select a headline
for inclusion into the global TODO list Org produces.  If one of the
\"keywords\" is the vertical bar, \"|\", the remaining keywords
signify that no further action is necessary.  If \"|\" is not found,
the last keyword is treated as the only DONE state of the sequence.

The command `\\[org-todo]' cycles an entry through these states, and one
additional state where no keyword is present.  For details about this
cycling, see the manual.

TODO keywords and interpretation can also be set on a per-file basis with
the special #+SEQ_TODO and #+TYP_TODO lines.

Each keyword can optionally specify a character for fast state selection
(in combination with the variable `org-use-fast-todo-selection')
and specifiers for state change logging, using the same syntax that
is used in the \"#+TODO:\" lines.  For example, \"WAIT(w)\" says that
the WAIT state can be selected with the \"w\" key.  \"WAIT(w!)\"
indicates to record a time stamp each time this state is selected.

Each keyword may also specify if a timestamp or a note should be
recorded when entering or leaving the state, by adding additional
characters in the parenthesis after the keyword.  This looks like this:
\"WAIT(w@/!)\".  \"@\" means to add a note (with time), \"!\" means to
record only the time of the state change.  With X and Y being either
\"@\" or \"!\", \"X/Y\" means use X when entering the state, and use
Y when leaving the state if and only if the *target* state does not
define X.  You may omit any of the fast-selection key or X or /Y,
so WAIT(w@), WAIT(w/@) and WAIT(@/@) are all valid.

For backward compatibility, this variable may also be just a list
of keywords.  In this case the interpretation (sequence or type) will be
taken from the (otherwise obsolete) variable `org-todo-interpretation'."
                :default-value '((sequence "TODO" "DONE")))
                nil [105790 108604])
            ("defvar-local" code nil nil [108606 108695])
            ("org-todo-keywords-for-agenda" variable nil nil [108696 108737])
            ("org-done-keywords-for-agenda" variable nil nil [108738 108779])
            ("org-todo-keyword-alist-for-agenda" variable nil nil [108780 108826])
            ("org-tag-alist-for-agenda" variable (:documentation "Alist of all tags from all agenda files.") nil [108827 108909])
            ("org-tag-groups-alist-for-agenda" variable (:documentation "Alist of all groups tags from all current agenda files.") nil [108910 109014])
            ("defvar-local" code nil nil [109015 109054])
            ("org-agenda-contributing-files" variable nil nil [109055 109097])
            ("defvar-local" code nil nil [109098 109301])
            ("defvar-local" code nil nil [109302 109342])
            ("defvar-local" code nil nil [109343 109379])
            ("defvar-local" code nil nil [109380 109413])
            ("defvar-local" code nil nil [109414 109446])
            ("defvar-local" code nil nil [109447 109485])
            ("defvar-local" code nil nil [109486 109523])
            ("defvar-local" code nil nil [109524 109561])
            ("defvar-local" code nil nil [109562 109601])
            ("org-todo-interpretation" variable
               (:documentation "Controls how TODO keywords are interpreted.
This variable is in principle obsolete and is only used for
backward compatibility, if the interpretation of todo keywords is
not given already in `org-todo-keywords'.  See that variable for
more information."
                :default-value 'sequence)
                nil [109603 109998])
            ("org-use-fast-todo-selection" variable
               (:documentation "\\<org-mode-map>Non-nil means use the fast todo selection scheme with `\\[org-todo]'.
This variable describes if and under what circumstances the cycling
mechanism for TODO keywords will be replaced by a single-key, direct
selection scheme.

When nil, fast selection is never used.

When the symbol `prefix', it will be used when `org-todo' is called
with a prefix argument,  i.e. `\\[universal-argument] \\[org-todo]' in an Org buffer, and
`\\[universal-argument] t' in an agenda buffer.

When t, fast selection is used by default.  In this case, the prefix
argument forces cycling instead.

In all cases, the special interface is only used if access keys have
actually been assigned by the user, i.e. if keywords in the configuration
are followed by a letter in parenthesis, like TODO(t)."
                :default-value t)
                nil [110000 110983])
            ("org-provide-todo-statistics" variable
               (:documentation "Non-nil means update todo statistics after insert and toggle.
ALL-HEADLINES means update todo statistics by including headlines
with no TODO keyword as well, counting them as not done.
A list of TODO keywords means the same, but skip keywords that are
not in this list.
When set to a list of two lists, the first list contains keywords
to consider as TODO keywords, the second list contains keywords
to consider as DONE keywords.

When this is set, todo statistics is updated in the parent of the
current entry each time a todo state is changed."
                :default-value t)
                nil [110985 111977])
            ("org-hierarchical-todo-statistics" variable
               (:documentation "Non-nil means TODO statistics covers just direct children.
When nil, all entries in the subtree are considered.
This has only an effect if `org-provide-todo-statistics' is set.
To set this to nil for only a single subtree, use a COOKIE_DATA
property and include the word \"recursive\" into the value."
                :default-value t)
                nil [111979 112366])
            ("org-after-todo-state-change-hook" variable (:documentation "Hook which is run after the state of a TODO item was changed.
The new state (a string with a TODO keyword, or nil) is available in the
Lisp variable `org-state'.") nil [112368 112615])
            ("org-blocker-hook" variable (:documentation "Hook for functions that are allowed to block a state change.

Functions in this hook should not modify the buffer.
Each function gets as its single argument a property list,
see `org-trigger-hook' for more information about this list.

If any of the functions in this hook returns nil, the state change
is blocked.") nil [112617 112965])
            ("org-trigger-hook" variable (:documentation "Hook for functions that are triggered by a state change.

Each function gets as its single argument a property list with at
least the following elements:

 (:type type-of-change :position pos-at-entry-start
  :from old-state :to new-state)

Depending on the type, more properties may be present.

This mechanism is currently implemented for:

TODO state changes
------------------
:type  todo-state-change
:from  previous state (keyword as a string), or nil, or a symbol
       `todo' or `done', to indicate the general type of state.
:to    new state, like in :from") nil [112967 113567])
            ("org-enforce-todo-dependencies" variable (:documentation "Non-nil means undone TODO entries will block switching the parent to DONE.
Also, if a parent has an :ORDERED: property, switching an entry to DONE will
be blocked if any prior sibling is not yet done.
Finally, if the parent is blocked because of ordered siblings of its own,
the child will also be blocked.") nil [113569 114201])
            ("org-enforce-todo-checkbox-dependencies" variable (:documentation "Non-nil means unchecked boxes will block switching the parent to DONE.
When this is nil, checkboxes have no influence on switching TODO states.
When non-nil, you first need to check off all check boxes before the TODO
entry can be switched to DONE.
This variable needs to be set before org.el is loaded, and you need to
restart Emacs after a change to make the change effective.  The only way
to change is while Emacs is running is through the customize interface.") nil [114203 114962])
            ("org-treat-insert-todo-heading-as-state-change" variable (:documentation "Non-nil means inserting a TODO heading is treated as state change.
So when the command `\\[org-insert-todo-heading]' is used, state change
logging will apply if appropriate.  When nil, the new TODO item will
be inserted directly, and no logging will take place.") nil [114964 115327])
            ("org-treat-S-cursor-todo-selection-as-state-change" variable
               (:documentation "Non-nil means switching TODO states with S-cursor counts as state change.
This is the default behavior.  However, setting this to nil allows a
convenient way to select a TODO state and bypass any logging associated
with that."
                :default-value t)
                nil [115329 115658])
            ("org-todo-state-tags-triggers" variable (:documentation "Tag changes that should be triggered by TODO state changes.
This is a list.  Each entry is

  (state-change (tag . flag) .......)

State-change can be a string with a state, and empty string to indicate the
state that has no TODO keyword, or it can be one of the symbols `todo'
or `done', meaning any not-done or done state, respectively.") nil [115660 116376])
            ("org-log-done" variable (:documentation "Information to record when a task moves to the DONE state.

Possible values are:

nil     Don't add anything, just change the keyword
time    Add a time stamp to the task
note    Prompt for a note and add it with template `org-log-note-headings'

This option can also be set with on a per-file-basis with

   #+STARTUP: nologdone
   #+STARTUP: logdone
   #+STARTUP: lognotedone

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords.") nil [116378 117103])
            ("cond" code nil nil [117144 117283])
            ("org-log-reschedule" variable (:documentation "Information to record when the scheduling date of a tasks is modified.

Possible values are:

nil     Don't add anything, just change the date
time    Add a time stamp to the task
note    Prompt for a note and add it with template `org-log-note-headings'

This option can also be set with on a per-file-basis with

   #+STARTUP: nologreschedule
   #+STARTUP: logreschedule
   #+STARTUP: lognotereschedule") nil [117285 117912])
            ("org-log-redeadline" variable (:documentation "Information to record when the deadline date of a tasks is modified.

Possible values are:

nil     Don't add anything, just change the date
time    Add a time stamp to the task
note    Prompt for a note and add it with template `org-log-note-headings'

This option can also be set with on a per-file-basis with

   #+STARTUP: nologredeadline
   #+STARTUP: logredeadline
   #+STARTUP: lognoteredeadline

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords.") nil [117914 118656])
            ("org-log-note-clock-out" variable (:documentation "Non-nil means record a note when clocking out of an item.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: lognoteclock-out
   #+STARTUP: nolognoteclock-out") nil [118658 118991])
            ("org-log-done-with-time" variable
               (:documentation "Non-nil means the CLOSED time stamp will contain date and time.
When nil, only the date will be recorded."
                :default-value t)
                nil [118993 119179])
            ("org-log-note-headings" variable
               (:documentation "Headings for notes added to entries.

The value is an alist, with the car being a symbol indicating the
note context, and the cdr is the heading to be used.  The heading
may also be the empty string.  The following placeholders can be
used:

  %t  a time stamp.
  %T  an active time stamp instead the default inactive one
  %d  a short-format time stamp.
  %D  an active short-format time stamp.
  %s  the new TODO state or time stamp (inactive), in double quotes.
  %S  the old TODO state or time stamp (inactive), in double quotes.
  %u  the user name.
  %U  full user name.

In fact, it is not a good idea to change the `state' entry,
because Agenda Log mode depends on the format of these entries."
                :default-value '((done . "CLOSING NOTE %t") (state . "State %-12s from %-12S %t") (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t") (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t") (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))
                nil [119181 121076])
            ("unless" code nil nil [121078 121167])
            ("defvaralias" code nil nil [121169 121236])
            ("org-log-into-drawer" variable (:documentation "Non-nil means insert state change notes and time stamps into a drawer.
When nil, state changes notes will be inserted after the headline and
any scheduling and clock lines, but not inside a drawer.

The value of this variable should be the name of the drawer to use.
LOGBOOK is proposed as the default drawer for this purpose, you can
also set this to a string to define the drawer of your choice.

A value of t is also allowed, representing \"LOGBOOK\".

A value of t or nil can also be set with on a per-file-basis with

   #+STARTUP: logdrawer
   #+STARTUP: nologdrawer

If this variable is set, `org-log-state-notes-insert-after-drawers'
will be ignored.

You can set the property LOG_INTO_DRAWER to overrule this setting for
a subtree.

Do not check directly this variable in a Lisp program.  Call
function `org-log-into-drawer' instead.") nil [121238 122273])
            ("org-log-into-drawer" function (:documentation "Name of the log drawer, as a string, or nil.
This is the value of `org-log-into-drawer'.  However, if the
current entry has or inherits a LOG_INTO_DRAWER property, it will
be used instead of the default value.") nil [122275 122770])
            ("org-log-state-notes-insert-after-drawers" variable (:documentation "Non-nil means insert state change notes after any drawers in entry.
Only the drawers that *immediately* follow the headline and the
deadline/scheduled line are skipped.
When nil, insert notes right after the heading and perhaps the line
with deadline/scheduling if present.

This variable will have no effect if `org-log-into-drawer' is
set.") nil [122772 123233])
            ("org-log-states-order-reversed" variable
               (:documentation "Non-nil means the latest state note will be directly after heading.
When nil, the state change notes will be ordered according to time.

This option can also be set with on a per-file-basis with

   #+STARTUP: logstatesreversed
   #+STARTUP: nologstatesreversed"
                :default-value t)
                nil [123235 123603])
            ("org-todo-repeat-to-state" variable (:documentation "The TODO state to which a repeater should return the repeating task.
By default this is the first task in a TODO sequence, or the previous state
in a TODO_TYP set.  But you can specify another task here.
alternatively, set the :REPEAT_TO_STATE: property of the entry.") nil [123605 124042])
            ("org-log-repeat" variable
               (:documentation "Non-nil means record moving through the DONE state when triggering repeat.
An auto-repeating task is immediately switched back to TODO when
marked DONE.  If you are not logging state changes (by adding \"@\"
or \"!\" to the TODO keyword definition), or set `org-log-done' to
record a closing note, there will be no record of the task moving
through DONE.  This variable forces taking a note anyway.

nil     Don't force a record
time    Record a time stamp
note    Prompt for a note and add it with template `org-log-note-headings'

This option can also be set with on a per-file-basis with

   #+STARTUP: nologrepeat
   #+STARTUP: logrepeat
   #+STARTUP: lognoterepeat

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords."
                :default-value 'time)
                nil [124044 125090])
            ("org-priorities" customgroup
               (:documentation "Priorities in Org mode."
                :user-visible-flag t)
                nil [125093 125193])
            ("org-enable-priority-commands" variable
               (:documentation "Non-nil means priority commands are active.
When nil, these commands will be disabled, so that you never accidentally
set a priority."
                :default-value t)
                nil [125195 125417])
            ("org-highest-priority" variable
               (:documentation "The highest priority of TODO items.  A character like ?A, ?B etc.
Must have a smaller ASCII number than `org-lowest-priority'."
                :default-value 65)
                nil [125419 125629])
            ("org-lowest-priority" variable
               (:documentation "The lowest priority of TODO items.  A character like ?A, ?B etc.
Must have a larger ASCII number than `org-highest-priority'."
                :default-value 67)
                nil [125631 125839])
            ("org-default-priority" variable
               (:documentation "The default priority of TODO items.
This is the priority an item gets if no explicit priority is given.
When starting to cycle on an empty priority the first step in the cycle
depends on `org-priority-start-cycle-with-default'.  The resulting first
step priority must not exceed the range from `org-highest-priority' to
`org-lowest-priority' which means that `org-default-priority' has to be
in this range exclusive or inclusive the range boundaries.  Else the
first step refuses to set the default and the second will fall back
to (depending on the command used) the highest or lowest priority."
                :default-value 66)
                nil [125841 126520])
            ("org-priority-start-cycle-with-default" variable
               (:documentation "Non-nil means start with default priority when starting to cycle.
When this is nil, the first step in the cycle will be (depending on the
command used) one higher or lower than the default priority.
See also `org-default-priority'."
                :default-value t)
                nil [126522 126851])
            ("org-get-priority-function" variable (:documentation "Function to extract the priority from a string.
The string is normally the headline.  If this is nil Org computes the
priority from the priority cookie like [#A] in the headline.  It returns
an integer, increasing by 1000 for each priority level.
The user can set a different function here, which should take a string
as an argument and return the numeric priority.") nil [126853 127354])
            ("org-time" customgroup
               (:documentation "Options concerning time stamps and deadlines in Org mode."
                :user-visible-flag t)
                nil [127356 127473])
            ("org-time-stamp-rounding-minutes" variable
               (:documentation "Number of minutes to round time stamps to.
\\<org-mode-map>These are two values, the first applies when first creating a time stamp.
The second applies when changing it with the commands `S-up' and `S-down'.
When changing the time stamp, this means that it will change in steps
of N minutes, as given by the second value.

When a setting is 0 or 1, insert the time unmodified.  Useful rounding
numbers should be factors of 60, so for example 5, 10, 15.

When this is larger than 1, you can still force an exact time stamp by using
a double prefix argument to a time stamp command like `\\[org-time-stamp]' or `\\[org-time-stamp-inactive],
and by using a prefix arg to `S-up/down' to specify the exact number
of minutes to shift."
                :default-value '(0 5))
                nil [127475 128534])
            ("when" code nil nil [128586 128755])
            ("org-display-custom-times" variable (:documentation "Non-nil means overlay custom formats over all time stamps.
The formats are defined through the variable `org-time-stamp-custom-formats'.
To turn this on on a per-file basis, insert anywhere in the file:
   #+STARTUP: customtime") nil [128757 129082])
            ("make-variable-buffer-local" code nil nil [129083 129137])
            ("org-time-stamp-custom-formats" variable
               (:documentation "Custom formats for time stamps.  See `format-time-string' for the syntax.
These are overlaid over the default ISO format if the variable
`org-display-custom-times' is set.  Time like %H:%M should be at the
end of the second format.  The custom formats are also honored by export
commands, if custom time display is turned on at the time of export."
                :default-value '("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))
                nil [129139 129621])
            ("org-time-stamp-format" function
               (:documentation "Get the right format for a time string."
                :arguments ("long" "inactive"))
                nil [129623 129873])
            ("org-deadline-warning-days" variable
               (:documentation "Number of days before expiration during which a deadline becomes active.
This variable governs the display in sparse trees and in the agenda.
When 0 or negative, it means use this number (the absolute value of it)
even if a deadline has a different individual lead time specified.

Custom commands can set this variable in the options section."
                :default-value 14)
                nil [129875 130333])
            ("org-scheduled-delay-days" variable (:documentation "Number of days before a scheduled item becomes active.
This variable governs the display in sparse trees and in the agenda.
The default value (i.e. 0) means: don't delay scheduled item.
When negative, it means use this number (the absolute value of it)
even if a scheduled item has a different individual delay time
specified.

Custom commands can set this variable in the options section.") nil [130335 130889])
            ("org-read-date-prefer-future" variable
               (:documentation "Non-nil means assume future for incomplete date input from user.
This affects the following situations:
1. The user gives a month but not a year.
   For example, if it is April and you enter \"feb 2\", this will be read
   as Feb 2, *next* year.  \"May 5\", however, will be this year.
2. The user gives a day, but no month.
   For example, if today is the 15th, and you enter \"3\", Org will read
   this as the third of *next* month.  However, if you enter \"17\",
   it will be considered as *this* month.

If you set this variable to the symbol `time', then also the following
will work:

3. If the user gives a time.
   If the time is before now, it will be interpreted as tomorrow.

Currently none of this works for ISO week specifications.

When this option is nil, the current day, month and year will always be
used as defaults.

See also `org-agenda-jump-prefer-future'."
                :default-value t)
                nil [130891 131972])
            ("org-agenda-jump-prefer-future" variable
               (:documentation "Should the agenda jump command prefer the future for incomplete dates?
The default is to do the same as configured in `org-read-date-prefer-future'.
But you can also set a deviating value here.
This may t or nil, or the symbol `org-read-date-prefer-future'."
                :default-value 'org-read-date-prefer-future)
                nil [131974 132518])
            ("org-read-date-force-compatible-dates" variable
               (:documentation "Should date/time prompt force dates that are guaranteed to work in Emacs?

Depending on the system Emacs is running on, certain dates cannot
be represented with the type used internally to represent time.
Dates between 1970-1-1 and 2038-1-1 can always be represented
correctly.  Some systems allow for earlier dates, some for later,
some for both.  One way to find out it to insert any date into an
Org buffer, putting the cursor on the year and hitting S-up and
S-down to test the range.

When this variable is set to t, the date/time prompt will not let
you specify dates outside the 1970-2037 range, so it is certain that
these dates will work in whatever version of Emacs you are
running, and also that you can move a file from one Emacs implementation
to another.  WHenever Org is forcing the year for you, it will display
a message and beep.

When this variable is nil, Org will check if the date is
representable in the specific Emacs implementation you are using.
If not, it will force a year, usually the current year, and beep
to remind you.  Currently this setting is not recommended because
the likelihood that you will open your Org files in an Emacs that
has limited date range is not negligible.

A workaround for this problem is to use diary sexp dates for time
stamps outside of this range."
                :default-value t)
                nil [132520 133936])
            ("org-read-date-display-live" variable
               (:documentation "Non-nil means display current interpretation of date prompt live.
This display will be in an overlay, in the minibuffer."
                :default-value t)
                nil [133938 134139])
            ("defvaralias" code nil nil [134141 134222])
            ("org-read-date-popup-calendar" variable
               (:documentation "Non-nil means pop up a calendar when prompting for a date.
In the calendar, the date can be selected with mouse-1.  However, the
minibuffer will also be active, and you can simply enter the date as well.
When nil, only the minibuffer will be available."
                :default-value t)
                nil [134224 134559])
            ("org-extend-today-until" variable (:documentation "The hour when your day really ends.  Must be an integer.
This has influence for the following applications:
- When switching the agenda to \"today\".  It it is still earlier than
  the time given here, the day recognized as TODAY is actually yesterday.
- When a date is read from the user and it is still before the time given
  here, the current date and time will be assumed to be yesterday, 23:59.
  Also, timestamps inserted in capture templates follow this rule.

IMPORTANT:  This is a feature whose implementation is and likely will
remain incomplete.  Really, it is only here because past midnight seems to
be the favorite working time of John Wiegley :-)") nil [134561 135300])
            ("org-use-effective-time" variable (:documentation "If non-nil, consider `org-extend-today-until' when creating timestamps.
For example, if `org-extend-today-until' is 8, and it's 4am, then the
\"effective time\" of any timestamps between midnight and 8am will be
23:59 of the previous day.") nil [135302 135637])
            ("org-use-last-clock-out-time-as-effective-time" variable (:documentation "When non-nil, use the last clock out time for `org-todo'.
Note that this option has precedence over the combined use of
`org-use-effective-time' and `org-extend-today-until'.") nil [135639 135967])
            ("org-edit-timestamp-down-means-later" variable (:documentation "Non-nil means S-down will increase the time in a time stamp.
When nil, S-up will increase.") nil [135969 136151])
            ("org-calendar-follow-timestamp-change" variable
               (:documentation "Non-nil means make the calendar window follow timestamp changes.
When a timestamp is modified and the calendar window is visible, it will be
moved to the new date."
                :default-value t)
                nil [136153 136407])
            ("org-tags" customgroup
               (:documentation "Options concerning tags in Org mode."
                :user-visible-flag t)
                nil [136409 136505])
            ("org-tag-alist" variable (:documentation "Default tags available in Org files.

The value of this variable is an alist.  Associations either:

  (TAG)
  (TAG . SELECT)
  (SPECIAL)

where TAG is a tag as a string, SELECT is character, used to
select that tag through the fast tag selection interface, and
SPECIAL is one of the following keywords: `:startgroup',
`:startgrouptag', `:grouptags', `:engroup', `:endgrouptag' or
`:newline'.  These keywords are used to define a hierarchy of
tags.  See manual for details.

When this variable is nil, Org mode bases tag input on what is
already in the buffer.  The value can be overridden locally by
using a TAGS keyword, e.g.,

  #+TAGS: tag1 tag2

See also `org-tag-persistent-alist' to sidestep this behavior.") nil [136507 137764])
            ("org-tag-persistent-alist" variable (:documentation "Tags always available in Org files.

The value of this variable is an alist.  Associations either:

  (TAG)
  (TAG . SELECT)
  (SPECIAL)

where TAG is a tag as a string, SELECT is a character, used to
select that tag through the fast tag selection interface, and
SPECIAL is one of the following keywords: `:startgroup',
`:startgrouptag', `:grouptags', `:engroup', `:endgrouptag' or
`:newline'.  These keywords are used to define a hierarchy of
tags.  See manual for details.

Unlike to `org-tag-alist', tags defined in this variable do not
depend on a local TAGS keyword.  Instead, to disable these tags
on a per-file basis, insert anywhere in the file:

  #+STARTUP: noptag") nil [137766 138995])
            ("org-complete-tags-always-offer-all-agenda-tags" variable (:documentation "If non-nil, always offer completion for all tags of all agenda files.
Instead of customizing this variable directly, you might want to
set it locally for capture buffers, because there no list of
tags in that file can be created dynamically (there are none).

  (add-hook \\='org-capture-mode-hook
            (lambda ()
              (setq-local org-complete-tags-always-offer-all-agenda-tags t)))") nil [138997 139516])
            ("org-file-tags" variable (:documentation "List of tags that can be inherited by all entries in the file.
The tags will be inherited if the variable `org-use-tag-inheritance'
says they should be.
This variable is populated from #+FILETAGS lines.") nil [139518 139751])
            ("org-use-fast-tag-selection" variable
               (:documentation "Non-nil means use fast tag selection scheme.
This is a special interface to select and deselect tags with single keys.
When nil, fast selection is never used.
When the symbol `auto', fast selection is used if and only if selection
characters for tags have been configured, either through the variable
`org-tag-alist' or through a #+TAGS line in the buffer.
When t, fast selection is always used and selection keys are assigned
automatically if necessary."
                :default-value 'auto)
                nil [139753 140412])
            ("org-fast-tag-selection-single-key" variable (:documentation "Non-nil means fast tag selection exits after first change.
When nil, you have to press RET to exit it.
During fast tag selection, you can toggle this flag with `C-c'.
This variable can also have the value `expert'.  In this case, the window
displaying the tags menu is not even shown, until you press C-c again.") nil [140414 140897])
            ("org-fast-tag-selection-include-todo" variable (:documentation "Non-nil means fast tags selection interface will also offer TODO states.
This is an undocumented feature, you should not rely on it.") nil [140899 141084])
            ("org-tags-column" variable
               (:documentation "The column to which tags should be indented in a headline.
If this number is positive, it specifies the column.  If it is negative,
it means that the tags should be flushright to that column.  For example,
-80 works well for a normal 80 character screen.
When 0, place tags directly after headline text, with only one space in
between."
                :default-value -77)
                nil [141086 141493])
            ("org-auto-align-tags" variable
               (:documentation "Non-nil keeps tags aligned when modifying headlines.
Some operations (i.e. demoting) change the length of a headline and
therefore shift the tags around.  With this option turned on, after
each such operation the tags are again aligned to `org-tags-column'."
                :default-value t)
                nil [141495 141826])
            ("org-use-tag-inheritance" variable
               (:documentation "Non-nil means tags in levels apply also for sublevels.
When nil, only the tags directly given in a specific line apply there.
This may also be a list of tags that should be inherited, or a regexp that
matches tags that should be inherited.  Additional control is possible
with the variable  `org-tags-exclude-from-inheritance' which gives an
explicit list of tags to be excluded from inheritance, even if the value of
`org-use-tag-inheritance' would select it for inheritance.

If this option is t, a match early-on in a tree can lead to a large
number of matches in the subtree when constructing the agenda or creating
a sparse tree.  If you only want to see the first match in a tree during
a search, check out the variable `org-tags-match-list-sublevels'."
                :default-value t)
                nil [141828 142813])
            ("org-tags-exclude-from-inheritance" variable (:documentation "List of tags that should never be inherited.
This is a way to exclude a few tags from inheritance.  For way to do
the opposite, to actively allow inheritance for selected tags,
see the variable `org-use-tag-inheritance'.") nil [142815 143146])
            ("org-tag-inherit-p" function
               (:documentation "Check if TAG is one that should be inherited."
                :arguments ("tag"))
                nil [143148 143597])
            ("org-tags-match-list-sublevels" variable
               (:documentation "Non-nil means list also sublevels of headlines matching a search.
This variable applies to tags/property searches, and also to stuck
projects because this search is based on a tags match as well.

When set to the symbol `indented', sublevels are indented with
leading dots.

Because of tag inheritance (see variable `org-use-tag-inheritance'),
the sublevels of a headline matching a tag search often also match
the same search.  Listing all of them can create very long lists.
Setting this variable to nil causes subtrees of a match to be skipped.

This variable is semi-obsolete and probably should always be true.  It
is better to limit inheritance to certain tags using the variables
`org-use-tag-inheritance' and `org-tags-exclude-from-inheritance'."
                :default-value t)
                nil [143599 144582])
            ("org-tags-sort-function" variable (:documentation "When set, tags are sorted using this function as a comparator.") nil [144584 144886])
            ("org-tags-history" variable (:documentation "History of minibuffer reads for tags.") nil [144888 144959])
            ("org-last-tags-completion-table" variable (:documentation "The last used completion table for tags.") nil [144960 145048])
            ("org-after-tags-change-hook" variable (:documentation "Hook that is run after the tags in a line have changed.") nil [145049 145148])
            ("org-properties" customgroup
               (:documentation "Options concerning properties in Org mode."
                :user-visible-flag t)
                nil [145150 145264])
            ("org-property-format" variable
               (:documentation "How property key/value pairs should be formatted by `indent-line'.
When `indent-line' hits a property definition, it will format the line
according to this format, mainly to make sure that the values are
lined-up with respect to each other."
                :default-value "%-10s %s")
                nil [145266 145594])
            ("org-properties-postprocess-alist" variable (:documentation "Alist of properties and functions to adjust inserted values.
Elements of this alist must be of the form

  ([string] [function])

where [string] must be a property name and [function] must be a
lambda expression: this lambda expression must take one argument,
the value to adjust, and return the new value as a string.

For example, this element will allow the property \"Remaining\"
to be updated wrt the relation between the \"Effort\" property
and the clock summary:

 ((\"Remaining\" (lambda(value)
                   (let ((clocksum (org-clock-sum-current-item))
                         (effort (org-duration-to-minutes
                                   (org-entry-get (point) \"Effort\"))))
                     (org-minutes-to-clocksum-string (- effort clocksum))))))") nil [145596 146565])
            ("org-use-property-inheritance" variable (:documentation "Non-nil means properties apply also for sublevels.

This setting is chiefly used during property searches.  Turning it on can
cause significant overhead when doing a search, which is why it is not
on by default.

When nil, only the properties directly given in the current entry count.
When t, every property is inherited.  The value may also be a list of
properties that should have inheritance, or a regular expression matching
properties that should be inherited.

However, note that some special properties use inheritance under special
circumstances (not in searches).  Examples are CATEGORY, ARCHIVE, COLUMNS,
and the properties ending in \"_ALL\" when they are used as descriptor
for valid values of a property.

Note for programmers:
When querying an entry with `org-entry-get',  you can control if inheritance
should be used.  By default, `org-entry-get' looks only at the local
properties.  You can request inheritance by setting the inherit argument
to t (to force inheritance) or to `selective' (to respect the setting
in this variable).") nil [146567 147873])
            ("org-property-inherit-p" function
               (:documentation "Return a non-nil value if PROPERTY should be inherited."
                :arguments ("property"))
                nil [147875 148345])
            ("org-columns-default-format" variable
               (:documentation "The default column format, if no other format has been defined.
This variable can be set on the per-file basis by inserting a line

#+COLUMNS: %25ITEM ....."
                :default-value "%25ITEM %TODO %3PRIORITY %TAGS")
                nil [148347 148620])
            ("org-columns-ellipses" variable
               (:documentation "The ellipses to be used when a field in column view is truncated.
When this is the empty string, as many characters as possible are shown,
but then there will be no visual indication that the field has been truncated.
When this is a string of length N, the last N characters of a truncated
field are replaced by this string.  If the column is narrower than the
ellipses string, only part of the ellipses string will be shown."
                :default-value "..")
                nil [148622 149130])
            ("org-global-properties-fixed" variable
               (:documentation "List of property/value pairs that can be inherited by any entry.

These are fixed values, for the preset properties.  The user variable
that can be used to add to this list is `org-global-properties'.

The entries in this list are cons cells where the car is a property
name and cdr is a string with the value.  If the value represents
multiple items like an \"_ALL\" property, separate the items by
spaces."
                :constant-flag t
                :default-value '(("VISIBILITY_ALL" . "folded children content all") ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto")))
                nil [149132 149705])
            ("org-global-properties" variable (:documentation "List of property/value pairs that can be inherited by any entry.

This list will be combined with the constant `org-global-properties-fixed'.

The entries in this list are cons cells where the car is a property
name and cdr is a string with the value.

You can set buffer-local values for the same purpose in the variable
`org-file-properties' this by adding lines like

#+PROPERTY: NAME VALUE") nil [149707 150244])
            ("defvar-local" code nil nil [150246 150433])
            ("org-agenda" customgroup
               (:documentation "Options concerning agenda views in Org mode."
                :user-visible-flag t)
                nil [150435 150543])
            ("defvar-local" code nil nil [150545 150877])
            ("put" code nil nil [150878 150960])
            ("org-agenda-files" variable (:documentation "The files to be used for agenda display.

If an entry is a directory, all files in that directory that are matched
by `org-agenda-file-regexp' will be part of the file list.

If the value of the variable is not a list but a single file name, then
the list of agenda files is actually stored and maintained in that file,
one agenda file per line.  In this file paths can be given relative to
`org-directory'.  Tilde expansion and environment variable substitution
are also made.

Entries may be added to this list with `\\[org-agenda-file-to-front]'
and removed with `\\[org-remove-file]'.") nil [150962 151745])
            ("org-agenda-file-regexp" variable
               (:documentation "Regular expression to match files for `org-agenda-files'.
If any element in the list in that variable contains a directory instead
of a normal file, all files in that directory that are matched by this
regular expression will be included."
                :default-value "\\`[^.].*\\.org\\'")
                nil [151747 152082])
            ("defvaralias" code nil nil [152084 152171])
            ("org-agenda-text-search-extra-files" variable (:documentation "List of extra files to be searched by text search commands.
These files will be searched in addition to the agenda files by the
commands `org-search-view' (`\\[org-agenda] s') and `org-occur-in-agenda-files'.
Note that these files will only be searched for text search commands,
not for the other agenda views like todo lists, tag searches or the weekly
agenda.  This variable is intended to list notes and possibly archive files
that should also be searched by these two commands.
In fact, if the first element in the list is the symbol `agenda-archives',
then all archive files of all agenda files will be added to the search
scope.") nil [152173 152997])
            ("org-agenda-skip-unavailable-files" variable (:documentation "Non-nil means to just skip non-reachable files in `org-agenda-files'.
A nil value means to remove them, after a query, from the list.") nil [152999 153224])
            ("org-calendar-to-agenda-key" variable
               (:documentation "The key to be installed in `calendar-mode-map' for switching to the agenda.
The command `org-calendar-goto-agenda' will be bound to this key.  The
default is the character `c' because then `c' can be used to switch back and
forth between agenda and calendar."
                :default-value [99])
                nil [153226 153567])
            ("org-calendar-insert-diary-entry-key" variable
               (:documentation "The key to be installed in `calendar-mode-map' for adding diary entries.
This option is irrelevant until `org-agenda-diary-file' has been configured
to point to an Org file.  When that is the case, the command
`org-agenda-diary-entry' will be bound to the key given here, by default
`i'.  In the calendar, `i' normally adds entries to `diary-file'.  So
if you want to continue doing this, you need to change this to a different
key."
                :default-value [105])
                nil [153569 154093])
            ("org-agenda-diary-file" variable
               (:documentation "File to which to add new entries with the `i' key in agenda and calendar.
When this is the symbol `diary-file', the functionality in the Emacs
calendar will be used to add entries to the `diary-file'.  But when this
points to a file, `org-agenda-diary-entry' will be used instead."
                :default-value 'diary-file)
                nil [154095 154571])
            ("eval-after-load" code nil nil [154573 154921])
            ("org-latex" customgroup
               (:documentation "Options for embedding LaTeX code into Org mode."
                :user-visible-flag t)
                nil [154923 155032])
            ("org-format-latex-options" variable
               (:documentation "Options for creating images from LaTeX fragments.
This is a property list with the following properties:
:foreground  the foreground color for images embedded in Emacs, e.g. \"Black\".
             `default' means use the foreground of the default face.
             `auto' means use the foreground from the text face.
:background  the background color, or \"Transparent\".
             `default' means use the background of the default face.
             `auto' means use the background from the text face.
:scale       a scaling factor for the size of the images, to get more pixels
:html-foreground, :html-background, :html-scale
             the same numbers for HTML export.
:matchers    a list indicating which matchers should be used to
             find LaTeX fragments.  Valid members of this list are:
             \"begin\" find environments
             \"$1\"    find single characters surrounded by $.$
             \"$\"     find math expressions surrounded by $...$
             \"$$\"    find math expressions surrounded by $$....$$
             \"\\(\"    find math expressions surrounded by \\(...\\)
             \"\\=\\[\"    find math expressions surrounded by \\=\\[...\\]"
                :default-value '(:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
                nil [155034 156483])
            ("org-format-latex-signal-error" variable
               (:documentation "Non-nil means signal an error when image creation of LaTeX snippets fails.
When nil, just push out a message."
                :default-value t)
                nil [156485 156697])
            ("org-latex-to-mathml-jar-file" variable (:documentation "Value of\"%j\" in `org-latex-to-mathml-convert-command'.
Use this to specify additional executable file say a jar file.

When using MathToWeb as the converter, specify the full-path to
your mathtoweb.jar file.") nil [156699 157080])
            ("org-latex-to-mathml-convert-command" variable (:documentation "Command to convert LaTeX fragments to MathML.
Replace format-specifiers in the command as noted below and use
`shell-command' to convert LaTeX to MathML.
%j:     Executable file in fully expanded form as specified by
        `org-latex-to-mathml-jar-file'.
%I:     Input LaTeX file in fully expanded form.
%i:     The latex fragment to be converted.
%o:     Output MathML file.

This command is used by `org-create-math-formula'.

When using MathToWeb as the converter, set this option to
\"java -jar %j -unicode -force -df %o %I\".

When using LaTeXML set this option to
\"latexmlmath \"%i\" --presentationmathml=%o\".") nil [157082 157875])
            ("org-preview-latex-default-process" variable
               (:documentation "The default process to convert LaTeX fragments to image files.
All available processes and theirs documents can be found in
`org-preview-latex-process-alist', which see."
                :default-value 'dvipng)
                nil [157877 158192])
            ("org-preview-latex-process-alist" variable
               (:documentation "Definitions of external processes for LaTeX previewing.
Org mode can use some external commands to generate TeX snippet's images for
previewing or inserting into HTML files, e.g., \"dvipng\".  This variable tells
`org-create-formula-image' how to call them.

The value is an alist with the pattern (NAME . PROPERTIES).  NAME is a symbol.
PROPERTIES accepts the following attributes:

  :programs           list of strings, required programs.
  :description        string, describe the process.
  :message            string, message it when required programs cannot be found.
  :image-input-type   string, input file type of image converter (e.g., \"dvi\").
  :image-output-type  string, output file type of image converter (e.g., \"png\").
  :use-xcolor         boolean, when non-nil, LaTeX \"xcolor\" macro is used to
                      deal with background and foreground color of image.
                      Otherwise, dvipng style background and foreground color
                      format are generated.  You may then refer to them in
                      command options with \"%F\" and \"%B\".
  :image-size-adjust  cons of numbers, the car element is used to adjust LaTeX
                      image size showed in buffer and the cdr element is for
                      HTML file.  This option is only useful for process
                      developers, users should use variable
                      `org-format-latex-options' instead.
  :post-clean         list of strings, files matched are to be cleaned up once
                      the image is generated.  When nil, the files with \".dvi\",
                      \".xdv\", \".pdf\", \".tex\", \".aux\", \".log\", \".svg\",
                      \".png\", \".jpg\", \".jpeg\" or \".out\" extension will
                      be cleaned up.
  :latex-header       list of strings, the LaTeX header of the snippet file.
                      When nil, the fallback value is used instead, which is
                      controlled by `org-format-latex-header',
                      `org-latex-default-packages-alist' and
                      `org-latex-packages-alist', which see.
  :latex-compiler     list of LaTeX commands, as strings.  Each of them is given
                      to the shell.  Place-holders \"%t\", \"%b\" and \"%o\" are
                      replaced with values defined below.
  :image-converter    list of image converter commands strings.  Each of them is
                      given to the shell and supports any of the following
                      place-holders defined below.

Place-holders used by `:image-converter' and `:latex-compiler':

  %f    input file name
  %b    base name of input file
  %o    base directory of input file
  %O    absolute output file name

Place-holders only used by `:image-converter':

  %F    foreground of image
  %B    background of image
  %D    dpi, which is used to adjust image size by some processing commands.
  %S    the image size scale ratio, which is used to adjust image size by some
        processing commands."
                :default-value '((dvipng :programs ("latex" "dvipng") :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f")) (dvisvgm :programs ("latex" "dvisvgm") :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "dvi" :image-output-type "svg" :image-size-adjust (1.7 . 1.5) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvisvgm %f -n -b min -c %S -o %O")) (imagemagick :programs ("latex" "convert") :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("pdflatex -interaction nonstopmode -output-directory %o %f") :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))
                nil [158194 162679])
            ("org-preview-latex-image-directory" variable
               (:documentation "Path to store latex preview images.
A relative path here creates many directories relative to the
processed Org files paths.  An absolute path puts all preview
images at the same place."
                :default-value "ltximg/")
                nil [162681 163014])
            ("org-format-latex-mathml-available-p" function (:documentation "Return t if `org-latex-to-mathml-convert-command' is usable.") nil [163016 163517])
            ("org-format-latex-header" variable
               (:documentation "The document header used for processing LaTeX fragments.
It is imperative that this header make sure that no page number
appears on the page.  The package defined in the variables
`org-latex-default-packages-alist' and `org-latex-packages-alist'
will either replace the placeholder \"[PACKAGES]\" in this
header, or they will be appended."
                :default-value "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")
                nil [163519 164581])
            ("org-set-packages-alist" function
               (:documentation "Set the packages alist and make sure it has 3 elements per entry."
                :arguments ("var" "val"))
                nil [164583 164823])
            ("org-get-packages-alist" function
               (:documentation "Get the packages alist and make sure it has 3 elements per entry."
                :arguments ("var"))
                nil [164825 165059])
            ("org-latex-default-packages-alist" variable
               (:documentation "Alist of default packages to be inserted in the header.

Change this only if one of the packages here causes an
incompatibility with another package you are using.

The packages in this list are needed by one part or another of
Org mode to function properly:

- inputenc, fontenc:  for basic font and character selection
- graphicx: for including images
- grffile: allow periods and spaces in graphics file names
- longtable: For multipage tables
- wrapfig: for figure placement
- rotating: for sideways figures and tables
- ulem: for underline and strike-through
- amsmath: for subscript and superscript and math environments
- textcomp, amssymb: for various symbols used
  for interpreting the entities in `org-entities'.  You can skip
  some of these packages if you don't use any of their symbols.
- capt-of: for captions outside of floats
- hyperref: for cross references

Therefore you should not modify this variable unless you know
what you are doing.  The one reason to change it anyway is that
you might be loading some other package that conflicts with one
of the default packages.  Each element is either a cell or
a string.

A cell is of the format

  (\"options\" \"package\" SNIPPET-FLAG COMPILERS)

If SNIPPET-FLAG is non-nil, the package also needs to be included
when compiling LaTeX snippets into images for inclusion into
non-LaTeX output.  COMPILERS is a list of compilers that should
include the package, see `org-latex-compiler'.  If the document
compiler is not in the list, and the list is non-nil, the package
will not be inserted in the final document.

A string will be inserted as-is in the header of the document."
                :default-value '(("AUTO" "inputenc" t ("pdflatex")) ("T1" "fontenc" t ("pdflatex")) ("" "graphicx" t) ("" "grffile" t) ("" "longtable" nil) ("" "wrapfig" nil) ("" "rotating" nil) ("normalem" "ulem" t) ("" "amsmath" t) ("" "textcomp" t) ("" "amssymb" t) ("" "capt-of" nil) ("" "hyperref" nil)))
                nil [165061 167586])
            ("org-latex-packages-alist" variable (:documentation "Alist of packages to be inserted in every LaTeX header.

These will be inserted after `org-latex-default-packages-alist'.
Each element is either a cell or a string.

A cell is of the format:

    (\"options\" \"package\" SNIPPET-FLAG)

SNIPPET-FLAG, when non-nil, indicates that this package is also
needed when turning LaTeX snippets into images for inclusion into
non-LaTeX output.

A string will be inserted as-is in the header of the document.

Make sure that you only list packages here which:

  - you want in every file;
  - do not conflict with the setup in `org-format-latex-header';
  - do not conflict with the default packages in
    `org-latex-default-packages-alist'.") nil [167588 168610])
            ("org-appearance" customgroup
               (:documentation "Settings for Org mode appearance."
                :user-visible-flag t)
                nil [168612 168717])
            ("org-level-color-stars-only" variable (:documentation "Non-nil means fontify only the stars in each headline.
When nil, the entire headline is fontified.
Changing it requires restart of `font-lock-mode' to become effective
also in regions already fontified.") nil [168719 169010])
            ("org-hide-leading-stars" variable (:documentation "Non-nil means hide the first N-1 stars in a headline.
This works by using the face `org-hide' for these stars.  This
face is white for a light background, and black for a dark
background.  You may have to customize the face `org-hide' to
make this work.
Changing it requires restart of `font-lock-mode' to become effective
also in regions already fontified.
You may also set this on a per-file basis by adding one of the following
lines to the buffer:

   #+STARTUP: hidestars
   #+STARTUP: showstars") nil [169012 169597])
            ("org-hidden-keywords" variable (:documentation "List of symbols corresponding to keywords to be hidden in the Org buffer.
For example, a value \\='(title) for this list makes the document's title
appear in the buffer without the initial \"#+TITLE:\" part.") nil [169599 170041])
            ("org-custom-properties" variable (:documentation "List of properties (as strings) with a special meaning.
The default use of these custom properties is to let the user
hide them with `org-toggle-custom-properties-visibility'.") nil [170043 170376])
            ("org-fontify-done-headline" variable (:documentation "Non-nil means change the face of a headline if it is marked DONE.
Normally, only the TODO/DONE keyword indicates the state of a headline.
When this is non-nil, the headline after the keyword is set to the
`org-headline-done' as an additional indication.") nil [170378 170719])
            ("org-fontify-emphasized-text" variable
               (:documentation "Non-nil means fontify *bold*, /italic/ and _underlined_ text.
Changing this variable requires a restart of Emacs to take effect."
                :default-value t)
                nil [170721 170937])
            ("org-fontify-whole-heading-line" variable (:documentation "Non-nil means fontify the whole line for headings.
This is useful when setting a background color for the
org-level-* faces.") nil [170939 171156])
            ("org-highlight-latex-and-related" variable (:documentation "Non-nil means highlight LaTeX related syntax in the buffer.
When non nil, the value should be a list containing any of the
following symbols:
  `latex'    Highlight LaTeX snippets and environments.
  `script'   Highlight subscript and superscript.
  `entities' Highlight entities.") nil [171158 171817])
            ("org-hide-emphasis-markers" variable (:documentation "Non-nil mean font-lock should hide the emphasis marker characters.") nil [171819 171973])
            ("org-hide-macro-markers" variable (:documentation "Non-nil mean font-lock should hide the brackets marking macro calls.") nil [171975 172128])
            ("org-pretty-entities" variable (:documentation "Non-nil means show entities as UTF8 characters.
When nil, the \\name form remains in the buffer.") nil [172130 172326])
            ("org-pretty-entities-include-sub-superscripts" variable
               (:documentation "Non-nil means, pretty entity display includes formatting sub/superscripts."
                :default-value t)
                nil [172328 172525])
            ("org-emph-re" variable (:documentation "Regular expression for matching emphasis.
After a match, the match groups contain these elements:
0  The match of the full regular expression, including the characters
   before and after the proper match
1  The character before the proper match, or empty at beginning of line
2  The proper match, including the leading and trailing markers
3  The leading marker like * or /, indicating the type of highlighting
4  The text between the emphasis markers, not including the markers
5  The character after the match, empty at the end of a line") nil [172527 173096])
            ("org-verbatim-re" variable (:documentation "Regular expression for matching verbatim text.") nil [173098 173177])
            ("org-emphasis-regexp-components" variable nil nil [173179 173218])
            ("org-emphasis-alist" variable nil nil [173240 173267])
            ("org-set-emph-re" function
               (:documentation "Set variable and compute the emphasis regular expression."
                :arguments ("var" "val"))
                nil [173289 174016])
            ("org-emphasis-regexp-components" variable
               (:documentation "Components used to build the regular expression for emphasis.
This is a list with five entries.  Terminology:  In an emphasis string
like \" *strong word* \", we call the initial space PREMATCH, the final
space POSTMATCH, the stars MARKERS, \"s\" and \"d\" are BORDER characters
and \"trong wor\" is the body.  The different components in this variable
specify what is allowed/forbidden in each part:

pre          Chars allowed as prematch.  Beginning of line will be allowed too.
post         Chars allowed as postmatch.  End of line will be allowed too.
border       The chars *forbidden* as border characters.
body-regexp  A regexp like \".\" to match a body character.  Don't use
             non-shy groups here, and don't allow newline here.
newline      The maximum number of newlines allowed in an emphasis exp.

You need to reload Org or to restart Emacs after customizing this."
                :default-value '("- 	('\"{" "- 	.,:!?;'\")}\\[" " 	
" "." 1))
                nil [174204 175190])
            ("org-emphasis-alist" variable
               (:documentation "Alist of characters and faces to emphasize text.
Text starting and ending with a special character will be emphasized,
for example *bold*, _underlined_ and /italic/.  This variable sets the
marker characters and the face to be used by font-lock for highlighting
in Org buffers.

You need to reload Org or to restart Emacs after customizing this."
                :default-value '(("*" bold) ("/" italic) ("_" underline) ("=" org-verbatim verbatim) ("~" org-code verbatim) ("+" (:strike-through t))))
                nil [175192 175997])
            ("org-protecting-blocks" variable
               (:documentation "Blocks that contain text that is quoted, i.e. not processed as Org syntax.
This is needed for font-lock setup."
                :default-value '("src" "example" "export"))
                nil [175999 176172])
            ("mark-active" variable nil nil [176267 176287])
            ("declare-function" code nil nil [176309 176381])
            ("declare-function" code nil nil [176382 176438])
            ("declare-function" code nil nil [176439 176494])
            ("declare-function" code nil nil [176495 176547])
            ("declare-function" code nil nil [176548 176610])
            ("declare-function" code nil nil [176611 176671])
            ("declare-function" code nil nil [176672 176730])
            ("declare-function" code nil nil [176731 176778])
            ("declare-function" code nil nil [176779 176873])
            ("declare-function" code nil nil [176874 177007])
            ("declare-function" code nil nil [177008 177122])
            ("declare-function" code nil nil [177123 177239])
            ("declare-function" code nil nil [177240 177308])
            ("declare-function" code nil nil [177309 177441])
            ("declare-function" code nil nil [177442 177498])
            ("declare-function" code nil nil [177499 177568])
            ("declare-function" code nil nil [177569 177660])
            ("declare-function" code nil nil [177661 177741])
            ("declare-function" code nil nil [177742 177792])
            ("declare-function" code nil nil [177793 177864])
            ("declare-function" code nil nil [177865 177941])
            ("declare-function" code nil nil [177942 178005])
            ("declare-function" code nil nil [178006 178074])
            ("declare-function" code nil nil [178075 178137])
            ("declare-function" code nil nil [178138 178201])
            ("declare-function" code nil nil [178202 178272])
            ("declare-function" code nil nil [178273 178339])
            ("declare-function" code nil nil [178340 178398])
            ("declare-function" code nil nil [178399 178470])
            ("align-mode-rules-list" variable nil nil [178472 178502])
            ("calc-embedded-close-formula" variable nil nil [178503 178539])
            ("calc-embedded-open-formula" variable nil nil [178540 178575])
            ("calc-embedded-open-mode" variable nil nil [178576 178608])
            ("font-lock-unfontify-region-function" variable nil nil [178609 178653])
            ("iswitchb-temp-buflist" variable nil nil [178654 178684])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [178685 178735])
            ("remember-data-file" variable nil nil [178736 178763])
            ("texmathp-why" variable nil nil [178764 178785])
            ("turn-on-orgtbl" function (:documentation "Unconditionally turn on `orgtbl-mode'.") nil [178802 178911])
            ("org-at-table-p" function
               (:documentation "Non-nil if the cursor is inside an Org table.
If TABLE-TYPE is non-nil, also check for table.el-type tables."
                :arguments ("table-type"))
                nil [178913 179326])
            ("org-at-table.el-p" function (:documentation "Non-nil when point is at a table.el table.") nil [179328 179595])
            ("org-at-table-hline-p" function (:documentation "Non-nil when point is inside a hline in a table.
Assume point is already in a table.") nil [179597 179759])
            ("org-table-map-tables" function
               (:documentation "Apply FUNCTION to the start of all tables in the buffer."
                :arguments ("function" "quietly"))
                nil [179761 180530])
            ("declare-function" code nil nil [180532 180613])
            ("declare-function" code nil nil [180614 180674])
            ("declare-function" code nil nil [180675 180778])
            ("org-at-TBLFM-p" function
               (:documentation "Non-nil when point (or POS) is in #+TBLFM line."
                :arguments ("pos"))
                nil [180780 181071])
            ("org-clock-start-time" variable nil nil [181073 181102])
            ("org-clock-marker" variable
               (:documentation "Marker recording the last clock-in."
                :default-value (make-marker))
                nil [181103 181182])
            ("org-clock-hd-marker" variable
               (:documentation "Marker recording the last clock-in, but the headline position."
                :default-value (make-marker))
                nil [181183 181292])
            ("org-clock-heading" variable (:documentation "The heading of the current clock entry.") nil [181293 181366])
            ("org-clock-is-active" function (:documentation "Return the buffer where the clock is currently running.
Return nil if no clock is running.") nil [181367 181527])
            ("org-check-running-clock" function (:documentation "Check if the current buffer contains the running clock.
If yes, offer to stop it and to save the buffer with the changes.") nil [181529 181942])
            ("org-clocktable-try-shift" function
               (:documentation "Check if this line starts a clock table, if yes, shift the time block."
                :arguments ("dir" "n"))
                nil [181944 182157])
            ("org-clock-persistence-insinuate" function (:documentation "Set up hooks for clock persistence.") nil [182174 182369])
            ("org-archive" customgroup
               (:documentation "Options concerning archiving in Org mode."
                :user-visible-flag t)
                nil [182371 182488])
            ("org-archive-location" variable
               (:documentation "The location where subtrees should be archived.

The value of this variable is a string, consisting of two parts,
separated by a double-colon.  The first part is a filename and
the second part is a headline.

When the filename is omitted, archiving happens in the same file.
%s in the filename will be replaced by the current file
name (without the directory part).  Archiving to a different file
is useful to keep archived entries from contributing to the
Org Agenda.

The archived entries will be filed as subtrees of the specified
headline.  When the headline is omitted, the subtrees are simply
filed away at the end of the file, as top-level entries.  Also in
the heading you can use %s to represent the file name, this can be
useful when using the same archive for a number of different files.

Here are a few examples:
\"%s_archive::\"
	If the current file is Projects.org, archive in file
	Projects.org_archive, as top-level trees.  This is the default.

\"::* Archived Tasks\"
	Archive in the current file, under the top-level headline
	\"* Archived Tasks\".

\"~/org/archive.org::\"
	Archive in file ~/org/archive.org (absolute path), as top-level trees.

\"~/org/archive.org::* From %s\"
	Archive in file ~/org/archive.org (absolute path), under headlines
        \"From FILENAME\" where file name is the current file name.

\"~/org/datetree.org::datetree/* Finished Tasks\"
        The \"datetree/\" string is special, signifying to archive
        items to the datetree.  Items are placed in either the CLOSED
        date of the item, or the current date if there is no CLOSED date.
        The heading will be a subentry to the current date.  There doesn't
        need to be a heading, but there always needs to be a slash after
        datetree.  For example, to store archived items directly in the
        datetree, use \"~/org/datetree.org::datetree/\".

\"basement::** Finished Tasks\"
	Archive in file ./basement (relative path), as level 3 trees
	below the level 2 heading \"** Finished Tasks\".

You may set this option on a per-file basis by adding to the buffer a
line like

#+ARCHIVE: basement::** Finished Tasks

You may also define it locally for a subtree by setting an ARCHIVE property
in the entry.  If such a property is found in an entry, or anywhere up
the hierarchy, it will be used."
                :default-value "%s_archive::")
                nil [182490 184899])
            ("org-agenda-skip-archived-trees" variable
               (:documentation "Non-nil means the agenda will skip any items located in archived trees.
An archived tree is a tree marked with the tag ARCHIVE.  The use of this
variable is no longer recommended, you should leave it at the value t.
Instead, use the key `v' to cycle the archives-mode in the agenda."
                :default-value t)
                nil [184901 185297])
            ("org-columns-skip-archived-trees" variable
               (:documentation "Non-nil means ignore archived trees when creating column view."
                :default-value t)
                nil [185299 185475])
            ("org-cycle-open-archived-trees" variable (:documentation "Non-nil means `org-cycle' will open archived trees.
An archived tree is a tree marked with the tag ARCHIVE.
When nil, archived trees will stay folded.  You can still open them with
normal outline commands like `show-all', but not with the cycling commands.") nil [185477 185842])
            ("org-sparse-tree-open-archived-trees" variable (:documentation "Non-nil means sparse tree construction shows matches in archived trees.
When nil, matches in these trees are highlighted, but the trees are kept in
collapsed state.") nil [185844 186130])
            ("org-sparse-tree-default-date-type" variable (:documentation "The default date type when building a sparse tree.
When this is nil, a date is a scheduled or a deadline timestamp.
Otherwise, these types are allowed:

        all: all timestamps
     active: only active timestamps (<...>)
   inactive: only inactive timestamps ([...])
  scheduled: only scheduled timestamps
   deadline: only deadline timestamps") nil [186132 186962])
            ("org-cycle-hide-archived-subtrees" function
               (:documentation "Re-hide all archived subtrees after a visibility state change.
STATE should be one of the symbols listed in the docstring of
`org-cycle-hook'."
                :arguments ("state"))
                nil [186964 187714])
            ("org-force-cycle-archived" function
               (:documentation "Cycle subtree even if it is archived."
                :user-visible-flag t)
                nil [187716 187922])
            ("org-hide-archived-subtrees" function
               (:documentation "Re-hide all archived subtrees after a visibility state change."
                :arguments ("beg" "end"))
                nil [187924 188419])
            ("declare-function" code nil nil [188421 188475])
            ("declare-function" code nil nil [188476 188539])
            ("org-flag-subtree" function (:arguments ("flag")) nil [188540 188733])
            ("defalias" code nil nil [188735 188798])
            ("declare-function" code nil nil [188829 188901])
            ("declare-function" code nil nil [188902 188965])
            ("declare-function" code nil nil [188987 189032])
            ("declare-function" code nil nil [189033 189082])
            ("declare-function" code nil nil [189083 189132])
            ("org-id-track-globally" variable nil nil [189133 189163])
            ("defvar-local" code nil nil [189235 189438])
            ("defvar-local" code nil nil [189440 189667])
            ("defvar-local" code nil nil [189669 189886])
            ("defvar-local" code nil nil [189888 190120])
            ("defvar-local" code nil nil [190122 190460])
            ("defvar-local" code nil nil [190462 190734])
            ("defvar-local" code nil nil [190736 190896])
            ("org-plain-time-of-day-regexp" variable
               (:documentation "Regular expression to match a plain time or time range.
Examples:  11:45 or 8am-13:15 or 2:45-2:45pm.  After a match, the following
groups carry important information:
0  the full match
1  the first time, range or not
8  the second time, if it is a range."
                :constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?"))
                nil [190898 191430])
            ("org-plain-time-extension-regexp" variable
               (:documentation "Regular expression to match a time range like 13:30+2:10 = 13:30-15:40.
Examples:  11:45 or 8am-13:15 or 2:45-2:45pm.  After a match, the following
groups carry important information:
0  the full match
7  hours of duration
9  minutes of duration"
                :constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?"))
                nil [191432 191880])
            ("org-stamp-time-of-day-regexp" variable
               (:documentation "Regular expression to match a timestamp time or time range.
After a match, the following groups carry important information:
0  the full match
1  date plus weekday, for back referencing to make sure both times are on the same day
2  the first time, range or not
4  the second time, if it is a range."
                :constant-flag t
                :default-value (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?"))
                nil [191882 192429])
            ("org-startup-options" variable
               (:documentation "Variable associated with STARTUP options for Org.
Each element is a list of three items: the startup options (as written
in the #+STARTUP line), the corresponding variable, and the value to set
this variable to if the option is found.  An optional forth element PUSH
means to push this value onto the list in the variable."
                :constant-flag t
                :default-value '(("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("showeverything" org-startup-folded showeverything) ("content" org-startup-folded content) ("indent" org-startup-indented t) ("noindent" org-startup-indented nil) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("inlineimages" org-startup-with-inline-images t) ("noinlineimages" org-startup-with-inline-images nil) ("latexpreview" org-startup-with-latex-preview t) ("nolatexpreview" org-startup-with-latex-preview nil) ("customtime" org-display-custom-times t) ("logdone" org-log-done time) ("lognotedone" org-log-done note) ("nologdone" org-log-done nil) ("lognoteclock-out" org-log-note-clock-out t) ("nolognoteclock-out" org-log-note-clock-out nil) ("logrepeat" org-log-repeat state) ("lognoterepeat" org-log-repeat note) ("logdrawer" org-log-into-drawer t) ("nologdrawer" org-log-into-drawer nil) ("logstatesreversed" org-log-states-order-reversed t) ("nologstatesreversed" org-log-states-order-reversed nil) ("nologrepeat" org-log-repeat nil) ("logreschedule" org-log-reschedule time) ("lognotereschedule" org-log-reschedule note) ("nologreschedule" org-log-reschedule nil) ("logredeadline" org-log-redeadline time) ("lognoteredeadline" org-log-redeadline note) ("nologredeadline" org-log-redeadline nil) ("logrefile" org-log-refile time) ("lognoterefile" org-log-refile note) ("nologrefile" org-log-refile nil) ("fninline" org-footnote-define-inline t) ("nofninline" org-footnote-define-inline nil) ("fnlocal" org-footnote-section nil) ("fnauto" org-footnote-auto-label t) ("fnprompt" org-footnote-auto-label nil) ("fnconfirm" org-footnote-auto-label confirm) ("fnplain" org-footnote-auto-label plain) ("fnadjust" org-footnote-auto-adjust t) ("nofnadjust" org-footnote-auto-adjust nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI) ("noptag" org-tag-persistent-alist nil) ("hideblocks" org-hide-block-startup t) ("nohideblocks" org-hide-block-startup nil) ("beamer" org-startup-with-beamer-mode t) ("entitiespretty" org-pretty-entities t) ("entitiesplain" org-pretty-entities nil)))
                nil [192431 195352])
            ("org-group-tags" variable
               (:documentation "When non-nil (the default), use group tags.
This can be turned on/off through `org-toggle-tags-groups'."
                :default-value t)
                nil [195354 195548])
            ("org-inhibit-startup" variable nil nil [195550 195582])
            ("org-toggle-tags-groups" function
               (:documentation "Toggle support for group tags.
Support for group tags is controlled by the option
`org-group-tags', which is non-nil by default."
                :user-visible-flag t)
                nil [195619 196102])
            ("org-tag-add-to-alist" function
               (:documentation "Append ALIST1 elements to ALIST2 if they are not there yet."
                :arguments ("alist1" "alist2"))
                nil [196104 196468])
            ("org-set-regexps-and-options" function
               (:documentation "Precompute regular expressions used in the current buffer.
When optional argument TAGS-ONLY is non-nil, only compute tags
related expressions."
                :arguments ("tags-only"))
                nil [196470 202892])
            ("org--setup-collect-keywords" function
               (:documentation "Return setup keywords values as an alist.

REGEXP matches a subset of setup keywords.  FILES is a list of
file names already visited.  It is used to avoid circular setup
files.  ALIST, when non-nil, is the alist computed so far.

Return value contains the following keys: `archive', `category',
`columns', `constants', `filetags', `link', `priorities',
`property', `scripts', `startup', `tags' and `todo'."
                :arguments ("regexp" "files" "alist"))
                nil [202894 207171])
            ("org-tag-string-to-alist" function
               (:documentation "Return tag alist associated to string S.
S is a value for TAGS keyword or produced with
`org-tag-alist-to-string'.  Return value is an alist suitable for
`org-tag-alist' or `org-tag-persistent-alist'."
                :arguments ("s"))
                nil [207173 208523])
            ("org-tag-alist-to-string" function
               (:documentation "Return tag string associated to ALIST.

ALIST is an alist, as defined in `org-tag-alist' or
`org-tag-persistent-alist', or produced with
`org-tag-string-to-alist'.

Return value is a string suitable as a value for \"TAGS\"
keyword.

When optional argument SKIP-KEY is non-nil, skip selection keys
next to tags."
                :arguments ("alist" "skip-key"))
                nil [208525 209344])
            ("org-tag-alist-to-groups" function
               (:documentation "Return group alist from tag ALIST.
ALIST is an alist, as defined in `org-tag-alist' or
`org-tag-persistent-alist', or produced with
`org-tag-string-to-alist'.  Return value is an alist following
the pattern (GROUP-TAG TAGS) where GROUP-TAG is the tag, as
a string, summarizing TAGS, as a list of strings."
                :arguments ("alist"))
                nil [209346 210212])
            ("org--file-cache" variable
               (:documentation "Hash table to store contents of files referenced via a URL.
This is the cache of file URLs read using `org-file-contents'."
                :default-value (make-hash-table :test #'equal))
                nil [210214 210397])
            ("org-reset-file-cache" function (:documentation "Reset the cache of files downloaded by `org-file-contents'.") nil [210399 210522])
            ("org-file-url-p" function
               (:documentation "Non-nil if FILE is a URL."
                :arguments ("file"))
                nil [210524 210641])
            ("org-file-contents" function
               (:documentation "Return the contents of FILE, as a string.

FILE can be a file name or URL.

If FILE is a URL, download the contents.  If the URL contents are
already cached in the `org--file-cache' hash table, the download step
is skipped.

If NOERROR is non-nil, ignore the error when unable to read the FILE
from file or URL.

If NOCACHE is non-nil, do a fresh fetch of FILE even if cached version
is available.  This option applies only if FILE is a URL."
                :arguments ("file" "noerror" "nocache"))
                nil [210643 212178])
            ("org-extract-log-state-settings" function
               (:documentation "Extract the log state setting from a TODO keyword string.
This will extract info from a string like \"WAIT(w@/!)\"."
                :arguments ("x"))
                nil [212180 212708])
            ("org-remove-keyword-keys" function
               (:documentation "Remove a pair of parenthesis at the end of each string in LIST."
                :arguments ("list"))
                nil [212710 212930])
            ("org-assign-fast-keys" function
               (:documentation "Assign fast keys to a keyword-key alist.
Respect keys that are already there."
                :arguments ("alist"))
                nil [212932 213577])
            ("org-window-configuration" variable (:documentation "Used in various places to store a window configuration.") nil [213622 213719])
            ("org-selected-window" variable (:documentation "Used in various places to store a window configuration.") nil [213720 213812])
            ("org-finish-function" variable (:documentation "Function to be called when `C-c C-c' is used.
This is for getting out of special buffers like capture.") nil [213813 213952])
            ("org-last-state" variable nil nil [213953 213976])
            ("org-entities" variable nil nil [214041 214062])
            ("org-struct-menu" variable nil nil [214097 214121])
            ("org-org-menu" variable nil nil [214122 214143])
            ("org-tbl-menu" variable nil nil [214144 214165])
            ("org-table-may-need-update" variable
               (:documentation "Indicates that a table might need an update.
This variable is set by `org-before-change-function'.
`org-table-align' sets it back to nil."
                :default-value t)
                nil [214273 214451])
            ("org-before-change-function" function
               (:documentation "Every change indicates that a table might need an update."
                :arguments ("_beg" "_end"))
                nil [214452 214597])
            ("org-mode-map" variable nil nil [214598 214619])
            ("org-inhibit-startup-visibility-stuff" variable nil nil [214620 214669])
            ("org-agenda-keep-modes" variable nil nil [214698 214732])
            ("org-inhibit-logging" variable nil nil [214766 214798])
            ("org-inhibit-blocking" variable nil nil [214834 214867])
            ("org-table-buffer-is-an" variable nil nil [214902 214937])
            ("bidi-paragraph-direction" variable nil nil [214939 214972])
            ("buffer-face-mode-face" variable nil nil [214973 215003])
            ("outline" include nil nil [215005 215023])
            ("time-date" include nil nil [215049 215069])
            ("unless" code nil nil [215070 215144])
            ("easymenu" include nil nil [215145 215164])
            ("easy-menu-add" function (:prototype-flag t) nil [215165 215201])
            ("overlay" include nil nil [215202 215220])
            ("org-entities" include nil nil [215297 215320])
            ("org-faces" include nil nil [215398 215418])
            ("org-list" include nil nil [215419 215438])
            ("org-pcomplete" include nil nil [215439 215463])
            ("org-src" include nil nil [215464 215482])
            ("org-footnote" include nil nil [215483 215506])
            ("org-macro" include nil nil [215507 215527])
            ("ob" include nil nil [215538 215551])
            ("define-derived-mode" code nil nil [215568 221457])
            ("add-to-list" code nil nil [221509 221725])
            ("org-mode-transpose-word-syntax-table" variable (:default-value (let ((st (make-syntax-table text-mode-syntax-table))) (dolist (c org-emphasis-alist st) (modify-syntax-entry (string-to-char (car c)) "w p" st)))) nil [221727 221931])
            ("when" code nil nil [221933 222055])
            ("org-find-invisible-foreground" function nil nil [222057 222538])
            ("org-current-time" function
               (:documentation "Current time, possibly rounded to ROUNDING-MINUTES.
When ROUNDING-MINUTES is not an integer, fall back on the car of
`org-time-stamp-rounding-minutes'.  When PAST is non-nil, ensure
the rounding returns a past time."
                :arguments ("rounding-minutes" "past"))
                nil [222540 223261])
            ("org-today" function (:documentation "Return today date, considering `org-extend-today-until'.") nil [223263 223442])
            ("org-mouse-map" variable (:default-value (make-sparse-keymap)) nil [223492 223535])
            ("org-defkey" code nil nil [223536 223591])
            ("org-defkey" code nil nil [223592 223652])
            ("when" code nil nil [223653 223739])
            ("when" code nil nil [223740 223878])
            ("font-lock" include nil nil [223880 223900])
            ("org-non-link-chars" variable
               (:constant-flag t
                :default-value "]	
<>")
                nil [223902 223943])
            ("org-link-types-re" variable (:documentation "Matches a link that has a url-like prefix like \"http:\"") nil [223944 224035])
            ("org-link-re-with-space" variable (:documentation "Matches a link with spaces, optional angular brackets around it.") nil [224036 224140])
            ("org-link-re-with-space2" variable (:documentation "Matches a link with spaces, optional angular brackets around it.") nil [224141 224246])
            ("org-link-re-with-space3" variable (:documentation "Matches a link with spaces, only for internal part in bracket links.") nil [224247 224356])
            ("org-angle-link-re" variable (:documentation "Matches link with angular brackets, spaces are allowed.") nil [224357 224447])
            ("org-plain-link-re" variable (:documentation "Matches plain link, without spaces.") nil [224448 224518])
            ("org-bracket-link-regexp" variable (:documentation "Matches a link in double brackets.") nil [224519 224594])
            ("org-bracket-link-analytic-regexp" variable (:documentation "Regular expression used to analyze links.
Here is what the match groups contain after a match:
1: http:
2: http
3: path
4: [desc]
5: desc") nil [224595 224782])
            ("org-bracket-link-analytic-regexp++" variable (:documentation "Like `org-bracket-link-analytic-regexp', but include coderef internal type.") nil [224783 224910])
            ("org-any-link-re" variable (:documentation "Regular expression matching any link.") nil [224911 224981])
            ("org-match-sexp-depth" variable
               (:documentation "Number of stacked braces for sub/superscript matching."
                :constant-flag t
                :default-value 3)
                nil [224983 225075])
            ("org-create-multibrace-regexp" function
               (:documentation "Create a regular expression which will match a balanced sexp.
Opening delimiter is LEFT, and closing delimiter is RIGHT, both given
as single character strings.
The regexp returned will match the entire expression including the
delimiters.  It will also define a single group which contains the
match except for the outermost delimiters.  The maximum depth of
stacked delimiters is N.  Escaping delimiters is not possible."
                :arguments ("left" "right" "n"))
                nil [225077 225878])
            ("org-match-substring-regexp" variable
               (:documentation "The regular expression matching a sub- or superscript."
                :constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(?:" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(?:" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(?:\\*\\|[+-]?[[:alnum:].,\\]*[[:alnum:]]\\)\\)"))
                nil [225880 226243])
            ("org-match-substring-with-braces-regexp" variable
               (:documentation "The regular expression matching a sub- or superscript, forcing braces."
                :constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)"))
                nil [226245 226481])
            ("org-make-link-regexps" function (:documentation "Update the link regular expressions.
This should be called after the variable `org-link-parameters' has changed.") nil [226483 228044])
            ("org-make-link-regexps" code nil nil [228046 228069])
            ("org-emph-face" variable nil nil [228071 228097])
            ("org-do-emphasis-faces" function
               (:documentation "Run through the buffer and emphasize strings."
                :arguments ("limit"))
                nil [228099 229963])
            ("org-emphasize" function
               (:documentation "Insert or change an emphasis, i.e. a font like bold or italic.
If there is an active region, change that region to a new emphasis.
If there is no region, just insert the marker characters and position
the cursor between them.
CHAR should be the marker character.  If it is a space, it means to
remove the emphasis of the selected region.
If CHAR is not given (for example in an interactive call) it will be
prompted for."
                :user-visible-flag t
                :arguments ("char"))
                nil [229965 231647])
            ("org-nonsticky-props" variable
               (:constant-flag t
                :default-value '(mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link))
                nil [231649 231772])
            ("org-rear-nonsticky-at" function (:arguments ("pos")) nil [231774 231892])
            ("org-activate-links" function
               (:documentation "Add link properties to links.
This includes angle, plain, and bracket links."
                :arguments ("limit"))
                nil [231894 234569])
            ("org-activate-code" function (:arguments ("limit")) nil [234571 234862])
            ("org-src-fontify-natively" variable
               (:documentation "When non-nil, fontify code in code blocks.
See also the `org-block' face."
                :default-value t)
                nil [234864 235094])
            ("org-allow-promoting-top-level-subtree" variable (:documentation "When non-nil, allow promoting a top level subtree.
The leading star of the top level headline will be replaced
by a #.") nil [235096 235332])
            ("org-fontify-meta-lines-and-blocks" function (:arguments ("limit")) nil [235334 235571])
            ("org-fontify-meta-lines-and-blocks-1" function
               (:documentation "Fontify #+ lines and blocks."
                :arguments ("limit"))
                nil [235573 239813])
            ("org-fontify-drawers" function
               (:documentation "Fontify drawers."
                :arguments ("limit"))
                nil [239815 240124])
            ("org-fontify-macros" function
               (:documentation "Fontify macros."
                :arguments ("limit"))
                nil [240126 240802])
            ("org-activate-footnote-links" function
               (:documentation "Add text properties for footnotes."
                :arguments ("limit"))
                nil [240804 241548])
            ("org-activate-dates" function
               (:documentation "Add text properties for dates."
                :arguments ("limit"))
                nil [241550 242244])
            ("defvar-local" code nil nil [242246 242348])
            ("org-target-regexp" variable
               (:documentation "Regular expression matching a link target."
                :constant-flag t
                :default-value (let ((border "[^<>
 	]")) (format "<<\\(%s\\|%s[^<>
]*%s\\)>>" border border border)))
                nil [242350 242538])
            ("org-radio-target-regexp" variable
               (:documentation "Regular expression matching a radio target."
                :constant-flag t
                :default-value (format "<%s>" org-target-regexp))
                nil [242540 242656])
            ("org-any-target-regexp" variable
               (:documentation "Regular expression matching any target."
                :constant-flag t
                :default-value (format "%s\\|%s" org-radio-target-regexp org-target-regexp))
                nil [242658 242797])
            ("org-activate-target-links" function
               (:documentation "Add text properties for target matches."
                :arguments ("limit"))
                nil [242799 243312])
            ("org-update-radio-target-regexp" function
               (:documentation "Find all radio targets in this file and update the regular expression.
Also refresh fontification if needed."
                :user-visible-flag t)
                nil [243314 244911])
            ("org-hide-wide-columns" function (:arguments ("limit")) nil [244913 245208])
            ("org-latex-and-related-regexp" variable (:documentation "Regular expression for highlighting LaTeX, entities and sub/superscript.") nil [245210 245328])
            ("org-compute-latex-and-related-regexp" function (:documentation "Compute regular expression for LaTeX, entities and sub/superscript.
Result depends on variable `org-highlight-latex-and-related'.") nil [245330 246315])
            ("org-do-latex-and-related" function
               (:documentation "Highlight LaTeX snippets and environments, entities and sub/superscript.
LIMIT bounds the search for syntax to highlight.  Stop at first
highlighted object, if any.  Return t if some highlighting was
done, nil otherwise."
                :arguments ("limit"))
                nil [246317 247300])
            ("org-restart-font-lock" function (:documentation "Restart `font-lock-mode', to force refontification.") nil [247302 247492])
            ("org-activate-tags" function (:arguments ("limit")) nil [247494 247859])
            ("org-outline-level" function (:documentation "Compute the outline level of the heading at point.

If this is called at a normal headline, the level is the number
of stars.  Use `org-reduced-level' to remove the effect of
`org-odd-levels'.  Unlike to `org-current-level', this function
takes into consideration inlinetasks.") nil [247861 248327])
            ("org-font-lock-keywords" variable nil nil [248329 248364])
            ("org-re-property" function
               (:documentation "Return a regexp matching a PROPERTY line.

When optional argument LITERAL is non-nil, do not quote PROPERTY.
This is useful when PROPERTY is a regexp.  When ALLOW-NULL is
non-nil, match properties even without a value.

Match group 3 is set to the value when it exists.  If there is no
value and ALLOW-NULL is non-nil, it is set to the empty string.

With optional argument VALUE, match only property lines with
that value; in this case, ALLOW-NULL is ignored.  VALUE is quoted
unless LITERAL is non-nil."
                :arguments ("property" "literal" "allow-null" "value"))
                nil [248366 249310])
            ("org-property-re" variable
               (:documentation "Regular expression matching a property line.
There are four matching groups:
1: :PROPKEY: including the leading and trailing colon,
2: PROPKEY without the leading and trailing colon,
3: PROPVAL without leading or trailing spaces,
4: the indentation of the current line,
5: trailing whitespace."
                :constant-flag t
                :default-value (org-re-property "\\S-+" 'literal t))
                nil [249312 249675])
            ("org-font-lock-hook" variable (:documentation "Functions to be called for special font lock stuff.") nil [249677 249764])
            ("org-font-lock-extra-keywords" variable nil nil [249766 249807])
            ("org-font-lock-set-keywords-hook" variable (:documentation "Functions that can manipulate `org-font-lock-extra-keywords'.
This is called after `org-font-lock-extra-keywords' is defined, but before
it is installed to be used by font lock.  This can be useful if something
needs to be inserted at a specific position in the font-lock sequence.") nil [249830 250160])
            ("org-font-lock-hook" function
               (:documentation "Run `org-font-lock-hook' within LIMIT."
                :arguments ("limit"))
                nil [250162 250288])
            ("org-set-font-lock-defaults" function (:documentation "Set font lock defaults for the current buffer.") nil [250290 254312])
            ("org-toggle-pretty-entities" function
               (:documentation "Toggle the composition display of entities as UTF8 characters."
                :user-visible-flag t)
                nil [254314 254757])
            ("defvar-local" code nil nil [254759 254857])
            ("org-toggle-custom-properties-visibility" function
               (:documentation "Display or hide properties in `org-custom-properties'."
                :user-visible-flag t)
                nil [254859 256101])
            ("org-fontify-entities" function
               (:documentation "Find an entity to fontify."
                :arguments ("limit"))
                nil [256103 256987])
            ("org-fontify-like-in-org-mode" function
               (:documentation "Fontify string S like in Org mode."
                :arguments ("s" "odd-levels"))
                nil [256989 257238])
            ("org-m" variable nil nil [257240 257258])
            ("org-l" variable nil nil [257259 257277])
            ("org-f" variable nil nil [257278 257296])
            ("org-get-level-face" function
               (:documentation "Get the right face for match N in font-lock matching of headlines."
                :arguments ("n"))
                nil [257297 257825])
            ("org-face-from-face-or-color" function
               (:documentation "Create a face list that inherits INHERIT, but sets the foreground color.
When FACE-OR-COLOR is not a string, just return it."
                :arguments ("context" "inherit" "face-or-color"))
                nil [257827 258174])
            ("org-get-todo-face" function
               (:documentation "Get the right face for a TODO keyword KWD.
If KWD is a number, get the corresponding match group."
                :arguments ("kwd"))
                nil [258176 258532])
            ("org-get-priority-face" function
               (:documentation "Get the right face for PRIORITY.
PRIORITY is a character."
                :arguments ("priority"))
                nil [258534 258765])
            ("org-get-tag-face" function
               (:documentation "Get the right face for TAG.
If TAG is a number, get the corresponding match group."
                :arguments ("tag"))
                nil [258767 259041])
            ("org-font-lock-add-priority-faces" function
               (:documentation "Add the special priority faces."
                :arguments ("limit"))
                nil [259043 259365])
            ("org-font-lock-add-tag-faces" function
               (:documentation "Add the special tag faces."
                :arguments ("limit"))
                nil [259367 259716])
            ("org-unfontify-region" function
               (:documentation "Remove fontification and activation overlays from links."
                :arguments ("beg" "end" "_maybe_loudly"))
                nil [259718 260288])
            ("org-script-display" variable
               (:documentation "Display properties for showing superscripts and subscripts."
                :constant-flag t
                :default-value '(((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)) ((raise -0.5)) ((raise 0.5))))
                nil [260290 260484])
            ("org-remove-font-lock-display-properties" function
               (:documentation "Remove specific display properties that have been added by font lock.
The will remove the raise properties that are used to show superscripts
and subscripts."
                :arguments ("beg" "end"))
                nil [260486 260972])
            ("org-raise-scripts" function
               (:documentation "Add raise properties to sub/superscripts."
                :arguments ("limit"))
                nil [260974 262442])
            ("defvar-local" code nil nil [262522 262564])
            ("put" code nil nil [262565 262608])
            ("defvar-local" code nil nil [262609 262652])
            ("put" code nil nil [262653 262697])
            ("org-inlinetask-min-level" variable nil nil [262699 262732])
            ("org-unlogged-message" function
               (:documentation "Display a message, but avoid logging it in the *Messages* buffer."
                :arguments ("args"))
                nil [262734 262903])
            ("org-cycle" function
               (:documentation "TAB-action and visibility cycling for Org mode.

This is the command invoked in Org mode by the `TAB' key.  Its main
purpose is outline visibility cycling, but it also invokes other actions
in special contexts.

When this function is called with a `\\[universal-argument]' prefix, rotate the entire
buffer through 3 states (global cycling)
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, switch to the startup visibility,
determined by the variable `org-startup-folded', and by any VISIBILITY
properties in the buffer.

With a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix argument, show the entire buffer, including
any drawers.

When inside a table, re-align the table and move to the next field.

When point is at the beginning of a headline, rotate the subtree started
by this line through 3 different states (local cycling)
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.
               From this state, you can move to one of the children
               and zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.
If there is no subtree, switch directly from CHILDREN to FOLDED.

When point is at the beginning of an empty headline and the variable
`org-cycle-level-after-item/entry-creation' is set, cycle the level
of the headline by demoting and promoting it to likely levels.  This
speeds up creation document structure by pressing `TAB' once or several
times right after creating a new headline.

When there is a numeric prefix, go up to a heading with level ARG, do
a `show-subtree' and return to the previous cursor position.  If ARG
is negative, go up that many levels.

When point is not at the beginning of a headline, execute the global
binding for `TAB', which is re-indenting the line.  See the option
`org-cycle-emulate-tab' for details.

As a special case, if point is at the beginning of the buffer and there is
no headline in line 1, this function will act as if called with prefix arg
(`\\[universal-argument] TAB', same as `S-TAB') also when called without prefix arg, but only
if the variable `org-cycle-global-at-bob' is t."
                :user-visible-flag t
                :arguments ("arg"))
                nil [262920 269287])
            ("org-cycle-internal-global" function (:documentation "Do the global cycling action.") nil [269289 270668])
            ("org-called-with-limited-levels" variable (:documentation "Non-nil when `org-with-limited-levels' is currently active.") nil [270670 270777])
            ("org-invisible-p" function
               (:documentation "Non-nil if the character after POS is invisible.
If POS is nil, use `point' instead."
                :arguments ("pos"))
                nil [270779 270957])
            ("org-cycle-internal-local" function (:documentation "Do the local cycling action.") nil [270959 275208])
            ("org-global-cycle" function
               (:documentation "Cycle the global visibility.  For details see `org-cycle'.
With `\\[universal-argument]' prefix ARG, switch to startup visibility.
With a numeric prefix, show all headlines up to that level."
                :user-visible-flag t
                :arguments ("arg"))
                nil [275225 275900])
            ("org-set-startup-visibility" function (:documentation "Set the visibility required by startup options and properties.") nil [275902 276501])
            ("org-set-visibility-according-to-property" function
               (:documentation "Switch subtree visibilities according to :VISIBILITY: property."
                :user-visible-flag t
                :arguments ("no-cleanup"))
                nil [276503 277500])
            ("org-overview" function
               (:documentation "Switch to overview mode, showing only top-level headlines.
This shows all headlines with a level equal or greater than the level
of the first headline in the buffer.  This is important, because if the
first headline is not level one, then (hide-sublevels 1) gives confusing
results."
                :user-visible-flag t)
                nil [277683 278287])
            ("org-content" function
               (:documentation "Show all headlines in the buffer, like a table of contents.
With numerical argument N, show content up to level N."
                :user-visible-flag t
                :arguments ("arg"))
                nil [278289 278925])
            ("org-optimize-window-after-visibility-change" function
               (:documentation "Adjust the window after a change in outline visibility.
This function is the default value of the hook `org-cycle-hook'."
                :arguments ("state"))
                nil [278927 279412])
            ("org-remove-empty-overlays-at" function
               (:documentation "Remove outline overlays that do not contain non-white stuff."
                :arguments ("pos"))
                nil [279414 279720])
            ("org-clean-visibility-after-subtree-move" function (:documentation "Fix visibility issues after moving a subtree.") nil [279722 280714])
            ("org-cycle-show-empty-lines" function
               (:documentation "Show empty lines above all visible headlines.
The region to be covered depends on STATE when called through
`org-cycle-hook'.  Lisp program can use t for STATE to get the
entire buffer covered.  Note that an empty line is only shown if there
are at least `org-cycle-separator-lines' empty lines before the headline."
                :arguments ("state"))
                nil [280716 282355])
            ("org-show-empty-lines-in-parent" function (:documentation "Move to the parent and re-show empty lines before visible headlines.") nil [282357 282602])
            ("org-files-list" function (:documentation "Return `org-agenda-files' list, plus all open Org files.
This is useful for operations that need to scan all of a user's
open and agenda-wise Org files.") nil [282604 283068])
            ("org-entry-beginning-position" function (:documentation "Return the beginning position of the current entry.") nil [283070 283219])
            ("org-entry-end-position" function (:documentation "Return the end position of the current entry.") nil [283221 283357])
            ("org-cycle-hide-drawers" function
               (:documentation "Re-hide all drawers after a visibility state change.
STATE should be one of the symbols listed in the docstring of
`org-cycle-hook'.  When non-nil, optional argument EXCEPTIONS is
a list of strings specifying which drawers should not be hidden."
                :arguments ("state" "exceptions"))
                nil [283359 284513])
            ("org-flag-drawer" function
               (:documentation "When FLAG is non-nil, hide the drawer we are at.
Otherwise make it visible.  When optional argument ELEMENT is
a parsed drawer, as returned by `org-element-at-point', hide or
show that drawer instead."
                :arguments ("flag" "element"))
                nil [284515 285447])
            ("org-subtree-end-visible-p" function (:documentation "Is the end of the current subtree visible?") nil [285449 285611])
            ("org-first-headline-recenter" function (:documentation "Move cursor to the first headline and recenter the headline.") nil [285613 285936])
            ("org-outline-overlay-data" function
               (:documentation "Return a list of the locations of all outline overlays.
These are overlays with the `invisible' property value `outline'.
The return value is a list of cons cells, with start and stop
positions for each overlay.
If USE-MARKERS is set, return the positions as markers."
                :arguments ("use-markers"))
                nil [285975 286696])
            ("org-set-outline-overlay-data" function
               (:documentation "Create visibility overlays for all positions in DATA.
DATA should have been made by `org-outline-overlay-data'."
                :arguments ("data"))
                nil [286698 286965])
            ("defvar-local" code nil nil [286990 287060])
            ("org-block-map" function
               (:documentation "Call FUNCTION at the head of all source blocks in the current buffer.
Optional arguments START and END can be used to limit the range."
                :arguments ("function" "start" "end"))
                nil [287062 287567])
            ("org-hide-block-toggle-all" function (:documentation "Toggle the visibility of all blocks in the current buffer.") nil [287569 287709])
            ("org-hide-block-all" function
               (:documentation "Fold all blocks in the current buffer."
                :user-visible-flag t)
                nil [287711 287869])
            ("org-show-block-all" function
               (:documentation "Unfold all blocks in the current buffer."
                :user-visible-flag t)
                nil [287871 288048])
            ("org-hide-block-toggle-maybe" function
               (:documentation "Toggle visibility of block at point.
Unlike to `org-hide-block-toggle', this function does not throw
an error.  Return a non-nil value when toggling is successful."
                :user-visible-flag t)
                nil [288050 288314])
            ("org-hide-block-toggle" function
               (:documentation "Toggle the visibility of the current block.
When optional argument FORCE is `off', make block visible.  If it
is non-nil, hide it unconditionally.  Throw an error when not at
a block.  Return a non-nil value when toggling is successful."
                :user-visible-flag t
                :arguments ("force"))
                nil [288316 290483])
            ("add-hook" code nil nil [290529 290649])
            ("org-goto-window-configuration" variable nil nil [290665 290707])
            ("org-goto-marker" variable nil nil [290708 290736])
            ("org-goto-map" variable nil nil [290737 290758])
            ("org-goto-map" function (:documentation "Set the keymap `org-goto'.") nil [290759 292333])
            ("org-goto-help" variable
               (:constant-flag t
                :default-value "Browse buffer copy, to find location or copy text.%s
RET=jump to location             C-g=quit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur")
                nil [292335 292561])
            ("org-goto-start-pos" variable nil nil [292563 292590])
            ("org-goto" function
               (:documentation "Look up a different location in the current file, keeping current visibility.

When you want look-up or go to a different location in a
document, the fastest way is often to fold the entire buffer and
then dive into the tree.  This method has the disadvantage, that
the previous location will be folded, which may not be what you
want.

This command works around this by showing a copy of the current
buffer in an indirect buffer, in overview mode.  You can dive
into the tree in that copy, use org-occur and incremental search
to find a location.  When pressing RET or `Q', the command
returns to the original buffer in which the visibility is still
unchanged.  After RET it will also jump to the location selected
in the indirect buffer and expose the headline hierarchy above.

With a prefix argument, use the alternative interface: e.g., if
`org-goto-interface' is `outline' use `outline-path-completion'."
                :user-visible-flag t
                :arguments ("alternative-interface"))
                nil [292623 294406])
            ("org-goto-selected-point" variable nil nil [294408 294444])
            ("org-goto-exit-command" variable nil nil [294476 294510])
            ("org-goto-local-auto-isearch-map" variable nil nil [294542 294582])
            ("org-get-location" function
               (:documentation "Let the user select a location in current buffer.
This function uses a recursive edit.  It returns the selected position
or nil."
                :arguments ("_buf" "help"))
                nil [294600 296248])
            ("org-goto-local-auto-isearch-map" variable (:default-value (make-sparse-keymap)) nil [296250 296311])
            ("set-keymap-parent" code nil nil [296312 296380])
            ("if" code nil nil [296440 296842])
            ("org-goto-local-search-headings" function
               (:documentation "Search and make sure that any matches are in headlines."
                :arguments ("string" "bound" "noerror"))
                nil [296844 297358])
            ("org-goto-local-auto-isearch" function
               (:documentation "Start isearch."
                :user-visible-flag t)
                nil [297360 297651])
            ("org-goto-ret" function
               (:documentation "Finish `org-goto' by going to the new location."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [297653 297862])
            ("org-goto-left" function
               (:documentation "Finish `org-goto' by going to the new location."
                :user-visible-flag t)
                nil [297864 298149])
            ("org-goto-right" function
               (:documentation "Finish `org-goto' by going to the new location."
                :user-visible-flag t)
                nil [298151 298415])
            ("org-goto-quit" function
               (:documentation "Finish `org-goto' without cursor motion."
                :user-visible-flag t)
                nil [298417 298596])
            ("org-indirect-dedicated-frame" variable (:documentation "This is the frame being used for indirect tree display.") nil [298639 298740])
            ("org-last-indirect-buffer" variable nil nil [298741 298778])
            ("org-tree-to-indirect-buffer" function
               (:documentation "Create indirect buffer and narrow it to current subtree.

With a numerical prefix ARG, go up to this level and then take that tree.
If ARG is negative, go up that many levels.

If `org-indirect-buffer-display' is not `new-frame', the command removes the
indirect buffer previously made with this command, to avoid proliferation of
indirect buffers.  However, when you call the command with a `\\[universal-argument]' prefix, or
when `org-indirect-buffer-display' is `new-frame', the last buffer is kept
so that you can work with several indirect buffers at the same time.  If
`org-indirect-buffer-display' is `dedicated-frame', the `\\[universal-argument]' prefix also
requests that a new frame be made for the new buffer, so that the dedicated
frame is not changed."
                :user-visible-flag t
                :arguments ("arg"))
                nil [298780 301455])
            ("org-get-indirect-buffer" function (:arguments ("buffer" "heading")) nil [301457 301936])
            ("org-set-frame-title" function
               (:documentation "Set the title of the current frame to the string TITLE."
                :arguments ("title"))
                nil [301938 302104])
            ("org--line-empty-p" function
               (:documentation "Is the Nth next line empty?

Counts the current line as N = 1 and the previous line as N = 0;
see `beginning-of-line'."
                :arguments ("n"))
                nil [302155 302427])
            ("org-previous-line-empty-p" function (:documentation "Is the previous line a blank line?
When NEXT is non-nil, check the next line instead.") nil [302429 302579])
            ("org-next-line-empty-p" function (:documentation "Is the previous line a blank line?
When NEXT is non-nil, check the next line instead.") nil [302581 302727])
            ("org--blank-before-heading-p" function
               (:documentation "Non-nil when an empty line should precede a new heading here.
When optional argument PARENT is non-nil, consider parent
headline instead of current one."
                :arguments ("parent"))
                nil [302729 303570])
            ("org-insert-heading" function
               (:documentation "Insert a new heading or an item with the same depth at point.

If point is at the beginning of a heading, insert a new heading
or a new headline above the current one.  When at the beginning
of a regular line of text, turn it into a heading.

If point is in the middle of a line, split it and create a new
headline with the text in the current line after point (see
`org-M-RET-may-split-line' on how to modify this behavior).  As
a special case, on a headline, splitting can only happen on the
title itself.  E.g., this excludes breaking stars or tags.

With a `\\[universal-argument]' prefix, set `org-insert-heading-respect-content' to
a non-nil value for the duration of the command.  This forces the
insertion of a heading after the current subtree, independently
on the location of point.

With a `\\[universal-argument] \\[universal-argument]' prefix, insert the heading at the end of the tree
above the current heading.  For example, if point is within a
2nd-level heading, then it will insert a 2nd-level heading at
the end of the 1st-level parent subtree.

When INVISIBLE-OK is set, stop at invisible headlines when going
back.  This is important for non-interactive uses of the
command.

When optional argument TOP is non-nil, insert a level 1 heading,
unconditionally."
                :user-visible-flag t
                :arguments ("arg" "invisible-ok" "top"))
                nil [303572 307476])
            ("org-N-empty-lines-before-current" function
               (:documentation "Make the number of empty lines before current exactly N.
So this will delete or add empty lines."
                :arguments ("n"))
                nil [307478 307914])
            ("org-get-heading" function
               (:documentation "Return the heading of the current entry, without the stars.
When NO-TAGS is non-nil, don't include tags.
When NO-TODO is non-nil, don't include TODO keywords.
When NO-PRIORITY is non-nil, don't include priority cookie.
When NO-COMMENT is non-nil, don't include COMMENT string."
                :arguments ("no-tags" "no-todo" "no-priority" "no-comment"))
                nil [307916 308857])
            ("orgstruct-mode" variable nil nil [308859 308882])
            ("org-heading-components" function (:documentation "Return the components of the current heading.
This is a list with the following elements:
- the level as an integer
- the reduced level, different if `org-odd-levels-only' is set.
- the TODO keyword, or nil
- the priority character, like ?A, or nil if no priority is given
- the headline text itself, or the tags string if no headline text
- the tags string, or nil.") nil [308902 309891])
            ("org-get-entry" function (:documentation "Get the entry text, after heading, entire subtree.") nil [309893 310082])
            ("org-edit-headline" function
               (:documentation "Edit the current headline.
Set it to HEADING when provided."
                :user-visible-flag t
                :arguments ("heading"))
                nil [310084 310725])
            ("org-insert-heading-after-current" function
               (:documentation "Insert a new heading with same level as current, after current subtree."
                :user-visible-flag t)
                nil [310727 310953])
            ("org-insert-heading-respect-content" function
               (:documentation "Insert heading with `org-insert-heading-respect-content' set to t."
                :user-visible-flag t
                :arguments ("invisible-ok"))
                nil [310955 311150])
            ("org-insert-todo-heading-respect-content" function
               (:documentation "Insert TODO heading with `org-insert-heading-respect-content' set to t."
                :user-visible-flag t
                :arguments ("force-state"))
                nil [311152 311360])
            ("org-insert-todo-heading" function
               (:documentation "Insert a new heading with the same level and TODO state as current heading.

If the heading has no TODO state, or if the state is DONE, use
the first state (TODO by default).  Also with one prefix arg,
force first state.  With two prefix args, force inserting at the
end of the parent subtree.

When called at a plain list item, insert a new item with an
unchecked check box."
                :user-visible-flag t
                :arguments ("arg" "force-heading"))
                nil [311362 312714])
            ("org-insert-subheading" function
               (:documentation "Insert a new subheading and demote it.
Works for outline headings and for plain lists alike."
                :user-visible-flag t
                :arguments ("arg"))
                nil [312716 312983])
            ("org-insert-todo-subheading" function
               (:documentation "Insert a new subheading with TODO keyword or checkbox and demote it.
Works for outline headings and for plain lists alike."
                :user-visible-flag t
                :arguments ("arg"))
                nil [312985 313292])
            ("org-after-demote-entry-hook" variable (:documentation "Hook run after an entry has been demoted.
The cursor will be at the beginning of the entry.
When a subtree is being demoted, the hook will be called for each node.") nil [313322 313530])
            ("org-after-promote-entry-hook" variable (:documentation "Hook run after an entry has been promoted.
The cursor will be at the beginning of the entry.
When a subtree is being promoted, the hook will be called for each node.") nil [313532 313743])
            ("org-promote-subtree" function
               (:documentation "Promote the entire subtree.
See also `org-promote'."
                :user-visible-flag t)
                nil [313745 313959])
            ("org-demote-subtree" function
               (:documentation "Demote the entire subtree.
See `org-demote' and `org-promote'."
                :user-visible-flag t)
                nil [313961 314184])
            ("org-do-promote" function
               (:documentation "Promote the current heading higher up the tree.
If the region is active in `transient-mark-mode', promote all
headings in the region."
                :user-visible-flag t)
                nil [314186 314533])
            ("org-do-demote" function
               (:documentation "Demote the current heading lower down the tree.
If the region is active in `transient-mark-mode', demote all
headings in the region."
                :user-visible-flag t)
                nil [314535 314878])
            ("org-fix-position-after-promote" function (:documentation "Fix cursor position and indentation after demoting/promoting.") nil [314880 315301])
            ("org-current-level" function (:documentation "Return the level of the current entry, or nil if before the first headline.
The level is the number of stars at the beginning of the
headline.  Use `org-reduced-level' to remove the effect of
`org-odd-levels'.  Unlike to `org-outline-level', this function
ignores inlinetasks.") nil [315303 315704])
            ("org-get-previous-line-level" function (:documentation "Return the outline depth of the last headline before the current line.
Returns 0 for the first headline in the buffer, and nil if before the
first headline.") nil [315706 316061])
            ("org-reduced-level" function
               (:documentation "Compute the effective level of a heading.
This takes into account the setting of `org-odd-levels-only'."
                :arguments ("l"))
                nil [316063 316281])
            ("org-level-increment" function (:documentation "Return the number of stars that will be added or removed at a
time to headlines when structure editing, based on the value of
`org-odd-levels-only'.") nil [316283 316497])
            ("org-get-valid-level" function
               (:documentation "Rectify a level change under the influence of `org-odd-levels-only'.
LEVEL is a current level, CHANGE is by how much the level should
be modified.  Even if CHANGE is nil, LEVEL may be returned
modified because even level numbers will become the next higher
odd number.  Returns values greater than 0."
                :arguments ("level" "change"))
                nil [316499 317121])
            ("org-promote" function (:documentation "Promote the current heading higher up the tree.") nil [317123 317985])
            ("org-demote" function (:documentation "Demote the current heading lower down the tree.") nil [317987 318604])
            ("org-cycle-level" function
               (:documentation "Cycle the level of an empty headline through possible states.
This goes first to child, then to parent, level, then up the hierarchy.
After top level, it switches back to sibling level."
                :user-visible-flag t)
                nil [318606 320122])
            ("org-map-tree" function
               (:documentation "Call FUN for every heading underneath the current one."
                :arguments ("fun"))
                nil [320124 320447])
            ("org-map-region" function
               (:documentation "Call FUN for every heading between BEG and END."
                :arguments ("fun" "beg" "end"))
                nil [320449 320860])
            ("org-fixup-indentation" function
               (:documentation "Change the indentation in the current entry by DIFF.

DIFF is an integer.  Indentation is done according to the
following rules:

  - Planning information and property drawers are always indented
    according to the new level of the headline;

  - Footnote definitions and their contents are ignored;

  - Inlinetasks' boundaries are not shifted;

  - Empty lines are ignored;

  - Other lines' indentation are shifted by DIFF columns, unless
    it would introduce a structural change in the document, in
    which case no shifting is done at all.

Assume point is at a heading or an inlinetask beginning."
                :arguments ("diff"))
                nil [320862 324859])
            ("org-convert-to-odd-levels" function
               (:documentation "Convert an Org file with all levels allowed to one with odd levels.
This will leave level 1 alone, convert level 2 to level 3, level 3 to
level 5 etc."
                :user-visible-flag t)
                nil [324861 325438])
            ("org-convert-to-oddeven-levels" function
               (:documentation "Convert an Org file with only odd levels to one with odd/even levels.
This promotes level 3 to level 2, level 5 to level 3 etc.  If the
file contains a section with an even level, conversion would
destroy the structure of the file.  An error is signaled in this
case."
                :user-visible-flag t)
                nil [325440 326429])
            ("org-tr-level" function
               (:documentation "Make N odd if required."
                :arguments ("n"))
                nil [326431 326525])
            ("org-move-subtree-up" function
               (:documentation "Move the current subtree up past ARG headlines of the same level."
                :user-visible-flag t
                :arguments ("arg"))
                nil [326586 326776])
            ("org-move-subtree-down" function
               (:documentation "Move the current subtree down past ARG headlines of the same level."
                :user-visible-flag t
                :arguments ("arg"))
                nil [326778 329513])
            ("org-subtree-clip" variable (:documentation "Clipboard for cut and paste of subtrees.
This is actually only a copy of the kill, because we use the normal kill
ring.  We need it to check if the kill was created by `org-copy-subtree'.") nil [329515 329735])
            ("org-subtree-clip-folded" variable (:documentation "Was the last copied subtree folded?
This is used to fold the tree back after pasting.") nil [329737 329863])
            ("org-cut-subtree" function
               (:documentation "Cut the current subtree into the clipboard.
With prefix arg N, cut this many sequential subtrees.
This is a short-hand for marking the subtree and then cutting it."
                :user-visible-flag t
                :arguments ("n"))
                nil [329865 330118])
            ("org-copy-subtree" function
               (:documentation "Copy the current subtree into the clipboard.
With prefix arg N, copy this many sequential subtrees.
This is a short-hand for marking the subtree and then copying it.
If CUT is non-nil, actually cut the subtree.
If FORCE-STORE-MARKERS is non-nil, store the relative locations
of some markers in the region, even if CUT is non-nil.  This is
useful if the caller implements cut-and-paste as copy-then-paste-then-cut."
                :user-visible-flag t
                :arguments ("n" "cut" "force-store-markers" "nosubtrees"))
                nil [330120 331732])
            ("org-paste-subtree" function
               (:documentation "Paste the clipboard as a subtree, with modification of headline level.
The entire subtree is promoted or demoted in order to match a new headline
level.

If the cursor is at the beginning of a headline, the same level as
that headline is used to paste the tree.

If not, the new level is derived from the *visible* headings
before and after the insertion point, and taken to be the inferior headline
level of the two.  So if the previous visible heading is level 3 and the
next is level 4 (or vice versa), level 4 will be used for insertion.
This makes sure that the subtree remains an independent subtree and does
not swallow low level entries.

You can also force a different level, either by using a numeric prefix
argument, or by inserting the heading marker by hand.  For example, if the
cursor is after \"*****\", then the tree will be shifted to level 5.

If optional TREE is given, use this text instead of the kill ring.

When FOR-YANK is set, this is called by `org-yank'.  In this case, do not
move back over whitespace before inserting, and move point to the end of
the inserted text when done.

When REMOVE is non-nil, remove the subtree from the clipboard."
                :user-visible-flag t
                :arguments ("level" "tree" "for-yank" "remove"))
                nil [331734 335955])
            ("org-kill-is-subtree-p" function
               (:documentation "Check if the current kill is an outline subtree, or a set of trees.
Returns nil if kill does not start with a headline, or if the first
headline level is not the largest headline level in the tree.
So this will actually accept several entries of equal levels as well,
which is OK for `org-paste-subtree'.
If optional TXT is given, check this string instead of the current kill."
                :arguments ("txt"))
                nil [335957 336965])
            ("org-markers-to-move" variable (:documentation "Markers that should be moved with a cut-and-paste operation.
Those markers are stored together with their positions relative to
the start of the region.") nil [336967 337156])
            ("org-save-markers-in-region" function
               (:documentation "Check markers in region.
If these markers are between BEG and END, record their position relative
to BEG, so that after moving the block of text, we can put the markers back
into place.
This function gets called just before an entry or tree gets cut from the
buffer.  After re-insertion, `org-reinstall-markers-in-region' must be
called immediately, to move the markers with the entries."
                :arguments ("beg" "end"))
                nil [337158 337801])
            ("org-check-and-save-marker" function
               (:documentation "Check if MARKER is between BEG and END.
If yes, remember the marker and the distance to BEG."
                :arguments ("marker" "beg" "end"))
                nil [337803 338139])
            ("org-reinstall-markers-in-region" function
               (:documentation "Move all remembered markers to their position relative to BEG."
                :arguments ("beg"))
                nil [338141 338363])
            ("org-narrow-to-subtree" function
               (:documentation "Narrow buffer to the current subtree."
                :user-visible-flag t)
                nil [338365 338716])
            ("org-narrow-to-block" function
               (:documentation "Narrow buffer to the current block."
                :user-visible-flag t)
                nil [338718 339016])
            ("org-clone-subtree-with-time-shift" function
               (:documentation "Clone the task (subtree) at point N times.
The clones will be inserted as siblings.

In interactive use, the user will be prompted for the number of
clones to be produced.  If the entry has a timestamp, the user
will also be prompted for a time shift, which may be a repeater
as used in time stamps, for example `+3d'.  To disable this,
you can call the function with a universal prefix argument.

When a valid repeater is given and the entry contains any time
stamps, the clones will become a sequence in time, with time
stamps in the subtree shifted for each clone produced.  If SHIFT
is nil or the empty string, time stamps will be left alone.  The
ID property of the original subtree is removed.

In each clone, all the CLOCK entries will be removed.  This
prevents Org from considering that the clocked times overlap.

If the original subtree did contain time stamps with a repeater,
the following will happen:
- the repeater will be removed in each clone
- an additional clone will be produced, with the current, unshifted
  date(s) in the entry.
- the original entry will be placed *after* all the clones, with
  repeater intact.
- the start days in the repeater in the original entry will be shifted
  to past the last clone.
In this way you can spell out a number of instances of a repeating task,
and still retain the repeater to cover future instances of the task.

As described above, N+1 clones are produced when the original
subtree has a repeater.  Setting N to 0, then, can be used to
remove the repeater from a subtree and create a shifted clone
with the original repeater."
                :user-visible-flag t
                :arguments ("n" "shift"))
                nil [339018 343310])
            ("org-sort" function
               (:documentation "Call `org-sort-entries', `org-table-sort-lines' or `org-sort-list'.
Optional argument WITH-CASE means sort case-sensitively."
                :user-visible-flag t
                :arguments ("with-case"))
                nil [343333 343668])
            ("org-sort-remove-invisible" function
               (:documentation "Remove invisible part of links and emphasis markers from string S."
                :arguments ("s"))
                nil [343670 344066])
            ("org-priority-regexp" variable nil nil [344068 344096])
            ("org-after-sorting-entries-or-items-hook" variable (:documentation "Hook that is run after a bunch of entries or items have been sorted.
When children are sorted, the cursor is in the parent line when this
hook gets called.  When a region or a plain list is sorted, the cursor
will be in the first entry of the sorted region/list.") nil [344126 344445])
            ("org-sort-entries" function
               (:documentation "Sort entries on a certain level of an outline tree.
If there is an active region, the entries in the region are sorted.
Else, if the cursor is before the first entry, sort the top-level items.
Else, the children of the entry at point are sorted.

Sorting can be alphabetically, numerically, by date/time as given by
a time stamp, by a property, by priority order, or by a custom function.

The command prompts for the sorting type unless it has been given to the
function through the SORTING-TYPE argument, which needs to be a character,
(?n ?N ?a ?A ?t ?T ?s ?S ?d ?D ?p ?P ?o ?O ?r ?R ?f ?F ?k ?K).  Here is
the precise meaning of each character:

a   Alphabetically, ignoring the TODO keyword and the priority, if any.
c   By creation time, which is assumed to be the first inactive time stamp
    at the beginning of a line.
d   By deadline date/time.
k   By clocking time.
n   Numerically, by converting the beginning of the entry/item to a number.
o   By order of TODO keywords.
p   By priority according to the cookie.
r   By the value of a property.
s   By scheduled date/time.
t   By date/time, either the first active time stamp in the entry, or, if
    none exist, by the first inactive one.

Capital letters will reverse the sort order.

If the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies a function to be
called with point at the beginning of the record.  It must return a
value that is compatible with COMPARE-FUNC, the function used to
compare entries.

Comparing entries ignores case by default.  However, with an optional argument
WITH-CASE, the sorting considers case as well.

Sorting is done against the visible part of the headlines, it ignores hidden
links.

When sorting is done, call `org-after-sorting-entries-or-items-hook'.

A non-nil value for INTERACTIVE? is used to signal that this
function is being called interactively."
                :user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "property" "interactive?"))
                nil [344447 353108])
            ("orgstruct-heading-prefix-regexp" variable (:documentation "Regexp that matches the custom prefix of Org headlines in
orgstruct(++)-mode.") nil [354091 354301])
            ("orgstruct-setup-hook" variable (:documentation "Hook run after orgstruct-mode-map is filled.") nil [354386 354551])
            ("orgstruct-initialized" variable nil nil [354553 354587])
            ("org-local-vars" variable (:documentation "List of local variables, for use by `orgstruct-mode'.") nil [354589 354674])
            ("define-minor-mode" code nil nil [354691 355289])
            ("turn-on-orgstruct" function (:documentation "Unconditionally turn on `orgstruct-mode'.") nil [355306 355401])
            ("defvar-local" code nil nil [355403 355498])
            ("defvar-local" code nil nil [355499 355529])
            ("orgstruct++-mode" function
               (:documentation "Toggle `orgstruct-mode', the enhanced version of it.
In addition to setting orgstruct-mode, this also exports all
indentation and autofilling variables from Org mode into the
buffer.  It will also recognize item context in multiline items."
                :user-visible-flag t
                :arguments ("arg"))
                nil [355530 356667])
            ("turn-on-orgstruct++" function (:documentation "Unconditionally turn on `orgstruct++-mode'.") nil [356684 356785])
            ("orgstruct-error" function
               (:documentation "Error when there is no default binding for a structure key."
                :user-visible-flag t)
                nil [356787 357023])
            ("orgstruct-setup" function (:documentation "Setup orgstruct keymap.") nil [357025 359040])
            ("orgstruct-make-binding" function
               (:documentation "Create a function for binding in the structure minor mode.
FUN is the command to call inside a table.  KEY is the key that
should be checked in for a command to execute outside of tables.
Non-nil `disable-when-heading-prefix' means to disable the command
if `orgstruct-heading-prefix-regexp' is not empty."
                :arguments ("fun" "key" "disable-when-heading-prefix"))
                nil [359042 361910])
            ("org-contextualize-keys" function
               (:documentation "Return valid elements in ALIST depending on CONTEXTS.

`org-agenda-custom-commands' or `org-capture-templates' are the
values used for ALIST, and `org-agenda-custom-commands-contexts'
or `org-capture-templates-contexts' are the associated contexts
definitions."
                :arguments ("alist" "contexts"))
                nil [361912 363379])
            ("org-contextualize-validate-key" function
               (:documentation "Check CONTEXTS for agenda or capture KEY."
                :arguments ("key" "contexts"))
                nil [363381 364295])
            ("org-context-p" function
               (:documentation "Check if local context is any of CONTEXTS.
Possible values in the list of contexts are `table', `headline', and `item'."
                :arguments ("contexts"))
                nil [364297 364842])
            ("org-run-like-in-org-mode" function
               (:documentation "Run a command, pretending that the current buffer is in Org mode.
This will temporarily bind local variables that are typically bound in
Org mode to the values they have in Org mode, and then interactively
call CMD."
                :arguments ("cmd"))
                nil [364859 365496])
            ("org-get-category" function
               (:documentation "Get the category applying to position POS."
                :arguments ("pos" "force-refresh"))
                nil [365498 365848])
            ("org-refresh-properties" function
               (:documentation "Refresh buffer text properties.
DPROP is the drawer property and TPROP is either the
corresponding text property to set, or an alist with each element
being a text property (as a symbol) and a function to apply to
the value of the drawer property."
                :arguments ("dprop" "tprop"))
                nil [365874 366869])
            ("org-refresh-property" function
               (:documentation "Refresh the buffer text property TPROP from the drawer property P.
The refresh happens only for the current headline, or the whole
sub-tree if optional argument INHERIT is non-nil."
                :arguments ("tprop" "p" "inherit"))
                nil [366871 367612])
            ("org-refresh-category-properties" function (:documentation "Refresh category text properties in the buffer.") nil [367614 369098])
            ("org-refresh-stats-properties" function (:documentation "Refresh stats text properties in the buffer.") nil [369100 369771])
            ("org-refresh-effort-properties" function (:documentation "Refresh effort properties") nil [369773 369967])
            ("org-link-expand-abbrev" function
               (:documentation "Apply replacements as defined in `org-link-abbrev-alist'."
                :arguments ("link"))
                nil [370010 370813])
            ("org-insert-link-history" variable (:documentation "Minibuffer history for links inserted with `org-insert-link'.") nil [370848 370950])
            ("org-stored-links" variable (:documentation "Contains the links stored with `org-store-link'.") nil [370952 371034])
            ("org-store-link-plist" variable (:documentation "Plist with info about the most recently link created with `org-store-link'.") nil [371036 371149])
            ("org-store-link-functions" function (:documentation "Return a list of functions that are called to create and store a link.
The functions defined in the :store property of
`org-link-parameters'.

Each function will be called in turn until one returns a non-nil
value.  Each function should check if it is responsible for
creating this link (for example by looking at the major mode).
If not, it must exit and return nil.  If yes, it should return
a non-nil value after calling `org-store-link-props' with a list
of properties and values.  Special properties are:

:type         The link prefix, like \"http\".  This must be given.
:link         The link, like \"http://www.astro.uva.nl/~dominik\".
              This is obligatory as well.
:description  Optional default description for the second pair
              of brackets in an Org mode link.  The user can still change
              this when inserting this link into an Org mode buffer.

In addition to these, any additional properties can be specified
and then used in capture templates.") nil [371151 372358])
            ("org-agenda-buffer-name" variable nil nil [372360 372391])
            ("org-id-link-to-org-use-id" variable nil nil [372419 372453])
            ("org-store-link" function
               (:documentation "Store an org-link to the current location.
\\<org-mode-map>
This link is added to `org-stored-links' and can later be inserted
into an Org buffer with `org-insert-link' (`\\[org-insert-link]').

For some link types, a `\\[universal-argument]' prefix ARG is interpreted.  A single
`\\[universal-argument]' negates `org-context-in-file-links' for file links or
`org-gnus-prefer-web-links' for links to Usenet articles.

A `\\[universal-argument] \\[universal-argument]' prefix ARG forces skipping storing functions that are not
part of Org core.

A `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix ARG forces storing a link for each line in the
active region."
                :user-visible-flag t
                :arguments ("arg"))
                nil [372493 381292])
            ("org-store-link-props" function
               (:documentation "Store link properties.
The properties are pre-processed by extracting names, addresses
and dates."
                :arguments ("plist"))
                nil [381294 382503])
            ("org-add-link-props" function
               (:documentation "Add these properties to the link property list."
                :arguments ("plist"))
                nil [382505 382764])
            ("org-email-link-description" function
               (:documentation "Return the description part of an email link.
This takes information from `org-store-link-plist' and formats it
according to FMT (default from `org-email-link-description-format')."
                :arguments ("fmt"))
                nil [382766 383882])
            ("org-make-org-heading-search-string" function
               (:documentation "Make search string for the current headline or STRING."
                :arguments ("string"))
                nil [383884 384677])
            ("org-link-escape-chars" variable
               (:documentation "List of characters that should be escaped in a link when stored to Org.
This is the list that is used for internal purposes."
                :constant-flag t
                :default-value '(32 91 93 37))
                nil [384679 384880])
            ("org-make-link-string" function
               (:documentation "Make a link with brackets, consisting of LINK and DESCRIPTION."
                :arguments ("link" "description"))
                nil [384882 385792])
            ("org-link-escape" function
               (:documentation "Return percent escaped representation of TEXT.
TEXT is a string with the text to escape.
Optional argument TABLE is a list with characters that should be
escaped.  When nil, `org-link-escape-chars' is used.
If optional argument MERGE is set, merge TABLE into
`org-link-escape-chars'."
                :arguments ("text" "table" "merge"))
                nil [385794 386613])
            ("org-link-unescape" function
               (:documentation "Unhex hexified Unicode parts in string STR.
E.g. `%C3%B6' becomes the german o-Umlaut.  This is the
reciprocal of `org-link-escape', which see."
                :arguments ("str"))
                nil [386615 386937])
            ("org-link-unescape-compound" function
               (:documentation "Unhexify Unicode hex-chars.  E.g. `%C3%B6' is the German o-Umlaut.
Note: this function also decodes single byte encodings like
`%E1' (a-acute) if not followed by another `%[A-F0-9]{2}' group."
                :arguments ("hex"))
                nil [386939 388014])
            ("org-link-unescape-single-byte-sequence" function
               (:documentation "Unhexify hex-encoded single byte character sequences."
                :arguments ("hex"))
                nil [388016 388246])
            ("org-xor" function
               (:documentation "Exclusive or."
                :arguments ("a" "b"))
                nil [388248 388306])
            ("org-fixup-message-id-for-http" function
               (:documentation "Replace special characters in a message id, so it can be used in an http query."
                :arguments ("s"))
                nil [388308 388793])
            ("org-link-prettify" function
               (:documentation "Return a human-readable representation of LINK.
The car of LINK must be a raw link.
The cdr of LINK must be either a link description or nil."
                :arguments ("link"))
                nil [388795 389122])
            ("org-insert-link-global" function
               (:documentation "Insert a link like Org mode does.
This command can be called in any mode to insert a link in Org syntax."
                :user-visible-flag t)
                nil [389139 389370])
            ("org-insert-all-links" function
               (:documentation "Insert all links in `org-stored-links'.
When a universal prefix, do not delete the links from `org-stored-links'.
When `ARG' is a number, insert the last N link(s).
`PRE' and `POST' are optional arguments to define a string to
prepend or to append."
                :user-visible-flag t
                :arguments ("arg" "pre" "post"))
                nil [389372 390164])
            ("org-insert-last-stored-link" function
               (:documentation "Insert the last link stored in `org-stored-links'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [390166 390319])
            ("org-link-fontify-links-to-this-file" function (:documentation "Fontify links to the current file in `org-stored-links'.") nil [390321 391081])
            ("org--links-history" variable nil nil [391083 391114])
            ("org-insert-link" function
               (:documentation "Insert a link.  At the prompt, enter the link.

Completion can be used to insert any of the link protocol prefixes in use.

The history can be used to select a link previously stored with
`org-store-link'.  When the empty string is entered (i.e. if you just
press `RET' at the prompt), the link defaults to the most recently
stored link.  As `SPC' triggers completion in the minibuffer, you need to
use `M-SPC' or `C-q SPC' to force the insertion of a space character.

You will also be prompted for a description, and if one is given, it will
be displayed in the buffer instead of the link.

If there is already a link at point, this command will allow you to edit
link and description parts.

With a `\\[universal-argument]' prefix, prompts for a file to link to.  The file name can be
selected using completion.  The path to the file will be relative to the
current directory if the file is in the current directory or a subdirectory.
Otherwise, the link will be the absolute path as completed in the minibuffer
(i.e. normally ~/path/to/file).  You can configure this behavior using the
option `org-link-file-path-type'.

With a `\\[universal-argument] \\[universal-argument]' prefix, enforce an absolute path even if the file is in
the current directory or below.

A `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix negates `org-keep-stored-link-after-insertion'.

If the LINK-LOCATION parameter is non-nil, this value will be used as
the link location instead of reading one interactively.

If the DEFAULT-DESCRIPTION parameter is non-nil, this value will
be used as the default description.  Otherwise, if
`org-make-link-description-function' is non-nil, this function
will be called with the link target, and the result will be the
default link description."
                :user-visible-flag t
                :arguments ("complete-file" "link-location" "default-description"))
                nil [391115 399307])
            ("org-link-try-special-completion" function
               (:documentation "If there is completion support for link type TYPE, offer it."
                :arguments ("type"))
                nil [399309 399587])
            ("org-file-complete-link" function
               (:documentation "Create a file link using completion."
                :arguments ("arg"))
                nil [399589 400278])
            ("org-completing-read" function
               (:documentation "Completing-read with SPACE being a normal character."
                :arguments ("args"))
                nil [400280 400776])
            ("org-link-search-failed" variable nil nil [400808 400843])
            ("org-open-link-functions" variable (:documentation "Hook for functions finding a plain text link.
These functions must take a single argument, the link content.
They will be called for links that look like [[link text][description]]
when LINK TEXT does not have a protocol like \"http:\" and does not look
like a filename (e.g. \"./blue.png\").

These functions will be called *before* Org attempts to resolve the
link by doing text searches in the current buffer - so if you want a
link \"[[target]]\" to still find \"<<target>>\", your function should
handle this as a special case.

When the function does handle the link, it must return a non-nil value.
If it decides that it is not responsible for this link, it must return
nil to indicate that that Org can continue with other options like
exact and fuzzy text search.") nil [400845 401658])
            ("org-next-link" function
               (:documentation "Move forward to the next link.
If the link is in hidden text, expose it."
                :user-visible-flag t
                :arguments ("search-backward"))
                nil [401660 402581])
            ("org-previous-link" function
               (:documentation "Move backward to the previous link.
If the link is in hidden text, expose it."
                :user-visible-flag t)
                nil [402583 402738])
            ("org-translate-link" function
               (:documentation "Translate a link string if a translation function has been defined."
                :arguments ("s"))
                nil [402740 402955])
            ("org-translate-link-from-planner" function
               (:documentation "Translate a link from Emacs Planner syntax so that Org can follow it.
This is still an experimental function, your mileage may vary."
                :arguments ("type" "path"))
                nil [402957 403898])
            ("org-find-file-at-mouse" function
               (:documentation "Open file link or URL at mouse."
                :user-visible-flag t
                :arguments ("ev"))
                nil [403900 404046])
            ("org-open-at-mouse" function
               (:documentation "Open file link or URL at mouse.
See the docstring of `org-open-file' for details."
                :user-visible-flag t
                :arguments ("ev"))
                nil [404048 404337])
            ("org-window-config-before-follow-link" variable (:documentation "The window configuration before following a link.
This is saved in case the need arises to restore it.") nil [404339 404495])
            ("org-open-at-point-global" function
               (:documentation "Follow a link or time-stamp like Org mode does.
This command can be called in any mode to follow an external link
or a time-stamp that has Org mode syntax.  Its behavior is
undefined when called on internal links (e.g., fuzzy links).
Raise an error when there is nothing to follow.  "
                :user-visible-flag t)
                nil [404512 405116])
            ("org-open-link-from-string" function
               (:documentation "Open a link in the string S, as if it was in Org mode."
                :user-visible-flag t
                :arguments ("s" "arg" "reference-buffer"))
                nil [405133 405666])
            ("org-open-at-point-functions" variable (:documentation "Hook that is run when following a link at point.

Functions in this hook must return t if they identify and follow
a link at point.  If they don't find anything interesting at point,
they must return nil.") nil [405668 405917])
            ("org-link-search-inhibit-query" variable nil nil [405919 405961])
            ("clean-buffer-list-kill-buffer-names" variable nil nil [405962 406006])
            ("org--open-doi-link" function
               (:documentation "Open a \"doi\" type link.
PATH is a the path to search for, as a string."
                :arguments ("path"))
                nil [406031 406206])
            ("org--open-elisp-link" function
               (:documentation "Open a \"elisp\" type link.
PATH is the sexp to evaluate, as a string."
                :arguments ("path"))
                nil [406208 406811])
            ("org--open-help-link" function
               (:documentation "Open a \"help\" type link.
PATH is a symbol name, as a string."
                :arguments ("path"))
                nil [406813 407131])
            ("org--open-shell-link" function
               (:documentation "Open a \"shell\" type link.
PATH is the command to execute, as a string."
                :arguments ("path"))
                nil [407133 407889])
            ("org-open-at-point" function
               (:documentation "Open link, timestamp, footnote or tags at point.

When point is on a link, follow it.  Normally, files will be
opened by an appropriate application.  If the optional prefix
argument ARG is non-nil, Emacs will visit the file.  With
a double prefix argument, try to open outside of Emacs, in the
application the system uses for this file type.

When point is on a timestamp, open the agenda at the day
specified.

When point is a footnote definition, move to the first reference
found.  If it is on a reference, move to the associated
definition.

When point is on a headline, display a list of every link in the
entry, so it is possible to pick one, or all, of them.  If point
is on a tag, call `org-tags-view' instead.

When optional argument REFERENCE-BUFFER is non-nil, it should
specify a buffer from where the link search should happen.  This
is used internally by `org-open-link-from-string'.

On top of syntactically correct links, this function will also
try to open links and time-stamps in comments, example
blocks... i.e., whenever point is on something looking like
a timestamp or a link."
                :user-visible-flag t
                :arguments ("arg" "reference-buffer"))
                nil [407891 414557])
            ("org-offer-links-in-entry" function
               (:documentation "Offer links in the current entry and return the selected link.
If there is only one link, return it.
If NTH is an integer, return the NTH link found.
If ZERO is a string, check also this string for a link, and if
there is one, return it."
                :arguments ("buffer" "marker" "nth" "zero"))
                nil [414559 416716])
            ("org-open-file-with-system" function
               (:documentation "Open file at PATH using the system way of opening it."
                :arguments ("path"))
                nil [416846 416975])
            ("org-open-file-with-emacs" function
               (:documentation "Open file at PATH in Emacs."
                :arguments ("path"))
                nil [416976 417077])
            ("org-create-file-search-functions" variable (:documentation "List of functions to construct the right search string for a file link.
These functions are called in turn with point at the location to
which the link should point.

A function in the hook should first test if it would like to
handle this file type, for example by checking the `major-mode'
or the file extension.  If it decides not to handle this file, it
should just return nil to give other functions a chance.  If it
does handle the file, it must return the search string to be used
when following the link.  The search string will be part of the
file link, given after a double colon, and `org-open-at-point'
will automatically search for it.  If special measures must be
taken to make the search successful, another function should be
added to the companion hook `org-execute-file-search-functions',
which see.

A function in this hook may also use `setq' to set the variable
`description' to provide a suggestion for the descriptive text to
be used for this link when it gets inserted into an Org buffer
with \\[org-insert-link].") nil [417097 418184])
            ("org-execute-file-search-functions" variable (:documentation "List of functions to execute a file search triggered by a link.

Functions added to this hook must accept a single argument, the
search string that was part of the file link, the part after the
double colon.  The function must first check if it would like to
handle this search, for example by checking the `major-mode' or
the file extension.  If it decides not to handle this search, it
should just return nil to give other functions a chance.  If it
does handle the search, it must return a non-nil value to keep
other functions from trying.

Each function can access the current prefix argument through the
variable `current-prefix-arg'.  Note that a single prefix is used
to force opening a link in Emacs, so it may be good to only use a
numeric or double prefix to guide the search function.

In case this is needed, a function in this hook can also restore
the window configuration before `org-open-at-point' was called using:

    (set-window-configuration org-window-config-before-follow-link)") nil [418186 419238])
            ("org-search-radio-target" function
               (:documentation "Search a radio target matching TARGET in current buffer.
White spaces are not significant."
                :arguments ("target"))
                nil [419240 419941])
            ("org-link-search" function
               (:documentation "Search for a search string S.

If S starts with \"#\", it triggers a custom ID search.

If S is enclosed within parenthesis, it initiates a coderef
search.

If S is surrounded by forward slashes, it is interpreted as
a regular expression.  In Org mode files, this will create an
`org-occur' sparse tree.  In ordinary files, `occur' will be used
to list matches.  If the current buffer is in `dired-mode', grep
will be used to search in all files.

When AVOID-POS is given, ignore matches near that position.

When optional argument STEALTH is non-nil, do not modify
visibility around point, thus ignoring `org-show-context-detail'
variable.

Search is case-insensitive and ignores white spaces.  Return type
of matched result, which is either `dedicated' or `fuzzy'."
                :arguments ("s" "avoid-pos" "stealth"))
                nil [419943 426453])
            ("org-get-buffer-for-internal-link" function
               (:documentation "Return a buffer to be used for displaying the link target of internal links."
                :arguments ("buffer"))
                nil [426455 427105])
            ("org-do-occur" function
               (:documentation "Call the Emacs command `occur'.
If CLEANUP is non-nil, remove the printout of the regular expression
in the *Occur* buffer.  This is useful if the regex is long and not useful
to read."
                :arguments ("regexp" "cleanup"))
                nil [427107 427830])
            ("org-mark-ring" variable (:documentation "Mark ring for positions before jumps in Org mode.") nil [427867 427947])
            ("org-mark-ring-last-goto" variable (:documentation "Last position in the mark ring used to go back.") nil [427948 428036])
            ("setq" code nil nil [428064 428116])
            ("dotimes" code nil nil [428145 428216])
            ("setcdr" code nil nil [428217 428289])
            ("org-mark-ring-push" function
               (:documentation "Put the current position or POS into the mark ring and rotate it."
                :user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [428291 428750])
            ("org-mark-ring-goto" function
               (:documentation "Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org mode commands jumping to a different position in the current file,
or to another Org file, automatically push the old position onto the ring."
                :user-visible-flag t
                :arguments ("n"))
                nil [428752 429495])
            ("org-add-angle-brackets" function (:arguments ("s")) nil [429497 429664])
            ("org-agenda-buffer-tmp-name" variable nil nil [429696 429731])
            ("org-agenda-start-on-weekday" variable nil nil [429732 429768])
            ("org-follow-timestamp-link" function (:documentation "Open an agenda view for the time-stamp date/range at point.") nil [429769 430604])
            ("declare-function" code nil nil [430632 430706])
            ("declare-function" code nil nil [430707 430768])
            ("declare-function" code nil nil [430769 430856])
            ("org-wait" variable nil nil [430857 430878])
            ("org-open-file" function
               (:documentation "Open the file at PATH.
First, this expands any special file name abbreviations.  Then the
configuration variable `org-file-apps' is checked if it contains an
entry for this file type, and if yes, the corresponding command is launched.

If no application is found, Emacs simply visits the file.

With optional prefix argument IN-EMACS, Emacs will visit the file.
With a double \\[universal-argument] \\[universal-argument] prefix arg, Org tries to avoid opening in Emacs
and to use an external application to visit the file.

Optional LINE specifies a line to go to, optional SEARCH a string
to search for.  If LINE or SEARCH is given, the file will be
opened in Emacs, unless an entry from org-file-apps that makes
use of groups in a regexp matches.

If you want to change the way frames are used when following a
link, please customize `org-link-frame-setup'.

If the file does not exist, an error is thrown."
                :arguments ("path" "in-emacs" "line" "search"))
                nil [430879 437083])
            ("org-file-apps-entry-match-against-dlink-p" function
               (:documentation "This function returns non-nil if `entry' uses a regular
expression which should be matched against the whole link by
org-open-file.

It assumes that is the case when the entry uses a regular
expression which has at least one grouping construct and the
action is either a lisp form or a command string containing
`%1', i.e. using at least one subexpression match as a
parameter."
                :arguments ("entry"))
                nil [437085 437749])
            ("org-default-apps" function (:documentation "Return the default applications for this operating system.") nil [437751 438019])
            ("org-apps-regexp-alist" function
               (:documentation "Convert extensions to regular expressions in the cars of LIST.
Also, weed out any non-string entries, because the return value is used
only for regexp matching.
When ADD-AUTO-MODE is set, make all matches in `auto-mode-alist'
point to the symbol `emacs', indicating that the file should
be opened in Emacs."
                :arguments ("list" "add-auto-mode"))
                nil [438021 438676])
            ("ange-ftp-name-format" variable nil nil [438678 438707])
            ("org-file-remote-p" function
               (:documentation "Test whether FILE specifies a location on a remote system.
Return non-nil if the location is indeed remote.

For example, the filename \"/user@host:/foo\" specifies a location
on the system \"/user@host:\"."
                :arguments ("file"))
                nil [438708 439227])
            ("org-get-org-file" function (:documentation "Read a filename, with default directory `org-directory'.") nil [439245 439516])
            ("org-notes-order-reversed-p" function (:documentation "Check if the current file should receive notes in reversed order.") nil [439518 439916])
            ("org-refile-target-table" variable (:documentation "The list of refile targets, created by `org-refile'.") nil [439918 440011])
            ("org-agenda-new-buffers" variable (:documentation "Buffers created to visit agenda files.") nil [440013 440091])
            ("org-refile-cache" variable (:documentation "Cache for refile targets.") nil [440093 440152])
            ("org-refile-markers" variable (:documentation "All the markers used for caching refile locations.") nil [440154 440240])
            ("org-refile-marker" function
               (:documentation "Get a new refile marker, but only if caching is in use."
                :arguments ("pos"))
                nil [440242 440475])
            ("org-refile-cache-clear" function (:documentation "Clear the refile cache and disable all the markers.") nil [440477 440726])
            ("org-refile-cache-check-set" function
               (:documentation "Check if all the markers in the cache still have live buffers."
                :arguments ("set"))
                nil [440728 441155])
            ("org-refile-cache-put" function
               (:documentation "Push the refile targets SET into the cache, under IDENTIFIERS."
                :arguments ("set" "identifiers"))
                nil [441157 441449])
            ("org-refile-cache-get" function
               (:documentation "Retrieve the cached value for refile targets given by IDENTIFIERS."
                :arguments ("identifiers"))
                nil [441451 441824])
            ("org-outline-path-cache" variable (:documentation "Alist between buffer positions and outline paths.
It value is an alist (POSITION . PATH) where POSITION is the
buffer position at the beginning of an entry and PATH is a list
of strings describing the outline path for that entry, in reverse
order.") nil [441826 442113])
            ("org-refile-get-targets" function
               (:documentation "Produce a table with refile targets."
                :arguments ("default-buffer"))
                nil [442115 445821])
            ("org--get-outline-path-1" function
               (:documentation "Return outline path to current headline.

Outline path is a list of strings, in reverse order.  When
optional argument USE-CACHE is non-nil, make use of a cache.  See
`org-get-outline-path' for details.

Assume buffer is widened and point is on a headline."
                :arguments ("use-cache"))
                nil [445823 447013])
            ("org-get-outline-path" function
               (:documentation "Return the outline path to the current entry.

An outline path is a list of ancestors for current headline, as
a list of strings.  Statistics cookies are removed and links are
replaced with their description, if any, or their path otherwise.

When optional argument WITH-SELF is non-nil, the path also
includes the current headline.

When optional argument USE-CACHE is non-nil, cache outline paths
between calls to this function so as to avoid backtracking.  This
argument is useful when planning to find more than one outline
path in the same document.  In that case, there are two
conditions to satisfy:
  - `org-outline-path-cache' is set to nil before starting the
    process;
  - outline paths are computed by increasing buffer positions."
                :arguments ("with-self" "use-cache"))
                nil [447015 447978])
            ("org-format-outline-path" function
               (:documentation "Format the outline path PATH for display.
WIDTH is the maximum number of characters that is available.
PREFIX is a prefix to be included in the returned string,
such as the file name.
SEPARATOR is inserted between the different parts of the path,
the default is \"/\"."
                :arguments ("path" "width" "prefix" "separator"))
                nil [447980 449109])
            ("org-display-outline-path" function
               (:documentation "Display the current outline path in the echo area.

If FILE is non-nil, prepend the output with the file name.
If CURRENT is non-nil, append the current heading to the output.
SEPARATOR is passed through to `org-format-outline-path'.  It separates
the different parts of the path and defaults to \"/\".
If JUST-RETURN-STRING is non-nil, return a string, don't display a message."
                :user-visible-flag t
                :arguments ("file" "current" "separator" "just-return-string"))
                nil [449111 450189])
            ("org-refile-history" variable (:documentation "History for refiling operations.") nil [450191 450259])
            ("org-after-refile-insert-hook" variable (:documentation "Hook run after `org-refile' has inserted its stuff at the new location.
Note that this is still *before* the stuff will be removed from
the *old* location.") nil [450261 450462])
            ("org-capture-last-stored-marker" variable nil nil [450464 450503])
            ("org-refile-keep" variable (:documentation "Non-nil means `org-refile' will copy instead of refile.") nil [450504 450592])
            ("org-copy" function
               (:documentation "Like `org-refile', but copy."
                :user-visible-flag t)
                nil [450594 450737])
            ("org-refile" function
               (:documentation "Move the entry or entries at point to another heading.

The list of target headings is compiled using the information in
`org-refile-targets', which see.

At the target location, the entry is filed as a subitem of the
target heading.  Depending on `org-reverse-note-order', the new
subitem will either be the first or the last subitem.

If there is an active region, all entries in that region will be
refiled.  However, the region must fulfill the requirement that
the first heading sets the top-level of the moved text.

With a `\\[universal-argument]' ARG, the command will only visit the target location
and not actually move anything.

With a prefix `\\[universal-argument] \\[universal-argument]', go to the location where the last
refiling operation has put the subtree.

With a numeric prefix argument of `2', refile to the running clock.

With a numeric prefix argument of `3', emulate `org-refile-keep'
being set to t and copy to the target location, don't move it.
Beware that keeping refiled entries may result in duplicated ID
properties.

RFLOC can be a refile location obtained in a different way.

MSG is a string to replace \"Refile\" in the default prompt with
another verb.  E.g. `org-copy' sets this parameter to \"Copy\".

See also `org-refile-use-outline-path'.

If you are using target caching (see `org-refile-use-cache'), you
have to clear the target cache in order to find new targets.
This can be done with a `0' prefix (`C-0 C-c C-w') or a triple
prefix argument (`C-u C-u C-u C-c C-w')."
                :user-visible-flag t
                :arguments ("arg" "default-buffer" "rfloc" "msg"))
                nil [450739 457225])
            ("org-refile-goto-last-stored" function
               (:documentation "Go to the location where the last refile was stored."
                :user-visible-flag t)
                nil [457227 457460])
            ("org-refile--get-location" function
               (:documentation "When user refile to REFLOC, find the associated target in TBL.
Also check `org-refile-target-table'."
                :arguments ("refloc" "tbl"))
                nil [457462 457828])
            ("org-refile-get-location" function
               (:documentation "Prompt the user for a refile location, using PROMPT.
PROMPT should not be suffixed with a colon and a space, because
this function appends the default value from
`org-refile-history' automatically, if that is not empty."
                :arguments ("prompt" "default-buffer" "new-nodes"))
                nil [457830 460522])
            ("declare-function" code nil nil [460524 460573])
            ("org-refile-check-position" function
               (:documentation "Check if the refile pointer matches the headline to which it points."
                :arguments ("refile-pointer"))
                nil [460574 461322])
            ("org-refile-new-child" function
               (:documentation "Use refile target PARENT-TARGET to add new CHILD below it."
                :arguments ("parent-target" "child"))
                nil [461324 462149])
            ("org-olpath-completing-read" function
               (:documentation "Read an outline path like a file name."
                :arguments ("prompt" "collection" "args"))
                nil [462151 462874])
            ("org-find-dblock" function
               (:documentation "Find the first dynamic block with name NAME in the buffer.
If not found, stay at current position and return nil."
                :arguments ("name"))
                nil [462897 463316])
            ("org-create-dblock" function
               (:documentation "Create a dynamic block section, with parameters taken from PLIST.
PLIST must contain a :name entry which is used as the name of the block."
                :arguments ("plist"))
                nil [463318 463908])
            ("org-prepare-dblock" function (:documentation "Prepare dynamic block for refresh.
This empties the block, puts the cursor at the insert position and returns
the property list including an extra property :name with the block name.") nil [463910 464848])
            ("org-map-dblocks" function
               (:documentation "Apply COMMAND to all dynamic blocks in the current buffer.
If COMMAND is not given, use `org-update-dblock'."
                :arguments ("command"))
                nil [464850 465447])
            ("org-dblock-update" function
               (:documentation "User command for updating dynamic blocks.
Update the dynamic block at point.  With prefix ARG, update all dynamic
blocks in the buffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [465449 465785])
            ("org-update-dblock" function
               (:documentation "Update the dynamic block at point.
This means to empty the block, parse for parameters and then call
the correct writing function."
                :user-visible-flag t)
                nil [465787 466820])
            ("org-beginning-of-dblock" function (:documentation "Find the beginning of the dynamic block at point.
Error if there is no such block at point.") nil [466822 467256])
            ("org-update-all-dblocks" function
               (:documentation "Update all dynamic blocks in the buffer.
This function can be used in a hook."
                :user-visible-flag t)
                nil [467258 467466])
            ("declare-function" code nil nil [467486 467545])
            ("org-get-export-keywords" function (:documentation "Return a list of all currently understood export keywords.
Export keywords include options, block names, attributes and
keywords relative to each registered export back-end.") nil [467546 468141])
            ("org-options-keywords" variable
               (:constant-flag t
                :default-value '("ARCHIVE:" "AUTHOR:" "BIND:" "CATEGORY:" "COLUMNS:" "CREATOR:" "DATE:" "DESCRIPTION:" "DRAWERS:" "EMAIL:" "EXCLUDE_TAGS:" "FILETAGS:" "INCLUDE:" "INDEX:" "KEYWORDS:" "LANGUAGE:" "MACRO:" "OPTIONS:" "PROPERTY:" "PRIORITIES:" "SELECT_TAGS:" "SEQ_TODO:" "SETUPFILE:" "STARTUP:" "TAGS:" "TITLE:" "TODO:" "TYP_TODO:" "SELECT_TAGS:" "EXCLUDE_TAGS:"))
                nil [468143 468538])
            ("org-structure-template-alist" variable
               (:documentation "Structure completion elements.
This is a list of abbreviation keys and values.  The value gets inserted
if you type `<' followed by the key and then press the completion key,
usually `TAB'.  %file will be replaced by a file name after prompting
for the file using completion.  The cursor will be placed at the position
of the `?' in the template.
There are two templates for each key, the first uses the original Org syntax,
the second uses Emacs Muse-like syntax tags.  These Muse-like tags become
the default when the /org-mtags.el/ module has been loaded.  See also the
variable `org-mtags-prefer-muse-templates'."
                :default-value '(("s" "#+BEGIN_SRC ?

#+END_SRC") ("e" "#+BEGIN_EXAMPLE
?
#+END_EXAMPLE") ("q" "#+BEGIN_QUOTE
?
#+END_QUOTE") ("v" "#+BEGIN_VERSE
?
#+END_VERSE") ("V" "#+BEGIN_VERBATIM
?
#+END_VERBATIM") ("c" "#+BEGIN_CENTER
?
#+END_CENTER") ("C" "#+BEGIN_COMMENT
?
#+END_COMMENT") ("l" "#+BEGIN_EXPORT latex
?
#+END_EXPORT") ("L" "#+LaTeX: ") ("h" "#+BEGIN_EXPORT html
?
#+END_EXPORT") ("H" "#+HTML: ") ("a" "#+BEGIN_EXPORT ascii
?
#+END_EXPORT") ("A" "#+ASCII: ") ("i" "#+INDEX: ?") ("I" "#+INCLUDE: %file ?")))
                nil [468540 469939])
            ("org-try-structure-completion" function (:documentation "Try to complete a structure template before point.
This looks for strings like \"<e\" on an otherwise empty line and
expands them.") nil [469941 470445])
            ("org-complete-expand-structure-template" function
               (:documentation "Expand a structure template."
                :arguments ("start" "cell"))
                nil [470447 471225])
            ("org-toggle-comment" function
               (:documentation "Change the COMMENT state of an entry."
                :user-visible-flag t)
                nil [471258 471874])
            ("org-last-todo-state-is-todo" variable (:documentation "This is non-nil when the last TODO state change led to a TODO state.
If the last change removed the TODO tag or switched to DONE, then
this is nil.") nil [471876 472068])
            ("org-setting-tags" variable nil nil [472070 472099])
            ("org-todo-setup-filter-hook" variable (:documentation "Hook for functions that pre-filter todo specs.
Each function takes a todo spec and returns either nil or the spec
transformed into canonical form.") nil [472123 472314])
            ("org-todo-get-default-hook" variable (:documentation "Hook for functions that get a default item for todo.
Each function takes arguments (NEW-MARK OLD-MARK) and returns either
nil or a string to be used for the todo mark.") nil [472316 472527])
            ("org-agenda-headline-snapshot-before-repeat" variable nil nil [472529 472580])
            ("org-current-effective-time" function (:documentation "Return current time adjusted for `org-extend-today-until' variable.") nil [472582 473031])
            ("org-todo-yesterday" function
               (:documentation "Like `org-todo' but the time of change will be 23:59 of yesterday."
                :user-visible-flag t
                :arguments ("arg"))
                nil [473033 473403])
            ("org-block-entry-blocking" variable (:documentation "First entry preventing the TODO state change.") nil [473405 473491])
            ("org-cancel-repeater" function
               (:documentation "Cancel a repeater by setting its numeric value to zero."
                :user-visible-flag t)
                nil [473493 474030])
            ("org-state" variable nil nil [474032 474050])
            ("org-blocked-by-checkboxes" variable nil nil [474051 474085])
            ("org-todo" function
               (:documentation "Change the TODO state of an item.

The state of an item is given by a keyword at the start of the heading,
like
     *** TODO Write paper
     *** DONE Call mom

The different keywords are specified in the variable `org-todo-keywords'.
By default the available states are \"TODO\" and \"DONE\".  So, for this
example: when the item starts with TODO, it is changed to DONE.
When it starts with DONE, the DONE is removed.  And when neither TODO nor
DONE are present, add TODO at the beginning of the heading.

With `\\[universal-argument]' prefix ARG, use completion to determine the new state.
With numeric prefix ARG, switch to that state.
With a `\\[universal-argument] \\[universal-argument]' prefix, switch to the next set of TODO keywords (nextset).
With a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix, circumvent any state blocking.
With a numeric prefix arg of 0, inhibit note taking for the change.
With a numeric prefix arg of -1, cancel repeater to allow marking as DONE.

When called through ELisp, arg is also interpreted in the following way:
`none'        -> empty state
\"\"            -> switch to empty state
`done'        -> switch to DONE
`nextset'     -> switch to the next set of keywords
`previousset' -> switch to the previous set of keywords
\"WAITING\"     -> switch to the specified keyword, but only if it
                 really is a member of `org-todo-keywords'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [474086 484142])
            ("org-block-todo-from-children-or-siblings-or-parent" function
               (:documentation "Block turning an entry into a TODO, using the hierarchy.
This checks whether the current task should be blocked from state
changes.  Such blocking occurs when:

  1. The task has children which are not all in a completed state.

  2. A task has a parent with the property :ORDERED:, and there
     are siblings prior to the current task with incomplete
     status.

  3. The parent of the task is blocked because it has siblings that should
     be done first, or is child of a block grandparent TODO entry."
                :arguments ("change-plist"))
                nil [484144 487094])
            ("org-track-ordered-property-with-tag" variable (:documentation "Should the ORDERED property also be shown as a tag?
The ORDERED property decides if an entry should require subtasks to be
completed in sequence.  Since a property is not very visible, setting
this option means that toggling the ORDERED property with the command
`org-toggle-ordered-property' will also toggle a tag ORDERED.  That tag is
not relevant for the behavior, but it makes things more visible.

Note that toggling the tag with tags commands will not change the property
and therefore not influence behavior!

This can be t, meaning the tag ORDERED should be used,  It can also be a
string to select a different tag for this task.") nil [487129 487970])
            ("org-toggle-ordered-property" function
               (:documentation "Toggle the ORDERED property of the current entry.
For better visibility, you can track the value of this property with a tag.
See variable `org-track-ordered-property-with-tag'."
                :user-visible-flag t)
                nil [487972 488672])
            ("org-block-todo-from-checkboxes" function
               (:documentation "Block turning an entry into a TODO, using checkboxes.
This checks whether the current task should be blocked from state
changes because there are unchecked boxes in this entry."
                :arguments ("change-plist"))
                nil [488674 489928])
            ("org-entry-blocked-p" function (:documentation "Non-nil if entry at point is blocked.") nil [489945 490294])
            ("org-update-statistics-cookies" function
               (:documentation "Update the statistics cookie, either from TODO or from checkboxes.
This should be called with the cursor in a line with a statistics
cookie.  When called with a \\[universal-argument] prefix, update
all statistics cookies in the buffer."
                :user-visible-flag t
                :arguments ("all"))
                nil [490296 491720])
            ("org-entry-property-inherited-from" variable nil nil [491722 491764])
            ("org-update-parent-todo-statistics" function (:documentation "Update any statistics cookie in the parent of the current headline.
When `org-hierarchical-todo-statistics' is nil, statistics will cover
the entire subtree and this will travel up the hierarchy and update
statistics everywhere.") nil [491782 495539])
            ("org-after-todo-statistics-hook" variable (:documentation "Hook that is called after a TODO statistics cookie has been updated.
Each function is called with two arguments: the number of not-done entries
and the number of done entries.

For example, the following function, when added to this hook, will switch
an entry to DONE when all children are done, and back to TODO when new
entries are set to a TODO status.  Note that this hook is only called
when there is a statistics cookie in the headline!

 (defun org-summary-todo (n-done n-not-done)
   \"Switch entry to DONE when all subentries are done, to TODO otherwise.\"
   (let (org-log-done org-log-states)   ; turn off logging
     (org-todo (if (= n-not-done 0) \"DONE\" \"TODO\"))))
") nil [495541 496272])
            ("org-todo-statistics-hook" variable (:documentation "Hook that is run whenever Org thinks TODO statistics should be updated.
This hook runs even if there is no statistics cookie present, in which case
`org-after-todo-statistics-hook' would not run.") nil [496274 496511])
            ("org-todo-trigger-tag-changes" function
               (:documentation "Apply the changes defined in `org-todo-state-tags-triggers'."
                :arguments ("state"))
                nil [496513 497178])
            ("org-local-logging" function
               (:documentation "Get logging settings from a property VALUE."
                :arguments ("value"))
                nil [497180 497763])
            ("org-get-todo-sequence-head" function
               (:documentation "Return the head of the TODO sequence to which KWD belongs.
If KWD is not set, check if there is a text property remembering the
right sequence."
                :arguments ("kwd"))
                nil [497765 498333])
            ("org-fast-todo-selection" function (:documentation "Fast TODO keyword selection with single keys.
Returns the new TODO keyword, or nil if no state change should occur.") nil [498335 500373])
            ("org-entry-is-todo-p" function nil nil [500375 500459])
            ("org-entry-is-done-p" function nil nil [500461 500541])
            ("org-get-todo-state" function (:documentation "Return the TODO keyword of the current subtree.") nil [500543 500781])
            ("org-at-date-range-p" function
               (:documentation "Non-nil if point is inside a date range.

When optional argument INACTIVE-OK is non-nil, also consider
inactive time ranges.

When this function returns a non-nil value, match data is set
according to `org-tr-regexp-both' or `org-tr-regexp', depending
on INACTIVE-OK."
                :user-visible-flag t
                :arguments ("inactive-ok"))
                nil [500783 501561])
            ("org-get-repeat" function
               (:documentation "Check if there is a time-stamp with repeater in this entry.

Return the repeater, as a string, or nil.  Also return nil when
this function is called before first heading.

When optional argument TIMESTAMP is a string, extract the
repeater from there instead."
                :arguments ("timestamp"))
                nil [501563 502334])
            ("org-last-changed-timestamp" variable nil nil [502336 502371])
            ("org-last-inserted-timestamp" variable nil nil [502372 502408])
            ("org-log-post-message" variable nil nil [502409 502438])
            ("org-log-note-purpose" variable nil nil [502439 502468])
            ("org-log-note-how" variable nil nil [502469 502498])
            ("org-log-note-extra" variable nil nil [502499 502526])
            ("org-auto-repeat-maybe" function
               (:documentation "Check if the current headline contains a repeated time-stamp.

If yes, set TODO state back to what it was and change the base date
of repeating deadline/scheduled time stamps to new date.

This function is run automatically after each state change to a DONE state."
                :arguments ("done-word"))
                nil [502527 507238])
            ("org-show-todo-tree" function
               (:documentation "Make a compact tree which shows all headlines marked with TODO.
The tree will show the lines where the regexp matches, and all higher
headlines above the match.
With a `\\[universal-argument]' prefix, prompt for a regexp to match.
With a numeric prefix N, construct a sparse tree for the Nth element
of `org-todo-keywords-1'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [507240 508255])
            ("org--deadline-or-schedule" function
               (:documentation "Insert DEADLINE or SCHEDULE information in current entry.
TYPE is either `deadline' or `scheduled'.  See `org-deadline' or
`org-schedule' for information about ARG and TIME arguments."
                :arguments ("arg" "type" "time"))
                nil [508257 511213])
            ("org-deadline" function
               (:documentation "Insert the \"DEADLINE:\" string with a timestamp to make a deadline.
With one universal prefix argument, remove any deadline from the item.
With two universal prefix arguments, prompt for a warning delay.
With argument TIME, set the deadline at the corresponding date.  TIME
can either be an Org date like \"2011-07-24\" or a delta like \"+2d\"."
                :user-visible-flag t
                :arguments ("arg" "time"))
                nil [511215 512030])
            ("org-schedule" function
               (:documentation "Insert the SCHEDULED: string with a timestamp to schedule a TODO item.
With one universal prefix argument, remove any scheduling date from the item.
With two universal prefix arguments, prompt for a delay cookie.
With argument TIME, scheduled at the corresponding date.  TIME can
either be an Org date like \"2011-07-24\" or a delta like \"+2d\"."
                :user-visible-flag t
                :arguments ("arg" "time"))
                nil [512032 512850])
            ("org-get-scheduled-time" function
               (:documentation "Get the scheduled time as a time tuple, of a format suitable
for calling org-schedule with, or if there is no scheduling,
returns nil."
                :arguments ("pom" "inherit"))
                nil [512852 513174])
            ("org-get-deadline-time" function
               (:documentation "Get the deadline as a time tuple, of a format suitable for
calling org-deadline with, or if there is no scheduling, returns
nil."
                :arguments ("pom" "inherit"))
                nil [513176 513490])
            ("org-remove-timestamp-with-keyword" function
               (:documentation "Remove all time stamps with KEYWORD in the current entry."
                :arguments ("keyword"))
                nil [513492 514159])
            ("org-time-was-given" variable nil nil [514161 514188])
            ("org-end-time-was-given" variable nil nil [514220 514251])
            ("org-at-planning-p" function (:documentation "Non-nil when point is on a planning info line.") nil [514284 514801])
            ("org-add-planning-info" function
               (:documentation "Insert new timestamp with keyword in the planning line.
WHAT indicates what kind of time stamp to add.  It is a symbol
among `closed', `deadline', `scheduled' and nil.  TIME indicates
the time to use.  If none is given, the user is prompted for
a date.  REMOVE indicates what kind of entries to remove.  An old
WHAT entry will also be removed."
                :arguments ("what" "time" "remove"))
                nil [514803 518386])
            ("org-log-note-marker" variable
               (:documentation "Marker pointing at the entry where the note is to be inserted."
                :default-value (make-marker))
                nil [518388 518497])
            ("org-log-note-purpose" variable nil nil [518498 518531])
            ("org-log-note-state" variable nil nil [518532 518563])
            ("org-log-note-previous-state" variable nil nil [518564 518604])
            ("org-log-note-extra" variable nil nil [518605 518636])
            ("org-log-note-window-configuration" variable nil nil [518637 518683])
            ("org-log-note-return-to" variable (:default-value (make-marker)) nil [518684 518729])
            ("org-log-note-effective-time" variable (:documentation "Remembered current time so that dynamically scoped
`org-extend-today-until' affects timestamps in state change log") nil [518730 518889])
            ("org-log-post-message" variable (:documentation "Message to be displayed after a log note has been stored.
The auto-repeater uses this.") nil [518891 519015])
            ("org-add-note" function
               (:documentation "Add a note to the current entry.
This is done in the same way as adding a state change note."
                :user-visible-flag t)
                nil [519017 519181])
            ("org-log-beginning" function
               (:documentation "Return expected start of log notes in current entry.
When optional argument CREATE is non-nil, the function creates
a drawer to store notes, if necessary.  Returned position ignores
narrowing."
                :arguments ("create"))
                nil [519183 520674])
            ("org-add-log-setup" function
               (:documentation "Set up the post command hook to take a note.
If this is about to TODO state change, the new state is expected in STATE.
HOW is an indicator what kind of note should be created.
EXTRA is additional text that will be inserted into the notes buffer."
                :arguments ("purpose" "state" "prev-state" "how" "extra"))
                nil [520676 521311])
            ("org-skip-over-state-notes" function (:documentation "Skip past the list of State notes in an entry.") nil [521313 522084])
            ("org-add-log-note" function
               (:documentation "Pop up a window for taking a note, and add this note later."
                :arguments ("_purpose"))
                nil [522086 523716])
            ("org-note-abort" variable nil nil [523718 523745])
            ("org-store-log-note" function (:documentation "Finish taking a log note, and insert it to where it belongs.") nil [523767 527479])
            ("org-remove-empty-drawer-at" function
               (:documentation "Remove an empty drawer at position POS.
POS may also be a marker."
                :arguments ("pos"))
                nil [527481 528097])
            ("org-ts-type" variable nil nil [528099 528123])
            ("org-sparse-tree" function
               (:documentation "Create a sparse tree, prompt for the details.
This command can create sparse trees.  You first need to select the type
of match used to create the tree:

t      Show all TODO entries.
T      Show entries with a specific TODO keyword.
m      Show entries selected by a tags/property match.
p      Enter a property name and its value (both with completion on existing
       names/values) and show entries with that property.
r      Show entries matching a regular expression (`/' can be used as well).
b      Show deadlines and scheduled items before a date.
a      Show deadlines and scheduled items after a date.
d      Show deadlines due within `org-deadline-warning-days'.
D      Show deadlines and scheduled items between a date range."
                :user-visible-flag t
                :arguments ("arg" "type"))
                nil [528124 530498])
            ("defvar-local" code nil nil [530500 530584])
            ("defvar-local" code nil nil [530585 531144])
            ("org-occur" function
               (:documentation "Make a compact tree which shows all matches of REGEXP.

The tree will show the lines where the regexp matches, and any other context
defined in `org-show-context-detail', which see.

When optional argument KEEP-PREVIOUS is non-nil, highlighting and exposing
done by a previous call to `org-occur' will be kept, to allow stacking of
calls to this command.

Optional argument CALLBACK can be a function of no argument.  In this case,
it is called with point at the end of the match, match data being set
accordingly.  Current match is shown only if the return value is non-nil.
The function must neither move point nor alter narrowing."
                :user-visible-flag t
                :arguments ("regexp" "keep-previous" "callback"))
                nil [531146 533105])
            ("org-occur-next-match" function
               (:documentation "Function for `next-error-function' to find sparse tree matches.
N is the number of matches to move, when negative move backwards.
This function always goes back to the starting point when no
match is found."
                :arguments ("n" "_reset"))
                nil [533107 533945])
            ("org-show-context" function
               (:documentation "Make sure point and context are visible.
Optional argument KEY, when non-nil, is a symbol.  See
`org-show-context-detail' for allowed values and how much is to
be shown."
                :arguments ("key"))
                nil [533947 534356])
            ("org-show-set-visibility" function
               (:documentation "Set visibility around point according to DETAIL.
DETAIL is either nil, `minimal', `local', `ancestors', `lineage',
`tree', `canonical' or t.  See `org-show-context-detail' for more
information."
                :arguments ("detail"))
                nil [534358 535646])
            ("org-reveal-start-hook" variable (:documentation "Hook run before revealing a location.") nil [535648 535724])
            ("org-reveal" function
               (:documentation "Show current entry, hierarchy above it, and the following headline.

This can be used to show a consistent set of context around
locations exposed with `org-show-context'.

With optional argument SIBLINGS, on each level of the hierarchy all
siblings are shown.  This repairs the tree structure to what it would
look like when opened with hierarchical calls to `org-cycle'.

With a \\[universal-argument] \\[universal-argument] prefix, go to the parent and show the entire tree."
                :user-visible-flag t
                :arguments ("siblings"))
                nil [535726 536571])
            ("org-highlight-new-match" function
               (:documentation "Highlight from BEG to END and mark the highlight is an occur headline."
                :arguments ("beg" "end"))
                nil [536573 536852])
            ("org-remove-occur-highlights" function
               (:documentation "Remove the occur highlights from the buffer.
BEG and END are ignored.  If NOREMOVE is nil, remove this function
from the `before-change-functions' in the current buffer."
                :user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [536854 537380])
            ("org-priority-regexp" variable
               (:documentation "Regular expression matching the priority indicator."
                :default-value ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)")
                nil [537399 537518])
            ("org-remove-priority-next-time" variable nil nil [537520 537562])
            ("org-priority-up" function
               (:documentation "Increase the priority of the current item."
                :user-visible-flag t)
                nil [537564 537674])
            ("org-priority-down" function
               (:documentation "Decrease the priority of the current item."
                :user-visible-flag t)
                nil [537676 537790])
            ("org-priority" function
               (:documentation "Change the priority of an item.
ACTION can be `set', `up', `down', or a character."
                :user-visible-flag t
                :arguments ("action" "_show"))
                nil [537792 540747])
            ("org-show-priority" function
               (:documentation "Show the priority of the current item.
This priority is composed of the main priority given with the [#A] cookies,
and by additional input from the age of a schedules or deadline entry."
                :user-visible-flag t)
                nil [540749 541270])
            ("org-get-priority" function
               (:documentation "Find priority cookie and return priority."
                :arguments ("s"))
                nil [541272 541636])
            ("org-agenda-archives-mode" variable nil nil [541649 541682])
            ("org-map-continue-from" variable (:documentation "Position from where mapping should continue.
Can be set by the action argument to `org-scan-tags' and `org-map-entries'.") nil [541683 541842])
            ("org-scanner-tags" variable (:documentation "The current tag list while the tags scanner is running.") nil [541844 541933])
            ("org-trust-scanner-tags" variable (:documentation "Should `org-get-tags-at' use the tags for the scanner.
This is for internal dynamical scoping only.
When this is non-nil, the function `org-get-tags-at' will return the value
of `org-scanner-tags' instead of building the list by itself.  This
can lead to large speed-ups when the tags scanner is used in a file with
many entries, and when the list of tags is retrieved, for example to
obtain a list of properties.  Building the tags list for each entry in such
a file becomes an N^2 operation - but with this variable set, it scales
as N.") nil [541935 542513])
            ("org--matcher-tags-todo-only" variable nil nil [542515 542555])
            ("org-scan-tags" function
               (:documentation "Scan headline tags with inheritance and produce output ACTION.

ACTION can be `sparse-tree' to produce a sparse tree in the current buffer,
or `agenda' to produce an entry list for an agenda view.  It can also be
a Lisp form or a function that should be called at each matched headline, in
this case the return value is a list of all return values from these calls.

MATCHER is a function accepting three arguments, returning
a non-nil value whenever a given set of tags qualifies a headline
for inclusion.  See `org-make-tags-matcher' for more information.
As a special case, it can also be set to t (respectively nil) in
order to match all (respectively none) headline.

When TODO-ONLY is non-nil, only lines with a TODO keyword are
included in the output.

START-LEVEL can be a string with asterisks, reducing the scope to
headlines matching this string."
                :arguments ("action" "matcher" "todo-only" "start-level"))
                nil [542557 548701])
            ("org-remove-uninherited-tags" function
               (:documentation "Remove all tags that are not inherited from the list TAGS."
                :arguments ("tags"))
                nil [548703 549368])
            ("org-match-sparse-tree" function
               (:documentation "Create a sparse tree according to tags string MATCH.

MATCH is a string with match syntax.  It can contain a selection
of tags (\"+work+urgent-boss\"), properties (\"LEVEL>3\"), and
TODO keywords (\"TODO=\\\"WAITING\\\"\") or a combination of
those.  See the manual for details.

If optional argument TODO-ONLY is non-nil, only select lines that
are also TODO tasks."
                :user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [549370 550025])
            ("defalias" code nil nil [550027 550082])
            ("org-cached-props" variable nil nil [550084 550113])
            ("org-cached-entry-get" function (:arguments ("pom" "property")) nil [550114 550758])
            ("org-global-tags-completion-table" function
               (:documentation "Return the list of all tags in all agenda buffer/files.
Optional FILES argument is a list of files which can be used
instead of the agenda files."
                :arguments ("files"))
                nil [550760 551365])
            ("org-make-tags-matcher" function
               (:documentation "Create the TAGS/TODO matcher form for the selection string MATCH.

Returns a cons of the selection string MATCH and a function
implementing the matcher.

The matcher is to be called at an Org entry, with point on the
headline, and returns non-nil if the entry matches the selection
string MATCH.  It must be called with three arguments: the TODO
keyword at the entry (or nil if none), the list of all tags at
the entry including inherited ones and the reduced level of the
headline.  Additionally, the category of the entry, if any, must
be specified as the text property `org-category' on the headline.

This function sets the variable `org--matcher-tags-todo-only' to
a non-nil value if the matcher restricts matching to TODO
entries, otherwise it is not touched.

See also `org-scan-tags'."
                :arguments ("match"))
                nil [551367 557065])
            ("org-tags-expand" function
               (:documentation "Expand group tags in MATCH.

This replaces every group tag in MATCH with a regexp tag search.
For example, a group tag \"Work\" defined as { Work : Lab Conf }
will be replaced like this:

   Work =>  {\\<\\(?:Work\\|Lab\\|Conf\\)\\>}
  +Work => +{\\<\\(?:Work\\|Lab\\|Conf\\)\\>}
  -Work => -{\\<\\(?:Work\\|Lab\\|Conf\\)\\>}

Replacing by a regexp preserves the structure of the match.
E.g., this expansion

  Work|Home => {\\(?:Work\\|Lab\\|Conf\\}|Home

will match anything tagged with \"Lab\" and \"Home\", or tagged
with \"Conf\" and \"Home\" or tagged with \"Work\" and \"home\".

A group tag in MATCH can contain regular expressions of its own.
For example, a group tag \"Proj\" defined as { Proj : {P@.+} }
will be replaced like this:

   Proj => {\\<\\(?:Proj\\)\\>\\|P@.+}

When the optional argument SINGLE-AS-LIST is non-nil, MATCH is
assumed to be a single group tag, and the function will return
the list of tags in this group.

When DOWNCASE is non-nil, expand downcased TAGS."
                :arguments ("match" "single-as-list" "downcased" "tags-already-expanded"))
                nil [557067 562085])
            ("org-op-to-function" function
               (:documentation "Turn an operator into the appropriate function."
                :arguments ("op" "stringp"))
                nil [562087 562631])
            ("org<>" function (:arguments ("a" "b")) nil [562633 562666])
            ("org-string<=" function (:arguments ("a" "b")) nil [562667 562726])
            ("org-string>=" function (:arguments ("a" "b")) nil [562727 562773])
            ("org-string>" function (:arguments ("a" "b")) nil [562774 562846])
            ("org-string<>" function (:arguments ("a" "b")) nil [562847 562893])
            ("org-time=" function (:arguments ("a" "b")) nil [562894 562987])
            ("org-time<" function (:arguments ("a" "b")) nil [562988 563081])
            ("org-time<=" function (:arguments ("a" "b")) nil [563082 563175])
            ("org-time>" function (:arguments ("a" "b")) nil [563176 563269])
            ("org-time>=" function (:arguments ("a" "b")) nil [563270 563363])
            ("org-time<>" function (:arguments ("a" "b")) nil [563364 563457])
            ("org-2ft" function
               (:documentation "Convert S to a floating point time.
If S is already a number, just return it.  If it is a string, parse
it as a time string and apply `float-time' to it.  If S is nil, just return 0."
                :arguments ("s"))
                nil [563458 563823])
            ("org-time-today" function (:documentation "Time in seconds today at 0:00.
Returns the float number of seconds since the beginning of the
epoch to the beginning of today (00:00).") nil [563825 564075])
            ("org-matcher-time" function
               (:documentation "Interpret a time comparison value."
                :arguments ("s"))
                nil [564077 564660])
            ("org-match-any-p" function
               (:documentation "Does re match any element of list?"
                :arguments ("re" "list"))
                nil [564662 564813])
            ("org-add-colon-after-tag-completion" variable nil nil [564815 564862])
            ("org-tags-overlay" variable (:default-value (make-overlay 1 1)) nil [564892 564936])
            ("delete-overlay" code nil nil [564937 564970])
            ("org-get-local-tags-at" function
               (:documentation "Get a list of tags defined in the current headline."
                :arguments ("pos"))
                nil [564972 565104])
            ("org-get-local-tags" function (:documentation "Get a list of tags defined in the current headline.") nil [565106 565222])
            ("org-get-tags-at" function
               (:documentation "Get a list of all headline tags applicable at POS.
POS defaults to point.  If tags are inherited, the list contains
the targets in the same sequence as the headlines appear, i.e.
the tags of the current headline come last.
When LOCAL is non-nil, only return tags from the current headline,
ignore inherited ones."
                :user-visible-flag t
                :arguments ("pos" "local"))
                nil [565224 566705])
            ("org-add-prop-inherited" function (:arguments ("s")) nil [566707 566799])
            ("org-toggle-tag" function
               (:documentation "Toggle the tag TAG for the current line.
If ONOFF is `on' or `off', don't toggle but set to this state."
                :arguments ("tag" "onoff"))
                nil [566801 567809])
            ("org--align-tags-here" function
               (:documentation "Align tags on the current headline to TO-COL.
Assume point is on a headline."
                :arguments ("to-col"))
                nil [567811 568515])
            ("org-set-tags-command" function
               (:documentation "Call the set-tags command for the current entry."
                :user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [568517 568922])
            ("org-set-tags-to" function
               (:documentation "Set the tags of the current entry to DATA, replacing current tags.
DATA may be a tags string like \":aa:bb:cc:\", or a list of tags.
If DATA is nil or the empty string, all tags are removed."
                :user-visible-flag t
                :arguments ("data"))
                nil [568924 569875])
            ("org-align-all-tags" function
               (:documentation "Align the tags in all headings."
                :user-visible-flag t)
                nil [569877 570126])
            ("org-indent-indentation-per-level" variable nil nil [570128 570169])
            ("org-set-tags" function
               (:documentation "Set the tags for the current headline.
With prefix ARG, realign all tags in headings in the current buffer.
When JUST-ALIGN is non-nil, only align tags."
                :user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [570170 574169])
            ("org-change-tag-in-region" function
               (:documentation "Add or remove TAG for each entry in the region.
This works in the agenda, and also in an Org buffer."
                :user-visible-flag t
                :arguments ("beg" "end" "tag" "off"))
                nil [574171 575704])
            ("org-tags-completion-function" function (:arguments ("string" "_predicate" "flag")) nil [575706 576521])
            ("org-fast-tag-insert" function
               (:documentation "Insert KDW, and the TAGS, the latter with face FACE.
Also insert END."
                :arguments ("kwd" "tags" "face" "end"))
                nil [576523 576779])
            ("org-fast-tag-show-exit" function (:arguments ("flag")) nil [576781 577122])
            ("org-set-current-tags-overlay" function
               (:documentation "Add an overlay to CURRENT tag with PREFIX."
                :arguments ("current" "prefix"))
                nil [577124 577426])
            ("org-last-tag-selection-key" variable nil nil [577428 577467])
            ("org-fast-tag-selection" function
               (:documentation "Fast tag selection with single keys.
CURRENT is the current list of tags in the headline, INHERITED is the
list of inherited tags, and TABLE is an alist of tags and corresponding keys,
possibly with grouping information.  TODO-TABLE is a similar table with
TODO keywords, should these have keys assigned to them.
If the keys are nil, a-z are automatically assigned.
Returns the new tags string, or nil to not change the current settings."
                :arguments ("current" "inherited" "table" "todo-table"))
                nil [577468 584537])
            ("org-get-tags-string" function (:documentation "Get the TAGS string in the current headline.") nil [584539 584836])
            ("org-get-tags" function (:documentation "Get the list of tags specified in the current headline.") nil [584838 584968])
            ("org-get-buffer-tags" function (:documentation "Get a table of all tags used in the buffer, for completion.") nil [584970 585435])
            ("org-agenda-skip-comment-trees" variable nil nil [585459 585497])
            ("org-agenda-skip-function" variable nil nil [585498 585531])
            ("org-map-entries" function
               (:documentation "Call FUNC at each headline selected by MATCH in SCOPE.

FUNC is a function or a lisp form.  The function will be called without
arguments, with the cursor positioned at the beginning of the headline.
The return values of all calls to the function will be collected and
returned as a list.

The call to FUNC will be wrapped into a save-excursion form, so FUNC
does not need to preserve point.  After evaluation, the cursor will be
moved to the end of the line (presumably of the headline of the
processed entry) and search continues from there.  Under some
circumstances, this may not produce the wanted results.  For example,
if you have removed (e.g. archived) the current (sub)tree it could
mean that the next entry will be skipped entirely.  In such cases, you
can specify the position from where search should continue by making
FUNC set the variable `org-map-continue-from' to the desired buffer
position.

MATCH is a tags/property/todo match as it is used in the agenda tags view.
Only headlines that are matched by this query will be considered during
the iteration.  When MATCH is nil or t, all headlines will be
visited by the iteration.

SCOPE determines the scope of this command.  It can be any of:

nil     The current buffer, respecting the restriction if any
tree    The subtree started with the entry at point
region  The entries within the active region, if any
region-start-level
        The entries within the active region, but only those at
        the same level than the first one.
file    The current buffer, without restriction
file-with-archives
        The current buffer, and any archives associated with it
agenda  All agenda files
agenda-with-archives
        All agenda files with any archive files associated with them
(file1 file2 ...)
        If this is a list, all files in the list will be scanned

The remaining args are treated as settings for the skipping facilities of
the scanner.  The following items can be given here:

  archive    skip trees with the archive tag
  comment    skip trees with the COMMENT keyword
  function or Emacs Lisp form:
             will be used as value for `org-agenda-skip-function', so
             whenever the function returns a position, FUNC will not be
             called for that entry and search will continue from the
             position returned

If your function needs to retrieve the tags including inherited tags
at the *current* entry, you can use the value of the variable
`org-scanner-tags' which will be much faster than getting the value
with `org-get-tags-at'.  If your function gets properties with
`org-entry-properties' at the *current* entry, bind `org-trust-scanner-tags'
to t around the call to `org-entry-properties' to get the same speedup.
Note that if your function moves around to retrieve tags and properties at
a *different* entry, you cannot use these techniques."
                :arguments ("func" "match" "scope" "skip"))
                nil [585532 591026])
            ("org-special-properties" variable
               (:documentation "The special properties valid in Org mode.
These are properties that are not defined in the property drawer,
but in some other way."
                :constant-flag t
                :default-value '("ALLTAGS" "BLOCKED" "CLOCKSUM" "CLOCKSUM_T" "CLOSED" "DEADLINE" "FILE" "ITEM" "PRIORITY" "SCHEDULED" "TAGS" "TIMESTAMP" "TIMESTAMP_IA" "TODO"))
                nil [591048 591367])
            ("org-default-properties" variable
               (:documentation "Some properties that are used by Org mode for various purposes.
Being in this list makes sure that they are offered for completion."
                :constant-flag t
                :default-value '("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "CUSTOM_ID" "LOCATION" "LOGGING" "COLUMNS" "VISIBILITY" "TABLE_EXPORT_FORMAT" "TABLE_EXPORT_FILE" "EXPORT_OPTIONS" "EXPORT_TEXT" "EXPORT_FILE_NAME" "EXPORT_TITLE" "EXPORT_AUTHOR" "EXPORT_DATE" "UNNUMBERED" "ORDERED" "NOBLOCKING" "COOKIE_DATA" "LOG_INTO_DRAWER" "REPEAT_TO_STATE" "CLOCK_MODELINE_TOTAL" "STYLE" "HTML_CONTAINER_CLASS"))
                nil [591369 591945])
            ("org--valid-property-p" function
               (:documentation "Non nil when string PROPERTY is a valid property name."
                :arguments ("property"))
                nil [591947 592122])
            ("org--update-property-plist" function
               (:documentation "Associate KEY to VAL in alist PROPS.
Modifications are made by side-effect.  Return new alist."
                :arguments ("key" "val" "props"))
                nil [592124 592536])
            ("org-get-property-block" function
               (:documentation "Return the (beg . end) range of the body of the property drawer.
BEG is the beginning of the current subtree, or of the part
before the first headline.  If it is not given, it will be found.
If the drawer does not exist, create it if FORCE is non-nil, or
return nil."
                :arguments ("beg" "force"))
                nil [592538 593600])
            ("org-at-property-p" function (:documentation "Non-nil when point is inside a property drawer.
See `org-property-re' for match data, if applicable.") nil [593602 593987])
            ("org-property-action" function
               (:documentation "Do an action on properties."
                :user-visible-flag t)
                nil [593989 594491])
            ("org-inc-effort" function
               (:documentation "Increment the value of the effort property in the current entry."
                :user-visible-flag t)
                nil [594493 594628])
            ("org-clock-effort" variable nil nil [594630 594655])
            ("org-clock-current-task" variable nil nil [594689 594720])
            ("org-set-effort" function
               (:documentation "Set the effort property of the current entry.
With numerical prefix arg, use the nth allowed value, 0 stands for the
10th allowed value.

When INCREMENT is non-nil, set the property to the next allowed value."
                :user-visible-flag t
                :arguments ("value" "increment"))
                nil [594748 596608])
            ("org-entry-properties" function
               (:documentation "Get all properties of the current entry.

When POM is a buffer position, get all properties from the entry
there instead.

This includes the TODO keyword, the tags, time strings for
deadline, scheduled, and clocking, and any additional properties
defined in the entry.

If WHICH is nil or `all', get all properties.  If WHICH is
`special' or `standard', only get that subclass.  If WHICH is
a string, only get that property.

Return value is an alist.  Keys are properties, as upcased
strings."
                :arguments ("pom" "which"))
                nil [596610 604595])
            ("org--property-local-values" function
               (:documentation "Return value for PROPERTY in current entry.
Value is a list whose car is the base value for PROPERTY and cdr
a list of accumulated values.  Return nil if neither is found in
the entry.  Also return nil when PROPERTY is set to \"nil\",
unless LITERAL-NIL is non-nil."
                :arguments ("property" "literal-nil"))
                nil [604597 605577])
            ("org--property-global-value" function
               (:documentation "Return value for PROPERTY in current buffer.
Return value is a string.  Return nil if property is not set
globally.  Also return nil when PROPERTY is set to \"nil\",
unless LITERAL-NIL is non-nil."
                :arguments ("property" "literal-nil"))
                nil [605579 606074])
            ("org-entry-get" function
               (:documentation "Get value of PROPERTY for entry or content at point-or-marker POM.

If INHERIT is non-nil and the entry does not have the property,
then also check higher levels of the hierarchy.  If INHERIT is
the symbol `selective', use inheritance only if the setting in
`org-use-property-inheritance' selects PROPERTY for inheritance.

If the property is present but empty, the return value is the
empty string.  If the property is not present at all, nil is
returned.  In any other case, return the value as a string.
Search is case-insensitive.

If LITERAL-NIL is set, return the string value \"nil\" as
a string, do not interpret it as the list atom nil.  This is used
for inheritance when a \"nil\" value can supersede a non-nil
value higher up the hierarchy."
                :arguments ("pom" "property" "inherit" "literal-nil"))
                nil [606076 607558])
            ("org-property-or-variable-value" function
               (:documentation "Check if there is a property fixing the value of VAR.
If yes, return this value.  If not, return the current value of the variable."
                :arguments ("var" "inherit"))
                nil [607560 607921])
            ("org-entry-delete" function
               (:documentation "Delete PROPERTY from entry at point-or-marker POM.
Accumulated properties, i.e. PROPERTY+, are also removed.  Return
non-nil when a property was removed."
                :arguments ("pom" "property"))
                nil [607923 608722])
            ("org-entry-add-to-multivalued-property" function
               (:documentation "Add VALUE to the words in the PROPERTY in entry at point-or-marker POM."
                :arguments ("pom" "property" "value"))
                nil [608868 609298])
            ("org-entry-remove-from-multivalued-property" function
               (:documentation "Remove VALUE from words in the PROPERTY in entry at point-or-marker POM."
                :arguments ("pom" "property" "value"))
                nil [609300 609727])
            ("org-entry-member-in-multivalued-property" function
               (:documentation "Is VALUE one of the words in the PROPERTY in entry at point-or-marker POM?"
                :arguments ("pom" "property" "value"))
                nil [609729 610038])
            ("org-entry-get-multivalued-property" function
               (:documentation "Return a list of values in a multivalued property."
                :arguments ("pom" "property"))
                nil [610040 610290])
            ("org-entry-put-multivalued-property" function
               (:documentation "Set multivalued PROPERTY at point-or-marker POM to VALUES.
VALUES should be a list of strings.  Spaces will be protected."
                :arguments ("pom" "property" "values"))
                nil [610292 610706])
            ("org-entry-protect-space" function
               (:documentation "Protect spaces and newline in string S."
                :arguments ("s"))
                nil [610708 610936])
            ("org-entry-restore-space" function
               (:documentation "Restore spaces and newline in string S."
                :arguments ("s"))
                nil [610938 611166])
            ("org-entry-property-inherited-from" variable
               (:documentation "Marker pointing to the entry from where a property was inherited.
Each call to `org-entry-get-with-inheritance' will set this marker to the
location of the entry where the inheritance search matched.  If there was
no match, the marker will point nowhere.
Note that also `org-entry-get' calls this function, if the INHERIT flag
is set."
                :default-value (make-marker))
                nil [611168 611563])
            ("org-entry-get-with-inheritance" function
               (:documentation "Get PROPERTY of entry or content at point, search higher levels if needed.
The search will stop at the first ancestor which has the property defined.
If the value found is \"nil\", return nil to show that the property
should be considered as undefined (this is the meaning of nil here).
However, if LITERAL-NIL is set, return the string value \"nil\" instead."
                :arguments ("property" "literal-nil"))
                nil [611565 612756])
            ("org-property-changed-functions" variable (:documentation "Hook called when the value of a property has changed.
Each hook function should accept two arguments, the name of the property
and the new value.") nil [612758 612951])
            ("org-entry-put" function
               (:documentation "Set PROPERTY to VALUE for entry at point-or-marker POM.

If the value is nil, it is converted to the empty string.  If it
is not a string, an error is raised.  Also raise an error on
invalid property names.

PROPERTY can be any regular property (see
`org-special-properties').  It can also be \"TODO\",
\"PRIORITY\", \"SCHEDULED\" and \"DEADLINE\".

For the last two properties, VALUE may have any of the special
values \"earlier\" and \"later\".  The function then increases or
decreases scheduled or deadline date by one day."
                :arguments ("pom" "property" "value"))
                nil [612953 616008])
            ("org-buffer-property-keys" function
               (:documentation "Get all property keys in the current buffer.

When SPECIALS is non-nil, also list the special properties that
reflect things like tags and TODO state.

When DEFAULTS is non-nil, also include properties that has
special meaning internally: ARCHIVE, CATEGORY, SUMMARY,
DESCRIPTION, LOCATION, and LOGGING and others.

When COLUMNS in non-nil, also include property names given in
COLUMN formats in the current buffer.

When IGNORE-MALFORMED is non-nil, malformed drawer repair will not be
automatically performed, such drawers will be silently ignored."
                :arguments ("specials" "defaults" "columns" "ignore-malformed"))
                nil [616010 618785])
            ("org-property-values" function
               (:documentation "List all non-nil values of property KEY in current buffer."
                :arguments ("key"))
                nil [618787 619122])
            ("org-insert-property-drawer" function (:documentation "Insert a property drawer into the current entry.") nil [619124 619911])
            ("org-insert-drawer" function
               (:documentation "Insert a drawer at point.

When optional argument ARG is non-nil, insert a property drawer.

Optional argument DRAWER, when non-nil, is a string representing
drawer's name.  Otherwise, the user is prompted for a name.

If a region is active, insert the drawer around that region
instead.

Point is left between drawer's boundaries."
                :user-visible-flag t
                :arguments ("arg" "drawer"))
                nil [619913 621967])
            ("org-property-set-functions-alist" variable (:documentation "Property set function alist.
Each entry should have the following format:

 (PROPERTY . READ-FUNCTION)

The read function will be called with the same argument as
`org-completing-read'.") nil [621969 622204])
            ("org-set-property-function" function
               (:documentation "Get the function that should be used to set PROPERTY.
This is computed according to `org-property-set-functions-alist'."
                :arguments ("property"))
                nil [622206 622464])
            ("org-read-property-value" function
               (:documentation "Read PROPERTY value from user."
                :arguments ("property"))
                nil [622466 623126])
            ("org-last-set-property" variable nil nil [623128 623162])
            ("org-last-set-property-value" variable nil nil [623163 623203])
            ("org-read-property-name" function (:documentation "Read a property name.") nil [623204 623625])
            ("org-set-property-and-value" function
               (:documentation "Allow to set [PROPERTY]: [value] direction from prompt.
When use-default, don't even ask, just use the last
\"[PROPERTY]: [value]\" string from the history."
                :user-visible-flag t
                :arguments ("use-last"))
                nil [623627 624256])
            ("org-set-property" function
               (:documentation "In the current entry, set PROPERTY to VALUE.

When called interactively, this will prompt for a property name, offering
completion on existing and default properties.  And then it will prompt
for a value, offering completion either on allowed values (via an inherited
xxx_ALL property) or on existing values in other instances of this property
in the current file.

Throw an error when trying to set a property with an invalid name."
                :user-visible-flag t
                :arguments ("property" "value"))
                nil [624258 625547])
            ("org-find-property" function
               (:documentation "Find first entry in buffer that sets PROPERTY.

When optional argument VALUE is non-nil, only consider an entry
if it contains PROPERTY set to this value.  If PROPERTY should be
explicitly set to nil, use string \"nil\" for VALUE.

Return position where the entry begins, or nil if there is no
such entry.  If narrowing is in effect, only search the visible
part of the buffer."
                :arguments ("property" "value"))
                nil [625549 626321])
            ("org-delete-property" function
               (:documentation "In the current entry, delete PROPERTY."
                :user-visible-flag t
                :arguments ("property"))
                nil [626323 626916])
            ("org-delete-property-globally" function
               (:documentation "Remove PROPERTY globally, from all entries.
This function ignores narrowing, if any."
                :user-visible-flag t
                :arguments ("property"))
                nil [626918 627554])
            ("org-columns-current-fmt-compiled" variable nil nil [627556 627597])
            ("org-compute-property-at-point" function
               (:documentation "Compute the property at point.
This looks for an enclosing column format, extracts the operator and
then applies it to the property in the column format's scope."
                :user-visible-flag t)
                nil [627627 628177])
            ("org-property-allowed-value-functions" variable (:documentation "Hook for functions supplying allowed values for a specific property.
The functions must take a single argument, the name of the property, and
return a flat list of allowed values.  If \":ETC\" is one of
the values, this means that these values are intended as defaults for
completion, but that other values should be allowed too.
The functions must return nil if they are not responsible for this
property.") nil [628179 628639])
            ("org-property-get-allowed-values" function
               (:documentation "Get allowed values for the property PROPERTY.
When TABLE is non-nil, return an alist that can directly be used for
completion."
                :arguments ("pom" "property" "table"))
                nil [628641 629863])
            ("org-property-previous-allowed-value" function
               (:documentation "Switch to the next allowed value for this property."
                :user-visible-flag t
                :arguments ("_previous"))
                nil [629865 630040])
            ("org-property-next-allowed-value" function
               (:documentation "Switch to the next allowed value for this property."
                :user-visible-flag t
                :arguments ("previous"))
                nil [630042 631445])
            ("org-find-olp" function
               (:documentation "Return a marker pointing to the entry at outline path OLP.
If anything goes wrong, throw an error.
You can wrap this call to catch the error like this:

  (condition-case msg
      (org-mobile-locate-entry (match-string 4))
    (error (nth 1 msg)))

The return value will then be either a string with the error message,
or a marker if everything is OK.

If THIS-BUFFER is set, the outline path does not contain a file,
only headings."
                :arguments ("path" "this-buffer"))
                nil [631447 633081])
            ("org-find-exact-headline-in-buffer" function
               (:documentation "Find node HEADING in BUFFER.
Return a marker to the heading if it was found, or nil if not.
If POS-ONLY is set, return just the position instead of a marker.

The heading text must match exact, but it may have a TODO keyword,
a priority cookie and tags in the standard locations."
                :arguments ("heading" "buffer" "pos-only"))
                nil [633083 633798])
            ("org-find-exact-heading-in-directory" function
               (:documentation "Find Org node headline HEADING in all \".org\" files in directory DIR.
When the target headline is found, return a marker to this location."
                :arguments ("heading" "dir"))
                nil [633800 634509])
            ("org-find-entry-with-id" function
               (:documentation "Locate the entry that contains the ID property with exact value IDENT.
IDENT can be a string, a symbol or a number, this function will search for
the string representation of it.
Return the position where this entry starts, or nil if there is no such entry."
                :user-visible-flag t
                :arguments ("ident"))
                nil [634511 635105])
            ("org-last-changed-timestamp" variable nil nil [635124 635163])
            ("org-last-inserted-timestamp" variable (:documentation "The last time stamp inserted with `org-insert-time-stamp'.") nil [635164 635267])
            ("org-time-stamp" function
               (:documentation "Prompt for a date/time and insert a time stamp.

If the user specifies a time like HH:MM or if this command is
called with at least one prefix argument, the time stamp contains
the date and the time.  Otherwise, only the date is included.

All parts of a date not specified by the user are filled in from
the timestamp at point, if any, or the current date/time
otherwise.

If there is already a timestamp at the cursor, it is replaced.

With two universal prefix arguments, insert an active timestamp
with the current time without prompting the user.

When called from lisp, the timestamp is inactive if INACTIVE is
non-nil."
                :user-visible-flag t
                :arguments ("arg" "inactive"))
                nil [635269 637929])
            ("org-get-compact-tod" function (:arguments ("s")) nil [638010 638644])
            ("org-time-stamp-inactive" function
               (:documentation "Insert an inactive time stamp.

An inactive time stamp is enclosed in square brackets instead of angle
brackets.  It is inactive in the sense that it does not trigger agenda entries,
does not link to the calendar and cannot be changed with the S-cursor keys.
So these are more for recording a certain time/date.

If the user specifies a time like HH:MM or if this command is called with
at least one prefix argument, the time stamp contains the date and the time.
Otherwise, only the date is included.

When called with two universal prefix arguments, insert an active time stamp
with the current time without prompting the user."
                :user-visible-flag t
                :arguments ("arg"))
                nil [638646 639380])
            ("org-date-ovl" variable (:default-value (make-overlay 1 1)) nil [639382 639422])
            ("overlay-put" code nil nil [639423 639474])
            ("delete-overlay" code nil nil [639475 639504])
            ("org-ans1" variable nil nil [639506 639523])
            ("org-ans2" variable nil nil [639555 639572])
            ("org-plain-time-of-day-regexp" variable nil nil [639605 639642])
            ("org-overriding-default-time" variable nil nil [639660 639700])
            ("org-read-date-overlay" variable nil nil [639722 639756])
            ("org-dcst" variable nil nil [639757 639778])
            ("org-read-date-history" variable nil nil [639800 639834])
            ("org-read-date-final-answer" variable nil nil [639835 639874])
            ("org-read-date-analyze-futurep" variable nil nil [639875 639917])
            ("org-read-date-analyze-forced-year" variable nil nil [639918 639964])
            ("org-read-date-inactive" variable nil nil [639965 639996])
            ("org-read-date-minibuffer-local-map" variable
               (:documentation "Keymap for minibuffer commands when using `org-read-date'."
                :default-value (let* ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (org-defkey map (kbd ".") (lambda nil (interactive) (if (looking-back "^[^:]+: " (let ((inhibit-field-text-motion t)) (line-beginning-position))) (org-eval-in-calendar '(calendar-goto-today)) (insert ".")))) (org-defkey map (kbd "C-.") (lambda nil (interactive) (org-eval-in-calendar '(calendar-goto-today)))) (org-defkey map [(meta shift left)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))) (org-defkey map [(meta shift right)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-month 1)))) (org-defkey map [(meta shift up)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-year 1)))) (org-defkey map [(meta shift down)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-year 1)))) (org-defkey map [27 (shift left)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))) (org-defkey map [27 (shift right)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-month 1)))) (org-defkey map [27 (shift up)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-year 1)))) (org-defkey map [27 (shift down)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-year 1)))) (org-defkey map [(shift up)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-week 1)))) (org-defkey map [(shift down)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-week 1)))) (org-defkey map [(shift left)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-backward-day 1)))) (org-defkey map [(shift right)] (lambda nil (interactive) (org-eval-in-calendar '(calendar-forward-day 1)))) (org-defkey map "!" (lambda nil (interactive) (org-eval-in-calendar '(diary-view-entries)) (message ""))) (org-defkey map ">" (lambda nil (interactive) (org-eval-in-calendar '(calendar-scroll-left 1)))) (org-defkey map "<" (lambda nil (interactive) (org-eval-in-calendar '(calendar-scroll-right 1)))) (org-defkey map "" (lambda nil (interactive) (org-eval-in-calendar '(calendar-scroll-left-three-months 1)))) (org-defkey map "\366" (lambda nil (interactive) (org-eval-in-calendar '(calendar-scroll-right-three-months 1)))) map))
                nil [639998 643195])
            ("org-def" variable nil nil [643197 643213])
            ("org-defdecode" variable nil nil [643214 643236])
            ("org-with-time" variable nil nil [643237 643259])
            ("calendar-setup" variable nil nil [643261 643284])
            ("org-read-date" function
               (:documentation "Read a date, possibly a time, and make things smooth for the user.
The prompt will suggest to enter an ISO date, but you can also enter anything
which will at least partially be understood by `parse-time-string'.
Unrecognized parts of the date will default to the current day, month, year,
hour and minute.  If this command is called to replace a timestamp at point,
or to enter the second timestamp of a range, the default time is taken
from the existing stamp.  Furthermore, the command prefers the future,
so if you are giving a date where the year is not given, and the day-month
combination is already past in the current year, it will assume you
mean next year.  For details, see the manual.  A few examples:

  3-2-5         --> 2003-02-05
  feb 15        --> currentyear-02-15
  2/15          --> currentyear-02-15
  sep 12 9      --> 2009-09-12
  12:45         --> today 12:45
  22 sept 0:34  --> currentyear-09-22 0:34
  12            --> currentyear-currentmonth-12
  Fri           --> nearest Friday after today
  -Tue          --> last Tuesday
  etc.

Furthermore you can specify a relative date by giving, as the *first* thing
in the input:  a plus/minus sign, a number and a letter [hdwmy] to indicate
change in days weeks, months, years.
With a single plus or minus, the date is relative to today.  With a double
plus or minus, it is relative to the date in DEFAULT-TIME.  E.g.
  +4d           --> four days from today
  +4            --> same as above
  +2w           --> two weeks from today
  ++5           --> five days from default date

The function understands only English month and weekday abbreviations.

While prompting, a calendar is popped up - you can also select the
date with the mouse (button 1).  The calendar shows a period of three
months.  To scroll it to other months, use the keys `>' and `<'.
If you don't like the calendar, turn it off with
       (setq org-read-date-popup-calendar nil)

With optional argument TO-TIME, the date will immediately be converted
to an internal time.
With an optional argument WITH-TIME, the prompt will suggest to
also insert a time.  Note that when WITH-TIME is not set, you can
still enter a time, and this function will inform the calling routine
about this change.  The calling routine may then choose to change the
format used to insert the time stamp into the buffer to include the time.
With optional argument FROM-STRING, read from this string instead from
the user.  PROMPT can overwrite the default prompt.  DEFAULT-TIME is
the time/date that is used for everything that is not specified by the
user."
                :arguments ("with-time" "to-time" "from-string" "prompt" "default-time" "default-input" "inactive"))
                nil [643309 649942])
            ("org-read-date-display" function (:documentation "Display the current date prompt interpretation in the minibuffer.") nil [649944 651410])
            ("org-read-date-analyze" function
               (:documentation "Analyze the combined answer of the date prompt."
                :arguments ("ans" "def" "defdecode"))
                nil [651412 660515])
            ("parse-time-weekdays" variable nil nil [660517 660545])
            ("org-read-date-get-relative" function
               (:documentation "Check string S for special relative date string.
TODAY and DEFAULT are internal times, for today and for a default.
Return shift list (N what def-flag)
WHAT       is \"d\", \"w\", \"m\", or \"y\" for day, week, month, year.
N          is the number of WHATs to shift.
DEF-FLAG   is t when a double ++ or -- indicates shift relative to
           the DEFAULT date rather than TODAY."
                :arguments ("s" "today" "default"))
                nil [660546 662086])
            ("org-order-calendar-date-args" function
               (:documentation "Turn a user-specified date into the internal representation.
The internal representation needed by the calendar is (month day year).
This is a wrapper to handle the brain-dead convention in calendar that
user function argument order change dependent on argument order."
                :arguments ("arg1" "arg2" "arg3"))
                nil [662088 662553])
            ("org-eval-in-calendar" function
               (:documentation "Eval FORM in the calendar window and return to current window.
Unless KEEPDATE is non-nil, update `org-ans2' to the cursor date."
                :arguments ("form" "keepdate"))
                nil [662555 663237])
            ("org-calendar-select" function
               (:documentation "Return to `org-read-date' with the date currently selected.
This is used by `org-read-date' in a temporary keymap for the calendar buffer."
                :user-visible-flag t)
                nil [663239 663694])
            ("org-insert-time-stamp" function
               (:documentation "Insert a date stamp for the date given by the internal TIME.
See `format-time-string' for the format of TIME.
WITH-HM means use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
PRE and POST are optional strings to be inserted before and after the
stamp.
The command returns the inserted time stamp."
                :arguments ("time" "with-hm" "inactive" "pre" "post" "extra"))
                nil [663696 664931])
            ("org-toggle-time-stamp-overlays" function
               (:documentation "Toggle the use of custom time stamp formats."
                :user-visible-flag t)
                nil [664933 665687])
            ("org-display-custom-time" function
               (:documentation "Overlay modified time stamp format over timestamp between BEG and END."
                :arguments ("beg" "end"))
                nil [665689 666458])
            ("org-fix-decoded-time" function
               (:documentation "Set 0 instead of nil for the first 6 elements of time.
Don't touch the rest."
                :arguments ("time"))
                nil [666460 666661])
            ("org-time-stamp-to-now" function
               (:documentation "Difference between TIMESTAMP-STRING and now in days.
If SECONDS is non-nil, return the difference in seconds."
                :arguments ("timestamp-string" "seconds"))
                nil [666663 667007])
            ("org-deadline-close-p" function
               (:documentation "Is the time in TIMESTAMP-STRING close to the current date?"
                :arguments ("timestamp-string" "ndays"))
                nil [667009 667289])
            ("org-get-wdays" function
               (:documentation "Get the deadline lead time appropriate for timestring TS.
When DELAY is non-nil, get the delay time for scheduled items
instead of the deadline lead time.  When ZERO-DELAY is non-nil
and `org-scheduled-delay-days' is 0, enforce 0 as the delay,
don't try to find the delay cookie in the scheduled timestamp."
                :arguments ("ts" "delay" "zero-delay"))
                nil [667291 668239])
            ("org-calendar-select-mouse" function
               (:documentation "Return to `org-read-date' with the date currently selected.
This is used by `org-read-date' in a temporary keymap for the calendar buffer."
                :user-visible-flag t
                :arguments ("ev"))
                nil [668241 668731])
            ("org-check-deadlines" function
               (:documentation "Check if there are any deadlines due or past due.
A deadline is considered due if it happens within `org-deadline-warning-days'
days from today's date.  If the deadline appears in an entry marked DONE,
it is not shown.  A numeric prefix argument NDAYS can be used to test that
many days.  If the prefix is a raw `\\[universal-argument]', all deadlines are shown."
                :user-visible-flag t
                :arguments ("ndays"))
                nil [668733 669596])
            ("org-re-timestamp" function
               (:documentation "Return a regexp for timestamp TYPE.
Allowed values for TYPE are:

        all: all timestamps
     active: only active timestamps (<...>)
   inactive: only inactive timestamps ([...])
  scheduled: only scheduled timestamps
   deadline: only deadline timestamps
     closed: only closed time-stamps

When TYPE is nil, fall back on returning a regexp that matches
both scheduled and deadline timestamps."
                :arguments ("type"))
                nil [669598 670394])
            ("org-check-before-date" function
               (:documentation "Check if there are deadlines or scheduled entries before date D."
                :user-visible-flag t
                :arguments ("d"))
                nil [670396 671089])
            ("org-check-after-date" function
               (:documentation "Check if there are deadlines or scheduled entries after date D."
                :user-visible-flag t
                :arguments ("d"))
                nil [671091 671783])
            ("org-check-dates-range" function
               (:documentation "Check for deadlines/scheduled entries between START-DATE and END-DATE."
                :user-visible-flag t
                :arguments ("start-date" "end-date"))
                nil [671785 672690])
            ("org-evaluate-time-range" function
               (:documentation "Evaluate a time range by computing the difference between start and end.
Normally the result is just printed in the echo area, but with prefix arg
TO-BUFFER, the result is inserted just after the date stamp into the buffer.
If the time range is actually in a table, the result is inserted into the
next column.
For time difference computation, a year is assumed to be exactly 365
days in order to avoid rounding problems."
                :user-visible-flag t
                :arguments ("to-buffer"))
                nil [672692 674990])
            ("org-make-tdiff-string" function (:arguments ("y" "d" "h" "m")) nil [674992 675498])
            ("org-time-string-to-time" function
               (:documentation "Convert timestamp string S into internal time."
                :arguments ("s"))
                nil [675500 675636])
            ("org-time-string-to-seconds" function
               (:documentation "Convert a timestamp string S into a number of seconds."
                :arguments ("s"))
                nil [675638 675778])
            ("org-define-error" code nil nil [675780 675852])
            ("org-time-string-to-absolute" function
               (:documentation "Convert time stamp S to an absolute day number.

If DAYNR in non-nil, and there is a specifier for a cyclic time
stamp, get the closest date to DAYNR.  If PREFER is
`past' (respectively `future') return a date past (respectively
after) or equal to DAYNR.

POS is the location of time stamp S, as a buffer position in
BUFFER.

Diary sexp timestamps are matched against DAYNR, when non-nil.
If matching fails or DAYNR is nil, `org-diary-sexp-no-match' is
signaled."
                :arguments ("s" "daynr" "prefer" "buffer" "pos"))
                nil [675854 677106])
            ("org-days-to-iso-week" function
               (:documentation "Return the iso week number."
                :arguments ("days"))
                nil [677108 677238])
            ("org-small-year-to-year" function
               (:documentation "Convert 2-digit years into 4-digit years.
YEAR is expanded into one of the 30 next years, if possible, or
into a past one.  Any year larger than 99 is returned unchanged."
                :arguments ("year"))
                nil [677240 677774])
            ("org-time-from-absolute" function
               (:documentation "Return the time corresponding to date D.
D may be an absolute day number, or a calendar-type list (month day year)."
                :arguments ("d"))
                nil [677776 678047])
            ("org-agenda-current-date" variable nil nil [678049 678081])
            ("org-calendar-holiday" function (:documentation "List of holidays, for Diary display in Org mode.") nil [678082 678297])
            ("org-diary-sexp-entry" function
               (:documentation "Process a SEXP diary ENTRY for date D."
                :arguments ("sexp" "entry" "d"))
                nil [678299 679075])
            ("org-diary-to-ical-string" function
               (:documentation "Get iCalendar entries from diary entries in buffer FROMBUF.
This uses the icalendar.el library."
                :arguments ("frombuf"))
                nil [679077 679867])
            ("org-closest-date" function
               (:documentation "Return closest date to CURRENT starting from START.

CURRENT and START are both time stamps.

When PREFER is `past', return a date that is either CURRENT or
past.  When PREFER is `future', return a date that is either
CURRENT or future.

Only time stamps with a repeater are modified.  Any other time
stamp stay unchanged.  In any case, return value is an absolute
day number."
                :arguments ("start" "current" "prefer"))
                nil [679869 683215])
            ("org-date-to-gregorian" function
               (:documentation "Turn any specification of date D into a Gregorian date for the calendar."
                :arguments ("d"))
                nil [683217 683572])
            ("org-parse-time-string" function
               (:documentation "Parse the standard Org time string.

This should be a lot faster than the normal `parse-time-string'.

If time is not given, defaults to 0:00.  However, with optional
NODEFAULT, hour and minute fields will be nil if not given."
                :arguments ("s" "nodefault"))
                nil [683574 684633])
            ("org-timestamp-up" function
               (:documentation "Increase the date item at the cursor by one.
If the cursor is on the year, change the year.  If it is on the month,
the day or the time, change that.
With prefix ARG, change by that many units."
                :user-visible-flag t
                :arguments ("arg"))
                nil [684635 684957])
            ("org-timestamp-down" function
               (:documentation "Decrease the date item at the cursor by one.
If the cursor is on the year, change the year.  If it is on the month,
the day or the time, change that.
With prefix ARG, change by that many units."
                :user-visible-flag t
                :arguments ("arg"))
                nil [684959 685287])
            ("org-timestamp-up-day" function
               (:documentation "Increase the date in the time stamp by one day.
With prefix ARG, change that many days."
                :user-visible-flag t
                :arguments ("arg"))
                nil [685289 685601])
            ("org-timestamp-down-day" function
               (:documentation "Decrease the date in the time stamp by one day.
With prefix ARG, change that many days."
                :user-visible-flag t
                :arguments ("arg"))
                nil [685603 685923])
            ("org-at-timestamp-p" function
               (:documentation "Non-nil if point is inside a timestamp.

By default, the function only consider syntactically valid active
timestamps.  However, the caller may have a broader definition
for timestamps.  As a consequence, optional argument EXTENDED can
be set to the following values

  `inactive'

    Include also syntactically valid inactive timestamps.

  `agenda'

    Include timestamps allowed in Agenda, i.e., those in
    properties drawers, planning lines and clock lines.

  `lax'

    Ignore context.  The function matches any part of the
    document looking like a timestamp.  This includes comments,
    example blocks...

For backward-compatibility with Org 9.0, every other non-nil
value is equivalent to `inactive'.

When at a timestamp, return the position of the point as a symbol
among `bracket', `after', `year', `month', `hour', `minute',
`day' or a number of character from the last know part of the
time stamp.

When matching, the match groups are the following:
  group 1: year
  group 2: month
  group 3: day number
  group 4: day name
  group 5: hours, if any
  group 6: minutes, if any"
                :arguments ("extended"))
                nil [685925 688434])
            ("org-toggle-timestamp-type" function
               (:documentation "Toggle the type (<active> or [inactive]) of a time stamp."
                :user-visible-flag t)
                nil [688436 688956])
            ("org-at-clock-log-p" function (:documentation "Non-nil if point is on a clock log line.") nil [688958 689154])
            ("org-clock-history" variable nil nil [689156 689182])
            ("org-clock-adjust-closest" variable nil nil [689229 689266])
            ("org-timestamp-change" function
               (:documentation "Change the date in the time stamp at point.
The date will be changed by N times WHAT.  WHAT can be `day', `month',
`year', `minute', `second'.  If WHAT is not given, the cursor position
in the timestamp determines what will be changed.
When SUPPRESS-TMP-DELAY is non-nil, suppress delays like \"--2d\"."
                :arguments ("n" "what" "updown" "suppress-tmp-delay"))
                nil [689302 695370])
            ("org-modify-ts-extra" function
               (:documentation "Change the different parts of the lead-time and repeat fields in timestamp."
                :arguments ("s" "pos" "n" "dm"))
                nil [695372 696894])
            ("org-recenter-calendar" function
               (:documentation "If the calendar is visible, recenter it to date D."
                :arguments ("d"))
                nil [696896 697202])
            ("org-goto-calendar" function
               (:documentation "Go to the Emacs calendar at the current date.
If there is a time stamp in the current line, go to that date.
A prefix ARG can be used to force the current date."
                :user-visible-flag t
                :arguments ("arg"))
                nil [697204 697893])
            ("org-get-date-from-calendar" function (:documentation "Return a list (month day year) of date at point in calendar.") nil [697895 698088])
            ("org-date-from-calendar" function
               (:documentation "Insert time stamp corresponding to cursor date in *Calendar* buffer.
If there is already a time stamp at the cursor position, update it."
                :user-visible-flag t)
                nil [698090 698512])
            ("org-effort-durations" variable
               (:documentation "Conversion factor to minutes for an effort modifier.

Each entry has the form (MODIFIER . MINUTES).

In an effort string, a number followed by MODIFIER is multiplied
by the specified number of MINUTES to obtain an effort in
minutes.

For example, if the value of this variable is ((\"hours\" . 60)), then an
effort string \"2hours\" is equivalent to 120 minutes."
                :default-value `(("min" . 1) ("h" . 60) ("d" \, (* 60 8)) ("w" \, (* 60 8 5)) ("m" \, (* 60 8 5 4)) ("y" \, (* 60 8 5 40))))
                nil [698514 699207])
            ("org-image-actual-width" variable
               (:documentation "Should we use the actual width of images when inlining them?

When set to t, always use the image width.

When set to a number, use imagemagick (when available) to set
the image's width to this value.

When set to a number in a list, try to get the width from any
#+ATTR.* keyword if it matches a width specification like

  #+ATTR_HTML: :width 300px

and fall back on that number if none is found.

When set to nil, try to get the width from an #+ATTR.* keyword
and fall back on the original width if none is found.

This requires Emacs >= 24.1, build with imagemagick support."
                :default-value t)
                nil [699209 700117])
            ("org-agenda-inhibit-startup" variable (:documentation "Inhibit startup when preparing agenda buffers.
When this variable is t, the initialization of the Org agenda
buffers is inhibited: e.g. the visibility state is not set, the
tables are not re-aligned, etc.") nil [700119 700426])
            ("org-agenda-ignore-properties" variable (:documentation "Avoid updating text properties when building the agenda.
Properties are used to prepare buffers for effort estimates,
appointments, statistics and subtree-local categories.
If you don't use these in the agenda, you can add them to this
list and agenda building will be a bit faster.
The value is a list, with zero or more of the symbols `effort', `appt',
`stats' or `category'.") nil [700428 701039])
            ("org-save-all-org-buffers" function
               (:documentation "Save all Org buffers without user confirmation."
                :user-visible-flag t)
                nil [701053 701356])
            ("org-revert-all-org-buffers" function
               (:documentation "Revert all Org buffers.
Prompt for confirmation when there are unsaved changes.
Be sure you know what you are doing before letting this function
overwrite your changes.

This function is useful in a setup where one tracks Org files
with a version control system, to revert on one machine after pulling
changes from another.  I believe the procedure must be like this:

1. M-x org-save-all-org-buffers
2. Pull changes from the other machine, resolve conflicts
3. M-x org-revert-all-org-buffers"
                :user-visible-flag t)
                nil [701358 702344])
            ("org-switchb" function
               (:documentation "Switch between Org buffers.

With `\\[universal-argument]' prefix, restrict available buffers to files.

With `\\[universal-argument] \\[universal-argument]' prefix, restrict available buffers to agenda files."
                :user-visible-flag t
                :arguments ("arg"))
                nil [702380 702896])
            ("org-buffer-list" function
               (:documentation "Return a list of Org buffers.
PREDICATE can be `export', `files' or `agenda'.

export   restrict the list to Export buffers.
files    restrict the list to buffers visiting Org files.
agenda   restrict the list to buffers visiting agenda files.

If EXCLUDE-TMP is non-nil, ignore temporary buffers."
                :arguments ("predicate" "exclude-tmp"))
                nil [702898 704132])
            ("org-agenda-files" function
               (:documentation "Get the list of agenda files.
Optional UNRESTRICTED means return the full list even if a restriction
is currently in place.
When ARCHIVES is t, include all archive files that are really being
used by the agenda files.  If ARCHIVE is `ifmode', do this only if
`org-agenda-archives-mode' is t."
                :arguments ("unrestricted" "archives"))
                nil [704134 705262])
            ("org-agenda-file-p" function
               (:documentation "Return non-nil, if FILE is an agenda file.
If FILE is omitted, use the file associated with the current
buffer."
                :arguments ("file"))
                nil [705264 705588])
            ("org-edit-agenda-file-list" function
               (:documentation "Edit the list of agenda files.
Depending on setup, this either uses customize to edit the variable
`org-agenda-files', or it visits the file that is holding the list.  In the
latter case, the buffer is set up in a way that saving it automatically kills
the buffer and restores the previous window configuration."
                :user-visible-flag t)
                nil [705590 706512])
            ("org-store-new-agenda-file-list" function
               (:documentation "Set new value for the agenda file list and save it correctly."
                :arguments ("list"))
                nil [706514 707175])
            ("org-read-agenda-file-list" function
               (:documentation "Read the list of agenda files from a file.
If PAIR-WITH-EXPANSION is t return pairs with un-expanded
filenames, used by `org-store-new-agenda-file-list' to write back
un-expanded file names."
                :arguments ("pair-with-expansion"))
                nil [707177 707895])
            ("org-cycle-agenda-files" function
               (:documentation "Cycle through the files in `org-agenda-files'.
If the current buffer visits an agenda file, find the next one in the list.
If the current buffer does not, find the first agenda file."
                :user-visible-flag t)
                nil [707912 708543])
            ("org-agenda-file-to-front" function
               (:documentation "Move/add the current file to the top of the agenda file list.
If the file is not present in the list, it is added to the front.  If it is
present, it is moved there.  With optional argument TO-END, add/move to the
end of the list."
                :user-visible-flag t
                :arguments ("to-end"))
                nil [708545 709569])
            ("org-remove-file" function
               (:documentation "Remove current file from the list of files in variable `org-agenda-files'.
These are the files which are being checked for agenda entries.
Optional argument FILE means use this file instead of the current."
                :user-visible-flag t
                :arguments ("file"))
                nil [709571 710471])
            ("org-file-menu-entry" function (:arguments ("file")) nil [710473 710548])
            ("org-check-agenda-file" function
               (:documentation "Make sure FILE exists.  If not, ask user what to do."
                :arguments ("file"))
                nil [710550 710947])
            ("org-get-agenda-file-buffer" function
               (:documentation "Get an agenda buffer visiting FILE.
If the buffer needs to be created, add it to the list of buffers
which might be released later."
                :arguments ("file"))
                nil [710949 711361])
            ("org-release-buffers" function
               (:documentation "Release all buffers in list, asking the user for confirmation when needed.
When a buffer is unmodified, it is just killed.  When modified, it is saved
(if the user agrees) and then killed."
                :arguments ("blist"))
                nil [711363 711834])
            ("org-agenda-prepare-buffers" function
               (:documentation "Create buffers for all agenda files, protect archived trees and comments."
                :user-visible-flag t
                :arguments ("files"))
                nil [711836 714594])
            ("org-cdlatex-mode-map" variable
               (:documentation "Keymap for the minor `org-cdlatex-mode'."
                :default-value (make-sparse-keymap))
                nil [714623 714718])
            ("org-defkey" code nil nil [714720 714787])
            ("org-defkey" code nil nil [714788 714855])
            ("org-defkey" code nil nil [714856 714914])
            ("org-defkey" code nil nil [714915 714977])
            ("org-defkey" code nil nil [714978 715051])
            ("org-cdlatex-texmathp-advice-is-done" variable (:documentation "Flag remembering if we have applied the advice to texmathp already.") nil [715053 715173])
            ("define-minor-mode" code nil nil [715175 716381])
            ("turn-on-org-cdlatex" function (:documentation "Unconditionally turn on `org-cdlatex-mode'.") nil [716383 716484])
            ("org-try-cdlatex-tab" function (:documentation "Check if it makes sense to execute `cdlatex-tab', and do it if yes.
It makes sense to do so if `org-cdlatex-mode' is active and if the cursor is
  - inside a LaTeX fragment, or
  - after the first word in a line, where an abbreviation expansion could
    insert a LaTeX environment.") nil [716486 717278])
            ("org-cdlatex-underscore-caret" function
               (:documentation "Execute `cdlatex-sub-superscript' in LaTeX fragments.
Revert to the normal definition outside of these fragments."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [717280 717656])
            ("org-cdlatex-math-modify" function
               (:documentation "Execute `cdlatex-math-modify' in LaTeX fragments.
Revert to the normal definition outside of these fragments."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [717658 718021])
            ("org-cdlatex-environment-indent" function
               (:documentation "Execute `cdlatex-environment' and indent the inserted environment.

ENVIRONMENT and ITEM are passed to `cdlatex-environment'.

The inserted environment is indented to current indentation
unless point is at the beginning of the line, in which the
environment remains unintended."
                :user-visible-flag t
                :arguments ("environment" "item"))
                nil [718023 720041])
            ("org-inside-LaTeX-fragment-p" function (:documentation "Test if point is inside a LaTeX fragment.
I.e. after a \\begin, \\(, \\[, $, or $$, without the corresponding closing
sequence appearing also before point.
Even though the matchers for math are configurable, this function assumes
that \\begin, \\(, \\[, and $$ are always used.  Only the single dollar
delimiters are skipped when they have been removed by customization.
The return value is nil, or a cons cell with the delimiter and the
position of this delimiter.

This function does a reasonably good job, but can locally be fooled by
for example currency specifications.  For example it will assume being in
inline math after \"$22.34\".  The LaTeX fragment formatter will only format
fragments that are properly closed, but during editing, we have to live
with the uncertainty caused by missing closing delimiters.  This function
looks only before point, not after.") nil [720067 721991])
            ("org-inside-latex-macro-p" function (:documentation "Is point inside a LaTeX macro or its arguments?") nil [721993 722193])
            ("org--format-latex-make-overlay" function
               (:documentation "Build an overlay between BEG and END using IMAGE file.
Argument IMAGETYPE is the extension of the displayed image,
as a string.  It defaults to \"png\"."
                :arguments ("beg" "end" "image" "imagetype"))
                nil [722195 722811])
            ("org--list-latex-overlays" function
               (:documentation "List all Org LaTeX overlays in current buffer.
Limit to overlays between BEG and END when those are provided."
                :arguments ("beg" "end"))
                nil [722813 723133])
            ("org-remove-latex-fragment-image-overlays" function
               (:documentation "Remove all overlays with LaTeX fragment images in current buffer.
When optional arguments BEG and END are non-nil, remove all
overlays between them instead.  Return a non-nil value when some
overlays were removed, nil otherwise."
                :arguments ("beg" "end"))
                nil [723135 723542])
            ("org-toggle-latex-fragment" function
               (:documentation "Preview the LaTeX fragment at point, or all locally or globally.

If the cursor is on a LaTeX fragment, create the image and overlay
it over the source code, if there is none.  Remove it otherwise.
If there is no fragment at point, display all fragments in the
current section.

With prefix ARG, preview or clear image for all fragments in the
current subtree or in the whole buffer when used before the first
headline.  With a prefix ARG `\\[universal-argument] \\[universal-argument]' preview or clear images
for all fragments in the buffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [723544 726220])
            ("org-format-latex" function
               (:documentation "Replace LaTeX fragments with links to an image.

The function takes care of creating the replacement image.

Only consider fragments between BEG and END when those are
provided.

When optional argument OVERLAYS is non-nil, display the image on
top of the fragment instead of replacing it.

PROCESSING-TYPE is the conversion method to use, as a symbol.

Some of the options can be changed using the variable
`org-format-latex-options', which see."
                :arguments ("prefix" "beg" "end" "dir" "overlays" "msg" "forbuffer" "processing-type"))
                nil [726222 730805])
            ("org-create-math-formula" function
               (:documentation "Convert LATEX-FRAG to MathML and store it in MATHML-FILE.
Use `org-latex-to-mathml-convert-command'.  If the conversion is
sucessful, return the portion between \"<math...> </math>\"
elements otherwise return nil.  When MATHML-FILE is specified,
write the results in to that file.  When invoked as an
interactive command, prompt for LATEX-FRAG, with initial value
set to the current active region and echo the results for user
inspection."
                :user-visible-flag t
                :arguments ("latex-frag" "mathml-file"))
                nil [730807 733275])
            ("org-format-latex-as-mathml" function
               (:documentation "Use `org-create-math-formula' but check local cache first."
                :arguments ("latex-frag" "latex-frag-type" "prefix" "dir"))
                nil [733277 734412])
            ("org--get-display-dpi" function (:documentation "Get the DPI of the display.
The function assumes that the display has the same pixel width in
the horizontal and vertical directions.") nil [734414 734750])
            ("org-create-formula-image" function
               (:documentation "Create an image from LaTeX source using external processes.

The LaTeX STRING is saved to a temporary LaTeX file, then
converted to an image file by process PROCESSING-TYPE defined in
`org-preview-latex-process-alist'.  A nil value defaults to
`org-preview-latex-default-process'.

The generated image file is eventually moved to TOFILE.

The OPTIONS argument controls the size, foreground color and
background color of the generated image.

When BUFFER non-nil, this function is used for LaTeX previewing.
Otherwise, it is used to deal with LaTeX snippets showed in
a HTML file."
                :arguments ("string" "tofile" "options" "buffer" "processing-type"))
                nil [734752 738984])
            ("org-splice-latex-header" function
               (:documentation "Fill a LaTeX header template TPL.
In the template, the following place holders will be recognized:

 [DEFAULT-PACKAGES]      \\usepackage statements for DEF-PKG
 [NO-DEFAULT-PACKAGES]   do not include DEF-PKG
 [PACKAGES]              \\usepackage statements for PKG
 [NO-PACKAGES]           do not include PKG
 [EXTRA]                 the string EXTRA
 [NO-EXTRA]              do not include EXTRA

For backward compatibility, if both the positive and the negative place
holder is missing, the positive one (without the \"NO-\") will be
assumed to be present at the end of the template.
DEF-PKG and PKG are assumed to be alists of options/packagename lists.
EXTRA is a string.
SNIPPETS-P indicates if this is run to create snippet images for HTML."
                :arguments ("tpl" "def-pkg" "pkg" "snippets-p" "extra"))
                nil [738986 740806])
            ("org-latex-packages-to-string" function
               (:documentation "Turn an alist of packages into a string with the \\usepackage macros."
                :arguments ("pkg" "snippets-p" "newline"))
                nil [740808 741332])
            ("org-dvipng-color" function
               (:documentation "Return a RGB color specification for dvipng."
                :arguments ("attr"))
                nil [741334 741477])
            ("org-dvipng-color-format" function
               (:documentation "Convert COLOR-NAME to a RGB color value for dvipng."
                :arguments ("color-name"))
                nil [741479 741674])
            ("org-latex-color" function
               (:documentation "Return a RGB color for the LaTeX color package."
                :arguments ("attr"))
                nil [741676 741820])
            ("org-latex-color-format" function
               (:documentation "Convert COLOR-NAME to a RGB color value."
                :arguments ("color-name"))
                nil [741822 742001])
            ("org-normalize-color" function
               (:documentation "Return string to be used as color value for an RGB component."
                :arguments ("value"))
                nil [742003 742138])
            ("defvar-local" code nil nil [742161 742205])
            ("org-toggle-inline-images" function
               (:documentation "Toggle the display of inline images.
INCLUDE-LINKED is passed to `org-display-inline-images'."
                :user-visible-flag t
                :arguments ("include-linked"))
                nil [742207 742812])
            ("org-redisplay-inline-images" function
               (:documentation "Refresh the display of inline images."
                :user-visible-flag t)
                nil [742814 743044])
            ("declare-function" code nil nil [743071 743134])
            ("org-display-inline-images" function
               (:documentation "Display inline images.

An inline image is a link which follows either of these
conventions:

  1. Its path is a file with an extension matching return value
     from `image-file-name-regexp' and it has no contents.

  2. Its description consists in a single link of the previous
     type.

When optional argument INCLUDE-LINKED is non-nil, also links with
a text description part will be inlined.  This can be nice for
a quick look at those images, but it does not reflect what
exported files will look like.

When optional argument REFRESH is non-nil, refresh existing
images between BEG and END.  This will create new image displays
only if necessary.  BEG and END default to the buffer
boundaries."
                :user-visible-flag t
                :arguments ("include-linked" "refresh" "beg" "end"))
                nil [743136 747106])
            ("org-display-inline-remove-overlay" function
               (:documentation "Remove inline-display overlay if a corresponding region is modified."
                :arguments ("ov" "after" "_beg" "_end" "_len"))
                nil [747108 747395])
            ("org-remove-inline-images" function
               (:documentation "Remove inline display of images."
                :user-visible-flag t)
                nil [747397 747576])
            ("org-remap" function
               (:documentation "In MAP, remap the functions given in COMMANDS.
COMMANDS is a list of alternating OLDDEF NEWDEF command names."
                :arguments ("map" "commands"))
                nil [747597 747886])
            ("define-key" code nil nil [747972 748044])
            ("define-key" code nil nil [748045 748117])
            ("define-key" code nil nil [748118 748212])
            ("define-key" code nil nil [748213 748309])
            ("define-key" code nil nil [748310 748399])
            ("define-key" code nil nil [748400 748470])
            ("define-key" code nil nil [748471 748539])
            ("define-key" code nil nil [748540 748612])
            ("define-key" code nil nil [748613 748703])
            ("define-key" code nil nil [748704 748802])
            ("define-key" code nil nil [748803 748869])
            ("org-defkey" code nil nil [750545 750602])
            ("org-defkey" code nil nil [750630 750679])
            ("org-defkey" code nil nil [750680 750729])
            ("org-defkey" code nil nil [750730 750797])
            ("org-defkey" code nil nil [750798 750843])
            ("org-defkey" code nil nil [750901 750957])
            ("org-defkey" code nil nil [750958 751014])
            ("define-key" code nil nil [751015 751064])
            ("org-defkey" code nil nil [751066 751131])
            ("org-defkey" code nil nil [751132 751204])
            ("org-defkey" code nil nil [751205 751262])
            ("org-defkey" code nil nil [751294 751348])
            ("org-defkey" code nil nil [751349 751404])
            ("org-defkey" code nil nil [751405 751457])
            ("org-defkey" code nil nil [751458 751512])
            ("org-defkey" code nil nil [751514 751598])
            ("org-defkey" code nil nil [751599 751682])
            ("org-defkey" code nil nil [751683 751749])
            ("org-defkey" code nil nil [751750 751817])
            ("org-defkey" code nil nil [751818 751882])
            ("org-defkey" code nil nil [751883 751949])
            ("org-defkey" code nil nil [751951 752011])
            ("org-defkey" code nil nil [752012 752074])
            ("org-defkey" code nil nil [752075 752137])
            ("org-defkey" code nil nil [752138 752201])
            ("org-defkey" code nil nil [752203 752275])
            ("org-defkey" code nil nil [752276 752347])
            ("org-defkey" code nil nil [752348 752414])
            ("org-defkey" code nil nil [752415 752486])
            ("define-key" code nil nil [752502 752562])
            ("dolist" code nil nil [752563 752652])
            ("when" code nil nil [752785 754564])
            ("org-remap" code nil nil [754588 754748])
            ("org-defkey" code nil nil [754749 754801])
            ("org-defkey" code nil nil [754803 754857])
            ("org-defkey" code nil nil [754886 754934])
            ("if" code nil nil [754935 755075])
            ("if" code nil nil [755076 755212])
            ("if" code nil nil [755213 755353])
            ("org-defkey" code nil nil [755354 755413])
            ("org-defkey" code nil nil [755414 755471])
            ("org-defkey" code nil nil [755472 755530])
            ("org-defkey" code nil nil [755531 755583])
            ("org-defkey" code nil nil [755584 755638])
            ("org-defkey" code nil nil [755639 755707])
            ("org-defkey" code nil nil [755708 755777])
            ("org-defkey" code nil nil [755778 755830])
            ("org-defkey" code nil nil [755831 755887])
            ("org-defkey" code nil nil [755888 755945])
            ("org-defkey" code nil nil [755946 756007])
            ("org-defkey" code nil nil [756008 756077])
            ("org-defkey" code nil nil [756078 756134])
            ("org-defkey" code nil nil [756135 756196])
            ("org-defkey" code nil nil [756197 756266])
            ("org-defkey" code nil nil [756267 756333])
            ("org-defkey" code nil nil [756334 756395])
            ("org-defkey" code nil nil [756396 756442])
            ("org-defkey" code nil nil [756443 756489])
            ("org-defkey" code nil nil [756490 756548])
            ("org-defkey" code nil nil [756549 756599])
            ("org-defkey" code nil nil [756600 756650])
            ("org-defkey" code nil nil [756651 756707])
            ("org-defkey" code nil nil [756708 756756])
            ("org-defkey" code nil nil [756757 756803])
            ("org-defkey" code nil nil [756804 756857])
            ("org-defkey" code nil nil [756882 756941])
            ("org-defkey" code nil nil [756960 757012])
            ("org-defkey" code nil nil [757013 757085])
            ("org-defkey" code nil nil [757086 757141])
            ("org-defkey" code nil nil [757142 757222])
            ("org-defkey" code nil nil [757223 757314])
            ("org-defkey" code nil nil [757315 757370])
            ("org-defkey" code nil nil [757371 757430])
            ("org-defkey" code nil nil [757431 757484])
            ("org-defkey" code nil nil [757485 757550])
            ("org-defkey" code nil nil [757551 757612])
            ("org-defkey" code nil nil [757613 757668])
            ("org-defkey" code nil nil [757669 757725])
            ("org-defkey" code nil nil [757726 757782])
            ("org-defkey" code nil nil [757783 757833])
            ("org-defkey" code nil nil [757857 757909])
            ("org-defkey" code nil nil [757933 757994])
            ("org-defkey" code nil nil [758011 758061])
            ("org-defkey" code nil nil [758087 758148])
            ("org-defkey" code nil nil [758149 758204])
            ("org-defkey" code nil nil [758205 758265])
            ("org-defkey" code nil nil [758266 758334])
            ("org-defkey" code nil nil [758335 758404])
            ("org-defkey" code nil nil [758405 758467])
            ("org-defkey" code nil nil [758468 758521])
            ("org-defkey" code nil nil [758522 758592])
            ("org-defkey" code nil nil [758593 758666])
            ("org-defkey" code nil nil [758667 758721])
            ("org-defkey" code nil nil [758722 758775])
            ("org-defkey" code nil nil [758776 758822])
            ("org-defkey" code nil nil [758823 758878])
            ("org-defkey" code nil nil [758879 758947])
            ("org-defkey" code nil nil [758948 759015])
            ("org-defkey" code nil nil [759016 759074])
            ("org-defkey" code nil nil [759075 759139])
            ("org-defkey" code nil nil [759140 759214])
            ("org-defkey" code nil nil [759215 759291])
            ("org-defkey" code nil nil [759292 759352])
            ("org-defkey" code nil nil [759353 759401])
            ("org-defkey" code nil nil [759402 759457])
            ("org-defkey" code nil nil [759458 759516])
            ("org-defkey" code nil nil [759517 759576])
            ("org-defkey" code nil nil [759577 759628])
            ("org-defkey" code nil nil [759629 759689])
            ("org-defkey" code nil nil [759690 759744])
            ("org-defkey" code nil nil [759745 759803])
            ("org-defkey" code nil nil [759804 759859])
            ("org-defkey" code nil nil [759860 759914])
            ("org-defkey" code nil nil [759915 759992])
            ("org-defkey" code nil nil [759993 760064])
            ("org-defkey" code nil nil [760065 760133])
            ("org-defkey" code nil nil [760134 760182])
            ("org-defkey" code nil nil [760183 760257])
            ("org-defkey" code nil nil [760258 760329])
            ("org-defkey" code nil nil [760330 760387])
            ("org-defkey" code nil nil [760388 760448])
            ("org-defkey" code nil nil [760449 760504])
            ("org-defkey" code nil nil [760505 760566])
            ("org-defkey" code nil nil [760567 760628])
            ("org-defkey" code nil nil [760629 760690])
            ("org-defkey" code nil nil [760691 760742])
            ("org-defkey" code nil nil [760743 760793])
            ("org-defkey" code nil nil [760794 760863])
            ("org-defkey" code nil nil [760947 761004])
            ("org-defkey" code nil nil [761005 761063])
            ("org-defkey" code nil nil [761064 761123])
            ("org-defkey" code nil nil [761125 761197])
            ("org-defkey" code nil nil [761198 761252])
            ("org-defkey" code nil nil [761253 761312])
            ("org-defkey" code nil nil [761313 761373])
            ("org-defkey" code nil nil [761374 761429])
            ("org-defkey" code nil nil [761430 761486])
            ("org-defkey" code nil nil [761487 761545])
            ("org-defkey" code nil nil [761546 761605])
            ("org-defkey" code nil nil [761606 761664])
            ("org-defkey" code nil nil [761665 761724])
            ("org-defkey" code nil nil [761725 761792])
            ("org-defkey" code nil nil [761793 761859])
            ("org-defkey" code nil nil [761860 761932])
            ("org-defkey" code nil nil [761933 762001])
            ("org-defkey" code nil nil [762002 762063])
            ("org-defkey" code nil nil [762064 762122])
            ("org-defkey" code nil nil [762123 762191])
            ("org-defkey" code nil nil [762192 762248])
            ("org-defkey" code nil nil [762249 762305])
            ("org-defkey" code nil nil [762306 762375])
            ("org-defkey" code nil nil [762376 762443])
            ("org-defkey" code nil nil [762444 762522])
            ("org-defkey" code nil nil [762524 762575])
            ("org-defkey" code nil nil [762576 762632])
            ("org-defkey" code nil nil [762633 762690])
            ("org-defkey" code nil nil [762691 762747])
            ("org-defkey" code nil nil [762748 762817])
            ("define-key" code nil nil [762819 762872])
            ("define-key" code nil nil [762874 762923])
            ("define-key" code nil nil [762925 762983])
            ("define-key" code nil nil [762984 763042])
            ("define-key" code nil nil [763044 763102])
            ("org-speed-commands-default" variable
               (:documentation "The default speed commands."
                :constant-flag t
                :default-value '(("Outline Navigation") ("n" org-speed-move-safe 'org-next-visible-heading) ("p" org-speed-move-safe 'org-previous-visible-heading) ("f" org-speed-move-safe 'org-forward-heading-same-level) ("b" org-speed-move-safe 'org-backward-heading-same-level) ("F" . org-next-block) ("B" . org-previous-block) ("u" org-speed-move-safe 'outline-up-heading) ("j" . org-goto) ("g" org-refile t) ("Outline Visibility") ("c" . org-cycle) ("C" . org-shifttab) (" " . org-display-outline-path) ("s" . org-narrow-to-subtree) ("=" . org-columns) ("Outline Structure Editing") ("U" . org-metaup) ("D" . org-metadown) ("r" . org-metaright) ("l" . org-metaleft) ("R" . org-shiftmetaright) ("L" . org-shiftmetaleft) ("i" progn (forward-char 1) (call-interactively 'org-insert-heading-respect-content)) ("^" . org-sort) ("w" . org-refile) ("a" . org-archive-subtree-default-with-confirmation) ("@" . org-mark-subtree) ("#" . org-toggle-comment) ("Clock Commands") ("I" . org-clock-in) ("O" . org-clock-out) ("Meta Data Editing") ("t" . org-todo) ("," org-priority) ("0" org-priority 32) ("1" org-priority 65) ("2" org-priority 66) ("3" org-priority 67) (":" . org-set-tags-command) ("e" . org-set-effort) ("E" . org-inc-effort) ("W" lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)) ("Agenda Views etc") ("v" . org-agenda) ("/" . org-sparse-tree) ("Misc") ("o" . org-open-at-point) ("?" . org-speed-command-help) ("<" org-agenda-set-restriction-lock 'subtree) (">" org-agenda-remove-restriction-lock)))
                nil [763105 764984])
            ("org-print-speed-command" function (:arguments ("e")) nil [764986 765302])
            ("org-speed-command-help" function
               (:documentation "Show the available speed commands."
                :user-visible-flag t)
                nil [765304 765915])
            ("org-speed-move-safe" function
               (:documentation "Execute CMD, but make sure that the cursor always ends up in a headline.
If not, return to the original position and throw an error."
                :user-visible-flag t
                :arguments ("cmd"))
                nil [765917 766279])
            ("org-self-insert-command-undo-counter" variable nil nil [766281 766328])
            ("org-table-auto-blank-field" variable nil nil [766330 766365])
            ("org-speed-command" variable nil nil [766392 766422])
            ("org-speed-command-activate" function
               (:documentation "Hook for activating single-letter speed commands.
`org-speed-commands-default' specifies a minimal command set.
Use `org-speed-commands-user' for further customization."
                :arguments ("keys"))
                nil [766424 766870])
            ("org-babel-speed-command-activate" function
               (:documentation "Hook for activating single-letter code block commands."
                :arguments ("keys"))
                nil [766872 767086])
            ("org-speed-command-hook" variable
               (:documentation "Hook for activating speed commands at strategic locations.
Hook functions are called in sequence until a valid handler is
found.

Each hook takes a single argument, a user-pressed command key
which is also a `self-insert-command' from the global map.

Within the hook, examine the cursor position and the command key
and return nil or a valid handler as appropriate.  Handler could
be one of an interactive command, a function, or a form.

Set `org-use-speed-commands' to non-nil value to enable this
hook.  The default setting is `org-speed-command-activate'."
                :default-value '(org-speed-command-activate org-babel-speed-command-activate))
                nil [767088 767808])
            ("org-self-insert-command" function
               (:documentation "Like `self-insert-command', use overwrite-mode for whitespace in tables.
If the cursor is in a table looking at whitespace, the whitespace is
overwritten, and the table is not marked as requiring realignment."
                :user-visible-flag t
                :arguments ("N"))
                nil [767810 770200])
            ("org-check-before-invisible-edit" function
               (:documentation "Check is editing if kind KIND would be dangerous with invisible text around.
The detailed reaction depends on the user option `org-catch-invisible-edits'."
                :arguments ("kind"))
                nil [770202 773248])
            ("org-fix-tags-on-the-fly" function (:documentation "Align tags in headline at point.
Unlike to `org-set-tags', it ignores region and sorting.") nil [773250 773573])
            ("org-delete-backward-char" function
               (:documentation "Like `delete-backward-char', insert whitespace at field end in tables.
When deleting backwards, in tables this function will insert whitespace in
front of the next \"|\" separator, to keep the table aligned.  The table will
still be marked for re-alignment if the field did fill the entire column,
because, in this case the deletion might narrow the column."
                :user-visible-flag t
                :arguments ("N"))
                nil [773575 774706])
            ("org-delete-char" function
               (:documentation "Like `delete-char', but insert whitespace at field end in tables.
When deleting characters, in tables this function will insert whitespace in
front of the next \"|\" separator, to keep the table aligned.  The table will
still be marked for re-alignment if the field did fill the entire column,
because, in this case the deletion might narrow the column."
                :user-visible-flag t
                :arguments ("N"))
                nil [774708 775765])
            ("put" code nil nil [775834 775995])
            ("put" code nil nil [775996 776160])
            ("put" code nil nil [776161 776212])
            ("put" code nil nil [776213 776273])
            ("put" code nil nil [776274 776313])
            ("put" code nil nil [776365 776415])
            ("put" code nil nil [776416 776469])
            ("put" code nil nil [776470 776512])
            ("put" code nil nil [776513 776564])
            ("put" code nil nil [776618 776680])
            ("put" code nil nil [776681 776746])
            ("org-transpose-words" function
               (:documentation "Transpose words for Org.
This uses the `org-mode-transpose-word-syntax-table' syntax
table, which interprets characters in `org-emphasis-alist' as
word constituents."
                :user-visible-flag t)
                nil [776748 777065])
            ("org-remap" code nil nil [777066 777128])
            ("org-ctrl-c-ctrl-c-hook" variable (:documentation "Hook for functions attaching themselves to `C-c C-c'.

This can be used to add additional functionality to the C-c C-c
key which executes context-dependent commands.  This hook is run
before any other test, while `org-ctrl-c-ctrl-c-final-hook' is
run after the last test.

Each function will be called with no arguments.  The function
must check if the context is appropriate for it to act.  If yes,
it should do its thing and then return a non-nil value.  If the
context is wrong, just do nothing and return nil.") nil [777130 777683])
            ("org-ctrl-c-ctrl-c-final-hook" variable (:documentation "Hook for functions attaching themselves to `C-c C-c'.

This can be used to add additional functionality to the C-c C-c
key which executes context-dependent commands.  This hook is run
after any other test, while `org-ctrl-c-ctrl-c-hook' is run
before the first test.

Each function will be called with no arguments.  The function
must check if the context is appropriate for it to act.  If yes,
it should do its thing and then return a non-nil value.  If the
context is wrong, just do nothing and return nil.") nil [777685 778239])
            ("org-tab-first-hook" variable (:documentation "Hook for functions to attach themselves to TAB.
See `org-ctrl-c-ctrl-c-hook' for more information.
This hook runs as the first action when TAB is pressed, even before
`org-cycle' messes around with the `outline-regexp' to cater for
inline tasks and plain list item folding.
If any function in this hook returns t, any other actions that
would have been caused by TAB (such as table field motion or visibility
cycling) will not occur.") nil [778241 778710])
            ("org-tab-after-check-for-table-hook" variable (:documentation "Hook for functions to attach themselves to TAB.
See `org-ctrl-c-ctrl-c-hook' for more information.
This hook runs after it has been established that the cursor is not in a
table, but before checking if the cursor is in a headline or if global cycling
should be done.
If any function in this hook returns t, not other actions like visibility
cycling will be done.") nil [778712 779126])
            ("org-tab-after-check-for-cycling-hook" variable (:documentation "Hook for functions to attach themselves to TAB.
See `org-ctrl-c-ctrl-c-hook' for more information.
This hook runs after it has been established that not table field motion and
not visibility should be done because of current context.  This is probably
the place where a package like yasnippets can hook in.") nil [779128 779488])
            ("org-tab-before-tab-emulation-hook" variable (:documentation "Hook for functions to attach themselves to TAB.
See `org-ctrl-c-ctrl-c-hook' for more information.
This hook runs after every other options for TAB have been exhausted, but
before indentation and 	 insertion takes place.") nil [779490 779762])
            ("org-metaleft-hook" variable (:documentation "Hook for functions attaching themselves to `M-left'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [779764 779902])
            ("org-metaright-hook" variable (:documentation "Hook for functions attaching themselves to `M-right'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [779903 780043])
            ("org-metaup-hook" variable (:documentation "Hook for functions attaching themselves to `M-up'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780044 780178])
            ("org-metadown-hook" variable (:documentation "Hook for functions attaching themselves to `M-down'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780179 780317])
            ("org-shiftmetaleft-hook" variable (:documentation "Hook for functions attaching themselves to `M-S-left'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780318 780463])
            ("org-shiftmetaright-hook" variable (:documentation "Hook for functions attaching themselves to `M-S-right'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780464 780611])
            ("org-shiftmetaup-hook" variable (:documentation "Hook for functions attaching themselves to `M-S-up'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780612 780753])
            ("org-shiftmetadown-hook" variable (:documentation "Hook for functions attaching themselves to `M-S-down'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780754 780899])
            ("org-metareturn-hook" variable (:documentation "Hook for functions attaching themselves to `M-RET'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [780900 781039])
            ("org-shiftup-hook" variable (:documentation "Hook for functions attaching themselves to `S-up'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781040 781175])
            ("org-shiftup-final-hook" variable (:documentation "Hook for functions attaching themselves to `S-up'.
This one runs after all other options except shift-select have been excluded.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781176 781395])
            ("org-shiftdown-hook" variable (:documentation "Hook for functions attaching themselves to `S-down'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781396 781535])
            ("org-shiftdown-final-hook" variable (:documentation "Hook for functions attaching themselves to `S-down'.
This one runs after all other options except shift-select have been excluded.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781536 781759])
            ("org-shiftleft-hook" variable (:documentation "Hook for functions attaching themselves to `S-left'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781760 781899])
            ("org-shiftleft-final-hook" variable (:documentation "Hook for functions attaching themselves to `S-left'.
This one runs after all other options except shift-select have been excluded.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [781900 782123])
            ("org-shiftright-hook" variable (:documentation "Hook for functions attaching themselves to `S-right'.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [782124 782265])
            ("org-shiftright-final-hook" variable (:documentation "Hook for functions attaching themselves to `S-right'.
This one runs after all other options except shift-select have been excluded.
See `org-ctrl-c-ctrl-c-hook' for more information.") nil [782266 782491])
            ("org-modifier-cursor-error" function (:documentation "Throw an error, a modified cursor command was applied in wrong context.") nil [782493 782696])
            ("org-shiftselect-error" function (:documentation "Throw an error because Shift-Cursor command was applied in wrong context.") nil [782698 783054])
            ("org-call-for-shift-select" function (:arguments ("cmd")) nil [783056 783173])
            ("org-shifttab" function
               (:documentation "Global visibility cycling or move to previous table field.
Call `org-table-previous-field' within a table.
When ARG is nil, cycle globally through visibility states.
When ARG is a numeric prefix, show contents of this level."
                :user-visible-flag t
                :arguments ("arg"))
                nil [783175 783847])
            ("org-shiftmetaleft" function
               (:documentation "Promote subtree or delete table column.
Calls `org-promote-subtree', `org-outdent-item-tree', or
`org-table-delete-column', depending on context.  See the
individual commands for more information."
                :user-visible-flag t)
                nil [783849 784516])
            ("org-shiftmetaright" function
               (:documentation "Demote subtree or insert table column.
Calls `org-demote-subtree', `org-indent-item-tree', or
`org-table-insert-column', depending on context.  See the
individual commands for more information."
                :user-visible-flag t)
                nil [784518 785182])
            ("org-shiftmetaup" function
               (:documentation "Drag the line at point up.
In a table, kill the current row.
On a clock timestamp, update the value of the timestamp like `S-<up>'
but also adjust the previous clocked item in the clock history.
Everywhere else, drag the line at point up."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [785184 785781])
            ("org-shiftmetadown" function
               (:documentation "Drag the line at point down.
In a table, insert an empty row at the current line.
On a clock timestamp, update the value of the timestamp like `S-<down>'
but also adjust the previous clocked item in the clock history.
Everywhere else, drag the line at point down."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [785783 786412])
            ("org-hidden-tree-error" function nil nil [786414 786541])
            ("org-metaleft" function
               (:documentation "Promote heading, list item at point or move table column left.

Calls `org-do-promote', `org-outdent-item' or `org-table-move-column',
depending on context.  With no specific context, calls the Emacs
default `backward-word'.  See the individual commands for more
information.

This function runs the hook `org-metaleft-hook' as a first step,
and returns at first non-nil value."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [786543 787789])
            ("org-metaright" function
               (:documentation "Demote heading, list item at point or move table column right.

In front of a drawer or a block keyword, indent it correctly.

Calls `org-do-demote', `org-indent-item', `org-table-move-column',
`org-indent-drawer' or `org-indent-block' depending on context.
With no specific context, calls the Emacs default `forward-word'.
See the individual commands for more information.

This function runs the hook `org-metaright-hook' as a first step,
and returns at first non-nil value."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [787791 789253])
            ("org-check-for-hidden" function
               (:documentation "Check if there are hidden headlines/items in the current visual line.
WHAT can be either `headlines' or `items'.  If the current line is
an outline or item heading and it has a folded subtree below it,
this function returns t, nil otherwise."
                :arguments ("what"))
                nil [789255 790209])
            ("org-metaup" function
               (:documentation "Move subtree up or move table row up.
Calls `org-move-subtree-up' or `org-table-move-row' or
`org-move-item-up', depending on context.  See the individual commands
for more information."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [790211 791088])
            ("org-metadown" function
               (:documentation "Move subtree down or move table row down.
Calls `org-move-subtree-down' or `org-table-move-row' or
`org-move-item-down', depending on context.  See the individual
commands for more information."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [791090 791979])
            ("org-shiftup" function
               (:documentation "Increase item in timestamp or increase priority of current headline.
Calls `org-timestamp-up' or `org-priority-up', or `org-previous-item',
depending on context.  See the individual commands for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [791981 793030])
            ("org-shiftdown" function
               (:documentation "Decrease item in timestamp or decrease priority of current headline.
Calls `org-timestamp-down' or `org-priority-down', or `org-next-item'
depending on context.  See the individual commands for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [793032 794078])
            ("org-shiftright" function
               (:documentation "Cycle the thing at point or in the current line, depending on context.
Depending on context, this does one of the following:

- switch a timestamp at point one day into the future
- on a headline, switch to the next TODO keyword.
- on an item, switch entire list to the next bullet type
- on a property line, switch to the next allowed value
- on a clocktable definition line, move time block into the future"
                :user-visible-flag t
                :arguments ("arg"))
                nil [794080 795675])
            ("org-shiftleft" function
               (:documentation "Cycle the thing at point or in the current line, depending on context.
Depending on context, this does one of the following:

- switch a timestamp at point one day into the past
- on a headline, switch to the previous TODO keyword.
- on an item, switch entire list to the previous bullet type
- on a property line, switch to the previous allowed value
- on a clocktable definition line, move time block into the past"
                :user-visible-flag t
                :arguments ("arg"))
                nil [795677 797289])
            ("org-shiftcontrolright" function
               (:documentation "Switch to next TODO set."
                :user-visible-flag t)
                nil [797291 797707])
            ("org-shiftcontrolleft" function
               (:documentation "Switch to previous TODO set."
                :user-visible-flag t)
                nil [797709 798134])
            ("org-shiftcontrolup" function
               (:documentation "Change timestamps synchronously up in CLOCK log lines.
Optional argument N tells to change by that many units."
                :user-visible-flag t
                :arguments ("n"))
                nil [798136 798477])
            ("org-shiftcontroldown" function
               (:documentation "Change timestamps synchronously down in CLOCK log lines.
Optional argument N tells to change by that many units."
                :user-visible-flag t
                :arguments ("n"))
                nil [798479 798826])
            ("org-increase-number-at-point" function
               (:documentation "Increment the number at point.
With an optional prefix numeric argument INC, increment using
this numeric value."
                :user-visible-flag t
                :arguments ("inc"))
                nil [798828 799518])
            ("org-decrease-number-at-point" function
               (:documentation "Decrement the number at point.
With an optional prefix numeric argument INC, decrement using
this numeric value."
                :user-visible-flag t
                :arguments ("inc"))
                nil [799520 799757])
            ("org-ctrl-c-ret" function
               (:documentation "Call `org-table-hline-and-move' or `org-insert-heading' dep. on context."
                :user-visible-flag t)
                nil [799759 800003])
            ("org-find-visible" function nil nil [800005 800168])
            ("org-find-invisible" function nil nil [800169 800340])
            ("org-copy-visible" function
               (:documentation "Copy the visible parts of the region."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [800342 800780])
            ("org-copy-special" function
               (:documentation "Copy region in table or copy current subtree.
Calls `org-table-copy-region' or `org-copy-subtree', depending on
context.  See the individual commands for more information."
                :user-visible-flag t)
                nil [800782 801092])
            ("org-cut-special" function
               (:documentation "Cut region in table or cut current subtree.
Calls `org-table-cut-region' or `org-cut-subtree', depending on
context.  See the individual commands for more information."
                :user-visible-flag t)
                nil [801094 801397])
            ("org-paste-special" function
               (:documentation "Paste rectangular region into table, or past subtree relative to level.
Calls `org-table-paste-rectangle' or `org-paste-subtree', depending on context.
See the individual commands for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [801399 801742])
            ("org-edit-special" function
               (:documentation "Call a special editor for the element at point.
When at a table, call the formula editor with `org-table-edit-formulas'.
When in a source code block, call `org-edit-src-code'.
When in a fixed-width region, call `org-edit-fixed-width-region'.
When in an export block, call `org-edit-export-block'.
When in a LaTeX environment, call `org-edit-latex-environment'.
When at an #+INCLUDE keyword, visit the included file.
When at a footnote reference, call `org-edit-footnote-reference'
On a link, call `ffap' to visit the link at point.
Otherwise, return a user error."
                :user-visible-flag t
                :arguments ("arg"))
                nil [801744 804636])
            ("org-table-coordinate-overlays" variable nil nil [804638 804676])
            ("org-ctrl-c-ctrl-c" function
               (:documentation "Set tags in headline, or update according to changed information at point.

This command does many different things, depending on context:

- If a function in `org-ctrl-c-ctrl-c-hook' recognizes this location,
  this is what we do.

- If the cursor is on a statistics cookie, update it.

- If the cursor is in a headline, prompt for tags and insert them
  into the current line, aligned to `org-tags-column'.  When called
  with prefix arg, realign all tags in the current buffer.

- If the cursor is in one of the special #+KEYWORD lines, this
  triggers scanning the buffer for these lines and updating the
  information.

- If the cursor is inside a table, realign the table.  This command
  works even if the automatic table editor has been turned off.

- If the cursor is on a #+TBLFM line, re-apply the formulas to
  the entire table.

- If the cursor is at a footnote reference or definition, jump to
  the corresponding definition or references, respectively.

- If the cursor is a the beginning of a dynamic block, update it.

- If the current buffer is a capture buffer, close note and file it.

- If the cursor is on a <<<target>>>, update radio targets and
  corresponding links in this buffer.

- If the cursor is on a numbered item in a plain list, renumber the
  ordered list.

- If the cursor is on a checkbox, toggle it.

- If the cursor is on a code block, evaluate it.  The variable
  `org-confirm-babel-evaluate' can be used to control prompting
  before code block evaluation, by default every code block
  evaluation requires confirmation.  Code block evaluation can be
  inhibited by setting `org-babel-no-eval-on-ctrl-c-ctrl-c'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [804703 814272])
            ("org-mode-restart" function nil nil [814274 814594])
            ("org-kill-note-or-show-branches" function
               (:documentation "Abort storing current note, or call `outline-show-branches'."
                :user-visible-flag t)
                nil [814596 815015])
            ("org-delete-indentation" function
               (:documentation "Join current line to previous and fix whitespace at join.

If previous line is a headline add to headline title.  Otherwise
the function calls `delete-indentation'.

With a non-nil optional argument, join it to the following one."
                :user-visible-flag t
                :arguments ("arg"))
                nil [815017 816191])
            ("org-open-line" function
               (:documentation "Insert a new row in tables, call `open-line' elsewhere.
If `org-special-ctrl-o' is nil, just call `open-line' everywhere.
As a special case, when a document starts with a table, allow to
call `open-line' on the very first character."
                :user-visible-flag t
                :arguments ("n"))
                nil [816193 816587])
            ("org-return" function
               (:documentation "Goto next table row or insert a newline.

Calls `org-table-next-row' or `newline', depending on context.

When optional INDENT argument is non-nil, call
`newline-and-indent' instead of `newline'.

When `org-return-follows-link' is non-nil and point is on
a timestamp or a link, call `org-open-at-point'.  However, it
will not happen if point is in a table or on a \"dead\"
object (e.g., within a comment).  In these case, you need to use
`org-open-at-point' directly."
                :user-visible-flag t
                :arguments ("indent"))
                nil [816589 819703])
            ("org-return-indent" function
               (:documentation "Goto next table row or insert a newline and indent.
Calls `org-table-next-row' or `newline-and-indent', depending on
context.  See the individual commands for more information."
                :user-visible-flag t)
                nil [819705 819947])
            ("org-ctrl-c-star" function
               (:documentation "Compute table, or change heading status of lines.
Calls `org-table-recalculate' or `org-toggle-heading',
depending on context."
                :user-visible-flag t)
                nil [819949 820302])
            ("org-ctrl-c-minus" function
               (:documentation "Insert separator line in table or modify bullet status of line.
Also turns a plain line or a region of lines into list items.
Calls `org-table-insert-hline', `org-toggle-item', or
`org-cycle-list-bullet', depending on context."
                :user-visible-flag t)
                nil [820304 820845])
            ("org-toggle-heading" function
               (:documentation "Convert headings to normal text, or items or text to headings.
If there is no active region, only convert the current line.

With a `\\[universal-argument]' prefix, convert the whole list at
point into heading.

In a region:

- If the first non blank line is a headline, remove the stars
  from all headlines in the region.

- If it is a normal line, turn each and every normal line (i.e.,
  not an heading or an item) in the region into headings.  If you
  want to convert only the first line of this region, use one
  universal prefix argument.

- If it is a plain list item, turn all plain list items into headings.

When converting a line into a heading, the number of stars is chosen
such that the lines become children of the current entry.  However,
when a numeric prefix argument is given, its value determines the
number of stars to add."
                :user-visible-flag t
                :arguments ("nstars"))
                nil [820847 824522])
            ("org-meta-return" function
               (:documentation "Insert a new heading or wrap a region in a table.
Calls `org-insert-heading', `org-insert-item' or
`org-table-wrap-region', depending on context.  When called with
an argument, unconditionally call `org-insert-heading'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [824524 825091])
            ("org-in-subtree-not-table-p" function (:documentation "Are we in a subtree and not in a table?") nil [825111 825268])
            ("easy-menu-define" code nil nil [825299 828267])
            ("easy-menu-define" code nil nil [828269 836822])
            ("org-info" function
               (:documentation "Read documentation for Org in the info system.
With optional NODE, go directly to that node."
                :user-visible-flag t
                :arguments ("node"))
                nil [836824 837011])
            ("org-submit-bug-report" function
               (:documentation "Submit a bug report on Org via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your Org version and configuration."
                :user-visible-flag t)
                nil [837028 839452])
            ("org-install-agenda-files-menu" function nil nil [839455 840181])
            ("org-require-autoloaded-modules" function nil nil [840203 840373])
            ("org-reload" function
               (:documentation "Reload all Org Lisp files.
With prefix arg UNCOMPILED, load the uncompiled versions."
                :user-visible-flag t
                :arguments ("uncompiled"))
                nil [840390 842246])
            ("org-customize" function
               (:documentation "Call the customize function with org as argument."
                :user-visible-flag t)
                nil [842263 842445])
            ("org-create-customize-menu" function
               (:documentation "Create a full customization menu for Org mode, insert it into the menu."
                :user-visible-flag t)
                nil [842447 843152])
            ("org-get-at-eol" function
               (:documentation "Get text property PROPERTY at the end of line less N characters."
                :arguments ("property" "n"))
                nil [843212 843368])
            ("org-find-text-property-in-string" function
               (:documentation "Return the first non-nil value of property PROP in string S."
                :arguments ("prop" "s"))
                nil [843370 843603])
            ("org-display-warning" function
               (:documentation "Display the given MESSAGE as a warning."
                :arguments ("message"))
                nil [843605 843728])
            ("org-eval" function
               (:documentation "Eval FORM and return result."
                :arguments ("form"))
                nil [843730 843873])
            ("org-in-clocktable-p" function (:documentation "Check if the cursor is in a clocktable.") nil [843875 844221])
            ("org-in-verbatim-emphasis" function nil nil [844223 844386])
            ("org-overlay-display" function
               (:documentation "Make overlay OVL display TEXT with face FACE."
                :arguments ("ovl" "text" "face" "evap"))
                nil [844388 844614])
            ("org-overlay-before-string" function
               (:documentation "Make overlay OVL display TEXT with face FACE."
                :arguments ("ovl" "text" "face" "evap"))
                nil [844616 844861])
            ("org-find-overlays" function
               (:documentation "Find all overlays specifying PROP at POS or point.
If DELETE is non-nil, delete all those overlays."
                :arguments ("prop" "pos" "delete"))
                nil [844863 845193])
            ("org-goto-marker-or-bmk" function
               (:documentation "Go to MARKER, widen if necessary.  When marker is not live, try BOOKMARK."
                :arguments ("marker" "bookmark"))
                nil [845195 845684])
            ("org-quote-csv-field" function
               (:documentation "Quote field for inclusion in CSV material."
                :arguments ("s"))
                nil [845686 845878])
            ("org-force-self-insert" function
               (:documentation "Needed to enforce self-insert under remapping."
                :user-visible-flag t
                :arguments ("N"))
                nil [845880 846010])
            ("org-shorten-string" function
               (:documentation "Shorten string S so that it is no longer than MAXLENGTH characters.
If the string is shorter or has length MAXLENGTH, just return the
original string.  If it is longer, the functions finds a space in the
string, breaks this string off at that locations and adds three dots
as ellipsis.  Including the ellipsis, the string will not be longer
than MAXLENGTH.  If finding a good breaking point in the string does
not work, the string is just chopped off in the middle of a word
if necessary."
                :arguments ("s" "maxlength"))
                nil [846012 846830])
            ("org-get-indentation" function
               (:documentation "Get the indentation of the current line, interpreting tabs.
When LINE is given, assume it represents a line and compute its indentation."
                :arguments ("line"))
                nil [846832 847206])
            ("org-get-string-indentation" function
               (:documentation "What indentation has S due to SPACE and TAB at the beginning of the string?"
                :arguments ("s"))
                nil [847208 847566])
            ("org-remove-tabs" function
               (:documentation "Replace tabulators in S with spaces.
Assumes that s is a single line, starting in column 0."
                :arguments ("s" "width"))
                nil [847568 847928])
            ("org-fix-indentation" function
               (:documentation "Fix indentation in LINE.
IND is a cons cell with target and minimum indentation.
If the current indentation in LINE is smaller than the minimum,
leave it alone.  If it is larger than ind, set it to the target."
                :arguments ("line" "ind"))
                nil [847930 848391])
            ("org-remove-indentation" function
               (:documentation "Remove maximum common indentation in string CODE and return it.
N may optionally be the number of columns to remove.  Return CODE
as-is if removal failed."
                :arguments ("code" "n"))
                nil [848393 848700])
            ("org-do-remove-indentation" function
               (:documentation "Remove the maximum common indentation from the buffer.
When optional argument N is a positive integer, remove exactly
that much characters from indentation, if possible.  Return nil
if it fails."
                :arguments ("n"))
                nil [848702 849695])
            ("org-fill-template" function
               (:documentation "Find each %key of ALIST in TEMPLATE and replace it."
                :arguments ("template" "alist"))
                nil [849697 850108])
            ("org-base-buffer" function
               (:documentation "Return the base buffer of BUFFER, if it has one.  Else return the buffer."
                :arguments ("buffer"))
                nil [850110 850298])
            ("org-wrap" function
               (:documentation "Wrap string to either a number of lines, or a width in characters.
If WIDTH is non-nil, the string is wrapped to that width, however many lines
that costs.  If there is a word longer than WIDTH, the text is actually
wrapped to the length of that word.
IF WIDTH is nil and LINES is non-nil, the string is forced into at most that
many lines, whatever width that takes.
The return value is a list of lines, without newlines at the end."
                :arguments ("string" "width" "lines"))
                nil [850300 851236])
            ("org-do-wrap" function
               (:documentation "Create lines of maximum width WIDTH (in characters) from word list WORDS."
                :arguments ("words" "width"))
                nil [851238 851594])
            ("org-quote-vert" function
               (:documentation "Replace \"|\" with \"\\vert\"."
                :arguments ("s"))
                nil [851596 851736])
            ("org-uuidgen-p" function
               (:documentation "Is S an ID created by UUIDGEN?"
                :arguments ("s"))
                nil [851738 851917])
            ("org-in-src-block-p" function
               (:documentation "Whether point is in a code source block.
When INSIDE is non-nil, don't consider we are within a src block
when point is at #+BEGIN_SRC or #+END_SRC."
                :arguments ("inside"))
                nil [851919 852347])
            ("org-context" function (:documentation "Return a list of contexts of the current cursor position.
If several contexts apply, all are returned.
Each context entry is a list with a symbol naming the context, and
two positions indicating start and end of the context.  Possible
contexts are:

:headline         anywhere in a headline
:headline-stars   on the leading stars in a headline
:todo-keyword     on a TODO keyword (including DONE) in a headline
:tags             on the TAGS in a headline
:priority         on the priority cookie in a headline
:item             on the first line of a plain list item
:item-bullet      on the bullet/number of a plain list item
:checkbox         on the checkbox in a plain list item
:table            in an Org table
:table-special    on a special filed in a table
:table-table      in a table.el table
:clocktable       in a clocktable
:src-block        in a source block
:link             on a hyperlink
:keyword          on a keyword: SCHEDULED, DEADLINE, CLOSE, COMMENT.
:target           on a <<target>>
:radio-target     on a <<<radio-target>>>
:latex-fragment   on a LaTeX fragment
:latex-preview    on a LaTeX fragment with overlaid preview image

This function expects the position to be visible because it uses font-lock
faces as a help to recognize the following contexts: :table-special, :link,
and :keyword.") nil [852349 856895])
            ("org-in-regexp" function
               (:documentation "Check if point is inside a match of REGEXP.

Normally only the current line is checked, but you can include
NLINES extra lines around point into the search.  If VISUALLY is
set, require that the cursor is not after the match but really
on, so that the block visually is on the match.

Return nil or a cons cell (BEG . END) where BEG and END are,
respectively, the positions at the beginning and the end of the
match."
                :arguments ("regexp" "nlines" "visually"))
                nil [856897 857780])
            ("org-between-regexps-p" function
               (:documentation "Non-nil when point is between matches of START-RE and END-RE.

Also return a non-nil value when point is on one of the matches.

Optional arguments LIM-UP and LIM-DOWN bound the search; they are
buffer positions.  Default values are the positions of headlines
surrounding the point.

The functions returns a cons cell whose car (resp. cdr) is the
position before START-RE (resp. after END-RE)."
                :arguments ("start-re" "end-re" "lim-up" "lim-down"))
                nil [857782 859015])
            ("org-in-block-p" function
               (:documentation "Non-nil when point belongs to a block whose name belongs to NAMES.

NAMES is a list of strings containing names of blocks.

Return first block name matched, or nil.  Beware that in case of
nested blocks, the returned name may not belong to the closest
block from point."
                :arguments ("names"))
                nil [859017 859726])
            ("org-occur-in-agenda-files" function
               (:documentation "Call `multi-occur' with buffers for all agenda files."
                :user-visible-flag t
                :arguments ("regexp" "_nlines"))
                nil [859728 860614])
            ("add-hook" code nil nil [860616 860721])
            ("org-occur-link-in-agenda-files" function
               (:documentation "Create a link and search for it in the agendas.
The link is not stored in `org-stored-links', it is just created
for the search purpose."
                :user-visible-flag t)
                nil [860723 861080])
            ("org-reverse-string" function
               (:documentation "Return the reverse of STRING."
                :arguments ("string"))
                nil [861082 861203])
            ("org-uniquify-alist" function
               (:documentation "Merge elements of ALIST with the same key.

For example, in this alist:

(org-uniquify-alist \\='((a 1) (b 2) (a 3)))
  => \\='((a 1 3) (b 2))

merge (a 1) and (a 3) into (a 1 3).

The function returns the new ALIST."
                :arguments ("alist"))
                nil [861264 861757])
            ("org-delete-all" function
               (:documentation "Remove all elements in ELTS from LIST.
Comparison is done with `equal'.  It is a destructive operation
that may remove elements by altering the list structure."
                :arguments ("elts" "list"))
                nil [861759 862020])
            ("org-back-over-empty-lines" function (:documentation "Move backwards over whitespace, to the beginning of the first empty line.
Returns the number of empty lines passed.") nil [862022 862424])
            ("org-skip-whitespace" function nil nil [862426 862489])
            ("org-point-in-group" function
               (:documentation "Check if POINT is in match-group GROUP.
If CONTEXT is non-nil, return a list with CONTEXT and the boundaries of the
match.  If the match group does not exist or point is not inside it,
return nil."
                :arguments ("point" "group" "context"))
                nil [862491 862945])
            ("org-switch-to-buffer-other-window" function
               (:documentation "Switch to buffer in a second window on the current frame.
In particular, do not allow pop-up frames.
Returns the newly created buffer."
                :arguments ("args"))
                nil [862947 863205])
            ("org-combine-plists" function
               (:documentation "Create a single property list from all plists in PLISTS.
The process starts by copying the first list, and then setting properties
from the other lists.  Settings in the last list are the most significant
ones and overrule settings in the other lists."
                :arguments ("plists"))
                nil [863207 863692])
            ("org-replace-escapes" function
               (:documentation "Replace %-escapes in STRING with values in TABLE.
TABLE is an association list with keys like \"%a\" and string values.
The sequences in STRING may contain normal field width and padding information,
for example \"%-5s\".  Replacements happen in the sequence given by TABLE,
so values can contain further %-escapes if they are define later in TABLE."
                :arguments ("string" "table"))
                nil [863694 864972])
            ("org-find-base-buffer-visiting" function
               (:documentation "Like `find-buffer-visiting' but always return the base buffer and
not an indirect buffer."
                :arguments ("file"))
                nil [864974 865245])
            ("org-file-image-p" function
               (:documentation "Return non-nil if FILE is an image."
                :arguments ("file"))
                nil [865357 865497])
            ("org-get-cursor-date" function
               (:documentation "Return the date at cursor in as a time.
This works in the calendar and in the agenda, anywhere else it just
returns the current time.
If WITH-TIME is non-nil, returns the time of the event at point (in
the agenda) or the current time of the day."
                :arguments ("with-time"))
                nil [865499 866647])
            ("org-mark-subtree" function
               (:documentation "Mark the current subtree.
This puts point at the start of the current subtree, and mark at
the end.  If a numeric prefix UP is given, move up into the
hierarchy of headlines by UP levels before marking the subtree."
                :user-visible-flag t
                :arguments ("up"))
                nil [866649 867289])
            ("org-file-newer-than-p" function
               (:documentation "Non-nil if FILE is newer than TIME.
FILE is a filename, as a string, TIME is a list of integers, as
returned by, e.g., `current-time'."
                :arguments ("file" "time"))
                nil [867291 867825])
            ("org-compile-file" function
               (:documentation "Compile a SOURCE file using PROCESS.

PROCESS is either a function or a list of shell commands, as
strings.  EXT is a file extension, without the leading dot, as
a string.  It is used to check if the process actually succeeded.

PROCESS must create a file with the same base name and directory
as SOURCE, but ending with EXT.  The function then returns its
filename.  Otherwise, it raises an error.  The error message can
then be refined by providing string ERR-MSG, which is appended to
the standard message.

If PROCESS is a function, it is called with a single argument:
the SOURCE file.

If it is a list of commands, each of them is called using
`shell-command'.  By default, in each command, %b, %f, %F, %o and
%O are replaced with, respectively, SOURCE base name, name, full
name, directory and absolute output file name.  It is possible,
however, to use more place-holders by specifying them in optional
argument SPEC, as an alist following the pattern

  (CHARACTER . REPLACEMENT-STRING).

When PROCESS is a list of commands, optional argument LOG-BUF can
be set to a buffer or a buffer name.  `shell-command' then uses
it for output."
                :arguments ("source" "process" "ext" "err-msg" "log-buf" "spec"))
                nil [867827 870266])
            ("org-element-greater-elements" variable nil nil [870285 870322])
            ("org--get-expected-indentation" function
               (:documentation "Expected indentation column for current line, according to ELEMENT.
ELEMENT is an element containing point.  CONTENTSP is non-nil
when indentation is to be computed according to contents of
ELEMENT."
                :arguments ("element" "contentsp"))
                nil [870323 874507])
            ("org--align-node-property" function (:documentation "Align node property at point.
Alignment is done according to `org-property-format', which see.") nil [874509 874871])
            ("org-indent-line" function
               (:documentation "Indent line depending on context.

Indentation is done according to the following rules:

  - Footnote definitions, diary sexps, headlines and inline tasks
    have to start at column 0.

  - On the very first line of an element, consider, in order, the
    next rules until one matches:

    1. If there's a sibling element before, ignoring footnote
       definitions and inline tasks, indent like its first line.

    2. If element has a parent, indent like its contents.  More
       precisely, if parent is an item, indent after the
       description part, if any, or the bullet (see
       `org-list-description-max-indent').  Else, indent like
       parent's first line.

    3. Otherwise, indent relatively to current level, if
       `org-adapt-indentation' is non-nil, or to left margin.

  - On a blank line at the end of an element, indent according to
    the type of the element.  More precisely

    1. If element is a plain list, an item, or a footnote
       definition, indent like the very last element within.

    2. If element is a paragraph, indent like its last non blank
       line.

    3. Otherwise, indent like its very first line.

  - In the code part of a source block, use language major mode
    to indent current line if `org-src-tab-acts-natively' is
    non-nil.  If it is nil, do nothing.

  - Otherwise, indent like the first non-blank line above.

The function doesn't indent an item as it could break the whole
list structure.  Instead, use \\<org-mode-map>`\\[org-shiftmetaleft]' or `\\[org-shiftmetaright]'.

Also align node properties according to `org-property-format'."
                :user-visible-flag t)
                nil [874873 878161])
            ("org-indent-region" function
               (:documentation "Indent each non-blank line in the region.
Called from a program, START and END specify the region to
indent.  The function will not indent contents of example blocks,
verse blocks and export blocks as leading white spaces are
assumed to be significant there."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [878163 882982])
            ("org-indent-drawer" function
               (:documentation "Indent the drawer at point."
                :user-visible-flag t)
                nil [882984 883507])
            ("org-indent-block" function
               (:documentation "Indent the block at point."
                :user-visible-flag t)
                nil [883509 884185])
            ("org-setup-filling" function nil nil [884771 885637])
            ("org-fill-line-break-nobreak-p" function (:documentation "Non-nil when a new line at point would create an Org line break.") nil [885639 885879])
            ("org-fill-paragraph-with-timestamp-nobreak-p" function (:documentation "Non-nil when a new line at point would split a timestamp.") nil [885881 886076])
            ("org-fill-n-macro-as-item-nobreak-p" function (:documentation "Non-nil when a new line at point would create a new list.") nil [886078 886377])
            ("declare-function" code nil nil [886379 886428])
            ("orgtbl-line-start-regexp" variable nil nil [886429 886462])
            ("org-adaptive-fill-function" function (:documentation "Compute a fill prefix for the current line.
Return fill prefix, as a string, or nil if current line isn't
meant to be filled.  For convenience, if `adaptive-fill-regexp'
matches in paragraphs or comments, use it.") nil [886483 889041])
            ("declare-function" code nil nil [889043 889113])
            ("message-cite-prefix-regexp" variable nil nil [889114 889149])
            ("org-fill-element" function
               (:documentation "Fill element at point, when applicable.

This function only applies to comment blocks, comments, example
blocks and paragraphs.  Also, as a special case, re-align table
when point is at one.

If JUSTIFY is non-nil (interactively, with prefix argument),
justify as well.  If `sentence-end-double-space' is non-nil, then
period followed by one space does not end a sentence, so don't
break a line there.  The variable `fill-column' controls the
width for filling.

For convenience, when point is at a plain list, an item or
a footnote definition, try to fill the first paragraph within."
                :arguments ("justify"))
                nil [889169 893803])
            ("org-fill-paragraph" function
               (:documentation "Fill element at point, when applicable.

This function only applies to comment blocks, comments, example
blocks and paragraphs.  Also, as a special case, re-align table
when point is at one.

For convenience, when point is at a plain list, an item or
a footnote definition, try to fill the first paragraph within.

If JUSTIFY is non-nil (interactively, with prefix argument),
justify as well.  If `sentence-end-double-space' is non-nil, then
period followed by one space does not end a sentence, so don't
break a line there.  The variable `fill-column' controls the
width for filling.

The REGION argument is non-nil if called interactively; in that
case, if Transient Mark mode is enabled and the mark is active,
fill each of the elements in the active region, instead of just
filling the current element."
                :user-visible-flag t
                :arguments ("justify" "region"))
                nil [893805 895738])
            ("org-remap" code nil nil [895739 895799])
            ("org-auto-fill-function" function (:documentation "Auto-fill function.") nil [895801 896227])
            ("org-comment-line-break-function" function
               (:documentation "Break line at point and indent, continuing comment if within one.
The inserted newline is marked hard if variable
`use-hard-newlines' is true, unless optional argument SOFT is
non-nil."
                :arguments ("soft"))
                nil [896229 896690])
            ("org-toggle-fixed-width" function
               (:documentation "Toggle fixed-width markup.

Add or remove fixed-width markup on current line, whenever it
makes sense.  Return an error otherwise.

If a region is active and if it contains only fixed-width areas
or blank lines, remove all fixed-width markup in it.  If the
region contains anything else, convert all non-fixed-width lines
to fixed-width ones.

Blank lines at the end of the region are ignored unless the
region only contains such lines."
                :user-visible-flag t)
                nil [896716 901800])
            ("org-setup-comments-handling" function nil nil [902557 902953])
            ("org-insert-comment" function (:documentation "Insert an empty comment above current line.
If the line is empty, insert comment at its beginning.  When
point is within a source block, comment according to the related
major mode.") nil [902955 903773])
            ("comment-empty-lines" variable nil nil [903775 903803])
            ("org-comment-or-uncomment-region" function
               (:documentation "Comment or uncomment each non-blank line in the region.
Uncomment each non-blank line between BEG and END if it only
contains commented lines.  Otherwise, comment them.  If region is
strictly within a source block, use appropriate comment syntax."
                :arguments ("beg" "end" "_"))
                nil [903827 906495])
            ("org-comment-dwim" function
               (:documentation "Call `comment-dwim' within a source edit buffer if needed."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [906497 906750])
            ("org-timestamp--to-internal-time" function
               (:documentation "Encode TIMESTAMP object into Emacs internal time.
Use end of date range or time range when END is non-nil."
                :arguments ("timestamp" "end"))
                nil [906885 907317])
            ("org-timestamp-has-time-p" function
               (:documentation "Non-nil when TIMESTAMP has a time specified."
                :arguments ("timestamp"))
                nil [907319 907459])
            ("org-timestamp-format" function
               (:documentation "Format a TIMESTAMP object into a string.

FORMAT is a format specifier to be passed to
`format-time-string'.

When optional argument END is non-nil, use end of date-range or
time-range, if possible.

When optional argument UTC is non-nil, time will be expressed as
Universal Time."
                :arguments ("timestamp" "format" "end" "utc"))
                nil [907461 907907])
            ("org-timestamp-split-range" function
               (:documentation "Extract a TIMESTAMP object from a date or time range.

END, when non-nil, means extract the end of the range.
Otherwise, extract its start.

Return a new timestamp object."
                :arguments ("timestamp" "end"))
                nil [907909 909100])
            ("org-timestamp-translate" function
               (:documentation "Translate TIMESTAMP object to custom format.

Format string is defined in `org-time-stamp-custom-formats',
which see.

When optional argument BOUNDARY is non-nil, it is either the
symbol `start' or `end'.  In this case, only translate the
starting or ending part of TIMESTAMP if it is a date or time
range.  Otherwise, translate both parts.

Return timestamp as-is if `org-display-custom-times' is nil or if
it has a `diary' type."
                :arguments ("timestamp" "boundary"))
                nil [909102 910112])
            ("reftex-docstruct-symbol" variable nil nil [910134 910166])
            ("org--rds" variable nil nil [910167 910184])
            ("org-reftex-citation" function
               (:documentation "Use reftex-citation to insert a citation into the buffer.
This looks for a line like

#+BIBLIOGRAPHY: foo plain option:-d

and derives from it that foo.bib is the bibliography file relevant
for this document.  It then installs the necessary environment for RefTeX
to work in this buffer and calls `reftex-citation'  to insert a citation
into the buffer.

Export of such citations to both LaTeX and HTML is handled by the contributed
package ox-bibtex by Taru Karttunen."
                :user-visible-flag t)
                nil [910186 911174])
            ("org-beginning-of-line" function
               (:documentation "Go to the beginning of the current visible line.

If this is a headline, and `org-special-ctrl-a/e' is set, ignore
tags on the first attempt, and only move to after the tags when
the cursor is already beyond the end of the headline.

With argument N not nil or 1, move forward N - 1 lines first."
                :user-visible-flag t
                :arguments ("n"))
                nil [911224 913689])
            ("org-end-of-line" function
               (:documentation "Go to the end of the line, but before ellipsis, if any.

If this is a headline, and `org-special-ctrl-a/e' is set, ignore
tags on the first attempt, and only move to after the tags when
the cursor is already beyond the end of the headline.

With argument N not nil or 1, move forward N - 1 lines first."
                :user-visible-flag t
                :arguments ("n"))
                nil [913691 915669])
            ("define-key" code nil nil [915671 915726])
            ("define-key" code nil nil [915727 915776])
            ("org-backward-sentence" function
               (:documentation "Go to beginning of sentence, or beginning of table field.
This will call `backward-sentence' or `org-table-beginning-of-field',
depending on context."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [915778 916577])
            ("org-forward-sentence" function
               (:documentation "Go to end of sentence, or end of table field.
This will call `forward-sentence' or `org-table-end-of-field',
depending on context."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [916579 917858])
            ("define-key" code nil nil [917860 917915])
            ("define-key" code nil nil [917916 917970])
            ("org-kill-line" function
               (:documentation "Kill line, to tags or end of line."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [917972 918731])
            ("define-key" code nil nil [918733 918780])
            ("org-yank" function
               (:documentation "Yank.  If the kill is a subtree, treat it specially.
This command will look at the current kill and check if is a single
subtree, or a series of subtrees[1].  If it passes the test, and if the
cursor is at the beginning of a line or after the stars of a currently
empty headline, then the yank is handled specially.  How exactly depends
on the value of the following variables.

`org-yank-folded-subtrees'
    By default, this variable is non-nil, which results in
    subtree(s) being folded after insertion, except if doing so
    would swallow text after the yanked text.

`org-yank-adjusted-subtrees'
    When non-nil (the default value is nil), the subtree will be
    promoted or demoted in order to fit into the local outline tree
    structure, which means that the level will be adjusted so that it
    becomes the smaller one of the two *visible* surrounding headings.

Any prefix to this command will cause `yank' to be called directly with
no special treatment.  In particular, a simple `\\[universal-argument]' prefix will just
plainly yank the text as it is.

[1] The test checks if the first non-white line is a heading
    and if there are no other headings with fewer stars."
                :user-visible-flag t
                :arguments ("arg"))
                nil [918782 920064])
            ("org-yank-generic" function
               (:documentation "Perform some yank-like command.

This function implements the behavior described in the `org-yank'
documentation.  However, it has been generalized to work for any
interactive command with similar behavior."
                :arguments ("command" "arg"))
                nil [920066 921820])
            ("org-yank-folding-would-swallow-text" function
               (:documentation "Would hide-subtree at BEG swallow any text after END?"
                :arguments ("beg" "end"))
                nil [921822 922339])
            ("define-key" code nil nil [922341 922383])
            ("org-truely-invisible-p" function (:documentation "Check if point is at a character currently not visible.
This version does not only check the character property, but also
`visible-mode'.") nil [922385 922625])
            ("org-invisible-p2" function (:documentation "Check if point is at a character currently not visible.

If the point is at EOL (and not at the beginning of a buffer too),
move it back by one char before doing this check.") nil [922627 922934])
            ("org-back-to-heading" function
               (:documentation "Call `outline-back-to-heading', but provide a better error message."
                :arguments ("invisible-ok"))
                nil [922936 923229])
            ("org-before-first-heading-p" function (:documentation "Before first heading?") nil [923231 923392])
            ("org-at-heading-p" function (:arguments ("ignored")) nil [923394 923465])
            ("org-in-commented-heading-p" function
               (:documentation "Non-nil if point is under a commented heading.
This function also checks ancestors of the current headline,
unless optional argument NO-INHERITANCE is non-nil."
                :arguments ("no-inheritance"))
                nil [923467 924049])
            ("org-at-comment-p" function (:documentation "Is cursor in a commented line?") nil [924051 924212])
            ("org-at-drawer-p" function (:documentation "Is cursor at a drawer keyword?") nil [924214 924361])
            ("org-at-block-p" function (:documentation "Is cursor at a block keyword?") nil [924363 924507])
            ("org-point-at-end-of-empty-headline" function (:documentation "If point is at the end of an empty headline, return t, else nil.
If the heading only contains a TODO keyword, it is still still considered
empty.") nil [924509 924908])
            ("org-at-heading-or-item-p" function nil nil [924910 924987])
            ("org-at-target-p" function nil nil [924989 925102])
            ("defalias" code nil nil [925153 925197])
            ("org-up-heading-all" function
               (:documentation "Move to the heading line of which the present line is a subheading.
This function considers both visible and invisible heading lines.
With argument, move up ARG levels."
                :arguments ("arg"))
                nil [925199 925433])
            ("org-up-heading-safe" function (:documentation "Move to the heading line of which the present line is a subheading.
This version will not throw an error.  It will return the level of the
headline found, or nil if no higher level is found.

Also, this function will be a lot faster than `outline-up-heading',
because it relies on stars being the outline starters.  This can really
make a significant difference in outlines with very many siblings.") nil [925435 926091])
            ("org-first-sibling-p" function
               (:documentation "Is this heading the first child of its parents?"
                :user-visible-flag t)
                nil [926093 926471])
            ("org-goto-sibling" function
               (:documentation "Goto the next sibling, even if it is invisible.
When PREVIOUS is set, go to the previous sibling instead.  Returns t
when a sibling was found.  When none is found, return nil and don't
move point."
                :arguments ("previous"))
                nil [926473 927203])
            ("org-show-siblings" function (:documentation "Show all siblings of the current headline.") nil [927205 927442])
            ("org-goto-first-child" function (:documentation "Goto the first child, even if it is invisible.
Return t when a child was found.  Otherwise don't move point and
return nil.") nil [927444 927908])
            ("org-show-hidden-entry" function (:documentation "Show an entry where even the heading is hidden.") nil [927910 928034])
            ("org-flag-heading" function
               (:documentation "Flag the current heading.  FLAG non-nil means make invisible.
When ENTRY is non-nil, show the entire entry."
                :arguments ("flag" "entry"))
                nil [928036 928540])
            ("org-get-next-sibling" function (:documentation "Move to next heading of the same level, and return point.
If there is no such heading, return nil.
This is like outline-next-sibling, but invisible headings are ok.") nil [928542 928978])
            ("org-get-last-sibling" function (:documentation "Move to previous heading of the same level, and return point.
If there is no such heading, return nil.") nil [928980 929435])
            ("org-end-of-subtree" function
               (:documentation "Goto to the end of a subtree."
                :arguments ("invisible-ok" "to-heading"))
                nil [929437 930892])
            ("org-end-of-meta-data" function
               (:documentation "Skip planning line and properties drawer in current entry.
When optional argument FULL is non-nil, also skip empty lines,
clocking lines and regular drawers at the beginning of the
entry."
                :arguments ("full"))
                nil [930894 931737])
            ("org-forward-heading-same-level" function
               (:documentation "Move forward to the ARG'th subheading at same level as this one.
Stop at the first and last subheadings of a superior heading.
Normally this only looks at visible headings, but when INVISIBLE-OK is
non-nil it will also look at invisible ones."
                :user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [931739 932905])
            ("org-backward-heading-same-level" function
               (:documentation "Move backward to the ARG'th subheading at same level as this one.
Stop at the first and last subheadings of a superior heading."
                :user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [932907 933195])
            ("org-next-visible-heading" function
               (:documentation "Move to the next visible heading.

This function wraps `outline-next-visible-heading' with
`org-with-limited-levels' in order to skip over inline tasks and
respect customization of `org-odd-levels-only'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [933197 933529])
            ("org-previous-visible-heading" function
               (:documentation "Move to the previous visible heading.

This function wraps `outline-previous-visible-heading' with
`org-with-limited-levels' in order to skip over inline tasks and
respect customization of `org-odd-levels-only'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [933531 933879])
            ("org-next-block" function
               (:documentation "Jump to the next block.

With a prefix argument ARG, jump forward ARG many blocks.

When BACKWARD is non-nil, jump to the previous block.

When BLOCK-REGEXP is non-nil, use this regexp to find blocks.
Match data is set according to this regexp when the function
returns.

Return point at beginning of the opening line of found block.
Throw an error if no block is found."
                :user-visible-flag t
                :arguments ("arg" "backward" "block-regexp"))
                nil [933881 935325])
            ("org-previous-block" function
               (:documentation "Jump to the previous block.
With a prefix argument ARG, jump backward ARG many source blocks.
When BLOCK-REGEXP is non-nil, use this regexp to find blocks."
                :user-visible-flag t
                :arguments ("arg" "block-regexp"))
                nil [935327 935600])
            ("org-forward-paragraph" function
               (:documentation "Move forward to beginning of next paragraph or equivalent.

The function moves point to the beginning of the next visible
structural element, which can be a paragraph, a table, a list
item, etc.  It also provides some special moves for convenience:

  - On an affiliated keyword, jump to the beginning of the
    relative element.
  - On an item or a footnote definition, move to the second
    element inside, if any.
  - On a table or a property drawer, jump after it.
  - On a verse or source block, stop after blank lines."
                :user-visible-flag t)
                nil [935602 939131])
            ("org-backward-paragraph" function
               (:documentation "Move backward to start of previous paragraph or equivalent.

The function moves point to the beginning of the current
structural element, which can be a paragraph, a table, a list
item, etc., or to the beginning of the previous visible one if
point is already there.  It also provides some special moves for
convenience:

  - On an affiliated keyword, jump to the first one.
  - On a table or a property drawer, move to its beginning.
  - On comment, example, export, src and verse blocks, stop
    before blank lines."
                :user-visible-flag t)
                nil [939133 942021])
            ("org-forward-element" function
               (:documentation "Move forward by one element.
Move to the next element at the same level, when possible."
                :user-visible-flag t)
                nil [942023 942815])
            ("org-backward-element" function
               (:documentation "Move backward by one element.
Move to the previous element at the same level, when possible."
                :user-visible-flag t)
                nil [942817 944097])
            ("org-up-element" function
               (:documentation "Move to upper element."
                :user-visible-flag t)
                nil [944099 944608])
            ("org-down-element" function
               (:documentation "Move to inner element."
                :user-visible-flag t)
                nil [944610 945229])
            ("org-drag-element-backward" function
               (:documentation "Move backward element at point."
                :user-visible-flag t)
                nil [945231 946470])
            ("org-drag-element-forward" function
               (:documentation "Move forward element at point."
                :user-visible-flag t)
                nil [946472 947908])
            ("org-drag-line-forward" function
               (:documentation "Drag the line at point ARG lines forward."
                :user-visible-flag t
                :arguments ("arg"))
                nil [947910 948255])
            ("org-drag-line-backward" function
               (:documentation "Drag the line at point ARG lines backward."
                :user-visible-flag t
                :arguments ("arg"))
                nil [948257 948394])
            ("org-mark-element" function
               (:documentation "Put point at beginning of this element, mark at end.

Interactively, if this command is repeated or (in Transient Mark
mode) if the mark is active, it marks the next element after the
ones already marked."
                :user-visible-flag t)
                nil [948396 949104])
            ("org-narrow-to-element" function
               (:documentation "Narrow buffer to current element."
                :user-visible-flag t)
                nil [949106 949678])
            ("org-transpose-element" function
               (:documentation "Transpose current and previous elements, keeping blank lines between.
Point is moved after both elements."
                :user-visible-flag t)
                nil [949680 949981])
            ("org-unindent-buffer" function
               (:documentation "Un-indent the visible part of the buffer.
Relative indentation (between items, inside blocks, etc.) isn't
modified."
                :user-visible-flag t)
                nil [949983 950792])
            ("org-show-children" function
               (:documentation "Show all direct subheadings of this heading.
Prefix arg LEVEL is how many levels below the current level
should be shown.  Default is enough to cause the following
heading to appear."
                :user-visible-flag t
                :arguments ("level"))
                nil [950794 952308])
            ("org-show-subtree" function
               (:documentation "Show everything after this heading at deeper levels."
                :user-visible-flag t)
                nil [952310 952502])
            ("org-show-entry" function
               (:documentation "Show the body directly following this heading.
Show the heading too, if it is currently invisible."
                :user-visible-flag t)
                nil [952504 952987])
            ("org-make-options-regexp" function
               (:documentation "Make a regular expression for keyword lines.
KWDS is a list of keywords, as strings.  Optional argument EXTRA,
when non-nil, is a regexp matching keywords names."
                :arguments ("kwds" "extra"))
                nil [952989 953329])
            ("defvar-local" code nil nil [953402 953479])
            ("org-imenu-new-marker" function
               (:documentation "Return a new marker for use by Imenu, and remember the marker."
                :arguments ("pos"))
                nil [953481 953694])
            ("org-imenu-get-tree" function (:documentation "Produce the index for Imenu.") nil [953696 954694])
            ("eval-after-load" code nil nil [954696 954862])
            ("org-link-display-format" function
               (:documentation "Replace links in string S with their description.
If there is no description, use the link target."
                :arguments ("s"))
                nil [954864 955216])
            ("org-toggle-link-display" function
               (:documentation "Toggle the literal or descriptive display of links."
                :user-visible-flag t)
                nil [955218 955598])
            ("org-speedbar-restriction-lock-overlay" variable
               (:documentation "Overlay marking the agenda restriction line in speedbar."
                :default-value (make-overlay 1 1))
                nil [955621 955747])
            ("overlay-put" code nil nil [955748 955840])
            ("overlay-put" code nil nil [955841 955955])
            ("delete-overlay" code nil nil [955956 956010])
            ("org-speedbar-set-agenda-restriction" function
               (:documentation "Restrict future agenda commands to the location at point in speedbar.
To get rid of the restriction, use `\\[org-agenda-remove-restriction-lock]'."
                :user-visible-flag t)
                nil [956012 957378])
            ("speedbar-file-key-map" variable nil nil [957380 957410])
            ("declare-function" code nil nil [957411 957485])
            ("eval-after-load" code nil nil [957486 958036])
            ("org--flyspell-object-check-p" function
               (:documentation "Non-nil when Flyspell can check object at point.
ELEMENT is the element at point."
                :arguments ("element"))
                nil [958092 958936])
            ("org-mode-flyspell-verify" function (:documentation "Function used for `flyspell-generic-check-word-predicate'.") nil [958938 961320])
            ("put" code nil nil [961321 961387])
            ("org-remove-flyspell-overlays-in" function
               (:documentation "Remove flyspell overlays in region."
                :arguments ("beg" "end"))
                nil [961389 961618])
            ("flyspell-delayed-commands" variable nil nil [961620 961654])
            ("eval-after-load" code nil nil [961655 961752])
            ("eval-after-load" code nil nil [961820 962165])
            ("eval-after-load" code nil nil [962226 962396])
            ("eval-after-load" code nil nil [962451 962690])
            ("org-bookmark-jump-unhide" function (:documentation "Unhide the current position, to show the bookmark location.") nil [962692 962985])
            ("org-mark-jump-unhide" function (:documentation "Make the point visible with `org-show-context' after jumping to the mark.") nil [962987 963196])
            ("eval-after-load" code nil nil [963198 963376])
            ("eval-after-load" code nil nil [963378 963560])
            ("eval-after-load" code nil nil [963562 963736])
            ("session-globals-exclude" variable nil nil [963786 963818])
            ("eval-after-load" code nil nil [963819 963903])
            ("org" package nil nil [963921 963935])
            ("run-hooks" code nil nil [963937 963963]))          
      :file "org.el.gz"
      :pointmax 963986
      :fsize 260849
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 22022 . 22023) (symbol 21800 . 21816) (open-paren 21799 . 21800) (close-paren 3094 . 3095) (symbol 3057 . 3074) (open-paren 3056 . 3057))))
  :file "!usr!local!share!emacs!27.0.50!lisp!org!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
