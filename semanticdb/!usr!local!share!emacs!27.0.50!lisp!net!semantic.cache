;; Object semanticdb-project-database-file-1c130a0
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1c130a0"
  :tables
  (list
    (semanticdb-table "semanticdb-table-2056e0c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("auth-source" include nil nil [1091 1113])
            ("advice" include nil nil [1114 1131])
            ("cl-lib" include nil nil [1132 1149])
            ("custom" include nil nil [1150 1167])
            ("format-spec" include nil nil [1168 1190])
            ("parse-time" include nil nil [1191 1212])
            ("password-cache" include nil nil [1213 1238])
            ("shell" include nil nil [1239 1255])
            ("timer" include nil nil [1256 1272])
            ("ucs-normalize" include nil nil [1273 1297])
            ("tramp-loaddefs" include nil nil [1299 1324])
            ("tramp-compat-funcall" function
               (:documentation "Call FUNCTION if it exists.  Do not raise compiler warnings."
                :arguments ("function" "arguments"))
                nil [1507 1718])
            ("tramp-compat-temporary-file-directory" function (:documentation "Return name of directory for temporary files.
It is the default value of `temporary-file-directory'.") nil [1720 2031])
            ("tramp-compat-make-temp-file" function
               (:documentation "Create a local temporary file (compat function).
Add the extension of F, if existing."
                :arguments ("f" "dir-flag"))
                nil [2033 2423])
            ("defalias" code nil nil [2498 2674])
            ("tramp-compat-process-running-p" function
               (:documentation "Returns t if system process PROCESS-NAME is running for `user-login-name'."
                :arguments ("process-name"))
                nil [2676 3794])
            ("unless" code nil nil [3857 3950])
            ("if" code nil nil [4005 4346])
            ("if" code nil nil [4348 4647])
            ("if" code nil nil [4649 5050])
            ("if" code nil nil [5052 5457])
            ("if" code nil nil [5459 5921])
            ("if" code nil nil [5923 6254])
            ("if" code nil nil [6256 6568])
            ("unless" code nil nil [6612 6683])
            ("if" code nil nil [6729 7174])
            ("tramp-file-missing" variable
               (:documentation "The error symbol for the `file-missing' error."
                :constant-flag t
                :default-value (if (get 'file-missing 'error-conditions) 'file-missing 'file-error))
                nil [7223 7374])
            ("if" code nil nil [8244 8814])
            ("if" code nil nil [7837 8240])
            ("if" code nil nil [7494 7833])
            ("tramp-compat-tramp-syntax" function (:documentation "Return proper value of `tramp-syntax'.") nil [8907 9086])
            ("tramp-compat-tramp-file-name-slots" function nil nil [9148 9365])
            ("tramp-compat-use-url-tramp-p" variable
               (:documentation "Whether to use url-tramp.el."
                :constant-flag t
                :default-value (fboundp 'temporary-file-directory))
                nil [9564 9672])
            ("if" code nil nil [9731 10063])
            ("add-hook" code nil nil [10066 10198])
            ("tramp-compat" package nil nil [10200 10223]))          
      :file "tramp-compat.el.gz"
      :pointmax 10266
      :fsize 3166
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 10063 . 10064) (symbol 9712 . 9728) (open-paren 9711 . 9712) (close-paren 8814 . 8815) (symbol 7475 . 7491) (open-paren 7474 . 7475)))
    (semanticdb-table "semanticdb-table-17a38fc"
      :file "tramp-loaddefs.el"
      :fsize 61615
      :lastmodtime '(23455 920 0 0))
    (semanticdb-table "semanticdb-table-1c6360c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1228 1244])
            ("tramp-adb-program" variable
               (:documentation "Name of the Android Debug Bridge program."
                :default-value "adb")
                nil [1267 1398])
            ("tramp-adb-connect-if-not-connected" variable (:documentation "Try to run `adb connect' if provided device is not connected currently.
It is used for TCP/IP devices.") nil [1421 1629])
            ("tramp-adb-method" variable
               (:documentation "When this method name is used, forward all calls to Android Debug Bridge."
                :constant-flag t
                :default-value "adb")
                nil [1652 1763])
            ("tramp-adb-prompt" variable
               (:documentation "Regexp used as prompt in almquist shell."
                :default-value "^\\(?:[[:digit:]]*|?\\)?\\(?:[[:alnum:];[]*@?[[:alnum:]]*[^#\\$]*\\)?[#\\$][[:space:]]")
                nil [1786 2002])
            ("tramp-adb-ls-date-regexp" variable
               (:documentation "Regexp for date format in ls output."
                :constant-flag t
                :default-value "[[:space:]][0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9][[:space:]][0-9][0-9]:[0-9][0-9][[:space:]]")
                nil [2004 2173])
            ("tramp-adb-ls-toolbox-regexp" variable
               (:documentation "Regexp for ls output."
                :constant-flag t
                :default-value (concat "^[[:space:]]*\\([-.[:alpha:]]+\\)" "\\(?:[[:space:]]+[[:digit:]]+\\)?" "[[:space:]]*\\([^[:space:]]+\\)" "[[:space:]]+\\([^[:space:]]+\\)" "[[:space:]]+\\([[:digit:]]+\\)" "[[:space:]]+\\([-[:digit:]]+[[:space:]][:[:digit:]]+\\)" "[[:space:]]\\(.*\\)$"))
                nil [2175 2629])
            ("add-to-list" code nil nil [2652 2789])
            ("add-to-list" code nil nil [2812 2879])
            ("eval-after-load" code nil nil [2902 3019])
            ("tramp-adb-file-name-handler-alist" variable
               (:documentation "Alist of handler functions for Tramp ADB method."
                :constant-flag t
                :default-value '((access-file . ignore) (add-name-to-file . tramp-handle-add-name-to-file) (copy-file . tramp-adb-handle-copy-file) (delete-directory . tramp-adb-handle-delete-directory) (delete-file . tramp-adb-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-adb-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (exec-path . tramp-adb-handle-exec-path) (expand-file-name . tramp-adb-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . ignore) (file-attributes . tramp-adb-handle-file-attributes) (file-directory-p . tramp-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-handle-file-exists-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-adb-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-adb-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-handle-file-exists-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-adb-handle-file-system-info) (file-truename . tramp-adb-handle-file-truename) (file-writable-p . tramp-adb-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-adb-handle-make-directory) (make-directory-internal . ignore) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-handle-make-symbolic-link) (process-file . tramp-adb-handle-process-file) (rename-file . tramp-adb-handle-rename-file) (set-file-acl . ignore) (set-file-modes . tramp-adb-handle-set-file-modes) (set-file-selinux-context . ignore) (set-file-times . tramp-adb-handle-set-file-times) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . tramp-adb-handle-shell-command) (start-file-process . tramp-adb-handle-start-file-process) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-adb-handle-write-region)))
                nil [3042 7143])
            ("tramp-adb-file-name-p" function
               (:documentation "Check if it's a filename for ADB."
                :arguments ("filename"))
                nil [7302 7490])
            ("tramp-adb-file-name-handler" function
               (:documentation "Invoke the ADB handler for OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [7513 7874])
            ("tramp-register-foreign-file-name-handler" code nil nil [7897 7992])
            ("tramp-adb-parse-device-names" function
               (:documentation "Return a list of (nil host) tuples allowed to access."
                :arguments ("_ignore"))
                nil [8015 9314])
            ("tramp-adb-handle-expand-file-name" function
               (:documentation "Like `expand-file-name' for Tramp files."
                :arguments ("name" "dir"))
                nil [9316 10409])
            ("tramp-adb-handle-file-system-info" function
               (:documentation "Like `file-system-info' for Tramp files."
                :arguments ("filename"))
                nil [10411 11398])
            ("tramp-adb-handle-file-truename" function
               (:documentation "Like `file-truename' for Tramp files."
                :arguments ("filename"))
                nil [11493 15022])
            ("tramp-adb-handle-file-attributes" function
               (:documentation "Like `file-attributes' for Tramp files."
                :arguments ("filename" "id-format"))
                nil [15024 15633])
            ("tramp-do-parse-file-attributes-with-ls" function
               (:documentation "Parse `file-attributes' for Tramp files using the ls(1) command."
                :arguments ("vec" "id-format"))
                nil [15635 16812])
            ("tramp-adb-handle-directory-files-and-attributes" function
               (:documentation "Like `directory-files-and-attributes' for Tramp files."
                :arguments ("directory" "full" "match" "nosort" "id-format"))
                nil [16814 18485])
            ("tramp-adb-get-ls-command" function
               (:documentation "Determine `ls' command and its arguments."
                :arguments ("vec"))
                nil [18487 19459])
            ("tramp-adb--gnu-switches-to-ash" function
               (:documentation "Almquist shell can't handle multiple arguments.
Convert (\"-al\") to (\"-a\" \"-l\").  Remove arguments like \"--dired\"."
                :arguments ("switches"))
                nil [19461 19973])
            ("tramp-adb-sh-fix-ls-output" function
               (:documentation "Insert dummy 0 in empty size columns.
Androids \"ls\" command doesn't insert size column for directories:
Emacs dired can't find files."
                :arguments ("sort-by-time"))
                nil [19975 20950])
            ("tramp-adb-ls-output-time-less-p" function
               (:documentation "Sort \"ls\" output by time, descending."
                :arguments ("a" "b"))
                nil [20952 21345])
            ("tramp-adb-ls-output-name-less-p" function
               (:documentation "Sort \"ls\" output by name, ascending."
                :arguments ("a" "b"))
                nil [21347 21693])
            ("tramp-adb-handle-make-directory" function
               (:documentation "Like `make-directory' for Tramp files."
                :arguments ("dir" "parents"))
                nil [21695 22351])
            ("tramp-adb-handle-delete-directory" function
               (:documentation "Like `delete-directory' for Tramp files."
                :arguments ("directory" "recursive" "_trash"))
                nil [22353 23051])
            ("tramp-adb-handle-delete-file" function
               (:documentation "Like `delete-file' for Tramp files."
                :arguments ("filename" "_trash"))
                nil [23053 23493])
            ("tramp-adb-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for Tramp files."
                :arguments ("filename" "directory"))
                nil [23495 24490])
            ("tramp-adb-handle-file-local-copy" function
               (:documentation "Like `file-local-copy' for Tramp files."
                :arguments ("filename"))
                nil [24492 25395])
            ("tramp-adb-handle-file-writable-p" function
               (:documentation "Like `tramp-sh-handle-file-writable-p'.
But handle the case, if the \"test\" command is not available."
                :arguments ("filename"))
                nil [25397 26283])
            ("tramp-adb-handle-write-region" function
               (:documentation "Like `write-region' for Tramp files."
                :arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew"))
                nil [26285 28237])
            ("tramp-adb-handle-set-file-modes" function
               (:documentation "Like `set-file-modes' for Tramp files."
                :arguments ("filename" "mode"))
                nil [28239 28575])
            ("tramp-adb-handle-set-file-times" function
               (:documentation "Like `set-file-times' for Tramp files."
                :arguments ("filename" "time"))
                nil [28577 29167])
            ("tramp-adb-handle-copy-file" function
               (:documentation "Like `copy-file' for Tramp files.
PRESERVE-UID-GID and PRESERVE-EXTENDED-ATTRIBUTES are completely ignored."
                :arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "_preserve-uid-gid" "_preserve-extended-attributes"))
                nil [29169 31819])
            ("tramp-adb-handle-rename-file" function
               (:documentation "Like `rename-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [31821 33375])
            ("tramp-adb-handle-process-file" function
               (:documentation "Like `process-file' for Tramp files."
                :arguments ("program" "infile" "destination" "display" "args"))
                nil [33377 37068])
            ("tramp-adb-handle-shell-command" function
               (:documentation "Like `shell-command' for Tramp files."
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [37070 39646])
            ("tramp-adb-handle-start-file-process" function
               (:documentation "Like `start-file-process' for Tramp files."
                :arguments ("name" "buffer" "program" "args"))
                nil [39811 42682])
            ("tramp-adb-handle-exec-path" function (:documentation "Like `exec-path' for Tramp files.") nil [42684 43197])
            ("tramp-adb-get-device" function
               (:documentation "Return full host name from VEC to be used in shell execution.
E.g. a host name \"192.168.1.1#5555\" returns \"192.168.1.1:5555\"
     a host name \"R38273882DE\" returns \"R38273882DE\"."
                :arguments ("vec"))
                nil [43199 44960])
            ("tramp-adb-execute-adb-command" function
               (:documentation "Returns nil on success error-output on failure."
                :arguments ("vec" "args"))
                nil [44962 45513])
            ("tramp-adb-find-test-command" function
               (:documentation "Checks, whether the ash has a builtin \"test\" command.
This happens for Android >= 4.0."
                :arguments ("vec"))
                nil [45515 45750])
            ("tramp-adb-send-command" function
               (:documentation "Send the COMMAND to connection VEC."
                :arguments ("vec" "command"))
                nil [45777 46584])
            ("tramp-adb-send-command-and-check" function
               (:documentation "Run COMMAND and check its exit status.
Sends `echo $?' along with the COMMAND for checking the exit
status.  If COMMAND is nil, just sends `echo $?'.  Returns nil if
the exit status is not equal 0, and t otherwise."
                :arguments ("vec" "command"))
                nil [46586 47384])
            ("tramp-adb-barf-unless-okay" function
               (:documentation "Run COMMAND, check exit status, throw error if exit status not okay.
FMT and ARGS are passed to `error'."
                :arguments ("vec" "command" "fmt" "args"))
                nil [47386 47666])
            ("tramp-adb-wait-for-output" function
               (:documentation "Wait for output from remote command."
                :arguments ("proc" "timeout"))
                nil [47668 49034])
            ("tramp-adb-maybe-open-connection" function
               (:documentation "Maybe open a connection VEC.
Does not do anything if a connection is already open, but re-opens the
connection if a previous connection has died for some reason."
                :arguments ("vec"))
                nil [49036 52573])
            ("add-hook" code nil nil [52575 52659])
            ("tramp-adb" package nil nil [52661 52681]))          
      :file "tramp-adb.el.gz"
      :pointmax 52710
      :fsize 14170
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1177a08"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp-compat" include nil nil [2138 2161])
            ("trampver" include nil nil [2162 2181])
            ("cl-lib" include nil nil [2208 2225])
            ("auto-save-file-name-transforms" variable nil nil [2226 2265])
            ("eshell-path-env" variable nil nil [2266 2290])
            ("ls-lisp-use-insert-directory-program" variable nil nil [2291 2336])
            ("outline-regexp" variable nil nil [2337 2360])
            ("tramp" customgroup
               (:documentation "Edit remote files with a combination of ssh, scp, etc."
                :user-visible-flag t)
                nil [2405 2571])
            ("tramp-mode" variable
               (:documentation "Whether Tramp is enabled.
If it is set to nil, all remote file names are used literally."
                :default-value t)
                nil [2652 2802])
            ("tramp-verbose" variable
               (:documentation "Verbosity level for Tramp messages.
Any level x includes messages for all levels 1 .. x-1.  The levels are

 0  silent (no tramp messages at all)
 1  errors
 2  warnings
 3  connection to remote hosts (default level)
 4  activities
 5  internal
 6  sent and received strings
 7  file caching
 8  connection properties
 9  test commands
10  traces (huge)."
                :default-value 3)
                nil [2804 3223])
            ("tramp-backup-directory-alist" variable (:documentation "Alist of filename patterns and backup directory names.
Each element looks like (REGEXP . DIRECTORY), with the same meaning like
in `backup-directory-alist'.  If a Tramp file is backed up, and DIRECTORY
is a local file name, the backup directory is prepended with Tramp file
name prefix (method, user, host) of file.

(setq tramp-backup-directory-alist backup-directory-alist)

gives the same backup policy for Tramp files on their hosts like the
policy for local files.") nil [3225 3877])
            ("tramp-auto-save-directory" variable (:documentation "Put auto-save files in this directory, if set.
The idea is to use a local directory so that auto-saving is faster.
This setting has precedence over `auto-save-file-name-transforms'.") nil [3879 4218])
            ("tramp-encoding-shell" variable
               (:documentation "Use this program for encoding and decoding commands on the local host.
This shell is used to execute the encoding and decoding command on the
local host, so if you want to use `~' in those commands, you should
choose a shell here which groks tilde expansion.  `/bin/sh' normally
does not understand tilde expansion.

For encoding and decoding, commands like the following are executed:

    /bin/sh -c COMMAND < INPUT > OUTPUT

This variable can be used to change the \"/bin/sh\" part.  See the
variable `tramp-encoding-command-switch' for the \"-c\" part.

If the shell must be forced to be interactive, see
`tramp-encoding-command-interactive'.

Note that this variable is not used for remote commands.  There are
mechanisms in tramp.el which automatically determine the right shell to
use for the remote host."
                :default-value (or (tramp-compat-funcall 'w32-shell-name) "/bin/sh"))
                nil [4220 5171])
            ("tramp-encoding-command-switch" variable
               (:documentation "Use this switch together with `tramp-encoding-shell' for local commands.
See the variable `tramp-encoding-shell' for more information."
                :default-value (if (tramp-compat-funcall 'w32-shell-dos-semantics) "/c" "-c"))
                nil [5173 5450])
            ("tramp-encoding-command-interactive" variable
               (:documentation "Use this switch together with `tramp-encoding-shell' for interactive shells.
See the variable `tramp-encoding-shell' for more information."
                :default-value (unless (tramp-compat-funcall 'w32-shell-dos-semantics) "-i"))
                nil [5452 5776])
            ("tramp-methods" variable (:documentation "Alist of methods for remote files.
This is a list of entries of the form (NAME PARAM1 PARAM2 ...).
Each NAME stands for a remote access method.  Each PARAM is a
pair of the form (KEY VALUE).  The following KEYs are defined:
  * `tramp-remote-shell'
    This specifies the shell to use on the remote host.  This
    MUST be a Bourne-like shell.  It is normally not necessary to
    set this to any value other than \"/bin/sh\": Tramp wants to
    use a shell which groks tilde expansion, but it can search
    for it.  Also note that \"/bin/sh\" exists on all Unixen,
    this might not be true for the value that you decide to use.
    You Have Been Warned.
  * `tramp-remote-shell-login'
    This specifies the arguments to let `tramp-remote-shell' run
    as a login shell.  It defaults to (\"-l\"), but some shells,
    like ksh, require another argument.  See
    `tramp-connection-properties' for a way to overwrite the
    default value.
  * `tramp-remote-shell-args'
    For implementation of `shell-command', this specifies the
    arguments to let `tramp-remote-shell' run a single command.
  * `tramp-login-program'
    This specifies the name of the program to use for logging in to the
    remote host.  This may be the name of rsh or a workalike program,
    or the name of telnet or a workalike, or the name of su or a workalike.
  * `tramp-login-args'
    This specifies the list of arguments to pass to the above
    mentioned program.  Please note that this is a list of list of arguments,
    that is, normally you don't want to put \"-a -b\" or \"-f foo\"
    here.  Instead, you want a list (\"-a\" \"-b\"), or (\"-f\" \"foo\").
    There are some patterns: \"%h\" in this list is replaced by the host
    name, \"%u\" is replaced by the user name, \"%p\" is replaced by the
    port number, and \"%%\" can be used to obtain a literal percent character.
    If a list containing \"%h\", \"%u\" or \"%p\" is unchanged during
    expansion (i.e. no host or no user specified), this list is not used as
    argument.  By this, arguments like (\"-l\" \"%u\") are optional.
    \"%t\" is replaced by the temporary file name produced with
    `tramp-make-tramp-temp-file'.  \"%k\" indicates the keep-date
    parameter of a program, if exists.  \"%c\" adds additional
    `tramp-ssh-controlmaster-options' options for the first hop.
  * `tramp-login-env'
     A list of environment variables and their values, which will
     be set when calling `tramp-login-program'.
  * `tramp-async-args'
    When an asynchronous process is started, we know already that
    the connection works.  Therefore, we can pass additional
    parameters to suppress diagnostic messages, in order not to
    tamper the process output.
  * `tramp-copy-program'
    This specifies the name of the program to use for remotely copying
    the file; this might be the absolute filename of scp or the name of
    a workalike program.  It is always applied on the local host.
  * `tramp-copy-args'
    This specifies the list of parameters to pass to the above mentioned
    program, the hints for `tramp-login-args' also apply here.
  * `tramp-copy-env'
     A list of environment variables and their values, which will
     be set when calling `tramp-copy-program'.
  * `tramp-remote-copy-program'
    The listener program to be applied on remote side, if needed.
  * `tramp-remote-copy-args'
    The list of parameters to pass to the listener program, the hints
    for `tramp-login-args' also apply here.  Additionally, \"%r\" could
    be used here and in `tramp-copy-args'.  It denotes a randomly
    chosen port for the remote listener.
  * `tramp-copy-keep-date'
    This specifies whether the copying program when the preserves the
    timestamp of the original file.
  * `tramp-copy-keep-tmpfile'
    This specifies whether a temporary local file shall be kept
    for optimization reasons (useful for \"rsync\" methods).
  * `tramp-copy-recursive'
    Whether the operation copies directories recursively.
  * `tramp-default-port'
    The default port of a method.
  * `tramp-tmpdir'
    A directory on the remote host for temporary files.  If not
    specified, \"/tmp\" is taken as default.
  * `tramp-connection-timeout'
    This is the maximum time to be spent for establishing a connection.
    In general, the global default value shall be used, but for
    some methods, like \"su\" or \"sudo\", a shorter timeout
    might be desirable.
  * `tramp-case-insensitive'
    Whether the remote file system handles file names case insensitive.
    Only a non-nil value counts, the default value nil means to
    perform further checks on the remote host.  See
    `tramp-connection-properties' for a way to overwrite this.

What does all this mean?  Well, you should specify `tramp-login-program'
for all methods; this program is used to log in to the remote site.  Then,
there are two ways to actually transfer the files between the local and the
remote side.  One way is using an additional scp-like program.  If you want
to do this, set `tramp-copy-program' in the method.

Another possibility for file transfer is inline transfer, i.e. the
file is passed through the same buffer used by `tramp-login-program'.  In
this case, the file contents need to be protected since the
`tramp-login-program' might use escape codes or the connection might not
be eight-bit clean.  Therefore, file contents are encoded for transit.
See the variables `tramp-local-coding-commands' and
`tramp-remote-coding-commands' for details.

So, to summarize: if the method is an out-of-band method, then you
must specify `tramp-copy-program' and `tramp-copy-args'.  If it is an
inline method, then these two parameters should be nil.

Notes:

When using `su' or `sudo' the phrase \"open connection to a remote
host\" sounds strange, but it is used nevertheless, for consistency.
No connection is opened to a remote host, but `su' or `sudo' is
started on the local host.  You should specify a remote host
`localhost' or the name of the local host.  Another host name is
useful only in combination with `tramp-default-proxies-alist'.") nil [5799 11938])
            ("tramp-default-method" variable
               (:documentation "Default method to use for transferring files.
See `tramp-methods' for possibilities.
Also see `tramp-default-method-alist'."
                :default-value (cond ((and (eq system-type 'windows-nt) (executable-find "pscp")) "pscp") ((executable-find "scp") "scp") (t "ftp")))
                nil [11940 13029])
            ("tramp-default-method-alist" variable (:documentation "Default method to use for specific host/user pairs.
This is an alist of items (HOST USER METHOD).  The first matching item
specifies the method to use for a file name which does not specify a
method.  HOST and USER are regular expressions or nil, which is
interpreted as a regular expression which always matches.  If no entry
matches, the variable `tramp-default-method' takes effect.

If the file name does not specify the user, lookup is done using the
empty string for the user name.

See `tramp-methods' for a list of possibilities for METHOD.") nil [13052 13833])
            ("tramp-default-method-marker" variable
               (:documentation "Marker for default method in remote file names."
                :constant-flag t
                :default-value "-")
                nil [13835 13929])
            ("tramp-default-user" variable (:documentation "Default user to use for transferring files.
It is nil by default; otherwise settings in configuration files like
\"~/.ssh/config\" would be overwritten.  Also see `tramp-default-user-alist'.

This variable is regarded as obsolete, and will be removed soon.") nil [13931 14279])
            ("tramp-default-user-alist" variable (:documentation "Default user to use for specific method/host pairs.
This is an alist of items (METHOD HOST USER).  The first matching item
specifies the user to use for a file name which does not specify a
user.  METHOD and HOST are regular expressions or nil, which is
interpreted as a regular expression which always matches.  If no entry
matches, the variable `tramp-default-user' takes effect.

If the file name does not specify the method, lookup is done using the
empty string for the method name.") nil [14302 15026])
            ("tramp-default-host" variable
               (:documentation "Default host to use for transferring files.
Useful for su and sudo methods mostly."
                :default-value (system-name))
                nil [15028 15191])
            ("tramp-default-host-alist" variable (:documentation "Default host to use for specific method/user pairs.
This is an alist of items (METHOD USER HOST).  The first matching item
specifies the host to use for a file name which does not specify a
host.  METHOD and USER are regular expressions or nil, which is
interpreted as a regular expression which always matches.  If no entry
matches, the variable `tramp-default-host' takes effect.

If the file name does not specify the method, lookup is done using the
empty string for the method name.") nil [15214 15956])
            ("tramp-default-proxies-alist" variable (:documentation "Route to be followed for specific host/user pairs.
This is an alist of items (HOST USER PROXY).  The first matching
item specifies the proxy to be passed for a file name located on
a remote target matching USER@HOST.  HOST and USER are regular
expressions.  PROXY must be a Tramp filename without a localname
part.  Method and user name on PROXY are optional, which is
interpreted with the default values.  PROXY can contain the
patterns %h and %u, which are replaced by the strings matching
HOST or USER, respectively.

HOST, USER or PROXY could also be Lisp forms, which will be
evaluated.  The result must be a string or nil, which is
interpreted as a regular expression which always matches.") nil [15958 16887])
            ("tramp-save-ad-hoc-proxies" variable (:documentation "Whether to save ad-hoc proxies persistently.") nil [16889 17030])
            ("tramp-restricted-shell-hosts-alist" variable
               (:documentation "List of hosts, which run a restricted shell.
This is a list of regular expressions, which denote hosts running
a registered shell like \"rbash\".  Those hosts can be used as
proxies only, see `tramp-default-proxies-alist'.  If the local
host runs a registered shell, it shall be added to this list, too."
                :default-value (when (memq system-type '(windows-nt)) (list (concat "\\`" (regexp-quote (system-name)) "\\'"))))
                nil [17032 17569])
            ("tramp-local-host-regexp" variable
               (:documentation "Host names which are regarded as local host.
If the local host runs a chrooted environment, set this to nil."
                :default-value (concat "\\`" (regexp-opt (list "localhost" "localhost6" (system-name) "127.0.0.1" "::1") t) "\\'"))
                nil [17592 17978])
            ("tramp-completion-function-alist" variable (:documentation "Alist of methods for remote files.
This is a list of entries of the form (NAME PAIR1 PAIR2 ...).
Each NAME stands for a remote access method.  Each PAIR is of the form
(FUNCTION FILE).  FUNCTION is responsible to extract user names and host
names from FILE for completion.  The following predefined FUNCTIONs exists:

 * `tramp-parse-rhosts'      for \"~/.rhosts\" like files,
 * `tramp-parse-shosts'      for \"~/.ssh/known_hosts\" like files,
 * `tramp-parse-sconfig'     for \"~/.ssh/config\" like files,
 * `tramp-parse-shostkeys'   for \"~/.ssh2/hostkeys/*\" like files,
 * `tramp-parse-sknownhosts' for \"~/.ssh2/knownhosts/*\" like files,
 * `tramp-parse-hosts'       for \"/etc/hosts\" like files,
 * `tramp-parse-passwd'      for \"/etc/passwd\" like files.
 * `tramp-parse-etc-group'   for \"/etc/group\" like files.
 * `tramp-parse-netrc'       for \"~/.netrc\" like files.
 * `tramp-parse-putty'       for PuTTY registered sessions.

FUNCTION can also be a user defined function.  For more details see
the info pages.") nil [17980 19060])
            ("tramp-echo-mark-marker" variable
               (:documentation "String marker to surround echoed commands."
                :constant-flag t
                :default-value "_echo")
                nil [19062 19150])
            ("tramp-echo-mark-marker-length" variable
               (:documentation "String length of `tramp-echo-mark-marker'."
                :constant-flag t
                :default-value (length tramp-echo-mark-marker))
                nil [19152 19271])
            ("tramp-echo-mark" variable
               (:documentation "String mark to be transmitted around shell commands.
Used to separate their echo from the output they produce.  This
will only be used if we cannot disable remote echo via stty.
This string must have no effect on the remote shell except for
producing some echo which can later be detected by
`tramp-echoed-echo-mark-regexp'.  Using `tramp-echo-mark-marker',
followed by an equal number of backspaces to erase them will
usually suffice."
                :constant-flag t
                :default-value (concat tramp-echo-mark-marker (make-string tramp-echo-mark-marker-length 8)))
                nil [19273 19824])
            ("tramp-echoed-echo-mark-regexp" variable
               (:documentation "Regexp which matches `tramp-echo-mark' as it gets echoed by
the remote shell."
                :constant-flag t
                :default-value (format "%s\\(\\( \\)?\\)\\{%d\\}" tramp-echo-mark-marker tramp-echo-mark-marker-length))
                nil [19826 20046])
            ("tramp-local-end-of-line" variable
               (:documentation "String used for end of line in local processes."
                :default-value (if (memq system-type '(windows-nt)) "
" "
"))
                nil [20048 20237])
            ("tramp-rsh-end-of-line" variable
               (:documentation "String used for end of line in rsh connections.
I don't think this ever needs to be changed, so please tell me about it
if you need to change this."
                :default-value "
")
                nil [20239 20461])
            ("tramp-login-prompt-regexp" variable
               (:documentation "Regexp matching login-like prompts.
The regexp should match at end of buffer.

Sometimes the prompt is reported to look like \"login as:\"."
                :default-value ".*\\(user\\|login\\)\\( .*\\)?: *")
                nil [20463 20714])
            ("tramp-shell-prompt-pattern" variable
               (:documentation "Regexp to match prompts from remote shell.
Normally, Tramp expects you to configure `shell-prompt-pattern'
correctly, but sometimes it happens that you are connecting to a
remote host which sends a different kind of shell prompt.  Therefore,
Tramp recognizes things matched by `shell-prompt-pattern' as prompt,
and also things matched by this variable.  The default value of this
variable is similar to the default value of `shell-prompt-pattern',
which should work well in many cases.

This regexp must match both `tramp-initial-end-of-output' and
`tramp-end-of-output'."
                :default-value (concat "\\(?:^\\|\\)" "[^]#$%>
]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*"))
                nil [20716 21759])
            ("tramp-password-prompt-regexp" variable
               (:documentation "Regexp matching password-like prompts.
The regexp should match at end of buffer.

The `sudo' program appears to insert a `^@' character into the prompt."
                :default-value (format "^.*\\(%s\\).*: ? *" (regexp-opt (or (bound-and-true-p password-word-equivalents) '("password" "passphrase")))))
                nil [21761 22239])
            ("tramp-wrong-passwd-regexp" variable
               (:documentation "Regexp matching a `login failed' message.
The regexp should match at end of buffer."
                :default-value (concat "^.*" (regexp-opt '("Permission denied" "Login incorrect" "Login Incorrect" "Connection refused" "Connection closed" "Timeout, server not responding." "Sorry, try again." "Name or service not known" "Host key verification failed." "No supported authentication methods left to try!") t) ".*" "\\|" "^.*\\(" "Received signal [0-9]+" "\\).*"))
                nil [22241 22901])
            ("tramp-yesno-prompt-regexp" variable
               (:documentation "Regular expression matching all yes/no queries which need to be confirmed.
The confirmation should be done with yes or no.
The regexp should match at end of buffer.
See also `tramp-yn-prompt-regexp'."
                :default-value (concat (regexp-opt '("Are you sure you want to continue connecting (yes/no)?") t) "\\s-*"))
                nil [22903 23276])
            ("tramp-yn-prompt-regexp" variable
               (:documentation "Regular expression matching all y/n queries which need to be confirmed.
The confirmation should be done with y or n.
The regexp should match at end of buffer.
See also `tramp-yesno-prompt-regexp'."
                :default-value (concat (regexp-opt '("Store key in cache? (y/n)" "Update cached key? (y/n, Return cancels connection)") t) "\\s-*"))
                nil [23278 23688])
            ("tramp-terminal-prompt-regexp" variable
               (:documentation "Regular expression matching all terminal setting prompts.
The regexp should match at end of buffer.
The answer will be provided by `tramp-action-terminal', which see."
                :default-value (concat "\\(" "TERM = (.*)" "\\|" "Terminal type\\? \\[.*\\]" "\\)\\s-*"))
                nil [23690 24021])
            ("tramp-operation-not-permitted-regexp" variable
               (:documentation "Regular expression matching keep-date problems in (s)cp operations.
Copying has been performed successfully already, so this message can
be ignored safely."
                :default-value (concat "\\(" "preserving times.*" "\\|" "set mode" "\\)" ":\\s-*" (regexp-opt '("Operation not permitted") t)))
                nil [24023 24380])
            ("tramp-copy-failed-regexp" variable
               (:documentation "Regular expression matching copy problems in (s)cp operations."
                :default-value (concat "\\(.+: " (regexp-opt '("Permission denied" "not a regular file" "is a directory" "No such file or directory") t) "\\)\\s-*"))
                nil [24382 24767])
            ("tramp-process-alive-regexp" variable (:documentation "Regular expression indicating a process has finished.
In fact this expression is empty by intention, it will be used only to
check regularly the status of the associated process.
The answer will be provided by `tramp-action-process-alive',
`tramp-action-out-of-band', which see.") nil [24769 25127])
            ("tramp-temp-name-prefix" variable
               (:documentation "Prefix to use for temporary files.
If this is a relative file name (such as \"tramp.\"), it is considered
relative to the directory name returned by the function
`tramp-compat-temporary-file-directory' (which see).  It may also be an
absolute file name; don't forget to include a prefix for the filename
part, though."
                :constant-flag t
                :default-value "tramp.")
                nil [25129 25493])
            ("tramp-temp-buffer-name" variable
               (:documentation "Buffer name for a temporary buffer.
It shall be used in combination with `generate-new-buffer-name'."
                :constant-flag t
                :default-value " *tramp temp*")
                nil [25495 25649])
            ("tramp-temp-buffer-file-name" variable (:documentation "File name of a persistent local temporary file.
Useful for \"rsync\" like methods.") nil [25651 25778])
            ("make-variable-buffer-local" code nil nil [25779 25836])
            ("put" code nil nil [25837 25890])
            ("tramp-syntax" variable
               (:documentation "Tramp filename syntax to be used.

It can have the following values:

  `default'    -- Default syntax
  `simplified' -- Ange-FTP like syntax
  `separate'   -- Syntax as defined for XEmacs originally

Do not change the value by `setq', it must be changed only via
Customize.  See also `tramp-change-syntax'."
                :default-value 'default)
                nil [25913 26531])
            ("tramp-set-syntax" function
               (:documentation "Set SYMBOL to value VALUE.
Used in user option `tramp-syntax'.  There are further variables
to be set, depending on VALUE."
                :arguments ("symbol" "value"))
                nil [26533 28089])
            ("eval-after-load" code nil nil [28358 28446])
            ("tramp-syntax-values" function (:documentation "Return possible values of `tramp-syntax', a list") nil [28448 28660])
            ("tramp-lookup-syntax" function
               (:documentation "Look up a syntax string in ALIST according to `tramp-compat-tramp-syntax.'
Raise an error if `tramp-syntax' is invalid."
                :arguments ("alist"))
                nil [28662 28928])
            ("tramp-prefix-format-alist" variable
               (:documentation "Alist mapping Tramp syntax to strings beginning Tramp file names."
                :constant-flag t
                :default-value '((default . "/") (simplified . "/") (separate . "/[")))
                nil [28930 29107])
            ("tramp-build-prefix-format" function nil nil [29109 29195])
            ("tramp-prefix-format" variable
               (:documentation "String matching the very beginning of Tramp file names.
Used in `tramp-make-tramp-file-name'."
                :default-value (tramp-build-prefix-format))
                nil [29197 29351])
            ("tramp-build-prefix-regexp" function (:documentation "^") nil [29353 29439])
            ("tramp-prefix-regexp" variable
               (:documentation "Regexp matching the very beginning of Tramp file names.
Should always start with \"^\". Derived from `tramp-prefix-format'."
                :default-value (tramp-build-prefix-regexp))
                nil [29441 29625])
            ("tramp-method-regexp-alist" variable
               (:documentation "Alist mapping Tramp syntax to regexps matching methods identifiers."
                :constant-flag t
                :default-value '((default . "[a-zA-Z0-9-]+") (simplified . "") (separate . "[a-zA-Z0-9-]*")))
                nil [29627 29828])
            ("tramp-build-method-regexp" function nil nil [29830 29916])
            ("tramp-method-regexp" variable
               (:documentation "Regexp matching methods identifiers.
The `ftp' syntax does not support methods."
                :default-value (tramp-build-method-regexp))
                nil [29918 30058])
            ("tramp-postfix-method-format-alist" variable
               (:documentation "Alist mapping Tramp syntax to the delimiter after the method."
                :constant-flag t
                :default-value '((default . ":") (simplified . "") (separate . "/")))
                nil [30060 30239])
            ("tramp-build-postfix-method-format" function nil nil [30241 30343])
            ("tramp-postfix-method-format" variable
               (:documentation "String matching delimiter between method and user or host names.
The `ftp' syntax does not support methods.
Used in `tramp-make-tramp-file-name'."
                :default-value (tramp-build-postfix-method-format))
                nil [30345 30567])
            ("tramp-build-postfix-method-regexp" function nil nil [30569 30658])
            ("tramp-postfix-method-regexp" variable
               (:documentation "Regexp matching delimiter between method and user or host names.
Derived from `tramp-postfix-method-format'."
                :default-value (tramp-build-postfix-method-regexp))
                nil [30660 30845])
            ("tramp-user-regexp" variable
               (:documentation "Regexp matching user names."
                :constant-flag t
                :default-value "[^/|: 	]+")
                nil [30847 30920])
            ("tramp-prefix-domain-format" variable
               (:documentation "String matching delimiter between user and domain names."
                :constant-flag t
                :default-value "%")
                nil [30943 31045])
            ("tramp-prefix-domain-regexp" variable
               (:documentation "Regexp matching delimiter between user and domain names.
Derived from `tramp-prefix-domain-format'."
                :constant-flag t
                :default-value (regexp-quote tramp-prefix-domain-format))
                nil [31068 31251])
            ("tramp-domain-regexp" variable
               (:documentation "Regexp matching domain names."
                :constant-flag t
                :default-value "[a-zA-Z0-9_.-]+")
                nil [31253 31335])
            ("tramp-user-with-domain-regexp" variable
               (:documentation "Regexp matching user names with domain names."
                :constant-flag t
                :default-value (concat "\\(" tramp-user-regexp "\\)" tramp-prefix-domain-regexp "\\(" tramp-domain-regexp "\\)"))
                nil [31337 31539])
            ("tramp-postfix-user-format" variable
               (:documentation "String matching delimiter between user and host names.
Used in `tramp-make-tramp-file-name'."
                :constant-flag t
                :default-value "@")
                nil [31541 31678])
            ("tramp-postfix-user-regexp" variable
               (:documentation "Regexp matching delimiter between user and host names.
Derived from `tramp-postfix-user-format'."
                :constant-flag t
                :default-value (regexp-quote tramp-postfix-user-format))
                nil [31680 31858])
            ("tramp-host-regexp" variable
               (:documentation "Regexp matching host names."
                :constant-flag t
                :default-value "[a-zA-Z0-9_.%-]+")
                nil [31860 31939])
            ("tramp-prefix-ipv6-format-alist" variable
               (:documentation "Alist mapping Tramp syntax to strings prefixing IPv6 addresses."
                :constant-flag t
                :default-value '((default . "[") (simplified . "[") (separate . "")))
                nil [31941 32119])
            ("tramp-build-prefix-ipv6-format" function nil nil [32121 32217])
            ("tramp-prefix-ipv6-format" variable
               (:documentation "String matching left hand side of IPv6 addresses.
Used in `tramp-make-tramp-file-name'."
                :default-value (tramp-build-prefix-ipv6-format))
                nil [32219 32377])
            ("tramp-build-prefix-ipv6-regexp" function nil nil [32379 32462])
            ("tramp-prefix-ipv6-regexp" variable
               (:documentation "Regexp matching left hand side of IPv6 addresses.
Derived from `tramp-prefix-ipv6-format'."
                :default-value (tramp-build-prefix-ipv6-regexp))
                nil [32464 32625])
            ("tramp-ipv6-regexp" variable
               (:documentation "Regexp matching IPv6 addresses."
                :constant-flag t
                :default-value "\\(?:\\(?:[a-zA-Z0-9]+\\)?:\\)+[a-zA-Z0-9.]+")
                nil [32782 32893])
            ("tramp-postfix-ipv6-format-alist" variable
               (:documentation "Alist mapping Tramp syntax to suffix for IPv6 addresses."
                :constant-flag t
                :default-value '((default . "]") (simplified . "]") (separate . "")))
                nil [32895 33067])
            ("tramp-build-postfix-ipv6-format" function nil nil [33069 33167])
            ("tramp-postfix-ipv6-format" variable
               (:documentation "String matching right hand side of IPv6 addresses.
Used in `tramp-make-tramp-file-name'."
                :default-value (tramp-build-postfix-ipv6-format))
                nil [33169 33330])
            ("tramp-build-postfix-ipv6-regexp" function nil nil [33332 33417])
            ("tramp-postfix-ipv6-regexp" variable
               (:documentation "Regexp matching right hand side of IPv6 addresses.
Derived from `tramp-postfix-ipv6-format'."
                :default-value (tramp-build-postfix-ipv6-regexp))
                nil [33419 33584])
            ("tramp-prefix-port-format" variable
               (:documentation "String matching delimiter between host names and port numbers."
                :constant-flag t
                :default-value "#")
                nil [33586 33692])
            ("tramp-prefix-port-regexp" variable
               (:documentation "Regexp matching delimiter between host names and port numbers.
Derived from `tramp-prefix-port-format'."
                :constant-flag t
                :default-value (regexp-quote tramp-prefix-port-format))
                nil [33694 33877])
            ("tramp-port-regexp" variable
               (:documentation "Regexp matching port numbers."
                :constant-flag t
                :default-value "[0-9]+")
                nil [33879 33950])
            ("tramp-host-with-port-regexp" variable
               (:documentation "Regexp matching host names with port numbers."
                :constant-flag t
                :default-value (concat "\\(" tramp-host-regexp "\\)" tramp-prefix-port-regexp "\\(" tramp-port-regexp "\\)"))
                nil [33952 34148])
            ("tramp-postfix-hop-format" variable
               (:documentation "String matching delimiter after ad-hoc hop definitions."
                :constant-flag t
                :default-value "|")
                nil [34150 34249])
            ("tramp-postfix-hop-regexp" variable
               (:documentation "Regexp matching delimiter after ad-hoc hop definitions.
Derived from `tramp-postfix-hop-format'."
                :constant-flag t
                :default-value (regexp-quote tramp-postfix-hop-format))
                nil [34251 34427])
            ("tramp-postfix-host-format-alist" variable
               (:documentation "Alist mapping Tramp syntax to strings between host and local names."
                :constant-flag t
                :default-value '((default . ":") (simplified . ":") (separate . "]")))
                nil [34429 34613])
            ("tramp-build-postfix-host-format" function nil nil [34615 34713])
            ("tramp-postfix-host-format" variable
               (:documentation "String matching delimiter between host names and localnames.
Used in `tramp-make-tramp-file-name'."
                :default-value (tramp-build-postfix-host-format))
                nil [34715 34886])
            ("tramp-build-postfix-host-regexp" function nil nil [34888 34973])
            ("tramp-postfix-host-regexp" variable
               (:documentation "Regexp matching delimiter between host names and localnames.
Derived from `tramp-postfix-host-format'."
                :default-value (tramp-build-postfix-host-regexp))
                nil [34975 35150])
            ("tramp-localname-regexp" variable
               (:documentation "Regexp matching localnames."
                :constant-flag t
                :default-value "[^
]*\\'")
                nil [35152 35231])
            ("tramp-unknown-id-string" variable
               (:documentation "String used to denote an unknown user or group"
                :constant-flag t
                :default-value "UNKNOWN")
                nil [35233 35328])
            ("tramp-unknown-id-integer" variable
               (:documentation "Integer used to denote an unknown user or group"
                :constant-flag t
                :default-value -1)
                nil [35330 35420])
            ("tramp-build-remote-file-name-spec-regexp" function (:documentation "Construct a regexp matching a Tramp file name for a Tramp syntax.
It is expected, that `tramp-syntax' has the proper value.") nil [35445 36016])
            ("tramp-remote-file-name-spec-regexp" variable
               (:documentation "Regular expression matching a Tramp file name between prefix and postfix."
                :default-value (tramp-build-remote-file-name-spec-regexp))
                nil [36018 36184])
            ("tramp-build-file-name-structure" function (:documentation "Construct the Tramp file name structure for a Tramp syntax.
It is expected, that `tramp-syntax' has the proper value.
See `tramp-file-name-structure'.") nil [36186 36655])
            ("tramp-file-name-structure" variable
               (:documentation "List of six elements (REGEXP METHOD USER HOST FILE HOP), detailing the Tramp file name structure.

The first element REGEXP is a regular expression matching a Tramp file
name.  The regex should contain parentheses around the method name,
the user name, the host name, and the file name parts.

The second element METHOD is a number, saying which pair of
parentheses matches the method name.  The third element USER is
similar, but for the user name.  The fourth element HOST is similar,
but for the host name.  The fifth element FILE is for the file name.
The last element HOP is the ad-hoc hop definition, which could be a
cascade of several hops.

These numbers are passed directly to `match-string', which see.  That
means the opening parentheses are counted to identify the pair.

See also `tramp-file-name-regexp'."
                :default-value (tramp-build-file-name-structure))
                nil [36657 37551])
            ("tramp-build-file-name-regexp" function nil nil [37553 37626])
            ("tramp-initial-file-name-regexp" variable
               (:documentation "Value for `tramp-file-name-regexp' for autoload.
It must match the initial `tramp-syntax' settings."
                :constant-flag t
                :default-value "\\`/.+:.*:")
                nil [37643 37801])
            ("tramp-file-name-regexp" variable
               (:documentation "Regular expression matching file names handled by Tramp.
This regexp should match Tramp file names but no other file
names.  When calling `tramp-register-file-name-handlers', the
initial value is overwritten by the car of `tramp-file-name-structure'."
                :default-value tramp-initial-file-name-regexp)
                nil [37818 38135])
            ("tramp-ignored-file-name-regexp" variable (:documentation "Regular expression matching file names that are not under Tramp’s control.") nil [38152 38348])
            ("tramp-completion-file-name-regexp-default" variable
               (:documentation "Value for `tramp-completion-file-name-regexp' for default remoting.
See `tramp-file-name-structure' for more explanations.

On W32 systems, the volume letter must be ignored."
                :constant-flag t
                :default-value (concat "\\`/\\(" "\\([^/|:]+:[^/|:]*|\\)*" (if (memq system-type '(cygwin windows-nt)) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") "\\(:[^/|:]*\\)?" "\\)?\\'"))
                nil [38350 38963])
            ("tramp-completion-file-name-regexp-simplified" variable
               (:documentation "Value for `tramp-completion-file-name-regexp' for simplified style remoting.
See `tramp-file-name-structure' for more explanations.

On W32 systems, the volume letter must be ignored."
                :constant-flag t
                :default-value (concat "\\`/\\(" "\\([^/|:]*|\\)*" (if (memq system-type '(cygwin windows-nt)) "[^/|:]\\{2,\\}" "[^/|:]+") "\\)?\\'"))
                nil [38965 39462])
            ("tramp-completion-file-name-regexp-separate" variable
               (:documentation "Value for `tramp-completion-file-name-regexp' for separate remoting.
See `tramp-file-name-structure' for more explanations."
                :constant-flag t
                :default-value "\\`/\\(\\[[^]]*\\)?\\'")
                nil [39464 39672])
            ("tramp-completion-file-name-regexp-alist" variable
               (:documentation "Alist mapping incomplete Tramp file names."
                :constant-flag t
                :default-value `((default \, tramp-completion-file-name-regexp-default) (simplified \, tramp-completion-file-name-regexp-simplified) (separate \, tramp-completion-file-name-regexp-separate)))
                nil [39674 39962])
            ("tramp-build-completion-file-name-regexp" function nil nil [39964 40078])
            ("tramp-completion-file-name-regexp" variable
               (:documentation "Regular expression matching file names handled by Tramp completion.
This regexp should match partial Tramp file names only.

Please note that the entry in `file-name-handler-alist' is made when
this file (tramp.el) is loaded.  This means that this variable must be set
before loading tramp.el.  Alternatively, `file-name-handler-alist' can be
updated after changing this variable.

Also see `tramp-file-name-structure'."
                :default-value (tramp-build-completion-file-name-regexp))
                nil [40080 40591])
            ("tramp-autoload-file-name-regexp" variable
               (:documentation "Regular expression matching file names handled by Tramp autoload.
It must match the initial `tramp-syntax' settings.  It should not
match file names at root of the underlying local file system,
like \"/sys\" or \"/C:\"."
                :constant-flag t
                :default-value (concat "\\`/" (if (memq system-type '(cygwin windows-nt)) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") ":"))
                nil [40608 41106])
            ("tramp-chunksize" variable
               (:documentation "If non-nil, chunksize for sending input to local process.
It is necessary only on systems which have a buggy `process-send-string'
implementation.  The necessity, whether this variable must be set, can be
checked via the following code:

  (with-temp-buffer
    (let* ((user \"xxx\") (host \"yyy\")
           (init 0) (step 50)
           (sent init) (received init))
      (while (= sent received)
        (setq sent (+ sent step))
        (erase-buffer)
        (let ((proc (start-process (buffer-name) (current-buffer)
                                   \"ssh\" \"-l\" user host \"wc\" \"-c\")))
          (when (process-live-p proc)
            (process-send-string proc (make-string sent ?\\ ))
            (process-send-eof proc)
            (process-send-eof proc))
          (while (not (progn (goto-char (point-min))
                             (re-search-forward \"\\\\w+\" (point-max) t)))
            (accept-process-output proc 1))
          (when (process-live-p proc)
            (setq received (string-to-number (match-string 0)))
            (delete-process proc)
            (message \"Bytes sent: %s\\tBytes received: %s\" sent received)
            (sit-for 0))))
      (if (> sent (+ init step))
          (message \"You should set `tramp-chunksize' to a maximum of %s\"
                   (- sent step))
        (message \"Test does not work\")
        (display-buffer (current-buffer))
        (sit-for 30))))

In the Emacs normally running Tramp, evaluate the above code
(replace \"xxx\" and \"yyy\" by the remote user and host name,
respectively).  You can do this, for example, by pasting it into
the `*scratch*' buffer and then hitting C-j with the cursor after the
last closing parenthesis.  Note that it works only if you have configured
\"ssh\" to run without password query, see ssh-agent(1).

You will see the number of bytes sent successfully to the remote host.
If that number exceeds 1000, you can stop the execution by hitting
C-g, because your Emacs is likely clean.

When it is necessary to set `tramp-chunksize', you might consider to
use an out-of-the-band method (like \"scp\") instead of an internal one
(like \"ssh\"), because setting `tramp-chunksize' to non-nil decreases
performance.

If your Emacs is buggy, the code stops and gives you an indication
about the value `tramp-chunksize' should be set.  Maybe you could just
experiment a bit, e.g. changing the values of `init' and `step'
in the third line of the code.

Please raise a bug report via \"M-x tramp-bug\" if your system needs
this variable to be set as well."
                :default-value (when (memq system-type '(hpux)) 500))
                nil [41462 44316])
            ("tramp-process-connection-type" variable
               (:documentation "Overrides `process-connection-type' for connections from Tramp.
Tramp binds `process-connection-type' to the value given here before
opening a connection to a remote host."
                :default-value t)
                nil [44567 44854])
            ("tramp-connection-timeout" variable
               (:documentation "Defines the max time to wait for establishing a connection (in seconds).
This can be overwritten for different connection types in `tramp-methods'.

The timeout does not include the time reading a password."
                :default-value 60)
                nil [44856 45157])
            ("tramp-connection-min-time-diff" variable
               (:documentation "Defines seconds between two consecutive connection attempts.
This is necessary as self defense mechanism, in order to avoid
yo-yo connection attempts when the remote host is unavailable.

A value of 0 or nil suppresses this check.  This might be
necessary, when several out-of-order copy operations are
performed, or when several asynchronous processes will be started
in a short time frame.  In those cases it is recommended to
let-bind this variable."
                :default-value 5)
                nil [45159 45732])
            ("tramp-completion-reread-directory-timeout" variable
               (:documentation "Defines seconds since last remote command before rereading a directory.
A remote directory might have changed its contents.  In order to
make it visible during file name completion in the minibuffer,
Tramp flushes its cache and rereads the directory contents when
more than `tramp-completion-reread-directory-timeout' seconds
have been gone since last remote command execution.  A value of t
would require an immediate reread during filename completion, nil
means to use always cached values for the directory contents."
                :default-value 10)
                nil [45734 46378])
            ("tramp-current-connection" variable (:documentation "Last connection timestamp.") nil [46405 46473])
            ("tramp-password-save-function" variable (:documentation "Password save function.
Will be called once the password has been verified by successful
authentication.") nil [46475 46625])
            ("tramp-completion-file-name-handler-alist" variable
               (:documentation "Alist of completion handler functions.
Used for file names matching `tramp-completion-file-name-regexp'.
Operations not mentioned here will be handled by Tramp's file
name handler functions, or the normal Emacs functions."
                :constant-flag t
                :default-value '((file-name-all-completions . tramp-completion-handle-file-name-all-completions) (file-name-completion . tramp-completion-handle-file-name-completion)))
                nil [46627 47068])
            ("tramp-foreign-file-name-handler-alist" variable (:documentation "Alist of elements (FUNCTION . HANDLER) for foreign methods handled specially.
If (FUNCTION FILENAME) returns non-nil, then all I/O on that file is done by
calling HANDLER.") nil [47164 47390])
            ("cl-defstruct" code nil nil [47702 47799])
            ("tramp-file-name-user-domain" function
               (:documentation "Return user and domain components of VEC."
                :arguments ("vec"))
                nil [47801 48102])
            ("tramp-file-name-host-port" function
               (:documentation "Return host and port components of VEC."
                :arguments ("vec"))
                nil [48104 48393])
            ("tramp-file-name-port-or-default" function
               (:documentation "Return port component of VEC.
If nil, return `tramp-default-port'."
                :arguments ("vec"))
                nil [48395 48604])
            ("tramp-file-name-equal-p" function
               (:documentation "Check, whether VEC1 and VEC2 denote the same `tramp-file-name'."
                :arguments ("vec1" "vec2"))
                nil [48606 49058])
            ("tramp-get-method-parameter" function
               (:documentation "Return the method parameter PARAM.
If VEC is a vector, check first in connection properties.
Afterwards, check in `tramp-methods'.  If the `tramp-methods'
entry does not exist, return nil."
                :arguments ("vec" "param"))
                nil [49060 49718])
            ("tramp-file-name-unquote-localname" function
               (:documentation "Return unquoted localname component of VEC."
                :arguments ("vec"))
                nil [49777 49939])
            ("tramp-tramp-file-p" function
               (:documentation "Return t if NAME is a string with Tramp file name syntax."
                :arguments ("name"))
                nil [49962 50494])
            ("tramp-find-method" function
               (:documentation "Return the right method string to use.
This is METHOD, if non-nil. Otherwise, do a lookup in
`tramp-default-method-alist'."
                :arguments ("method" "user" "host"))
                nil [50496 51322])
            ("tramp-find-user" function
               (:documentation "Return the right user string to use.
This is USER, if non-nil. Otherwise, do a lookup in
`tramp-default-user-alist'."
                :arguments ("method" "user" "host"))
                nil [51324 51997])
            ("tramp-find-host" function
               (:documentation "Return the right host string to use.
This is HOST, if non-nil. Otherwise, it is `tramp-default-host'."
                :arguments ("method" "user" "host"))
                nil [51999 52506])
            ("tramp-dissect-file-name" function
               (:documentation "Return a `tramp-file-name' structure of NAME, a remote file name.
The structure consists of method, user, domain, host, port,
localname (file name on remote host), and hop.

Unless NODEFAULT is non-nil, method, user and host are expanded
to their default values. For the other file name parts, no
default values are used."
                :arguments ("name" "nodefault"))
                nil [52508 54300])
            ("tramp-buffer-name" function
               (:documentation "A name for the connection buffer VEC."
                :arguments ("vec"))
                nil [54302 54667])
            ("tramp-make-tramp-file-name" function
               (:documentation "Construct a Tramp file name from ARGS.

ARGS could have two different signatures.  The first one is of
type (VEC &optional LOCALNAME HOP).
If LOCALNAME is nil, the value in VEC is used.  If it is a
symbol, a null localname will be used.  Otherwise, LOCALNAME is
expected to be a string, which will be used.
If HOP is nil, the value in VEC is used.  If it is a symbol, a
null hop will be used.  Otherwise, HOP is expected to be a
string, which will be used.

The other signature exists for backward compatibility.  It has
the form (METHOD USER DOMAIN HOST PORT LOCALNAME &optional HOP)."
                :arguments ("args"))
                nil [54669 56790])
            ("tramp-completion-make-tramp-file-name" function
               (:documentation "Construct a Tramp file name from METHOD, USER, HOST and LOCALNAME.
It must not be a complete Tramp file name, but as long as there are
necessary only.  This function will be used in file name completion."
                :arguments ("method" "user" "host" "localname"))
                nil [56792 57599])
            ("tramp-get-buffer" function
               (:documentation "Get the connection buffer to be used for VEC."
                :arguments ("vec"))
                nil [57601 58145])
            ("tramp-get-connection-buffer" function
               (:documentation "Get the connection buffer to be used for VEC.
In case a second asynchronous communication has been started, it is different
from `tramp-get-buffer'."
                :arguments ("vec"))
                nil [58147 58434])
            ("tramp-get-connection-name" function
               (:documentation "Get the connection name to be used for VEC.
In case a second asynchronous communication has been started, it is different
from the default one."
                :arguments ("vec"))
                nil [58436 58715])
            ("tramp-get-connection-process" function
               (:documentation "Get the connection process to be used for VEC.
In case a second asynchronous communication has been started, it is different
from the default one."
                :arguments ("vec"))
                nil [58717 58988])
            ("tramp-set-connection-local-variables" function
               (:documentation "Set connection-local variables in the connection buffer used for VEC.
If connection-local variables are not supported by this Emacs
version, the function does nothing."
                :arguments ("vec"))
                nil [58990 59598])
            ("tramp-set-connection-local-variables-for-buffer" function (:documentation "Set connection-local variables in the current buffer.
If connection-local variables are not supported by this Emacs
version, the function does nothing.") nil [59600 60212])
            ("tramp-debug-buffer-name" function
               (:documentation "A name for the debug buffer for VEC."
                :arguments ("vec"))
                nil [60214 60596])
            ("tramp-debug-outline-regexp" variable
               (:documentation "Used for highlighting Tramp debug buffers in `outline-mode'."
                :constant-flag t
                :default-value "[0-9]+:[0-9]+:[0-9]+\\.[0-9]+ [a-z0-9-]+ (\\([0-9]+\\)) #")
                nil [60598 60762])
            ("tramp-debug-outline-level" function (:documentation "Return the depth to which a statement is nested in the outline.
Point must be at the beginning of a header line.

The outline level is equal to the verbosity of the Tramp message.") nil [60764 61027])
            ("tramp-get-debug-buffer" function
               (:documentation "Get the debug buffer for VEC."
                :arguments ("vec"))
                nil [61029 62082])
            ("tramp-debug-message" function
               (:documentation "Append message to debug buffer.
Message is formatted with FMT-STRING as control string and the remaining
ARGUMENTS to actually emit the message (if applicable)."
                :arguments ("vec" "fmt-string" "arguments"))
                nil [62084 64069])
            ("tramp-message-show-message" variable
               (:documentation "Show Tramp message in the minibuffer.
This variable is used to suppress progress reporter output, and
to disable messages from `tramp-error'.  Those messages are
visible anyway, because an error is raised."
                :default-value (null noninteractive))
                nil [64071 64338])
            ("tramp-message" function
               (:documentation "Emit a message depending on verbosity level.
VEC-OR-PROC identifies the Tramp buffer to use.  It can be either a
vector or a process.  LEVEL says to be quiet if `tramp-verbose' is
less than LEVEL.  The message is emitted only if `tramp-verbose' is
greater than or equal to LEVEL.

The message is also logged into the debug buffer when `tramp-verbose'
is greater than or equal 4.

Calls functions `message' and `tramp-debug-message' with FMT-STRING as
control string and the remaining ARGUMENTS to actually emit the message (if
applicable)."
                :arguments ("vec-or-proc" "level" "fmt-string" "arguments"))
                nil [64340 66078])
            ("tramp-backtrace" function
               (:documentation "Dump a backtrace into the debug buffer.
If VEC-OR-PROC is nil, the buffer *debug tramp* is used.  This
function is meant for debugging purposes."
                :arguments ("vec-or-proc"))
                nil [66080 66471])
            ("tramp-error" function
               (:documentation "Emit an error.
VEC-OR-PROC identifies the connection to use, SIGNAL is the
signal identifier to be raised, remaining arguments passed to
`tramp-message'.  Finally, signal SIGNAL is raised."
                :arguments ("vec-or-proc" "signal" "fmt-string" "arguments"))
                nil [66473 67330])
            ("tramp-error-with-buffer" function
               (:documentation "Emit an error, and show BUF.
If BUF is nil, show the connection buf.  Wait for 30\", or until
an input event arrives.  The other arguments are passed to `tramp-error'."
                :arguments ("buf" "vec-or-proc" "signal" "fmt-string" "arguments"))
                nil [67332 68766])
            ("tramp-user-error" function
               (:documentation "Signal a pilot error."
                :arguments ("vec-or-proc" "fmt-string" "arguments"))
                nil [68832 69769])
            ("tramp-with-demoted-errors" function
               (:documentation "Execute BODY while redirecting the error message to `tramp-message'.
BODY is executed like wrapped by `with-demoted-errors'.  FORMAT
is a format-string containing a %-sequence meaning to substitute
the resulting error message."
                :arguments ("vec-or-proc" "format" "body"))
                nil [69771 70290])
            ("with-parsed-tramp-file-name" function
               (:documentation "Parse a Tramp filename and make components available in the body.

First arg FILENAME is evaluated and dissected into its components.
Second arg VAR is a symbol.  It is used as a variable name to hold
the filename structure.  It is also used as a prefix for the variables
holding the components.  For example, if VAR is the symbol `foo', then
`foo' will be bound to the whole structure, `foo-method' will be bound to
the method component, and so on for `foo-user', `foo-domain', `foo-host',
`foo-port', `foo-localname', `foo-hop'.

Remaining args are Lisp expressions to be evaluated (inside an implicit
`progn').

If VAR is nil, then we bind `v' to the structure and `method', `user',
`domain', `host', `port', `localname', `hop' to the components."
                :arguments ("filename" "var" "body"))
                nil [70292 71751])
            ("put" code nil nil [71753 71811])
            ("put" code nil nil [71812 71885])
            ("font-lock-add-keywords" code nil nil [71886 71966])
            ("tramp-progress-reporter-update" function
               (:documentation "Report progress of an operation for Tramp."
                :arguments ("reporter" "value"))
                nil [71968 72259])
            ("with-tramp-progress-reporter" function
               (:documentation "Executes BODY, spinning a progress reporter with MESSAGE.
If LEVEL does not fit for visible messages, there are only traces
without a visible progress reporter."
                :arguments ("vec" "level" "message" "body"))
                nil [72261 73269])
            ("font-lock-add-keywords" code nil nil [73271 73353])
            ("with-tramp-file-property" function
               (:documentation "Check in Tramp cache for PROPERTY, otherwise execute BODY and set cache.
FILE must be a local file name on a connection identified via VEC."
                :arguments ("vec" "file" "property" "body"))
                nil [73355 73930])
            ("put" code nil nil [73932 73987])
            ("put" code nil nil [73988 74039])
            ("font-lock-add-keywords" code nil nil [74040 74117])
            ("with-tramp-connection-property" function
               (:documentation "Check in Tramp for property PROPERTY, otherwise executes BODY and set."
                :arguments ("key" "property" "body"))
                nil [74119 74602])
            ("put" code nil nil [74604 74665])
            ("put" code nil nil [74666 74723])
            ("font-lock-add-keywords" code nil nil [74724 74808])
            ("tramp-drop-volume-letter" function
               (:documentation "Cut off unnecessary drive letter from file NAME.
The functions `tramp-*-handle-expand-file-name' call `expand-file-name'
locally on a remote file name.  When the local system is a W32 system
but the remote system is Unix, this introduces a superfluous drive
letter into the file name.  This function removes it."
                :arguments ("name"))
                nil [74810 75438])
            ("tramp-set-completion-function" function
               (:documentation "Sets the list of completion functions for METHOD.
FUNCTION-LIST is a list of entries of the form (FUNCTION FILE).
The FUNCTION is intended to parse FILE according its syntax.
It might be a predefined FUNCTION, or a user defined FUNCTION.
For the list of predefined FUNCTIONs see `tramp-completion-function-alist'.

Example:

    (tramp-set-completion-function
     \"ssh\"
     \\='((tramp-parse-sconfig \"/etc/ssh_config\")
       (tramp-parse-sconfig \"~/.ssh/config\")))"
                :arguments ("method" "function-list"))
                nil [75497 77013])
            ("tramp-get-completion-function" function
               (:documentation "Returns a list of completion functions for METHOD.
For definition of that list see `tramp-set-completion-function'."
                :arguments ("method"))
                nil [77015 77475])
            ("tramp-rfn-eshadow-overlay" variable nil nil [77517 77551])
            ("make-variable-buffer-local" code nil nil [77552 77607])
            ("tramp-rfn-eshadow-setup-minibuffer" function (:documentation "Set up a minibuffer for `file-name-shadow-mode'.
Adds another overlay hiding filename parts according to Tramp's
special handling of `substitute-in-file-name'.") nil [77609 78314])
            ("add-hook" code nil nil [78316 78400])
            ("add-hook" code nil nil [78401 78539])
            ("tramp-rfn-eshadow-update-overlay-regexp" function nil nil [78541 78650])
            ("rfn-eshadow-overlay" variable nil nil [78972 79000])
            ("tramp-rfn-eshadow-update-overlay" function (:documentation "Update `rfn-eshadow-overlay' to cover shadowed part of minibuffer input.
This is intended to be used as a minibuffer `post-command-hook' for
`file-name-shadow-mode'; the minibuffer should have already
been set up by `rfn-eshadow-setup-minibuffer'.") nil [79002 80027])
            ("add-hook" code nil nil [80029 80109])
            ("add-hook" code nil nil [80110 80244])
            ("tramp-inodes" variable (:documentation "Keeps virtual inodes numbers.") nil [80527 80584])
            ("tramp-devices" variable (:documentation "Keeps virtual device numbers.") nil [80956 81014])
            ("tramp-default-file-modes" function
               (:documentation "Return file modes of FILENAME as integer.
If the file modes of FILENAME cannot be determined, return the
value of `default-file-modes', without execute permissions."
                :arguments ("filename"))
                nil [81016 81321])
            ("tramp-replace-environment-variables" function
               (:documentation "Replace environment variables in FILENAME.
Return the string with the replaced variables."
                :arguments ("filename"))
                nil [81323 82021])
            ("tramp-find-file-name-coding-system-alist" function
               (:documentation "Like `find-operation-coding-system' for Tramp filenames.
Tramp's `insert-file-contents' and `write-region' work over
temporary file names.  If `file-coding-system-alist' contains an
expression, which matches more than the file name suffix, the
coding system might not be determined.  This function repairs it."
                :arguments ("filename" "tmpname"))
                nil [82023 82743])
            ("tramp-run-real-handler" function
               (:documentation "Invoke normal file name handler for OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [82745 83358])
            ("tramp-file-name-for-operation" function
               (:documentation "Return file name related to OPERATION file primitive.
ARGS are the arguments OPERATION has been called with."
                :arguments ("operation" "args"))
                nil [83799 86857])
            ("tramp-find-foreign-file-name-handler" function
               (:documentation "Return foreign file name handler if exists."
                :arguments ("filename" "_operation"))
                nil [86859 87255])
            ("tramp-debug-on-error" variable (:documentation "Like `debug-on-error' but used Tramp internal.") nil [87257 87341])
            ("tramp-condition-case-unless-debug" function
               (:documentation "Like `condition-case-unless-debug' but `tramp-debug-on-error'."
                :arguments ("var" "bodyform" "handlers"))
                nil [87343 87596])
            ("tramp-locked" variable (:documentation "If non-nil, then Tramp is currently busy.
Together with `tramp-locker', this implements a locking mechanism
preventing reentrant calls of Tramp.") nil [88651 88825])
            ("tramp-locker" variable (:documentation "If non-nil, then a caller has locked Tramp.
Together with `tramp-locked', this implements a locking mechanism
preventing reentrant calls of Tramp.") nil [88827 89003])
            ("tramp-file-name-handler" function
               (:documentation "Invoke Tramp file name handler.
Falls back to normal file name handler if no Tramp file name handler exists."
                :arguments ("operation" "args"))
                nil [89023 93008])
            ("tramp-completion-file-name-handler" function
               (:documentation "Invoke Tramp file name completion handler.
Falls back to normal file name handler if no Tramp file name handler exists."
                :arguments ("operation" "args"))
                nil [93010 93389])
            ("progn" code nil nil [93406 93710])
            ("progn" code nil nil [93920 94245])
            ("tramp-use-absolute-autoload-file-names" function (:documentation "Change Tramp autoload objects to use absolute file names.
This avoids problems during autoload, when `load-path' contains
remote file names.") nil [94308 95112])
            ("eval-after-load" code nil nil [95114 95179])
            ("tramp-register-file-name-handlers" function (:documentation "Add Tramp file name handlers to `file-name-handler-alist'.") nil [95181 97090])
            ("eval-after-load" code nil nil [97092 97152])
            ("progn" code nil nil [97175 97874])
            ("tramp-exists-file-name-handler" function
               (:documentation "Check, whether OPERATION runs a file name handler."
                :arguments ("operation" "args"))
                nil [97876 98619])
            ("progn" code nil nil [98636 99031])
            ("add-hook" code nil nil [99033 99095])
            ("tramp-completion-mode" variable (:documentation "If non-nil, external packages signal that they are in file name completion.") nil [99166 99280])
            ("make-obsolete-variable" code nil nil [99281 99350])
            ("tramp-completion-mode-p" function (:documentation "Check, whether method / user name / host name completion is active.") nil [99352 99586])
            ("tramp-connectable-p" function
               (:documentation "Check, whether it is possible to connect the remote host w/o side-effects.
This is true, if either the remote host is already connected, or if we are
not in completion mode."
                :arguments ("filename"))
                nil [99588 100011])
            ("tramp-completion-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for partial Tramp files."
                :arguments ("filename" "directory"))
                nil [100203 102176])
            ("tramp-completion-handle-file-name-completion" function
               (:documentation "Like `file-name-completion' for Tramp files."
                :arguments ("filename" "directory" "predicate"))
                nil [102236 102644])
            ("tramp-completion-dissect-file-name" function
               (:documentation "Returns a list of `tramp-file-name' structures.
They are collected by `tramp-completion-dissect-file-name1'."
                :arguments ("name"))
                nil [103327 105749])
            ("tramp-completion-dissect-file-name1" function
               (:documentation "Returns a `tramp-file-name' structure matching STRUCTURE.
The structure consists of remote method, remote user,
remote host and localname (filename on remote host)."
                :arguments ("structure" "name"))
                nil [105751 106320])
            ("tramp-get-completion-methods" function
               (:documentation "Returns all method completions for PARTIAL-METHOD."
                :arguments ("partial-method"))
                nil [106421 106740])
            ("tramp-get-completion-user-host" function
               (:documentation "Returns the most expanded string for user and host name completion.
PARTIAL-USER must match USER, PARTIAL-HOST must match HOST."
                :arguments ("method" "partial-user" "partial-host" "user" "host"))
                nil [106809 107728])
            ("tramp-parse-default-user-host" function
               (:documentation "Return a list of (user host) tuples allowed to access for METHOD.
This function is added always in `tramp-get-completion-function'
for all methods.  Resulting data are derived from default settings."
                :arguments ("method"))
                nil [107730 108054])
            ("tramp-parse-group" function
               (:documentation "Return a (user host) tuple allowed to access.
User is always nil."
                :arguments ("regexp" "match-level" "skip-regexp"))
                nil [108077 108429])
            ("tramp-parse-file" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("filename" "function"))
                nil [108452 108921])
            ("tramp-parse-rhosts" function
               (:documentation "Return a list of (user host) tuples allowed to access.
Either user or host may be nil."
                :arguments ("filename"))
                nil [108944 109128])
            ("tramp-parse-rhosts-group" function (:documentation "Return a (user host) tuple allowed to access.
Either user or host may be nil.") nil [109130 109540])
            ("tramp-parse-shosts" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("filename"))
                nil [109563 109735])
            ("tramp-parse-shosts-group" function (:documentation "Return a (user host) tuple allowed to access.
User is always nil.") nil [109737 109912])
            ("tramp-parse-sconfig" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("filename"))
                nil [109935 110109])
            ("tramp-parse-sconfig-group" function (:documentation "Return a (user host) tuple allowed to access.
User is always nil.") nil [110111 110310])
            ("tramp-parse-shostkeys-sknownhosts" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("dirname" "regexp"))
                nil [110333 110853])
            ("tramp-parse-shostkeys" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("dirname"))
                nil [110876 111101])
            ("tramp-parse-sknownhosts" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("dirname"))
                nil [111124 111365])
            ("tramp-parse-hosts" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("filename"))
                nil [111388 111558])
            ("tramp-parse-hosts-group" function (:documentation "Return a (user host) tuple allowed to access.
User is always nil.") nil [111560 111764])
            ("tramp-parse-passwd" function
               (:documentation "Return a list of (user host) tuples allowed to access.
Host is always \"localhost\"."
                :arguments ("filename"))
                nil [111787 112262])
            ("tramp-parse-passwd-group" function (:documentation "Return a (user host) tuple allowed to access.
Host is always \"localhost\".") nil [112264 112599])
            ("tramp-parse-etc-group" function
               (:documentation "Return a list of (group host) tuples allowed to access.
Host is always \"localhost\"."
                :arguments ("filename"))
                nil [112622 113102])
            ("tramp-parse-etc-group-group" function (:documentation "Return a (group host) tuple allowed to access.
Host is always \"localhost\".") nil [113104 113481])
            ("tramp-parse-netrc" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User may be nil."
                :arguments ("filename"))
                nil [113504 113671])
            ("tramp-parse-netrc-group" function (:documentation "Return a (user host) tuple allowed to access.
User may be nil.") nil [113673 114091])
            ("tramp-parse-putty" function
               (:documentation "Return a list of (user host) tuples allowed to access.
User is always nil."
                :arguments ("registry-or-dirname"))
                nil [114114 114695])
            ("tramp-parse-putty-group" function
               (:documentation "Return a (user host) tuple allowed to access.
User is always nil."
                :arguments ("registry"))
                nil [114697 115028])
            ("tramp-handle-file-local-copy-hook" variable (:documentation "Normal hook to be run at the end of `tramp-*-handle-file-local-copy'.") nil [115094 115214])
            ("tramp-handle-write-region-hook" variable (:documentation "Normal hook to be run at the end of `tramp-*-handle-write-region'.") nil [115216 115330])
            ("tramp-handle-add-name-to-file" function
               (:documentation "Like `add-name-to-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [115332 116362])
            ("tramp-handle-directory-file-name" function
               (:documentation "Like `directory-file-name' for Tramp files."
                :arguments ("directory"))
                nil [116364 116879])
            ("tramp-handle-directory-files" function
               (:documentation "Like `directory-files' for Tramp files."
                :arguments ("directory" "full" "match" "nosort"))
                nil [116881 117424])
            ("tramp-handle-directory-files-and-attributes" function
               (:documentation "Like `directory-files-and-attributes' for Tramp files."
                :arguments ("directory" "full" "match" "nosort" "id-format"))
                nil [117426 117756])
            ("tramp-handle-dired-uncache" function
               (:documentation "Like `dired-uncache' for Tramp files."
                :arguments ("dir"))
                nil [117758 117991])
            ("tramp-handle-file-accessible-directory-p" function
               (:documentation "Like `file-accessible-directory-p' for Tramp files."
                :arguments ("filename"))
                nil [117993 118178])
            ("tramp-handle-file-directory-p" function
               (:documentation "Like `file-directory-p' for Tramp files."
                :arguments ("filename"))
                nil [118180 118373])
            ("tramp-handle-file-equal-p" function
               (:documentation "Like `file-equalp-p' for Tramp files."
                :arguments ("filename1" "filename2"))
                nil [118375 118847])
            ("tramp-handle-file-exists-p" function
               (:documentation "Like `file-exists-p' for Tramp files."
                :arguments ("filename"))
                nil [118849 118978])
            ("tramp-handle-file-in-directory-p" function
               (:documentation "Like `file-in-directory-p' for Tramp files."
                :arguments ("filename" "directory"))
                nil [118980 119474])
            ("tramp-handle-file-modes" function
               (:documentation "Like `file-modes' for Tramp files."
                :arguments ("filename"))
                nil [119476 119756])
            ("tramp-handle-file-name-as-directory" function
               (:documentation "Like `file-name-as-directory' but aware of Tramp files."
                :arguments ("file"))
                nil [119824 120401])
            ("tramp-handle-file-name-case-insensitive-p" function
               (:documentation "Like `file-name-case-insensitive-p' for Tramp files."
                :arguments ("filename"))
                nil [120403 122600])
            ("tramp-handle-file-name-completion" function
               (:documentation "Like `file-name-completion' for Tramp files."
                :arguments ("filename" "directory" "predicate"))
                nil [122602 123276])
            ("tramp-handle-file-name-directory" function
               (:documentation "Like `file-name-directory' but aware of Tramp files."
                :arguments ("file"))
                nil [123278 123872])
            ("tramp-handle-file-name-nondirectory" function
               (:documentation "Like `file-name-nondirectory' but aware of Tramp files."
                :arguments ("file"))
                nil [123874 124095])
            ("tramp-handle-file-newer-than-file-p" function
               (:documentation "Like `file-newer-than-file-p' for Tramp files."
                :arguments ("file1" "file2"))
                nil [124097 124468])
            ("tramp-handle-file-regular-p" function
               (:documentation "Like `file-regular-p' for Tramp files."
                :arguments ("filename"))
                nil [124470 124686])
            ("tramp-handle-file-remote-p" function
               (:documentation "Like `file-remote-p' for Tramp files."
                :arguments ("filename" "identification" "connected"))
                nil [124688 125689])
            ("tramp-handle-file-selinux-context" function
               (:documentation "Like `file-selinux-context' for Tramp files."
                :arguments ("_filename"))
                nil [125691 125839])
            ("tramp-handle-file-symlink-p" function
               (:documentation "Like `file-symlink-p' for Tramp files."
                :arguments ("filename"))
                nil [125841 126030])
            ("tramp-handle-file-truename" function
               (:documentation "Like `file-truename' for Tramp files."
                :arguments ("filename"))
                nil [126032 127547])
            ("tramp-handle-find-backup-file-name" function
               (:documentation "Like `find-backup-file-name' for Tramp files."
                :arguments ("filename"))
                nil [127549 128135])
            ("tramp-handle-insert-directory" function
               (:documentation "Like `insert-directory' for Tramp files."
                :arguments ("filename" "switches" "wildcard" "full-directory-p"))
                nil [128137 129343])
            ("tramp-handle-insert-file-contents" function
               (:documentation "Like `insert-file-contents' for Tramp files."
                :arguments ("filename" "visit" "beg" "end" "replace"))
                nil [129345 133338])
            ("tramp-handle-load" function
               (:documentation "Like `load' for Tramp files."
                :arguments ("file" "noerror" "nomessage" "nosuffix" "must-suffix"))
                nil [133340 134476])
            ("tramp-handle-make-symbolic-link" function
               (:documentation "Like `make-symbolic-link' for Tramp files.
This is the fallback implementation for backends which do not
support symbolic links."
                :arguments ("target" "linkname" "ok-if-already-exists"))
                nil [134478 135095])
            ("tramp-handle-shell-command" function
               (:documentation "Like `shell-command' for Tramp files."
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [135097 138080])
            ("tramp-handle-substitute-in-file-name" function
               (:documentation "Like `substitute-in-file-name' for Tramp files.
\"//\" and \"/~\" substitute only in the local filename part."
                :arguments ("filename"))
                nil [138082 139369])
            ("tramp-handle-set-visited-file-modtime" function
               (:documentation "Like `set-visited-file-modtime' for Tramp files."
                :arguments ("time-list"))
                nil [139371 140022])
            ("tramp-handle-verify-visited-file-modtime" function
               (:documentation "Like `verify-visited-file-modtime' for Tramp files.
At the time `verify-visited-file-modtime' calls this function, we
already know that the buffer is visiting a file and that
`visited-file-modtime' does not return 0.  Do not call this
function directly, unless those two cases are already taken care
of."
                :arguments ("buf"))
                nil [140024 141515])
            ("tramp-gio-events" variable
               (:documentation "List of events \"gio monitor\" could send."
                :constant-flag t
                :default-value '("attribute-changed" "changed" "changes-done-hint" "created" "deleted" "moved" "pre-unmount" "unmounted"))
                nil [141567 141754])
            ("tramp-handle-file-notify-add-watch" function
               (:documentation "Like `file-notify-add-watch' for Tramp files."
                :arguments ("filename" "_flags" "_callback"))
                nil [141842 142149])
            ("tramp-handle-file-notify-rm-watch" function
               (:documentation "Like `file-notify-rm-watch' for Tramp files."
                :arguments ("proc"))
                nil [142151 142460])
            ("tramp-handle-file-notify-valid-p" function
               (:documentation "Like `file-notify-valid-p' for Tramp files."
                :arguments ("proc"))
                nil [142462 142866])
            ("tramp-action-login" function
               (:documentation "Send the login name."
                :arguments ("_proc" "vec"))
                nil [143097 143661])
            ("tramp-action-password" function
               (:documentation "Query the user for a password."
                :arguments ("proc" "vec"))
                nil [143663 144590])
            ("tramp-action-succeed" function
               (:documentation "Signal success in finding shell prompt."
                :arguments ("_proc" "_vec"))
                nil [144592 144705])
            ("tramp-action-permission-denied" function
               (:documentation "Signal permission denied."
                :arguments ("proc" "_vec"))
                nil [144707 144852])
            ("tramp-action-yesno" function
               (:documentation "Ask the user for confirmation using `yes-or-no-p'.
Send \"yes\" to remote process on confirmation, abort otherwise.
See also `tramp-action-yn'."
                :arguments ("proc" "vec"))
                nil [144854 145470])
            ("tramp-action-yn" function
               (:documentation "Ask the user for confirmation using `y-or-n-p'.
Send \"y\" to remote process on confirmation, abort otherwise.
See also `tramp-action-yesno'."
                :arguments ("proc" "vec"))
                nil [145472 146078])
            ("tramp-action-terminal" function
               (:documentation "Tell the remote host which terminal type to use.
The terminal type can be configured with `tramp-terminal-type'."
                :arguments ("_proc" "vec"))
                nil [146080 146501])
            ("tramp-action-process-alive" function
               (:documentation "Check, whether a process has finished."
                :arguments ("proc" "_vec"))
                nil [146503 146665])
            ("tramp-action-out-of-band" function
               (:documentation "Check, whether an out-of-band copy has finished."
                :arguments ("proc" "vec"))
                nil [146667 147666])
            ("tramp-process-one-action" function
               (:documentation "Wait for output from the shell and perform one action."
                :arguments ("proc" "vec" "actions"))
                nil [147711 148460])
            ("tramp-process-actions" function
               (:documentation "Perform ACTIONS until success or TIMEOUT.
PROC and VEC indicate the remote connection to be used.  POS, if
set, is the starting point of the region to be deleted in the
connection buffer."
                :arguments ("proc" "vec" "pos" "actions" "timeout"))
                nil [148462 150576])
            ("tramp-accept-process-output" function
               (:documentation "Like `accept-process-output' for Tramp processes.
This is needed in order to hide `last-coding-system-used', which is set
for process communication also."
                :arguments ("proc" "timeout"))
                nil [150602 151400])
            ("tramp-check-for-regexp" function
               (:documentation "Check, whether REGEXP is contained in process buffer of PROC.
Erase echoed commands if exists."
                :arguments ("proc" "regexp"))
                nil [151402 152976])
            ("tramp-wait-for-regexp" function
               (:documentation "Wait for a REGEXP to appear from process PROC within TIMEOUT seconds.
Expects the output of PROC to be sent to the current buffer.  Returns
the string that matched, or nil.  Waits indefinitely if TIMEOUT is
nil."
                :arguments ("proc" "timeout" "regexp"))
                nil [152978 154158])
            ("tramp-send-string" function
               (:documentation "Send the STRING via connection VEC.

The STRING is expected to use Unix line-endings, but the lines sent to
the remote host use line-endings as defined in the variable
`tramp-rsh-end-of-line'.  The communication buffer is erased before sending."
                :arguments ("vec" "string"))
                nil [154410 155987])
            ("tramp-get-inode" function
               (:documentation "Returns the virtual inode number.
If it doesn't exist, generate a new one."
                :arguments ("vec"))
                nil [155989 156212])
            ("tramp-get-device" function
               (:documentation "Returns the virtual device number.
If it doesn't exist, generate a new one."
                :arguments ("vec"))
                nil [156214 156457])
            ("tramp-equal-remote" function
               (:documentation "Check, whether the remote parts of FILE1 and FILE2 are identical.
The check depends on method, user and host name of the files.  If
one of the components is missing, the default values are used.
The local file name parts of FILE1 and FILE2 are not taken into
account.

Example:

  (tramp-equal-remote \"/ssh::/etc\" \"/<your host name>:/home\")

would yield t.  On the other hand, the following check results in nil:

  (tramp-equal-remote \"/sudo::/etc\" \"/su::/etc\")"
                :arguments ("file1" "file2"))
                nil [156459 157109])
            ("tramp-mode-string-to-int" function
               (:documentation "Converts a ten-letter `drwxrwxrwx'-style mode string into mode bits."
                :arguments ("mode-string"))
                nil [157132 159854])
            ("tramp-file-mode-type-map" variable
               (:documentation "A list of file types returned from the `stat' system call.
This is used to map a mode number to a permission string."
                :constant-flag t
                :default-value '((0 . "-") (1 . "p") (2 . "c") (3 . "m") (4 . "d") (5 . "?") (6 . "b") (7 . "?") (8 . "-") (9 . "n") (10 . "l") (11 . "?") (12 . "s") (13 . "D") (14 . "w")))
                nil [159856 160586])
            ("tramp-file-mode-from-int" function
               (:documentation "Turn an integer representing a file mode into an ls(1)-like string."
                :arguments ("mode"))
                nil [160609 161249])
            ("tramp-file-mode-permissions" function
               (:documentation "Convert a permission bitset into a string.
This is used internally by `tramp-file-mode-from-int'."
                :arguments ("perm" "suid" "suid-text"))
                nil [161251 161676])
            ("tramp-get-local-uid" function
               (:documentation "The uid of the local user, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("id-format"))
                nil [161707 161905])
            ("tramp-get-local-gid" function
               (:documentation "The gid of the local user, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("id-format"))
                nil [161928 162294])
            ("tramp-get-local-locale" function
               (:documentation "Determine locale, supporting UTF8 if possible.
VEC is used for tracing."
                :arguments ("vec"))
                nil [162296 163144])
            ("tramp-check-cached-permissions" function
               (:documentation "Check `file-attributes' caches for VEC.
Return t if according to the cache access type ACCESS is known to
be granted."
                :arguments ("vec" "access"))
                nil [163167 165209])
            ("tramp-local-host-p" function
               (:documentation "Return t if this points to the local host, nil otherwise.
This handles also chrooted environments, which are not regarded as local."
                :arguments ("vec"))
                nil [165232 166312])
            ("tramp-get-remote-tmpdir" function
               (:documentation "Return directory for temporary files on the remote host identified by VEC."
                :arguments ("vec"))
                nil [166314 166775])
            ("tramp-make-tramp-temp-file" function
               (:documentation "Create a temporary file on the remote host identified by VEC.
Return the local name of the temporary file."
                :arguments ("vec"))
                nil [166798 167593])
            ("tramp-delete-temp-file-function" function (:documentation "Remove temporary files related to current buffer.") nil [167595 167800])
            ("add-hook" code nil nil [167802 167863])
            ("add-hook" code nil nil [167864 167982])
            ("tramp-handle-make-auto-save-file-name" function (:documentation "Like `make-auto-save-file-name' for Tramp files.
Returns a file name in `tramp-auto-save-directory' for autosaving
this file, if that variable is non-nil.") nil [167984 169216])
            ("tramp-subst-strs-in-string" function
               (:documentation "Replace all occurrences of the string FROM with TO in STRING.
ALIST is of the form ((FROM . TO) ...)."
                :arguments ("alist" "string"))
                nil [169218 169655])
            ("tramp-handle-temporary-file-directory" function (:documentation "Like `temporary-file-directory' for Tramp files.") nil [169657 170044])
            ("tramp-handle-make-nearby-temp-file" function
               (:documentation "Like `make-nearby-temp-file' for Tramp files."
                :arguments ("prefix" "dir-flag" "suffix"))
                nil [170046 170305])
            ("tramp-call-process" function
               (:documentation "Calls `call-process' on the local host.
It always returns a return code.  The Lisp error raised when
PROGRAM is nil is trapped also, returning 1.  Furthermore, traces
are written with verbosity of 6."
                :arguments ("vec" "program" "infile" "destination" "display" "args"))
                nil [170345 171505])
            ("tramp-call-process-region" function
               (:documentation "Calls `call-process-region' on the local host.
It always returns a return code.  The Lisp error raised when
PROGRAM is nil is trapped also, returning 1.  Furthermore, traces
are written with verbosity of 6."
                :arguments ("vec" "start" "end" "program" "delete" "buffer" "display" "args"))
                nil [171507 172660])
            ("tramp-read-passwd" function
               (:documentation "Read a password from user (compat function).
Consults the auth-source package.
Invokes `password-read' if available, `read-passwd' else."
                :arguments ("proc" "prompt"))
                nil [172683 174989])
            ("tramp-clear-passwd" function
               (:documentation "Clear password cache for connection related to VEC."
                :arguments ("vec"))
                nil [175012 175723])
            ("tramp-half-a-year" variable
               (:documentation "Evaluated by \"(days-to-time 183)\"."
                :constant-flag t
                :default-value '(241 17024))
                nil [175761 175841])
            ("tramp-time-diff" function
               (:documentation "Return the difference between the two times, in seconds.
T1 and T2 are time values (as returned by `current-time' for example)."
                :arguments ("t1" "t2"))
                nil [175864 176162])
            ("tramp-unquote-shell-quote-argument" function
               (:documentation "Remove quotation prefix \"/:\" from string S, and quote it then for shell."
                :arguments ("s"))
                nil [176164 176349])
            ("tramp-shell-quote-argument" function
               (:documentation "Similar to `shell-quote-argument', but groks newlines.
Only works for Bourne-like shells."
                :arguments ("s"))
                nil [177476 178045])
            ("tramp-interrupt-process" function
               (:documentation "Interrupt remote process PROC."
                :arguments ("process" "_current-group"))
                nil [178157 179413])
            ("when" code nil nil [179473 179707])
            ("tramp-eshell-directory-change" function (:documentation "Set `eshell-path-env' to $PATH of the host related to `default-directory'.") nil [179861 180195])
            ("eval-after-load" code nil nil [180197 180611])
            ("tramp-unload-tramp" function
               (:documentation "Discard Tramp from loading remote files."
                :user-visible-flag t)
                nil [180839 181102])
            ("tramp" package nil nil [181104 181120]))          
      :file "tramp.el.gz"
      :pointmax 182158
      :fsize 47902
      :lastmodtime '(23451 3115 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-2155640"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [3911 3963])
            ("cl-lib" include nil nil [3984 4001])
            ("tramp" include nil nil [4003 4019])
            ("dbus" include nil nil [4021 4036])
            ("url-parse" include nil nil [4037 4057])
            ("url-util" include nil nil [4058 4077])
            ("zeroconf" include nil nil [4078 4097])
            ("custom" include nil nil [4145 4162])
            ("tramp-gvfs-enabled" variable
               (:documentation "Non-nil when GVFS is available."
                :constant-flag t
                :default-value (ignore-errors (and (featurep 'dbusbind) (tramp-compat-funcall 'dbus-get-unique-name :system) (tramp-compat-funcall 'dbus-get-unique-name :session) (or (tramp-compat-process-running-p "gvfs-fuse-daemon") (tramp-compat-process-running-p "gvfsd-fuse")))))
                nil [4228 4564])
            ("tramp-gvfs-methods" variable
               (:documentation "List of methods for remote files, accessed with GVFS."
                :default-value '("afp" "dav" "davs" "gdrive" "nextcloud" "sftp"))
                nil [4587 4978])
            ("tramp-goa-methods" variable
               (:documentation "List of methods which require registration at GNOME Online Accounts."
                :constant-flag t
                :default-value '("gdrive" "nextcloud"))
                nil [4980 5105])
            ("unless" code nil nil [5165 5367])
            ("when" code nil nil [5469 5780])
            ("tramp-gvfs-zeroconf-domain" variable
               (:documentation "Zeroconf domain to be used for discovering services, like host names."
                :default-value "local")
                nil [5803 5973])
            ("when" code nil nil [6079 6231])
            ("tramp-gvfs-path-tramp" variable
               (:documentation "The preceding object path for own objects."
                :constant-flag t
                :default-value (concat dbus-path-emacs "/Tramp"))
                nil [6233 6346])
            ("tramp-gvfs-service-daemon" variable
               (:documentation "The well known name of the GVFS daemon."
                :constant-flag t
                :default-value "org.gtk.vfs.Daemon")
                nil [6348 6449])
            ("tramp-gvfs-path-mounttracker" variable
               (:documentation "The object path of the GVFS daemon."
                :constant-flag t
                :default-value "/org/gtk/vfs/mounttracker")
                nil [6451 6558])
            ("tramp-gvfs-interface-mounttracker" variable
               (:documentation "The mount tracking interface in the GVFS daemon."
                :constant-flag t
                :default-value "org.gtk.vfs.MountTracker")
                nil [6560 6684])
            ("tramp-gvfs-methods-mounttracker" variable
               (:documentation "The list of supported methods of the mount tracking interface."
                :constant-flag t
                :default-value (and tramp-gvfs-enabled (dbus-introspect-get-method-names :session tramp-gvfs-service-daemon tramp-gvfs-path-mounttracker tramp-gvfs-interface-mounttracker)))
                nil [6794 7072])
            ("tramp-gvfs-listmounts" variable
               (:documentation "The name of the \"listMounts\" method.
It has been changed in GVFS 1.14."
                :constant-flag t
                :default-value (if (member "ListMounts" tramp-gvfs-methods-mounttracker) "ListMounts" "listMounts"))
                nil [7074 7280])
            ("tramp-gvfs-mountlocation" variable
               (:documentation "The name of the \"mountLocation\" method.
It has been changed in GVFS 1.14."
                :constant-flag t
                :default-value (if (member "MountLocation" tramp-gvfs-methods-mounttracker) "MountLocation" "mountLocation"))
                nil [7282 7503])
            ("tramp-gvfs-mountlocation-signature" variable
               (:documentation "The D-Bus signature of the \"mountLocation\" method.
It has been changed in GVFS 1.14."
                :constant-flag t
                :default-value (and tramp-gvfs-enabled (dbus-introspect-get-signature :session tramp-gvfs-service-daemon tramp-gvfs-path-mounttracker tramp-gvfs-interface-mounttracker tramp-gvfs-mountlocation)))
                nil [7505 7832])
            ("tramp-gvfs-interface-mountoperation" variable
               (:documentation "Used by the dbus-proxying implementation of GMountOperation."
                :constant-flag t
                :default-value "org.gtk.vfs.MountOperation")
                nil [9197 9337])
            ("tramp-gvfs-password-need-password" variable
               (:documentation "Operation requires a password."
                :constant-flag t
                :default-value 1)
                nil [10554 10635])
            ("tramp-gvfs-password-need-username" variable
               (:documentation "Operation requires a username."
                :constant-flag t
                :default-value 2)
                nil [10637 10718])
            ("tramp-gvfs-password-need-domain" variable
               (:documentation "Operation requires a domain."
                :constant-flag t
                :default-value 4)
                nil [10720 10797])
            ("tramp-gvfs-password-saving-supported" variable
               (:documentation "Operation supports saving settings."
                :constant-flag t
                :default-value 8)
                nil [10799 10888])
            ("tramp-gvfs-password-anonymous-supported" variable
               (:documentation "Operation supports anonymous users."
                :constant-flag t
                :default-value 16)
                nil [10890 10983])
            ("tramp-goa-service" variable
               (:documentation "The well known name of the GNOME Online Accounts service."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts")
                nil [11135 11252])
            ("tramp-goa-path" variable
               (:documentation "The object path of the GNOME Online Accounts."
                :constant-flag t
                :default-value "/org/gnome/OnlineAccounts")
                nil [11254 11357])
            ("tramp-goa-path-accounts" variable
               (:documentation "The object path of the GNOME Online Accounts accounts."
                :constant-flag t
                :default-value (concat tramp-goa-path "/Accounts"))
                nil [11359 11488])
            ("tramp-goa-interface-documents" variable
               (:documentation "The documents interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Documents")
                nil [11490 11625])
            ("tramp-goa-interface-printers" variable
               (:documentation "The printers interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Printers")
                nil [11701 11833])
            ("tramp-goa-interface-files" variable
               (:documentation "The files interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Files")
                nil [11908 12031])
            ("tramp-goa-interface-contacts" variable
               (:documentation "The contacts interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Contacts")
                nil [12217 12349])
            ("tramp-goa-interface-calendar" variable
               (:documentation "The calendar interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Calendar")
                nil [12538 12670])
            ("tramp-goa-interface-oauth2based" variable
               (:documentation "The oauth2based interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.OAuth2Based")
                nil [12859 13000])
            ("tramp-goa-interface-account" variable
               (:documentation "The account interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Account")
                nil [13361 13490])
            ("tramp-goa-identity-regexp" variable
               (:documentation "Regexp matching GNOME Online Accounts \"PresentationIdentity\" property."
                :constant-flag t
                :default-value (concat "^" "\\(" tramp-user-regexp "\\)?" "@" "\\(" tramp-host-regexp "\\)?" "\\(?:" ":" "\\(" tramp-port-regexp "\\)" "\\)?"))
                nil [15117 15365])
            ("tramp-goa-interface-mail" variable
               (:documentation "The mail interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Mail")
                nil [15367 15487])
            ("tramp-goa-interface-chat" variable
               (:documentation "The chat interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Chat")
                nil [16634 16754])
            ("tramp-goa-interface-photos" variable
               (:documentation "The photos interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Photos")
                nil [16825 16951])
            ("tramp-goa-path-manager" variable
               (:documentation "The object path of the GNOME Online Accounts manager."
                :constant-flag t
                :default-value (concat tramp-goa-path "/Manager"))
                nil [17024 17150])
            ("tramp-goa-interface-documents" variable
               (:documentation "The manager interface of the GNOME Online Accounts."
                :constant-flag t
                :default-value "org.gnome.OnlineAccounts.Manager")
                nil [17152 17283])
            ("cl-defstruct" code nil nil [17886 17959])
            ("tramp-gvfs-gio-mapping" variable
               (:documentation "List of cons cells, mapping \"gvfs-<command>\" to \"gio <command>\"."
                :constant-flag t
                :default-value '(("gvfs-copy" . "copy") ("gvfs-info" . "info") ("gvfs-ls" . "list") ("gvfs-mkdir" . "mkdir") ("gvfs-monitor-file" . "monitor") ("gvfs-mount" . "mount") ("gvfs-move" . "move") ("gvfs-rm" . "remove") ("gvfs-trash" . "trash")))
                nil [18074 18439])
            ("tramp-gvfs-file-attributes" variable
               (:documentation "GVFS file attributes."
                :constant-flag t
                :default-value '("name" "type" "standard::display-name" "standard::symlink-target" "unix::nlink" "unix::uid" "owner::user" "unix::gid" "owner::group" "time::access" "time::modified" "time::changed" "standard::size" "unix::mode" "access::can-read" "access::can-write" "access::can-execute" "unix::inode" "unix::device"))
                nil [18501 18942])
            ("tramp-gvfs-file-attributes-with-gvfs-ls-regexp" variable
               (:documentation "Regexp to parse GVFS file attributes with `gvfs-ls'."
                :constant-flag t
                :default-value (concat "[[:blank:]]" (regexp-opt tramp-gvfs-file-attributes t) "=\\(.+?\\)"))
                nil [18944 19138])
            ("tramp-gvfs-file-attributes-with-gvfs-info-regexp" variable
               (:documentation "Regexp to parse GVFS file attributes with `gvfs-info'."
                :constant-flag t
                :default-value (concat "^[[:blank:]]*" (regexp-opt tramp-gvfs-file-attributes t) ":[[:blank:]]+\\(.*\\)$"))
                nil [19140 19358])
            ("tramp-gvfs-file-system-attributes" variable
               (:documentation "GVFS file system attributes."
                :constant-flag t
                :default-value '("filesystem::free" "filesystem::size" "filesystem::used"))
                nil [19360 19507])
            ("tramp-gvfs-file-system-attributes-regexp" variable
               (:documentation "Regexp to parse GVFS file system attributes with `gvfs-info'."
                :constant-flag t
                :default-value (concat "^[[:blank:]]*" (regexp-opt tramp-gvfs-file-system-attributes t) ":[[:blank:]]+\\(.*\\)$"))
                nil [19509 19733])
            ("tramp-gvfs-nextcloud-default-prefix" variable
               (:documentation "Default prefix for owncloud / nextcloud methods."
                :constant-flag t
                :default-value "/remote.php/webdav")
                nil [19735 19855])
            ("tramp-gvfs-nextcloud-default-prefix-regexp" variable
               (:documentation "Regexp of default prefix for owncloud / nextcloud methods."
                :constant-flag t
                :default-value (concat (regexp-quote tramp-gvfs-nextcloud-default-prefix) "$"))
                nil [19857 20039])
            ("tramp-gvfs-file-name-handler-alist" variable
               (:documentation "Alist of handler functions for Tramp GVFS method.
Operations not mentioned here will be handled by the default Emacs primitives."
                :constant-flag t
                :default-value '((access-file . ignore) (add-name-to-file . tramp-handle-add-name-to-file) (copy-file . tramp-gvfs-handle-copy-file) (delete-directory . tramp-gvfs-handle-delete-directory) (delete-file . tramp-gvfs-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (exec-path . ignore) (expand-file-name . tramp-gvfs-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . ignore) (file-attributes . tramp-gvfs-handle-file-attributes) (file-directory-p . tramp-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-gvfs-handle-file-executable-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-gvfs-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-gvfs-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-gvfs-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-gvfs-handle-file-readable-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-gvfs-handle-file-system-info) (file-truename . tramp-handle-file-truename) (file-writable-p . tramp-gvfs-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-gvfs-handle-make-directory) (make-directory-internal . ignore) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-handle-make-symbolic-link) (process-file . ignore) (rename-file . tramp-gvfs-handle-rename-file) (set-file-acl . ignore) (set-file-modes . ignore) (set-file-selinux-context . ignore) (set-file-times . ignore) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . ignore) (start-file-process . ignore) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-gvfs-handle-write-region)))
                nil [20102 24129])
            ("tramp-gvfs-file-name-p" function
               (:documentation "Check if it's a filename handled by the GVFS daemon."
                :arguments ("filename"))
                nil [24288 24578])
            ("tramp-gvfs-file-name-handler" function
               (:documentation "Invoke the GVFS related OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [24601 25055])
            ("when" code nil nil [25078 25207])
            ("tramp-gvfs-dbus-string-to-byte-array" function
               (:documentation "Like `dbus-string-to-byte-array' but add trailing \\0 if needed."
                :arguments ("string"))
                nil [25238 25502])
            ("tramp-gvfs-dbus-byte-array-to-string" function
               (:documentation "Like `dbus-byte-array-to-string' but remove trailing \\0 if exists.
Return nil for null BYTE-ARRAY."
                :arguments ("byte-array"))
                nil [25504 25985])
            ("tramp-gvfs-stringify-dbus-message" function
               (:documentation "Convert a D-Bus message into readable UTF8 strings, used for traces."
                :arguments ("message"))
                nil [25987 26549])
            ("tramp-dbus-function" function
               (:documentation "Apply a D-Bus function FUNC from dbus.el.
The call will be traced by Tramp with trace level 6."
                :arguments ("vec" "func" "args"))
                nil [26551 26885])
            ("with-tramp-dbus-call-method" function
               (:documentation "Apply a D-Bus call on bus BUS.

If SYNCHRONOUS is non-nil, the call is synchronously.  Otherwise,
it is an asynchronous call, with `ignore' as callback function.

The other arguments have the same meaning as with `dbus-call-method'
or `dbus-call-method-asynchronously'."
                :arguments ("vec" "synchronous" "bus" "service" "path" "interface" "method" "args"))
                nil [26887 27525])
            ("put" code nil nil [27527 27585])
            ("put" code nil nil [27586 27659])
            ("font-lock-add-keywords" code nil nil [27660 27740])
            ("with-tramp-dbus-get-all-properties" function
               (:documentation "Return all properties of INTERFACE.
The call will be traced by Tramp with trace level 6."
                :arguments ("vec" "bus" "service" "path" "interface"))
                nil [27742 28226])
            ("put" code nil nil [28228 28293])
            ("put" code nil nil [28294 28374])
            ("font-lock-add-keywords" code nil nil [28375 28462])
            ("tramp-gvfs-dbus-event-vector" variable (:documentation "Current Tramp file name to be used, as vector.
It is needed when D-Bus signals or errors arrive, because there
is no information where to trace the message.") nil [28464 28666])
            ("tramp-gvfs-dbus-event-error" function
               (:documentation "Called when a D-Bus error message arrives, see `dbus-event-error-functions'."
                :arguments ("event" "err"))
                nil [28668 28971])
            ("add-hook" code nil nil [29068 29208])
            ("tramp-gvfs-do-copy-or-rename-file" function
               (:documentation "Copy or rename a remote file.
OP must be `copy' or `rename' and indicates the operation to perform.
FILENAME specifies the file to copy or rename, NEWNAME is the name of
the new file (for copy) or the new name of the file (for rename).
OK-IF-ALREADY-EXISTS means don't barf if NEWNAME exists already.
KEEP-DATE means to make sure that NEWNAME has the same timestamp
as FILENAME.  PRESERVE-UID-GID, when non-nil, instructs to keep
the uid and gid if both files are on the same host.
PRESERVE-EXTENDED-ATTRIBUTES is ignored.

This function is invoked by `tramp-gvfs-handle-copy-file' and
`tramp-gvfs-handle-rename-file'.  It is an error if OP is neither
of `copy' and `rename'.  FILENAME and NEWNAME must be absolute
file names."
                :arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes"))
                nil [29238 32855])
            ("tramp-gvfs-handle-copy-file" function
               (:documentation "Like `copy-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes"))
                nil [32857 33553])
            ("tramp-gvfs-handle-delete-directory" function
               (:documentation "Like `delete-directory' for Tramp files."
                :arguments ("directory" "recursive" "trash"))
                nil [33555 34661])
            ("tramp-gvfs-handle-delete-file" function
               (:documentation "Like `delete-file' for Tramp files."
                :arguments ("filename" "trash"))
                nil [34663 35266])
            ("tramp-gvfs-handle-expand-file-name" function
               (:documentation "Like `expand-file-name' for Tramp files."
                :arguments ("name" "dir"))
                nil [35268 37258])
            ("tramp-gvfs-get-directory-attributes" function
               (:documentation "Return GVFS attributes association list of all files in DIRECTORY."
                :arguments ("directory"))
                nil [37260 38788])
            ("tramp-gvfs-get-root-attributes" function
               (:documentation "Return GVFS attributes association list of FILENAME.
If FILE-SYSTEM is non-nil, return file system attributes."
                :arguments ("filename" "file-system"))
                nil [38790 39966])
            ("tramp-gvfs-get-file-attributes" function
               (:documentation "Return GVFS attributes association list of FILENAME."
                :arguments ("filename"))
                nil [39968 40575])
            ("tramp-gvfs-handle-file-attributes" function
               (:documentation "Like `file-attributes' for Tramp files."
                :arguments ("filename" "id-format"))
                nil [40577 44426])
            ("tramp-gvfs-handle-file-executable-p" function
               (:documentation "Like `file-executable-p' for Tramp files."
                :arguments ("filename"))
                nil [44428 44680])
            ("tramp-gvfs-handle-file-local-copy" function
               (:documentation "Like `file-local-copy' for Tramp files."
                :arguments ("filename"))
                nil [44682 45119])
            ("tramp-gvfs-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for Tramp files."
                :arguments ("filename" "directory"))
                nil [45121 45798])
            ("tramp-gvfs-handle-file-notify-add-watch" function
               (:documentation "Like `file-notify-add-watch' for Tramp files."
                :arguments ("file-name" "flags" "_callback"))
                nil [45800 47636])
            ("tramp-gvfs-monitor-process-filter" function
               (:documentation "Read output from \"gvfs-monitor-file\" and add corresponding file-notify events."
                :arguments ("proc" "string"))
                nil [47638 50131])
            ("tramp-gvfs-handle-file-readable-p" function
               (:documentation "Like `file-readable-p' for Tramp files."
                :arguments ("filename"))
                nil [50133 50379])
            ("tramp-gvfs-handle-file-system-info" function
               (:documentation "Like `file-system-info' for Tramp files."
                :arguments ("filename"))
                nil [50381 51104])
            ("tramp-gvfs-handle-file-writable-p" function
               (:documentation "Like `file-writable-p' for Tramp files."
                :arguments ("filename"))
                nil [51106 51556])
            ("tramp-gvfs-handle-make-directory" function
               (:documentation "Like `make-directory' for Tramp files."
                :arguments ("dir" "parents"))
                nil [51558 52334])
            ("tramp-gvfs-handle-rename-file" function
               (:documentation "Like `rename-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [52336 53006])
            ("tramp-gvfs-handle-write-region" function
               (:documentation "Like `write-region' for Tramp files."
                :arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew"))
                nil [53008 54626])
            ("tramp-gvfs-url-file-name" function
               (:documentation "Return FILENAME in URL syntax."
                :arguments ("filename"))
                nil [54657 55851])
            ("tramp-gvfs-object-path" function
               (:documentation "Create a D-Bus object path from FILENAME."
                :arguments ("filename"))
                nil [55853 56020])
            ("tramp-gvfs-file-name" function
               (:documentation "Retrieve file name from D-Bus OBJECT-PATH."
                :arguments ("object-path"))
                nil [56022 56212])
            ("tramp-gvfs-handler-askpassword" function
               (:documentation "Implementation for the \"org.gtk.vfs.MountOperation.askPassword\" method."
                :arguments ("message" "user" "domain" "flags"))
                nil [56242 57779])
            ("tramp-gvfs-handler-askquestion" function
               (:documentation "Implementation for the \"org.gtk.vfs.MountOperation.askQuestion\" method."
                :arguments ("message" "choices"))
                nil [57781 59293])
            ("tramp-gvfs-handler-mounted-unmounted" function
               (:documentation "Signal handler for the \"org.gtk.vfs.MountTracker.mounted\" and
\"org.gtk.vfs.MountTracker.unmounted\" signals."
                :arguments ("mount-info"))
                nil [59295 61987])
            ("when" code nil nil [61989 62651])
            ("tramp-gvfs-connection-mounted-p" function
               (:documentation "Check, whether the location is already mounted."
                :arguments ("vec"))
                nil [62653 65706])
            ("tramp-gvfs-unmount" function
               (:documentation "Unmount the object identified by VEC."
                :arguments ("vec"))
                nil [65708 66219])
            ("tramp-gvfs-mount-spec-entry" function
               (:documentation "Construct a mount-spec entry to be used in a mount_spec.
It was \"a(say)\", but has changed to \"a{sv})\"."
                :arguments ("key" "value"))
                nil [66221 66612])
            ("tramp-gvfs-mount-spec" function
               (:documentation "Return a mount-spec for \"org.gtk.vfs.MountTracker.mountLocation\"."
                :arguments ("vec"))
                nil [66614 69308])
            ("tramp-gvfs-get-remote-uid" function
               (:documentation "The uid of the remote connection VEC, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("vec" "id-format"))
                nil [69338 69998])
            ("tramp-gvfs-get-remote-gid" function
               (:documentation "The gid of the remote connection VEC, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("vec" "id-format"))
                nil [70000 70578])
            ("tramp-gvfs-get-remote-uid-gid-in-progress" variable (:documentation "Indication, that remote uid and gid determination is in progress.") nil [70580 70704])
            ("tramp-gvfs-get-remote-prefix" function
               (:documentation "The prefix of the remote connection VEC.
This is relevant for GNOME Online Accounts."
                :arguments ("vec"))
                nil [70706 71281])
            ("tramp-gvfs-maybe-open-connection" function
               (:documentation "Maybe open a connection VEC.
Does not do anything if a connection is already open, but re-opens the
connection if a previous connection has died for some reason."
                :arguments ("vec"))
                nil [71283 76334])
            ("tramp-gvfs-gio-tool-p" function
               (:documentation "Check, whether the gio tool is available."
                :arguments ("vec"))
                nil [76336 76532])
            ("tramp-gvfs-send-command" function
               (:documentation "Send the COMMAND with its ARGS to connection VEC.
COMMAND is a command from the gvfs-* utilities.  It is replaced
by the corresponding gio tool call if available.  `call-process'
is applied, and it returns t if the return code is zero."
                :arguments ("vec" "command" "args"))
                nil [76534 77504])
            ("tramp-get-goa-accounts" function
               (:documentation "Retrieve GNOME Online Accounts, and cache them.
The hash key is a `tramp-goa-name' structure.  The value is an
alist of the properties of `tramp-goa-interface-account' and
`tramp-goa-interface-files' of the corresponding GNOME online
account.  Additionally, a property \"prefix\" is added.
VEC is used only for traces."
                :arguments ("vec"))
                nil [77551 79565])
            ("tramp-zeroconf-parse-device-names" function
               (:documentation "Return a list of (user host) tuples allowed to access."
                :arguments ("service"))
                nil [79599 80206])
            ("tramp-gvfs-parse-device-names" function
               (:documentation "Return a list of (user host) tuples allowed to access.
This uses \"avahi-browse\" in case D-Bus is not enabled in Avahi."
                :arguments ("service"))
                nil [80345 81156])
            ("when" code nil nil [81228 82632])
            ("add-hook" code nil nil [82634 82719])
            ("tramp-gvfs" package nil nil [82721 82742]))          
      :file "tramp-gvfs.el.gz"
      :pointmax 83135
      :fsize 19879
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 4162 . 4163) (symbol 4125 . 4142) (open-paren 4124 . 4125) (close-paren 4001 . 4002) (symbol 3966 . 3983) (open-paren 3965 . 3966)))
    (semanticdb-table "semanticdb-table-1c4a614"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1144 1161])
            ("tramp" include nil nil [1163 1179])
            ("dired" include nil nil [1227 1243])
            ("declare-function" code nil nil [1246 1294])
            ("dired-compress-file-suffixes" variable nil nil [1295 1332])
            ("vc-handled-backends" variable nil nil [1333 1361])
            ("vc-bzr-program" variable nil nil [1362 1385])
            ("vc-git-program" variable nil nil [1386 1409])
            ("vc-hg-program" variable nil nil [1410 1432])
            ("tramp-inline-compress-start-size" variable
               (:documentation "The minimum size of compressing where inline transfer.
When inline transfer, compress transferred data of file
whose size is this value or above (up to `tramp-copy-size-limit').
If it is nil, no compression at all will be applied."
                :default-value 4096)
                nil [1455 1793])
            ("tramp-copy-size-limit" variable
               (:documentation "The maximum file size where inline copying is preferred over an out-of-the-band copy.
If it is nil, out-of-the-band copy will be used without a check."
                :default-value 10240)
                nil [1816 2066])
            ("tramp-terminal-type" variable
               (:documentation "Value of TERM environment variable for logging in to remote host.
Because Tramp wants to parse the output of the remote shell, it is easily
confused by ANSI color escape sequences and suchlike.  Often, shell init
files conditionalize this setup based on the TERM environment variable."
                :default-value "dumb")
                nil [2089 2448])
            ("tramp-histfile-override" variable
               (:documentation "When invoking a shell, override the HISTFILE with this value.
When setting to a string, it redirects the shell history to that
file.  Be careful when setting to \"/dev/null\"; this might
result in undesired results when using \"bash\" as shell.

The value t unsets any setting of HISTFILE, and sets both
HISTFILESIZE and HISTSIZE to 0.  If you set this variable to nil,
however, the *override* is disabled, so the history will go to
the default storage location, e.g. \"$HOME/.sh_history\"."
                :default-value "~/.tramp_history")
                nil [2471 3217])
            ("tramp-display-escape-sequence-regexp" variable
               (:documentation "Terminal control escape sequences for display attributes."
                :constant-flag t
                :default-value "[[;0-9]+m")
                nil [3240 3363])
            ("tramp-device-escape-sequence-regexp" variable
               (:documentation "Terminal control escape sequences for device status."
                :constant-flag t
                :default-value "[[0-9]+n")
                nil [3386 3502])
            ("tramp-end-of-output" variable
               (:documentation "String used to recognize end of output.
The `$' character at the end is quoted; the string cannot be
detected as prompt when being sent on echoing hosts, therefore."
                :default-value (format "///%s#$" (md5 (concat (prin1-to-string process-environment) (current-time-string)))))
                nil [3706 4005])
            ("tramp-initial-end-of-output" variable
               (:documentation "Prompt when establishing a connection."
                :constant-flag t
                :default-value "#$ ")
                nil [4028 4115])
            ("tramp-end-of-heredoc" variable
               (:documentation "String used to recognize end of heredoc strings."
                :constant-flag t
                :default-value (md5 tramp-end-of-output))
                nil [4117 4227])
            ("tramp-use-ssh-controlmaster-options" variable
               (:documentation "Whether to use `tramp-ssh-controlmaster-options'."
                :default-value t)
                nil [4250 4404])
            ("tramp-ssh-controlmaster-options" variable (:documentation "Which ssh Control* arguments to use.

If it is a string, it should have the form
\"-o ControlMaster=auto -o ControlPath=\\='tramp.%%r@%%h:%%p\\='
-o ControlPersist=no\".  Percent characters in the ControlPath
spec must be doubled, because the string is used as format string.

Otherwise, it will be auto-detected by Tramp, if
`tramp-use-ssh-controlmaster-options' is non-nil.  The value
depends on the installed local ssh version.

The string is used in `tramp-methods'.") nil [4406 4925])
            ("add-to-list" code nil nil [5006 5424])
            ("add-to-list" code nil nil [5446 5826])
            ("add-to-list" code nil nil [5848 6372])
            ("add-to-list" code nil nil [6394 6948])
            ("add-to-list" code nil nil [6970 7590])
            ("add-to-list" code nil nil [7612 7867])
            ("add-to-list" code nil nil [7889 8148])
            ("add-to-list" code nil nil [8170 8505])
            ("add-to-list" code nil nil [8527 8887])
            ("add-to-list" code nil nil [8909 9181])
            ("add-to-list" code nil nil [9203 9928])
            ("add-to-list" code nil nil [9950 10233])
            ("add-to-list" code nil nil [10255 10493])
            ("add-to-list" code nil nil [10515 11154])
            ("add-to-list" code nil nil [11176 11429])
            ("add-to-list" code nil nil [11451 11737])
            ("add-to-list" code nil nil [11759 12029])
            ("add-to-list" code nil nil [12051 12506])
            ("add-to-list" code nil nil [12528 12956])
            ("add-to-list" code nil nil [12978 13641])
            ("add-to-list" code nil nil [13663 14286])
            ("add-to-list" code nil nil [14308 14703])
            ("add-to-list" code nil nil [14726 14819])
            ("add-to-list" code nil nil [14842 14972])
            ("add-to-list" code nil nil [15145 15325])
            ("tramp-completion-function-alist-rsh" variable
               (:documentation "Default list of (FUNCTION FILE) pairs to be examined for rsh methods."
                :constant-flag t
                :default-value '((tramp-parse-rhosts "/etc/hosts.equiv") (tramp-parse-rhosts "~/.rhosts")))
                nil [15348 15550])
            ("tramp-completion-function-alist-ssh" variable
               (:documentation "Default list of (FUNCTION FILE) pairs to be examined for ssh methods."
                :constant-flag t
                :default-value '((tramp-parse-rhosts "/etc/hosts.equiv") (tramp-parse-rhosts "/etc/shosts.equiv") (tramp-parse-shosts "/etc/ssh_known_hosts") (tramp-parse-sconfig "/etc/ssh_config") (tramp-parse-shostkeys "/etc/ssh2/hostkeys") (tramp-parse-sknownhosts "/etc/ssh2/knownhosts") (tramp-parse-rhosts "~/.rhosts") (tramp-parse-rhosts "~/.shosts") (tramp-parse-shosts "~/.ssh/known_hosts") (tramp-parse-sconfig "~/.ssh/config") (tramp-parse-shostkeys "~/.ssh2/hostkeys") (tramp-parse-sknownhosts "~/.ssh2/knownhosts")))
                nil [15573 16279])
            ("tramp-completion-function-alist-telnet" variable
               (:documentation "Default list of (FUNCTION FILE) pairs to be examined for telnet methods."
                :constant-flag t
                :default-value '((tramp-parse-hosts "/etc/hosts")))
                nil [16302 16466])
            ("tramp-completion-function-alist-su" variable
               (:documentation "Default list of (FUNCTION FILE) pairs to be examined for su methods."
                :constant-flag t
                :default-value '((tramp-parse-passwd "/etc/passwd")))
                nil [16489 16647])
            ("tramp-completion-function-alist-sg" variable
               (:documentation "Default list of (FUNCTION FILE) pairs to be examined for sg methods."
                :constant-flag t
                :default-value '((tramp-parse-etc-group "/etc/group")))
                nil [16670 16830])
            ("tramp-completion-function-alist-putty" variable
               (:documentation "Default list of (FUNCTION REGISTRY) pairs to be examined for putty sessions."
                :constant-flag t
                :default-value `((tramp-parse-putty ,(if (memq system-type '(windows-nt)) "HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions" "~/.putty/sessions"))))
                nil [16853 17134])
            ("eval-after-load" code nil nil [17157 18973])
            ("tramp-remote-path" variable
               (:documentation "List of directories to search for executables on remote host.
For every remote host, this variable will be set buffer local,
keeping the list of existing directories on that host.

You can use `~' in this list, but when searching for a shell which groks
tilde expansion, all directory names starting with `~' will be ignored.

`Default Directories' represent the list of directories given by
the command \"getconf PATH\".  It is recommended to use this
entry on head of this list, because these are the default
directories for POSIX compatible commands.  On remote hosts which
do not offer the getconf command (like cygwin), the value
\"/bin:/usr/bin\" is used instead.  This entry is represented in
the list by the special value `tramp-default-remote-path'.

`Private Directories' are the settings of the $PATH environment,
as given in your `~/.profile'.  This entry is represented in
the list by the special value `tramp-own-remote-path'."
                :default-value '(tramp-default-remote-path "/bin" "/usr/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin" "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin" "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin" "/opt/local/bin"))
                nil [19364 20799])
            ("tramp-remote-process-environment" variable
               (:documentation "List of environment variables to be set on the remote host.

Each element should be a string of the form ENVVARNAME=VALUE.  An
entry ENVVARNAME= disables the corresponding environment variable,
which might have been set in the init files like ~/.profile.

Special handling is applied to some environment variables,
which should not be set here:

The PATH environment variable should be set via `tramp-remote-path'.

The TERM environment variable should be set via `tramp-terminal-type'.

The INSIDE_EMACS environment variable will automatically be set
based on the Tramp and Emacs versions, and should not be set here."
                :default-value '("ENV=''" "TMOUT=0" "LC_CTYPE=''" "CDPATH=" "HISTORY=" "MAIL=" "MAILCHECK=" "MAILPATH=" "PAGER=cat" "autocorrect=" "correct="))
                nil [20822 21686])
            ("tramp-sh-extra-args" variable
               (:documentation "Alist specifying extra arguments to pass to the remote shell.
Entries are (REGEXP . ARGS) where REGEXP is a regular expression
matching the shell file name and ARGS is a string specifying the
arguments.

This variable is only used when Tramp needs to start up another shell
for tilde expansion.  The extra arguments should typically prevent the
shell from reading its init file."
                :default-value '(("/bash\\'" . "-norc -noprofile")))
                nil [21709 22229])
            ("tramp-actions-before-shell" variable
               (:documentation "List of pattern/action pairs.
Whenever a pattern matches, the corresponding action is performed.
Each item looks like (PATTERN ACTION).

The PATTERN should be a symbol, a variable.  The value of this
variable gives the regular expression to search for.  Note that the
regexp must match at the end of the buffer, \"\\'\" is implicitly
appended to it.

The ACTION should also be a symbol, but a function.  When the
corresponding PATTERN matches, the ACTION function is called."
                :constant-flag t
                :default-value '((tramp-login-prompt-regexp tramp-action-login) (tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (shell-prompt-pattern tramp-action-succeed) (tramp-shell-prompt-pattern tramp-action-succeed) (tramp-yesno-prompt-regexp tramp-action-yesno) (tramp-yn-prompt-regexp tramp-action-yn) (tramp-terminal-prompt-regexp tramp-action-terminal) (tramp-process-alive-regexp tramp-action-process-alive)))
                nil [22231 23234])
            ("tramp-actions-copy-out-of-band" variable
               (:documentation "List of pattern/action pairs.
This list is used for copying/renaming with out-of-band methods.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-copy-failed-regexp tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-out-of-band)))
                nil [23236 23666])
            ("tramp-uudecode" variable
               (:documentation "Shell function to implement `uudecode' to standard output.
Many systems support `uudecode -o /dev/stdout' or `uudecode -o -'
for this or `uudecode -p', but some systems don't, and for them
we have this shell function."
                :constant-flag t
                :default-value "(echo begin 600 %t; tail -n +2) | uudecode
cat %t
rm -f %t")
                nil [23668 23978])
            ("tramp-perl-file-truename" variable
               (:documentation "Perl script to produce output suitable for use with `file-truename'
on the remote file system.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
use File::Spec;
use Cwd \"realpath\";

sub myrealpath {
    my ($file) = @_;
    return realpath($file) if (-e $file || -l $file);
}

sub recursive {
    my ($volume, @dirs) = @_;
    my $real = myrealpath(File::Spec->catpath(
                   $volume, File::Spec->catdir(@dirs), \"\"));
    if ($real) {
        my ($vol, $dir) = File::Spec->splitpath($real, 1);
        return ($vol, File::Spec->splitdir($dir));
    }
    else {
        my $last = pop(@dirs);
        ($volume, @dirs) = recursive($volume, @dirs);
        push(@dirs, $last);
        return ($volume, @dirs);
    }
}

$result = myrealpath($ARGV[0]);
if (!$result) {
    my ($vol, $dir) = File::Spec->splitpath($ARGV[0], 1);
    ($vol, @dirs) = recursive($vol, File::Spec->splitdir($dir));

    $result = File::Spec->catpath($vol, File::Spec->catdir(@dirs), \"\");
}

$result =~ s/\"/\\\\\"/g;
print \"\\\"$result\\\"\\n\";
' \"$1\" 2>/dev/null")
                nil [23980 25175])
            ("tramp-perl-file-name-all-completions" variable
               (:documentation "Perl script to produce output suitable for use with
`file-name-all-completions' on the remote file system.  Escape
sequence %s is replaced with name of Perl binary.  This string is
passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
opendir(d, $ARGV[0]) || die(\"$ARGV[0]: $!\\nfail\\n\");
@files = readdir(d); closedir(d);
foreach $f (@files) {
 if (-d \"$ARGV[0]/$f\") {
  print \"$f/\\n\";
 }
 else {
  print \"$f\\n\";
 }
}
print \"ok\\n\"
' \"$1\" 2>/dev/null")
                nil [25177 25715])
            ("tramp-perl-file-attributes" variable
               (:documentation "Perl script to produce output suitable for use with `file-attributes'
on the remote file system.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
@stat = lstat($ARGV[0]);
if (!@stat) {
    print \"nil\\n\";
    exit 0;
}
if (($stat[2] & 0170000) == 0120000)
{
    $type = readlink($ARGV[0]);
    $type =~ s/\"/\\\\\"/g;
    $type = \"\\\"$type\\\"\";
}
elsif (($stat[2] & 0170000) == 040000)
{
    $type = \"t\";
}
else
{
    $type = \"nil\"
};
$uid = ($ARGV[1] eq \"integer\") ? $stat[4] : \"\\\"\" . getpwuid($stat[4]) . \"\\\"\";
$gid = ($ARGV[1] eq \"integer\") ? $stat[5] : \"\\\"\" . getgrgid($stat[5]) . \"\\\"\";
printf(
    \"(%%s %%u %%s %%s (%%u %%u) (%%u %%u) (%%u %%u) %%u %%u t %%u -1)\\n\",
    $type,
    $stat[3],
    $uid,
    $gid,
    $stat[8] >> 16 & 0xffff,
    $stat[8] & 0xffff,
    $stat[9] >> 16 & 0xffff,
    $stat[9] & 0xffff,
    $stat[10] >> 16 & 0xffff,
    $stat[10] & 0xffff,
    $stat[7],
    $stat[2],
    $stat[1]
);' \"$1\" \"$2\" 2>/dev/null")
                nil [26063 27181])
            ("tramp-perl-directory-files-and-attributes" variable
               (:documentation "Perl script implementing `directory-files-attributes' as Lisp `read'able
output.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
chdir($ARGV[0]) or printf(\"\\\"Cannot change to $ARGV[0]: $''!''\\\"\\n\"), exit();
opendir(DIR,\".\") or printf(\"\\\"Cannot open directory $ARGV[0]: $''!''\\\"\\n\"), exit();
@list = readdir(DIR);
closedir(DIR);
$n = scalar(@list);
printf(\"(\\n\");
for($i = 0; $i < $n; $i++)
{
    $filename = $list[$i];
    @stat = lstat($filename);
    if (($stat[2] & 0170000) == 0120000)
    {
        $type = readlink($filename);
        $type =~ s/\"/\\\\\"/g;
        $type = \"\\\"$type\\\"\";
    }
    elsif (($stat[2] & 0170000) == 040000)
    {
        $type = \"t\";
    }
    else
    {
        $type = \"nil\"
    };
    $uid = ($ARGV[1] eq \"integer\") ? $stat[4] : \"\\\"\" . getpwuid($stat[4]) . \"\\\"\";
    $gid = ($ARGV[1] eq \"integer\") ? $stat[5] : \"\\\"\" . getgrgid($stat[5]) . \"\\\"\";
    $filename =~ s/\"/\\\\\"/g;
    printf(
        \"(\\\"%%s\\\" %%s %%u %%s %%s (%%u %%u) (%%u %%u) (%%u %%u) %%u.0 %%u t (%%u . %%u) (%%u . %%u))\\n\",
        $filename,
        $type,
        $stat[3],
        $uid,
        $gid,
        $stat[8] >> 16 & 0xffff,
        $stat[8] & 0xffff,
        $stat[9] >> 16 & 0xffff,
        $stat[9] & 0xffff,
        $stat[10] >> 16 & 0xffff,
        $stat[10] & 0xffff,
        $stat[7],
        $stat[2],
        $stat[1] >> 16 & 0xffff,
        $stat[1] & 0xffff,
        $stat[0] >> 16 & 0xffff,
        $stat[0] & 0xffff);
}
printf(\")\\n\");' \"$1\" \"$2\" 2>/dev/null")
                nil [27183 28892])
            ("tramp-perl-encode-with-module" variable
               (:documentation "Perl program to use for encoding a file.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled.
This implementation requires the MIME::Base64 Perl module to be installed
on the remote host."
                :constant-flag t
                :default-value "%s -MMIME::Base64 -0777 -ne 'print encode_base64($_)' 2>/dev/null")
                nil [28928 29311])
            ("tramp-perl-decode-with-module" variable
               (:documentation "Perl program to use for decoding a file.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled.
This implementation requires the MIME::Base64 Perl module to be installed
on the remote host."
                :constant-flag t
                :default-value "%s -MMIME::Base64 -0777 -ne 'print decode_base64($_)' 2>/dev/null")
                nil [29313 29696])
            ("tramp-perl-encode" variable
               (:documentation "Perl program to use for encoding a file.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
# This script contributed by Juanma Barranquero <lektu@terra.es>.
# Copyright (C) 2002-2018 Free Software Foundation, Inc.
use strict;

my %%trans = do {
    my $i = 0;
    map {(substr(unpack(q(B8), chr $i++), 2, 6), $_)}
      split //, q(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/);
};
my $data;

# We read in chunks of 54 bytes, to generate output lines
# of 72 chars (plus end of line)
while (read STDIN, $data, 54) {
    my $pad = q();

    # Only for the last chunk, and only if did not fill the last three-byte packet
    if (eof) {
        my $mod = length($data) %% 3;
        $pad = q(=) x (3 - $mod) if $mod;
    }

    # Not the fastest method, but it is simple: unpack to binary string, split
    # by groups of 6 bits and convert back from binary to byte; then map into
    # the translation table
    print
      join q(),
        map($trans{$_},
            (substr(unpack(q(B*), $data) . q(00000), 0, 432) =~ /....../g)),
              $pad,
                qq(\\n);
}' 2>/dev/null")
                nil [29698 30939])
            ("tramp-perl-decode" variable
               (:documentation "Perl program to use for decoding a file.
Escape sequence %s is replaced with name of Perl binary.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "%s -e '
# This script contributed by Juanma Barranquero <lektu@terra.es>.
# Copyright (C) 2002-2018 Free Software Foundation, Inc.
use strict;

my %%trans = do {
    my $i = 0;
    map {($_, substr(unpack(q(B8), chr $i++), 2, 6))}
      split //, q(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/)
};

my %%bytes = map {(unpack(q(B8), chr $_), chr $_)} 0 .. 255;

binmode(\\*STDOUT);

# We are going to accumulate into $pending to accept any line length
# (we do not check they are <= 76 chars as the RFC says)
my $pending = q();

while (my $data = <STDIN>) {
    chomp $data;

    # If we find one or two =, we have reached the end and
    # any following data is to be discarded
    my $finished = $data =~ s/(==?).*/$1/;
    $pending .= $data;

    my $len = length($pending);
    my $chunk = substr($pending, 0, $len & ~3);
    $pending = substr($pending, $len & ~3 + 1);

    # Easy method: translate from chars to (pregenerated) six-bit packets, join,
    # split in 8-bit chunks and convert back to char.
    print join q(),
      map $bytes{$_},
        ((join q(), map {$trans{$_} || q()} split //, $chunk) =~ /......../g);

    last if $finished;
}' 2>/dev/null")
                nil [30941 32341])
            ("tramp-perl-pack" variable
               (:documentation "Perl program to use for encoding a file.
Escape sequence %s is replaced with name of Perl binary."
                :constant-flag t
                :default-value "%s -e 'binmode STDIN; binmode STDOUT; print pack(q{u*}, join q{}, <>)'")
                nil [32343 32546])
            ("tramp-perl-unpack" variable
               (:documentation "Perl program to use for decoding a file.
Escape sequence %s is replaced with name of Perl binary."
                :constant-flag t
                :default-value "%s -e 'binmode STDIN; binmode STDOUT; print unpack(q{u*}, join q{}, <>)'")
                nil [32548 32755])
            ("tramp-awk-encode" variable
               (:documentation "Awk program to use for encoding a file.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "od -v -t x1 -A n | busybox awk '\\
BEGIN {
  b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"
  b16 = \"0123456789abcdef\"
}
{
  for (c=1; c<=length($0); c++) {
    d=index(b16, substr($0,c,1))
    if (d--) {
      for (b=1; b<=4; b++) {
        o=o*2+int(d/8); d=(d*2)%%16
        if (++obc==6) {
          printf substr(b64,o+1,1)
          if (++rc>75) { printf \"\\n\"; rc=0 }
          obc=0; o=0
        }
      }
    }
  }
}
END {
  if (obc) {
    tail=(obc==2) ? \"==\\n\" : \"=\\n\"
    while (obc++<6) { o=o*2 }
    printf \"%%c\", substr(b64,o+1,1)
  } else {
    tail=\"\\n\"
  }
  printf tail
}'")
                nil [32757 33544])
            ("tramp-awk-decode" variable
               (:documentation "Awk program to use for decoding a file.
This string is passed to `format', so percent characters need to be doubled."
                :constant-flag t
                :default-value "busybox awk '\\
BEGIN {
  b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"
}
{
  for (i=1; i<=length($0); i++) {
    c=index(b64, substr($0,i,1))
    if(c--) {
      for(b=0; b<6; b++) {
        o=o*2+int(c/32); c=(c*2)%%64
        if(++obc==8) {
          if (o) {
            printf \"%%c\", o
          } else {
            system(\"dd if=/dev/zero bs=1 count=1 2>/dev/null\")
          }
          obc=0; o=0
        }
      }
    }
  }
}'")
                nil [33546 34168])
            ("tramp-awk-coding-test" variable
               (:documentation "Test command for checking `tramp-awk-encode' and `tramp-awk-decode'."
                :constant-flag t
                :default-value "test -c /dev/zero && od -v -t x1 -A n </dev/null && busybox awk '{}' </dev/null")
                nil [34170 34363])
            ("tramp-stat-marker" variable
               (:documentation "Marker in stat commands for file attributes."
                :constant-flag t
                :default-value "/////")
                nil [34365 34450])
            ("tramp-stat-quoted-marker" variable
               (:documentation "Quoted marker in stat commands for file attributes."
                :constant-flag t
                :default-value "\\/\\/\\/\\/\\/")
                nil [34452 34561])
            ("tramp-vc-registered-read-file-names" variable
               (:documentation "Script to check existence of VC related files.
It must be send formatted with two strings; the tests for file
existence, and file readability.  Input shall be read via
here-document, otherwise the command could exceed maximum length
of command line."
                :constant-flag t
                :default-value "echo \"(\"
while read file; do
    quoted=`echo \"$file\" | sed -e \"s/\\\"/\\\\\\\\\\\\\\\\\\\"/\"`
    if %s \"$file\"; then
	echo \"(\\\"$quoted\\\" \\\"file-exists-p\\\" t)\"
    else
	echo \"(\\\"$quoted\\\" \\\"file-exists-p\\\" nil)\"
    fi
    if %s \"$file\"; then
	echo \"(\\\"$quoted\\\" \\\"file-readable-p\\\" t)\"
    else
	echo \"(\\\"$quoted\\\" \\\"file-readable-p\\\" nil)\"
    fi
done
echo \")\"")
                nil [34563 35284])
            ("tramp-sh-file-name-handler-alist" variable
               (:documentation "Alist of handler functions.
Operations not mentioned here will be handled by the normal Emacs functions."
                :constant-flag t
                :default-value '((add-name-to-file . tramp-sh-handle-add-name-to-file) (copy-directory . tramp-sh-handle-copy-directory) (copy-file . tramp-sh-handle-copy-file) (delete-directory . tramp-sh-handle-delete-directory) (delete-file . tramp-sh-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-sh-handle-directory-files-and-attributes) (dired-compress-file . tramp-sh-handle-dired-compress-file) (dired-uncache . tramp-handle-dired-uncache) (exec-path . tramp-sh-handle-exec-path) (expand-file-name . tramp-sh-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . tramp-sh-handle-file-acl) (file-attributes . tramp-sh-handle-file-attributes) (file-directory-p . tramp-sh-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-sh-handle-file-executable-p) (file-exists-p . tramp-sh-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-sh-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-sh-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-sh-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-sh-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . tramp-sh-handle-file-ownership-preserved-p) (file-readable-p . tramp-sh-handle-file-readable-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-sh-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-sh-handle-file-system-info) (file-truename . tramp-sh-handle-file-truename) (file-writable-p . tramp-sh-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-sh-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-sh-handle-make-directory) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-sh-handle-make-symbolic-link) (process-file . tramp-sh-handle-process-file) (rename-file . tramp-sh-handle-rename-file) (set-file-acl . tramp-sh-handle-set-file-acl) (set-file-modes . tramp-sh-handle-set-file-modes) (set-file-selinux-context . tramp-sh-handle-set-file-selinux-context) (set-file-times . tramp-sh-handle-set-file-times) (set-visited-file-modtime . tramp-sh-handle-set-visited-file-modtime) (shell-command . tramp-handle-shell-command) (start-file-process . tramp-sh-handle-start-file-process) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . tramp-sh-handle-vc-registered) (verify-visited-file-modtime . tramp-sh-handle-verify-visited-file-modtime) (write-region . tramp-sh-handle-write-region)))
                nil [35345 39696])
            ("tramp-sh-handle-make-symbolic-link" function
               (:documentation "Like `make-symbolic-link' for Tramp files.
If TARGET is a non-Tramp file, it is used verbatim as the target
of the symlink.  If TARGET is a Tramp file, only the localname
component is used as the target of the symlink."
                :arguments ("target" "linkname" "ok-if-already-exists"))
                nil [39732 42270])
            ("tramp-sh-handle-file-truename" function
               (:documentation "Like `file-truename' for Tramp files."
                :arguments ("filename"))
                nil [42272 46132])
            ("tramp-sh-handle-file-exists-p" function
               (:documentation "Like `file-exists-p' for Tramp files."
                :arguments ("filename"))
                nil [46155 46724])
            ("tramp-sh-handle-file-attributes" function
               (:documentation "Like `file-attributes' for Tramp files."
                :arguments ("filename" "id-format"))
                nil [46726 47610])
            ("tramp-sh--quoting-style-options" function (:arguments ("vec")) nil [47612 47796])
            ("tramp-do-file-attributes-with-ls" function
               (:documentation "Implement `file-attributes' for Tramp files using the ls(1) command."
                :arguments ("vec" "localname" "id-format"))
                nil [47798 51823])
            ("tramp-do-file-attributes-with-perl" function
               (:documentation "Implement `file-attributes' for Tramp files using a Perl script."
                :arguments ("vec" "localname" "id-format"))
                nil [51825 52270])
            ("tramp-do-file-attributes-with-stat" function
               (:documentation "Implement `file-attributes' for Tramp files using stat(1) command."
                :arguments ("vec" "localname" "id-format"))
                nil [52272 53539])
            ("tramp-sh-handle-set-visited-file-modtime" function
               (:documentation "Like `set-visited-file-modtime' for Tramp files."
                :arguments ("time-list"))
                nil [53541 54832])
            ("tramp-sh-handle-verify-visited-file-modtime" function
               (:documentation "Like `verify-visited-file-modtime' for Tramp files.
At the time `verify-visited-file-modtime' calls this function, we
already know that the buffer is visiting a file and that
`visited-file-modtime' does not return 0.  Do not call this
function directly, unless those two cases are already taken care
of."
                :arguments ("buf"))
                nil [54927 56825])
            ("tramp-sh-handle-set-file-modes" function
               (:documentation "Like `set-file-modes' for Tramp files."
                :arguments ("filename" "mode"))
                nil [56827 57302])
            ("tramp-sh-handle-set-file-times" function
               (:documentation "Like `set-file-times' for Tramp files."
                :arguments ("filename" "time"))
                nil [57304 57988])
            ("tramp-set-file-uid-gid" function
               (:documentation "Set the ownership for FILENAME.
If UID and GID are provided, these values are used; otherwise uid
and gid of the corresponding user is taken.  Both parameters must
be non-negative integers."
                :arguments ("filename" "uid" "gid"))
                nil [57990 59578])
            ("tramp-remote-selinux-p" function
               (:documentation "Check, whether SELINUX is enabled on the remote host."
                :arguments ("vec"))
                nil [59580 59812])
            ("tramp-sh-handle-file-selinux-context" function
               (:documentation "Like `file-selinux-context' for Tramp files."
                :arguments ("filename"))
                nil [59814 60658])
            ("tramp-sh-handle-set-file-selinux-context" function
               (:documentation "Like `set-file-selinux-context' for Tramp files."
                :arguments ("filename" "context"))
                nil [60660 61639])
            ("tramp-remote-acl-p" function
               (:documentation "Check, whether ACL is enabled on the remote host."
                :arguments ("vec"))
                nil [61641 61856])
            ("tramp-sh-handle-file-acl" function
               (:documentation "Like `file-acl' for Tramp files."
                :arguments ("filename"))
                nil [61858 62389])
            ("tramp-sh-handle-set-file-acl" function
               (:documentation "Like `set-file-acl' for Tramp files."
                :arguments ("filename" "acl-string"))
                nil [62391 63076])
            ("tramp-sh-handle-file-executable-p" function
               (:documentation "Like `file-executable-p' for Tramp files."
                :arguments ("filename"))
                nil [63125 63525])
            ("tramp-sh-handle-file-readable-p" function
               (:documentation "Like `file-readable-p' for Tramp files."
                :arguments ("filename"))
                nil [63527 63921])
            ("tramp-sh-handle-file-newer-than-file-p" function
               (:documentation "Like `file-newer-than-file-p' for Tramp files."
                :arguments ("file1" "file2"))
                nil [64234 65748])
            ("tramp-sh-handle-file-directory-p" function
               (:documentation "Like `file-directory-p' for Tramp files."
                :arguments ("filename"))
                nil [65809 66339])
            ("tramp-sh-handle-file-writable-p" function
               (:documentation "Like `file-writable-p' for Tramp files."
                :arguments ("filename"))
                nil [66341 66951])
            ("tramp-sh-handle-file-ownership-preserved-p" function
               (:documentation "Like `file-ownership-preserved-p' for Tramp files."
                :arguments ("filename" "group"))
                nil [66953 67637])
            ("tramp-sh-handle-directory-files-and-attributes" function
               (:documentation "Like `directory-files-and-attributes' for Tramp files."
                :arguments ("directory" "full" "match" "nosort" "id-format"))
                nil [67663 69038])
            ("tramp-do-directory-files-and-attributes-with-perl" function
               (:documentation "Implement `directory-files-and-attributes' for Tramp files using a Perl script."
                :arguments ("vec" "localname" "id-format"))
                nil [69040 69673])
            ("tramp-do-directory-files-and-attributes-with-stat" function
               (:documentation "Implement `directory-files-and-attributes' for Tramp files using stat(1) command."
                :arguments ("vec" "localname" "id-format"))
                nil [69675 71121])
            ("tramp-sh-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for Tramp files."
                :arguments ("filename" "directory"))
                nil [71201 73423])
            ("tramp-sh-handle-add-name-to-file" function
               (:documentation "Like `add-name-to-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [73443 74738])
            ("tramp-sh-handle-copy-file" function
               (:documentation "Like `copy-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes"))
                nil [74740 75384])
            ("tramp-sh-handle-copy-directory" function
               (:documentation "Like `copy-directory' for Tramp files."
                :arguments ("dirname" "newname" "keep-date" "parents" "copy-contents"))
                nil [75386 77185])
            ("tramp-sh-handle-rename-file" function
               (:documentation "Like `rename-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [77187 77850])
            ("tramp-do-copy-or-rename-file" function
               (:documentation "Copy or rename a remote file.
OP must be `copy' or `rename' and indicates the operation to perform.
FILENAME specifies the file to copy or rename, NEWNAME is the name of
the new file (for copy) or the new name of the file (for rename).
OK-IF-ALREADY-EXISTS means don't barf if NEWNAME exists already.
KEEP-DATE means to make sure that NEWNAME has the same timestamp
as FILENAME.  PRESERVE-UID-GID, when non-nil, instructs to keep
the uid and gid if both files are on the same host.
PRESERVE-EXTENDED-ATTRIBUTES activates selinux and acl commands.

This function is invoked by `tramp-sh-handle-copy-file' and
`tramp-sh-handle-rename-file'.  It is an error if OP is neither
of `copy' and `rename'.  FILENAME and NEWNAME must be absolute
file names."
                :arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes"))
                nil [77852 82523])
            ("tramp-do-copy-or-rename-file-via-buffer" function
               (:documentation "Use an Emacs buffer to copy or rename a file.
First arg OP is either `copy' or `rename' and indicates the operation.
FILENAME is the source file, NEWNAME the target file.
KEEP-DATE is non-nil if NEWNAME should have the same timestamp as FILENAME."
                :arguments ("op" "filename" "newname" "keep-date"))
                nil [82525 84273])
            ("tramp-do-copy-or-rename-file-directly" function
               (:documentation "Invokes `cp' or `mv' on the remote system.
OP must be one of `copy' or `rename', indicating `cp' or `mv',
respectively.  FILENAME specifies the file to copy or rename,
NEWNAME is the name of the new file (for copy) or the new name of
the file (for rename).  Both files must reside on the same host.
KEEP-DATE means to make sure that NEWNAME has the same timestamp
as FILENAME.  PRESERVE-UID-GID, when non-nil, instructs to keep
the uid and gid from FILENAME."
                :arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid"))
                nil [84275 89757])
            ("tramp-do-copy-or-rename-file-out-of-band" function
               (:documentation "Invoke `scp' program to copy.
The method used must be an out-of-band method."
                :arguments ("op" "filename" "newname" "keep-date"))
                nil [89759 97377])
            ("tramp-sh-handle-make-directory" function
               (:documentation "Like `make-directory' for Tramp files."
                :arguments ("dir" "parents"))
                nil [97379 98010])
            ("tramp-sh-handle-delete-directory" function
               (:documentation "Like `delete-directory' for Tramp files."
                :arguments ("directory" "recursive" "trash"))
                nil [98012 98581])
            ("tramp-sh-handle-delete-file" function
               (:documentation "Like `delete-file' for Tramp files."
                :arguments ("filename" "trash"))
                nil [98583 99085])
            ("tramp-sh-handle-dired-compress-file" function
               (:documentation "Like `dired-compress-file' for Tramp files."
                :arguments ("file"))
                nil [99098 100575])
            ("tramp-sh-handle-insert-directory" function
               (:documentation "Like `insert-directory' for Tramp files."
                :arguments ("filename" "switches" "wildcard" "full-directory-p"))
                nil [100577 105440])
            ("tramp-sh-handle-expand-file-name" function
               (:documentation "Like `expand-file-name' for Tramp files.
If the localname part of the given file name starts with \"/../\" then
the result will be a local, non-Tramp, file name."
                :arguments ("name" "dir"))
                nil [105478 108151])
            ("tramp-process-sentinel" function
               (:documentation "Flush file caches."
                :arguments ("proc" "event"))
                nil [108175 108498])
            ("tramp-sh-handle-start-file-process" function
               (:documentation "Like `start-file-process' for Tramp files."
                :arguments ("name" "buffer" "program" "args"))
                nil [108662 113862])
            ("tramp-sh-handle-process-file" function
               (:documentation "Like `process-file' for Tramp files."
                :arguments ("program" "infile" "destination" "display" "args"))
                nil [113864 118348])
            ("tramp-sh-handle-exec-path" function (:documentation "Like `exec-path' for Tramp files.") nil [118350 118600])
            ("tramp-sh-handle-file-local-copy" function
               (:documentation "Like `file-local-copy' for Tramp files."
                :arguments ("filename"))
                nil [118602 121493])
            ("tramp-sh-handle-write-region" function
               (:documentation "Like `write-region' for Tramp files."
                :arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew"))
                nil [121516 130819])
            ("tramp-vc-registered-file-names" variable (:documentation "List used to collect file names, which are checked during `vc-registered'.") nil [130821 130943])
            ("tramp-sh-handle-vc-registered" function
               (:documentation "Like `vc-registered' for Tramp files."
                :arguments ("file"))
                nil [131779 135213])
            ("tramp-sh-file-name-handler" function
               (:documentation "Invoke remote-shell Tramp file name handler.
Fall back to normal file name handler if no Tramp handler exists."
                :arguments ("operation" "args"))
                nil [135236 135573])
            ("tramp-register-foreign-file-name-handler" code nil nil [135663 135752])
            ("tramp-vc-file-name-handler" function
               (:documentation "Invoke special file name handler, which collects files to be handled."
                :arguments ("operation" "args"))
                nil [135754 136952])
            ("tramp-sh-handle-file-notify-add-watch" function
               (:documentation "Like `file-notify-add-watch' for Tramp files."
                :arguments ("file-name" "flags" "_callback"))
                nil [136954 140153])
            ("tramp-sh-gio-monitor-process-filter" function
               (:documentation "Read output from \"gio monitor\" and add corresponding file-notify events."
                :arguments ("proc" "string"))
                nil [140155 142464])
            ("tramp-sh-gvfs-monitor-dir-process-filter" function
               (:documentation "Read output from \"gvfs-monitor-dir\" and add corresponding file-notify events."
                :arguments ("proc" "string"))
                nil [142466 144551])
            ("tramp-sh-inotifywait-process-filter" function
               (:documentation "Read output from \"inotifywait\" and add corresponding file-notify events."
                :arguments ("proc" "string"))
                nil [144553 145821])
            ("tramp-sh-handle-file-system-info" function
               (:documentation "Like `file-system-info' for Tramp files."
                :arguments ("filename"))
                nil [145823 146740])
            ("tramp-maybe-send-script" function
               (:documentation "Define in remote shell function NAME implemented as SCRIPT.
Only send the definition if it has not already been done."
                :arguments ("vec" "script" "name"))
                nil [146767 147952])
            ("tramp-run-test" function
               (:documentation "Run `test' on the remote system, given a SWITCH and a FILENAME.
Returns the exit code of the `test' program."
                :arguments ("switch" "filename"))
                nil [147954 148316])
            ("tramp-run-test2" function
               (:documentation "Run `test'-like program on the remote system, given FILE1, FILE2.
FORMAT-STRING contains the program name, switches, and place holders.
Returns the exit code of the `test' program.  Barfs if the methods,
hosts, or files, disagree."
                :arguments ("format-string" "file1" "file2"))
                nil [148318 149102])
            ("tramp-find-executable" function
               (:documentation "Searches for PROGNAME in $PATH and all directories mentioned in DIRLIST.
First arg VEC specifies the connection, PROGNAME is the program
to search for, and DIRLIST gives the list of directories to
search.  If IGNORE-TILDE is non-nil, directory names starting
with `~' will be ignored. If IGNORE-PATH is non-nil, searches
only in DIRLIST.

Returns the absolute file name of PROGNAME, if found, and nil otherwise.

This function expects to be in the right *tramp* buffer."
                :arguments ("vec" "progname" "dirlist" "ignore-tilde" "ignore-path"))
                nil [149104 151176])
            ("tramp-set-remote-path" function
               (:documentation "Sets the remote environment PATH to existing directories.
I.e., for each directory in `tramp-remote-path', it is tested
whether it exists and if so, it is added to the environment
variable PATH."
                :arguments ("vec"))
                nil [151178 151597])
            ("tramp-find-file-exists-command" function
               (:documentation "Find a command on the remote host for checking if a file exists.
Here, we are looking for a command which has zero exit status if the
file exists and nonzero exit status otherwise."
                :arguments ("vec"))
                nil [151771 154324])
            ("tramp-open-shell" function
               (:documentation "Opens shell SHELL."
                :arguments ("vec" "shell"))
                nil [154326 156991])
            ("tramp-find-shell" function
               (:documentation "Opens a shell on the remote host which groks tilde expansion."
                :arguments ("vec"))
                nil [156993 158427])
            ("tramp-barf-if-no-shell-prompt" function
               (:documentation "Wait for shell prompt and barf if none appears.
Looks at process PROC to see if a shell prompt appears in TIMEOUT
seconds.  If not, it produces an error message with the given ERROR-ARGS."
                :arguments ("proc" "timeout" "error-args"))
                nil [158452 159053])
            ("tramp-open-connection-setup-interactive-shell" function
               (:documentation "Set up an interactive shell.
Mainly sets the prompt and the echo correctly.  PROC is the shell
process to set up.  VEC specifies the connection."
                :arguments ("proc" "vec"))
                nil [159055 165857])
            ("uudecode-decode-region" function (:prototype-flag t) nil [166492 166537])
            ("tramp-local-coding-commands" variable
               (:documentation "List of local coding commands for inline transfer.
Each item is a list that looks like this:

(FORMAT ENCODING DECODING)

FORMAT is  symbol describing the encoding/decoding format.  It can be
`b64' for base64 encoding, `uu' for uu encoding, or `pack' for simple packing.

ENCODING and DECODING can be strings, giving commands, or symbols,
giving functions.  If they are strings, then they can contain
the \"%s\" format specifier.  If that specifier is present, the input
file name will be put into the command line at that spot.  If the
specifier is not present, the input should be read from standard
input.

If they are functions, they will be called with two arguments, start
and end of region, and are expected to replace the region contents
with the encoded or decoded results, respectively."
                :constant-flag t
                :default-value `((b64 base64-encode-region base64-decode-region) (uu tramp-uuencode-region uudecode-decode-region) (pack ,(format tramp-perl-pack "perl") ,(format tramp-perl-unpack "perl"))))
                nil [166539 167566])
            ("tramp-remote-coding-commands" variable
               (:documentation "List of remote coding commands for inline transfer.
Each item is a list that looks like this:

(FORMAT ENCODING DECODING [TEST])

FORMAT is a symbol describing the encoding/decoding format.  It can be
`b64' for base64 encoding, `uu' for uu encoding, or `pack' for simple packing.

ENCODING and DECODING can be strings, giving commands, or symbols,
giving variables.  If they are strings, then they can contain
the \"%s\" format specifier.  If that specifier is present, the input
file name will be put into the command line at that spot.  If the
specifier is not present, the input should be read from standard
input.

If they are variables, this variable is a string containing a
Perl or Shell implementation for this functionality.  This
program will be transferred to the remote host, and it is
available as shell function with the same name.  A \"%t\" format
specifier in the variable value denotes a temporary file.

The optional TEST command can be used for further tests, whether
ENCODING and DECODING are applicable."
                :constant-flag t
                :default-value `((b64 "base64" "base64 -d -i") (b64 "base64" "base64 -d") (b64 "openssl enc -base64" "openssl enc -d -base64") (b64 "mimencode -b" "mimencode -u -b") (b64 "mmencode -b" "mmencode -u -b") (b64 "recode data..base64" "recode base64..data") (b64 tramp-perl-encode-with-module tramp-perl-decode-with-module) (b64 tramp-perl-encode tramp-perl-decode) (b64 tramp-awk-encode tramp-awk-decode ,tramp-awk-coding-test) (uu "uuencode xxx" "uudecode -o /dev/stdout" "test -c /dev/stdout") (uu "uuencode xxx" "uudecode -o -") (uu "uuencode xxx" "uudecode -p") (uu "uuencode xxx" tramp-uudecode) (pack tramp-perl-pack tramp-perl-unpack)))
                nil [167568 169527])
            ("tramp-find-inline-encoding" function
               (:documentation "Find an inline transfer encoding that works.
Goes through the list `tramp-local-coding-commands' and
`tramp-remote-coding-commands'."
                :arguments ("vec"))
                nil [169529 174506])
            ("tramp-call-local-coding-command" function
               (:documentation "Call the local encoding or decoding command.
If CMD contains \"%s\", provide input file INPUT there in command.
Otherwise, INPUT is passed via standard input.
INPUT can also be nil which means `/dev/null'.
OUTPUT can be a string (which specifies a file name), or t (which
means standard output and thus the current buffer), or nil (which
means discard it)."
                :arguments ("cmd" "input" "output"))
                nil [174508 175222])
            ("tramp-inline-compress-commands" variable
               (:documentation "List of compress and decompress commands for inline transfer.
Each item is a list that looks like this:

(COMPRESS DECOMPRESS)

COMPRESS or DECOMPRESS are strings with the respective commands."
                :constant-flag t
                :default-value '(("gzip" "gzip -d") ("bzip2" "bzip2 -d") ("xz" "xz -d") ("compress" "compress -d")))
                nil [175224 175562])
            ("tramp-find-inline-compress" function
               (:documentation "Find an inline transfer compress command that works.
Goes through the list `tramp-inline-compress-commands'."
                :arguments ("vec"))
                nil [175564 177542])
            ("tramp-compute-multi-hops" function
               (:documentation "Expands VEC according to `tramp-default-proxies-alist'."
                :arguments ("vec"))
                nil [177544 180756])
            ("tramp-ssh-controlmaster-options" function
               (:documentation "Return the Control* arguments of the local ssh."
                :arguments ("vec"))
                nil [180758 182587])
            ("tramp-maybe-open-connection" function
               (:documentation "Maybe open a connection VEC.
Does not do anything if a connection is already open, but re-opens the
connection if a previous connection has died for some reason."
                :arguments ("vec"))
                nil [182589 191649])
            ("tramp-send-command" function
               (:documentation "Send the COMMAND to connection VEC.
Erases temporary buffer before sending the command.  If optional
arg NEVEROPEN is non-nil, never try to open the connection.  This
is meant to be used from `tramp-maybe-open-connection' only.  The
function waits for output unless NOOUTPUT is set."
                :arguments ("vec" "command" "neveropen" "nooutput"))
                nil [191651 193235])
            ("tramp-wait-for-output" function
               (:documentation "Wait for output from remote command."
                :arguments ("proc" "timeout"))
                nil [193237 194919])
            ("tramp-send-command-and-check" function
               (:documentation "Run COMMAND and check its exit status.
Sends `echo $?' along with the COMMAND for checking the exit status.
If COMMAND is nil, just sends `echo $?'.  Returns t if the exit
status is 0, and nil otherwise.

If the optional argument SUBSHELL is non-nil, the command is
executed in a subshell, ie surrounded by parentheses.  If
DONT-SUPPRESS-ERR is non-nil, stderr won't be sent to /dev/null."
                :arguments ("vec" "command" "subshell" "dont-suppress-err"))
                nil [194921 195997])
            ("tramp-barf-unless-okay" function
               (:documentation "Run COMMAND, check exit status, throw error if exit status not okay.
Similar to `tramp-send-command-and-check' but accepts two more arguments
FMT and ARGS which are passed to `error'."
                :arguments ("vec" "command" "fmt" "args"))
                nil [195999 196348])
            ("tramp-send-command-and-read" function
               (:documentation "Run COMMAND and return the output, which must be a Lisp expression.
If MARKER is a regexp, read the output after that string.
In case there is no valid Lisp expression and NOERROR is nil, it
raises an error."
                :arguments ("vec" "command" "noerror" "marker"))
                nil [196350 197480])
            ("tramp-convert-file-attributes" function
               (:documentation "Convert `file-attributes' ATTR generated by perl script, stat or ls.
Convert file mode bits to string and set virtual device number.
Return ATTR."
                :arguments ("vec" "attr"))
                nil [197482 201132])
            ("tramp-shell-case-fold" function
               (:documentation "Converts STRING to shell glob pattern which ignores case."
                :arguments ("string"))
                nil [201134 201391])
            ("tramp-make-copy-program-file-name" function
               (:documentation "Create a file name suitable for `scp', `pscp', or `nc' and workalikes."
                :arguments ("vec"))
                nil [201393 202164])
            ("tramp-method-out-of-band-p" function
               (:documentation "Return t if this is an out-of-band method, nil otherwise."
                :arguments ("vec" "size"))
                nil [202166 202709])
            ("tramp-get-remote-path" function
               (:documentation "Compile list of remote directories for $PATH.
Nonexistent directories are removed from spec."
                :arguments ("vec"))
                nil [202746 205338])
            ("tramp-get-remote-locale" function
               (:documentation "Determine remote locale, supporting UTF8 if possible."
                :arguments ("vec"))
                nil [205340 205979])
            ("tramp-get-ls-command" function
               (:documentation "Determine remote `ls' command."
                :arguments ("vec"))
                nil [205981 207100])
            ("tramp-get-ls-command-with" function
               (:documentation "Return OPTION, if the remote `ls' command supports the OPTION option."
                :arguments ("vec" "option"))
                nil [207102 207836])
            ("tramp-get-test-command" function
               (:documentation "Determine remote `test' command."
                :arguments ("vec"))
                nil [207838 208149])
            ("tramp-get-test-nt-command" function
               (:documentation "Check, whether the remote `test' command supports the -nt option."
                :arguments ("vec"))
                nil [208151 208976])
            ("tramp-get-file-exists-command" function
               (:documentation "Determine remote command for file existing check."
                :arguments ("vec"))
                nil [208978 209237])
            ("tramp-get-remote-ln" function
               (:documentation "Determine remote `ln' command."
                :arguments ("vec"))
                nil [209239 209476])
            ("tramp-get-remote-perl" function
               (:documentation "Determine remote `perl' command."
                :arguments ("vec"))
                nil [209478 210362])
            ("tramp-get-remote-stat" function
               (:documentation "Determine remote `stat' command."
                :arguments ("vec"))
                nil [210364 211339])
            ("tramp-get-remote-readlink" function
               (:documentation "Determine remote `readlink' command."
                :arguments ("vec"))
                nil [211341 211752])
            ("tramp-get-remote-trash" function
               (:documentation "Determine remote `trash' command.
This command is returned only if `delete-by-moving-to-trash' is non-nil."
                :arguments ("vec"))
                nil [211754 212114])
            ("tramp-get-remote-touch" function
               (:documentation "Determine remote `touch' command."
                :arguments ("vec"))
                nil [212116 212908])
            ("tramp-get-remote-df" function
               (:documentation "Determine remote `df' command."
                :arguments ("vec"))
                nil [212910 213310])
            ("tramp-get-remote-gio-monitor" function
               (:documentation "Determine remote `gio-monitor' command."
                :arguments ("vec"))
                nil [213312 213590])
            ("tramp-get-remote-gvfs-monitor-dir" function
               (:documentation "Determine remote `gvfs-monitor-dir' command."
                :arguments ("vec"))
                nil [213592 214180])
            ("tramp-get-remote-inotifywait" function
               (:documentation "Determine remote `inotifywait' command."
                :arguments ("vec"))
                nil [214182 214468])
            ("tramp-get-remote-id" function
               (:documentation "Determine remote `id' command."
                :arguments ("vec"))
                nil [214470 214981])
            ("tramp-get-remote-uid-with-id" function
               (:documentation "Implement `tramp-get-remote-uid' for Tramp files using `id'."
                :arguments ("vec" "id-format"))
                nil [214983 215320])
            ("tramp-get-remote-uid-with-perl" function
               (:documentation "Implement `tramp-get-remote-uid' for Tramp files using a Perl script."
                :arguments ("vec" "id-format"))
                nil [215322 215656])
            ("tramp-get-remote-python" function
               (:documentation "Determine remote `python' command."
                :arguments ("vec"))
                nil [215658 216068])
            ("tramp-get-remote-uid-with-python" function
               (:documentation "Implement `tramp-get-remote-uid' for Tramp files using `python'."
                :arguments ("vec" "id-format"))
                nil [216070 216451])
            ("tramp-get-remote-uid" function
               (:documentation "The uid of the remote connection VEC, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("vec" "id-format"))
                nil [216453 217242])
            ("tramp-get-remote-gid-with-id" function
               (:documentation "Implement `tramp-get-remote-gid' for Tramp files using `id'."
                :arguments ("vec" "id-format"))
                nil [217244 217581])
            ("tramp-get-remote-gid-with-perl" function
               (:documentation "Implement `tramp-get-remote-gid' for Tramp files using a Perl script."
                :arguments ("vec" "id-format"))
                nil [217583 217929])
            ("tramp-get-remote-gid-with-python" function
               (:documentation "Implement `tramp-get-remote-gid' for Tramp files using `python'."
                :arguments ("vec" "id-format"))
                nil [217931 218312])
            ("tramp-get-remote-gid" function
               (:documentation "The gid of the remote connection VEC, in ID-FORMAT.
ID-FORMAT valid values are `string' and `integer'."
                :arguments ("vec" "id-format"))
                nil [218314 219103])
            ("tramp-get-env-with-u-option" function
               (:documentation "Check, whether the remote `env' command supports the -u option."
                :arguments ("vec"))
                nil [219105 219466])
            ("tramp-get-inline-compress" function
               (:documentation "Return the compress command related to PROP.
PROP is either `inline-compress' or `inline-decompress'. SIZE is
the length of the file to be compressed.

If no corresponding command is found, nil is returned."
                :arguments ("vec" "prop" "size"))
                nil [219510 220082])
            ("tramp-get-inline-coding" function
               (:documentation "Return the coding command related to PROP.
PROP is either `remote-encoding', `remote-decoding',
`local-encoding' or `local-decoding'.

SIZE is the length of the file to be coded.  Depending on SIZE,
compression might be applied.

If no corresponding command is found, nil is returned.
Otherwise, either a string is returned which contains a `%s' mark
to be used for the respective input or output file; or a Lisp
function cell is returned to be applied on a buffer."
                :arguments ("vec" "prop" "size"))
                nil [220084 223220])
            ("add-hook" code nil nil [223222 223305])
            ("tramp-sh" package nil nil [223307 223326]))          
      :file "tramp-sh.el.gz"
      :pointmax 227669
      :fsize 56946
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1243 . 1244) (symbol 1207 . 1224) (open-paren 1206 . 1207) (close-paren 1161 . 1162) (symbol 1126 . 1143) (open-paren 1125 . 1126)))
    (semanticdb-table "semanticdb-table-213594c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [2298 2314])
            ("time-stamp-string" function (:prototype-flag t) nil [2315 2357])
            ("tramp-cache-data" variable
               (:documentation "Hash table for remote files properties."
                :default-value (make-hash-table :test 'equal))
                nil [2397 2497])
            ("tramp-connection-properties" variable (:documentation "List of static connection properties.
Every entry has the form (REGEXP PROPERTY VALUE).  The regexp
matches remote file names.  It can be nil.  PROPERTY is a string,
and VALUE the corresponding value.  They are used, if there is no
matching entry for PROPERTY in `tramp-cache-data'.  For more
details see the info pages.") nil [2520 3095])
            ("tramp-persistency-file-name" variable
               (:documentation "File which keeps connection history for Tramp connections."
                :default-value (expand-file-name (locate-user-emacs-file "tramp")))
                nil [3118 3304])
            ("tramp-cache-data-changed" variable (:documentation "Whether persistent cache data have been changed.") nil [3306 3396])
            ("tramp-get-hash-table" function
               (:documentation "Returns the hash table for KEY.
If it doesn't exist yet, it is created and initialized with
matching entries of `tramp-connection-properties'."
                :arguments ("key"))
                nil [3398 3961])
            ("tramp-get-file-property" function
               (:documentation "Get the PROPERTY of FILE from the cache context of KEY.
Returns DEFAULT if not set."
                :arguments ("key" "file" "property" "default"))
                nil [3984 5411])
            ("tramp-set-file-property" function
               (:documentation "Set the PROPERTY of FILE to VALUE, in the cache context of KEY.
Returns VALUE."
                :arguments ("key" "file" "property" "value"))
                nil [5434 6320])
            ("tramp-flush-file-property" function
               (:documentation "Remove PROPERTY of FILE in the cache context of KEY."
                :arguments ("key" "file" "property"))
                nil [6343 6954])
            ("tramp-flush-file-properties" function
               (:documentation "Remove all properties of FILE in the cache context of KEY."
                :arguments ("key" "file"))
                nil [6977 7735])
            ("tramp-flush-directory-properties" function
               (:documentation "Remove all properties of DIRECTORY in the cache context of KEY.
Remove also properties of all files in subdirectories."
                :arguments ("key" "directory"))
                nil [7758 8674])
            ("tramp-flush-file-function" function (:documentation "Flush all Tramp cache properties from `buffer-file-name'.
This is suppressed for temporary buffers.") nil [9010 9504])
            ("add-hook" code nil nil [9506 9563])
            ("add-hook" code nil nil [9564 9626])
            ("add-hook" code nil nil [9627 9682])
            ("add-hook" code nil nil [9683 9946])
            ("tramp-get-connection-property" function
               (:documentation "Get the named PROPERTY for the connection.
KEY identifies the connection, it is either a process or a
`tramp-file-name' structure.  A special case is nil, which is
used to cache connection properties of the local machine.  If the
value is not set for the connection, returns DEFAULT."
                :arguments ("key" "property" "default"))
                nil [9991 10989])
            ("tramp-set-connection-property" function
               (:documentation "Set the named PROPERTY of a connection to VALUE.
KEY identifies the connection, it is either a process or a
`tramp-file-name' structure.  A special case is nil, which is
used to cache connection properties of the local machine.
PROPERTY is set persistent when KEY is a `tramp-file-name' structure."
                :arguments ("key" "property" "value"))
                nil [11012 11836])
            ("tramp-connection-property-p" function
               (:documentation "Check whether named PROPERTY of a connection is defined.
KEY identifies the connection, it is either a process or a
`tramp-file-name' structure.  A special case is nil, which is
used to cache connection properties of the local machine."
                :arguments ("key" "property"))
                nil [11859 12221])
            ("tramp-flush-connection-property" function
               (:documentation "Remove the named PROPERTY of a connection identified by KEY.
KEY identifies the connection, it is either a process or a
`tramp-file-name' structure.  A special case is nil, which is
used to cache connection properties of the local machine.
PROPERTY is set persistent when KEY is a `tramp-file-name' structure."
                :arguments ("key" "property"))
                nil [12244 13023])
            ("tramp-flush-connection-properties" function
               (:documentation "Remove all properties identified by KEY.
KEY identifies the connection, it is either a process or a
`tramp-file-name' structure.  A special case is nil, which is
used to cache connection properties of the local machine."
                :arguments ("key"))
                nil [13046 13898])
            ("tramp-cache-print" function
               (:documentation "Print hash table TABLE."
                :arguments ("table"))
                nil [13921 15267])
            ("tramp-list-connections" function (:documentation "Return all known `tramp-file-name' structs according to `tramp-cache'.") nil [15290 15684])
            ("tramp-dump-connection-properties" function (:documentation "Write persistent connection properties into file `tramp-persistency-file-name'.") nil [15686 17500])
            ("unless" code nil nil [17502 17589])
            ("add-hook" code nil nil [17590 17714])
            ("tramp-parse-connection-properties" function
               (:documentation "Return a list of (user host) tuples allowed to access for METHOD.
This function is added always in `tramp-get-completion-function'
for all methods.  Resulting data are derived from connection history."
                :arguments ("method"))
                nil [17737 18300])
            ("tramp-cache-read-persistent-data" variable
               (:documentation "Whether to read persistent data at startup time."
                :default-value (or init-file-user site-run-file))
                nil [18472 18600])
            ("when" code nil nil [18641 19720])
            ("add-hook" code nil nil [19722 19808])
            ("tramp-cache" package nil nil [19810 19832]))          
      :file "tramp-cache.el.gz"
      :pointmax 19863
      :fsize 5276
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c0530c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1040 1057])
            ("tramp" include nil nil [1059 1075])
            ("tramp-smb-method" variable
               (:documentation "Method to connect SAMBA and M$ SMB servers."
                :constant-flag t
                :default-value "smb")
                nil [1123 1204])
            ("unless" code nil nil [1265 1835])
            ("add-to-list" code nil nil [1966 2061])
            ("eval-after-load" code nil nil [2127 2245])
            ("tramp-smb-program" variable
               (:documentation "Name of SMB client to run."
                :default-value "smbclient")
                nil [2268 2372])
            ("tramp-smb-acl-program" variable
               (:documentation "Name of SMB acls to run."
                :default-value "smbcacls")
                nil [2395 2518])
            ("tramp-smb-conf" variable
               (:documentation "Path of the smb.conf file.
If it is nil, no smb.conf will be added to the `tramp-smb-program'
call, letting the SMB client use the default one."
                :default-value "/dev/null")
                nil [2541 2794])
            ("tramp-smb-version" variable (:documentation "Version string of the SMB client.") nil [2796 2864])
            ("tramp-smb-server-version" variable
               (:documentation "Regexp of SMB server identification."
                :constant-flag t
                :default-value "Domain=\\[[^]]*\\] OS=\\[[^]]*\\] Server=\\[[^]]*\\]")
                nil [2866 2999])
            ("tramp-smb-prompt" variable
               (:documentation "Regexp used as prompt in smbclient or powershell."
                :constant-flag t
                :default-value "^\\(smb:\\|PS\\) .+> \\|^\\s-+Server\\s-+Comment$")
                nil [3001 3134])
            ("tramp-smb-wrong-passwd-regexp" variable
               (:documentation "Regexp for login error strings of SMB servers."
                :constant-flag t
                :default-value (regexp-opt '("NT_STATUS_LOGON_FAILURE" "NT_STATUS_WRONG_PASSWORD")))
                nil [3136 3306])
            ("tramp-smb-errors" variable
               (:documentation "Regexp for possible error strings of SMB servers.
Used instead of analyzing error codes of commands."
                :constant-flag t
                :default-value (mapconcat 'identity `("Connection\\( to \\S-+\\)? failed" "Read from server failed, maybe it closed the connection" "Call timed out: server did not respond" "\\S-+: command not found" "Server doesn't support UNIX CIFS calls" ,(regexp-opt '("ERRDOS" "ERRHRD" "ERRSRV" "ERRbadfile" "ERRbadpw" "ERRfilexists" "ERRnoaccess" "ERRnomem" "ERRnosuchshare" "NT_STATUS_ACCESS_DENIED" "NT_STATUS_ACCOUNT_LOCKED_OUT" "NT_STATUS_BAD_NETWORK_NAME" "NT_STATUS_CANNOT_DELETE" "NT_STATUS_CONNECTION_DISCONNECTED" "NT_STATUS_CONNECTION_REFUSED" "NT_STATUS_CONNECTION_RESET" "NT_STATUS_DIRECTORY_NOT_EMPTY" "NT_STATUS_DUPLICATE_NAME" "NT_STATUS_FILE_IS_A_DIRECTORY" "NT_STATUS_HOST_UNREACHABLE" "NT_STATUS_IMAGE_ALREADY_LOADED" "NT_STATUS_INVALID_LEVEL" "NT_STATUS_INVALID_PARAMETER_MIX" "NT_STATUS_IO_TIMEOUT" "NT_STATUS_LOGON_FAILURE" "NT_STATUS_NETWORK_ACCESS_DENIED" "NT_STATUS_NOT_IMPLEMENTED" "NT_STATUS_NO_LOGON_SERVERS" "NT_STATUS_NO_SUCH_FILE" "NT_STATUS_NO_SUCH_USER" "NT_STATUS_OBJECT_NAME_COLLISION" "NT_STATUS_OBJECT_NAME_INVALID" "NT_STATUS_OBJECT_NAME_NOT_FOUND" "NT_STATUS_OBJECT_PATH_SYNTAX_BAD" "NT_STATUS_PASSWORD_MUST_CHANGE" "NT_STATUS_RESOURCE_NAME_NOT_FOUND" "NT_STATUS_REVISION_MISMATCH" "NT_STATUS_SHARING_VIOLATION" "NT_STATUS_TRUSTED_RELATIONSHIP_FAILURE" "NT_STATUS_UNSUCCESSFUL" "NT_STATUS_WRONG_PASSWORD"))) "\\|"))
                nil [3308 5241])
            ("tramp-smb-actions-with-share" variable
               (:documentation "List of pattern/action pairs.
This list is used for login to SMB servers.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-smb-prompt tramp-action-succeed) (tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-process-alive)))
                nil [5243 5688])
            ("tramp-smb-actions-without-share" variable
               (:documentation "List of pattern/action pairs.
This list is used for login to SMB servers.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-out-of-band)))
                nil [5690 6092])
            ("tramp-smb-actions-with-tar" variable
               (:documentation "List of pattern/action pairs.
This list is used for tar-like copy of directories.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-with-tar)))
                nil [6094 6500])
            ("tramp-smb-actions-get-acl" variable
               (:documentation "List of pattern/action pairs.
This list is used for smbcacls actions.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-get-acl)))
                nil [6502 6894])
            ("tramp-smb-actions-set-acl" variable
               (:documentation "List of pattern/action pairs.
This list is used for smbcacls actions.

See `tramp-actions-before-shell' for more info."
                :constant-flag t
                :default-value '((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-set-acl)))
                nil [6896 7288])
            ("tramp-smb-file-name-handler-alist" variable
               (:documentation "Alist of handler functions for Tramp SMB method.
Operations not mentioned here will be handled by the default Emacs primitives."
                :constant-flag t
                :default-value '((add-name-to-file . tramp-smb-handle-add-name-to-file) (copy-directory . tramp-smb-handle-copy-directory) (copy-file . tramp-smb-handle-copy-file) (delete-directory . tramp-smb-handle-delete-directory) (delete-file . tramp-smb-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-smb-handle-directory-files) (directory-files-and-attributes . tramp-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (exec-path . ignore) (expand-file-name . tramp-smb-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . tramp-smb-handle-file-acl) (file-attributes . tramp-smb-handle-file-attributes) (file-directory-p . tramp-handle-file-directory-p) (file-file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-handle-file-exists-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-smb-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-smb-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-handle-file-exists-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-smb-handle-file-system-info) (file-truename . tramp-handle-file-truename) (file-writable-p . tramp-smb-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-smb-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-smb-handle-make-directory) (make-directory-internal . tramp-smb-handle-make-directory-internal) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-smb-handle-make-symbolic-link) (process-file . tramp-smb-handle-process-file) (rename-file . tramp-smb-handle-rename-file) (set-file-acl . tramp-smb-handle-set-file-acl) (set-file-modes . tramp-smb-handle-set-file-modes) (set-file-selinux-context . ignore) (set-file-times . ignore) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . tramp-handle-shell-command) (start-file-process . tramp-smb-handle-start-file-process) (substitute-in-file-name . tramp-smb-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-smb-handle-write-region)))
                nil [7349 11565])
            ("tramp-smb-winexe-program" variable
               (:documentation "Name of winexe client to run.
If it isn't found in the local $PATH, the absolute path of winexe
shall be given.  This is needed for remote processes."
                :default-value "winexe")
                nil [11632 11881])
            ("tramp-smb-winexe-shell-command" variable
               (:documentation "Shell to be used for processes on remote machines.
This must be Powershell V2 compatible."
                :default-value "powershell.exe")
                nil [11904 12107])
            ("tramp-smb-winexe-shell-command-switch" variable
               (:documentation "Command switch used together with `tramp-smb-winexe-shell-command'.
This can be used to disable echo etc."
                :default-value "-file -")
                nil [12130 12349])
            ("tramp-smb-file-name-p" function
               (:documentation "Check if it's a filename for SMB servers."
                :arguments ("filename"))
                nil [12508 12690])
            ("tramp-smb-file-name-handler" function
               (:documentation "Invoke the SMB related OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [12713 13070])
            ("unless" code nil nil [13093 13241])
            ("tramp-smb-handle-add-name-to-file" function
               (:documentation "Like `add-name-to-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [13269 14877])
            ("tramp-smb-action-with-tar" function
               (:documentation "Untar from connection buffer."
                :arguments ("proc" "vec"))
                nil [14879 15389])
            ("tramp-smb-handle-copy-directory" function
               (:documentation "Like `copy-directory' for Tramp files."
                :arguments ("dirname" "newname" "keep-date" "parents" "copy-contents"))
                nil [15391 20767])
            ("tramp-smb-handle-copy-file" function
               (:documentation "Like `copy-file' for Tramp files.
KEEP-DATE has no effect in case NEWNAME resides on an SMB server.
PRESERVE-UID-GID and PRESERVE-EXTENDED-ATTRIBUTES are completely ignored."
                :arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "_preserve-uid-gid" "_preserve-extended-attributes"))
                nil [20769 22881])
            ("tramp-smb-handle-delete-directory" function
               (:documentation "Like `delete-directory' for Tramp files."
                :arguments ("directory" "recursive" "_trash"))
                nil [22883 24239])
            ("tramp-smb-handle-delete-file" function
               (:documentation "Like `delete-file' for Tramp files."
                :arguments ("filename" "_trash"))
                nil [24241 25096])
            ("tramp-smb-handle-directory-files" function
               (:documentation "Like `directory-files' for Tramp files."
                :arguments ("directory" "full" "match" "nosort"))
                nil [25098 25719])
            ("tramp-smb-handle-expand-file-name" function
               (:documentation "Like `expand-file-name' for Tramp files."
                :arguments ("name" "dir"))
                nil [25721 27012])
            ("tramp-smb-action-get-acl" function
               (:documentation "Read ACL data from connection buffer."
                :arguments ("proc" "vec"))
                nil [27014 27683])
            ("tramp-smb-handle-file-acl" function
               (:documentation "Like `file-acl' for Tramp files."
                :arguments ("filename"))
                nil [27685 29685])
            ("tramp-smb-handle-file-attributes" function
               (:documentation "Like `file-attributes' for Tramp files."
                :arguments ("filename" "id-format"))
                nil [29687 31191])
            ("tramp-smb-do-file-attributes-with-stat" function
               (:documentation "Implement `file-attributes' for Tramp files using stat command."
                :arguments ("vec" "id-format"))
                nil [31216 34477])
            ("tramp-smb-handle-file-local-copy" function
               (:documentation "Like `file-local-copy' for Tramp files."
                :arguments ("filename"))
                nil [34479 35237])
            ("tramp-smb-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for Tramp files."
                :arguments ("filename" "directory"))
                nil [35317 35830])
            ("tramp-smb-handle-file-system-info" function
               (:documentation "Like `file-system-info' for Tramp files."
                :arguments ("filename"))
                nil [35832 37095])
            ("tramp-smb-handle-file-writable-p" function
               (:documentation "Like `file-writable-p' for Tramp files."
                :arguments ("filename"))
                nil [37097 37441])
            ("tramp-smb-handle-insert-directory" function
               (:documentation "Like `insert-directory' for Tramp files."
                :arguments ("filename" "switches" "wildcard" "full-directory-p"))
                nil [37443 41624])
            ("tramp-smb-handle-make-directory" function
               (:documentation "Like `make-directory' for Tramp files."
                :arguments ("dir" "parents"))
                nil [41626 42325])
            ("tramp-smb-handle-make-directory-internal" function
               (:documentation "Like `make-directory-internal' for Tramp files."
                :arguments ("directory"))
                nil [42327 43318])
            ("tramp-smb-handle-make-symbolic-link" function
               (:documentation "Like `make-symbolic-link' for Tramp files.
If TARGET is a non-Tramp file, it is used verbatim as the target
of the symlink.  If TARGET is a Tramp file, only the localname
component is used as the target of the symlink."
                :arguments ("target" "linkname" "ok-if-already-exists"))
                nil [43320 45395])
            ("tramp-smb-handle-process-file" function
               (:documentation "Like `process-file' for Tramp files."
                :arguments ("program" "infile" "destination" "display" "args"))
                nil [45397 49293])
            ("tramp-smb-handle-rename-file" function
               (:documentation "Like `rename-file' for Tramp files."
                :arguments ("filename" "newname" "ok-if-already-exists"))
                nil [49295 51194])
            ("tramp-smb-action-set-acl" function
               (:documentation "Read ACL data from connection buffer."
                :arguments ("proc" "vec"))
                nil [51196 51539])
            ("tramp-smb-handle-set-file-acl" function
               (:documentation "Like `set-file-acl' for Tramp files."
                :arguments ("filename" "acl-string"))
                nil [51541 54115])
            ("tramp-smb-handle-set-file-modes" function
               (:documentation "Like `set-file-modes' for Tramp files."
                :arguments ("filename" "mode"))
                nil [54117 54543])
            ("tramp-smb-handle-start-file-process" function
               (:documentation "Like `start-file-process' for Tramp files."
                :arguments ("name" "buffer" "program" "args"))
                nil [54707 56548])
            ("tramp-smb-handle-substitute-in-file-name" function
               (:documentation "Like `handle-substitute-in-file-name' for Tramp files.
\"//\" substitutes only in the local filename part.  Catches
errors for shares like \"C$/\", which are common in Microsoft Windows."
                :arguments ("filename"))
                nil [56550 57326])
            ("tramp-smb-handle-write-region" function
               (:documentation "Like `write-region' for Tramp files."
                :arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew"))
                nil [57328 59359])
            ("tramp-smb-get-share" function
               (:documentation "Returns the share name of LOCALNAME."
                :arguments ("vec"))
                nil [59395 59637])
            ("tramp-smb-get-localname" function
               (:documentation "Returns the file name of LOCALNAME.
If VEC has no cifs capabilities, exchange \"/\" by \"\\\\\"."
                :arguments ("vec"))
                nil [59639 60766])
            ("tramp-smb-get-file-entries" function
               (:documentation "Read entries which match DIRECTORY.
Either the shares are listed, or the `dir' command is executed.
Result is a list of (LOCALNAME MODE SIZE MONTH DAY TIME YEAR)."
                :arguments ("directory"))
                nil [60873 62522])
            ("tramp-smb-read-file-entry" function
               (:documentation "Parse entry in SMB output buffer.
If SHARE is result, entries are of type dir. Otherwise, shares are listed.
Result is the list (LOCALNAME MODE SIZE MTIME)."
                :arguments ("share"))
                nil [64630 67375])
            ("tramp-smb-get-cifs-capabilities" function
               (:documentation "Check, whether the SMB server supports POSIX commands."
                :arguments ("vec"))
                nil [67377 68026])
            ("tramp-smb-get-stat-capability" function
               (:documentation "Check, whether the SMB server supports the STAT command."
                :arguments ("vec"))
                nil [68028 68416])
            ("tramp-smb-send-command" function
               (:documentation "Send the COMMAND to connection VEC.
Returns nil if there has been an error message from smbclient."
                :arguments ("vec" "command"))
                nil [68445 68737])
            ("tramp-smb-maybe-open-connection" function
               (:documentation "Maybe open a connection to HOST, log in as USER, using `tramp-smb-program'.
Does not do anything if a connection is already open, but re-opens the
connection if a previous connection has died for some reason.
If ARGUMENT is non-nil, use it as argument for
`tramp-smb-winexe-program', and suppress any checks."
                :arguments ("vec" "argument"))
                nil [68739 74820])
            ("tramp-smb-wait-for-output" function
               (:documentation "Wait for output from smbclient command.
Returns nil if an error message has appeared."
                :arguments ("vec"))
                nil [74890 76429])
            ("tramp-smb-kill-winexe-function" function (:documentation "Send SIGKILL to the winexe process.") nil [76431 76657])
            ("tramp-smb-call-winexe" function
               (:documentation "Apply a remote command, if possible, using `tramp-smb-winexe-program'."
                :arguments ("vec"))
                nil [76659 77941])
            ("tramp-smb-shell-quote-argument" function
               (:documentation "Similar to `shell-quote-argument', but uses windows cmd syntax."
                :arguments ("s"))
                nil [77943 78128])
            ("add-hook" code nil nil [78130 78214])
            ("tramp-smb" package nil nil [78216 78236]))          
      :file "tramp-smb.el.gz"
      :pointmax 78514
      :fsize 18794
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1057 . 1058) (symbol 1022 . 1039) (open-paren 1021 . 1022)))
    (semanticdb-table "semanticdb-table-1904c50"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [2115 2132])
            ("telnet-host-properties" variable (:documentation "Specify which telnet program to use for particular hosts.
Each element has the form (HOSTNAME PROGRAM [LOGIN-NAME])
HOSTNAME says which machine the element applies to.
PROGRAM says which program to run, to talk to that machine.
LOGIN-NAME, which is optional, says what to log in as on that machine.") nil [2134 2471])
            ("telnet-new-line" variable (:default-value "") nil [2473 2502])
            ("telnet-mode-map" variable (:default-value (let ((map (nconc (make-sparse-keymap) comint-mode-map))) (define-key map "" 'telnet-send-input) (define-key map "" 'send-process-next-char) (define-key map "" 'telnet-interrupt-subjob) (define-key map "" 'telnet-c-z) map)) nil [2503 2850])
            ("telnet-prompt-pattern" variable (:default-value "^[^#$%>
]*[#$%>] *") nil [2852 2904])
            ("telnet-replace-c-g" variable nil nil [2905 2936])
            ("make-variable-buffer-local" code nil nil [2937 3047])
            ("make-variable-buffer-local" code nil nil [3048 3139])
            ("telnet-count" variable (:documentation "Number of output strings from telnet process while looking for password.") nil [3141 3241])
            ("make-variable-buffer-local" code nil nil [3242 3284])
            ("telnet-program" variable
               (:documentation "Program to run to open a telnet connection."
                :default-value "telnet")
                nil [3286 3366])
            ("telnet-initial-count" variable
               (:documentation "Initial value of `telnet-count'.  Should be set to the negative of the
number of terminal writes telnet will make setting up the host connection."
                :default-value -50)
                nil [3368 3551])
            ("telnet-maximum-count" variable
               (:documentation "Maximum value `telnet-count' can have.
After this many passes, we stop looking for initial setup data.
Should be set to the number of terminal writes telnet will make
rejecting one login and prompting again for a username and password."
                :default-value 4)
                nil [3553 3824])
            ("telnet-interrupt-subjob" function
               (:documentation "Interrupt the program running through telnet on the remote host."
                :user-visible-flag t)
                nil [3826 3997])
            ("telnet-c-z" function nil nil [3999 4071])
            ("send-process-next-char" function nil nil [4073 4334])
            ("telnet-check-software-type-initialize" function
               (:documentation "Tries to put correct initializations in.  Needs work."
                :arguments ("string"))
                nil [4388 4992])
            ("telnet-initial-filter" function (:arguments ("proc" "string")) nil [4994 5846])
            ("telnet-simple-send" function (:arguments ("proc" "string")) nil [5941 6164])
            ("telnet-filter" function (:arguments ("proc" "string")) nil [6166 7212])
            ("telnet-send-input" function nil nil [7214 7443])
            ("telnet" function
               (:documentation "Open a network login connection to host named HOST (a string).
Optional arg PORT specifies alternative port to connect to.
Interactively, use \\[universal-argument] prefix to be prompted for port number.

Communication with HOST is recorded in a buffer `*PROGRAM-HOST*'
where PROGRAM is the telnet program being used.  This program
is controlled by the contents of the global variable `telnet-host-properties',
falling back on the value of the global variable `telnet-program'.
Normally input is edited in Emacs and sent a line at a time."
                :user-visible-flag t
                :arguments ("host" "port"))
                nil [7460 9496])
            ("put" code nil nil [9498 9537])
            ("define-derived-mode" code nil nil [9539 10088])
            ("rsh" function
               (:documentation "Open a network login connection to host named HOST (a string).
Communication with HOST is recorded in a buffer `*rsh-HOST*'.
Normally input is edited in Emacs and sent a line at a time."
                :user-visible-flag t
                :arguments ("host"))
                nil [10105 10605])
            ("telnet" package nil nil [10607 10624]))          
      :file "telnet.el.gz"
      :pointmax 10650
      :fsize 3775
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18811cc"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4688 4705])
            ("tramp-gvfs" include nil nil [4707 4728])
            ("dired-uncache" function (:prototype-flag t) nil [4730 4763])
            ("url-tramp-convert-url-to-tramp" function (:prototype-flag t) nil [4764 4818])
            ("url-handler-mode-hook" variable nil nil [4819 4849])
            ("url-handler-regexp" variable nil nil [4850 4877])
            ("url-tramp-protocols" variable nil nil [4878 4906])
            ("tramp-archive-enabled" variable
               (:documentation "Non-nil when file archive support is available."
                :default-value (featurep 'dbusbind))
                nil [5042 5145])
            ("setq" code nil nil [5198 5245])
            ("tramp-archive-suffixes" variable
               (:documentation "List of suffixes which indicate a file archive.
It must be supported by libarchive(3)."
                :constant-flag t
                :default-value '("7z" "apk" "ar" "cab" "CAB" "cpio" "deb" "depot" "exe" "iso" "jar" "lzh" "LZH" "msu" "MSU" "mtree" "odb" "odf" "odg" "odp" "ods" "odt" "pax" "rar" "rpm" "shar" "tar" "tbz" "tgz" "tlz" "txz" "warc" "xar" "xpi" "xps" "zip" "ZIP"))
                nil [5331 6803])
            ("tramp-archive-compression-suffixes" variable
               (:documentation "List of suffixes which indicate a compressed file.
It must be supported by libarchive(3)."
                :constant-flag t
                :default-value '("bz2" "gz" "lrz" "lz" "lz4" "lzma" "lzo" "uu" "xz" "Z"))
                nil [7046 7245])
            ("progn" code nil nil [7465 7842])
            ("tramp-archive-file-name-regexp" variable
               (:documentation "Regular expression matching archive file names."
                :constant-flag t
                :default-value (ignore-errors (tramp-archive-autoload-file-name-regexp)))
                nil [8078 8231])
            ("tramp-archive-method" variable
               (:documentation "Method name for archives in GVFS."
                :constant-flag t
                :default-value "archive")
                nil [8254 8333])
            ("tramp-archive-all-gvfs-methods" variable
               (:documentation "List of all methods `tramp-gvfs-methods' offers."
                :constant-flag t
                :default-value (cons tramp-archive-method (let ((values (cdr (cadr (get 'tramp-gvfs-methods 'custom-type))))) (setq values (mapcar 'last values) values (mapcar 'car values)))))
                nil [8335 8598])
            ("tramp-archive-file-name-handler-alist" variable
               (:documentation "Alist of handler functions for file archive method.
Operations not mentioned here will be handled by the default Emacs primitives."
                :constant-flag t
                :default-value '((access-file . ignore) (add-name-to-file . tramp-archive-handle-not-implemented) (copy-file . tramp-archive-handle-copy-file) (delete-directory . tramp-archive-handle-not-implemented) (delete-file . tramp-archive-handle-not-implemented) (directory-file-name . tramp-archive-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-handle-directory-files-and-attributes) (dired-compress-file . tramp-archive-handle-not-implemented) (dired-uncache . tramp-archive-handle-dired-uncache) (exec-path . ignore) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . ignore) (file-attributes . tramp-archive-handle-file-attributes) (file-directory-p . tramp-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-archive-handle-file-executable-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-archive-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-archive-handle-file-name-all-completions) (file-name-case-insensitive-p . ignore) (file-name-completion . tramp-handle-file-name-completion) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . ignore) (file-notify-rm-watch . ignore) (file-notify-valid-p . ignore) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-archive-handle-file-readable-p) (file-regular-p . tramp-handle-file-regular-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-archive-handle-file-system-info) (file-truename . tramp-archive-handle-file-truename) (file-writable-p . ignore) (find-backup-file-name . ignore) (insert-directory . tramp-archive-handle-insert-directory) (insert-file-contents . tramp-archive-handle-insert-file-contents) (load . tramp-archive-handle-load) (make-auto-save-file-name . ignore) (make-directory . tramp-archive-handle-not-implemented) (make-directory-internal . tramp-archive-handle-not-implemented) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-archive-handle-not-implemented) (process-file . ignore) (rename-file . tramp-archive-handle-not-implemented) (set-file-acl . ignore) (set-file-modes . tramp-archive-handle-not-implemented) (set-file-selinux-context . ignore) (set-file-times . tramp-archive-handle-not-implemented) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . tramp-archive-handle-not-implemented) (start-file-process . tramp-archive-handle-not-implemented) (temporary-file-directory . tramp-archive-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-archive-handle-not-implemented)))
                nil [8661 12763])
            ("tramp-archive-file-name-for-operation" function
               (:documentation "Like `tramp-file-name-for-operation', but for archive file name syntax."
                :arguments ("operation" "args"))
                nil [12765 13051])
            ("tramp-archive-run-real-handler" function
               (:documentation "Invoke normal file name handler for OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [13053 13494])
            ("tramp-archive-file-name-handler" function
               (:documentation "Invoke the file archive related OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [13517 14979])
            ("progn" code nil nil [14996 15352])
            ("progn" code nil nil [15369 15590])
            ("tramp-register-archive-file-name-handler" code nil nil [15702 15744])
            ("put" code nil nil [15799 15906])
            ("when" code nil nil [15987 16046])
            ("eval-after-load" code nil nil [16048 16305])
            ("tramp-archive-file-name-p" function
               (:documentation "Return t if NAME is a string with archive file name syntax."
                :arguments ("name"))
                nil [16336 16530])
            ("tramp-archive-file-name-archive" function
               (:documentation "Return archive part of NAME."
                :arguments ("name"))
                nil [16532 16681])
            ("tramp-archive-file-name-localname" function
               (:documentation "Return localname part of NAME."
                :arguments ("name"))
                nil [16683 16836])
            ("tramp-archive-hash" variable
               (:documentation "Hash table for archive local copies.
The hash key is the archive name.  The value is a cons of the
used `tramp-file-name' structure for tramp-gvfs, and the file
name of a local copy, if any."
                :default-value (make-hash-table :test 'equal))
                nil [16838 17091])
            ("tramp-archive-gvfs-host" function
               (:documentation "Return host name of ARCHIVE as used in GVFS for mounting"
                :arguments ("archive"))
                nil [17093 17255])
            ("tramp-archive-dissect-file-name" function
               (:documentation "Return a `tramp-file-name' structure.
The structure consists of the `tramp-archive-method' method, the
hexified archive name as host, and the localname.  The archive
name is kept in slot `hop'"
                :arguments ("name"))
                nil [17257 19685])
            ("tramp-archive-cleanup-hash" function (:documentation "Remove local copies of archives, used by GVFS.") nil [19708 20160])
            ("add-hook" code nil nil [20162 20217])
            ("add-hook" code nil nil [20218 20338])
            ("tramp-file-name-archive" function
               (:documentation "Extract the archive file name from VEC.
VEC is expected to be a `tramp-file-name', with the method being
`tramp-archive-method', and the host being a coded URL.  The
archive name is extracted from the hop part of the VEC structure."
                :arguments ("vec"))
                nil [20340 20753])
            ("with-parsed-tramp-archive-file-name" function
               (:documentation "Parse an archive filename and make components available in the body.
This works exactly as `with-parsed-tramp-file-name' for the Tramp
file name structure returned by `tramp-archive-dissect-file-name'.
A variable `foo-archive' (or `archive') will be bound to the
archive name part of FILENAME, assuming `foo' (or nil) is the
value of VAR.  OTOH, the variable `foo-hop' (or `hop') won't be
offered."
                :arguments ("filename" "var" "body"))
                nil [20755 21982])
            ("tramp-archive-gvfs-file-name" function
               (:documentation "Return FILENAME in GVFS syntax."
                :arguments ("name"))
                nil [21984 22147])
            ("tramp-archive-handle-copy-file" function
               (:documentation "Like `copy-file' for file archives."
                :arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes"))
                nil [22177 22671])
            ("tramp-archive-handle-directory-file-name" function
               (:documentation "Like `directory-file-name' for file archives."
                :arguments ("directory"))
                nil [22673 23199])
            ("tramp-archive-handle-dired-uncache" function
               (:documentation "Like `dired-uncache' for file archives."
                :arguments ("dir"))
                nil [23201 23346])
            ("tramp-archive-handle-file-attributes" function
               (:documentation "Like `file-attributes' for file archives."
                :arguments ("filename" "id-format"))
                nil [23348 23539])
            ("tramp-archive-handle-file-executable-p" function
               (:documentation "Like `file-executable-p' for file archives."
                :arguments ("filename"))
                nil [23541 23708])
            ("tramp-archive-handle-file-local-copy" function
               (:documentation "Like `file-local-copy' for file archives."
                :arguments ("filename"))
                nil [23710 23871])
            ("tramp-archive-handle-file-name-all-completions" function
               (:documentation "Like `file-name-all-completions' for file archives."
                :arguments ("filename" "directory"))
                nil [23873 24084])
            ("tramp-archive-handle-file-readable-p" function
               (:documentation "Like `file-readable-p' for file archives."
                :arguments ("filename"))
                nil [24086 24311])
            ("tramp-archive-handle-file-system-info" function
               (:documentation "Like `file-system-info' for file archives."
                :arguments ("filename"))
                nil [24313 24545])
            ("tramp-archive-handle-file-truename" function
               (:documentation "Like `file-truename' for file archives."
                :arguments ("filename"))
                nil [24547 24918])
            ("tramp-archive-handle-insert-directory" function
               (:documentation "Like `insert-directory' for file archives."
                :arguments ("filename" "switches" "wildcard" "full-directory-p"))
                nil [24920 25304])
            ("tramp-archive-handle-insert-file-contents" function
               (:documentation "Like `insert-file-contents' for file archives."
                :arguments ("filename" "visit" "beg" "end" "replace"))
                nil [25306 25681])
            ("tramp-archive-handle-load" function
               (:documentation "Like `load' for file archives."
                :arguments ("file" "noerror" "nomessage" "nosuffix" "must-suffix"))
                nil [25683 25898])
            ("tramp-archive-handle-temporary-file-directory" function (:documentation "Like `temporary-file-directory' for file archives.") nil [25900 26311])
            ("tramp-archive-handle-not-implemented" function
               (:documentation "Generic handler for operations not implemented for file archives."
                :arguments ("operation" "args"))
                nil [26313 26744])
            ("add-hook" code nil nil [26746 26834])
            ("tramp-archive" package nil nil [26836 26860]))          
      :file "tramp-archive.el.gz"
      :pointmax 27195
      :fsize 7704
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 4705 . 4706) (symbol 4670 . 4687) (open-paren 4669 . 4670)))
    (semanticdb-table "semanticdb-table-1906748"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1022 1038])
            ("declare-function" code nil nil [1065 1098])
            ("declare-function" code nil nil [1099 1144])
            ("declare-function" code nil nil [1145 1197])
            ("reporter-eval-buffer" variable nil nil [1198 1227])
            ("reporter-prompt-for-summary-p" variable nil nil [1228 1266])
            ("tramp-change-syntax" function
               (:documentation "Change Tramp syntax.
SYNTAX can be one of the symbols `default' (default),
`simplified' (ange-ftp like) or `separate' (XEmacs like)."
                :user-visible-flag t
                :arguments ("syntax"))
                nil [1289 1742])
            ("tramp-list-tramp-buffers" function (:documentation "Return a list of all Tramp connection buffers.") nil [1744 2017])
            ("tramp-list-remote-buffers" function (:documentation "Return a list of all buffers with remote default-directory.") nil [2019 2260])
            ("tramp-cleanup-connection" function
               (:documentation "Flush all connection related objects.
This includes password cache, file cache, connection cache,
buffers.  KEEP-DEBUG non-nil preserves the debug buffer.
KEEP-PASSWORD non-nil preserves the password cache.
When called interactively, a Tramp connection has to be selected."
                :user-visible-flag t
                :arguments ("vec" "keep-debug" "keep-password"))
                nil [2283 4137])
            ("tramp-cleanup-this-connection" function
               (:documentation "Flush all connection related objects of the current buffer's connection."
                :user-visible-flag t)
                nil [4160 4429])
            ("tramp-cleanup-all-connections" function
               (:documentation "Flush all Tramp internal objects.
This includes password cache, file cache, connection cache, buffers."
                :user-visible-flag t)
                nil [4452 5024])
            ("tramp-cleanup-all-buffers" function
               (:documentation "Kill all remote buffers."
                :user-visible-flag t)
                nil [5047 5368])
            ("tramp-version" function
               (:documentation "Print version number of tramp.el in minibuffer or current buffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [5446 5621])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [5746 5795])
            ("tramp-bug" function
               (:documentation "Submit a bug report to the Tramp developers."
                :user-visible-flag t)
                nil [5818 7756])
            ("tramp-reporter-dump-variable" function
               (:documentation "Pretty-print the value of the variable in symbol VARSYM."
                :arguments ("varsym" "mailbuf"))
                nil [7758 9166])
            ("tramp-load-report-modules" function (:documentation "Load needed modules for reporting.") nil [9168 9275])
            ("tramp-append-tramp-buffers" function (:documentation "Append Tramp buffers and buffer local variables into the bug report.") nil [9277 12699])
            ("defalias" code nil nil [12701 12740])
            ("add-hook" code nil nil [12742 12822])
            ("tramp-cmds" package nil nil [12824 12845]))          
      :file "tramp-cmds.el.gz"
      :pointmax 13330
      :fsize 4820
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-19051e8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("net-utils--executable-find-sbin" function
               (:documentation "Return absolute name of COMMAND if found in an sbin directory."
                :arguments ("command"))
                nil [1692 1901])
            ("net-utils" customgroup
               (:documentation "Network utility functions."
                :user-visible-flag t)
                nil [2053 2164])
            ("traceroute-program" variable
               (:documentation "Program to trace network hops to a destination."
                :default-value (if (eq system-type 'windows-nt) "tracert" "traceroute"))
                nil [2166 2354])
            ("traceroute-program-options" variable (:documentation "Options for the traceroute program.") nil [2356 2484])
            ("ping-program" variable
               (:documentation "Program to send network test packets to a host."
                :default-value "ping")
                nil [2486 2606])
            ("ping-program-options" variable
               (:documentation "Options for the ping program.
These options can be used to limit how many ICMP packets are emitted."
                :default-value (and (eq system-type 'gnu/linux) (list "-c" "4")))
                nil [2720 2961])
            ("ifconfig-program" variable
               (:documentation "Program to print network configuration information."
                :default-value (cond ((eq system-type 'windows-nt) "ipconfig") ((executable-find "ifconfig") "ifconfig") ((net-utils--executable-find-sbin "ifconfig")) ((net-utils--executable-find-sbin "ip")) (t "ip")))
                nil [2963 3355])
            ("ifconfig-program-options" variable
               (:documentation "Options for the ifconfig program."
                :default-value (cond ((string-match "ipconfig\\'" ifconfig-program) '("/all")) ((string-match "ifconfig\\'" ifconfig-program) '("-a")) ((string-match "ip\\'" ifconfig-program) '("addr"))))
                nil [3357 3719])
            ("iwconfig-program" variable
               (:documentation "Program to print wireless network configuration information."
                :default-value (cond ((executable-find "iwconfig") "iwconfig") ((net-utils--executable-find-sbin "iw") "iw") (t "iw")))
                nil [3721 3990])
            ("iwconfig-program-options" variable
               (:documentation "Options for the iwconfig program."
                :default-value (cond ((string-match-p "iw\\'" iwconfig-program) (list "dev")) (t nil)))
                nil [3992 4207])
            ("netstat-program" variable
               (:documentation "Program to print network statistics."
                :default-value (cond ((executable-find "netstat") "netstat") ((net-utils--executable-find-sbin "ss")) (t "ss")))
                nil [4209 4447])
            ("netstat-program-options" variable
               (:documentation "Options for the netstat program."
                :default-value (list "-a"))
                nil [4449 4581])
            ("arp-program" variable
               (:documentation "Program to print IP to address translation tables."
                :default-value (or (net-utils--executable-find-sbin "arp") "arp"))
                nil [4583 4749])
            ("arp-program-options" variable
               (:documentation "Options for the arp program."
                :default-value (list "-a"))
                nil [4751 4875])
            ("route-program" variable
               (:documentation "Program to print routing tables."
                :default-value (cond ((eq system-type 'windows-nt) "route") ((executable-find "netstat") "netstat") ((net-utils--executable-find-sbin "netstat")) ((executable-find "ip") "ip") ((net-utils--executable-find-sbin "ip")) (t "ip")))
                nil [4877 5248])
            ("route-program-options" variable
               (:documentation "Options for the route program."
                :default-value (cond ((eq system-type 'windows-nt) (list "print")) ((string-match-p "netstat\\'" route-program) (list "-r")) (t (list "route"))))
                nil [5250 5530])
            ("nslookup-program" variable
               (:documentation "Program to interactively query DNS information."
                :default-value "nslookup")
                nil [5532 5660])
            ("nslookup-program-options" variable (:documentation "Options for the nslookup program.") nil [5662 5786])
            ("nslookup-prompt-regexp" variable
               (:documentation "Regexp to match the nslookup prompt.

This variable is only used if the variable
`comint-use-prompt-regexp' is non-nil."
                :default-value "^> ")
                nil [5788 5989])
            ("dig-program" variable
               (:documentation "Program to query DNS information."
                :default-value "dig")
                nil [5991 6095])
            ("dig-program-options" variable (:documentation "Options for the dig program.") nil [6097 6228])
            ("ftp-program" variable
               (:documentation "Program to run to do FTP transfers."
                :default-value "ftp")
                nil [6230 6336])
            ("ftp-program-options" variable (:documentation "Options for the ftp program.") nil [6338 6452])
            ("ftp-prompt-regexp" variable
               (:documentation "Regexp which matches the FTP program's prompt.

This variable is only used if the variable
`comint-use-prompt-regexp' is non-nil."
                :default-value "^ftp>")
                nil [6454 6662])
            ("smbclient-program" variable
               (:documentation "Smbclient program."
                :default-value "smbclient")
                nil [6664 6765])
            ("smbclient-program-options" variable (:documentation "Options for the smbclient program.") nil [6767 6893])
            ("smbclient-prompt-regexp" variable
               (:documentation "Regexp which matches the smbclient program's prompt.

This variable is only used if the variable
`comint-use-prompt-regexp' is non-nil."
                :default-value "^smb: >")
                nil [6895 7117])
            ("dns-lookup-program" variable
               (:documentation "Program to interactively query DNS information."
                :default-value "host")
                nil [7119 7245])
            ("dns-lookup-program-options" variable (:documentation "Options for the dns-lookup program.") nil [7247 7375])
            ("network-connection-service" variable nil nil [7399 7438])
            ("network-connection-host" variable nil nil [7439 7478])
            ("nslookup-font-lock-keywords" variable
               (:documentation "Expressions to font-lock for nslookup."
                :default-value (list (list "^[A-Za-z0-9 _]+:" 0 'font-lock-type-face) (list "\\<\\(SOA\\|NS\\|MX\\|A\\|CNAME\\)\\>" 1 'font-lock-keyword-face) (list (mapconcat 'identity (make-list 4 "[0-9]+") "\\.") 0 'font-lock-variable-name-face) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat 'identity (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 'font-lock-variable-name-face)))
                nil [7623 8262])
            ("net-utils-font-lock-keywords" variable
               (:documentation "Expressions to font-lock for general network utilities."
                :default-value (list (list (mapconcat 'identity (make-list 4 "[0-9]+") "\\.") 0 'font-lock-variable-name-face) (list (concat "\\( \\([[:xdigit:]]+\\(:\\|::\\)\\)+[[:xdigit:]]+\\)" "\\|" "\\(::[[:xdigit:]]+\\)") 0 'font-lock-variable-name-face) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat 'identity (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 'font-lock-variable-name-face)))
                nil [8421 9055])
            ("define-derived-mode" code nil nil [9057 9343])
            ("net-utils-machine-at-point" function nil nil [9607 9899])
            ("net-utils-url-at-point" function nil nil [9901 10254])
            ("net-utils-remove-ctrl-m-filter" function
               (:documentation "Remove trailing control Ms."
                :arguments ("process" "output-string"))
                nil [10256 10827])
            ("declare-function" code nil nil [10829 10894])
            ("net-utils-run-program" function
               (:documentation "Run a network information program."
                :arguments ("name" "header" "program" "args"))
                nil [10896 11603])
            ("net-utils--revert-cmd" variable nil nil [11819 11853])
            ("net-utils-run-simple" function
               (:documentation "Run a network utility for diagnostic output only."
                :arguments ("buffer" "program-name" "args" "nodisplay"))
                nil [11855 13012])
            ("net-utils--revert-function" function (:arguments ("ignore-auto" "noconfirm")) nil [13014 13451])
            ("ifconfig" function
               (:documentation "Run `ifconfig-program' and display diagnostic output."
                :user-visible-flag t)
                nil [13468 13670])
            ("defalias" code nil nil [13672 13702])
            ("iwconfig" function
               (:documentation "Run `iwconfig-program' and display diagnostic output."
                :user-visible-flag t)
                nil [13719 13921])
            ("netstat" function
               (:documentation "Run `netstat-program' and display diagnostic output."
                :user-visible-flag t)
                nil [13938 14135])
            ("arp" function
               (:documentation "Run `arp-program' and display diagnostic output."
                :user-visible-flag t)
                nil [14152 14329])
            ("route" function
               (:documentation "Run `route-program' and display diagnostic output."
                :user-visible-flag t)
                nil [14346 14533])
            ("traceroute" function
               (:documentation "Run `traceroute-program' for TARGET."
                :user-visible-flag t
                :arguments ("target"))
                nil [14715 15041])
            ("ping" function
               (:documentation "Ping HOST.
If your system's ping continues until interrupted, you can try setting
`ping-program-options'."
                :user-visible-flag t
                :arguments ("host"))
                nil [15058 15533])
            ("nslookup-host" function
               (:documentation "Look up the DNS information for HOST (name or IP address).
Optional argument NAME-SERVER says which server to use for
DNS resolution.
Interactively, prompt for NAME-SERVER if invoked with prefix argument.

This command uses `nslookup-program' for looking up the DNS information."
                :user-visible-flag t
                :arguments ("host" "name-server"))
                nil [15814 16619])
            ("nslookup" function
               (:documentation "Run `nslookup-program'."
                :user-visible-flag t)
                nil [16636 16780])
            ("comint-prompt-regexp" variable nil nil [16782 16811])
            ("comint-input-autoexpand" variable nil nil [16812 16844])
            ("comint-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16846 16884])
            ("nslookup-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'completion-at-point) map)) nil [16886 17004])
            ("define-derived-mode" code nil nil [17060 17353])
            ("dns-lookup-host" function
               (:documentation "Look up the DNS information for HOST (name or IP address).
Optional argument NAME-SERVER says which server to use for
DNS resolution.
Interactively, prompt for NAME-SERVER if invoked with prefix argument.

This command uses `dns-lookup-program' for looking up the DNS information."
                :user-visible-flag t
                :arguments ("host" "name-server"))
                nil [17370 18209])
            ("run-dig" function
               (:documentation "Look up DNS information for HOST (name or IP address).
Optional argument NAME-SERVER says which server to use for
DNS resolution.
Interactively, prompt for NAME-SERVER if invoked with prefix argument.

This command uses `dig-program' for looking up the DNS information."
                :user-visible-flag t
                :arguments ("host" "name-server"))
                nil [18226 19004])
            ("comint-exec" function (:prototype-flag t) nil [19006 19038])
            ("ftp" function
               (:documentation "Run `ftp-program' to connect to HOST."
                :user-visible-flag t
                :arguments ("host"))
                nil [19110 19549])
            ("ftp-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'completion-at-point) map)) nil [19551 19691])
            ("define-derived-mode" code nil nil [19693 20432])
            ("smbclient" function
               (:documentation "Connect to SERVICE on HOST via SMB.

This command uses `smbclient-program' to connect to HOST."
                :user-visible-flag t
                :arguments ("host" "service"))
                nil [20434 21113])
            ("smbclient-list-shares" function
               (:documentation "List services on HOST.
This command uses `smbclient-program' to connect to HOST."
                :user-visible-flag t
                :arguments ("host"))
                nil [21115 21568])
            ("define-derived-mode" code nil nil [21570 22333])
            ("network-connection-service-alist" variable
               (:documentation "Alist of services and associated TCP port numbers.
This list is not complete."
                :default-value (list (cons 'echo 7) (cons 'active-users 11) (cons 'daytime 13) (cons 'chargen 19) (cons 'ftp 21) (cons 'telnet 23) (cons 'smtp 25) (cons 'time 37) (cons 'whois 43) (cons 'gopher 70) (cons 'finger 79) (cons 'www 80) (cons 'pop2 109) (cons 'pop3 110) (cons 'sun-rpc 111) (cons 'nntp 119) (cons 'ntp 123) (cons 'netbios-name 137) (cons 'netbios-data 139) (cons 'irc 194) (cons 'https 443) (cons 'rlogin 513)))
                nil [22560 23235])
            ("run-network-program" function (:arguments ("process-name" "host" "port" "initial-string")) nil [23258 23875])
            ("finger-X.500-host-regexps" variable (:documentation "A list of regular expressions matching host names.
If a host name passed to `finger' matches one of these regular
expressions, it is assumed to be a host that doesn't accept
queries of the form USER@HOST, and wants a query containing USER only.") nil [24020 24373])
            ("finger" function
               (:documentation "Finger USER on HOST.
This command uses `finger-X.500-host-regexps'
and `network-connection-service-alist', which see."
                :user-visible-flag t
                :arguments ("user" "host"))
                nil [24409 25593])
            ("whois-server-name" variable
               (:documentation "Default host name for the whois service."
                :default-value "rs.internic.net")
                nil [25595 25724])
            ("whois-server-list" variable
               (:documentation "A list of whois servers that can be queried."
                :default-value '(("whois.arin.net") ("rs.internic.net") ("whois.publicinterestregistry.net") ("whois.abuse.net") ("whois.apnic.net") ("nic.ddn.mil") ("whois.nic.mil") ("whois.nic.gov") ("whois.ripe.net")))
                nil [25726 26154])
            ("whois-server-tld" variable
               (:documentation "Alist to map top level domains to whois servers."
                :default-value '(("rs.internic.net" . "com") ("whois.publicinterestregistry.net" . "org") ("whois.ripe.net" . "be") ("whois.ripe.net" . "de") ("whois.ripe.net" . "dk") ("whois.ripe.net" . "it") ("whois.ripe.net" . "fi") ("whois.ripe.net" . "fr") ("whois.ripe.net" . "uk") ("whois.apnic.net" . "au") ("whois.apnic.net" . "ch") ("whois.apnic.net" . "hk") ("whois.apnic.net" . "jp") ("whois.nic.gov" . "gov") ("whois.nic.mil" . "mil")))
                nil [26331 26947])
            ("whois-guess-server" variable
               (:documentation "If non-nil then whois will try to deduce the appropriate whois
server from the query.  If the query doesn't look like a domain or hostname
then the server named by `whois-server-name' is used."
                :default-value t)
                nil [26949 27215])
            ("whois-get-tld" function
               (:documentation "Return the top level domain of `host', or nil if it isn't a domain name."
                :arguments ("host"))
                nil [27217 27533])
            ("whois" function
               (:documentation "Send SEARCH-STRING to server defined by the `whois-server-name' variable.
If `whois-guess-server' is non-nil, then try to deduce the correct server
from SEARCH-STRING.  With argument, prompt for whois server.
The port is deduced from `network-connection-service-alist'."
                :user-visible-flag t
                :arguments ("arg" "search-string"))
                nil [27568 28390])
            ("whois-reverse-lookup-server" variable
               (:documentation "Server which provides inverse DNS mapping."
                :default-value "whois.arin.net")
                nil [28392 28532])
            ("whois-reverse-lookup" function nil nil [28549 28686])
            ("define-derived-mode" code nil nil [28896 29044])
            ("network-connection-mode-setup" function (:arguments ("host" "service")) nil [29046 29281])
            ("network-connection-to-service" function
               (:documentation "Open a network connection to SERVICE on HOST.
This command uses `network-connection-service-alist', which see."
                :user-visible-flag t
                :arguments ("host" "service"))
                nil [29298 29823])
            ("network-connection" function
               (:documentation "Open a network connection to HOST on PORT."
                :user-visible-flag t
                :arguments ("host" "port"))
                nil [29840 30020])
            ("network-service-connection" function
               (:documentation "Open a network connection to SERVICE on HOST.
The port to use is determined from `network-connection-service-alist'."
                :arguments ("host" "service"))
                nil [30022 30601])
            ("comint-input-ring" variable nil nil [30603 30629])
            ("network-connection-reconnect" function
               (:documentation "Reconnect a network connection, preserving the old input ring.
This command uses `network-connection-service-alist', which see."
                :user-visible-flag t)
                nil [30631 31399])
            ("net-utils" package nil nil [31401 31421]))          
      :file "net-utils.el.gz"
      :pointmax 31450
      :fsize 7768
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17b6244"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1053 1069])
            ("custom" include nil nil [1117 1134])
            ("ange-ftp-ftp-name-arg" variable nil nil [1136 1166])
            ("ange-ftp-ftp-name-res" variable nil nil [1167 1197])
            ("ange-ftp-name-format" variable nil nil [1198 1227])
            ("tramp-disable-ange-ftp" function (:documentation "Turn Ange-FTP off.
This is useful for unified remoting.  See
`tramp-file-name-structure' for details.  Requests suitable for
Ange-FTP will be forwarded to Ange-FTP.  Also see the variables
`tramp-ftp-method', `tramp-default-method', and
`tramp-default-method-alist'.

This function is not needed in Emacsen which include Tramp, but is
present for backward compatibility.") nil [1279 1917])
            ("eval-after-load" code nil nil [1919 2023])
            ("tramp-ftp-enable-ange-ftp" function (:documentation "Reenable Ange-FTP, when Tramp is unloaded.") nil [2040 3207])
            ("add-hook" code nil nil [3209 3269])
            ("tramp-ftp-method" variable
               (:documentation "When this method name is used, forward all calls to Ange-FTP."
                :constant-flag t
                :default-value "ftp")
                nil [3317 3416])
            ("add-to-list" code nil nil [3477 3533])
            ("add-to-list" code nil nil [3611 3698])
            ("add-to-list" code nil nil [3720 3825])
            ("eval-after-load" code nil nil [3891 4011])
            ("tramp-ftp-file-name-handler" function
               (:documentation "Invoke the Ange-FTP handler for OPERATION.
First arg specifies the OPERATION, second arg is a list of arguments to
pass to the OPERATION."
                :arguments ("operation" "args"))
                nil [4034 6959])
            ("tramp-ftp-file-name-p" function
               (:documentation "Check if it's a filename that should be forwarded to Ange-FTP."
                :arguments ("filename"))
                nil [7118 7321])
            ("add-to-list" code nil nil [7344 7461])
            ("add-hook" code nil nil [7463 7547])
            ("tramp-ftp" package nil nil [7549 7569]))          
      :file "tramp-ftp.el.gz"
      :pointmax 7655
      :fsize 2794
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1134 . 1135) (symbol 1097 . 1114) (open-paren 1096 . 1097)))
    (semanticdb-table "semanticdb-table-17e0e0c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp-version" variable
               (:documentation "This version of Tramp."
                :constant-flag t
                :default-value "2.4.1-pre")
                nil [1385 1448])
            ("tramp-bug-report-address" variable
               (:documentation "Email address to send bug reports to."
                :constant-flag t
                :default-value "tramp-devel@gnu.org")
                nil [1471 1570])
            ("tramp-repository-get-version" function (:documentation "Try to return as a string the repository revision of the Tramp sources.") nil [1572 2049])
            ("let" code nil nil [2079 2310])
            ("add-to-list" code nil nil [2353 2827])
            ("add-hook" code nil nil [2829 2912])
            ("trampver" package nil nil [2914 2933]))          
      :file "trampver.el.gz"
      :pointmax 3027
      :fsize 1507
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-220a4ac"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp-uu-b64-alphabet" variable
               (:documentation "Mapping from base64-encoded character to the byte it represents."
                :constant-flag t
                :default-value "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
                nil [1105 1275])
            ("tramp-uu-b64-char-to-byte" variable
               (:documentation "Alist of mapping from base64 character to its byte."
                :constant-flag t
                :default-value (let ((i 0)) (mapcar (lambda (c) (prog1 (cons c i) (setq i (1+ i)))) tramp-uu-b64-alphabet)))
                nil [1277 1486])
            ("tramp-uu-byte-to-uu-char" function
               (:documentation "Return the character encoding BYTE."
                :arguments ("byte"))
                nil [1488 1602])
            ("tramp-uu-b64-char-to-byte" function
               (:documentation "Return the byte that is encoded as CHAR."
                :arguments ("char"))
                nil [1604 1735])
            ("tramp-uuencode-region" function
               (:documentation "UU-encode the region between BEG and END."
                :arguments ("beg" "end"))
                nil [1758 2987])
            ("add-hook" code nil nil [2989 3072])
            ("tramp-uu" package nil nil [3074 3093]))          
      :file "tramp-uu.el.gz"
      :pointmax 3187
      :fsize 1553
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!net!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
