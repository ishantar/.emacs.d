;; Object semanticdb-project-database-file-1814490
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1814490"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1814470"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "company-statistics-autoloads.el"
      :pointmax 375
      :fsize 1833
      :lastmodtime '(23398 10376 994598 191000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-182a754"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [2055 2073])
            ("company-statistics" customgroup
               (:documentation "Completion candidates ranking by historical statistics."
                :user-visible-flag t)
                nil [2075 2186])
            ("company-statistics-size" variable
               (:documentation "Number of completion choices that `company-statistics' keeps track of.
As this is a global cache, making it too small defeats the purpose."
                :default-value 400)
                nil [2188 2469])
            ("company-statistics-file" variable
               (:documentation "File to save company-statistics state."
                :default-value (concat user-emacs-directory "company-statistics-cache.el"))
                nil [2471 2627])
            ("company-statistics-auto-save" variable
               (:documentation "Whether to save the statistics when leaving emacs."
                :default-value t)
                nil [2629 2743])
            ("company-statistics-auto-restore" variable
               (:documentation "Whether to restore statistics when company-statistics is enabled and has
not been used before."
                :default-value t)
                nil [2745 2906])
            ("company-statistics-capture-context" variable
               (:documentation "Function called with single argument (t if completion started manually).
This is the place to store any context information for a completion run."
                :default-value nil)
                nil [2908 3165])
            ("company-statistics-score-change" variable
               (:documentation "Function called with completion choice.  Using arbitrary other info,
it should produce an alist, each entry labeling a context and the
associated score update: ((ctx-a . 1) (\"str\" . 0.5) (nil . 1)).  Nil is
the global context."
                :default-value nil)
                nil [3167 3501])
            ("company-statistics-score-calc" variable
               (:documentation "Function called with completion candidate.  Using arbitrary other info,
eg, on the current context, it should evaluate to the candidate's score (a
number)."
                :default-value nil)
                nil [3503 3760])
            ("company-statistics--scores" variable (:documentation "Store selection frequency of candidates in given contexts.") nil [3793 3895])
            ("company-statistics--log" variable (:documentation "Ring keeping a log of statistics updates.") nil [3897 3979])
            ("company-statistics--index" variable (:documentation "Index into the log.") nil [3981 4043])
            ("company-statistics--init" function (:documentation "Initialize company-statistics.") nil [4045 4332])
            ("company-statistics--initialized-p" function nil nil [4334 4422])
            ("company-statistics--log-resize" function (:arguments ("_option" "new-size")) nil [4424 5787])
            ("company-statistics--save" function (:documentation "Save statistics.") nil [5789 6333])
            ("company-statistics--maybe-save" function nil nil [6335 6500])
            ("company-statistics--load" function (:documentation "Restore statistics.") nil [6502 6617])
            ("company-statistics-score-change-light" function
               (:documentation "Count for global score and mode context."
                :arguments ("_cand"))
                nil [6692 6840])
            ("company-statistics-score-calc-light" function
               (:documentation "Global score, and bonus for matching major mode."
                :arguments ("cand"))
                nil [6877 7228])
            ("company-statistics--context" variable (:documentation "Current completion context, a list of entries searched using `assoc'.") nil [7230 7344])
            ("company-statistics--last-keyword" function (:documentation "Return last keyword, ie, text of region fontified with the
font-lock-keyword-face up to point, or nil.") nil [7346 8164])
            ("company-statistics--parent-symbol" function (:documentation "Return symbol immediately preceding current completion prefix, or nil.
May be separated by punctuation, but not by whitespace.") nil [8166 8648])
            ("company-statistics--file-name" function (:documentation "Return buffer file name, or nil.") nil [8650 8787])
            ("company-statistics-capture-context-heavy" function
               (:documentation "Calculate some context, once for the whole completion run."
                :arguments ("_manual"))
                nil [8789 9203])
            ("company-statistics-score-change-heavy" function
               (:documentation "Count for global score, mode context, last keyword, parent symbol,
buffer file name."
                :arguments ("_cand"))
                nil [9205 9871])
            ("company-statistics-score-calc-heavy" function
               (:documentation "Global score, and bonus for matching major mode, last keyword, parent
symbol, buffer file name."
                :arguments ("cand"))
                nil [9873 10729])
            ("company-statistics--alist-update" function
               (:documentation "Return new alist with conses from ALIST.  Their cdrs are updated
to (merger cdr update-cdr) if the UPDATES alist contains an entry with an
equal-matching car.  If FILTER called with the result is non-nil, remove
the cons from the result.  If no matching cons exists in ALIST, add the new
one.  ALIST structure and cdrs may be changed!"
                :arguments ("alist" "updates" "merger" "filter"))
                nil [10809 11679])
            ("company-statistics--scores-add" function (:arguments ("cand" "score-updates")) nil [11681 11937])
            ("company-statistics--log-revert" function
               (:documentation "Revert score updates for log entry.  INDEX defaults to
`company-statistics--index'."
                :arguments ("index"))
                nil [11939 12715])
            ("company-statistics--log-store" function
               (:documentation "Insert/overwrite result and associated score updates."
                :arguments ("result" "score-updates"))
                nil [12717 13034])
            ("company-statistics--start" function (:arguments ("manual")) nil [13104 13200])
            ("company-statistics--finished" function
               (:documentation "After completion, update scores and log."
                :arguments ("result"))
                nil [13202 13571])
            ("company-sort-by-statistics" function
               (:documentation "Sort candidates by historical statistics.  Stable sort, so order is only
changed for candidates distinguishable by score."
                :arguments ("candidates"))
                nil [13573 13962])
            ("define-minor-mode" code nil nil [13979 15454])
            ("add-hook" code nil nil [15456 15515])
            ("company-statistics" package nil nil [15517 15546]))          
      :file "company-statistics.el"
      :pointmax 15583
      :fsize 15582
      :lastmodtime '(23398 10376 854596 770000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!company-statistics-20170210.1933!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
