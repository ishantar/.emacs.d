;; Object semanticdb-project-database-file-19053d8
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-19053d8"
  :tables
  (list
    (semanticdb-table "semanticdb-table-19053b8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("doctor--**mad**" variable nil nil [1064 1088])
            ("doctor--*print-space*" variable nil nil [1089 1119])
            ("doctor--*print-upcase*" variable nil nil [1120 1151])
            ("doctor--abuselst" variable nil nil [1152 1177])
            ("doctor--abusewords" variable nil nil [1178 1205])
            ("doctor--afraidof" variable nil nil [1206 1231])
            ("doctor--arerelated" variable nil nil [1232 1259])
            ("doctor--areyou" variable nil nil [1260 1283])
            ("doctor--bak" variable nil nil [1284 1304])
            ("doctor--beclst" variable nil nil [1305 1328])
            ("doctor--bother" variable nil nil [1329 1352])
            ("doctor--bye" variable nil nil [1353 1373])
            ("doctor--canyou" variable nil nil [1374 1397])
            ("doctor--chatlst" variable nil nil [1410 1434])
            ("doctor--continue" variable nil nil [1435 1460])
            ("doctor--deathlst" variable nil nil [1461 1486])
            ("doctor--describe" variable nil nil [1487 1512])
            ("doctor--drnk" variable nil nil [1513 1534])
            ("doctor--drugs" variable nil nil [1535 1557])
            ("doctor--eliza-flag" variable nil nil [1558 1585])
            ("doctor--elizalst" variable nil nil [1586 1611])
            ("doctor--famlst" variable nil nil [1612 1635])
            ("doctor--feared" variable nil nil [1636 1659])
            ("doctor--fears" variable nil nil [1660 1682])
            ("doctor--feelings-about" variable nil nil [1683 1714])
            ("doctor--foullst" variable nil nil [1715 1739])
            ("doctor-found" variable nil nil [1740 1761])
            ("doctor--hello" variable nil nil [1762 1784])
            ("doctor--history" variable nil nil [1785 1809])
            ("doctor--howareyoulst" variable nil nil [1810 1839])
            ("doctor--howdyflag" variable nil nil [1840 1866])
            ("doctor--huhlst" variable nil nil [1867 1890])
            ("doctor--ibelieve" variable nil nil [1891 1916])
            ("doctor--improve" variable nil nil [1917 1941])
            ("doctor--inter" variable nil nil [1942 1964])
            ("doctor--isee" variable nil nil [1965 1986])
            ("doctor--isrelated" variable nil nil [1987 2013])
            ("doctor--lincount" variable nil nil [2014 2039])
            ("doctor--longhuhlst" variable nil nil [2040 2067])
            ("doctor--lover" variable nil nil [2068 2090])
            ("doctor--machlst" variable nil nil [2091 2115])
            ("doctor--mathlst" variable nil nil [2116 2140])
            ("doctor--maybe" variable nil nil [2141 2163])
            ("doctor--moods" variable nil nil [2164 2186])
            ("doctor--neglst" variable nil nil [2187 2210])
            ("doctor-obj" variable nil nil [2211 2230])
            ("doctor-object" variable nil nil [2231 2253])
            ("doctor-owner" variable nil nil [2254 2275])
            ("doctor--please" variable nil nil [2276 2299])
            ("doctor--problems" variable nil nil [2300 2325])
            ("doctor--qlist" variable nil nil [2326 2348])
            ("doctor--random-adjective" variable nil nil [2349 2382])
            ("doctor--relation" variable nil nil [2383 2408])
            ("doctor--remlst" variable nil nil [2409 2432])
            ("doctor--repetitive-shortness" variable nil nil [2433 2470])
            ("doctor--replist" variable nil nil [2471 2495])
            ("doctor--rms-flag" variable nil nil [2496 2521])
            ("doctor--schoollst" variable nil nil [2522 2548])
            ("doctor-sent" variable nil nil [2549 2569])
            ("doctor--sexlst" variable nil nil [2570 2593])
            ("doctor--shortbeclst" variable nil nil [2594 2622])
            ("doctor--shortlst" variable nil nil [2623 2648])
            ("doctor--something" variable nil nil [2649 2675])
            ("doctor--sportslst" variable nil nil [2676 2702])
            ("doctor--stallmanlst" variable nil nil [2703 2731])
            ("doctor--states" variable nil nil [2732 2755])
            ("doctor-subj" variable nil nil [2756 2776])
            ("doctor--suicide-flag" variable nil nil [2777 2806])
            ("doctor--sure" variable nil nil [2807 2828])
            ("doctor--thing" variable nil nil [2829 2851])
            ("doctor--things" variable nil nil [2852 2875])
            ("doctor--thlst" variable nil nil [2876 2898])
            ("doctor--toklst" variable nil nil [2899 2922])
            ("doctor--typos" variable nil nil [2923 2945])
            ("doctor-verb" variable nil nil [2946 2966])
            ("doctor--want" variable nil nil [2967 2988])
            ("doctor--whatwhen" variable nil nil [2989 3014])
            ("doctor--whereoutp" variable nil nil [3015 3041])
            ("doctor--whysay" variable nil nil [3042 3065])
            ("doctor--whywant" variable nil nil [3066 3090])
            ("doctor--zippy-flag" variable nil nil [3091 3118])
            ("doctor--zippylst" variable nil nil [3119 3144])
            ("doc//" function (:arguments ("x")) nil [3146 3165])
            ("doc$" function
               (:documentation "Quoted arg form of doctor-$."
                :arguments ("what"))
                nil [3167 3243])
            ("doctor-$" function
               (:documentation "Return the car of a list, rotating the list each time."
                :arguments ("what"))
                nil [3245 3446])
            ("doctor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "
" 'doctor-read-print) (define-key map "" 'doctor-ret-or-read) map)) nil [3449 3609])
            ("define-derived-mode" code nil nil [3611 4138])
            ("make-doctor-variables" function nil nil [4140 20957])
            ("doctor-meaning" function (:arguments ("x")) nil [21024 21074])
            ("doctor-put-meaning" function
               (:documentation "Store the base meaning of a word on the property list."
                :arguments ("symb" "val"))
                nil [21076 21212])
            ("doctor-put-meaning" code nil nil [21214 21247])
            ("doctor-put-meaning" code nil nil [21248 21278])
            ("doctor-put-meaning" code nil nil [21279 21316])
            ("doctor-put-meaning" code nil nil [21317 21350])
            ("doctor-put-meaning" code nil nil [21351 21384])
            ("doctor-put-meaning" code nil nil [21385 21419])
            ("doctor-put-meaning" code nil nil [21420 21451])
            ("doctor-put-meaning" code nil nil [21452 21484])
            ("doctor-put-meaning" code nil nil [21485 21520])
            ("doctor-put-meaning" code nil nil [21521 21552])
            ("doctor-put-meaning" code nil nil [21553 21587])
            ("doctor-put-meaning" code nil nil [21588 21624])
            ("doctor-put-meaning" code nil nil [21625 21660])
            ("doctor-put-meaning" code nil nil [21661 21694])
            ("doctor-put-meaning" code nil nil [21695 21725])
            ("doctor-put-meaning" code nil nil [21726 21759])
            ("doctor-put-meaning" code nil nil [21760 21794])
            ("doctor-put-meaning" code nil nil [21795 21829])
            ("doctor-put-meaning" code nil nil [21830 21865])
            ("doctor-put-meaning" code nil nil [21866 21897])
            ("doctor-put-meaning" code nil nil [21898 21929])
            ("doctor-put-meaning" code nil nil [21930 21961])
            ("doctor-put-meaning" code nil nil [21962 21993])
            ("doctor-put-meaning" code nil nil [21994 22029])
            ("doctor-put-meaning" code nil nil [22030 22063])
            ("doctor-put-meaning" code nil nil [22064 22094])
            ("doctor-put-meaning" code nil nil [22095 22125])
            ("doctor-put-meaning" code nil nil [22126 22162])
            ("doctor-put-meaning" code nil nil [22163 22193])
            ("doctor-put-meaning" code nil nil [22194 22224])
            ("doctor-put-meaning" code nil nil [22225 22257])
            ("doctor-put-meaning" code nil nil [22258 22289])
            ("doctor-put-meaning" code nil nil [22290 22326])
            ("doctor-put-meaning" code nil nil [22327 22357])
            ("doctor-put-meaning" code nil nil [22358 22388])
            ("doctor-put-meaning" code nil nil [22389 22419])
            ("doctor-put-meaning" code nil nil [22420 22449])
            ("doctor-put-meaning" code nil nil [22450 22485])
            ("doctor-put-meaning" code nil nil [22486 22517])
            ("doctor-put-meaning" code nil nil [22518 22552])
            ("doctor-put-meaning" code nil nil [22553 22584])
            ("doctor-put-meaning" code nil nil [22585 22618])
            ("doctor-put-meaning" code nil nil [22619 22650])
            ("doctor-put-meaning" code nil nil [22651 22682])
            ("doctor-put-meaning" code nil nil [22683 22717])
            ("doctor-put-meaning" code nil nil [22718 22748])
            ("doctor-put-meaning" code nil nil [22749 22779])
            ("doctor-put-meaning" code nil nil [22780 22812])
            ("doctor-put-meaning" code nil nil [22813 22845])
            ("doctor-put-meaning" code nil nil [22846 22880])
            ("doctor-put-meaning" code nil nil [22881 22914])
            ("doctor-put-meaning" code nil nil [22915 22945])
            ("doctor-put-meaning" code nil nil [22946 22978])
            ("doctor-put-meaning" code nil nil [22979 23010])
            ("doctor-put-meaning" code nil nil [23011 23047])
            ("doctor-put-meaning" code nil nil [23048 23083])
            ("doctor-put-meaning" code nil nil [23084 23120])
            ("doctor-put-meaning" code nil nil [23121 23153])
            ("doctor-put-meaning" code nil nil [23154 23186])
            ("doctor-put-meaning" code nil nil [23187 23218])
            ("doctor-put-meaning" code nil nil [23219 23252])
            ("doctor-put-meaning" code nil nil [23253 23287])
            ("doctor-put-meaning" code nil nil [23288 23320])
            ("doctor-put-meaning" code nil nil [23321 23353])
            ("doctor-put-meaning" code nil nil [23354 23386])
            ("doctor-put-meaning" code nil nil [23387 23418])
            ("doctor-put-meaning" code nil nil [23419 23450])
            ("doctor-put-meaning" code nil nil [23451 23481])
            ("doctor-put-meaning" code nil nil [23482 23514])
            ("doctor-put-meaning" code nil nil [23515 23548])
            ("doctor-put-meaning" code nil nil [23549 23580])
            ("doctor-put-meaning" code nil nil [23581 23615])
            ("doctor-put-meaning" code nil nil [23616 23649])
            ("doctor-put-meaning" code nil nil [23650 23684])
            ("doctor-put-meaning" code nil nil [23685 23718])
            ("doctor-put-meaning" code nil nil [23719 23750])
            ("doctor-put-meaning" code nil nil [23751 23783])
            ("doctor-put-meaning" code nil nil [23784 23817])
            ("doctor-put-meaning" code nil nil [23818 23854])
            ("doctor-put-meaning" code nil nil [23855 23886])
            ("doctor-put-meaning" code nil nil [23887 23919])
            ("doctor-put-meaning" code nil nil [23920 23954])
            ("doctor-put-meaning" code nil nil [23955 23989])
            ("doctor-put-meaning" code nil nil [23990 24023])
            ("doctor-put-meaning" code nil nil [24024 24059])
            ("doctor-put-meaning" code nil nil [24060 24092])
            ("doctor-put-meaning" code nil nil [24093 24126])
            ("doctor-put-meaning" code nil nil [24127 24162])
            ("doctor-put-meaning" code nil nil [24163 24196])
            ("doctor-put-meaning" code nil nil [24197 24233])
            ("doctor-put-meaning" code nil nil [24234 24267])
            ("doctor-put-meaning" code nil nil [24268 24303])
            ("doctor-put-meaning" code nil nil [24304 24337])
            ("doctor-put-meaning" code nil nil [24338 24373])
            ("doctor-put-meaning" code nil nil [24374 24407])
            ("doctor-put-meaning" code nil nil [24408 24441])
            ("doctor-put-meaning" code nil nil [24442 24476])
            ("doctor-put-meaning" code nil nil [24477 24513])
            ("doctor-put-meaning" code nil nil [24514 24548])
            ("doctor-put-meaning" code nil nil [24549 24585])
            ("doctor-put-meaning" code nil nil [24586 24620])
            ("doctor-put-meaning" code nil nil [24621 24655])
            ("doctor-put-meaning" code nil nil [24656 24689])
            ("doctor-put-meaning" code nil nil [24690 24727])
            ("doctor-put-meaning" code nil nil [24728 24764])
            ("doctor-put-meaning" code nil nil [24765 24799])
            ("doctor-put-meaning" code nil nil [24800 24832])
            ("doctor-put-meaning" code nil nil [24833 24867])
            ("doctor-put-meaning" code nil nil [24868 24902])
            ("doctor-put-meaning" code nil nil [24903 24937])
            ("doctor-put-meaning" code nil nil [24938 24971])
            ("doctor-put-meaning" code nil nil [24972 25004])
            ("doctor-put-meaning" code nil nil [25005 25035])
            ("doctor-put-meaning" code nil nil [25036 25069])
            ("doctor-put-meaning" code nil nil [25070 25104])
            ("doctor-put-meaning" code nil nil [25105 25138])
            ("doctor-put-meaning" code nil nil [25139 25175])
            ("doctor-put-meaning" code nil nil [25176 25207])
            ("doctor-put-meaning" code nil nil [25208 25241])
            ("doctor-put-meaning" code nil nil [25242 25279])
            ("doctor-put-meaning" code nil nil [25280 25319])
            ("doctor-put-meaning" code nil nil [25320 25357])
            ("doctor-put-meaning" code nil nil [25358 25394])
            ("doctor-put-meaning" code nil nil [25395 25429])
            ("doctor-put-meaning" code nil nil [25430 25465])
            ("doctor-put-meaning" code nil nil [25466 25500])
            ("doctor-put-meaning" code nil nil [25501 25536])
            ("doctor-put-meaning" code nil nil [25537 25571])
            ("doctor-put-meaning" code nil nil [25572 25607])
            ("doctor-put-meaning" code nil nil [25608 25648])
            ("doctor-put-meaning" code nil nil [25649 25685])
            ("doctor-put-meaning" code nil nil [25686 25719])
            ("doctor-put-meaning" code nil nil [25720 25755])
            ("doctor-put-meaning" code nil nil [25756 25789])
            ("doctor-put-meaning" code nil nil [25790 25825])
            ("doctor-put-meaning" code nil nil [25826 25863])
            ("doctor-put-meaning" code nil nil [25864 25900])
            ("doctor-put-meaning" code nil nil [25901 25936])
            ("doctor-put-meaning" code nil nil [25937 25973])
            ("doctor-put-meaning" code nil nil [25974 26010])
            ("doctor-put-meaning" code nil nil [26011 26046])
            ("doctor-put-meaning" code nil nil [26047 26082])
            ("doctor-put-meaning" code nil nil [26083 26118])
            ("doctor-put-meaning" code nil nil [26119 26155])
            ("doctor-put-meaning" code nil nil [26156 26193])
            ("doctor-put-meaning" code nil nil [26194 26234])
            ("doctor-put-meaning" code nil nil [26235 26275])
            ("doctor-put-meaning" code nil nil [26276 26313])
            ("doctor-put-meaning" code nil nil [26314 26351])
            ("doctor-put-meaning" code nil nil [26352 26384])
            ("doctor-put-meaning" code nil nil [26385 26419])
            ("doctor-put-meaning" code nil nil [26420 26455])
            ("doctor-put-meaning" code nil nil [26456 26491])
            ("doctor-put-meaning" code nil nil [26492 26528])
            ("doctor-put-meaning" code nil nil [26529 26561])
            ("doctor-put-meaning" code nil nil [26562 26595])
            ("doctor-put-meaning" code nil nil [26596 26631])
            ("doctor-put-meaning" code nil nil [26632 26663])
            ("doctor-put-meaning" code nil nil [26664 26696])
            ("doctor-put-meaning" code nil nil [26697 26729])
            ("doctor-put-meaning" code nil nil [26730 26762])
            ("doctor-put-meaning" code nil nil [26763 26796])
            ("doctor-put-meaning" code nil nil [26797 26831])
            ("doctor-put-meaning" code nil nil [26832 26867])
            ("doctor-put-meaning" code nil nil [26868 26903])
            ("doctor-put-meaning" code nil nil [26904 26940])
            ("doctor-put-meaning" code nil nil [26941 26976])
            ("doctor-put-meaning" code nil nil [26977 27014])
            ("doctor-put-meaning" code nil nil [27015 27057])
            ("doctor-put-meaning" code nil nil [27058 27097])
            ("doctor-put-meaning" code nil nil [27098 27134])
            ("doctor-put-meaning" code nil nil [27135 27173])
            ("doctor-put-meaning" code nil nil [27174 27210])
            ("doctor-put-meaning" code nil nil [27211 27247])
            ("doctor-put-meaning" code nil nil [27248 27287])
            ("doctor-put-meaning" code nil nil [27288 27323])
            ("doctor-put-meaning" code nil nil [27324 27364])
            ("doctor-put-meaning" code nil nil [27365 27400])
            ("doctor-put-meaning" code nil nil [27401 27434])
            ("doctor-put-meaning" code nil nil [27435 27468])
            ("doctor-put-meaning" code nil nil [27469 27504])
            ("doctor-put-meaning" code nil nil [27505 27542])
            ("doctor-put-meaning" code nil nil [27543 27580])
            ("doctor-put-meaning" code nil nil [27581 27615])
            ("doctor-put-meaning" code nil nil [27616 27650])
            ("doctor-put-meaning" code nil nil [27651 27688])
            ("doctor-put-meaning" code nil nil [27689 27725])
            ("doctor-put-meaning" code nil nil [27726 27760])
            ("doctor-put-meaning" code nil nil [27761 27797])
            ("doctor-put-meaning" code nil nil [27798 27833])
            ("doctor-put-meaning" code nil nil [27834 27872])
            ("doctor-put-meaning" code nil nil [27873 27910])
            ("doctor-put-meaning" code nil nil [27911 27945])
            ("doctor-put-meaning" code nil nil [27946 27981])
            ("doctor-put-meaning" code nil nil [27982 28016])
            ("doctor-put-meaning" code nil nil [28017 28054])
            ("doctor-put-meaning" code nil nil [28055 28091])
            ("doctor-put-meaning" code nil nil [28092 28128])
            ("doctor-put-meaning" code nil nil [28129 28164])
            ("doctor-put-meaning" code nil nil [28165 28199])
            ("doctor-put-meaning" code nil nil [28200 28230])
            ("doctor-put-meaning" code nil nil [28231 28265])
            ("doctor-put-meaning" code nil nil [28266 28300])
            ("doctor-put-meaning" code nil nil [28301 28334])
            ("doctor-put-meaning" code nil nil [28335 28366])
            ("doctor-put-meaning" code nil nil [28367 28400])
            ("doctor-put-meaning" code nil nil [28401 28431])
            ("doctor-put-meaning" code nil nil [28432 28462])
            ("doctor-put-meaning" code nil nil [28463 28495])
            ("doctor-put-meaning" code nil nil [28496 28527])
            ("doctor-put-meaning" code nil nil [28528 28563])
            ("doctor-put-meaning" code nil nil [28564 28596])
            ("doctor-put-meaning" code nil nil [28597 28629])
            ("doctor-put-meaning" code nil nil [28630 28659])
            ("doctor-put-meaning" code nil nil [28660 28694])
            ("doctor-put-meaning" code nil nil [28695 28730])
            ("doctor-put-meaning" code nil nil [28731 28767])
            ("doctor-put-meaning" code nil nil [28768 28802])
            ("doctor-put-meaning" code nil nil [28803 28837])
            ("doctor-put-meaning" code nil nil [28838 28873])
            ("doctor-put-meaning" code nil nil [28874 28910])
            ("doctor-put-meaning" code nil nil [28911 28948])
            ("doctor-put-meaning" code nil nil [28949 28985])
            ("doctor-put-meaning" code nil nil [28986 29024])
            ("doctor-put-meaning" code nil nil [29025 29058])
            ("doctor-put-meaning" code nil nil [29059 29093])
            ("doctor-put-meaning" code nil nil [29094 29133])
            ("doctor-put-meaning" code nil nil [29134 29166])
            ("doctor-put-meaning" code nil nil [29167 29200])
            ("doctor-put-meaning" code nil nil [29201 29234])
            ("doctor-put-meaning" code nil nil [29235 29267])
            ("doctor-put-meaning" code nil nil [29268 29301])
            ("doctor-put-meaning" code nil nil [29302 29340])
            ("doctor-put-meaning" code nil nil [29341 29375])
            ("doctor-put-meaning" code nil nil [29376 29414])
            ("doctor-put-meaning" code nil nil [29415 29452])
            ("doctor-put-meaning" code nil nil [29453 29492])
            ("doctor-put-meaning" code nil nil [29493 29530])
            ("doctor-put-meaning" code nil nil [29531 29567])
            ("doctor-put-meaning" code nil nil [29568 29600])
            ("doctor-put-meaning" code nil nil [29601 29640])
            ("doctor-put-meaning" code nil nil [29641 29676])
            ("doctor-put-meaning" code nil nil [29677 29714])
            ("doctor-put-meaning" code nil nil [29715 29750])
            ("doctor-put-meaning" code nil nil [29751 29788])
            ("doctor-put-meaning" code nil nil [29789 29824])
            ("doctor-put-meaning" code nil nil [29825 29862])
            ("doctor-put-meaning" code nil nil [29863 29896])
            ("doctor-put-meaning" code nil nil [29897 29932])
            ("doctor-put-meaning" code nil nil [29933 29972])
            ("doctor-put-meaning" code nil nil [29973 30004])
            ("doctor-put-meaning" code nil nil [30005 30043])
            ("doctor-put-meaning" code nil nil [30044 30083])
            ("doctor-put-meaning" code nil nil [30084 30118])
            ("doctor-put-meaning" code nil nil [30119 30151])
            ("doctor-put-meaning" code nil nil [30152 30184])
            ("doctor-put-meaning" code nil nil [30185 30219])
            ("doctor-put-meaning" code nil nil [30220 30256])
            ("doctor-put-meaning" code nil nil [30257 30288])
            ("doctor-put-meaning" code nil nil [30289 30328])
            ("doctor-put-meaning" code nil nil [30329 30369])
            ("doctor-put-meaning" code nil nil [30370 30405])
            ("doctor-put-meaning" code nil nil [30406 30442])
            ("doctor-put-meaning" code nil nil [30443 30478])
            ("doctor-put-meaning" code nil nil [30479 30516])
            ("doctor-put-meaning" code nil nil [30517 30550])
            ("doctor-put-meaning" code nil nil [30551 30584])
            ("doctor-put-meaning" code nil nil [30585 30620])
            ("doctor-put-meaning" code nil nil [30621 30652])
            ("doctor" function
               (:documentation "Switch to *doctor* buffer and start giving psychotherapy."
                :user-visible-flag t)
                nil [30670 30813])
            ("doctor-ret-or-read" function
               (:documentation "Insert a newline if preceding character is not a newline.
Otherwise call the Doctor to parse preceding sentence."
                :user-visible-flag t
                :arguments ("arg"))
                nil [30815 31061])
            ("doctor-read-print" function
               (:documentation "Top level loop."
                :user-visible-flag t)
                nil [31063 31292])
            ("doctor-readin" function (:documentation "Read a sentence.  Return it as a list of words.") nil [31294 31520])
            ("doctor-read-token" function (:documentation "Read one word from buffer.") nil [31522 31737])
            ("doctor-doc" function nil nil [31804 34463])
            ("doctor-correct-spelling" function
               (:documentation "Correct the spelling and expand each word in sentence."
                :arguments ("sent"))
                nil [34514 34804])
            ("doctor-shorten" function
               (:documentation "Make a sentence manageably short using a few hacks."
                :arguments ("sent"))
                nil [34806 35202])
            ("doctor-define" function (:arguments ("sent" "found")) nil [35204 35469])
            ("doctor-defq" function
               (:documentation "Set global var DOCTOR-FOUND to first keyword found in sentence SENT."
                :arguments ("sent"))
                nil [35471 35858])
            ("doctor-def" function (:arguments ("x")) nil [35860 35958])
            ("doctor-forget" function (:documentation "Delete the last element of the history list.") nil [35960 36100])
            ("doctor-query" function
               (:documentation "Prompt for a line of input from the minibuffer until a noun or verb is seen.
Put dialogue in buffer."
                :arguments ("x"))
                nil [36102 36696])
            ("doctor-subjsearch" function
               (:documentation "Search for the subject of a sentence SENT, looking for the noun closest
to and preceding KEY by at least TYPE words.  Set global variable doctor-subj to
the subject noun, and return the portion of the sentence following it."
                :arguments ("sent" "key" "type"))
                nil [36698 37238])
            ("doctor-nounp" function
               (:documentation "Return t if the symbol argument is a noun."
                :arguments ("x"))
                nil [37240 37446])
            ("doctor-pronounp" function
               (:documentation "Return t if the symbol argument is a pronoun."
                :arguments ("x"))
                nil [37448 37804])
            ("dolist" code nil nil [37806 40755])
            ("doctor-verbp" function (:arguments ("x")) nil [40757 40846])
            ("doctor-plural" function
               (:documentation "Form the plural of the word argument."
                :arguments ("x"))
                nil [40848 41234])
            ("doctor-setprep" function (:arguments ("sent" "key")) nil [41236 41608])
            ("doctor-getnoun" function (:arguments ("x")) nil [41610 42380])
            ("doctor-modifierp" function (:arguments ("x")) nil [42382 42496])
            ("doctor-adjectivep" function (:arguments ("x")) nil [42498 42678])
            ("doctor-adverbp" function (:arguments ("xx")) nil [42680 42886])
            ("doctor-articlep" function (:arguments ("x")) nil [42888 42938])
            ("doctor-nmbrp" function (:arguments ("x")) nil [42940 43282])
            ("doctor-colorp" function (:arguments ("x")) nil [43284 43435])
            ("doctor-sizep" function (:arguments ("x")) nil [43437 43538])
            ("doctor-possessivepronounp" function (:arguments ("x")) nil [43540 43617])
            ("doctor-othermodifierp" function (:arguments ("x")) nil [43619 44029])
            ("doctor-prepp" function (:arguments ("x")) nil [44031 44281])
            ("doctor-remember" function (:arguments ("thing")) nil [44283 44452])
            ("doctor-type" function (:arguments ("x")) nil [44454 44539])
            ("doctor-fixup" function (:arguments ("sent")) nil [44541 44934])
            ("doctor-fix-2" function (:arguments ("sent")) nil [44936 46034])
            ("doctor-vowelp" function (:arguments ("x")) nil [46036 46090])
            ("doctor-replace" function
               (:documentation "Replace any element of SENT that is the car of a replacement
element pair in RLIST."
                :arguments ("sent" "rlist"))
                nil [46092 46384])
            ("doctor-wherego" function (:arguments ("sent")) nil [46386 46666])
            ("doctor-svo" function
               (:documentation "Find subject, verb and object in sentence SENT with focus on word KEY.
TYPE is number of words preceding KEY to start looking for subject.
MEM is t if results are to be put on Doctor's memory stack.
Return in the global variables DOCTOR-SUBJ, DOCTOR-VERB, DOCTOR-OBJECT,
and DOCTOR-OBJ."
                :arguments ("sent" "key" "type" "mem"))
                nil [46668 47446])
            ("doctor-possess" function
               (:documentation "Set possessive in SENT for keyword KEY.
Hack on previous word, setting global variable DOCTOR-OWNER to correct result."
                :arguments ("sent" "key"))
                nil [47448 47877])
            ("doctor-txtype" function
               (:documentation "Output to buffer a list of symbols or strings as a sentence."
                :arguments ("ans"))
                nil [47903 48104])
            ("doctor-type-symbol" function
               (:documentation "Output a symbol to the buffer with some fancy case and spacing hacks."
                :arguments ("word"))
                nil [48106 48723])
            ("doctor-build" function
               (:documentation "Make a symbol out of the concatenation of the two non-list arguments."
                :arguments ("str1" "str2"))
                nil [48725 49004])
            ("doctor-make-string" function (:arguments ("obj")) nil [49006 49147])
            ("doctor-concat" function
               (:documentation "Like append, but force atomic arguments to be lists."
                :arguments ("x" "y"))
                nil [49149 49316])
            ("doctor-assm" function (:arguments ("proto")) nil [49318 49551])
            ("doctor-go" function
               (:documentation "Call a `doctor-*' function."
                :arguments ("destination"))
                nil [49619 49755])
            ("doctor-desire1" function nil nil [49757 49821])
            ("doctor-huh" function nil nil [49823 49963])
            ("doctor-rthing" function nil nil [49965 50024])
            ("doctor-remem" function nil nil [50026 50140])
            ("doctor-howdy" function nil nil [50142 50475])
            ("doctor-when" function nil nil [50477 50750])
            ("doctor-conj" function nil nil [50752 51217])
            ("doctor-short" function nil nil [51219 52286])
            ("doctor-alcohol" function nil nil [52288 52347])
            ("doctor-desire" function nil nil [52349 53003])
            ("doctor-drug" function nil nil [53005 53115])
            ("doctor-toke" function nil nil [53117 53177])
            ("doctor-state" function nil nil [53179 53289])
            ("doctor-mood" function nil nil [53291 53399])
            ("doctor-fear" function nil nil [53401 53591])
            ("doctor-hate" function nil nil [53593 53909])
            ("doctor-symptoms" function nil nil [53911 54045])
            ("doctor-hates" function nil nil [54047 54132])
            ("doctor-hates1" function nil nil [54134 54244])
            ("doctor-loves" function nil nil [54246 54331])
            ("doctor-qloves" function nil nil [54333 54443])
            ("doctor-love" function nil nil [54445 55338])
            ("doctor-mach" function nil nil [55340 55452])
            ("doctor-sexnoun" function nil nil [55454 55496])
            ("doctor-sexverb" function nil nil [55498 55667])
            ("doctor-death" function nil nil [55669 56393])
            ("doctor-foul" function nil nil [56395 56456])
            ("doctor-family" function nil nil [56458 56564])
            ("doctor-rms" function nil nil [56655 56817])
            ("doctor-school" function nil nil [56819 56883])
            ("doctor-eliza" function nil nil [56885 57114])
            ("doctor-sports" function nil nil [57116 57179])
            ("doctor-math" function nil nil [57181 57240])
            ("doctor-zippy" function nil nil [57242 57418])
            ("doctor-chat" function nil nil [57421 57480])
            ("doctor" package nil nil [57482 57499]))          
      :file "doctor.el.gz"
      :pointmax 57525
      :fsize 14622
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1982f40"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [945 962])
            ("gamegrid" include nil nil [965 984])
            ("tetris" customgroup
               (:documentation "Play a game of Tetris."
                :user-visible-flag t)
                nil [1066 1150])
            ("tetris-use-glyphs" variable
               (:documentation "Non-nil means use glyphs when available."
                :default-value t)
                nil [1152 1262])
            ("tetris-use-color" variable
               (:documentation "Non-nil means use color when available."
                :default-value t)
                nil [1264 1372])
            ("tetris-draw-border-with-glyphs" variable
               (:documentation "Non-nil means draw a border even when using glyphs."
                :default-value t)
                nil [1374 1508])
            ("tetris-default-tick-period" variable
               (:documentation "The default time taken for a shape to drop one row."
                :default-value 0.3)
                nil [1510 1641])
            ("tetris-update-speed-function" variable
               (:documentation "Function run whenever the Tetris score changes.
Called with two arguments: (SHAPES ROWS)
SHAPES is the number of shapes which have been dropped.
ROWS is the number of rows which have been completed.

If the return value is a number, it is used as the timer period."
                :default-value 'tetris-default-update-speed-function)
                nil [1643 2027])
            ("tetris-mode-hook" variable (:documentation "Hook run upon starting Tetris.") nil [2029 2127])
            ("tetris-tty-colors" variable
               (:documentation "Vector of colors of the various shapes in text mode."
                :default-value ["blue" "white" "yellow" "magenta" "cyan" "green" "red"])
                nil [2129 2488])
            ("tetris-x-colors" variable
               (:documentation "Vector of RGB colors of the various shapes."
                :default-value [[0 0 1] [0.7 0 1] [1 1 0] [1 0 1] [0 1 1] [0 1 0] [1 0 0]])
                nil [2490 3079])
            ("tetris-buffer-name" variable
               (:documentation "Name used for Tetris buffer."
                :default-value "*Tetris*")
                nil [3081 3188])
            ("tetris-buffer-width" variable
               (:documentation "Width of used portion of buffer."
                :default-value 30)
                nil [3190 3294])
            ("tetris-buffer-height" variable
               (:documentation "Height of used portion of buffer."
                :default-value 22)
                nil [3296 3402])
            ("tetris-width" variable
               (:documentation "Width of playing area."
                :default-value 10)
                nil [3404 3491])
            ("tetris-height" variable
               (:documentation "Height of playing area."
                :default-value 20)
                nil [3493 3582])
            ("tetris-top-left-x" variable
               (:documentation "X position of top left of playing area."
                :default-value 3)
                nil [3584 3692])
            ("tetris-top-left-y" variable
               (:documentation "Y position of top left of playing area."
                :default-value 1)
                nil [3694 3802])
            ("tetris-next-x" variable
               (:documentation "X position of next shape."
                :default-value (+ (* 2 tetris-top-left-x) tetris-width))
                nil [3804 3897])
            ("tetris-next-y" variable
               (:documentation "Y position of next shape."
                :default-value tetris-top-left-y)
                nil [3899 3969])
            ("tetris-score-x" variable
               (:documentation "X position of score."
                :default-value tetris-next-x)
                nil [3971 4033])
            ("tetris-score-y" variable
               (:documentation "Y position of score."
                :default-value (+ tetris-next-y 6))
                nil [4035 4103])
            ("tetris-score-file" variable
               (:documentation "File for holding high scores."
                :default-value "tetris-scores")
                nil [4233 4443])
            ("tetris-blank-options" variable (:default-value '(((glyph colorize) (t 32)) ((color-x color-x) (mono-x grid-x) (color-tty color-tty)) (((glyph color-x) [0 0 0]) (color-tty "black")))) nil [4525 4722])
            ("tetris-cell-options" variable (:default-value '(((glyph colorize) (emacs-tty 79) (t 32)) ((color-x color-x) (mono-x mono-x) (color-tty color-tty) (mono-tty mono-tty)))) nil [4724 4990])
            ("tetris-border-options" variable (:default-value '(((glyph colorize) (t 43)) ((color-x color-x) (mono-x grid-x) (color-tty color-tty)) (((glyph color-x) [0.5 0.5 0.5]) (color-tty "white")))) nil [4992 5194])
            ("tetris-space-options" variable (:default-value '(((t 32)) nil nil)) nil [5196 5258])
            ("tetris-shapes" variable
               (:documentation "Each shape is described by a vector that contains the coordinates of
each one of its four blocks."
                :constant-flag t
                :default-value [[[[0 0] [1 0] [0 1] [1 1]]] [[[0 0] [1 0] [2 0] [2 1]] [[1 -1] [1 0] [1 1] [0 1]] [[0 -1] [0 0] [1 0] [2 0]] [[1 -1] [2 -1] [1 0] [1 1]]] [[[0 0] [1 0] [2 0] [0 1]] [[0 -1] [1 -1] [1 0] [1 1]] [[2 -1] [0 0] [1 0] [2 0]] [[1 -1] [1 0] [1 1] [2 1]]] [[[0 0] [1 0] [1 1] [2 1]] [[1 0] [0 1] [1 1] [0 2]]] [[[1 0] [2 0] [0 1] [1 1]] [[0 0] [0 1] [1 1] [1 2]]] [[[1 0] [0 1] [1 1] [2 1]] [[1 0] [1 1] [2 1] [1 2]] [[0 1] [1 1] [2 1] [1 2]] [[1 0] [0 1] [1 1] [1 2]]] [[[0 0] [1 0] [2 0] [3 0]] [[1 -1] [1 0] [1 1] [1 2]]]])
                nil [5340 6126])
            ("tetris-shape-scores" variable
               (:constant-flag t
                :default-value [[6] [6 7 6 7] [6 7 6 7] [6 7] [6 7] [5 5 6 5] [5 8]])
                nil [6232 6319])
            ("tetris-shape-dimensions" variable
               (:constant-flag t
                :default-value [[2 2] [3 2] [3 2] [3 2] [3 2] [3 2] [4 1]])
                nil [6321 6401])
            ("tetris-blank" variable
               (:constant-flag t
                :default-value 7)
                nil [6403 6428])
            ("tetris-border" variable
               (:constant-flag t
                :default-value 8)
                nil [6430 6456])
            ("tetris-space" variable
               (:constant-flag t
                :default-value 9)
                nil [6458 6483])
            ("tetris-default-update-speed-function" function (:arguments ("_shapes" "rows")) nil [6485 6569])
            ("tetris-shape" variable nil nil [6651 6674])
            ("tetris-rot" variable nil nil [6675 6696])
            ("tetris-next-shape" variable nil nil [6697 6725])
            ("tetris-n-shapes" variable nil nil [6726 6752])
            ("tetris-n-rows" variable nil nil [6753 6777])
            ("tetris-score" variable nil nil [6778 6801])
            ("tetris-pos-x" variable nil nil [6802 6825])
            ("tetris-pos-y" variable nil nil [6826 6849])
            ("tetris-paused" variable nil nil [6850 6876])
            ("make-variable-buffer-local" code nil nil [6878 6920])
            ("make-variable-buffer-local" code nil nil [6921 6961])
            ("make-variable-buffer-local" code nil nil [6962 7009])
            ("make-variable-buffer-local" code nil nil [7010 7055])
            ("make-variable-buffer-local" code nil nil [7056 7099])
            ("make-variable-buffer-local" code nil nil [7100 7142])
            ("make-variable-buffer-local" code nil nil [7143 7185])
            ("make-variable-buffer-local" code nil nil [7186 7228])
            ("make-variable-buffer-local" code nil nil [7229 7272])
            ("tetris-mode-map" variable (:default-value (let ((map (make-sparse-keymap 'tetris-mode-map))) (define-key map "n" 'tetris-start-game) (define-key map "q" 'tetris-end-game) (define-key map "p" 'tetris-pause-game) (define-key map " " 'tetris-move-bottom) (define-key map [left] 'tetris-move-left) (define-key map [right] 'tetris-move-right) (define-key map [up] 'tetris-rotate-prev) (define-key map [down] 'tetris-move-down) map)) nil [7354 7806])
            ("tetris-null-map" variable (:default-value (let ((map (make-sparse-keymap 'tetris-null-map))) (define-key map "n" 'tetris-start-game) map)) nil [7808 7939])
            ("tetris-display-options" function nil nil [8021 8647])
            ("tetris-get-tick-period" function nil nil [8649 8865])
            ("tetris-get-shape-cell" function (:arguments ("block")) nil [8867 9001])
            ("tetris-shape-width" function nil nil [9003 9087])
            ("tetris-shape-rotations" function nil nil [9089 9167])
            ("tetris-draw-score" function nil nil [9169 9617])
            ("tetris-update-score" function nil nil [9619 9759])
            ("tetris-new-shape" function nil nil [9761 10108])
            ("tetris-draw-next-shape" function nil nil [10110 10649])
            ("tetris-draw-shape" function nil nil [10651 11032])
            ("tetris-erase-shape" function nil nil [11034 11416])
            ("tetris-test-shape" function nil nil [11418 12015])
            ("tetris-full-row" function (:arguments ("y")) nil [12017 12270])
            ("tetris-shift-row" function (:arguments ("y")) nil [12272 12707])
            ("tetris-shift-down" function nil nil [12709 12924])
            ("tetris-draw-border-p" function nil nil [12926 13041])
            ("tetris-init-buffer" function nil nil [13043 14037])
            ("tetris-reset-game" function nil nil [14039 14314])
            ("tetris-shape-done" function nil nil [14316 14559])
            ("tetris-update-game" function
               (:documentation "Called on each clock tick.
Drops the shape one square, testing for collision."
                :arguments ("tetris-buffer"))
                nil [14561 14978])
            ("tetris-move-bottom" function
               (:documentation "Drop the shape to the bottom of the playing area."
                :user-visible-flag t)
                nil [14980 15358])
            ("tetris-move-left" function
               (:documentation "Move the shape one square to the left."
                :user-visible-flag t)
                nil [15360 15637])
            ("tetris-move-right" function
               (:documentation "Move the shape one square to the right."
                :user-visible-flag t)
                nil [15639 15911])
            ("tetris-move-down" function
               (:documentation "Move the shape one square to the bottom."
                :user-visible-flag t)
                nil [15913 16185])
            ("tetris-rotate-prev" function
               (:documentation "Rotate the shape clockwise."
                :user-visible-flag t)
                nil [16187 16573])
            ("tetris-rotate-next" function
               (:documentation "Rotate the shape anticlockwise."
                :user-visible-flag t)
                nil [16575 16979])
            ("tetris-end-game" function
               (:documentation "Terminate the current game."
                :user-visible-flag t)
                nil [16981 17167])
            ("tetris-start-game" function
               (:documentation "Start a new game of Tetris."
                :user-visible-flag t)
                nil [17169 17437])
            ("tetris-pause-game" function
               (:documentation "Pause (or resume) the current game."
                :user-visible-flag t)
                nil [17439 17632])
            ("tetris-active-p" function nil nil [17634 17703])
            ("put" code nil nil [17705 17744])
            ("define-derived-mode" code nil nil [17746 18438])
            ("tetris" function
               (:documentation "Play the Tetris game.
Shapes drop from the top of the screen, and the user has to move and
rotate the shape to fit in with those at the bottom of the screen so
as to form complete rows.

tetris-mode keybindings:
   \\<tetris-mode-map>
\\[tetris-start-game]	Starts a new game of Tetris
\\[tetris-end-game]	Terminates the current game
\\[tetris-pause-game]	Pauses (or resumes) the current game
\\[tetris-move-left]	Moves the shape one square to the left
\\[tetris-move-right]	Moves the shape one square to the right
\\[tetris-rotate-prev]	Rotates the shape clockwise
\\[tetris-rotate-next]	Rotates the shape anticlockwise
\\[tetris-move-bottom]	Drops the shape to the bottom of the playing area

"
                :user-visible-flag t)
                nil [18455 19377])
            ("tetris" package nil nil [19379 19396]))          
      :file "tetris.el.gz"
      :pointmax 19422
      :fsize 4597
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 962 . 963) (symbol 927 . 944) (open-paren 926 . 927))))
  :file "!usr!local!share!emacs!27.0.50!lisp!play!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
