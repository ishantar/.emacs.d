;; Object semanticdb-project-database-file-169c19c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-169c19c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-169c17c"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "matlab-mode-autoloads.el"
      :pointmax 361
      :fsize 7625
      :lastmodtime '(23398 9674 467428 918000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17cf888"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tlc-version" variable
               (:documentation "The current version of TLC mode."
                :default-value "1.2")
                nil [165 228])
            ("tlc-version" function
               (:documentation "Display the current version of TLC mode."
                :user-visible-flag t)
                nil [1523 1630])
            ("tlc" customgroup
               (:documentation "Major mode for editing tlc files."
                :user-visible-flag t)
                nil [1632 1708])
            ("tlc-syntax-table" variable (:documentation "Syntax table used in an TLC file.") nil [1710 1777])
            ("unless" code nil nil [1779 2182])
            ("tlc-mode-map" variable
               (:documentation "Keymap for `tlc-mode'."
                :default-value (let ((km (make-sparse-keymap))) (define-key km "" 'tlc-return) (define-key km [return] 'tlc-return) (define-key km "	" 'tlc-indent) km))
                nil [2184 2395])
            ("tlc-font-lock-output-code" variable
               (:documentation "Face for output code."
                :default-value 'tlc-font-lock-output-code)
                nil [2397 2484])
            ("tlc-font-lock-output-code" variable
               (:documentation "Font Lock mode face used to highlight tlc keywords."
                :default-value '((((class grayscale) (background light)) (:foreground "DimGray" :underline t)) (((class grayscale) (background dark)) (:foreground "LightGray" :underline t)) (((class color) (background light)) (:foreground "DarkGreen")) (((class color) (background dark)) (:foreground "chartreuse")) (t (:underline t)))
                :type "face")
                nil [2486 2925])
            ("tlc-keywords" variable
               (:documentation "Keywords to highlight in TLC."
                :default-value '("CAST" "EXISTS" "FEVAL" "FILE_EXISTS" "FORMAT" "FIELDNAMES" "GETFIELD" "GENERATE" "GENERATE_FILENAME" "GENERATE_FORMATTED_VALUE" "GENERATE_FUNCTION_EXISTS" "GENERATE_TYPE" "GENERATE_TYPE_FUNCTION_EXISTS" "GET_COMMAND_SWITCH" "IDNUM" "IMAG" "INT8MAX" "INT8MIN" "INT16MAX" "INT16MIN" "INT32MAX" "INT32MIN" "ISEQUAL" "ISFIELD" "ISINF" "ISNAN" "ISFINITE" "NULL_FILE" "NUMTLCFILES" "OUTPUT_LINES" "SIZE" "STDOUT" "STRING" "STRINGOF" "SYSNAME" "TLCFILES" "TLC_TIME" "TLC_FALSE" "TLC_TRUE" "TLC_VERSION" "TYPE" "UINT8MAX" "UINT16MAX" "UINT32MAX" "UINTWHITE_SPACE" "WILL_ROLL"))
                nil [2927 3679])
            ("tlc-font-lock-keywords" variable
               (:documentation "List of keywords for nicely coloring X defaults."
                :default-value (list '("^%function\\s-+\\(\\sw+\\)\\s-*(" 1 font-lock-function-name-face) '("^%function\\s-+\\(\\sw+\\)\\s-*(" ("\\s-*\\(\\sw+\\)\\s-*[,)]" nil nil (1 font-lock-variable-name-face))) '("\\(%%[^
]*\\)
" 1 font-lock-comment-face prepend) '("\\(^[ 	]*\\([^ 
	%]\\|%<\\)[^
]*\\)$" 1 tlc-font-lock-output-code append) '("\\(^\\|\\s-\\)\\(%[^% 	(
>]+\\)\\>" 2 font-lock-keyword-face) '("%assign\\s-+:*\\([_a-zA-Z0-9.]+\\)\\s-*\\($\\|=\\)" 1 font-lock-variable-name-face) '("%\\(exit\\|warning\\|error\\|trace\\) \\([^
]+\\)$" 2 font-lock-string-face prepend) '("\\(%<[^%
>]+>\\)" 1 font-lock-reference-face prepend) (list (concat "\\<\\(" (regexp-opt tlc-keywords) "\\)\\>") 1 'font-lock-type-face) '("[^.]\\(\\.\\.\\.\\)$" 1 'underline prepend)))
                nil [3681 4586])
            ("tlc-mode" function
               (:documentation "Major mode for editing Tlc files, or files found in tlc directories."
                :user-visible-flag t)
                nil [4603 5767])
            ("tlc-return" function
               (:documentation "Handle carriage return in `tlc-mode'."
                :user-visible-flag t)
                nil [5769 5875])
            ("tlc-indent" function
               (:documentation "Indent the current line to the indentation of the previous line."
                :user-visible-flag t)
                nil [5877 6073])
            ("tlc--indent-because-of-continuation" variable nil nil [6075 6123])
            ("tlc-calc-indentation" function (:documentation "Calculate the indentation of this line.") nil [6125 7345])
            ("tlc-calc-next-indentation" function (:documentation "Calc how much more to indent the next line.") nil [7347 8667])
            ("tlc-beginning-of-statement" function (:documentation "Goto the beginning of a statement, skipping over continuation lines.") nil [8669 9026])
            ("tlc-line-special" function (:documentation "Return t if the current line is a special language line.") nil [9028 9225])
            ("tlc-assignment-continuation-p" function (:documentation "See if continuation lines should be indented.") nil [9227 9435])
            ("tlc-in-multiline-comment" function (:documentation "Return t we are in a multiline comment.") nil [9437 9654])
            ("add-to-list" code nil nil [9746 9800])
            ("tlc" package nil nil [9802 9816]))          
      :file "tlc.el"
      :pointmax 9839
      :fsize 9838
      :lastmodtime '(23398 9672 987413 699000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!matlab-mode-20180125.1810!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
