;; Object semanticdb-project-database-file-18785ec
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-18785ec"
  :tables
  (list
    (semanticdb-table "semanticdb-table-187852c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1277 1294])
            ("custom-define-hook" variable nil nil [1296 1445])
            ("custom-dont-initialize" variable nil nil [1447 1630])
            ("custom-current-group-alist" variable nil nil [1632 1745])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1775 2238])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2240 2815])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2817 3584])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3586 4364])
            ("custom-delayed-init-variables" variable nil nil [4366 4463])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4465 5589])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5591 8257])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8259 14513])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14541 17481])
            ("custom-current-group" function nil nil [17510 17599])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17601 18647])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18649 19812])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19814 20160])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20162 20564])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20583 21173])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21175 21886])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21888 22641])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22643 23094])
            ("defalias" code nil nil [23095 23151])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23153 23389])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23391 23541])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23543 23717])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23719 24015])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [24017 24303])
            ("custom-variable-p" function (:arguments ("variable")) nil [24305 24738])
            ("define-obsolete-function-alias" code nil nil [24740 24815])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24817 25112])
            ("custom-load-recursion" variable nil nil [25232 25308])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25310 26523])
            ("custom-local-buffer" variable nil nil [26526 26846])
            ("put" code nil nil [26847 26892])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26894 27275])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27277 27701])
            ("custom-quote" function (:arguments ("sexp")) nil [27703 28049])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28051 29180])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29182 30286])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30288 31471])
            ("custom-known-themes" variable (:default-value '(user changed)) nil [33298 33686])
            ("custom-theme-p" function (:arguments ("theme")) nil [33688 33797])
            ("custom-check-theme" function (:arguments ("theme")) nil [33799 33977])
            ("custom--should-apply-setting" function (:arguments ("theme")) nil [33979 34157])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34159 36361])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36363 37133])
            ("custom-set-variables" function (:arguments ("args")) nil [37136 37748])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37750 40447])
            ("custom--sort-vars-table" variable nil nil [40449 40481])
            ("custom--sort-vars-result" variable nil nil [40482 40515])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40517 42049])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [42051 42635])
            ("deftheme" function (:arguments ("theme" "doc" "_ignored")) nil [43231 43925])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "_ignored")) nil [43927 44535])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44537 45042])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [45066 45413])
            ("custom-theme-load-path" variable (:default-value (list 'custom-theme-directory t)) nil [45415 46173])
            ("custom--inhibit-theme-enable" variable (:default-value 'apply-only-user) nil [46175 46580])
            ("provide-theme" function (:arguments ("theme")) nil [46582 46980])
            ("custom-safe-themes" variable (:default-value '(default)) nil [46982 47602])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47604 51141])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [51143 51893])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [51895 52145])
            ("custom-available-themes" function nil nil [52147 53263])
            ("custom-theme--load-path" function nil nil [53265 53763])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [53810 55190])
            ("custom-enabled-themes" variable nil nil [55192 56599])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [56601 56719])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [56721 58470])
            ("declare-function" code nil nil [58512 58606])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [58608 58968])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [58970 59363])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [59365 59828])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [59830 60250])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [60467 60838])
            ("custom-reset-variables" function (:arguments ("args")) nil [60840 61182])
            ("custom" package nil nil [61198 61215]))          
      :file "custom.el.gz"
      :pointmax 61241
      :fsize 17719
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-187854c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function
               (:documentation "Tell the byte-compiler that function FN is defined, in FILE.
The FILE argument is not used by the byte-compiler, but by the
`check-declare' package, which checks that FILE contains a
definition for FN.

FILE can be either a Lisp file (in which case the \".el\"
extension is optional), or a C file.  C files are expanded
relative to the Emacs \"src/\" directory.  Lisp files are
searched for using `locate-library', and if that fails they are
expanded relative to the location of the file containing the
declaration.  A FILE with an \"ext:\" prefix is an external file.
`check-declare' will check such files if they are found, and skip
them without error if they are not.

Optional ARGLIST specifies FN's arguments, or is t to not specify
FN's arguments.  An omitted ARGLIST defaults to t, not nil: a nil
ARGLIST specifies an empty argument list, and an explicit t
ARGLIST is a placeholder that allows supplying a later arg.

Optional FILEONLY non-nil means that `check-declare' will check
only that FILE exists, not that it defines FN.  This is intended
for function definitions that `check-declare' does not recognize,
e.g., `defstruct'.

Note that for the purposes of `check-declare', this statement
must be the first non-whitespace on a line.

For more information, see Info node `(elisp)Declaring Functions'."
                :arguments ("_fn" "_file" "_args"))
                nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function
               (:documentation "Evaluate FORM, expecting it not to return.
If FORM does return, signal an error."
                :arguments ("form"))
                nil [2807 3011])
            ("1value" function
               (:documentation "Evaluate FORM, expecting a constant return value.
If FORM returns differing values when running under Testcover,
Testcover will raise an error."
                :arguments ("form"))
                nil [3013 3214])
            ("def-edebug-spec" function
               (:documentation "Set the `edebug-form-spec' property of SYMBOL according to SPEC.
Both SYMBOL and SPEC are unevaluated.  The SPEC can be:
0 (instrument no arguments); t (instrument all arguments);
a symbol (naming a function with an Edebug specification); or a list.
The elements of the list describe the argument types; see
Info node `(elisp)Specification List' for details."
                :arguments ("symbol" "spec"))
                nil [3216 3676])
            ("lambda" function
               (:documentation "Return a lambda expression.
A call of the form (lambda ARGS DOCSTRING INTERACTIVE BODY) is
self-quoting; the result of evaluating the lambda expression is the
expression itself.  The lambda expression may then be treated as a
function, i.e., stored as the function value of a symbol, passed to
`funcall' or `mapcar', etc.

ARGS should take the same form as an argument list for a `defun'.
DOCSTRING is an optional documentation string.
 If present, it should describe how to call the function.
 But documentation strings are usually not useful in nameless functions.
INTERACTIVE should be a call to the function `interactive', which see.
It may also be omitted.
BODY should be a list of Lisp expressions.

(fn ARGS [DOCSTRING] [INTERACTIVE] BODY)"
                :arguments ("cdr"))
                nil [3678 4800])
            ("setq-local" function
               (:documentation "Set variable VAR to value VAL in current buffer."
                :arguments ("var" "val"))
                nil [4802 5049])
            ("defvar-local" function
               (:documentation "Define VAR as a buffer-local variable with default value VAL.
Like `defvar' but additionally marks the variable as being automatically
buffer-local wherever it is set."
                :arguments ("var" "val" "docstring"))
                nil [5051 5492])
            ("push" function
               (:documentation "Add NEWELT to the list stored in the generalized variable PLACE.
This is morally equivalent to (setf PLACE (cons NEWELT PLACE)),
except that PLACE is only evaluated once (after NEWELT)."
                :arguments ("newelt" "place"))
                nil [5494 6088])
            ("pop" function
               (:documentation "Return the first element of PLACE's value, and remove it from the list.
PLACE must be a generalized variable whose value is a list.
If the value is nil, `pop' returns nil but does not actually
change the list."
                :arguments ("place"))
                nil [6090 6947])
            ("when" function
               (:documentation "If COND yields non-nil, do BODY, else return nil.
When COND yields non-nil, eval BODY forms sequentially and return
value of last one, or nil if there are none.

(fn COND BODY...)"
                :arguments ("cond" "body"))
                nil [6949 7237])
            ("unless" function
               (:documentation "If COND yields nil, do BODY, else return nil.
When COND yields nil, eval BODY forms sequentially and return
value of last one, or nil if there are none.

(fn COND BODY...)"
                :arguments ("cond" "body"))
                nil [7239 7525])
            ("dolist" function
               (:documentation "Loop over a list.
Evaluate BODY with VAR bound to each car from LIST, in turn.
Then evaluate RESULT to get return value, default nil.

(fn (VAR LIST [RESULT]) BODY...)"
                :arguments ("spec" "body"))
                nil [7527 8987])
            ("dotimes" function
               (:documentation "Loop a certain number of times.
Evaluate BODY with VAR bound to successive integers running from 0,
inclusive, to COUNT, exclusive.  Then evaluate RESULT to get
the return value (nil if RESULT is omitted).  Its use is deprecated.

(fn (VAR COUNT [RESULT]) BODY...)"
                :arguments ("spec" "body"))
                nil [8989 10478])
            ("declare" function
               (:documentation "Do not evaluate any arguments, and return nil.
If a `declare' form appears as the first form in the body of a
`defun' or `defmacro' form, SPECS specifies various additional
information about the function or macro; these go into effect
during the evaluation of the `defun' or `defmacro' form.

The possible values of SPECS are specified by
`defun-declarations-alist' and `macro-declarations-alist'.

For more information, see info node `(elisp)Declare Form'."
                :arguments ("_specs"))
                nil [10480 11055])
            ("ignore-errors" function
               (:documentation "Execute BODY; if an error occurs, return nil.
Otherwise, return result of last form in BODY.
See also `with-demoted-errors' that does something similar
without silencing all errors."
                :arguments ("body"))
                nil [11057 11364])
            ("gensym-counter" variable (:documentation "Number used to construct the name of the next symbol created by `gensym'.") nil [11395 11498])
            ("gensym" function
               (:documentation "Return a new uninterned symbol.
The name is made by appending `gensym-counter' to PREFIX.
PREFIX is a string, and defaults to \"g\"."
                :arguments ("prefix"))
                nil [11500 11820])
            ("ignore" function
               (:documentation "Do nothing and return nil.
This function accepts any number of arguments, but ignores them."
                :user-visible-flag t
                :arguments ("_ignore"))
                nil [11822 11970])
            ("error" function
               (:documentation "Signal an error, making a message by passing args to `format-message'.
In Emacs, the convention is that error messages start with a capital
letter but *do not* end with a period.  Please follow this convention
for the sake of consistency.

Note: (error \"%s\" VALUE) makes the message VALUE without
interpreting format characters like `%', `\\=`', and `\\=''."
                :arguments ("args"))
                nil [12027 12543])
            ("user-error" function
               (:documentation "Signal a pilot error, making a message by passing args to `format-message'.
In Emacs, the convention is that error messages start with a capital
letter but *do not* end with a period.  Please follow this convention
for the sake of consistency.
This is just like `error' except that `user-error's are expected to be the
result of an incorrect manipulation on the part of the user, rather than the
result of an actual problem.

Note: (user-error \"%s\" VALUE) makes the message VALUE without
interpreting format characters like `%', `\\=`', and `\\=''."
                :arguments ("format" "args"))
                nil [12545 13205])
            ("define-error" function
               (:documentation "Define NAME as a new error signal.
MESSAGE is a string that will be output to the echo area if such an error
is signaled without being caught by a `condition-case'.
PARENT is either a signal or a list of signals from which it inherits.
Defaults to `error'."
                :arguments ("name" "message" "parent"))
                nil [13207 14120])
            ("frame-configuration-p" function
               (:documentation "Return non-nil if OBJECT seems to be a frame configuration.
Any list whose car is `frame-configuration' is assumed to be a frame
configuration."
                :arguments ("object"))
                nil [14234 14489])
            ("apply-partially" function
               (:documentation "Return a function that is a partial application of FUN to ARGS.
ARGS is a list of the first N arguments to pass to FUN.
The result is a new function which does the same as FUN, except that
the first N arguments are fixed at the values with which this function
was called."
                :arguments ("fun" "args"))
                nil [14491 14868])
            ("zerop" function
               (:documentation "Return t if NUMBER is zero."
                :arguments ("number"))
                nil [14870 15100])
            ("fixnump" function
               (:documentation "Return t if OBJECT is a fixnum."
                :arguments ("object"))
                nil [15102 15249])
            ("bignump" function
               (:documentation "Return t if OBJECT is a bignum."
                :arguments ("object"))
                nil [15251 15360])
            ("lsh" function
               (:documentation "Return VALUE with its bits shifted left by COUNT.
If COUNT is negative, shifting is actually to the right.
In this case, if VALUE is a negative fixnum treat it as unsigned,
i.e., subtract 2 * most-negative-fixnum from VALUE before shifting it."
                :arguments ("value" "count"))
                nil [15362 15879])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [16073 16653])
            ("caar" function
               (:documentation "Return the car of the car of X."
                :arguments ("x"))
                nil [16655 16782])
            ("cadr" function
               (:documentation "Return the car of the cdr of X."
                :arguments ("x"))
                nil [16784 16911])
            ("cdar" function
               (:documentation "Return the cdr of the car of X."
                :arguments ("x"))
                nil [16913 17040])
            ("cddr" function
               (:documentation "Return the cdr of the cdr of X."
                :arguments ("x"))
                nil [17042 17169])
            ("caaar" function
               (:documentation "Return the `car' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [17171 17322])
            ("caadr" function
               (:documentation "Return the `car' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [17324 17475])
            ("cadar" function
               (:documentation "Return the `car' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [17477 17628])
            ("caddr" function
               (:documentation "Return the `car' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [17630 17781])
            ("cdaar" function
               (:documentation "Return the `cdr' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [17783 17934])
            ("cdadr" function
               (:documentation "Return the `cdr' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [17936 18087])
            ("cddar" function
               (:documentation "Return the `cdr' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [18089 18240])
            ("cdddr" function
               (:documentation "Return the `cdr' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [18242 18393])
            ("caaaar" function
               (:documentation "Return the `car' of the `car' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [18395 18566])
            ("caaadr" function
               (:documentation "Return the `car' of the `car' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [18568 18739])
            ("caadar" function
               (:documentation "Return the `car' of the `car' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [18741 18912])
            ("caaddr" function
               (:documentation "Return the `car' of the `car' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [18914 19085])
            ("cadaar" function
               (:documentation "Return the `car' of the `cdr' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [19087 19258])
            ("cadadr" function
               (:documentation "Return the `car' of the `cdr' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [19260 19431])
            ("caddar" function
               (:documentation "Return the `car' of the `cdr' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [19433 19604])
            ("cadddr" function
               (:documentation "Return the `car' of the `cdr' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [19606 19777])
            ("cdaaar" function
               (:documentation "Return the `cdr' of the `car' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [19779 19950])
            ("cdaadr" function
               (:documentation "Return the `cdr' of the `car' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [19952 20123])
            ("cdadar" function
               (:documentation "Return the `cdr' of the `car' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [20125 20296])
            ("cdaddr" function
               (:documentation "Return the `cdr' of the `car' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [20298 20469])
            ("cddaar" function
               (:documentation "Return the `cdr' of the `cdr' of the `car' of the `car' of X."
                :arguments ("x"))
                nil [20471 20642])
            ("cddadr" function
               (:documentation "Return the `cdr' of the `cdr' of the `car' of the `cdr' of X."
                :arguments ("x"))
                nil [20644 20815])
            ("cdddar" function
               (:documentation "Return the `cdr' of the `cdr' of the `cdr' of the `car' of X."
                :arguments ("x"))
                nil [20817 20988])
            ("cddddr" function
               (:documentation "Return the `cdr' of the `cdr' of the `cdr' of the `cdr' of X."
                :arguments ("x"))
                nil [20990 21161])
            ("last" function
               (:documentation "Return the last link of LIST.  Its car is the last element.
If LIST is nil, return nil.
If N is non-nil, return the Nth-to-last link of LIST.
If N is bigger than the length of LIST, return LIST."
                :arguments ("list" "n"))
                nil [21163 21580])
            ("butlast" function
               (:documentation "Return a copy of LIST with the last N elements removed.
If N is omitted or nil, the last element is removed from the
copy."
                :arguments ("list" "n"))
                nil [21582 21810])
            ("nbutlast" function
               (:documentation "Modifies LIST to remove the last N elements.
If N is omitted or nil, remove the last element."
                :arguments ("list" "n"))
                nil [21812 22089])
            ("delete-dups" function
               (:documentation "Destructively remove `equal' duplicates from LIST.
Store the result in LIST and return it.  LIST must be a proper list.
Of several `equal' occurrences of an element in LIST, the first
one is kept."
                :arguments ("list"))
                nil [22091 22878])
            ("delete-consecutive-dups" function
               (:documentation "Destructively remove `equal' consecutive duplicates from LIST.
First and last elements are considered consecutive if CIRCULAR is
non-nil."
                :arguments ("list" "circular"))
                nil [22945 23403])
            ("number-sequence" function
               (:documentation "Return a sequence of numbers from FROM to TO (both inclusive) as a list.
INC is the increment used between numbers in the sequence and defaults to 1.
So, the Nth element of the list is (+ FROM (* N INC)) where N counts from
zero.  TO is only included if there is an N for which TO = FROM + N * INC.
If TO is nil or numerically equal to FROM, return (FROM).
If INC is positive and TO is less than FROM, or INC is negative
and TO is larger than FROM, return nil.
If INC is zero and TO is neither nil nor numerically equal to
FROM, signal an error.

This function is primarily designed for integer arguments.
Nevertheless, FROM, TO and INC can be integer or float.  However,
floating point arithmetic is inexact.  For instance, depending on
the machine, it may quite well happen that
(number-sequence 0.4 0.6 0.2) returns the one element list (0.4),
whereas (number-sequence 0.4 0.8 0.2) returns a list with three
elements.  Thus, if some of the arguments are floats and one wants
to make sure that TO is included, one may have to explicitly write
TO as (+ FROM (* N INC)) or use a variable whose value was
computed with this exact expression.  Alternatively, you can,
of course, also replace TO with a slightly larger value
(or a slightly more negative value if INC is negative)."
                :arguments ("from" "to" "inc"))
                nil [23405 25412])
            ("copy-tree" function
               (:documentation "Make a copy of TREE.
If TREE is a cons cell, this recursively copies both its car and its cdr.
Contrast to `copy-sequence', which copies only along the cdrs.  With second
argument VECP, this copies vectors as well as conses."
                :arguments ("tree" "vecp"))
                nil [25414 26231])
            ("assoc-default" function
               (:documentation "Find object KEY in a pseudo-alist ALIST.
ALIST is a list of conses or objects.  Each element
 (or the element's car, if it is a cons) is compared with KEY by
 calling TEST, with two arguments: (i) the element or its car,
 and (ii) KEY.
If that is non-nil, the element matches; then `assoc-default'
 returns the element's cdr, if it is a cons, or DEFAULT if the
 element is not a cons.

If no element matches, the value is nil.
If TEST is omitted or nil, `equal' is used."
                :arguments ("key" "alist" "test" "default"))
                nil [26271 27071])
            ("member-ignore-case" function
               (:documentation "Like `member', but ignore differences in case and text representation.
ELT must be a string.  Upper-case and lower-case letters are treated as equal.
Unibyte strings are converted to multibyte for comparison.
Non-strings in LIST are ignored."
                :arguments ("elt" "list"))
                nil [27073 27508])
            ("assoc-delete-all" function
               (:documentation "Delete from ALIST all elements whose car is KEY.
Compare keys with TEST.  Defaults to `equal'.
Return the modified alist.
Elements of ALIST that are not conses are ignored."
                :arguments ("key" "alist" "test"))
                nil [27510 28094])
            ("assq-delete-all" function
               (:documentation "Delete from ALIST all elements whose car is `eq' to KEY.
Return the modified alist.
Elements of ALIST that are not conses are ignored."
                :arguments ("key" "alist"))
                nil [28096 28306])
            ("rassq-delete-all" function
               (:documentation "Delete from ALIST all elements whose cdr is `eq' to VALUE.
Return the modified alist.
Elements of ALIST that are not conses are ignored."
                :arguments ("value" "alist"))
                nil [28308 28801])
            ("alist-get" function
               (:documentation "Return the value associated with KEY in ALIST.
If KEY is not found in ALIST, return DEFAULT.
Use TESTFN to lookup in the alist if non-nil.  Otherwise, use `assq'.

This is a generalized variable suitable for use with `setf'.
When using it to set a value, optional argument REMOVE non-nil
means to remove KEY from ALIST if the new value is `eql' to DEFAULT."
                :arguments ("key" "alist" "default" "remove" "testfn"))
                nil [28803 29397])
            ("remove" function
               (:documentation "Return a copy of SEQ with all occurrences of ELT removed.
SEQ must be a list, vector, or string.  The comparison is done with `equal'."
                :arguments ("elt" "seq"))
                nil [29399 29752])
            ("remq" function
               (:documentation "Return LIST with all occurrences of ELT removed.
The comparison is done with `eq'.  Contrary to `delq', this does not use
side-effects, and the argument LIST is not modified."
                :arguments ("elt" "list"))
                nil [29754 30085])
            ("kbd" function
               (:documentation "Convert KEYS to the internal Emacs key representation.
KEYS should be a string in the format returned by commands such
as `C-h k' (`describe-key').
This is the same format used for saving keyboard macros (see
`edmacro-mode').

For an approximate inverse of this, see `key-description'."
                :arguments ("keys"))
                nil [30110 30550])
            ("put" code nil nil [30551 30569])
            ("undefined" function
               (:documentation "Beep to tell the user this binding is undefined."
                :user-visible-flag t)
                nil [30571 31099])
            ("put" code nil nil [31194 31229])
            ("suppress-keymap" function
               (:documentation "Make MAP override all normally self-inserting keys to be undefined.
Normally, as an exception, digits and minus-sign are set to make prefix args,
but optional second arg NODIGITS non-nil treats them like other chars."
                :arguments ("map" "nodigits"))
                nil [31231 31795])
            ("make-composed-keymap" function
               (:documentation "Construct a new keymap composed of MAPS and inheriting from PARENT.
When looking up a key in the returned map, the key is looked in each
keymap of MAPS in turn until a binding is found.
If no binding is found in MAPS, the lookup continues in PARENT, if non-nil.
As always with keymap inheritance, a nil binding in MAPS overrides
any corresponding binding in PARENT, but it does not override corresponding
bindings in other keymaps of MAPS.
MAPS can be a list of keymaps or a single keymap.
PARENT if non-nil should be a keymap."
                :arguments ("maps" "parent"))
                nil [31797 32449])
            ("define-key-after" function
               (:documentation "Add binding in KEYMAP for KEY => DEFINITION, right after AFTER's binding.
This is like `define-key' except that the binding for KEY is placed
just after the binding for the event AFTER, instead of at the beginning
of the map.  Note that AFTER must be an event type (like KEY), NOT a command
(like DEFINITION).

If AFTER is t or omitted, the new binding goes at the end of the keymap.
AFTER should be a single event type--a symbol or a character, not a sequence.

Bindings are always added before any inherited map.

The order of bindings in a keymap only matters when it is used as
a menu, so this function is not useful for non-menu keymaps."
                :arguments ("keymap" "key" "definition" "after"))
                nil [32451 34512])
            ("map-keymap-sorted" function
               (:documentation "Implement `map-keymap' with sorting.
Don't call this function; it is for internal use only."
                :arguments ("function" "keymap"))
                nil [34514 35194])
            ("keymap--menu-item-binding" function
               (:documentation "Return the binding part of a menu-item."
                :arguments ("val"))
                nil [35196 35666])
            ("keymap--menu-item-with-binding" function
               (:documentation "Build a menu-item like ITEM but with its binding changed to BINDING."
                :arguments ("item" "binding"))
                nil [35720 36320])
            ("keymap--merge-bindings" function
               (:documentation "Merge bindings VAL1 and VAL2."
                :arguments ("val1" "val2"))
                nil [36322 36788])
            ("keymap-canonicalize" function
               (:documentation "Return a simpler equivalent keymap.
This resolves inheritance and redefinitions.  The returned keymap
should behave identically to a copy of KEYMAP w.r.t `lookup-key'
and use in active keymaps and menus.
Subkeymaps may be modified but are not canonicalized."
                :arguments ("map"))
                nil [36790 38659])
            ("put" code nil nil [38661 38718])
            ("keyboard-translate" function
               (:documentation "Translate character FROM to TO on the current terminal.
This function creates a `keyboard-translate-table' if necessary
and then modifies one entry in it."
                :arguments ("from" "to"))
                nil [38720 39095])
            ("global-set-key" function
               (:documentation "Give KEY a global binding as COMMAND.
COMMAND is the command definition to use; usually it is
a symbol naming an interactively-callable function.
KEY is a key sequence; noninteractively, it is a string or vector
of characters or event types, and non-ASCII characters with codes
above 127 (such as ISO Latin-1) can be included if you use a vector.

Note that if KEY has a local binding in the current buffer,
that local binding will continue to shadow any global binding
that you make with this function."
                :user-visible-flag t
                :arguments ("key" "command"))
                nil [39126 40046])
            ("local-set-key" function
               (:documentation "Give KEY a local binding as COMMAND.
COMMAND is the command definition to use; usually it is
a symbol naming an interactively-callable function.
KEY is a key sequence; noninteractively, it is a string or vector
of characters or event types, and non-ASCII characters with codes
above 127 (such as ISO Latin-1) can be included if you use a vector.

The binding goes in the current buffer's local map, which in most
cases is shared with all other buffers in the same major mode."
                :user-visible-flag t
                :arguments ("key" "command"))
                nil [40048 40852])
            ("global-unset-key" function
               (:documentation "Remove global binding of KEY.
KEY is a string or vector representing a sequence of keystrokes."
                :user-visible-flag t
                :arguments ("key"))
                nil [40854 41050])
            ("local-unset-key" function
               (:documentation "Remove local binding of KEY.
KEY is a string or vector representing a sequence of keystrokes."
                :user-visible-flag t
                :arguments ("key"))
                nil [41052 41281])
            ("key-substitution-in-progress" variable (:documentation "Used internally by `substitute-key-definition'.") nil [41337 41430])
            ("substitute-key-definition" function
               (:documentation "Replace OLDDEF with NEWDEF for any keys in KEYMAP now defined as OLDDEF.
In other words, OLDDEF is replaced with NEWDEF wherever it appears.
Alternatively, if optional fourth argument OLDMAP is specified, we redefine
in KEYMAP as NEWDEF those keys which are defined as OLDDEF in OLDMAP.

If you don't specify OLDMAP, you can usually get the same results
in a cleaner way with command remapping, like this:
  (define-key KEYMAP [remap OLDDEF] NEWDEF)

(fn OLDDEF NEWDEF KEYMAP &optional OLDMAP)"
                :arguments ("olddef" "newdef" "keymap" "oldmap" "prefix"))
                nil [41432 42814])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42816 44479])
            ("global-map" variable (:documentation "Default global keymap mapping Emacs keyboard input into commands.
The value is a keymap which is usually (but not necessarily) Emacs's
global map.") nil [44628 44802])
            ("esc-map" variable (:documentation "Default keymap for ESC (meta) commands.
The normal global definition of the character ESC indirects to this keymap.") nil [44804 44944])
            ("ctl-x-map" variable (:documentation "Default keymap for C-x commands.
The normal global definition of the character C-x indirects to this keymap.") nil [44946 45081])
            ("ctl-x-4-map" variable
               (:documentation "Keymap for subcommands of C-x 4."
                :default-value (make-sparse-keymap))
                nil [45083 45161])
            ("defalias" code nil nil [45162 45200])
            ("define-key" code nil nil [45201 45243])
            ("ctl-x-5-map" variable
               (:documentation "Keymap for frame commands."
                :default-value (make-sparse-keymap))
                nil [45245 45317])
            ("defalias" code nil nil [45318 45356])
            ("define-key" code nil nil [45357 45399])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [45439 45494])
            ("listify-key-sequence" function
               (:documentation "Convert a key sequence to a list of events."
                :arguments ("key"))
                nil [45496 45734])
            ("eventp" function
               (:documentation "True if the argument is an event object."
                :arguments ("obj"))
                nil [45736 45937])
            ("event-modifiers" function
               (:documentation "Return a list of symbols representing the modifier keys in event EVENT.
The elements of the list may include `meta', `control',
`shift', `hyper', `super', `alt', `click', `double', `triple', `drag',
and `down'.
EVENT may be an event or an event type.  If EVENT is a symbol
that has never been used in an event that has been read as input
in the current Emacs session, then this function may fail to include
the `click' modifier."
                :arguments ("event"))
                nil [45939 47233])
            ("event-basic-type" function
               (:documentation "Return the basic type of the given event (all modifiers removed).
The value is a printing character (not upper case) or a symbol.
EVENT may be an event or an event type.  If EVENT is a symbol
that has never been used in an event that has been read as input
in the current Emacs session, then this function may return nil."
                :arguments ("event"))
                nil [47235 48003])
            ("mouse-movement-p" function
               (:documentation "Return non-nil if OBJECT is a mouse movement event."
                :arguments ("object"))
                nil [48005 48138])
            ("mouse-event-p" function
               (:documentation "Return non-nil if OBJECT is a mouse click event."
                :arguments ("object"))
                nil [48140 48358])
            ("event-start" function
               (:documentation "Return the starting position of EVENT.
EVENT should be a mouse click, drag, or key press event.  If
EVENT is nil, the value of `posn-at-point' is used instead.

The following accessor functions are used to access the elements
of the position:

`posn-window': The window the event is in.
`posn-area': A symbol identifying the area the event occurred in,
or nil if the event occurred in the text area.
`posn-point': The buffer position of the event.
`posn-x-y': The pixel-based coordinates of the event.
`posn-col-row': The estimated column and row corresponding to the
position of the event.
`posn-actual-col-row': The actual column and row corresponding to the
position of the event.
`posn-string': The string object of the event, which is either
nil or (STRING . POSITION)'.
`posn-image': The image object of the event, if any.
`posn-object': The image or string object of the event, if any.
`posn-timestamp': The time the event occurred, in milliseconds.

For more information, see Info node `(elisp)Click Events'."
                :arguments ("event"))
                nil [48360 49520])
            ("event-end" function
               (:documentation "Return the ending position of EVENT.
EVENT should be a click, drag, or key press event.

See `event-start' for a description of the value returned."
                :arguments ("event"))
                nil [49522 49840])
            ("event-click-count" function
               (:documentation "Return the multi-click count of EVENT, a click or drag event.
The return value is a positive integer."
                :arguments ("event"))
                nil [49842 50052])
            ("event-line-count" function
               (:documentation "Return the line count of EVENT, a mousewheel event.
The return value is a positive integer."
                :arguments ("event"))
                nil [50054 50253])
            ("posnp" function
               (:documentation "Return non-nil if OBJ appears to be a valid `posn' object specifying a window.
A `posn' object is returned from functions such as `event-start'.
If OBJ is a valid `posn' object, but specifies a frame rather
than a window, return nil."
                :arguments ("obj"))
                nil [50310 50958])
            ("posn-window" function
               (:documentation "Return the window in POSITION.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [50992 51174])
            ("posn-area" function
               (:documentation "Return the window area recorded in POSITION, or nil for the text area.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [51176 51500])
            ("posn-point" function
               (:documentation "Return the buffer location in POSITION.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions.
Returns nil if POSITION does not correspond to any buffer location (e.g.
a click on a scroll bar)."
                :arguments ("position"))
                nil [51502 51968])
            ("posn-set-point" function
               (:documentation "Move point to POSITION.
Select the corresponding window as well."
                :arguments ("position"))
                nil [51970 52290])
            ("posn-x-y" function
               (:documentation "Return the x and y coordinates in POSITION.
The return value has the form (X . Y), where X and Y are given in
pixels.  POSITION should be a list of the form returned by
`event-start' and `event-end'."
                :arguments ("position"))
                nil [52292 52545])
            ("declare-function" code nil nil [52547 52613])
            ("posn-col-row" function
               (:documentation "Return the nominal column and row in POSITION, measured in characters.
The column and row values are approximations calculated from the x
and y coordinates in POSITION and the frame's default character width
and default line height, including spacing.
For a scroll-bar event, the result column is 0, and the row
corresponds to the vertical position of the click in the scroll bar.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [52615 54433])
            ("posn-actual-col-row" function
               (:documentation "Return the window row number in POSITION and character number in that row.

Return nil if POSITION does not contain the actual position; in that case
`posn-col-row' can be used to get approximate values.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions.

This function does not account for the width on display, like the
number of visual columns taken by a TAB or image.  If you need
the coordinates of POSITION in character units, you should use
`posn-col-row', not this function."
                :arguments ("position"))
                nil [54435 55023])
            ("posn-timestamp" function
               (:documentation "Return the timestamp of POSITION.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [55025 55213])
            ("posn-string" function
               (:documentation "Return the string object of POSITION.
Value is a cons (STRING . STRING-POS), or nil if not a string.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [55215 55574])
            ("posn-image" function
               (:documentation "Return the image object of POSITION.
Value is a list (image ...), or nil if not an image.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [55576 55816])
            ("posn-object" function
               (:documentation "Return the object (image or string) of POSITION.
Value is a list (image ...) for an image object, a cons cell
(STRING . STRING-POS) for a string object, and nil for a buffer position.
POSITION should be a list of the form returned by the `event-start'
and `event-end' functions."
                :arguments ("position"))
                nil [55818 56187])
            ("posn-object-x-y" function
               (:documentation "Return the x and y coordinates relative to the object of POSITION.
The return value has the form (DX . DY), where DX and DY are
given in pixels.  POSITION should be a list of the form returned
by `event-start' and `event-end'."
                :arguments ("position"))
                nil [56189 56476])
            ("posn-object-width-height" function
               (:documentation "Return the pixel width and height of the object of POSITION.
The return value has the form (WIDTH . HEIGHT).  POSITION should
be a list of the form returned by `event-start' and `event-end'."
                :arguments ("position"))
                nil [56478 56738])
            ("make-obsolete" code nil nil [56781 56847])
            ("make-obsolete" code nil nil [56848 56897])
            ("make-obsolete" code nil nil [56899 56995])
            ("make-obsolete" code nil nil [56996 57072])
            ("make-obsolete" code nil nil [57496 57569])
            ("make-obsolete" code nil nil [57570 57645])
            ("make-obsolete" code nil nil [57646 57719])
            ("make-obsolete" code nil nil [57720 57793])
            ("make-obsolete" code nil nil [57794 57869])
            ("log10" function
               (:documentation "Return (log X 10), the log base 10 of X."
                :arguments ("x"))
                nil [57871 57980])
            ("set-advertised-calling-convention" code nil nil [57982 58083])
            ("set-advertised-calling-convention" code nil nil [58084 58152])
            ("set-advertised-calling-convention" code nil nil [58153 58224])
            ("set-advertised-calling-convention" code nil nil [58225 58310])
            ("set-advertised-calling-convention" code nil nil [58311 58410])
            ("set-advertised-calling-convention" code nil nil [58411 58511])
            ("make-obsolete-variable" code nil nil [58574 58638])
            ("make-obsolete-variable" code nil nil [58639 58722])
            ("make-obsolete-variable" code nil nil [58723 58795])
            ("make-obsolete-variable" code nil nil [58796 58872])
            ("make-obsolete-variable" code nil nil [58873 58930])
            ("make-obsolete" code nil nil [58931 58987])
            ("make-obsolete" code nil nil [58988 59048])
            ("make-obsolete" code nil nil [59050 59104])
            ("make-obsolete" code nil nil [59105 59161])
            ("make-obsolete-variable" code nil nil [59163 59287])
            ("make-obsolete-variable" code nil nil [59533 59597])
            ("make-obsolete-variable" code nil nil [59599 59657])
            ("defvaralias" code nil nil [59659 59716])
            ("defalias" code nil nil [59789 59833])
            ("defalias" code nil nil [59834 59878])
            ("defalias" code nil nil [59879 59912])
            ("defalias" code nil nil [59913 59946])
            ("defalias" code nil nil [59947 59983])
            ("defalias" code nil nil [59984 60019])
            ("defalias" code nil nil [60020 60046])
            ("defalias" code nil nil [60047 60073])
            ("defalias" code nil nil [60074 60096])
            ("defalias" code nil nil [60122 60161])
            ("defalias" code nil nil [60162 60216])
            ("defalias" code nil nil [60217 60287])
            ("defalias" code nil nil [60288 60360])
            ("defalias" code nil nil [60361 60404])
            ("defalias" code nil nil [60405 60449])
            ("defalias" code nil nil [60450 60483])
            ("defalias" code nil nil [60484 60517])
            ("defalias" code nil nil [60549 60592])
            ("defalias" code nil nil [60593 60642])
            ("defalias" code nil nil [60644 60697])
            ("add-hook" function
               (:documentation "Add to the value of HOOK the function FUNCTION.
FUNCTION is not added if already present.
FUNCTION is added (if necessary) at the beginning of the hook list
unless the optional argument APPEND is non-nil, in which case
FUNCTION is added at the end.

The optional fourth argument, LOCAL, if non-nil, says to modify
the hook's buffer-local value rather than its global value.
This makes the hook buffer-local, and it makes t a member of the
buffer-local value.  That acts as a flag to run the hook
functions of the global value as well as in the local value.

HOOK should be a symbol, and FUNCTION may be any valid function.  If
HOOK is void, it is first set to nil.  If HOOK's value is a single
function, it is changed to a list of functions."
                :arguments ("hook" "function" "append" "local"))
                nil [60736 62865])
            ("remove-hook" function
               (:documentation "Remove from the value of HOOK the function FUNCTION.
HOOK should be a symbol, and FUNCTION may be any valid function.  If
FUNCTION isn't the value of HOOK, or, if FUNCTION doesn't appear in the
list of hooks to run in HOOK, then nothing is done.  See `add-hook'.

The optional third argument, LOCAL, if non-nil, says to modify
the hook's buffer-local value rather than its default value."
                :arguments ("hook" "function" "local"))
                nil [62867 64535])
            ("letrec" function
               (:documentation "Bind variables according to BINDERS then eval BODY.
The value of the last form in BODY is returned.
Each element of BINDERS is a list (SYMBOL VALUEFORM) which binds
SYMBOL to the value of VALUEFORM.
All symbols are bound before the VALUEFORMs are evalled."
                :arguments ("binders" "body"))
                nil [64537 65166])
            ("with-wrapper-hook" function
               (:documentation "Run BODY, using wrapper functions from HOOK with additional ARGS.
HOOK is an abnormal hook.  Each hook function in HOOK \"wraps\"
around the preceding ones, like a set of nested `around' advices.

Each hook function should accept an argument list consisting of a
function FUN, followed by the additional arguments in ARGS.

The first hook function in HOOK is passed a FUN that, if it is called
with arguments ARGS, performs BODY (i.e., the default operation).
The FUN passed to each successive hook function is defined based
on the preceding hook functions; if called with arguments ARGS,
it does what the `with-wrapper-hook' call would do if the
preceding hook functions were the only ones present in HOOK.

Each hook function may call its FUN argument as many times as it wishes,
including never.  In that case, such a hook function acts to replace
the default definition altogether, and any preceding hook functions.
Of course, a subsequent hook function may do the same thing.

Each hook function definition is used to construct the FUN passed
to the next hook function, if any.  The last (or \"outermost\")
FUN is then called once."
                :arguments ("hook" "args" "body"))
                nil [65168 66578])
            ("subr--with-wrapper-hook-no-warnings" function
               (:documentation "Like (with-wrapper-hook HOOK ARGS BODY), but without warnings."
                :arguments ("hook" "args" "body"))
                nil [66580 68419])
            ("add-to-list" function
               (:documentation "Add ELEMENT to the value of LIST-VAR if it isn't there yet.
The test for presence of ELEMENT is done with `equal', or with
COMPARE-FN if that's non-nil.
If ELEMENT is added, it is added at the beginning of the list,
unless the optional argument APPEND is non-nil, in which case
ELEMENT is added at the end.

The return value is the new value of LIST-VAR.

This is handy to add some elements to configuration variables,
but please do not abuse it in Elisp code, where you are usually
better off using `push' or `cl-pushnew'.

If you want to use `add-to-list' on a variable that is not
defined until a certain package is loaded, you should put the
call to `add-to-list' into a hook function that will be run only
after loading the package.  `eval-after-load' provides one way to
do this.  In some cases other hooks, such as major mode hooks,
can do the job."
                :arguments ("list-var" "element" "append" "compare-fn"))
                nil [68421 71788])
            ("add-to-ordered-list" function
               (:documentation "Add ELEMENT to the value of LIST-VAR if it isn't there yet.
The test for presence of ELEMENT is done with `eq'.

The resulting list is reordered so that the elements are in the
order given by each element's numeric list order.  Elements
without a numeric list order are placed at the end of the list.

If the third optional argument ORDER is a number (integer or
float), set the element's list order to the given value.  If
ORDER is nil or omitted, do not change the numeric order of
ELEMENT.  If ORDER has any other value, remove the numeric order
of ELEMENT if it has one.

The list order for each element is stored in LIST-VAR's
`list-order' property.

The return value is the new value of LIST-VAR."
                :arguments ("list-var" "element" "order"))
                nil [71791 73110])
            ("add-to-history" function
               (:documentation "Add NEWELT to the history list stored in the variable HISTORY-VAR.
Return the new history list.
If MAXELT is non-nil, it specifies the maximum length of the history.
Otherwise, the maximum history length is the value of the `history-length'
property on symbol HISTORY-VAR, if set, or the value of the `history-length'
variable.  The possible values of maximum length have the same meaning as
the values of `history-length'.
Remove duplicates of NEWELT if `history-delete-duplicates' is non-nil.
If optional fourth arg KEEP-ALL is non-nil, add NEWELT to history even
if it is empty or duplicates the most recent entry in the history."
                :arguments ("history-var" "newelt" "maxelt" "keep-all"))
                nil [73112 74473])
            ("delay-mode-hooks" variable (:documentation "If non-nil, `run-mode-hooks' should delay running the hooks.") nil [74495 74589])
            ("defvar-local" code nil nil [74590 74677])
            ("put" code nil nil [74678 74720])
            ("defvar-local" code nil nil [74722 74871])
            ("change-major-mode-after-body-hook" variable (:documentation "Normal hook run in major mode functions, before the mode hooks.") nil [74873 74987])
            ("after-change-major-mode-hook" variable (:documentation "Normal hook run at the very end of major mode functions.") nil [74989 75091])
            ("run-mode-hooks" function
               (:documentation "Run mode hooks `delayed-mode-hooks' and HOOKS, or delay HOOKS.
Call `hack-local-variables' to set up file local and directory local
variables.

If the variable `delay-mode-hooks' is non-nil, does not do anything,
just adds the HOOKS to the list `delayed-mode-hooks'.
Otherwise, runs hooks in the sequence: `change-major-mode-after-body-hook',
`delayed-mode-hooks' (in reverse order), HOOKS, then runs
`hack-local-variables', runs the hook `after-change-major-mode-hook', and
finally evaluates the functions in `delayed-after-hook-functions' (see
`define-derived-mode').

Major mode functions should use this instead of `run-hooks' when
running their FOO-mode-hook."
                :arguments ("hooks"))
                nil [75093 76891])
            ("delay-mode-hooks" function
               (:documentation "Execute BODY, but delay any `run-mode-hooks'.
These hooks will be executed by the first following call to
`run-mode-hooks' that occurs outside any `delay-mode-hooks' form.
Only affects hooks run in the current buffer."
                :arguments ("body"))
                nil [76893 77292])
            ("provided-mode-derived-p" function
               (:documentation "Non-nil if MODE is derived from one of MODES.
Uses the `derived-mode-parent' property of the symbol to trace backwards.
If you just want to check `major-mode', use `derived-mode-p'."
                :arguments ("mode" "modes"))
                nil [77353 77694])
            ("derived-mode-p" function
               (:documentation "Non-nil if the current major mode is derived from one of MODES.
Uses the `derived-mode-parent' property of the symbol to trace backwards."
                :arguments ("modes"))
                nil [77696 77927])
            ("defvar-local" code nil nil [77929 77969])
            ("put" code nil nil [77970 78017])
            ("major-mode-suspend" function (:documentation "Exit current major, remembering it.") nil [78019 78304])
            ("major-mode-restore" function
               (:documentation "Restore major mode earlier suspended with `major-mode-suspend'.
If there was no earlier suspended major mode, then fallback to `normal-mode',
tho trying to avoid AVOIDED-MODES."
                :arguments ("avoided-modes"))
                nil [78306 79132])
            ("minor-mode-list" variable
               (:documentation "List of all minor mode functions."
                :default-value '(auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))
                nil [79323 79516])
            ("add-minor-mode" function
               (:documentation "Register a new minor mode.

This is an XEmacs-compatibility function.  Use `define-minor-mode' instead.

TOGGLE is a symbol which is the name of a buffer-local variable that
is toggled on or off to say whether the minor mode is active or not.

NAME specifies what will appear in the mode line when the minor mode
is active.  NAME should be either a string starting with a space, or a
symbol whose value is such a string.

Optional KEYMAP is the keymap for the minor mode that will be added
to `minor-mode-map-alist'.

Optional AFTER specifies that TOGGLE should be added after AFTER
in `minor-mode-alist'.

Optional TOGGLE-FUN is an interactive function to toggle the mode.
It defaults to (and should by convention be) TOGGLE.

If TOGGLE has a non-nil `:included' property, an entry for the mode is
included in the mode-line minor mode menu.
If TOGGLE has a `:menu-tag', that is used for the menu item's label."
                :arguments ("toggle" "name" "keymap" "after" "toggle-fun"))
                nil [79518 82203])
            ("autoloadp" function
               (:documentation "Non-nil if OBJECT is an autoload."
                :arguments ("object"))
                nil [82225 82327])
            ("define-symbol-prop" function
               (:documentation "Define the property PROP of SYMBOL to be VAL.
This is to `put' what `defalias' is to `fset'."
                :arguments ("symbol" "prop" "val"))
                nil [82811 83574])
            ("symbol-file" function
               (:documentation "Return the name of the file that defined SYMBOL.
The value is normally an absolute file name.  It can also be nil,
if the definition is not associated with any file.  If SYMBOL
specifies an autoloaded function, the value can be a relative
file name without extension.

If TYPE is nil, then any kind of definition is acceptable.  If
TYPE is `defun', `defvar', or `defface', that specifies function
definition, variable definition, or face definition only.
Otherwise TYPE is assumed to be a symbol property."
                :arguments ("symbol" "type"))
                nil [83576 85072])
            ("locate-library" function
               (:documentation "Show the precise file name of Emacs library LIBRARY.
LIBRARY should be a relative file name of the library, a string.
It can omit the suffix (a.k.a. file-name extension) if NOSUFFIX is
nil (which is the default, see below).
This command searches the directories in `load-path' like `\\[load-library]'
to find the file that `\\[load-library] RET LIBRARY RET' would load.
Optional second arg NOSUFFIX non-nil means don't add suffixes `load-suffixes'
to the specified name LIBRARY.

If the optional third arg PATH is specified, that list of directories
is used instead of `load-path'.

When called from a program, the file name is normally returned as a
string.  When run interactively, the argument INTERACTIVE-CALL is t,
and the file name is displayed in the echo area."
                :user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [85074 86480])
            ("start-process" function
               (:documentation "Start a program in a subprocess.  Return the process object for it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer name) to associate with the process.

Process output (both standard output and standard error streams)
goes at end of BUFFER, unless you specify a filter function to
handle the output.  BUFFER may also be nil, meaning that this
process is not associated with any buffer.

PROGRAM is the program file name.  It is searched for in `exec-path'
(which see).  If nil, just associate a pty with the buffer.  Remaining
arguments PROGRAM-ARGS are strings to give program as arguments.

If you want to separate standard output from standard error, use
`make-process' or invoke the command through a shell and redirect
one of them using the shell syntax.

The process runs in `default-directory' if that is local (as
determined by `unhandled-file-name-directory'), or \"~\"
otherwise.  If you want to run a process in a remote directory
use `start-file-process'."
                :arguments ("name" "buffer" "program" "program-args"))
                nil [86505 87830])
            ("process-lines" function
               (:documentation "Execute PROGRAM with ARGS, returning its output as a list of lines.
Signal an error if the program returns with a non-zero exit status."
                :arguments ("program" "args"))
                nil [87832 88437])
            ("process-live-p" function
               (:documentation "Returns non-nil if PROCESS is alive.
A process is considered alive if its status is `run', `open',
`listen', `connect' or `stop'.  Value is nil if PROCESS is not a
process."
                :arguments ("process"))
                nil [88439 88752])
            ("process-kill-buffer-query-function" function (:documentation "Ask before killing a buffer that has a running process.") nil [88754 89173])
            ("add-hook" code nil nil [89175 89250])
            ("process-get" function
               (:documentation "Return the value of PROCESS' PROPNAME property.
This is the last value stored with `(process-put PROCESS PROPNAME VALUE)'."
                :arguments ("process" "propname"))
                nil [89281 89493])
            ("process-put" function
               (:documentation "Change PROCESS' PROPNAME property to VALUE.
It can be retrieved with `(process-get PROCESS PROPNAME)'."
                :arguments ("process" "propname" "value"))
                nil [89495 89734])
            ("memory-limit" function (:documentation "Return an estimate of Emacs virtual memory usage, divided by 1024.") nil [89736 89892])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [89932 89982])
            ("read-key-delay" variable (:default-value 0.01) nil [89984 90012])
            ("read-key" function
               (:documentation "Read a key from the keyboard.
Contrary to `read-event' this will not return a raw event but instead will
obey the input decoding and translations usually done by `read-key-sequence'.
So escape sequences and keyboard encoding are taken into account.
When there's an ambiguity because the key looks like the prefix of
some sort of escape sequence, the ambiguity is resolved via `read-key-delay'."
                :arguments ("prompt"))
                nil [90061 93285])
            ("read-passwd-map" variable
               (:documentation "Keymap used while reading passwords."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" #'delete-minibuffer-contents) map))
                nil [93287 93624])
            ("read-passwd" function
               (:documentation "Read a password, prompting with PROMPT, and return it.
If optional CONFIRM is non-nil, read the password twice to make sure.
Optional DEFAULT is a default password to use instead of empty input.

This function echoes `*' for each character that the user types.
You could let-bind `read-hide-char' to another hiding character, though.

Once the caller uses the password, it can erase the password
by doing (clear-string STRING)."
                :arguments ("prompt" "confirm" "default"))
                nil [93626 96362])
            ("read-number" function
               (:documentation "Read a numeric value in the minibuffer, prompting with PROMPT.
DEFAULT specifies a default value to return if the user just types RET.
The value of DEFAULT is inserted into PROMPT.
This function is used by the `interactive' code letter `n'."
                :arguments ("prompt" "default"))
                nil [96364 97434])
            ("read-char-choice" function
               (:documentation "Read and return one of CHARS, prompting for PROMPT.
Any input that is not one of CHARS is ignored.

If optional argument INHIBIT-KEYBOARD-QUIT is non-nil, ignore
keyboard-quit events while waiting for a valid input."
                :arguments ("prompt" "chars" "inhibit-keyboard-quit"))
                nil [97436 99175])
            ("sit-for" function
               (:documentation "Redisplay, then wait for SECONDS seconds.  Stop when input is available.
SECONDS may be a floating-point value.
(On operating systems that do not support waiting for fractions of a
second, floating-point values are rounded down to the nearest integer.)

If optional arg NODISP is t, don't redisplay, just wait for input.
Redisplay does not happen if input is available before it starts.

Value is t if waited the full time with no input arriving, and nil otherwise.

An obsolete, but still supported form is
(sit-for SECONDS &optional MILLISECONDS NODISP)
where the optional arg MILLISECONDS specifies an additional wait period,
in milliseconds; this was useful when Emacs was built without
floating point support."
                :arguments ("seconds" "nodisp" "obsolete"))
                nil [99177 102511])
            ("declare-function" code nil nil [102551 102630])
            ("y-or-n-p" function
               (:documentation "Ask user a \"y or n\" question.
Return t if answer is \"y\" and nil if it is \"n\".
PROMPT is the string to display to ask the question.  It should
end in a space; `y-or-n-p' adds \"(y or n) \" to it.

No confirmation of the answer is requested; a single character is
enough.  SPC also means yes, and DEL means no.

To be precise, this function translates user input into responses
by consulting the bindings in `query-replace-map'; see the
documentation of that variable for more information.  In this
case, the useful bindings are `act', `skip', `recenter',
`scroll-up', `scroll-down', and `quit'.
An `act' response means yes, and a `skip' response means no.
A `quit' response means to invoke `keyboard-quit'.
If the user enters `recenter', `scroll-up', or `scroll-down'
responses, perform the requested window recentering or scrolling
and ask again.

Under a windowing system a dialog box will be used if `last-nonmenu-event'
is nil and `use-dialog-box' is non-nil."
                :arguments ("prompt"))
                nil [102632 106193])
            ("atomic-change-group" function
               (:documentation "Like `progn' but perform BODY as an atomic change group.
This means that if BODY exits abnormally,
all of its changes to the current buffer are undone.
This works regardless of whether undo is enabled in the buffer.

This mechanism is transparent to ordinary use of undo;
if undo is enabled in the buffer and BODY succeeds, the
user can undo the change normally."
                :arguments ("body"))
                nil [106224 107473])
            ("prepare-change-group" function
               (:documentation "Return a handle for the current buffer's state, for a change group.
If you specify BUFFER, make a handle for BUFFER's state instead.

Pass the handle to `activate-change-group' afterward to initiate
the actual changes of the change group.

To finish the change group, call either `accept-change-group' or
`cancel-change-group' passing the same handle as argument.  Call
`accept-change-group' to accept the changes in the group as final;
call `cancel-change-group' to undo them all.  You should use
`unwind-protect' to make sure the group is always finished.  The call
to `activate-change-group' should be inside the `unwind-protect'.
Once you finish the group, don't use the handle again--don't try to
finish the same group twice.  For a simple example of correct use, see
the source code of `atomic-change-group'.

The handle records only the specified buffer.  To make a multibuffer
change group, call this function once for each buffer you want to
cover, then use `nconc' to combine the returned values, like this:

  (nconc (prepare-change-group buffer-1)
         (prepare-change-group buffer-2))

You can then activate that multibuffer change group with a single
call to `activate-change-group' and finish it with a single call
to `accept-change-group' or `cancel-change-group'."
                :arguments ("buffer"))
                nil [107475 108951])
            ("activate-change-group" function
               (:documentation "Activate a change group made with `prepare-change-group' (which see)."
                :arguments ("handle"))
                nil [108953 109191])
            ("accept-change-group" function
               (:documentation "Finish a change group made with `prepare-change-group' (which see).
This finishes the change group by accepting its changes as final."
                :arguments ("handle"))
                nil [109193 109484])
            ("cancel-change-group" function
               (:documentation "Finish a change group made with `prepare-change-group' (which see).
This finishes the change group by reverting all of its changes."
                :arguments ("handle"))
                nil [109486 110877])
            ("define-obsolete-function-alias" code nil nil [110935 111017])
            ("momentary-string-display" function
               (:documentation "Momentarily display STRING in the buffer at POS.
Display remains until next event is input.
If POS is a marker, only its position is used; its buffer is ignored.
Optional third arg EXIT-CHAR can be a character, event or event
description list.  EXIT-CHAR defaults to SPC.  If the input is
EXIT-CHAR it is swallowed; otherwise it is then available as
input (as a command if nothing else).
Display MESSAGE (optional fourth arg) in the echo area.
If MESSAGE is nil, instructions to type EXIT-CHAR are displayed there."
                :arguments ("string" "pos" "exit-char" "message"))
                nil [111019 112571])
            ("copy-overlay" function
               (:documentation "Return a copy of overlay O."
                :arguments ("o"))
                nil [112600 113174])
            ("remove-overlays" function
               (:documentation "Clear BEG and END of overlays whose property NAME has value VAL.
Overlays might be moved and/or split.
BEG and END default respectively to the beginning and end of buffer."
                :arguments ("beg" "end" "name" "val"))
                nil [113176 114184])
            ("suspend-hook" variable (:documentation "Normal hook run by `suspend-emacs', before suspending.") nil [114206 114290])
            ("suspend-resume-hook" variable (:documentation "Normal hook run by `suspend-emacs', after Emacs is continued.") nil [114292 114390])
            ("temp-buffer-show-hook" variable (:documentation "Normal hook run by `with-output-to-temp-buffer' after displaying the buffer.
When the hook runs, the temporary buffer is current, and the window it
was displayed in is selected.") nil [114392 114608])
            ("temp-buffer-setup-hook" variable (:documentation "Normal hook run by `with-output-to-temp-buffer' at the start.
When the hook runs, the temporary buffer is current.
This hook is normally set up with a function to put the buffer in Help
mode.") nil [114610 114841])
            ("user-emacs-directory" variable
               (:documentation "Directory beneath which additional per-user Emacs-specific files are placed.
Various programs in Emacs store information in this directory.
Note that this should end with a directory separator.
See also `locate-user-emacs-file'."
                :constant-flag t
                :default-value (if (eq system-type 'ms-dos) "~/_emacs.d/" "~/.emacs.d/"))
                nil [114843 115218])
            ("buffer-narrowed-p" function (:documentation "Return non-nil if the current buffer is narrowed.") nil [115251 115385])
            ("find-tag-default-bounds" function (:documentation "Determine the boundaries of the default tag, based on text at point.
Return a cons cell with the beginning and end of the found tag.
If there is no plausible default, return nil.") nil [115387 115641])
            ("find-tag-default" function (:documentation "Determine default tag to search for, based on text at point.
If there is no plausible default, return nil.") nil [115643 115909])
            ("find-tag-default-as-regexp" function (:documentation "Return regexp that matches the default tag at point.
If there is no tag at point, return nil.

When in a major mode that does not provide its own
`find-tag-default-function', return a regexp that matches the
symbol at point exactly.") nil [115911 116346])
            ("find-tag-default-as-symbol-regexp" function (:documentation "Return regexp that matches the default tag at point as symbol.
If there is no tag at point, return nil.

When in a major mode that does not provide its own
`find-tag-default-function', return a regexp that matches the
symbol at point exactly.") nil [116348 116907])
            ("play-sound" function
               (:documentation "SOUND is a list of the form `(sound KEYWORD VALUE...)'.
The following keywords are recognized:

  :file FILE - read sound data from FILE.  If FILE isn't an
absolute file name, it is searched in `data-directory'.

  :data DATA - read sound data from string DATA.

Exactly one of :file or :data must be present.

  :volume VOL - set volume to VOL.  VOL must an integer in the
range 0..100 or a float in the range 0..1.0.  If not specified,
don't change the volume setting of the sound device.

  :device DEVICE - play sound on DEVICE.  If not specified,
a system-dependent default device name is used.

Note: :data and :device are currently not supported on Windows."
                :arguments ("sound"))
                nil [116909 117728])
            ("declare-function" code nil nil [117730 117786])
            ("shell-quote-argument" function
               (:documentation "Quote ARGUMENT for passing as argument to an inferior shell.

This function is designed to work with the syntax of your system's
standard shell, and might produce incorrect results with unusual shells.
See Info node `(elisp)Security Considerations'."
                :arguments ("argument"))
                nil [117788 120122])
            ("string-to-list" function
               (:documentation "Return a list of characters in STRING."
                :arguments ("string"))
                nil [120124 120223])
            ("string-to-vector" function
               (:documentation "Return a vector of characters in STRING."
                :arguments ("string"))
                nil [120225 120325])
            ("string-or-null-p" function
               (:documentation "Return t if OBJECT is a string or nil.
Otherwise, return nil."
                :arguments ("object"))
                nil [120327 120464])
            ("booleanp" function
               (:documentation "Return t if OBJECT is one of the two canonical boolean values: t or nil.
Otherwise, return nil."
                :arguments ("object"))
                nil [120466 120624])
            ("special-form-p" function
               (:documentation "Non-nil if and only if OBJECT is a special form."
                :arguments ("object"))
                nil [120626 120869])
            ("macrop" function
               (:documentation "Non-nil if and only if OBJECT is a macro."
                :arguments ("object"))
                nil [120871 121101])
            ("field-at-pos" function
               (:documentation "Return the field at position POS, taking stickiness etc into account."
                :arguments ("pos"))
                nil [121103 121373])
            ("sha1" function
               (:documentation "Return the SHA1 (Secure Hash Algorithm) of an OBJECT.
OBJECT is either a string or a buffer.  Optional arguments START and
END are character positions specifying which portion of OBJECT for
computing the hash.  If BINARY is non-nil, return a string in binary
form."
                :arguments ("object" "start" "end" "binary"))
                nil [121375 121738])
            ("function-get" function
               (:documentation "Return the value of property PROP of function F.
If AUTOLOAD is non-nil and F is autoloaded, try to autoload it
in the hope that it will set PROP.  If AUTOLOAD is `macro', only do it
if it's an autoloaded macro."
                :arguments ("f" "prop" "autoload"))
                nil [121740 122550])
            ("yank-handled-properties" variable nil nil [122657 122689])
            ("yank-excluded-properties" variable nil nil [122690 122723])
            ("remove-yank-excluded-properties" function
               (:documentation "Process text properties between START and END, inserted for a `yank'.
Perform the handling specified by `yank-handled-properties', then
remove properties specified by `yank-excluded-properties'."
                :arguments ("start" "end"))
                nil [122725 123598])
            ("yank-undo-function" variable nil nil [123600 123627])
            ("insert-for-yank" function
               (:documentation "Insert STRING at point for the `yank' command.

This function is like `insert', except it honors the variables
`yank-handled-properties' and `yank-excluded-properties', and the
`yank-handler' text property, in the way that `yank' does."
                :arguments ("string"))
                nil [123629 124110])
            ("insert-for-yank-1" function
               (:documentation "Helper for `insert-for-yank', which see."
                :arguments ("string"))
                nil [124112 125284])
            ("insert-buffer-substring-no-properties" function
               (:documentation "Insert before point a substring of BUFFER, without text properties.
BUFFER may be a buffer or a buffer name.
Arguments START and END are character positions specifying the substring.
They default to the values of (point-min) and (point-max) in BUFFER."
                :arguments ("buffer" "start" "end"))
                nil [125286 125771])
            ("insert-buffer-substring-as-yank" function
               (:documentation "Insert before point a part of BUFFER, stripping some text properties.
BUFFER may be a buffer or a buffer name.
Arguments START and END are character positions specifying the substring.
They default to the values of (point-min) and (point-max) in BUFFER.
Before insertion, process text properties according to
`yank-handled-properties' and `yank-excluded-properties'."
                :arguments ("buffer" "start" "end"))
                nil [125773 126459])
            ("yank-handle-font-lock-face-property" function
               (:documentation "If `font-lock-defaults' is nil, apply FACE as a `face' property.
START and END denote the start and end of the text to act on.
Do nothing if FACE is nil."
                :arguments ("face" "start" "end"))
                nil [126461 126773])
            ("yank-handle-category-property" function
               (:documentation "Apply property category CATEGORY's properties between START and END."
                :arguments ("category" "start" "end"))
                nil [126902 127340])
            ("start-process-shell-command" function
               (:documentation "Start a program in a subprocess.  Return the process object for it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated
 with any buffer
COMMAND is the shell command to run.

An old calling convention accepted any number of arguments after COMMAND,
which were just concatenated to COMMAND.  This is still supported but strongly
discouraged."
                :arguments ("name" "buffer" "args"))
                nil [127378 128362])
            ("start-file-process-shell-command" function
               (:documentation "Start a program in a subprocess.  Return the process object for it.
Similar to `start-process-shell-command', but calls `start-file-process'."
                :arguments ("name" "buffer" "args"))
                nil [128364 128856])
            ("call-process-shell-command" function
               (:documentation "Execute the shell command COMMAND synchronously in separate process.
The remaining arguments are optional.
The program's input comes from file INFILE (nil means `/dev/null').
Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

Fourth arg DISPLAY non-nil means redisplay buffer as output is inserted.
Wildcards and redirection are handled as usual in the shell.

If BUFFER is 0, `call-process-shell-command' returns immediately with value nil.
Otherwise it waits for COMMAND to terminate and returns a numeric exit
status or a signal description string.
If you quit, the process is killed with SIGINT, or SIGKILL if you quit again.

An old calling convention accepted any number of arguments after DISPLAY,
which were just concatenated to COMMAND.  This is still supported but strongly
discouraged."
                :arguments ("command" "infile" "buffer" "display" "args"))
                nil [128858 130499])
            ("process-file-shell-command" function
               (:documentation "Process files synchronously in a separate process.
Similar to `call-process-shell-command', but calls `process-file'."
                :arguments ("command" "infile" "buffer" "display" "args"))
                nil [130501 131050])
            ("call-shell-region" function
               (:documentation "Send text from START to END as input to an inferior shell running COMMAND.
Delete the text if fourth arg DELETE is non-nil.

Insert output in BUFFER before point; t means current buffer; nil for
 BUFFER means discard it; 0 means discard and don't wait; and `(:file
 FILE)', where FILE is a file name string, means that it should be
 written to that file (if the file already exists it is overwritten).
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

If BUFFER is 0, `call-shell-region' returns immediately with value nil.
Otherwise it waits for COMMAND to terminate
and returns a numeric exit status or a signal description string.
If you quit, the process is killed with SIGINT, or SIGKILL if you quit again."
                :arguments ("start" "end" "command" "delete" "buffer"))
                nil [131052 132242])
            ("track-mouse" function
               (:documentation "Evaluate BODY with mouse movement events enabled.
Within a `track-mouse' form, mouse motion generates input events that
 you can read with `read-event'.
Normally, mouse motion is ignored."
                :arguments ("body"))
                nil [132297 132603])
            ("with-current-buffer" function
               (:documentation "Execute the forms in BODY with BUFFER-OR-NAME temporarily current.
BUFFER-OR-NAME must be a buffer or the name of an existing buffer.
The value returned is the value of the last form in BODY.  See
also `with-temp-buffer'."
                :arguments ("buffer-or-name" "body"))
                nil [132605 132993])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [132995 133515])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [133517 134077])
            ("with-selected-window" function
               (:documentation "Execute the forms in BODY with WINDOW as the selected window.
The value returned is the value of the last form in BODY.

This macro saves and restores the selected window, as well as the
selected window of each frame.  It does not change the order of
recently selected windows.  If the previously selected window of
some frame is no longer live at the end of BODY, that frame's
selected window is left alone.  If the selected window is no
longer live, then whatever window is selected at the end of BODY
remains selected.

This macro uses `save-current-buffer' to save and restore the
current buffer, since otherwise its normal operation could
potentially make a different buffer current.  It does not alter
the buffer list ordering."
                :arguments ("window" "body"))
                nil [134079 135217])
            ("with-selected-frame" function
               (:documentation "Execute the forms in BODY with FRAME as the selected frame.
The value returned is the value of the last form in BODY.

This macro saves and restores the selected frame, and changes the
order of neither the recently selected windows nor the buffers in
the buffer list."
                :arguments ("frame" "body"))
                nil [135219 135960])
            ("save-window-excursion" function
               (:documentation "Execute BODY, then restore previous window configuration.
This macro saves the window configuration on the selected frame,
executes BODY, then calls `set-window-configuration' to restore
the saved window configuration.  The return value is the last
form in BODY.  The window configuration is also restored if BODY
exits nonlocally.

BEWARE: Most uses of this macro introduce bugs.
E.g. it should not be used to try and prevent some code from opening
a new window, since that window may sometimes appear in another frame,
in which case `save-window-excursion' cannot help."
                :arguments ("body"))
                nil [135962 136781])
            ("internal-temp-output-buffer-show" function
               (:documentation "Internal function for `with-output-to-temp-buffer'."
                :arguments ("buffer"))
                nil [136783 138178])
            ("with-output-to-temp-buffer" function
               (:documentation "Bind `standard-output' to buffer BUFNAME, eval BODY, then show that buffer.

This construct makes buffer BUFNAME empty before running BODY.
It does not make the buffer current for BODY.
Instead it binds `standard-output' to that buffer, so that output
generated with `prin1' and similar functions in BODY goes into
the buffer.

At the end of BODY, this marks buffer BUFNAME unmodified and displays
it in a window, but does not select it.  The normal way to do this is
by calling `display-buffer', then running `temp-buffer-show-hook'.
However, if `temp-buffer-show-function' is non-nil, it calls that
function instead (and does not run `temp-buffer-show-hook').  The
function gets one argument, the buffer to display.

The return value of `with-output-to-temp-buffer' is the value of the
last form in BODY.  If BODY does not finish normally, the buffer
BUFNAME is not displayed.

This runs the hook `temp-buffer-setup-hook' before BODY,
with the buffer BUFNAME temporarily current.  It runs the hook
`temp-buffer-show-hook' after displaying buffer BUFNAME, with that
buffer temporarily current, and the window that was used to display it
temporarily selected.  But it doesn't run `temp-buffer-show-hook'
if it uses `temp-buffer-show-function'.

By default, the setup hook puts the buffer into Help mode before running BODY.
If BODY does not change the major mode, the show hook makes the buffer
read-only, and scans it for function and variable names to make them into
clickable cross-references.

See the related form `with-temp-buffer-window'."
                :arguments ("bufname" "body"))
                nil [138231 140684])
            ("with-temp-file" function
               (:documentation "Create a new buffer, evaluate BODY there, and write the buffer to FILE.
The value returned is the value of the last form in BODY.
See also `with-temp-buffer'."
                :arguments ("file" "body"))
                nil [140686 141381])
            ("with-temp-message" function
               (:documentation "Display MESSAGE temporarily if non-nil while BODY is evaluated.
The original message is restored to the echo area after BODY has finished.
The value returned is the value of the last form in BODY.
MESSAGE is written to the message log buffer if `message-log-max' is non-nil.
If MESSAGE is nil, the echo area and message log buffer are unchanged.
Use a MESSAGE of \"\" to temporarily clear the echo area."
                :arguments ("message" "body"))
                nil [141383 142310])
            ("with-temp-buffer" function
               (:documentation "Create a temporary buffer, and evaluate BODY there like `progn'.
See also `with-temp-file' and `with-output-to-string'."
                :arguments ("body"))
                nil [142312 142871])
            ("with-silent-modifications" function
               (:documentation "Execute BODY, pretending it does not modify the buffer.
This macro is typically used around modifications of
text properties which do not really affect the buffer's content.
If BODY performs real modifications to the buffer's text, other
than cosmetic ones, undo data may become corrupted.

This macro will run BODY normally, but doesn't count its buffer
modifications as being buffer modifications.  This affects things
like `buffer-modified-p', checking whether the file is locked by
someone else, running buffer modification hooks, and other things
of that nature."
                :arguments ("body"))
                nil [142873 143863])
            ("with-output-to-string" function
               (:documentation "Execute BODY, return the text it sent to `standard-output', as a string."
                :arguments ("body"))
                nil [143865 144310])
            ("with-local-quit" function
               (:documentation "Execute BODY, allowing quits to terminate BODY but not escape further.
When a quit terminates BODY, `with-local-quit' returns nil but
requests another quit.  That quit will be processed as soon as quitting
is allowed once again.  (Immediately, if `inhibit-quit' is nil.)"
                :arguments ("body"))
                nil [144312 145067])
            ("setq" code nil nil [145129 145261])
            ("while-no-input" function
               (:documentation "Execute BODY only as long as there's no pending input.
If input arrives, that ends the execution of BODY,
and `while-no-input' returns t.  Quitting makes it return nil.
If BODY finishes, `while-no-input' returns whatever value BODY produced."
                :arguments ("body"))
                nil [145263 146901])
            ("condition-case-unless-debug" function
               (:documentation "Like `condition-case' except that it does not prevent debugging.
More specifically if `debug-on-error' is set then the debugger will be invoked
even if this catches the signal."
                :arguments ("var" "bodyform" "handlers"))
                nil [146903 147456])
            ("define-obsolete-function-alias" code nil nil [147458 147553])
            ("with-demoted-errors" function
               (:documentation "Run BODY and demote any errors to simple messages.
FORMAT is a string passed to `message' to format any error message.
It should contain a single %-sequence; e.g., \"Error: %S\".

If `debug-on-error' is non-nil, run BODY without catching its errors.
This is to be used around code which is not expected to signal an error
but which should be robust in the unexpected case that an error is signaled.

For backward compatibility, if FORMAT is not a constant string, it
is assumed to be part of BODY, in which case the message format
used is \"Error: %S\"."
                :arguments ("format" "body"))
                nil [147555 148492])
            ("combine-after-change-calls" function
               (:documentation "Execute BODY, but don't call the after-change functions till the end.
If BODY makes changes in the buffer, they are recorded
and the functions on `after-change-functions' are called several times
when BODY is finished.
The return value is the value of the last form in BODY.

If `before-change-functions' is non-nil, then calls to the after-change
functions can't be deferred, so in that case this macro has no effect.

Do not alter `after-change-functions' or `before-change-functions'
in BODY."
                :arguments ("body"))
                nil [148494 149189])
            ("undo--combining-change-calls" variable (:documentation "Non-nil when `combine-change-calls-1' is running.") nil [149272 149367])
            ("combine-change-calls-1" function
               (:documentation "Evaluate BODY, running the change hooks just once, for region (BEG END).

Firstly, `before-change-functions' is invoked for the region
(BEG END), then BODY (a function) is evaluated with
`before-change-functions' and `after-change-functions' bound to
nil, then finally `after-change-functions' is invoked on the
updated region (BEG NEW-END) with a calculated OLD-LEN argument.
If `inhibit-modification-hooks' is initially non-nil, the change
hooks are not run.

The result of `combine-change-calls-1' is the value returned by
BODY.  BODY must not make a different buffer current, except
temporarily.  It must not make any changes to the buffer outside
the specified region.  It must not change
`before-change-functions' or `after-change-functions'.

Additionally, the buffer modifications of BODY are recorded on
the buffer's undo list as a single (apply ...) entry containing
the function `undo--wrap-and-run-primitive-undo'."
                :arguments ("beg" "end" "body"))
                nil [149369 151828])
            ("combine-change-calls" function
               (:documentation "Evaluate BODY, running the change hooks just once.

BODY is a sequence of lisp forms to evaluate.  BEG and END bound
the region the change hooks will be run for.

Firstly, `before-change-functions' is invoked for the region
(BEG END), then the BODY forms are evaluated with
`before-change-functions' and `after-change-functions' bound to
nil, and finally `after-change-functions' is invoked on the
updated region.  The change hooks are not run if
`inhibit-modification-hooks' is initially non-nil.

The result of `combine-change-calls' is the value returned by the
last of the BODY forms to be evaluated.  BODY may not make a
different buffer current, except temporarily.  BODY may not
change the buffer outside the specified region.  It must not
change `before-change-functions' or `after-change-functions'.

Additionally, the buffer modifications of BODY are recorded on
the buffer's undo list as a single (apply ...) entry containing
the function `undo--wrap-and-run-primitive-undo'. "
                :arguments ("beg" "end" "body"))
                nil [151830 152933])
            ("undo--wrap-and-run-primitive-undo" function
               (:documentation "Call `primitive-undo' on the undo elements in LIST.

This function is intended to be called purely by `undo' as the
function in an (apply DELTA BEG END FUNNAME . ARGS) undo
element.  It invokes `before-change-functions' and
`after-change-functions' once each for the entire region (BEG
END) rather than once for each individual change.

Additionally the fresh \"redo\" elements which are generated on
`buffer-undo-list' will themselves be \"enclosed\" in
`undo--wrap-and-run-primitive-undo'.

Undo elements of this form are generated by the macro
`combine-change-calls'."
                :arguments ("beg" "end" "list"))
                nil [152935 153658])
            ("with-case-table" function
               (:documentation "Execute the forms in BODY with TABLE as the current case table.
The value returned is the value of the last form in BODY."
                :arguments ("table" "body"))
                nil [153742 154263])
            ("with-file-modes" function
               (:documentation "Execute BODY with default file permissions temporarily set to MODES.
MODES is as for `set-default-file-modes'."
                :arguments ("modes" "body"))
                nil [154265 154690])
            ("save-match-data-internal" variable nil nil [154724 154757])
            ("save-match-data" function
               (:documentation "Execute the BODY forms, restoring the global value of the match data.
The value returned is the value of the last form in BODY."
                :arguments ("body"))
                nil [155015 155695])
            ("match-string" function
               (:documentation "Return string of text matched by last search.
NUM specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.
If STRING is nil, the current buffer should be the same buffer
the search/match was performed in."
                :arguments ("num" "string"))
                nil [155697 156342])
            ("match-string-no-properties" function
               (:documentation "Return string of text matched by last search, without text properties.
NUM specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.
If STRING is nil, the current buffer should be the same buffer
the search/match was performed in."
                :arguments ("num" "string"))
                nil [156344 157068])
            ("match-substitute-replacement" function
               (:documentation "Return REPLACEMENT as it will be inserted by `replace-match'.
In other words, all back-references in the form `\\&' and `\\N'
are substituted with actual strings matched by the last search.
Optional FIXEDCASE, LITERAL, STRING and SUBEXP have the same
meaning as for `replace-match'."
                :arguments ("replacement" "fixedcase" "literal" "string" "subexp"))
                nil [157071 157720])
            ("looking-back" function
               (:documentation "Return non-nil if text before point matches regular expression REGEXP.
Like `looking-at' except matches before point, and is slower.
LIMIT if non-nil speeds up the search by specifying a minimum
starting position, to avoid checking matches that would start
before LIMIT.

If GREEDY is non-nil, extend the match backwards as far as
possible, stopping when a single additional previous character
cannot be part of a match for REGEXP.  When the match is
extended, its starting position is allowed to occur before
LIMIT.

As a general recommendation, try to avoid using `looking-back'
wherever possible, since it is slow."
                :arguments ("regexp" "limit" "greedy"))
                nil [157723 158994])
            ("looking-at-p" function
               (:documentation "Same as `looking-at' except this function does not change the match data."
                :arguments ("regexp"))
                nil [158996 159174])
            ("string-match-p" function
               (:documentation "Same as `string-match' except this function does not change the match data."
                :arguments ("regexp" "string" "start"))
                nil [159176 159396])
            ("subregexp-context-p" function
               (:documentation "Return non-nil if POS is in a normal subregexp context in REGEXP.
A subregexp context is one where a sub-regexp can appear.
A non-subregexp context is for example within brackets, or within a
repetition bounds operator `\\=\\{...\\}', or right after a `\\'.
If START is non-nil, it should be a position in REGEXP, smaller
than POS, and known to be in a subregexp context."
                :arguments ("regexp" "pos" "start"))
                nil [159398 161308])
            ("split-string-default-separators" variable
               (:documentation "The default value of separators for `split-string'.

A regexp matching strings of whitespace.  May be locale-dependent
(as yet unimplemented).  Should not match non-breaking spaces.

Warning: binding this to a different value and using it as default is
likely to have undesired semantics."
                :constant-flag t
                :default-value "[ 	
]+")
                nil [161330 161683])
            ("split-string" function
               (:documentation "Split STRING into substrings bounded by matches for SEPARATORS.

The beginning and end of STRING, and each match for SEPARATORS, are
splitting points.  The substrings matching SEPARATORS are removed, and
the substrings between the splitting points are collected as a list,
which is returned.

If SEPARATORS is non-nil, it should be a regular expression matching text
which separates, but is not part of, the substrings.  If nil it defaults to
`split-string-default-separators', normally \"[ \\f\\t\\n\\r\\v]+\", and
OMIT-NULLS is forced to t.

If OMIT-NULLS is t, zero-length substrings are omitted from the list (so
that for the default value of SEPARATORS leading and trailing whitespace
are effectively trimmed).  If nil, all zero-length substrings are retained,
which correctly parses CSV format, for example.

If TRIM is non-nil, it should be a regular expression to match
text to trim from the beginning and end of each substring.  If trimming
makes the substring empty, it is treated as null.

If you want to trim whitespace from the substrings, the reliably correct
way is using TRIM.  Making SEPARATORS match that whitespace gives incorrect
results when there is whitespace at the start or end of STRING.  If you
see such calls to `split-string', please fix them.

Note that the effect of `(split-string STRING)' is the same as
`(split-string STRING split-string-default-separators t)'.  In the rare
case that you wish to retain zero-length substrings when splitting on
whitespace, use `(split-string STRING split-string-default-separators)'.

Modifies the match data; use `save-match-data' if necessary."
                :arguments ("string" "separators" "omit-nulls" "trim"))
                nil [161945 165061])
            ("combine-and-quote-strings" function
               (:documentation "Concatenate the STRINGS, adding the SEPARATOR (default \" \").
This tries to quote the strings to avoid ambiguity such that
  (split-string-and-unquote (combine-and-quote-strings strs)) == strs
Only some SEPARATORs will work properly.

Note that this is not intended to protect STRINGS from
interpretation by shells, use `shell-quote-argument' for that."
                :arguments ("strings" "separator"))
                nil [165063 165743])
            ("split-string-and-unquote" function
               (:documentation "Split the STRING into a list of strings.
It understands Emacs Lisp quoting within STRING, such that
  (split-string-and-unquote (combine-and-quote-strings strs)) == strs
The SEPARATOR regexp defaults to \"\\s-+\"."
                :arguments ("string" "separator"))
                nil [165745 166381])
            ("subst-char-in-string" function
               (:documentation "Replace FROMCHAR with TOCHAR in STRING each time it occurs.
Unless optional argument INPLACE is non-nil, return a new string."
                :arguments ("fromchar" "tochar" "string" "inplace"))
                nil [166415 166819])
            ("replace-regexp-in-string" function
               (:documentation "Replace all matches for REGEXP with REP in STRING.

Return a new string containing the replacements.

Optional arguments FIXEDCASE, LITERAL and SUBEXP are like the
arguments with the same names of function `replace-match'.  If START
is non-nil, start replacements at that index in STRING.

REP is either a string used as the NEWTEXT arg of `replace-match' or a
function.  If it is a function, it is called with the actual text of each
match, and its value is used as the replacement text.  When REP is called,
the match data are the result of matching REGEXP against a substring
of STRING, the same substring that is the actual text of the match which
is passed to REP as its argument.

To replace only the first match (if any), make REGEXP match up to \\\\='
and replace a sub-expression, e.g.
  (replace-regexp-in-string \"\\\\(foo\\\\).*\\\\\\='\" \"bar\" \" foo foo\" nil nil 1)
    => \" bar foo\""
                :arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start"))
                nil [166821 169502])
            ("string-prefix-p" function
               (:documentation "Return non-nil if PREFIX is a prefix of STRING.
If IGNORE-CASE is non-nil, the comparison is done without paying attention
to case differences."
                :arguments ("prefix" "string" "ignore-case"))
                nil [169505 169900])
            ("string-suffix-p" function
               (:documentation "Return non-nil if SUFFIX is a suffix of STRING.
If IGNORE-CASE is non-nil, the comparison is done without paying
attention to case differences."
                :arguments ("suffix" "string" "ignore-case"))
                nil [169902 170311])
            ("bidi-string-mark-left-to-right" function
               (:documentation "Return a string that can be safely inserted in left-to-right text.

Normally, inserting a string with right-to-left (RTL) script into
a buffer may cause some subsequent text to be displayed as part
of the RTL segment (usually this affects punctuation characters).
This function returns a string which displays as STR but forces
subsequent text to be displayed as left-to-right.

If STR contains any RTL character, this function returns a string
consisting of STR followed by an invisible left-to-right mark
(LRM) character.  Otherwise, it returns STR."
                :arguments ("str"))
                nil [170313 171096])
            ("string-greaterp" function
               (:documentation "Return non-nil if STRING1 is greater than STRING2 in lexicographic order.
Case is significant.
Symbols are also allowed; their print names are used instead."
                :arguments ("string1" "string2"))
                nil [171098 171333])
            ("load-history-regexp" function
               (:documentation "Form a regexp to find FILE in `load-history'.
FILE, a string, is described in the function `eval-after-load'."
                :arguments ("file"))
                nil [171374 172010])
            ("load-history-filename-element" function
               (:documentation "Get the first elt of `load-history' whose car matches FILE-REGEXP.
Return nil if there isn't one."
                :arguments ("file-regexp"))
                nil [172012 172448])
            ("put" code nil nil [172450 172496])
            ("eval-after-load" function
               (:documentation "Arrange that if FILE is loaded, FORM will be run immediately afterwards.
If FILE is already loaded, evaluate FORM right now.
FORM can be an Elisp expression (in which case it's passed to `eval'),
or a function (in which case it's passed to `funcall' with no argument).

If a matching file is loaded again, FORM will be evaluated again.

If FILE is a string, it may be either an absolute or a relative file
name, and may have an extension (e.g. \".el\") or may lack one, and
additionally may or may not have an extension denoting a compressed
format (e.g. \".gz\").

When FILE is absolute, this first converts it to a true name by chasing
symbolic links.  Only a file of this name (see next paragraph regarding
extensions) will trigger the evaluation of FORM.  When FILE is relative,
a file whose absolute true name ends in FILE will trigger evaluation.

When FILE lacks an extension, a file name with any extension will trigger
evaluation.  Otherwise, its extension must match FILE's.  A further
extension for a compressed format (e.g. \".gz\") on FILE will not affect
this name matching.

Alternatively, FILE can be a feature (i.e. a symbol), in which case FORM
is evaluated at the end of any file that `provide's this feature.
If the feature is provided when evaluating code not associated with a
file, FORM is evaluated immediately after the provide statement.

Usually FILE is just a library name like \"font-lock\" or a feature name
like `font-lock'.

This function makes or adds to an entry on `after-load-alist'."
                :arguments ("file" "form"))
                nil [172497 176379])
            ("with-eval-after-load" function
               (:documentation "Execute BODY after FILE is loaded.
FILE is normally a feature name, but it can also be a file name,
in case that file does not provide any feature.  See `eval-after-load'
for more details about the different forms of FILE and their semantics."
                :arguments ("file" "body"))
                nil [176381 176756])
            ("after-load-functions" variable (:documentation "Special hook run after loading a file.
Each function there is called with a single argument, the absolute
name of the file just loaded.") nil [176758 176931])
            ("do-after-load-evaluation" function
               (:documentation "Evaluate all `eval-after-load' forms, if any, for ABS-FILE.
ABS-FILE, a string, should be the absolute true name of a file just loaded.
This function is called directly from the C code."
                :arguments ("abs-file"))
                nil [176933 178500])
            ("eval-next-after-load" function
               (:documentation "Read the following input sexp, and run it whenever FILE is loaded.
This makes or adds to an entry on `after-load-alist'.
FILE should be the name of a library, with no directory name."
                :arguments ("file"))
                nil [178502 178802])
            ("display-delayed-warnings" function (:documentation "Display delayed warnings from `delayed-warnings-list'.
Used from `delayed-warnings-hook' (which see).") nil [178806 179073])
            ("collapse-delayed-warnings" function (:documentation "Remove duplicates from `delayed-warnings-list'.
Collapse identical adjacent warnings into one (plus count).
Used from `delayed-warnings-hook' (which see).") nil [179075 179754])
            ("delayed-warnings-hook" variable
               (:documentation "Normal hook run to process and display delayed warnings.
By default, this hook contains functions to consolidate the
warnings listed in `delayed-warnings-list', display them, and set
`delayed-warnings-list' back to nil."
                :default-value '(collapse-delayed-warnings display-delayed-warnings))
                nil [179874 180214])
            ("delay-warning" function
               (:documentation "Display a delayed warning.
Aside from going through `delayed-warnings-list', this is equivalent
to `display-warning'."
                :arguments ("type" "message" "level" "buffer-name"))
                nil [180216 180471])
            ("add-to-invisibility-spec" function
               (:documentation "Add ELEMENT to `buffer-invisibility-spec'.
See documentation for `buffer-invisibility-spec' for the kind of elements
that can be added.

If `buffer-invisibility-spec' isn't a list before calling this
function, `buffer-invisibility-spec' will afterwards be a list
with the value `(t ELEMENT)'.  This means that if text exists
that invisibility values that aren't either `t' or ELEMENT, that
text will become visible."
                :arguments ("element"))
                nil [180500 181123])
            ("remove-from-invisibility-spec" function
               (:documentation "Remove ELEMENT from `buffer-invisibility-spec'.
If `buffer-invisibility-spec' isn't a list before calling this
function, it will be made into a list containing just `t' as the
only list member.  This means that if text exists with non-`t'
invisibility values, that text will become visible."
                :arguments ("element"))
                nil [181125 181613])
            ("with-syntax-table" function
               (:documentation "Evaluate BODY with syntax table of current buffer set to TABLE.
The syntax table of the current buffer is saved, BODY is evaluated, and the
saved table is restored, even in case of an abnormal exit.
Value is what BODY returns."
                :arguments ("table" "body"))
                nil [181637 182273])
            ("make-syntax-table" function
               (:documentation "Return a new syntax table.
Create a syntax table which inherits from OLDTABLE (if non-nil) or
from `standard-syntax-table' otherwise."
                :arguments ("oldtable"))
                nil [182275 182595])
            ("syntax-after" function
               (:documentation "Return the raw syntax descriptor for the char after POS.
If POS is outside the buffer's accessible portion, return nil."
                :arguments ("pos"))
                nil [182597 182970])
            ("syntax-class" function
               (:documentation "Return the code for the syntax class described by SYNTAX.

SYNTAX should be a raw syntax descriptor; the return value is a
integer which encodes the corresponding syntax class.  See Info
node `(elisp)Syntax Table Internals' for a list of codes.

If SYNTAX is nil, return nil."
                :arguments ("syntax"))
                nil [182972 183324])
            ("word-move-empty-char-table" variable (:documentation "Used in `forward-word-strictly' and `backward-word-strictly'
to countermand the effect of `find-word-boundary-function-table'.") nil [183355 183525])
            ("forward-word-strictly" function
               (:documentation "Move point forward ARG words (backward if ARG is negative).
If ARG is omitted or nil, move point forward one word.
Normally returns t.
If an edge of the buffer or a field boundary is reached, point is left there
and the function returns nil.  Field boundaries are not noticed if
`inhibit-field-text-motion' is non-nil.

This function is like `forward-word', but it is not affected
by `find-word-boundary-function-table'.  It is also not interactive."
                :arguments ("arg"))
                nil [183527 184265])
            ("backward-word-strictly" function
               (:documentation "Move backward until encountering the beginning of a word.
With argument ARG, do this that many times.
If ARG is omitted or nil, move point backward one word.

This function is like `forward-word', but it is not affected
by `find-word-boundary-function-table'.  It is also not interactive."
                :arguments ("arg"))
                nil [184267 184849])
            ("forward-whitespace" function
               (:documentation "Move point to the end of the next sequence of whitespace chars.
Each such sequence may be a single newline, or a sequence of
consecutive space and/or tab characters.
With prefix argument ARG, do it ARG times if positive, or move
backwards ARG times if negative."
                :user-visible-flag t
                :arguments ("arg"))
                nil [184867 185450])
            ("forward-symbol" function
               (:documentation "Move point to the next position that is the end of a symbol.
A symbol is any sequence of characters that are in either the
word constituent or symbol constituent syntax class.
With prefix argument ARG, do it ARG times if positive, or move
backwards ARG times if negative."
                :user-visible-flag t
                :arguments ("arg"))
                nil [185465 186014])
            ("forward-same-syntax" function
               (:documentation "Move point past all characters with the same syntax class.
With prefix argument ARG, do it ARG times if positive, or move
backwards ARG times if negative."
                :user-visible-flag t
                :arguments ("arg"))
                nil [186035 186517])
            ("text-clone--maintaining" variable nil nil [186539 186575])
            ("text-clone--maintain" function
               (:documentation "Propagate the changes made under the overlay OL1 to the other clones.
This is used on the `modification-hooks' property of text clones."
                :arguments ("ol1" "after" "beg" "end" "_len"))
                nil [186577 188643])
            ("text-clone-create" function
               (:documentation "Create a text clone of START...END at point.
Text clones are chunks of text that are automatically kept identical:
changes done to one of the clones will be immediately propagated to the other.

The buffer's content at point is assumed to be already identical to
the one between START and END.
If SYNTAX is provided it's a regexp that describes the possible text of
the clones; the clone will be shrunk or killed if necessary to ensure that
its text matches the regexp.
If SPREADP is non-nil it indicates that text inserted before/after the
clone should be incorporated in the clone."
                :arguments ("start" "end" "spreadp" "syntax"))
                nil [188645 190893])
            ("define-mail-user-agent" function
               (:documentation "Define a symbol to identify a mail-sending package for `mail-user-agent'.

SYMBOL can be any Lisp symbol.  Its function definition and/or
value as a variable do not matter for this usage; we use only certain
properties on its property list, to encode the rest of the arguments.

COMPOSEFUNC is program callable function that composes an outgoing
mail message buffer.  This function should set up the basics of the
buffer without requiring user interaction.  It should populate the
standard mail headers, leaving the `to:' and `subject:' headers blank
by default.

COMPOSEFUNC should accept several optional arguments--the same
arguments that `compose-mail' takes.  See that function's documentation.

SENDFUNC is the command a user would run to send the message.

Optional ABORTFUNC is the command a user would run to abort the
message.  For mail packages that don't have a separate abort function,
this can be `kill-buffer' (the equivalent of omitting this argument).

Optional HOOKVAR is a hook variable that gets run before the message
is actually sent.  Callers that use the `mail-user-agent' may
install a hook function temporarily on this hook variable.
If HOOKVAR is nil, `mail-send-hook' is used.

The properties used on SYMBOL are `composefunc', `sendfunc',
`abortfunc', and `hookvar'."
                :arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar"))
                nil [191001 192579])
            ("backtrace-frames" function
               (:documentation "Collect all frames of current backtrace into a list.
If non-nil, BASE should be a function, and frames before its
nearest activation frames are discarded."
                :arguments ("base"))
                nil [192583 192936])
            ("backtrace-frame" function
               (:documentation "Return the function and arguments NFRAMES up from current execution point.
If non-nil, BASE should be a function, and NFRAMES counts from its
nearest activation frame.
If the frame has not evaluated the arguments yet (or is a special form),
the value is (nil FUNCTION ARG-FORMS...).
If the frame has evaluated its arguments and called its function already,
the value is (t FUNCTION ARG-VALUES...).
A &rest arg is represented as the tail of the list ARG-VALUES.
FUNCTION is whatever was supplied as car of evaluated list,
or a lambda expression for macro calls.
If NFRAMES is more than the number of frames, the value is nil."
                :arguments ("nframes" "base"))
                nil [192938 193738])
            ("called-interactively-p-functions" variable (:documentation "Special hook called to skip special frames in `called-interactively-p'.
The functions are called with 3 arguments: (I FRAME1 FRAME2),
where FRAME1 is a \"current frame\", FRAME2 is the next frame,
I is the index of the frame after FRAME2.  It should return nil
if those frames don't seem special and otherwise, it should return
the number of frames to skip (minus 1).") nil [193742 194159])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function 'funcall-interactively))
                nil [194161 194246])
            ("called-interactively-p" function
               (:documentation "Return t if the containing function was called by `call-interactively'.
If KIND is `interactive', then only return t if the call was made
interactively by the user, i.e. not in `noninteractive' mode nor
when `executing-kbd-macro'.
If KIND is `any', on the other hand, it will return t for any kind of
interactive call, including being called as the binding of a key or
from a keyboard macro, even in `noninteractive' mode.

This function is very brittle, it may fail to return the intended result when
the code is debugged, advised, or instrumented in some form.  Some macros and
special forms (such as `condition-case') may also sometimes wrap their bodies
in a `lambda', so any call to `called-interactively-p' from those bodies will
indicate whether that lambda (rather than the surrounding function) was called
interactively.

Instead of using this function, it is cleaner and more reliable to give your
function an extra optional argument whose `interactive' spec specifies
non-nil unconditionally (\"p\" is a good way to do this), or via
(not (or executing-kbd-macro noninteractive)).

The only known proper use of `interactive' for KIND is in deciding
whether to display a helpful message, or how to display it.  If you're
thinking of using it for any other purpose, it is quite likely that
you're making a mistake.  Think: what do you want to do when the
command is called from a keyboard macro?"
                :arguments ("kind"))
                nil [194248 198429])
            ("interactive-p" function (:documentation "Return t if the containing function was run directly by user input.
This means that the function was called with `call-interactively'
(which includes being called as the binding of a key)
and input is currently coming from the keyboard (not a keyboard macro),
and Emacs is not running in batch mode (`noninteractive' is nil).

The only known proper use of `interactive-p' is in deciding whether to
display a helpful message, or how to display it.  If you're thinking
of using it for any other purpose, it is quite likely that you're
making a mistake.  Think: what do you want to do when the command is
called from a keyboard macro or in batch mode?

To test whether your function was called with `call-interactively',
either (i) add an extra optional argument and give it an `interactive'
spec that specifies non-nil unconditionally (such as \"p\"); or (ii)
use `called-interactively-p'.

To test whether a function can be called interactively, use
`commandp'.") nil [198431 199514])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [199516 199861])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [199863 200171])
            ("define-obsolete-function-alias" code nil nil [200173 200260])
            ("set-transient-map" function
               (:documentation "Set MAP as a temporary keymap taking precedence over other keymaps.
Normally, MAP is used only once, to look up the very next key.
However, if the optional argument KEEP-PRED is t, MAP stays
active if a key from MAP is used.  KEEP-PRED can also be a
function of no arguments: it is called from `pre-command-hook' and
if it returns non-nil, then MAP stays active.

Optional arg ON-EXIT, if non-nil, specifies a function that is
called, with no arguments, after MAP is deactivated.

This uses `overriding-terminal-local-map' which takes precedence over all other
keymaps.  As usual, if no match for a key is found in MAP, the normal key
lookup sequence then continues.

This returns an \"exit function\", which can be called with no argument
to deactivate this transient map, regardless of KEEP-PRED."
                :arguments ("map" "keep-pred" "on-exit"))
                nil [200262 203038])
            ("progress-reporter-update" function
               (:documentation "Report progress of an operation in the echo area.
REPORTER should be the result of a call to `make-progress-reporter'.

If REPORTER is a numerical progress reporter---i.e. if it was
 made using non-nil MIN-VALUE and MAX-VALUE arguments to
 `make-progress-reporter'---then VALUE should be a number between
 MIN-VALUE and MAX-VALUE.

If REPORTER is a non-numerical reporter, VALUE should be nil.

This function is relatively inexpensive.  If the change since
last update is too small or insufficient time has passed, it does
nothing."
                :arguments ("reporter" "value"))
                nil [203621 204388])
            ("make-progress-reporter" function
               (:documentation "Return progress reporter object for use with `progress-reporter-update'.

MESSAGE is shown in the echo area, with a status indicator
appended to the end.  When you call `progress-reporter-done', the
word \"done\" is printed after the MESSAGE.  You can change the
MESSAGE of an existing progress reporter by calling
`progress-reporter-force-update'.

MIN-VALUE and MAX-VALUE, if non-nil, are starting (0% complete)
and final (100% complete) states of operation; the latter should
be larger.  In this case, the status message shows the percentage
progress.

If MIN-VALUE and/or MAX-VALUE is omitted or nil, the status
message shows a \"spinning\", non-numeric indicator.

Optional CURRENT-VALUE is the initial progress; the default is
MIN-VALUE.
Optional MIN-CHANGE is the minimal change in percents to report;
the default is 1%.
CURRENT-VALUE and MIN-CHANGE do not have any effect if MIN-VALUE
and/or MAX-VALUE are nil.

Optional MIN-TIME specifies the minimum interval time between
echo area updates (default is 0.2 seconds.)  If the OS is not
capable of measuring fractions of seconds, this parameter is
effectively rounded up."
                :arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time"))
                nil [204390 206129])
            ("progress-reporter-force-update" function
               (:documentation "Report progress of an operation in the echo area unconditionally.

The first two arguments are the same as in `progress-reporter-update'.
NEW-MESSAGE, if non-nil, sets a new message for the reporter."
                :arguments ("reporter" "value" "new-message"))
                nil [206131 206630])
            ("progress-reporter--pulse-characters" variable
               (:documentation "Characters to use for pulsing progress reporters."
                :default-value ["-" "\\" "|" "/"])
                nil [206632 206749])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [206751 208427])
            ("progress-reporter-done" function
               (:documentation "Print reporter's message followed by word \"done\" in echo area."
                :arguments ("reporter"))
                nil [208429 208584])
            ("dotimes-with-progress-reporter" function
               (:documentation "Loop a certain number of times and report progress in the echo area.
Evaluate BODY with VAR bound to successive integers running from
0, inclusive, to COUNT, exclusive.  Then evaluate RESULT to get
the return value (nil if RESULT is omitted).

REPORTER-OR-MESSAGE is a progress reporter object or a string.  In the latter
case, use this string to create a progress reporter.

At each iteration, print the reporter message followed by progress
percentage in the echo area.  After the loop is finished,
print the reporter message followed by the word \"done\".

This macro is a convenience wrapper around `make-progress-reporter' and friends.

(fn (VAR COUNT [RESULT]) REPORTER-OR-MESSAGE BODY...)"
                :arguments ("spec" "reporter-or-message" "body"))
                nil [208586 209882])
            ("dolist-with-progress-reporter" function
               (:documentation "Loop over a list and report progress in the echo area.
Evaluate BODY with VAR bound to each car from LIST, in turn.
Then evaluate RESULT to get return value, default nil.

REPORTER-OR-MESSAGE is a progress reporter object or a string.  In the latter
case, use this string to create a progress reporter.

At each iteration, print the reporter message followed by progress
percentage in the echo area.  After the loop is finished,
print the reporter message followed by the word \"done\".

(fn (VAR LIST [RESULT]) REPORTER-OR-MESSAGE BODY...)"
                :arguments ("spec" "reporter-or-message" "body"))
                nil [209884 211133])
            ("version-separator" variable
               (:documentation "Specify the string used to separate the version elements.

Usually the separator is \".\", but it can be any other string."
                :constant-flag t
                :default-value ".")
                nil [211170 211329])
            ("version-regexp-alist" variable
               (:documentation "Specify association between non-numeric version and its priority.

This association is used to handle version string like \"1.0pre2\",
\"0.9alpha1\", etc.  It's used by `version-to-list' (which see) to convert the
non-numeric part of a version string to an integer.  For example:

   String Version    Integer List Version
   \"0.9snapshot\"     (0  9 -4)
   \"1.0-git\"         (1  0 -4)
   \"1.0.cvs\"         (1  0 -4)
   \"1.0pre2\"         (1  0 -1 2)
   \"1.0PRE2\"         (1  0 -1 2)
   \"22.8beta3\"       (22 8 -2 3)
   \"22.8 Beta3\"      (22 8 -2 3)
   \"0.9alpha1\"       (0  9 -3 1)
   \"0.9AlphA1\"       (0  9 -3 1)
   \"0.9 alpha\"       (0  9 -3)

Each element has the following form:

   (REGEXP . PRIORITY)

Where:

REGEXP		regexp used to match non-numeric part of a version string.
		It should begin with the `^' anchor and end with a `$' to
		prevent false hits.  Letter-case is ignored while matching
		REGEXP.

PRIORITY	a negative integer specifying non-numeric priority of REGEXP."
                :constant-flag t
                :default-value '(("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1)))
                nil [211332 212866])
            ("version-to-list" function
               (:documentation "Convert version string VER into a list of integers.

The version syntax is given by the following EBNF:

   VERSION ::= NUMBER ( SEPARATOR NUMBER )*.

   NUMBER ::= (0|1|2|3|4|5|6|7|8|9)+.

   SEPARATOR ::= `version-separator' (which see)
	       | `version-regexp-alist' (which see).

The NUMBER part is optional if SEPARATOR is a match for an element
in `version-regexp-alist'.

Examples of valid version syntax:

   1.0pre2   1.0.7.5   22.8beta3   0.9alpha1   6.9.30Beta   2.4.snapshot   .5

Examples of invalid version syntax:

   1.0prepre2   1.0..7.5   22.8X3   alpha3.2

Examples of version conversion:

   Version String    Version as a List of Integers
   \".5\"              (0 5)
   \"0.9 alpha\"       (0  9 -3)
   \"0.9AlphA1\"       (0  9 -3 1)
   \"0.9snapshot\"     (0  9 -4)
   \"1.0-git\"         (1  0 -4)
   \"1.0.7.5\"         (1  0  7 5)
   \"1.0.cvs\"         (1  0 -4)
   \"1.0PRE2\"         (1  0 -1 2)
   \"1.0pre2\"         (1  0 -1 2)
   \"22.8 Beta3\"      (22 8 -2 3)
   \"22.8beta3\"       (22 8 -2 3)

See documentation for `version-separator' and `version-regexp-alist'."
                :arguments ("ver"))
                nil [212869 215652])
            ("version-list-<" function
               (:documentation "Return t if L1, a list specification of a version, is lower than L2.

Note that a version specified by the list (1) is equal to (1 0),
(1 0 0), (1 0 0 0), etc.  That is, the trailing zeros are insignificant.
Also, a version given by the list (1) is higher than (1 -1), which in
turn is higher than (1 -2), which is higher than (1 -3)."
                :arguments ("l1" "l2"))
                nil [215654 216485])
            ("version-list-=" function
               (:documentation "Return t if L1, a list specification of a version, is equal to L2.

Note that a version specified by the list (1) is equal to (1 0),
(1 0 0), (1 0 0 0), etc.  That is, the trailing zeros are insignificant.
Also, a version given by the list (1) is higher than (1 -1), which in
turn is higher than (1 -2), which is higher than (1 -3)."
                :arguments ("l1" "l2"))
                nil [216488 217287])
            ("version-list-<=" function
               (:documentation "Return t if L1, a list specification of a version, is lower or equal to L2.

Note that integer list (1) is equal to (1 0), (1 0 0), (1 0 0 0),
etc.  That is, the trailing zeroes are insignificant.  Also, integer
list (1) is greater than (1 -1) which is greater than (1 -2)
which is greater than (1 -3)."
                :arguments ("l1" "l2"))
                nil [217290 218075])
            ("version-list-not-zero" function
               (:documentation "Return the first non-zero element of LST, which is a list of integers.

If all LST elements are zeros or LST is nil, return zero."
                :arguments ("lst"))
                nil [218077 218387])
            ("version<" function
               (:documentation "Return t if version V1 is lower (older) than V2.

Note that version string \"1\" is equal to \"1.0\", \"1.0.0\", \"1.0.0.0\",
etc.  That is, the trailing \".0\"s are insignificant.  Also, version
string \"1\" is higher (newer) than \"1pre\", which is higher than \"1beta\",
which is higher than \"1alpha\", which is higher than \"1snapshot\".
Also, \"-GIT\", \"-CVS\" and \"-NNN\" are treated as snapshot versions."
                :arguments ("v1" "v2"))
                nil [218390 218894])
            ("version<=" function
               (:documentation "Return t if version V1 is lower (older) than or equal to V2.

Note that version string \"1\" is equal to \"1.0\", \"1.0.0\", \"1.0.0.0\",
etc.  That is, the trailing \".0\"s are insignificant.  Also, version
string \"1\" is higher (newer) than \"1pre\", which is higher than \"1beta\",
which is higher than \"1alpha\", which is higher than \"1snapshot\".
Also, \"-GIT\", \"-CVS\" and \"-NNN\" are treated as snapshot versions."
                :arguments ("v1" "v2"))
                nil [218896 219414])
            ("version=" function
               (:documentation "Return t if version V1 is equal to V2.

Note that version string \"1\" is equal to \"1.0\", \"1.0.0\", \"1.0.0.0\",
etc.  That is, the trailing \".0\"s are insignificant.  Also, version
string \"1\" is higher (newer) than \"1pre\", which is higher than \"1beta\",
which is higher than \"1alpha\", which is higher than \"1snapshot\".
Also, \"-GIT\", \"-CVS\" and \"-NNN\" are treated as snapshot versions."
                :arguments ("v1" "v2"))
                nil [219416 219910])
            ("package--builtin-versions" variable
               (:documentation "Alist giving the version of each versioned builtin package.
I.e. each element of the list is of the form (NAME . VERSION) where
NAME is the package name as a symbol, and VERSION is its version
as a list."
                :default-value (purecopy `((emacs \, (version-to-list emacs-version)))))
                nil [219912 220289])
            ("package--description-file" function (:arguments ("dir")) nil [220291 220622])
            ("with-mutex" function
               (:documentation "Invoke BODY with MUTEX held, releasing MUTEX when done.
This is the simplest safe way to acquire and release a mutex."
                :arguments ("mutex" "body"))
                nil [220647 220997])
            ("definition-prefixes" variable
               (:documentation "Hash table mapping prefixes to the files in which they're used.
This can be used to automatically fetch not-yet-loaded definitions.
More specifically, if there is a value of the form (FILES...) for a string PREFIX
it means that the FILES define variables or functions with names that start
with PREFIX.

Note that it does not imply that all definitions starting with PREFIX can
be found in those files.  E.g. if prefix is \"gnus-article-\" there might
still be definitions of the form \"gnus-article-toto-titi\" in other files, which would
presumably appear in this table under another prefix such as \"gnus-\"
or \"gnus-article-toto-\"."
                :default-value (make-hash-table :test 'equal))
                nil [221012 221713])
            ("register-definition-prefixes" function
               (:documentation "Register that FILE uses PREFIXES."
                :arguments ("file" "prefixes"))
                nil [221715 221937])
            ("menu-bar-separator" variable
               (:documentation "Separator for menus."
                :constant-flag t
                :default-value '("--"))
                nil [221939 222001])
            ("when" code nil nil [222153 222278])
            ("unmsys--file-name" function
               (:documentation "Produce the canonical file name for FILE from its MSYS form.

On systems other than MS-Windows, just returns FILE.
On MS-Windows, converts /d/foo/bar form of file names
passed by MSYS Make into d:/foo/bar that Emacs can grok.

This function is called from lisp/Makefile and leim/Makefile."
                :arguments ("file"))
                nil [222411 222898]))          
      :file "subr.el.gz"
      :pointmax 222923
      :fsize 65082
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-187856c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166 1107])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1109 1207])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209 1325])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327 1437])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1439 1575])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1577 1947])
            ("if" code nil nil [1949 2040])
            ("ada-add-extensions" function (:prototype-flag t) nil [2171 2457])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2459 2556])
            ("if" code nil nil [2558 2654])
            ("if" code nil nil [2782 2877])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3008 3110])
            ("if" code nil nil [3112 3208])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3339 3475])
            ("if" code nil nil [3477 3573])
            ("put" code nil nil [3687 3756])
            ("add-log-current-defun-function" variable nil nil [3758 4013])
            ("custom-autoload" code nil nil [4015 4076])
            ("add-log-full-name" variable nil nil [4078 4243])
            ("custom-autoload" code nil nil [4245 4293])
            ("add-log-mailing-address" variable nil nil [4295 4656])
            ("custom-autoload" code nil nil [4658 4712])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4714 4811])
            ("find-change-log" function (:prototype-flag t) nil [4813 5902])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5904 7205])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7207 7471])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7473 7899])
            ("add-log-current-defun" function (:prototype-flag t) nil [7901 8422])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8424 8825])
            ("if" code nil nil [8827 8940])
            ("ad-redefinition-action" variable (:default-value 'warn) nil [9067 9721])
            ("custom-autoload" code nil nil [9723 9775])
            ("ad-default-compilation-action" variable (:default-value 'maybe) nil [9777 10326])
            ("custom-autoload" code nil nil [10328 10387])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10389 10515])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10517 10644])
            ("ad-add-advice" function (:prototype-flag t) nil [10646 11708])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11710 12791])
            ("defadvice" function (:prototype-flag t) nil [12793 14967])
            ("function-put" code nil nil [14969 15013])
            ("function-put" code nil nil [15015 15065])
            ("if" code nil nil [15067 15160])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15262 16084])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16086 17894])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17896 18272])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18274 18702])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18704 19164])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19166 19291])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19293 19498])
            ("if" code nil nil [19500 19595])
            ("push" code nil nil [19699 19756])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [19758 19941])
            ("allout-setup" function (:prototype-flag t) nil [19943 20267])
            ("allout-auto-activation" variable nil nil [20269 20933])
            ("custom-autoload" code nil nil [20935 20989])
            ("put" code nil nil [20991 21113])
            ("put" code nil nil [21115 21207])
            ("put" code nil nil [21209 21323])
            ("put" code nil nil [21325 21382])
            ("put" code nil nil [21384 21442])
            ("put" code nil nil [21444 21508])
            ("put" code nil nil [21510 21580])
            ("put" code nil nil [21582 21723])
            ("put" code nil nil [21725 21846])
            ("put" code nil nil [21848 21967])
            ("put" code nil nil [21969 22109])
            ("put" code nil nil [22111 22252])
            ("put" code nil nil [22254 22319])
            ("put" code nil nil [22321 22422])
            ("allout-mode-p" function (:prototype-flag t) nil [22424 22530])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [22532 35599])
            ("defalias" code nil nil [35601 35648])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35650 35926])
            ("if" code nil nil [35928 36025])
            ("push" code nil nil [36161 36226])
            ("allout-widgets-setup" function (:prototype-flag t) nil [36228 36453])
            ("allout-widgets-auto-activation" variable nil nil [36455 36989])
            ("custom-autoload" code nil nil [36991 37061])
            ("put" code nil nil [37063 37186])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37188 38287])
            ("if" code nil nil [38289 38394])
            ("defalias" code nil nil [38513 38566])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38568 38963])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [38965 39051])
            ("if" code nil nil [39053 39191])
            ("animate-string" function (:prototype-flag t) nil [39309 39700])
            ("animate-sequence" function (:prototype-flag t) nil [39702 40066])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40068 40383])
            ("if" code nil nil [40385 40482])
            ("push" code nil nil [40598 40661])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40663 40773])
            ("ansi-color-process-output" function (:prototype-flag t) nil [40775 41364])
            ("if" code nil nil [41366 41471])
            ("push" code nil nil [41615 41678])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41680 42534])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42536 42632])
            ("antlr-set-tabs" function (:prototype-flag t) nil [42634 42830])
            ("if" code nil nil [42832 42932])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43049 43413])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43415 43611])
            ("if" code nil nil [43613 43706])
            ("apropos-read-pattern" function (:prototype-flag t) nil [43814 44167])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44169 44671])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44673 44973])
            ("apropos-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44975 45282])
            ("defalias" code nil nil [45284 45328])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45330 46093])
            ("apropos-documentation-property" function (:prototype-flag t) nil [46095 46255])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46257 46936])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46938 47231])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47233 47875])
            ("apropos-local-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47877 48153])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48155 48871])
            ("if" code nil nil [48873 48972])
            ("archive-mode" function (:prototype-flag t) nil [49083 49608])
            ("if" code nil nil [49610 49710])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49812 52897])
            ("if" code nil nil [52899 53075])
            ("push" code nil nil [53199 53258])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [53260 61124])
            ("if" code nil nil [61126 61223])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61354 62082])
            ("if" code nil nil [62084 62180])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [62300 62467])
            ("custom-autoload" code nil nil [62469 62528])
            ("if" code nil nil [62530 62636])
            ("push" code nil nil [62778 62847])
            ("auth-source-pass-enable" function (:prototype-flag t) nil [62849 62957])
            ("if" code nil nil [62959 63076])
            ("autoarg-mode" variable nil nil [63184 63318])
            ("custom-autoload" code nil nil [63320 63365])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63367 64292])
            ("autoarg-kp-mode" variable nil nil [64294 64591])
            ("custom-autoload" code nil nil [64593 64641])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64643 65150])
            ("if" code nil nil [65152 65251])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65382 65487])
            ("if" code nil nil [65489 65590])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65707 65912])
            ("define-auto-insert" function (:prototype-flag t) nil [65914 66218])
            ("auto-insert-mode" variable nil nil [66220 66521])
            ("custom-autoload" code nil nil [66523 66575])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66577 67077])
            ("if" code nil nil [67079 67184])
            ("put" code nil nil [67325 67385])
            ("put" code nil nil [67387 67452])
            ("put" code nil nil [67454 67509])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67511 68056])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [68058 68874])
            ("batch-update-autoloads" function (:prototype-flag t) nil [68876 69130])
            ("if" code nil nil [69132 69282])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69399 70240])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [70242 70457])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70459 71466])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [71468 71707])
            ("global-auto-revert-mode" variable nil nil [71709 72038])
            ("custom-autoload" code nil nil [72040 72099])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [72101 73209])
            ("if" code nil nil [73211 73339])
            ("if" code nil nil [73480 73581])
            ("mouse-avoidance-mode" variable nil nil [73683 73926])
            ("custom-autoload" code nil nil [73928 73979])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73981 75121])
            ("if" code nil nil [75123 75228])
            ("add-to-list" code nil nil [75359 75427])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75429 75728])
            ("if" code nil nil [75730 75826])
            ("put" code nil nil [75934 75989])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75991 76221])
            ("display-battery-mode" variable nil nil [76223 76540])
            ("custom-autoload" code nil nil [76542 76595])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76597 77166])
            ("if" code nil nil [77168 77267])
            ("benchmark-run" function (:prototype-flag t) nil [77411 77845])
            ("function-put" code nil nil [77847 77901])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [77903 78239])
            ("function-put" code nil nil [78241 78304])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78306 78617])
            ("if" code nil nil [78619 78728])
            ("if" code nil nil [78859 79005])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79130 79844])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79846 82515])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [82517 83262])
            ("if" code nil nil [83264 83361])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [83512 83616])
            ("if" code nil nil [83618 83727])
            ("if" code nil nil [83854 83951])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [84066 84233])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84235 84478])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84480 84624])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84626 84738])
            ("if" code nil nil [84740 84837])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84958 89920])
            ("if" code nil nil [89922 90029])
            ("define-key" code nil nil [90140 90183])
            ("define-key" code nil nil [90185 90227])
            ("define-key" code nil nil [90229 90284])
            ("define-key" code nil nil [90286 90335])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" 'bookmark-set) (define-key map "m" 'bookmark-set) (define-key map "M" 'bookmark-set-no-overwrite) (define-key map "j" 'bookmark-jump) (define-key map "g" 'bookmark-jump) (define-key map "o" 'bookmark-jump-other-window) (define-key map "i" 'bookmark-insert) (define-key map "e" 'edit-bookmarks) (define-key map "f" 'bookmark-insert-location) (define-key map "r" 'bookmark-rename) (define-key map "d" 'bookmark-delete) (define-key map "l" 'bookmark-load) (define-key map "w" 'bookmark-write) (define-key map "s" 'bookmark-save) map)) nil [90337 91225])
            ("fset" code nil nil [91227 91260])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91262 92446])
            ("bookmark-set-no-overwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [92448 93730])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93732 94664])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94666 94808])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94810 95126])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95128 95393])
            ("defalias" code nil nil [95395 95448])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95450 96059])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96061 96471])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96473 96967])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96969 97094])
            ("function-put" code nil nil [97096 97159])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97161 97938])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97940 98868])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98870 99138])
            ("defalias" code nil nil [99140 99187])
            ("defalias" code nil nil [99189 99236])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99238 99365])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] '(menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)")) (bindings--define-key map [write] '(menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)")) (bindings--define-key map [save] '(menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks")) (bindings--define-key map [edit] '(menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks")) (bindings--define-key map [delete] '(menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list")) (bindings--define-key map [rename] '(menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark")) (bindings--define-key map [locate] '(menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark")) (bindings--define-key map [insert] '(menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark")) (bindings--define-key map [set] '(menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file.")) (bindings--define-key map [jump] '(menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)")) map)) nil [99367 100814])
            ("defalias" code nil nil [100816 100871])
            ("if" code nil nil [100873 101007])
            ("browse-url-browser-function" variable (:default-value 'browse-url-default-browser) nil [101132 101695])
            ("custom-autoload" code nil nil [101697 101758])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101760 102109])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102111 102370])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102372 102506])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102508 102627])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102629 103331])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103333 103627])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103629 103913])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103915 104162])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104164 104973])
            ("make-obsolete" code nil nil [104975 105024])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105026 105829])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105831 106568])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106570 106873])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106875 107672])
            ("make-obsolete" code nil nil [107674 107721])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107723 107973])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107975 108619])
            ("make-obsolete" code nil nil [108621 108671])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108673 109374])
            ("make-obsolete" code nil nil [109376 109423])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109425 110172])
            ("make-obsolete" code nil nil [110174 110218])
            ("browse-url-conkeror" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110220 111033])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111035 111519])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111521 111823])
            ("make-obsolete" code nil nil [111825 111876])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111878 112298])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112300 112993])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112995 113706])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113708 114109])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114111 114318])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114320 114686])
            ("if" code nil nil [114688 114793])
            ("push" code nil nil [114885 114939])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114941 115143])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115145 115355])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115357 115456])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115458 116084])
            ("if" code nil nil [116086 116175])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116293 116897])
            ("if" code nil nil [116899 116998])
            ("put" code nil nil [117152 117286])
            ("put" code nil nil [117288 117349])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117351 117745])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117747 118151])
            ("if" code nil nil [118153 118264])
            ("if" code nil nil [118405 118523])
            ("put" code nil nil [118663 118721])
            ("put" code nil nil [118722 118793])
            ("put" code nil nil [118794 118863])
            ("put" code nil nil [118864 118928])
            ("put" code nil nil [118930 119069])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [119071 119445])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [119447 119805])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119807 120006])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120008 120746])
            ("put" code nil nil [120747 120800])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120802 121199])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [121201 121418])
            ("byte-compile" function (:prototype-flag t) nil [121420 121601])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [121603 122285])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [122287 122515])
            ("batch-byte-compile" function (:prototype-flag t) nil [122517 122968])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [122970 123414])
            ("if" code nil nil [123416 123617])
            ("if" code nil nil [123757 123896])
            ("put" code nil nil [124036 124093])
            ("if" code nil nil [124095 124240])
            ("if" code nil nil [124383 124495])
            ("put" code nil nil [124621 124684])
            ("put" code nil nil [124686 124747])
            ("put" code nil nil [124749 124812])
            ("if" code nil nil [124814 124921])
            ("if" code nil nil [125064 125194])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125337 125621])
            ("if" code nil nil [125623 125766])
            ("if" code nil nil [125895 125996])
            ("if" code nil nil [126136 126281])
            ("if" code nil nil [126407 126528])
            ("if" code nil nil [126671 126800])
            ("if" code nil nil [126940 127067])
            ("if" code nil nil [127196 127291])
            ("if" code nil nil [127420 127521])
            ("if" code nil nil [127664 127796])
            ("if" code nil nil [127922 128021])
            ("if" code nil nil [128141 128253])
            ("define-key" code nil nil [128362 128403])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128405 128542])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128544 128696])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128698 128820])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128822 129083])
            ("calc-eval" function (:prototype-flag t) nil [129085 129369])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129371 129669])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129671 129835])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129837 129978])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129980 130125])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130127 130263])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130265 130473])
            ("defmath" function (:prototype-flag t) nil [130475 130885])
            ("function-put" code nil nil [130887 130929])
            ("if" code nil nil [130931 131072])
            ("if" code nil nil [131233 131338])
            ("if" code nil nil [131459 131563])
            ("if" code nil nil [131690 131796])
            ("if" code nil nil [131917 132021])
            ("if" code nil nil [132145 132250])
            ("if" code nil nil [132374 132479])
            ("if" code nil nil [132643 132742])
            ("if" code nil nil [132863 132974])
            ("if" code nil nil [133095 133200])
            ("if" code nil nil [133327 133448])
            ("if" code nil nil [133572 133677])
            ("if" code nil nil [133804 133910])
            ("if" code nil nil [134037 134136])
            ("if" code nil nil [134260 134358])
            ("if" code nil nil [134485 134584])
            ("if" code nil nil [134711 134810])
            ("if" code nil nil [134934 135040])
            ("if" code nil nil [135164 135278])
            ("if" code nil nil [135399 135503])
            ("if" code nil nil [135627 135732])
            ("if" code nil nil [135856 135954])
            ("if" code nil nil [136115 136218])
            ("if" code nil nil [136342 136461])
            ("if" code nil nil [136582 136686])
            ("if" code nil nil [136813 136930])
            ("if" code nil nil [137054 137164])
            ("if" code nil nil [137288 137401])
            ("if" code nil nil [137525 137630])
            ("if" code nil nil [137757 137856])
            ("if" code nil nil [137977 138074])
            ("if" code nil nil [138198 138303])
            ("if" code nil nil [138430 138528])
            ("if" code nil nil [138655 138761])
            ("if" code nil nil [138888 138993])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [139117 139170])
            ("if" code nil nil [139172 139270])
            ("if" code nil nil [139397 139503])
            ("if" code nil nil [139624 139728])
            ("if" code nil nil [139889 140008])
            ("if" code nil nil [140129 140250])
            ("if" code nil nil [140371 140475])
            ("if" code nil nil [140596 140706])
            ("if" code nil nil [140827 140924])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [141041 141185])
            ("if" code nil nil [141187 141292])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [141421 143048])
            ("if" code nil nil [143050 143223])
            ("canlock-insert-header" function (:prototype-flag t) nil [143341 143506])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [143508 143701])
            ("if" code nil nil [143703 143802])
            ("if" code nil nil [143933 144027])
            ("if" code nil nil [144152 144255])
            ("if" code nil nil [144403 144501])
            ("if" code nil nil [144629 144722])
            ("if" code nil nil [144850 144978])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [145120 145233])
            ("if" code nil nil [145235 145330])
            ("if" code nil nil [145461 145695])
            ("c-guess-guessed-offsets-alist" variable nil nil [145826 145905])
            ("c-guess-guessed-basic-offset" variable nil nil [145907 145984])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145986 146356])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146358 146674])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146676 147040])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147042 147352])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147354 147713])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147715 148604])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148606 149045])
            ("if" code nil nil [149047 149147])
            ("if" code nil nil [149278 149372])
            ("if" code nil nil [149503 149604])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [149732 150184])
            ("add-to-list" code nil nil [150186 150252])
            ("add-to-list" code nil nil [150254 150333])
            ("add-to-list" code nil nil [150335 150403])
            ("add-to-list" code nil nil [150405 150457])
            ("add-to-list" code nil nil [150459 150518])
            ("add-to-list" code nil nil [150520 150582])
            ("add-to-list" code nil nil [150584 150638])
            ("add-to-list" code nil nil [150640 150692])
            ("add-to-list" code nil nil [150694 150749])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150751 151299])
            ("c-or-c++-mode" function (:prototype-flag t) nil [151301 151762])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151764 152321])
            ("add-to-list" code nil nil [152323 152378])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152380 152950])
            ("add-to-list" code nil nil [152952 153010])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153012 153574])
            ("add-to-list" code nil nil [153576 153632])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153634 154215])
            ("add-to-list" code nil nil [154217 154308])
            ("add-to-list" code nil nil [154310 154369])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154371 154933])
            ("add-to-list" code nil nil [154935 154991])
            ("add-to-list" code nil nil [154993 155050])
            ("add-to-list" code nil nil [155052 155110])
            ("add-to-list" code nil nil [155112 155170])
            ("add-to-list" code nil nil [155172 155230])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155232 155790])
            ("if" code nil nil [155792 155963])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156105 157231])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157233 157778])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157780 158118])
            ("if" code nil nil [158120 158242])
            ("put" code nil nil [158369 158421])
            ("put" code nil nil [158422 158478])
            ("put" code nil nil [158479 158537])
            ("if" code nil nil [158539 158709])
            ("ccl-compile" function (:prototype-flag t) nil [158833 158958])
            ("ccl-dump" function (:prototype-flag t) nil [158960 159046])
            ("declare-ccl-program" function (:prototype-flag t) nil [159048 159510])
            ("define-ccl-program" function (:prototype-flag t) nil [159512 167399])
            ("function-put" code nil nil [167401 167454])
            ("check-ccl-program" function (:prototype-flag t) nil [167456 167777])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [167779 168062])
            ("if" code nil nil [168064 168155])
            ("cconv-closure-convert" function (:prototype-flag t) nil [168279 168584])
            ("cconv-warnings-only" function (:prototype-flag t) nil [168586 168707])
            ("if" code nil nil [168709 168804])
            ("if" code nil nil [168900 168991])
            ("push" code nil nil [169104 169160])
            ("if" code nil nil [169162 169257])
            ("if" code nil nil [169400 169509])
            ("if" code nil nil [169649 169750])
            ("if" code nil nil [169893 169996])
            ("if" code nil nil [170142 170253])
            ("push" code nil nil [170383 170442])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170444 170677])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170679 170912])
            ("cfengine-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170914 171036])
            ("if" code nil nil [171038 171138])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [171252 171765])
            ("if" code nil nil [171767 171870])
            ("push" code nil nil [171993 172049])
            ("if" code nil nil [172051 172145])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172301 172482])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172484 172682])
            ("if" code nil nil [172684 172795])
            ("push" code nil nil [172935 172996])
            ("put" code nil nil [172997 173066])
            ("put" code nil nil [173067 173133])
            ("put" code nil nil [173134 173211])
            ("put" code nil nil [173212 173289])
            ("put" code nil nil [173290 173373])
            ("put" code nil nil [173374 173445])
            ("put" code nil nil [173446 173522])
            ("put" code nil nil [173523 173601])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [173603 173715])
            ("put" code nil nil [173716 173780])
            ("put" code nil nil [173781 173846])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173848 174068])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174070 174598])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174600 175140])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175142 175431])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175433 175734])
            ("checkdoc-file" function (:prototype-flag t) nil [175736 175861])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175863 176218])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176220 176590])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176592 176881])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176883 177242])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177244 177459])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177461 177802])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177804 178169])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178171 178378])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178380 178626])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178628 178879])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178881 179150])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179152 179400])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179402 179621])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179623 179863])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179865 180104])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180106 180336])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180338 180972])
            ("checkdoc-package-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180974 181101])
            ("if" code nil nil [181103 181204])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181347 181499])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181501 181608])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181610 181758])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181760 181863])
            ("post-read-decode-hz" function (:prototype-flag t) nil [181865 181933])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [181935 182007])
            ("if" code nil nil [182009 182178])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182289 182694])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182696 183068])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183070 183695])
            ("if" code nil nil [183697 183862])
            ("if" code nil nil [183977 184116])
            ("if" code nil nil [184286 184381])
            ("push" code nil nil [184527 184588])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [184732 188241])
            ("if" code nil nil [188243 188356])
            ("push" code nil nil [188482 188539])
            ("define-obsolete-variable-alias" code nil nil [188541 188631])
            ("cl-custom-print-functions" variable nil nil [188633 189119])
            ("cl-old-struct-compat-mode" variable nil nil [189121 189458])
            ("custom-autoload" code nil nil [189460 189517])
            ("cl-old-struct-compat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [189519 190053])
            ("if" code nil nil [190055 190148])
            ("if" code nil nil [190315 190409])
            ("push" code nil nil [190549 190608])
            ("cl-print-object" function (:prototype-flag t) nil [190610 190912])
            ("cl-prin1" function (:prototype-flag t) nil [190914 191229])
            ("cl-prin1-to-string" function (:prototype-flag t) nil [191231 191374])
            ("if" code nil nil [191376 191494])
            ("if" code nil nil [191658 191752])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [191880 192416])
            ("if" code nil nil [192418 192517])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [192631 193295])
            ("if" code nil nil [193297 193457])
            ("color-name-to-rgb" function (:prototype-flag t) nil [193559 194096])
            ("if" code nil nil [194098 194193])
            ("comint-output-filter-functions" variable (:default-value '(ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt)) nil [194298 194966])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [194968 195763])
            ("make-comint" function (:prototype-flag t) nil [195765 196503])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [196505 196845])
            ("function-put" code nil nil [196847 196904])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [196906 197126])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197128 197426])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197428 197722])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [197724 197979])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [197981 198249])
            ("if" code nil nil [198251 198386])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [198506 199783])
            ("if" code nil nil [199785 199886])
            ("if" code nil nil [200009 200111])
            ("compilation-mode-hook" variable nil nil [200239 200327])
            ("custom-autoload" code nil nil [200329 200381])
            ("compilation-start-hook" variable nil nil [200383 200525])
            ("custom-autoload" code nil nil [200527 200580])
            ("compilation-window-height" variable nil nil [200582 200692])
            ("custom-autoload" code nil nil [200694 200750])
            ("compilation-process-setup-function" variable nil nil [200752 201057])
            ("compilation-buffer-name-function" variable nil nil [201059 201356])
            ("compilation-finish-functions" variable nil nil [201358 201576])
            ("put" code nil nil [201577 201635])
            ("compilation-ask-about-save" variable (:default-value t) nil [201637 201806])
            ("custom-autoload" code nil nil [201808 201865])
            ("compilation-search-path" variable (:default-value '(nil)) nil [201867 202113])
            ("custom-autoload" code nil nil [202115 202169])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [202171 202818])
            ("custom-autoload" code nil nil [202820 202866])
            ("put" code nil nil [202867 203012])
            ("compilation-disable-input" variable nil nil [203014 203256])
            ("custom-autoload" code nil nil [203258 203314])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [203316 204569])
            ("compilation-start" function (:prototype-flag t) nil [204571 205523])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205525 205927])
            ("put" code nil nil [205929 205977])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205979 206553])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206555 207049])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207051 207280])
            ("if" code nil nil [207282 207436])
            ("dynamic-completion-mode" variable nil nil [207553 207882])
            ("custom-autoload" code nil nil [207884 207943])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207945 208317])
            ("if" code nil nil [208319 208862])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209004 210431])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210433 210588])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210590 211062])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211064 211488])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211490 212250])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212252 212411])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212413 212739])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212741 213069])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213071 213388])
            ("conf-toml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213390 213669])
            ("conf-desktop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213671 214054])
            ("if" code nil nil [214056 214154])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214272 214594])
            ("cookie-insert" function (:prototype-flag t) nil [214596 214844])
            ("cookie-snarf" function (:prototype-flag t) nil [214846 215124])
            ("if" code nil nil [215126 215223])
            ("put" code nil nil [215366 215425])
            ("put" code nil nil [215426 215485])
            ("put" code nil nil [215486 215545])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215547 215999])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216001 216268])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216270 216392])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216394 216612])
            ("if" code nil nil [216614 216717])
            ("put" code nil nil [216861 216917])
            ("put" code nil nil [216918 216974])
            ("put" code nil nil [216975 217041])
            ("put" code nil nil [217042 217098])
            ("put" code nil nil [217099 217169])
            ("put" code nil nil [217170 217240])
            ("put" code nil nil [217241 217304])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [217306 225566])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225568 225651])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225653 225759])
            ("if" code nil nil [225761 225879])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225995 226291])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [226293 226389])
            ("if" code nil nil [226391 226482])
            ("completing-read-multiple" function (:prototype-flag t) nil [226600 227562])
            ("if" code nil nil [227564 227655])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227786 228542])
            ("add-to-list" code nil nil [228544 228602])
            ("scss-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228604 228693])
            ("css-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228695 229036])
            ("if" code nil nil [229038 229142])
            ("cua-mode" variable nil nil [229273 229542])
            ("custom-autoload" code nil nil [229544 229586])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229588 230788])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230790 230916])
            ("if" code nil nil [230918 231014])
            ("if" code nil nil [231145 231241])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231372 231811])
            ("if" code nil nil [231813 231909])
            ("cursor-sensor-inhibit" variable nil nil [232065 232099])
            ("cursor-intangible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232101 232494])
            ("cursor-sensor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232496 233241])
            ("if" code nil nil [233243 233354])
            ("if" code nil nil [233462 233597])
            ("custom-browse-sort-alphabetically" variable nil nil [233708 233830])
            ("custom-autoload" code nil nil [233832 233897])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [233899 234017])
            ("custom-autoload" code nil nil [234019 234084])
            ("custom-menu-sort-alphabetically" variable nil nil [234086 234201])
            ("custom-autoload" code nil nil [234203 234266])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234268 234793])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234795 235448])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235450 236109])
            ("customize-push-and-save" function (:prototype-flag t) nil [236111 236523])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236525 236819])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236821 237082])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237084 237277])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237279 237436])
            ("defalias" code nil nil [237438 237486])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237488 237598])
            ("defalias" code nil nil [237600 237674])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237676 237855])
            ("customize-package-emacs-version-alist" variable nil nil [237857 239197])
            ("defalias" code nil nil [239199 239255])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239257 239720])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239722 240141])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240143 240473])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240475 240599])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240601 240713])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240715 240809])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240811 241344])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241346 241495])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241497 241611])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241613 241729])
            ("custom-prompt-customize-unsaved-options" function (:prototype-flag t) nil [241731 241958])
            ("custom-buffer-create" function (:prototype-flag t) nil [241960 242306])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [242308 242744])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242746 242869])
            ("custom-file" variable nil nil [242871 244391])
            ("custom-autoload" code nil nil [244393 244436])
            ("custom-save-all" function (:prototype-flag t) nil [244438 244537])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244539 244663])
            ("custom-menu-create" function (:prototype-flag t) nil [244665 244834])
            ("customize-menu-create" function (:prototype-flag t) nil [244836 245140])
            ("if" code nil nil [245142 245260])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245374 245796])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245798 245920])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245922 246043])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246045 246274])
            ("if" code nil nil [246276 246395])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246518 246608])
            ("if" code nil nil [246610 246708])
            ("push" code nil nil [246829 246887])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246889 247483])
            ("define-obsolete-function-alias" code nil nil [247485 247556])
            ("global-cwarn-mode" variable nil nil [247558 247863])
            ("custom-autoload" code nil nil [247865 247913])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247915 248308])
            ("if" code nil nil [248310 248437])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [248580 248718])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [248720 248872])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248874 249463])
            ("if" code nil nil [249465 249582])
            ("put" code nil nil [249689 249744])
            ("put" code nil nil [249745 249796])
            ("define-key" code nil nil [249798 249838])
            ("define-key" code nil nil [249840 249888])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249890 250380])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250382 251479])
            ("if" code nil nil [251481 251580])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [251709 251821])
            ("if" code nil nil [251823 251928])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252035 252313])
            ("if" code nil nil [252315 252408])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252539 256548])
            ("if" code nil nil [256550 256646])
            ("setq" code nil nil [256770 256792])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256794 257207])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257209 257921])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257923 258246])
            ("debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258248 258987])
            ("defalias" code nil nil [258989 259039])
            ("cancel-debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259041 259394])
            ("defalias" code nil nil [259396 259460])
            ("if" code nil nil [259462 259581])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259702 259823])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259825 260552])
            ("if" code nil nil [260554 260655])
            ("push" code nil nil [260768 260828])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [260830 260930])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [260932 261085])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261087 261260])
            ("if" code nil nil [261262 261371])
            ("defalias" code nil nil [261476 261530])
            ("delete-selection-mode" variable nil nil [261532 261853])
            ("custom-autoload" code nil nil [261855 261908])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261910 262580])
            ("if" code nil nil [262582 262702])
            ("define-derived-mode" function (:prototype-flag t) nil [262832 265059])
            ("function-put" code nil nil [265061 265115])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [265117 265401])
            ("if" code nil nil [265403 265507])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265624 266042])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266044 266925])
            ("describe-char-eldoc" function (:prototype-flag t) nil [266927 267463])
            ("if" code nil nil [267465 267568])
            ("desktop-save-mode" variable nil nil [267676 267981])
            ("custom-autoload" code nil nil [267983 268033])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [268035 269047])
            ("desktop-locals-to-save" variable (:default-value '(desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace)) nil [269049 269601])
            ("custom-autoload" code nil nil [269603 269656])
            ("defvar-local" code nil nil [269658 270254])
            ("desktop-buffer-mode-handlers" variable nil nil [270256 271564])
            ("put" code nil nil [271566 271625])
            ("desktop-minor-mode-handlers" variable nil nil [271627 272942])
            ("put" code nil nil [272944 273002])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273004 273457])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273459 274795])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274797 274942])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274944 275468])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275470 275725])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275727 275842])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275844 275932])
            ("if" code nil nil [275934 276033])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276154 276569])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276571 276765])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276767 277045])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277047 277182])
            ("if" code nil nil [277184 277281])
            ("if" code nil nil [277386 277483])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277623 277973])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277975 278742])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278744 278834])
            ("if" code nil nil [278836 278952])
            ("diff-switches" variable (:default-value (purecopy "-u")) nil [279057 279169])
            ("custom-autoload" code nil nil [279171 279212])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [279214 279289])
            ("custom-autoload" code nil nil [279291 279331])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279333 279899])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279901 280234])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [280236 280351])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280353 280557])
            ("if" code nil nil [280559 280652])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280772 281352])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281354 281716])
            ("if" code nil nil [281718 281816])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281920 282140])
            ("if" code nil nil [282142 282245])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [282347 283022])
            ("custom-autoload" code nil nil [283024 283075])
            ("dired-directory" variable nil nil [283077 283380])
            ("define-key" code nil nil [283382 283415])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283417 284433])
            ("define-key" code nil nil [284435 284483])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284485 284640])
            ("define-key" code nil nil [284642 284689])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284691 284837])
            ("dired-noselect" function (:prototype-flag t) nil [284839 284995])
            ("dired-mode" function (:prototype-flag t) nil [284997 288038])
            ("put" code nil nil [288040 288084])
            ("if" code nil nil [288086 288181])
            ("if" code nil nil [288332 288477])
            ("if" code nil nil [288622 288735])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288846 289520])
            ("dirtrack" function (:prototype-flag t) nil [289522 289851])
            ("if" code nil nil [289853 289954])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290081 290449])
            ("if" code nil nil [290451 290553])
            ("make-display-table" function (:prototype-flag t) nil [290670 290767])
            ("display-table-slot" function (:prototype-flag t) nil [290769 291088])
            ("set-display-table-slot" function (:prototype-flag t) nil [291090 291420])
            ("describe-display-table" function (:prototype-flag t) nil [291422 291539])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291541 291682])
            ("standard-display-8bit" function (:prototype-flag t) nil [291684 292190])
            ("standard-display-default" function (:prototype-flag t) nil [292192 292331])
            ("standard-display-ascii" function (:prototype-flag t) nil [292333 292449])
            ("standard-display-g1" function (:prototype-flag t) nil [292451 292682])
            ("standard-display-graphic" function (:prototype-flag t) nil [292684 292902])
            ("standard-display-underline" function (:prototype-flag t) nil [292904 293033])
            ("create-glyph" function (:prototype-flag t) nil [293035 293166])
            ("make-glyph-code" function (:prototype-flag t) nil [293168 293306])
            ("glyph-char" function (:prototype-flag t) nil [293308 293410])
            ("glyph-face" function (:prototype-flag t) nil [293412 293543])
            ("standard-display-european" function (:prototype-flag t) nil [293545 294446])
            ("if" code nil nil [294448 294567])
            ("display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294722 295333])
            ("global-display-line-numbers-mode" variable nil nil [295335 295700])
            ("custom-autoload" code nil nil [295702 295780])
            ("global-display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295782 296280])
            ("if" code nil nil [296282 296407])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296534 296921])
            ("dnd-protocol-alist" variable (:default-value `((,(purecopy "^file:///") . dnd-open-local-file) (,(purecopy "^file://") . dnd-open-file) (,(purecopy "^file:") . dnd-open-local-file) (,(purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://") . dnd-open-file))) nil [297017 297960])
            ("custom-autoload" code nil nil [297962 298007])
            ("if" code nil nil [298009 298100])
            ("if" code nil nil [298204 298295])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298426 298838])
            ("defalias" code nil nil [298840 298871])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298873 298992])
            ("if" code nil nil [298994 299095])
            ("doc-view-mode-p" function (:prototype-flag t) nil [299206 299422])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299424 299769])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [299771 299958])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299960 300409])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [300411 300480])
            ("if" code nil nil [300482 300583])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300698 300800])
            ("if" code nil nil [300802 300919])
            ("if" code nil nil [301015 301106])
            ("if" code nil nil [301214 301308])
            ("if" code nil nil [301419 301549])
            ("if" code nil nil [301657 301795])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301900 302384])
            ("if" code nil nil [302386 302483])
            ("push" code nil nil [302597 302654])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302656 302743])
            ("if" code nil nil [302745 302852])
            ("if" code nil nil [302992 303169])
            ("defalias" code nil nil [303316 303375])
            ("define-minor-mode" function (:prototype-flag t) nil [303377 306974])
            ("function-put" code nil nil [306976 307028])
            ("defalias" code nil nil [307030 307101])
            ("defalias" code nil nil [307103 307169])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [307171 308498])
            ("function-put" code nil nil [308500 308563])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [308565 309247])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [309249 309499])
            ("function-put" code nil nil [309501 309559])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [309561 309757])
            ("function-put" code nil nil [309759 309820])
            ("if" code nil nil [309822 309927])
            ("easy-menu-define" function (:prototype-flag t) nil [310068 313546])
            ("function-put" code nil nil [313548 313609])
            ("easy-menu-do-define" function (:prototype-flag t) nil [313611 313694])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [313696 313994])
            ("easy-menu-change" function (:prototype-flag t) nil [313996 314887])
            ("if" code nil nil [314889 315005])
            ("if" code nil nil [315136 315237])
            ("if" code nil nil [315368 315465])
            ("if" code nil nil [315596 315697])
            ("if" code nil nil [315828 315929])
            ("if" code nil nil [316060 316157])
            ("if" code nil nil [316288 316385])
            ("if" code nil nil [316516 316617])
            ("push" code nil nil [316744 316802])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316804 316887])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316889 317210])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317212 317522])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317524 318116])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318118 318332])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318334 318655])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318657 318967])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318969 319287])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319289 319567])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319569 319867])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319869 320140])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320142 320879])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320881 321626])
            ("defalias" code nil nil [321628 321665])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321667 321970])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321972 322251])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322253 322357])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322359 322461])
            ("ebnf-setup" function (:prototype-flag t) nil [322463 322548])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322550 322726])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322728 322922])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322924 323046])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323048 323209])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323211 323377])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323379 323544])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323546 323789])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323791 324023])
            ("if" code nil nil [324025 324121])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324249 324641])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324643 324781])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324783 324880])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324882 324987])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324989 325094])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325096 325199])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325201 325304])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325306 325440])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325442 325574])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325576 325708])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325710 325841])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325843 325973])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325975 326105])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326107 326403])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326405 326676])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326678 326890])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326892 327077])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327079 327416])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327418 327558])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327560 327702])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327704 327833])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327835 327942])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327944 328188])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328190 328284])
            ("if" code nil nil [328286 328418])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328535 329986])
            ("if" code nil nil [329988 330122])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330236 330468])
            ("if" code nil nil [330470 330592])
            ("ecomplete-setup" function (:prototype-flag t) nil [330706 330792])
            ("if" code nil nil [330794 330897])
            ("push" code nil nil [331004 331058])
            ("global-ede-mode" variable nil nil [331060 331357])
            ("custom-autoload" code nil nil [331359 331403])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331405 331862])
            ("if" code nil nil [331864 331994])
            ("if" code nil nil [332117 332213])
            ("if" code nil nil [332371 332481])
            ("if" code nil nil [332641 332737])
            ("if" code nil nil [332903 333001])
            ("if" code nil nil [333173 333274])
            ("if" code nil nil [333440 333564])
            ("if" code nil nil [333693 333791])
            ("if" code nil nil [333954 334057])
            ("if" code nil nil [334220 334323])
            ("if" code nil nil [334486 334583])
            ("if" code nil nil [334752 334859])
            ("if" code nil nil [335022 335142])
            ("if" code nil nil [335308 335413])
            ("if" code nil nil [335573 335674])
            ("if" code nil nil [335832 335942])
            ("if" code nil nil [336068 336188])
            ("if" code nil nil [336314 336417])
            ("if" code nil nil [336540 336641])
            ("if" code nil nil [336796 336900])
            ("if" code nil nil [337043 337143])
            ("if" code nil nil [337289 337423])
            ("if" code nil nil [337572 337674])
            ("if" code nil nil [337820 337921])
            ("if" code nil nil [338067 338168])
            ("if" code nil nil [338311 338411])
            ("if" code nil nil [338557 338686])
            ("if" code nil nil [338838 338959])
            ("if" code nil nil [339111 339214])
            ("if" code nil nil [339363 339472])
            ("if" code nil nil [339635 339749])
            ("if" code nil nil [339878 339983])
            ("if" code nil nil [340112 340216])
            ("if" code nil nil [340388 340488])
            ("if" code nil nil [340628 340735])
            ("if" code nil nil [340895 341011])
            ("edebug-all-defs" variable nil nil [341138 341605])
            ("custom-autoload" code nil nil [341607 341652])
            ("edebug-all-forms" variable nil nil [341654 341888])
            ("custom-autoload" code nil nil [341890 341936])
            ("edebug-basic-spec" function (:prototype-flag t) nil [341938 342144])
            ("defalias" code nil nil [342146 342198])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342200 343077])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343079 343170])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343172 343258])
            ("if" code nil nil [343260 343416])
            ("push" code nil nil [343523 343582])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343584 343827])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343829 344085])
            ("defalias" code nil nil [344087 344119])
            ("defalias" code nil nil [344121 344151])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344153 344374])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344376 344589])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344591 345126])
            ("defalias" code nil nil [345128 345163])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345165 345717])
            ("defalias" code nil nil [345719 345756])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345758 346044])
            ("defalias" code nil nil [346046 346082])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346084 346386])
            ("defalias" code nil nil [346388 346441])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346443 346742])
            ("defalias" code nil nil [346744 346782])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346784 347173])
            ("defalias" code nil nil [347175 347223])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347225 347801])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347803 348208])
            ("defalias" code nil nil [348210 348275])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348277 348710])
            ("defalias" code nil nil [348712 348805])
            ("defalias" code nil nil [348807 348883])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348885 349335])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349337 349787])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349789 350312])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350314 350871])
            ("defalias" code nil nil [350873 350915])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350917 351312])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351314 351786])
            ("defalias" code nil nil [351788 351858])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351860 352531])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352533 353271])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353273 353697])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353699 354160])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354162 354510])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354512 355076])
            ("defalias" code nil nil [355078 355114])
            ("defalias" code nil nil [355116 355161])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355163 355587])
            ("defalias" code nil nil [355589 355626])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355628 355774])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355776 355910])
            ("ediff-files-command" function (:prototype-flag t) nil [355912 356031])
            ("ediff3-files-command" function (:prototype-flag t) nil [356033 356156])
            ("ediff-merge-command" function (:prototype-flag t) nil [356158 356283])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [356285 356440])
            ("ediff-directories-command" function (:prototype-flag t) nil [356442 356575])
            ("ediff-directories3-command" function (:prototype-flag t) nil [356577 356711])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [356713 356858])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [356860 357032])
            ("if" code nil nil [357034 357129])
            ("if" code nil nil [357252 357352])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357475 357533])
            ("if" code nil nil [357535 357635])
            ("if" code nil nil [357758 357875])
            ("if" code nil nil [357998 358098])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358221 358308])
            ("defalias" code nil nil [358310 358352])
            ("if" code nil nil [358354 358454])
            ("if" code nil nil [358577 358677])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358800 359012])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359014 359242])
            ("if" code nil nil [359244 359344])
            ("if" code nil nil [359467 359593])
            ("if" code nil nil [359716 359816])
            ("push" code nil nil [359923 359981])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359983 360465])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360467 360589])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360591 360743])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360745 361420])
            ("format-kbd-macro" function (:prototype-flag t) nil [361422 361803])
            ("if" code nil nil [361805 361904])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362020 362258])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362260 362334])
            ("if" code nil nil [362336 362427])
            ("if" code nil nil [362569 362672])
            ("if" code nil nil [362817 362915])
            ("if" code nil nil [363040 363140])
            ("if" code nil nil [363282 363394])
            ("with-electric-help" function (:prototype-flag t) nil [363496 364719])
            ("electric-helpify" function (:prototype-flag t) nil [364721 364796])
            ("if" code nil nil [364798 364905])
            ("push" code nil nil [365028 365084])
            ("if" code nil nil [365086 365297])
            ("if" code nil nil [365444 365544])
            ("if" code nil nil [365726 365897])
            ("push" code nil nil [366043 366104])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [366106 366493])
            ("if" code nil nil [366495 366666])
            ("if" code nil nil [366848 366950])
            ("if" code nil nil [367112 367236])
            ("if" code nil nil [367409 367508])
            ("if" code nil nil [367667 367779])
            ("electric-pair-mode" variable nil nil [367893 368202])
            ("custom-autoload" code nil nil [368204 368257])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368259 368997])
            ("electric-pair-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368999 369379])
            ("if" code nil nil [369381 369488])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [369605 369920])
            ("if" code nil nil [369922 370027])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370151 370223])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370225 370377])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370379 370512])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370514 370641])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370643 370834])
            ("if" code nil nil [370836 370931])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371049 371194])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371196 371470])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371472 371710])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371712 371938])
            ("if" code nil nil [371940 372031])
            ("if" code nil nil [372193 372321])
            ("if" code nil nil [372486 372593])
            ("if" code nil nil [372755 372853])
            ("if" code nil nil [373012 373110])
            ("if" code nil nil [373269 373366])
            ("if" code nil nil [373525 373623])
            ("if" code nil nil [373782 373879])
            ("if" code nil nil [374032 374127])
            ("if" code nil nil [374286 374384])
            ("if" code nil nil [374549 374649])
            ("if" code nil nil [374814 374914])
            ("if" code nil nil [375079 375178])
            ("if" code nil nil [375340 375439])
            ("if" code nil nil [375598 375696])
            ("if" code nil nil [375858 375956])
            ("if" code nil nil [376115 376244])
            ("if" code nil nil [376403 376517])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376634 377439])
            ("if" code nil nil [377441 377566])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377687 377848])
            ("set-advertised-calling-convention" code nil nil [377850 377920])
            ("if" code nil nil [377922 378031])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378142 378279])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378281 378483])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378485 378617])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378619 378820])
            ("emerge-files-command" function (:prototype-flag t) nil [378822 378883])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [378885 378960])
            ("emerge-files-remote" function (:prototype-flag t) nil [378962 379045])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [379047 379153])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379155 379311])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379313 379527])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379529 379628])
            ("if" code nil nil [379630 379727])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379858 380496])
            ("enriched-encode" function (:prototype-flag t) nil [380498 380573])
            ("enriched-decode" function (:prototype-flag t) nil [380575 380641])
            ("if" code nil nil [380643 380744])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380840 380960])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380962 381090])
            ("epa-select-keys" function (:prototype-flag t) nil [381092 381452])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381454 381656])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381658 381726])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381728 381830])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381832 381928])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381930 382864])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382866 383116])
            ("function-put" code nil nil [383118 383182])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383184 383825])
            ("function-put" code nil nil [383827 383881])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383883 384153])
            ("function-put" code nil nil [384155 384222])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384224 384879])
            ("function-put" code nil nil [384881 384933])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384935 385614])
            ("function-put" code nil nil [385616 385671])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385673 385773])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385775 385853])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385855 385951])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385953 386109])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386111 386201])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386203 386296])
            ("if" code nil nil [386298 386389])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386503 386586])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386588 386669])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386671 386748])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386750 386833])
            ("epa-file-handler" function (:prototype-flag t) nil [386944 387024])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387026 387082])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387084 387141])
            ("if" code nil nil [387143 387239])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387350 387714])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387716 387868])
            ("function-put" code nil nil [387870 387923])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387925 388094])
            ("function-put" code nil nil [388096 388148])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388150 388301])
            ("function-put" code nil nil [388303 388353])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388355 388915])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388917 389090])
            ("function-put" code nil nil [389092 389149])
            ("epa-global-mail-mode" variable nil nil [389151 389468])
            ("custom-autoload" code nil nil [389470 389524])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389526 389890])
            ("if" code nil nil [389892 389993])
            ("push" code nil nil [390088 390144])
            ("epg-make-context" function (:prototype-flag t) nil [390146 390325])
            ("if" code nil nil [390327 390418])
            ("epg-find-configuration" function (:prototype-flag t) nil [390535 391077])
            ("epg-configuration" function (:prototype-flag t) nil [391079 391213])
            ("make-obsolete" code nil nil [391215 391281])
            ("epg-check-configuration" function (:prototype-flag t) nil [391283 391711])
            ("epg-expand-group" function (:prototype-flag t) nil [391713 391826])
            ("if" code nil nil [391828 391926])
            ("push" code nil nil [392029 392083])
            ("erc-select-read-args" function (:prototype-flag t) nil [392085 392206])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392208 393033])
            ("defalias" code nil nil [393035 393062])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393064 393211])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [393213 393485])
            ("if" code nil nil [393487 393598])
            ("if" code nil nil [393766 393870])
            ("if" code nil nil [393998 394097])
            ("if" code nil nil [394259 394357])
            ("if" code nil nil [394516 394628])
            ("if" code nil nil [394790 394888])
            ("if" code nil nil [395041 395158])
            ("if" code nil nil [395365 395492])
            ("if" code nil nil [395660 395764])
            ("if" code nil nil [395920 396016])
            ("if" code nil nil [396144 396243])
            ("if" code nil nil [396371 396470])
            ("if" code nil nil [396632 396737])
            ("if" code nil nil [396896 397006])
            ("if" code nil nil [397162 397258])
            ("if" code nil nil [397377 397512])
            ("if" code nil nil [397668 397764])
            ("if" code nil nil [397917 398012])
            ("if" code nil nil [398171 398268])
            ("if" code nil nil [398424 398525])
            ("if" code nil nil [398693 398793])
            ("erc-determine-network" function (:prototype-flag t) nil [398932 399185])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399187 399318])
            ("if" code nil nil [399320 399420])
            ("if" code nil nil [399582 399680])
            ("if" code nil nil [399836 399932])
            ("if" code nil nil [400103 400224])
            ("if" code nil nil [400389 400496])
            ("if" code nil nil [400652 400748])
            ("if" code nil nil [400916 401016])
            ("if" code nil nil [401175 401272])
            ("if" code nil nil [401440 401540])
            ("if" code nil nil [401708 401817])
            ("if" code nil nil [401976 402073])
            ("if" code nil nil [402232 402329])
            ("if" code nil nil [402497 402612])
            ("if" code nil nil [402768 402864])
            ("ert-deftest" function (:prototype-flag t) nil [402982 403564])
            ("function-put" code nil nil [403566 403612])
            ("function-put" code nil nil [403614 403666])
            ("put" code nil nil [403668 403710])
            ("put" code nil nil [403712 403751])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [403753 404159])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [404161 404510])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404512 404905])
            ("defalias" code nil nil [404907 404951])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404953 405095])
            ("if" code nil nil [405097 405188])
            ("put" code nil nil [405312 405363])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405365 405470])
            ("if" code nil nil [405472 405565])
            ("if" code nil nil [405687 405785])
            ("if" code nil nil [405907 406041])
            ("if" code nil nil [406163 406260])
            ("if" code nil nil [406379 406476])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406601 406682])
            ("if" code nil nil [406684 406782])
            ("if" code nil nil [406921 407022])
            ("if" code nil nil [407144 407242])
            ("if" code nil nil [407367 407465])
            ("if" code nil nil [407590 407689])
            ("if" code nil nil [407811 407933])
            ("push" code nil nil [408051 408110])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408112 408648])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408650 408832])
            ("eshell-command-result" function (:prototype-flag t) nil [408834 409198])
            ("define-obsolete-function-alias" code nil nil [409200 409276])
            ("if" code nil nil [409278 409375])
            ("tags-file-name" variable nil nil [409497 409799])
            ("put" code nil nil [409801 409877])
            ("put" code nil nil [409879 409930])
            ("tags-case-fold-search" variable (:default-value 'default) nil [409932 410160])
            ("custom-autoload" code nil nil [410162 410212])
            ("tags-table-list" variable nil nil [410214 410553])
            ("custom-autoload" code nil nil [410555 410599])
            ("tags-compression-info-list" variable (:default-value (purecopy '("" ".Z" ".bz2" ".gz" ".xz" ".tgz"))) nil [410601 410812])
            ("custom-autoload" code nil nil [410814 410869])
            ("tags-add-tables" variable (:default-value 'ask-user) nil [410871 411149])
            ("custom-autoload" code nil nil [411151 411195])
            ("find-tag-hook" variable nil nil [411197 411410])
            ("custom-autoload" code nil nil [411412 411454])
            ("find-tag-default-function" variable nil nil [411456 411735])
            ("custom-autoload" code nil nil [411737 411791])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411793 411885])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411887 412516])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [412518 413278])
            ("tags-table-files" function (:prototype-flag t) nil [413280 413557])
            ("tags-lazy-completion-table" function (:prototype-flag t) nil [413559 413625])
            ("tags-completion-at-point-function" function nil nil [413627 413795])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [413797 414795])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414797 415761])
            ("make-obsolete" code nil nil [415763 415819])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [415821 416813])
            ("make-obsolete" code nil nil [416815 416897])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [416899 417880])
            ("make-obsolete" code nil nil [417882 417962])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [417964 418865])
            ("make-obsolete" code nil nil [418867 418926])
            ("defalias" code nil nil [418928 418975])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [418977 419526])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419528 420126])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420128 420595])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420597 421196])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421198 421474])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421476 421587])
            ("make-obsolete" code nil nil [421589 421645])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421647 421912])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421914 422171])
            ("etags--xref-backend" function (:prototype-flag t) nil [422173 422232])
            ("if" code nil nil [422234 422576])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [422719 422799])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422801 423419])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423421 424057])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424059 424353])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424355 425063])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425065 425771])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425773 426005])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426007 426123])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426125 426634])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426636 426740])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426742 426887])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426889 427023])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [427025 427341])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [427343 427487])
            ("ethio-find-file" function (:prototype-flag t) nil [427489 427619])
            ("ethio-write-file" function (:prototype-flag t) nil [427621 427757])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427759 427931])
            ("ethio-composition-function" function (:prototype-flag t) nil [427933 428030])
            ("if" code nil nil [428032 428160])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428267 428493])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428495 428676])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428678 428859])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428861 429666])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429668 429947])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429949 430103])
            ("cond" code nil nil [430105 432089])
            ("if" code nil nil [432091 432184])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [432303 432424])
            ("eudc-display-url" function (:prototype-flag t) nil [432426 432523])
            ("eudc-display-mail" function (:prototype-flag t) nil [432525 432635])
            ("eudc-display-sound" function (:prototype-flag t) nil [432637 432743])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [432745 432867])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [432869 432979])
            ("if" code nil nil [432981 433078])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433206 433404])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433406 433530])
            ("if" code nil nil [433532 433632])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433771 433895])
            ("if" code nil nil [433897 434006])
            ("if" code nil nil [434128 434226])
            ("if" code nil nil [434351 434455])
            ("if" code nil nil [434580 434679])
            ("if" code nil nil [434801 434899])
            ("ewoc-create" function (:prototype-flag t) nil [435020 435821])
            ("if" code nil nil [435823 435916])
            ("eww-suggest-uris" variable (:default-value '(eww-links-at-point url-get-url-at-point eww-current-url)) nil [436020 436348])
            ("custom-autoload" code nil nil [436350 436393])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436395 436582])
            ("defalias" code nil nil [436584 436611])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436613 436689])
            ("eww-search-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436691 436992])
            ("eww-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436994 437064])
            ("eww-browse-url" function (:prototype-flag t) nil [437066 437143])
            ("eww-list-bookmarks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437145 437221])
            ("if" code nil nil [437223 437314])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [437459 437653])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437655 438000])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438002 438417])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [438419 438664])
            ("if" code nil nil [438666 438771])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [438876 439778])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [439780 439965])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439967 440160])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440162 440347])
            ("define-key" code nil nil [440349 440406])
            ("define-key" code nil nil [440408 440461])
            ("if" code nil nil [440463 440560])
            ("if" code nil nil [440668 440767])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440883 443262])
            ("if" code nil nil [443264 443355])
            ("face-remap-add-relative" function (:prototype-flag t) nil [443472 444564])
            ("face-remap-reset-base" function (:prototype-flag t) nil [444566 444817])
            ("face-remap-set-base" function (:prototype-flag t) nil [444819 445526])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [445528 445956])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [445958 446411])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [446413 446598])
            ("define-key" code nil nil [446600 446656])
            ("define-key" code nil nil [446658 446714])
            ("define-key" code nil nil [446716 446772])
            ("define-key" code nil nil [446774 446830])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [446832 447986])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447988 448461])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448463 448948])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448950 449646])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449648 449896])
            ("if" code nil nil [449898 450064])
            ("push" code nil nil [450190 450249])
            ("faceup-view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450251 450364])
            ("faceup-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450366 450834])
            ("faceup-render-view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450836 450988])
            ("faceup-clean-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450990 451081])
            ("faceup-defexplainer" function (:prototype-flag t) nil [451083 451287])
            ("if" code nil nil [451289 451386])
            ("push" code nil nil [451506 451564])
            ("feedmail-send-it" function (:prototype-flag t) nil [451566 451822])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451824 451977])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451979 452280])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452282 452608])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452610 453757])
            ("if" code nil nil [453759 453860])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453959 454381])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454383 454899])
            ("defalias" code nil nil [454901 454937])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454939 455296])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455298 455624])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455626 455825])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [455827 455994])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455996 456093])
            ("if" code nil nil [456095 456237])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456351 456593])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456595 457016])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457018 457111])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457113 457280])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457282 457479])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457481 457876])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457878 458314])
            ("if" code nil nil [458316 458420])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458537 458827])
            ("if" code nil nil [458829 458935])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459043 459560])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459562 459732])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459734 460142])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460144 460312])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460314 460467])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460469 460616])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460618 460732])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460734 460863])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460865 460992])
            ("enable-connection-local-variables" variable (:default-value t) nil [460994 461098])
            ("connection-local-set-profiles" function (:prototype-flag t) nil [461100 461685])
            ("connection-local-set-profile-variables" function (:prototype-flag t) nil [461687 462337])
            ("hack-connection-local-variables-apply" function (:prototype-flag t) nil [462339 462568])
            ("with-connection-local-profiles" function (:prototype-flag t) nil [462570 462786])
            ("function-put" code nil nil [462788 462859])
            ("if" code nil nil [462861 463040])
            ("filesets-init" function (:prototype-flag t) nil [463151 463303])
            ("if" code nil nil [463305 463406])
            ("push" code nil nil [463516 463575])
            ("find-cmd" function (:prototype-flag t) nil [463577 464014])
            ("if" code nil nil [464016 464113])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464230 464557])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464559 464944])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464946 465366])
            ("if" code nil nil [465368 465495])
            ("ff-special-constructs" variable (:default-value `((,(purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]") lambda nil (buffer-substring (match-beginning 2) (match-end 2))))) nil [465609 466126])
            ("custom-autoload" code nil nil [466128 466182])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466184 466454])
            ("defalias" code nil nil [466456 466508])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466510 468403])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468405 468505])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468507 468638])
            ("if" code nil nil [468640 468769])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468913 469080])
            ("find-library-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [469082 469251])
            ("find-library-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [469253 469420])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [469422 469925])
            ("find-function-noselect" function (:prototype-flag t) nil [469927 470612])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470614 471145])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471147 471326])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471328 471505])
            ("find-variable-noselect" function (:prototype-flag t) nil [471507 472009])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472011 472540])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472542 472721])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472723 472900])
            ("find-definition-noselect" function (:prototype-flag t) nil [472902 473426])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473428 473975])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473977 474151])
            ("find-function-on-key-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474153 474317])
            ("find-function-on-key-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474319 474481])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474483 474603])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474605 474725])
            ("find-function-setup-keys" function (:prototype-flag t) nil [474727 474862])
            ("if" code nil nil [474864 474982])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475096 475204])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475206 475318])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475320 475459])
            ("if" code nil nil [475461 475564])
            ("push" code nil nil [475668 475725])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475727 475844])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475846 476008])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476010 476105])
            ("if" code nil nil [476107 476237])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476351 476603])
            ("enable-flow-control-on" function (:prototype-flag t) nil [476605 476989])
            ("if" code nil nil [476991 477099])
            ("fill-flowed-encode" function (:prototype-flag t) nil [477223 477302])
            ("fill-flowed" function (:prototype-flag t) nil [477304 477389])
            ("if" code nil nil [477391 477496])
            ("push" code nil nil [477623 477681])
            ("flymake-log" function (:prototype-flag t) nil [477683 478015])
            ("flymake-make-diagnostic" function (:prototype-flag t) nil [478017 478374])
            ("flymake-diagnostics" function (:prototype-flag t) nil [478376 478651])
            ("flymake-diag-region" function (:prototype-flag t) nil [478653 478890])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478892 480546])
            ("flymake-mode-on" function (:prototype-flag t) nil [480548 480626])
            ("flymake-mode-off" function (:prototype-flag t) nil [480628 480708])
            ("if" code nil nil [480710 480809])
            ("flymake-cc" function (:prototype-flag t) nil [480954 481232])
            ("if" code nil nil [481234 481339])
            ("push" code nil nil [481489 481552])
            ("if" code nil nil [481554 481663])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481794 481902])
            ("flyspell-mode" variable nil nil [481903 481968])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481970 483319])
            ("turn-on-flyspell" function (:prototype-flag t) nil [483321 483418])
            ("turn-off-flyspell" function (:prototype-flag t) nil [483420 483519])
            ("flyspell-mode-off" function (:prototype-flag t) nil [483521 483604])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483606 483704])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483706 483784])
            ("if" code nil nil [483786 483973])
            ("push" code nil nil [484080 484139])
            ("if" code nil nil [484141 484240])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [484345 484465])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [484467 484589])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484591 486104])
            ("follow-scroll-up-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486106 486558])
            ("follow-scroll-down-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486560 487030])
            ("follow-scroll-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487032 487417])
            ("follow-scroll-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487419 487809])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487811 488502])
            ("if" code nil nil [488504 488601])
            ("if" code nil nil [488745 488944])
            ("push" code nil nil [489064 489124])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489126 489645])
            ("if" code nil nil [489647 489748])
            ("if" code nil nil [489868 489974])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490076 490880])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490882 490965])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490967 491079])
            ("if" code nil nil [491081 491176])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491304 494352])
            ("if" code nil nil [494354 494453])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [494571 494797])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [494799 495052])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495054 495287])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495289 495680])
            ("fortune-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495682 495930])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495932 496282])
            ("if" code nil nil [496284 496383])
            ("frameset-session-filter-alist" variable (:default-value '((name . :never) (left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified))) nil [496494 496803])
            ("frameset-persistent-filter-alist" variable (:default-value (nconc '((background-color . frameset-filter-sanitize-color) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (client . :never) (delete-before . :never) (font . frameset-filter-font-param) (foreground-color . frameset-filter-sanitize-color) (frameset--text-pixel-height . :save) (frameset--text-pixel-width . :save) (fullscreen . frameset-filter-shelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (outer-window-id . :never) (parent-frame . :never) (parent-id . :never) (mouse-wheel-frame . :never) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-id . :never) (window-system . :never)) frameset-session-filter-alist)) nil [496805 497875])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [497877 500092])
            ("frameset-frame-id" function (:prototype-flag t) nil [500094 500529])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [500531 500648])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [500650 500884])
            ("frameset-save" function (:prototype-flag t) nil [500886 501647])
            ("frameset-restore" function (:prototype-flag t) nil [501649 504629])
            ("frameset--jump-to-register" function (:prototype-flag t) nil [504631 504803])
            ("frameset--print-register" function (:prototype-flag t) nil [504805 504994])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504996 505281])
            ("if" code nil nil [505283 505384])
            ("if" code nil nil [505489 505600])
            ("push" code nil nil [505720 505779])
            ("if" code nil nil [505781 505882])
            ("if" code nil nil [506003 506104])
            ("gdb-enable-debug" variable nil nil [506229 506380])
            ("custom-autoload" code nil nil [506382 506430])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [506432 507119])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [507121 510149])
            ("if" code nil nil [510151 510282])
            ("if" code nil nil [510426 510531])
            ("generic-mode-list" variable nil nil [510661 510825])
            ("define-generic-mode" function (:prototype-flag t) nil [510827 512403])
            ("function-put" code nil nil [512405 512465])
            ("function-put" code nil nil [512467 512521])
            ("generic-mode-internal" function (:prototype-flag t) nil [512523 512676])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [512678 513073])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [513075 513576])
            ("make-obsolete" code nil nil [513578 513641])
            ("if" code nil nil [513643 513742])
            ("if" code nil nil [513856 513980])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [514108 514573])
            ("if" code nil nil [514575 514674])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [514798 514965])
            ("gmm-message" function (:prototype-flag t) nil [514967 515291])
            ("gmm-error" function (:prototype-flag t) nil [515293 515455])
            ("gmm-widget-p" function (:prototype-flag t) nil [515457 515550])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [515552 516399])
            ("if" code nil nil [516401 516510])
            ("push" code nil nil [516618 516674])
            ("when" code nil nil [516675 516754])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [516756 516896])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [516898 517289])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517291 517373])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517375 517984])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517986 518271])
            ("if" code nil nil [518273 518366])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518493 518571])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518573 518647])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518649 518757])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518759 519167])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [519169 519272])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [519274 519603])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [519605 519903])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [519905 520039])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [520041 520231])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [520233 520490])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520492 520586])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520588 520688])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520690 520843])
            ("if" code nil nil [520845 520944])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [521065 521185])
            ("if" code nil nil [521187 521295])
            ("if" code nil nil [521422 521521])
            ("if" code nil nil [521648 521755])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521899 521994])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521996 522114])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522116 522404])
            ("if" code nil nil [522406 522517])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522644 522820])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522822 522942])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522944 523071])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [523073 523388])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [523390 523687])
            ("if" code nil nil [523689 523788])
            ("if" code nil nil [523912 524019])
            ("if" code nil nil [524146 524251])
            ("if" code nil nil [524372 524487])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524614 525162])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525164 525275])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [525277 525654])
            ("if" code nil nil [525656 525761])
            ("if" code nil nil [525888 525987])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [526114 526193])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [526195 526274])
            ("if" code nil nil [526276 526375])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526502 526614])
            ("if" code nil nil [526616 526721])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526848 526951])
            ("if" code nil nil [526953 527052])
            ("if" code nil nil [527173 527270])
            ("if" code nil nil [527397 527505])
            ("gnus--random-face-with-type" function (:prototype-flag t) nil [527626 527797])
            ("message-goto-eoh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527799 527843])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527845 528036])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528038 528170])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528172 528378])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528380 528579])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [528581 528734])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [528736 528910])
            ("gnus-random-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528912 529083])
            ("gnus-insert-random-face-header" function (:prototype-flag t) nil [529085 529213])
            ("if" code nil nil [529215 529312])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529456 529623])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529625 529803])
            ("if" code nil nil [529805 529916])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530043 530256])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530258 530366])
            ("if" code nil nil [530368 530467])
            ("gnus-article-html" function (:prototype-flag t) nil [530591 530669])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [530671 530748])
            ("if" code nil nil [530750 530848])
            ("if" code nil nil [530995 531107])
            ("if" code nil nil [531228 531325])
            ("defalias" code nil nil [531449 531494])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531496 531634])
            ("if" code nil nil [531636 531734])
            ("if" code nil nil [531861 531960])
            ("if" code nil nil [532078 532174])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [532292 532364])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532366 532537])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532539 532944])
            ("if" code nil nil [532946 533055])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533182 534318])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534320 534667])
            ("gnus-group-split" function (:prototype-flag t) nil [534669 534907])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [534909 537088])
            ("if" code nil nil [537090 537201])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537322 537685])
            ("gnus-button-mailto" function (:prototype-flag t) nil [537687 537772])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537774 537879])
            ("define-mail-user-agent" code nil nil [537881 538000])
            ("if" code nil nil [538002 538099])
            ("gnus-notifications" function (:prototype-flag t) nil [538258 538612])
            ("if" code nil nil [538614 538735])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538862 539006])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539008 539158])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539160 539333])
            ("if" code nil nil [539335 539440])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [539567 539779])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [539781 539980])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [539982 540164])
            ("gnus-intersection" function (:prototype-flag t) nil [540166 540240])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [540242 540404])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [540406 540580])
            ("defalias" code nil nil [540582 540649])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [540651 540849])
            ("gnus-sorted-union" function (:prototype-flag t) nil [540851 540999])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [541001 541185])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [541187 541304])
            ("if" code nil nil [541306 541405])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541549 541648])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541650 541750])
            ("if" code nil nil [541752 541854])
            ("if" code nil nil [541995 542099])
            ("if" code nil nil [542223 542321])
            ("if" code nil nil [542448 542547])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542674 543047])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543049 543380])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543382 543452])
            ("if" code nil nil [543454 543559])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543683 543790])
            ("if" code nil nil [543792 543890])
            ("if" code nil nil [544014 544112])
            ("gnus-declare-backend" function (:prototype-flag t) nil [544239 544381])
            ("if" code nil nil [544383 544482])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [544603 544807])
            ("if" code nil nil [544809 544906])
            ("if" code nil nil [545033 545132])
            ("if" code nil nil [545256 545354])
            ("if" code nil nil [545478 545576])
            ("if" code nil nil [545694 545790])
            ("if" code nil nil [545908 546004])
            ("gnus-add-configuration" function (:prototype-flag t) nil [546125 546260])
            ("if" code nil nil [546262 546359])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [546472 547204])
            ("custom-autoload" code nil nil [547206 547257])
            ("if" code nil nil [547259 547377])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547492 548256])
            ("if" code nil nil [548258 548355])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548477 548769])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548771 549205])
            ("put" code nil nil [549206 549253])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549255 549645])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549647 550035])
            ("if" code nil nil [550037 550143])
            ("gravatar-retrieve" function (:prototype-flag t) nil [550266 550475])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [550477 550610])
            ("if" code nil nil [550612 550713])
            ("grep-window-height" variable nil nil [550832 550943])
            ("custom-autoload" code nil nil [550945 550991])
            ("grep-command" variable nil nil [550993 551431])
            ("custom-autoload" code nil nil [551433 551475])
            ("grep-find-command" variable nil nil [551477 551735])
            ("custom-autoload" code nil nil [551737 551784])
            ("grep-setup-hook" variable nil nil [551786 551888])
            ("custom-autoload" code nil nil [551890 551933])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value `((,(concat "^\\(?:" "\\(?1:[^ 
]+\\)\\(?3: \\)\\(?2:[0-9]+\\):" "\\|" "\\(?1:" "\\(?:[a-zA-Z]:\\)?" "[^
:]+?[^
/:]\\):[	 ]*\\(?2:[1-9][0-9]*\\)[	 ]*:" "\\)") 1 2 (,(lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end 'font-lock-face 'grep-match-face))) (when mbeg (- mbeg beg))))) \, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end 'font-lock-face 'grep-match-face)) (mend (and mbeg (next-single-property-change mbeg 'font-lock-face nil end)))) (when mend (- mend beg)))))) nil nil (3 '(face nil display ":"))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1)))
                nil [551935 552846])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [552848 553035])
            ("find-program" variable (:default-value (purecopy "find")) nil [553037 553182])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [553184 553382])
            ("grep-find-use-xargs" variable nil nil [553384 553698])
            ("grep-history" variable nil nil [553700 553752])
            ("grep-find-history" variable nil nil [553754 553816])
            ("grep-process-setup" function (:prototype-flag t) nil [553818 553995])
            ("grep-compute-defaults" function (:prototype-flag t) nil [553997 554057])
            ("grep-mode" function (:prototype-flag t) nil [554059 554163])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554165 555066])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555068 555427])
            ("defalias" code nil nil [555429 555461])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555463 556373])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [556375 557472])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [557474 557763])
            ("defalias" code nil nil [557765 557791])
            ("if" code nil nil [557793 557907])
            ("if" code nil nil [558022 558147])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558263 558810])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558812 559022])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559024 559234])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559236 559597])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559599 559815])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559817 560029])
            ("guiler" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560031 560249])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560251 560880])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560882 560968])
            ("gud-tooltip-mode" variable nil nil [560970 561271])
            ("custom-autoload" code nil nil [561273 561318])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561320 561665])
            ("if" code nil nil [561667 561765])
            ("gv-get" function (:prototype-flag t) nil [561880 562370])
            ("gv-letplace" function (:prototype-flag t) nil [562372 562922])
            ("function-put" code nil nil [562924 562976])
            ("gv-define-expander" function (:prototype-flag t) nil [562978 563289])
            ("function-put" code nil nil [563291 563350])
            ("gv--defun-declaration" function (:prototype-flag t) nil [563352 563449])
            ("or" code nil nil [563451 563651])
            ("or" code nil nil [563653 563799])
            ("gv-define-setter" function (:prototype-flag t) nil [563801 564474])
            ("function-put" code nil nil [564476 564533])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [564535 565118])
            ("setf" function (:prototype-flag t) nil [565120 565472])
            ("put" code nil nil [565474 565526])
            ("gv-ref" function (:prototype-flag t) nil [565528 565820])
            ("if" code nil nil [565822 565911])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566035 566461])
            ("if" code nil nil [566463 566591])
            ("if" code nil nil [566734 566831])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566943 567038])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567040 567262])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567264 567507])
            ("if" code nil nil [567509 567604])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567725 567855])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567857 568051])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [568053 568176])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568178 568474])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568476 568718])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568720 568894])
            ("if" code nil nil [568896 568997])
            ("help-at-pt-string" function (:prototype-flag t) nil [569114 569507])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [569509 569787])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569789 570270])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570272 570431])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570433 570596])
            ("help-at-pt-display-when-idle" variable (:default-value 'never) nil [570598 571974])
            ("custom-autoload" code nil nil [571976 572040])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [572042 572985])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572987 574001])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574003 574379])
            ("if" code nil nil [574381 574507])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574618 574802])
            ("help-C-file-name" function (:prototype-flag t) nil [574804 575003])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [575005 575755])
            ("describe-function-1" function (:prototype-flag t) nil [575757 575828])
            ("variable-at-point" function (:prototype-flag t) nil [575830 576066])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576068 576410])
            ("describe-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576412 576788])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576790 577040])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577042 577367])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577369 577499])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577501 577630])
            ("if" code nil nil [577632 577741])
            ("three-step-help" variable nil nil [577858 578187])
            ("custom-autoload" code nil nil [578189 578238])
            ("if" code nil nil [578240 578350])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578464 578666])
            ("help-mode-setup" function (:prototype-flag t) nil [578668 578765])
            ("help-mode-finish" function (:prototype-flag t) nil [578767 578870])
            ("help-setup-xref" function (:prototype-flag t) nil [578872 579466])
            ("help-buffer" function (:prototype-flag t) nil [579468 579805])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579807 580828])
            ("help-xref-button" function (:prototype-flag t) nil [580830 581199])
            ("help-insert-xref-button" function (:prototype-flag t) nil [581201 581502])
            ("help-xref-on-pp" function (:prototype-flag t) nil [581504 581629])
            ("define-obsolete-function-alias" code nil nil [581631 581707])
            ("help-bookmark-jump" function (:prototype-flag t) nil [581709 581935])
            ("if" code nil nil [581937 582062])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582189 582296])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582298 582378])
            ("if" code nil nil [582380 582477])
            ("if" code nil nil [582588 582717])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582816 586356])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586358 586579])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586581 586716])
            ("if" code nil nil [586718 586830])
            ("if" code nil nil [586978 587104])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587212 590114])
            ("global-hi-lock-mode" variable nil nil [590116 590429])
            ("custom-autoload" code nil nil [590431 590483])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590485 590889])
            ("defalias" code nil nil [590891 590960])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590962 591376])
            ("defalias" code nil nil [591378 591427])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591429 591820])
            ("defalias" code nil nil [591822 591878])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591880 592485])
            ("defalias" code nil nil [592487 592554])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592556 592978])
            ("defalias" code nil nil [592980 593033])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593035 593386])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593388 593712])
            ("if" code nil nil [593714 593842])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593967 595860])
            ("if" code nil nil [595862 596083])
            ("hs-special-modes-alist" variable (:default-value (mapcar 'purecopy '((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil)))) nil [596214 597655])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597657 598646])
            ("turn-off-hideshow" function (:prototype-flag t) nil [598648 598749])
            ("if" code nil nil [598751 598846])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598960 600133])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600135 600852])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600854 601073])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601075 601217])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601219 601369])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601371 602048])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602050 602634])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602636 603254])
            ("global-highlight-changes-mode" variable nil nil [603256 603609])
            ("custom-autoload" code nil nil [603611 603675])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603677 604147])
            ("if" code nil nil [604149 604292])
            ("push" code nil nil [604408 604469])
            ("hippie-expand-try-functions-list" variable (:default-value '(try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)) nil [604471 604942])
            ("custom-autoload" code nil nil [604944 605010])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605012 605498])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [605500 605767])
            ("if" code nil nil [605769 605890])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605998 606925])
            ("global-hl-line-mode" variable nil nil [606927 607240])
            ("custom-autoload" code nil nil [607242 607294])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607296 607947])
            ("if" code nil nil [607949 608066])
            ("if" code nil nil [608185 608297])
            ("if" code nil nil [608416 608529])
            ("holiday-general-holidays" variable (:default-value (mapcar 'purecopy '((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving")))) nil [608658 609479])
            ("custom-autoload" code nil nil [609481 609537])
            ("put" code nil nil [609539 609594])
            ("holiday-oriental-holidays" variable (:default-value (mapcar 'purecopy '((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice)))))) nil [609596 610097])
            ("custom-autoload" code nil nil [610099 610156])
            ("put" code nil nil [610158 610214])
            ("holiday-local-holidays" variable nil nil [610216 610330])
            ("custom-autoload" code nil nil [610332 610386])
            ("put" code nil nil [610388 610441])
            ("holiday-other-holidays" variable nil nil [610443 610564])
            ("custom-autoload" code nil nil [610566 610620])
            ("put" code nil nil [610622 610675])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar 'purecopy '((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc)))))) nil [610677 610992])
            ("custom-autoload" code nil nil [610994 611049])
            ("put" code nil nil [611051 611105])
            ("holiday-christian-holidays" variable (:default-value (mapcar 'purecopy '((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent")))))) nil [611107 611531])
            ("custom-autoload" code nil nil [611533 611591])
            ("put" code nil nil [611593 611650])
            ("holiday-islamic-holidays" variable (:default-value (mapcar 'purecopy '((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha")))))) nil [611652 612162])
            ("custom-autoload" code nil nil [612164 612220])
            ("put" code nil nil [612222 612277])
            ("holiday-bahai-holidays" variable (:default-value (mapcar 'purecopy '((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the B\303\241b") (holiday-fixed 5 29 "Ascension of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (holiday-fixed 7 9 "Martyrdom of the B\303\241b") (holiday-fixed 10 20 "Birth of the B\303\241b") (holiday-fixed 11 12 "Birth of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu\342\200\231l-Bah\303\241")))))) nil [612279 612824])
            ("custom-autoload" code nil nil [612826 612880])
            ("put" code nil nil [612882 612935])
            ("holiday-solar-holidays" variable (:default-value (mapcar 'purecopy '((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name)))))) nil [612937 613489])
            ("custom-autoload" code nil nil [613491 613545])
            ("put" code nil nil [613547 613600])
            ("put" code nil nil [613602 613650])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613652 613912])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613914 614737])
            ("defalias" code nil nil [614739 614778])
            ("if" code nil nil [614780 614892])
            ("push" code nil nil [615011 615074])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615076 615822])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615824 616133])
            ("if" code nil nil [616135 616249])
            ("if" code nil nil [616397 616771])
            ("define-ibuffer-column" function (:prototype-flag t) nil [616885 617986])
            ("function-put" code nil nil [617988 618054])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [618056 618557])
            ("function-put" code nil nil [618559 618621])
            ("function-put" code nil nil [618623 618679])
            ("define-ibuffer-op" function (:prototype-flag t) nil [618681 620700])
            ("function-put" code nil nil [620702 620760])
            ("function-put" code nil nil [620762 620814])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [620816 621381])
            ("function-put" code nil nil [621383 621445])
            ("function-put" code nil nil [621447 621503])
            ("if" code nil nil [621505 621606])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621714 621941])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621943 622184])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622186 623053])
            ("ibuffer-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623055 623262])
            ("if" code nil nil [623264 623432])
            ("push" code nil nil [623571 623632])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623634 623895])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623897 624371])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624373 624720])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624722 625434])
            ("if" code nil nil [625436 625539])
            ("icomplete-mode" variable nil nil [625653 625946])
            ("custom-autoload" code nil nil [625948 625997])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625999 626840])
            ("when" code nil nil [626841 627036])
            ("if" code nil nil [627038 627141])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627260 628686])
            ("if" code nil nil [628688 628912])
            ("if" code nil nil [629096 629211])
            ("if" code nil nil [629353 629454])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629599 630449])
            ("if" code nil nil [630451 630553])
            ("if" code nil nil [630704 630816])
            ("push" code nil nil [630943 631004])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [631006 635966])
            ("if" code nil nil [635968 636067])
            ("ido-mode" variable nil nil [636163 636627])
            ("custom-autoload" code nil nil [636629 636666])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [636668 637185])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637187 638883])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638885 639124])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639126 639353])
            ("ido-display-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639355 639584])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639586 639769])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639771 640000])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640002 640239])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640241 640342])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640344 642833])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642835 643062])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643064 643294])
            ("ido-find-alternate-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643296 643539])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643541 643766])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643768 644022])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644024 644276])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644278 644495])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644497 644722])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644724 644917])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644919 645124])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645126 645308])
            ("ido-dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645310 645550])
            ("ido-dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645552 645783])
            ("ido-read-buffer" function (:prototype-flag t) nil [645785 646269])
            ("ido-read-file-name" function (:prototype-flag t) nil [646271 646562])
            ("ido-read-directory-name" function (:prototype-flag t) nil [646564 646864])
            ("ido-completing-read" function (:prototype-flag t) nil [646866 647840])
            ("if" code nil nil [647842 647933])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648032 648232])
            ("if" code nil nil [648234 648354])
            ("if" code nil nil [648481 648586])
            ("define-obsolete-function-alias" code nil nil [648691 648764])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648766 649119])
            ("if" code nil nil [649121 649241])
            ("image-type-from-data" function (:prototype-flag t) nil [649343 649535])
            ("image-type-from-buffer" function (:prototype-flag t) nil [649537 649737])
            ("image-type-from-file-header" function (:prototype-flag t) nil [649739 649956])
            ("image-type-from-file-name" function (:prototype-flag t) nil [649958 650162])
            ("image-type" function (:prototype-flag t) nil [650164 650632])
            ("image-type-available-p" function (:prototype-flag t) nil [650634 650794])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [650796 651293])
            ("create-image" function (:prototype-flag t) nil [651295 652174])
            ("put-image" function (:prototype-flag t) nil [652176 652895])
            ("insert-image" function (:prototype-flag t) nil [652897 653747])
            ("insert-sliced-image" function (:prototype-flag t) nil [653749 654332])
            ("remove-images" function (:prototype-flag t) nil [654334 654582])
            ("find-image" function (:prototype-flag t) nil [654584 655412])
            ("defimage" function (:prototype-flag t) nil [655414 656229])
            ("function-put" code nil nil [656231 656274])
            ("imagemagick-register-types" function (:prototype-flag t) nil [656276 656853])
            ("if" code nil nil [656855 656949])
            ("push" code nil nil [657068 657133])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657135 657523])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657525 658156])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658158 659148])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659150 659430])
            ("defalias" code nil nil [659432 659486])
            ("define-obsolete-function-alias" code nil nil [659488 659547])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659549 659683])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659685 659844])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659846 659948])
            ("image-dired-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659950 660445])
            ("define-obsolete-function-alias" code nil nil [660447 660547])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660549 660678])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660680 660813])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660815 660940])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660942 661192])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661194 661317])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661319 661745])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661747 661958])
            ("if" code nil nil [661960 662067])
            ("image-file-name-extensions" variable (:default-value (purecopy '("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg"))) nil [662184 662722])
            ("custom-autoload" code nil nil [662724 662786])
            ("image-file-name-regexps" variable nil nil [662788 663261])
            ("custom-autoload" code nil nil [663263 663322])
            ("image-file-name-regexp" function (:prototype-flag t) nil [663324 663449])
            ("insert-image-file" function (:prototype-flag t) nil [663451 663708])
            ("auto-image-file-mode" variable nil nil [663710 664027])
            ("custom-autoload" code nil nil [664029 664085])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664087 664609])
            ("if" code nil nil [664611 664716])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664833 665118])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665120 665633])
            ("image-mode-to-text" function (:prototype-flag t) nil [665635 665873])
            ("image-bookmark-jump" function (:prototype-flag t) nil [665875 665943])
            ("if" code nil nil [665945 666045])
            ("if" code nil nil [666152 666245])
            ("imenu-sort-function" variable nil nil [666347 666883])
            ("custom-autoload" code nil nil [666885 666933])
            ("imenu-generic-expression" variable nil nil [666935 668499])
            ("put" code nil nil [668500 668555])
            ("make-variable-buffer-local" code nil nil [668557 668611])
            ("imenu-create-index-function" variable (:default-value 'imenu-default-create-index-function) nil [668613 668979])
            ("make-variable-buffer-local" code nil nil [668981 669038])
            ("imenu-prev-index-position-function" variable (:default-value 'beginning-of-defun) nil [669040 669480])
            ("make-variable-buffer-local" code nil nil [669482 669546])
            ("imenu-extract-index-name-function" variable nil nil [669548 669841])
            ("make-variable-buffer-local" code nil nil [669843 669906])
            ("imenu-name-lookup-function" variable nil nil [669908 670266])
            ("make-variable-buffer-local" code nil nil [670268 670324])
            ("imenu-default-goto-function" variable (:default-value 'imenu-default-goto-function) nil [670326 670529])
            ("make-variable-buffer-local" code nil nil [670531 670588])
            ("put" code nil nil [670589 670638])
            ("make-variable-buffer-local" code nil nil [670640 670688])
            ("make-variable-buffer-local" code nil nil [670690 670742])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670744 670962])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670964 671168])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671170 671385])
            ("if" code nil nil [671387 671482])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671611 671742])
            ("indian-compose-string" function (:prototype-flag t) nil [671744 671815])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [671817 671895])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [671897 671979])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671981 672106])
            ("if" code nil nil [672108 672219])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672350 672828])
            ("defalias" code nil nil [672830 672865])
            ("if" code nil nil [672867 672998])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep 'ns) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list '("/usr/local/" "/usr/" "/opt/"))) (suffixes '("share/" "")) (standard-info-dirs (apply #'nconc (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type 'windows-nt)) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [673097 675021])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675023 675162])
            ("put" code nil nil [675164 675205])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675207 676155])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676157 676249])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676251 676374])
            ("info-standalone" function (:prototype-flag t) nil [676376 676583])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676585 676812])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676814 676895])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676897 677292])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677294 677453])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677455 677787])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677789 681480])
            ("put" code nil nil [681482 681547])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681549 681885])
            ("put" code nil nil [681887 681956])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681958 682371])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682373 682528])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [682530 682711])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682713 683054])
            ("if" code nil nil [683056 683157])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683271 683515])
            ("put" code nil nil [683517 683561])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683563 684008])
            ("put" code nil nil [684010 684052])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684054 684457])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684459 684581])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684583 684701])
            ("if" code nil nil [684703 684801])
            ("push" code nil nil [684914 684972])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684974 686209])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686211 686801])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686803 687189])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687191 688061])
            ("if" code nil nil [688063 688166])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688277 688427])
            ("Info-split-threshold" variable (:default-value 262144) nil [688429 688537])
            ("custom-autoload" code nil nil [688539 688591])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688593 689278])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689280 689442])
            ("batch-info-validate" function (:prototype-flag t) nil [689444 689774])
            ("if" code nil nil [689776 689882])
            ("define-inline" function (:prototype-flag t) nil [690009 690264])
            ("function-put" code nil nil [690266 690324])
            ("function-put" code nil nil [690326 690374])
            ("if" code nil nil [690376 690473])
            ("push" code nil nil [690598 690658])
            ("inversion-require-emacs" function (:prototype-flag t) nil [690660 690885])
            ("if" code nil nil [690887 690990])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691140 691279])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691281 691392])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [691394 691507])
            ("if" code nil nil [691509 691610])
            ("push" code nil nil [691720 691779])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691781 692046])
            ("if" code nil nil [692048 692148])
            ("if" code nil nil [692298 692401])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692545 692815])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692817 693076])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693078 693345])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693347 693614])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693616 693892])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693894 694170])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694172 694445])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694447 694712])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694714 694979])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694981 695081])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695083 695185])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695187 695316])
            ("if" code nil nil [695318 695413])
            ("define-key" code nil nil [695566 695630])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695632 695716])
            ("if" code nil nil [695718 695823])
            ("put" code nil nil [695948 696038])
            ("ispell-personal-dictionary" variable nil nil [696040 696214])
            ("custom-autoload" code nil nil [696216 696272])
            ("put" code nil nil [696274 696343])
            ("ispell-menu-map" variable
               (:constant-flag t
                :default-value (let ((map (make-sparse-keymap "Spell"))) (define-key map [ispell-change-dictionary] `(menu-item ,(purecopy "Change Dictionary...") ispell-change-dictionary :help ,(purecopy "Supply explicit dictionary file name"))) (define-key map [ispell-kill-ispell] `(menu-item ,(purecopy "Kill Process") (lambda nil (interactive) (ispell-kill-ispell nil 'clear)) :enable (and (boundp 'ispell-process) ispell-process (eq (ispell-process-status) 'run)) :help ,(purecopy "Terminate Ispell subprocess"))) (define-key map [ispell-pdict-save] `(menu-item ,(purecopy "Save Dictionary") (lambda nil (interactive) (ispell-pdict-save t t)) :help ,(purecopy "Save personal dictionary"))) (define-key map [ispell-customize] `(menu-item ,(purecopy "Customize...") (lambda nil (interactive) (customize-group 'ispell)) :help ,(purecopy "Customize spell checking options"))) (define-key map [ispell-help] `(menu-item ,(purecopy "Help") (lambda nil (interactive) (describe-function 'ispell-help)) :help ,(purecopy "Show standard Ispell keybindings and commands"))) (define-key map [flyspell-mode] `(menu-item ,(purecopy "Automatic spell checking (Flyspell)") flyspell-mode :help ,(purecopy "Check spelling while you edit the text") :button (:toggle bound-and-true-p flyspell-mode))) (define-key map [ispell-complete-word] `(menu-item ,(purecopy "Complete Word") ispell-complete-word :help ,(purecopy "Complete word at cursor using dictionary"))) (define-key map [ispell-complete-word-interior-frag] `(menu-item ,(purecopy "Complete Word Fragment") ispell-complete-word-interior-frag :help ,(purecopy "Complete word fragment at cursor"))) (define-key map [ispell-continue] `(menu-item ,(purecopy "Continue Spell-Checking") ispell-continue :enable (and (boundp 'ispell-region-end) (marker-position ispell-region-end) (equal (marker-buffer ispell-region-end) (current-buffer))) :help ,(purecopy "Continue spell checking last region"))) (define-key map [ispell-word] `(menu-item ,(purecopy "Spell-Check Word") ispell-word :help ,(purecopy "Spell-check word at cursor"))) (define-key map [ispell-comments-and-strings] `(menu-item ,(purecopy "Spell-Check Comments") ispell-comments-and-strings :help ,(purecopy "Spell-check only comments and strings"))) (define-key map [ispell-region] `(menu-item ,(purecopy "Spell-Check Region") ispell-region :enable mark-active :help ,(purecopy "Spell-check text in marked region"))) (define-key map [ispell-message] `(menu-item ,(purecopy "Spell-Check Message") ispell-message :visible (eq major-mode 'mail-mode) :help ,(purecopy "Skip headers and included message text"))) (define-key map [ispell-buffer] `(menu-item ,(purecopy "Spell-Check Buffer") ispell-buffer :help ,(purecopy "Check spelling of selected buffer"))) map))
                nil [696345 699129])
            ("fset" code nil nil [699131 699186])
            ("ispell-skip-region-alist" variable (:default-value `((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) (,(purecopy "^---*BEGIN PGP [A-Z ]*--*") \, (purecopy "^---*END PGP [A-Z ]*--*")) (,(purecopy "^begin [0-9][0-9][0-9] [^ 	]+$") \, (purecopy "
end
")) (,(purecopy "^%!PS-Adobe-[123].0") \, (purecopy "
%%EOF
")) (,(purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage") \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")))) nil [699188 700089])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy '((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}"))))) nil [700091 700947])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value '(("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]")))
                nil [700949 701500])
            ("put" code nil nil [701501 701556])
            ("define-key" code nil nil [701558 701595])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [701597 702972])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [702974 703154])
            ("ispell-help" function (:prototype-flag t) nil [703156 704249])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704251 704515])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704517 704829])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704831 705082])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705084 705219])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705221 705332])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705334 705553])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705555 705676])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705678 705948])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705950 706080])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706082 706527])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706529 707259])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707261 708234])
            ("if" code nil nil [708236 708356])
            ("if" code nil nil [708509 708651])
            ("if" code nil nil [708804 708905])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [709048 709128])
            ("japanese-katakana" function (:prototype-flag t) nil [709130 709605])
            ("japanese-hiragana" function (:prototype-flag t) nil [709607 709849])
            ("japanese-hankaku" function (:prototype-flag t) nil [709851 710189])
            ("japanese-zenkaku" function (:prototype-flag t) nil [710191 710433])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710435 710719])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710721 710864])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710866 711210])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711212 711561])
            ("read-hiragana-string" function (:prototype-flag t) nil [711563 711807])
            ("if" code nil nil [711809 711912])
            ("jka-compr-inhibit" variable nil nil [712026 712240])
            ("jka-compr-handler" function (:prototype-flag t) nil [712242 712324])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [712326 712566])
            ("if" code nil nil [712568 712691])
            ("push" code nil nil [712803 712854])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712856 712932])
            ("js-jsx-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712934 713298])
            ("defalias" code nil nil [713300 713336])
            ("dolist" code nil nil [713338 713460])
            ("if" code nil nil [713462 713561])
            ("push" code nil nil [713659 713714])
            ("if" code nil nil [713716 713809])
            ("push" code nil nil [713916 713976])
            ("if" code nil nil [713978 714108])
            ("if" code nil nil [714213 714310])
            ("keypad-setup" variable nil nil [714435 714646])
            ("custom-autoload" code nil nil [714648 714692])
            ("keypad-numlock-setup" variable nil nil [714694 714912])
            ("custom-autoload" code nil nil [714914 714966])
            ("keypad-shifted-setup" variable nil nil [714968 715185])
            ("custom-autoload" code nil nil [715187 715239])
            ("keypad-numlock-shifted-setup" variable nil nil [715241 715466])
            ("custom-autoload" code nil nil [715468 715528])
            ("keypad-setup" function (:prototype-flag t) nil [715530 716573])
            ("kinsoku" function (:prototype-flag t) nil [716717 717361])
            ("if" code nil nil [717363 717462])
            ("kkc-after-update-conversion-functions" variable nil nil [717586 717964])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717966 718393])
            ("if" code nil nil [718395 718486])
            ("global-set-key" code nil nil [718591 718635])
            ("global-set-key" code nil nil [718637 718679])
            ("global-set-key" code nil nil [718681 718732])
            ("global-set-key" code nil nil [718734 718793])
            ("global-set-key" code nil nil [718795 718842])
            ("global-set-key" code nil nil [718844 718886])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718888 718970])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [718972 719129])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719131 720187])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720189 720652])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720654 721295])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721297 722223])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722225 722496])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722498 722872])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722874 723080])
            ("if" code nil nil [723082 723179])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [723322 723518])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [723520 723598])
            ("if" code nil nil [723600 723802])
            ("lao-compose-string" function (:prototype-flag t) nil [723931 723996])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [723998 724534])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [724536 724677])
            ("lao-composition-function" function (:prototype-flag t) nil [724679 724754])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724756 724823])
            ("if" code nil nil [724825 724921])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy '(("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8)))) nil [725068 725777])
            ("custom-autoload" code nil nil [725779 725838])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [725840 726052])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [726054 726261])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [726263 726555])
            ("if" code nil nil [726557 726667])
            ("latin1-display" variable nil nil [726823 727526])
            ("custom-autoload" code nil nil [727528 727579])
            ("latin1-display" function (:prototype-flag t) nil [727581 727922])
            ("latin1-display-ucs-per-lynx" variable nil nil [727924 728259])
            ("custom-autoload" code nil nil [728261 728325])
            ("if" code nil nil [728327 728437])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728579 728675])
            ("if" code nil nil [728677 728780])
            ("if" code nil nil [728887 728980])
            ("if" code nil nil [729136 729248])
            ("put" code nil nil [729402 729464])
            ("put" code nil nil [729466 729518])
            ("put" code nil nil [729520 729582])
            ("put" code nil nil [729584 729645])
            ("add-to-list" code nil nil [729647 729709])
            ("less-css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729711 729866])
            ("if" code nil nil [729868 729974])
            ("push" code nil nil [730117 730179])
            ("let-alist" function (:prototype-flag t) nil [730181 731115])
            ("function-put" code nil nil [731117 731167])
            ("if" code nil nil [731169 731273])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731382 731647])
            ("if" code nil nil [731649 731742])
            ("push" code nil nil [731843 731902])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731904 732309])
            ("global-linum-mode" variable nil nil [732311 732616])
            ("custom-autoload" code nil nil [732618 732666])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732668 733040])
            ("if" code nil nil [733042 733137])
            ("if" code nil nil [733278 733373])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [733484 734658])
            ("if" code nil nil [734660 734805])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [734910 735109])
            ("custom-autoload" code nil nil [735111 735166])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [735168 736232])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736234 736994])
            ("if" code nil nil [736996 737093])
            ("log-edit" function (:prototype-flag t) nil [737210 738450])
            ("if" code nil nil [738452 738563])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738680 738773])
            ("if" code nil nil [738775 738876])
            ("lpr-windows-system" variable (:default-value (memq system-type '(ms-dos windows-nt))) nil [738972 739087])
            ("lpr-lp-system" variable (:default-value (memq system-type '(usg-unix-v hpux))) nil [739089 739219])
            ("printer-name" variable (:default-value (and (eq system-type 'ms-dos) "PRN")) nil [739221 740035])
            ("custom-autoload" code nil nil [740037 740076])
            ("lpr-switches" variable nil nil [740078 740286])
            ("custom-autoload" code nil nil [740288 740327])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [740329 740895])
            ("custom-autoload" code nil nil [740897 740935])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [740937 741133])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741135 741701])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741703 741909])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741911 742491])
            ("if" code nil nil [742493 742592])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [742700 742883])
            ("custom-autoload" code nil nil [742885 742947])
            ("if" code nil nil [742949 743048])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743168 743441])
            ("if" code nil nil [743443 743583])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743711 743794])
            ("if" code nil nil [743796 743890])
            ("defalias" code nil nil [743995 744051])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744053 744751])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744753 745412])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745414 746881])
            ("define-key" code nil nil [746883 746926])
            ("mail-extract-address-components" function (:prototype-flag t) nil [747050 748239])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [748241 748361])
            ("if" code nil nil [748363 748466])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [748590 748720])
            ("mail-hist-enable" function (:prototype-flag t) nil [748722 748782])
            ("mail-hist-keep-history" variable (:default-value t) nil [748784 748889])
            ("custom-autoload" code nil nil [748891 748946])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [748948 749236])
            ("if" code nil nil [749238 749341])
            ("if" code nil nil [749468 749567])
            ("if" code nil nil [749694 749799])
            ("if" code nil nil [749937 750043])
            ("mail-use-rfc822" variable nil nil [750170 750348])
            ("custom-autoload" code nil nil [750350 750399])
            ("mail-dont-reply-to-names" variable nil nil [750401 750742])
            ("custom-autoload" code nil nil [750744 750802])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [750804 750910])
            ("mail-quote-printable" function (:prototype-flag t) nil [750912 751266])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751268 751520])
            ("mail-unquote-printable" function (:prototype-flag t) nil [751522 751773])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751775 752421])
            ("mail-fetch-field" function (:prototype-flag t) nil [752423 752899])
            ("if" code nil nil [752901 753000])
            ("mail-abbrevs-mode" variable nil nil [753127 753432])
            ("custom-autoload" code nil nil [753434 753487])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753489 754100])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [754102 754208])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [754210 754439])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754441 754883])
            ("if" code nil nil [754885 755028])
            ("mail-complete-style" variable (:default-value 'angles) nil [755152 755466])
            ("custom-autoload" code nil nil [755468 755520])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755522 755933])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755935 756394])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [756396 756558])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756560 756832])
            ("make-obsolete" code nil nil [756834 756907])
            ("if" code nil nil [756909 757028])
            ("if" code nil nil [757144 757243])
            ("mailclient-send-it" function (:prototype-flag t) nil [757370 757584])
            ("if" code nil nil [757586 757691])
            ("if" code nil nil [757818 757923])
            ("if" code nil nil [758036 758133])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758275 761576])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761578 761695])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761697 761808])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761810 761923])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761925 762041])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762043 762154])
            ("if" code nil nil [762156 762258])
            ("if" code nil nil [762389 762490])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762598 762772])
            ("if" code nil nil [762774 762878])
            ("defalias" code nil nil [762974 763003])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763005 764333])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764335 764460])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [764462 764567])
            ("if" code nil nil [764569 764666])
            ("if" code nil nil [764794 764893])
            ("push" code nil nil [765010 765064])
            ("if" code nil nil [765066 765156])
            ("push" code nil nil [765260 765319])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765321 765958])
            ("if" code nil nil [765960 766057])
            ("minibuffer-depth-indicate-mode" variable nil nil [766168 766525])
            ("custom-autoload" code nil nil [766527 766591])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766593 767208])
            ("if" code nil nil [767210 767319])
            ("push" code nil nil [767414 767468])
            ("if" code nil nil [767470 767560])
            ("define-mail-user-agent" code nil nil [767678 767799])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767801 770215])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770217 770626])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770628 770749])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770751 770905])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770907 771045])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771047 771229])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771231 771384])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771386 771609])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771611 771729])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771731 771945])
            ("message-forward-make-body" function (:prototype-flag t) nil [771947 772046])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [772048 772136])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772138 772234])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772236 772336])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772338 772562])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772564 772721])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772723 772878])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772880 773014])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773016 773149])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773151 773391])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773393 773616])
            ("if" code nil nil [773618 773723])
            ("push" code nil nil [773864 773924])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773926 774021])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774023 774118])
            ("if" code nil nil [774120 774274])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774395 774562])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774564 774958])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774960 775372])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775374 775794])
            ("if" code nil nil [775796 775897])
            ("if" code nil nil [776018 776164])
            ("if" code nil nil [776285 776380])
            ("if" code nil nil [776507 776604])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776722 776862])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776864 777033])
            ("mh-smail-batch" function (:prototype-flag t) nil [777035 777593])
            ("define-mail-user-agent" code nil nil [777595 777724])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [777726 778526])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778528 779611])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779613 779923])
            ("if" code nil nil [779925 780019])
            ("if" code nil nil [780143 780239])
            ("push" code nil nil [780347 780405])
            ("put" code nil nil [780407 780446])
            ("put" code nil nil [780448 780485])
            ("put" code nil nil [780487 780530])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780532 780650])
            ("if" code nil nil [780652 780785])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780909 781124])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781126 781347])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781349 783090])
            ("if" code nil nil [783092 783188])
            ("if" code nil nil [783309 783404])
            ("if" code nil nil [783542 783640])
            ("if" code nil nil [783755 783858])
            ("if" code nil nil [783976 784070])
            ("if" code nil nil [784194 784290])
            ("if" code nil nil [784411 784506])
            ("if" code nil nil [784624 784718])
            ("if" code nil nil [784839 784935])
            ("if" code nil nil [785053 785147])
            ("if" code nil nil [785271 785367])
            ("if" code nil nil [785482 785575])
            ("if" code nil nil [785693 785787])
            ("if" code nil nil [785908 786003])
            ("if" code nil nil [786127 786223])
            ("if" code nil nil [786361 786468])
            ("if" code nil nil [786589 786684])
            ("if" code nil nil [786805 786900])
            ("mhtml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787045 787321])
            ("if" code nil nil [787323 787423])
            ("midnight-mode" variable nil nil [787534 787823])
            ("custom-autoload" code nil nil [787825 787872])
            ("midnight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787874 788229])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788231 788853])
            ("midnight-delay-set" function (:prototype-flag t) nil [788855 789074])
            ("if" code nil nil [789076 789198])
            ("minibuffer-electric-default-mode" variable nil nil [789324 789689])
            ("custom-autoload" code nil nil [789691 789762])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789764 790521])
            ("if" code nil nil [790523 790627])
            ("copy-from-above-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790726 791046])
            ("zap-up-to-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791048 791317])
            ("mark-beginning-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791319 791420])
            ("mark-end-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791422 791511])
            ("upcase-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791513 791628])
            ("forward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791630 791782])
            ("backward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791784 791932])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791934 792508])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792510 792954])
            ("if" code nil nil [792956 793068])
            ("add-hook" code nil nil [793179 793229])
            ("multi-isearch-next-buffer-function" variable nil nil [793231 794270])
            ("multi-isearch-next-buffer-current-function" variable nil nil [794272 794470])
            ("multi-isearch-current-buffer" variable nil nil [794472 794634])
            ("multi-isearch-buffer-list" variable nil nil [794636 794807])
            ("multi-isearch-file-list" variable nil nil [794809 794909])
            ("multi-isearch-setup" function (:prototype-flag t) nil [794911 795060])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795062 795406])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795408 795766])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795768 796193])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796195 796634])
            ("if" code nil nil [796636 796769])
            ("push" code nil nil [796913 796974])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796976 797067])
            ("if" code nil nil [797069 797169])
            ("if" code nil nil [797296 797393])
            ("if" code nil nil [797517 797613])
            ("if" code nil nil [797737 797833])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [797957 798065])
            ("if" code nil nil [798067 798163])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [798287 798414])
            ("mm-inline-external-body" function (:prototype-flag t) nil [798416 798709])
            ("if" code nil nil [798711 798814])
            ("mm-inline-partial" function (:prototype-flag t) nil [798941 799223])
            ("if" code nil nil [799225 799340])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [799455 799614])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [799616 799748])
            ("if" code nil nil [799750 799847])
            ("if" code nil nil [799965 800059])
            ("mm-uu-dissect" function (:prototype-flag t) nil [800171 800477])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [800479 800670])
            ("if" code nil nil [800672 800764])
            ("if" code nil nil [800882 800976])
            ("mml-to-mime" function (:prototype-flag t) nil [801082 801177])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801179 802030])
            ("if" code nil nil [802032 802137])
            ("if" code nil nil [802255 802350])
            ("if" code nil nil [802474 802577])
            ("mml1991-encrypt" function (:prototype-flag t) nil [802695 802772])
            ("mml1991-sign" function (:prototype-flag t) nil [802774 802833])
            ("if" code nil nil [802835 802934])
            ("mml2015-decrypt" function (:prototype-flag t) nil [803052 803120])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [803122 803195])
            ("mml2015-verify" function (:prototype-flag t) nil [803197 803264])
            ("mml2015-verify-test" function (:prototype-flag t) nil [803266 803338])
            ("mml2015-encrypt" function (:prototype-flag t) nil [803340 803417])
            ("mml2015-sign" function (:prototype-flag t) nil [803419 803478])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [803480 803542])
            ("if" code nil nil [803544 803643])
            ("put" code nil nil [803772 803825])
            ("if" code nil nil [803827 804194])
            ("defalias" code nil nil [804322 804356])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804358 805504])
            ("if" code nil nil [805506 805624])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805736 805843])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805845 805963])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805965 806083])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806085 806208])
            ("if" code nil nil [806210 806325])
            ("if" code nil nil [806442 806542])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806659 807599])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807601 808221])
            ("if" code nil nil [808223 808323])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808419 808483])
            ("if" code nil nil [808485 808599])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808708 808786])
            ("if" code nil nil [808788 808881])
            ("msb-mode" variable nil nil [808977 809246])
            ("custom-autoload" code nil nil [809248 809285])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809287 809717])
            ("if" code nil nil [809719 809831])
            ("if" code nil nil [809949 810048])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810198 810692])
            ("read-charset" function (:prototype-flag t) nil [810694 811224])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811226 811348])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811350 811479])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811481 811599])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811601 812775])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812777 812898])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812900 813206])
            ("list-coding-categories" function (:prototype-flag t) nil [813208 813314])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813316 813476])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813478 813632])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813634 813906])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813908 814012])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814014 814347])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814349 814588])
            ("if" code nil nil [814590 814810])
            ("store-substring" function (:prototype-flag t) nil [814960 815089])
            ("truncate-string-to-width" function (:prototype-flag t) nil [815091 816357])
            ("nested-alist-p" function (:arguments ("obj")) nil [816359 816814])
            ("set-nested-alist" function (:prototype-flag t) nil [816816 817194])
            ("lookup-nested-alist" function (:prototype-flag t) nil [817196 817839])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [817841 818001])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [818003 818163])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [818165 818337])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [818339 818511])
            ("with-coding-priority" function (:prototype-flag t) nil [818513 818878])
            ("put" code nil nil [818879 818930])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [818932 819201])
            ("make-obsolete" code nil nil [819203 819277])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [819279 819550])
            ("char-displayable-p" function (:prototype-flag t) nil [819552 819904])
            ("filepos-to-bufferpos" function (:prototype-flag t) nil [819906 820542])
            ("bufferpos-to-filepos" function (:prototype-flag t) nil [820544 821186])
            ("if" code nil nil [821188 821333])
            ("if" code nil nil [821438 821550])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821672 821775])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821777 821880])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821882 821983])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821985 822078])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822080 822177])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822179 822274])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822276 822432])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822434 822794])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822796 822869])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822871 823235])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823237 823582])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823584 823671])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823673 823848])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823850 824184])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824186 824248])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824250 824444])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824446 824558])
            ("if" code nil nil [824560 824896])
            ("netrc-credentials" function (:prototype-flag t) nil [825006 825204])
            ("if" code nil nil [825206 825301])
            ("open-network-stream" function (:prototype-flag t) nil [825446 829889])
            ("defalias" code nil nil [829891 829944])
            ("if" code nil nil [829946 830059])
            ("newsticker-running-p" function (:prototype-flag t) nil [830201 830438])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830440 830803])
            ("if" code nil nil [830805 830913])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831061 831156])
            ("if" code nil nil [831158 831268])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831407 831528])
            ("if" code nil nil [831530 831637])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [831776 832031])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832033 832233])
            ("if" code nil nil [832235 832342])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832487 832579])
            ("if" code nil nil [832581 832690])
            ("if" code nil nil [832815 832927])
            ("if" code nil nil [833045 833144])
            ("if" code nil nil [833262 833361])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [833479 833616])
            ("if" code nil nil [833618 833717])
            ("if" code nil nil [833829 833924])
            ("nndoc-add-type" function (:prototype-flag t) nil [834036 834384])
            ("if" code nil nil [834386 834481])
            ("if" code nil nil [834599 834698])
            ("if" code nil nil [834822 834925])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835046 835247])
            ("if" code nil nil [835249 835350])
            ("if" code nil nil [835474 835577])
            ("if" code nil nil [835698 835838])
            ("if" code nil nil [835953 836050])
            ("if" code nil nil [836159 836260])
            ("if" code nil nil [836375 836472])
            ("if" code nil nil [836596 836699])
            ("if" code nil nil [836820 836921])
            ("if" code nil nil [837036 837133])
            ("if" code nil nil [837242 837335])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837444 837572])
            ("if" code nil nil [837574 837667])
            ("if" code nil nil [837779 837874])
            ("if" code nil nil [837983 838094])
            ("if" code nil nil [838221 838326])
            ("if" code nil nil [838438 838533])
            ("if" code nil nil [838651 838771])
            ("if" code nil nil [838880 838973])
            ("if" code nil nil [839097 839200])
            ("if" code nil nil [839312 839407])
            ("if" code nil nil [839533 839644])
            ("disabled-command-function" variable (:default-value 'disabled-command-function) nil [839749 839927])
            ("disabled-command-function" function (:prototype-flag t) nil [839929 840014])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840016 840260])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840262 840493])
            ("if" code nil nil [840495 840603])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840748 841069])
            ("if" code nil nil [841071 841171])
            ("if" code nil nil [841275 841386])
            ("push" code nil nil [841492 841549])
            ("if" code nil nil [841551 841644])
            ("if" code nil nil [841765 841862])
            ("if" code nil nil [841989 842122])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [842246 844796])
            ("defalias" code nil nil [844797 844828])
            ("if" code nil nil [844830 844928])
            ("if" code nil nil [845046 845145])
            ("if" code nil nil [845272 845371])
            ("if" code nil nil [845498 845597])
            ("if" code nil nil [845718 845815])
            ("if" code nil nil [845939 846037])
            ("if" code nil nil [846144 846242])
            ("if" code nil nil [846349 846454])
            ("if" code nil nil [846561 846667])
            ("push" code nil nil [846779 846836])
            ("if" code nil nil [846838 846938])
            ("if" code nil nil [847077 847183])
            ("if" code nil nil [847296 847396])
            ("if" code nil nil [847512 847613])
            ("if" code nil nil [847738 847842])
            ("if" code nil nil [847964 848074])
            ("if" code nil nil [848187 848306])
            ("if" code nil nil [848459 848554])
            ("if" code nil nil [848667 848767])
            ("if" code nil nil [848886 848982])
            ("if" code nil nil [849095 849195])
            ("push" code nil nil [849310 849368])
            ("if" code nil nil [849370 849471])
            ("if" code nil nil [849613 849720])
            ("if" code nil nil [849836 849937])
            ("if" code nil nil [850050 850144])
            ("if" code nil nil [850263 850365])
            ("if" code nil nil [850490 850594])
            ("if" code nil nil [850719 850845])
            ("if" code nil nil [850967 851070])
            ("if" code nil nil [851195 851299])
            ("if" code nil nil [851424 851528])
            ("if" code nil nil [851638 851737])
            ("if" code nil nil [851853 851954])
            ("if" code nil nil [852064 852163])
            ("if" code nil nil [852316 852417])
            ("if" code nil nil [852536 852638])
            ("if" code nil nil [852760 852863])
            ("if" code nil nil [852991 853112])
            ("if" code nil nil [853228 853329])
            ("if" code nil nil [853479 853579])
            ("if" code nil nil [853692 853792])
            ("if" code nil nil [853920 854025])
            ("if" code nil nil [854147 854250])
            ("if" code nil nil [854372 854475])
            ("if" code nil nil [854594 854696])
            ("if" code nil nil [854818 854921])
            ("if" code nil nil [855034 855134])
            ("if" code nil nil [855250 855351])
            ("if" code nil nil [855479 855584])
            ("if" code nil nil [855712 855811])
            ("if" code nil nil [855953 856060])
            ("if" code nil nil [856182 856285])
            ("if" code nil nil [856398 856498])
            ("if" code nil nil [856614 856715])
            ("if" code nil nil [856831 856932])
            ("if" code nil nil [857054 857157])
            ("if" code nil nil [857279 857382])
            ("push" code nil nil [857494 857553])
            ("if" code nil nil [857555 857655])
            ("if" code nil nil [857774 857876])
            ("if" code nil nil [857992 858093])
            ("if" code nil nil [858206 858306])
            ("if" code nil nil [858428 858531])
            ("if" code nil nil [858647 858748])
            ("if" code nil nil [858867 858963])
            ("if" code nil nil [859122 859225])
            ("if" code nil nil [859341 859442])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859567 860013])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860015 860582])
            ("defalias" code nil nil [860584 860623])
            ("if" code nil nil [860625 860741])
            ("if" code nil nil [860874 860971])
            ("define-obsolete-function-alias" code nil nil [861099 861165])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861167 862230])
            ("if" code nil nil [862232 862331])
            ("push" code nil nil [862434 862490])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [862492 862624])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862626 862986])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862988 863298])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [863300 863390])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [863392 863496])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [863498 864372])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864374 866776])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866778 867034])
            ("put" code nil nil [867035 867103])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867105 867659])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [867661 867757])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [867759 867859])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [867861 868142])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868144 868884])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868886 869048])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869050 869393])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869395 869543])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869545 869815])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869817 870057])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870059 870406])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870408 870559])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870561 870659])
            ("if" code nil nil [870661 870773])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870898 871006])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [871008 872740])
            ("org-batch-agenda" function (:prototype-flag t) nil [872742 873180])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [873182 874964])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [874966 875067])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [875069 875214])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875216 875936])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875938 878296])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878298 878680])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878682 878896])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878898 879202])
            ("org-diary" function (:prototype-flag t) nil [879204 880367])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [880369 880562])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880564 880920])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880922 881125])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [881127 882375])
            ("if" code nil nil [882377 882475])
            ("if" code nil nil [882640 882739])
            ("if" code nil nil [882901 883006])
            ("if" code nil nil [883162 883263])
            ("if" code nil nil [883388 883486])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883614 883748])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883750 885063])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885065 885216])
            ("if" code nil nil [885218 885317])
            ("if" code nil nil [885476 885573])
            ("org-columns-remove-overlays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885701 885816])
            ("org-columns-get-format-and-top-level" function (:prototype-flag t) nil [885818 885900])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885902 886418])
            ("org-columns-compute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [886420 886626])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [886628 887752])
            ("org-columns-insert-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [887754 887876])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [887878 887984])
            ("if" code nil nil [887986 888085])
            ("org-check-version" function (:prototype-flag t) nil [888210 888320])
            ("if" code nil nil [888322 888420])
            ("if" code nil nil [888542 888639])
            ("if" code nil nil [888761 888864])
            ("if" code nil nil [889032 889141])
            ("if" code nil nil [889269 889376])
            ("org-duration-set-regexps" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [889515 889613])
            ("org-duration-p" function (:prototype-flag t) nil [889615 889719])
            ("org-duration-to-minutes" function (:prototype-flag t) nil [889721 890138])
            ("org-duration-from-minutes" function (:prototype-flag t) nil [890140 890527])
            ("org-duration-h:mm-only-p" function (:prototype-flag t) nil [890529 890916])
            ("if" code nil nil [890918 891027])
            ("if" code nil nil [891192 891299])
            ("if" code nil nil [891438 891543])
            ("if" code nil nil [891668 891773])
            ("if" code nil nil [891889 891988])
            ("if" code nil nil [892110 892207])
            ("if" code nil nil [892363 892464])
            ("if" code nil nil [892632 892741])
            ("if" code nil nil [892860 892961])
            ("if" code nil nil [893083 893180])
            ("if" code nil nil [893330 893427])
            ("if" code nil nil [893589 893687])
            ("if" code nil nil [893806 893907])
            ("if" code nil nil [894052 894165])
            ("if" code nil nil [894318 894417])
            ("org-lint" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894536 894921])
            ("if" code nil nil [894923 895024])
            ("if" code nil nil [895143 895239])
            ("if" code nil nil [895361 895464])
            ("org-load-noerror-mustsuffix" function (:prototype-flag t) nil [895583 895713])
            ("if" code nil nil [895715 895811])
            ("if" code nil nil [895927 896026])
            ("if" code nil nil [896188 896293])
            ("if" code nil nil [896415 896518])
            ("if" code nil nil [896660 896783])
            ("if" code nil nil [896939 897039])
            ("if" code nil nil [897178 897287])
            ("if" code nil nil [897409 897512])
            ("if" code nil nil [897628 897723])
            ("if" code nil nil [897882 897978])
            ("if" code nil nil [898137 898240])
            ("org-release" function (:prototype-flag t) nil [898368 898511])
            ("org-git-version" function (:prototype-flag t) nil [898513 898656])
            ("if" code nil nil [898772 898871])
            ("put" code nil nil [898978 899029])
            ("put" code nil nil [899030 899093])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [899095 900207])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [900209 900620])
            ("put" code nil nil [900621 900665])
            ("if" code nil nil [900667 900766])
            ("if" code nil nil [900904 901001])
            ("if" code nil nil [901157 901259])
            ("if" code nil nil [901418 901522])
            ("if" code nil nil [901675 901775])
            ("if" code nil nil [901943 902053])
            ("if" code nil nil [902209 902311])
            ("if" code nil nil [902461 902559])
            ("if" code nil nil [902706 902802])
            ("if" code nil nil [902952 903050])
            ("if" code nil nil [903200 903298])
            ("if" code nil nil [903460 903566])
            ("if" code nil nil [903728 903834])
            ("push" code nil nil [903963 904023])
            ("package-enable-at-startup" variable (:default-value t) nil [904025 904638])
            ("custom-autoload" code nil nil [904640 904696])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904698 905595])
            ("package-activate-all" function (:prototype-flag t) nil [905597 905757])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905759 905858])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905860 906248])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906250 906706])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906708 907203])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907205 907371])
            ("package-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907373 907567])
            ("package-reinstall" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907569 907729])
            ("package-autoremove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907731 907952])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907954 908071])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [908073 908423])
            ("defalias" code nil nil [908425 908473])
            ("if" code nil nil [908475 908628])
            ("if" code nil nil [908772 908873])
            ("if" code nil nil [909004 909203])
            ("show-paren-mode" variable nil nil [909305 909602])
            ("custom-autoload" code nil nil [909604 909650])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909652 910191])
            ("if" code nil nil [910193 910293])
            ("put" code nil nil [910435 910482])
            ("parse-time-string" function (:prototype-flag t) nil [910484 910990])
            ("if" code nil nil [910992 911092])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [911217 913209])
            ("if" code nil nil [913211 913327])
            ("password-cache" variable (:default-value t) nil [913464 913521])
            ("custom-autoload" code nil nil [913523 913575])
            ("password-cache-expiry" variable (:default-value 16) nil [913577 913752])
            ("custom-autoload" code nil nil [913754 913813])
            ("password-in-cache-p" function (:prototype-flag t) nil [913815 913916])
            ("if" code nil nil [913918 914025])
            ("pcase" function (:prototype-flag t) nil [914149 915924])
            ("function-put" code nil nil [915926 915972])
            ("pcase-exhaustive" function (:prototype-flag t) nil [915974 916164])
            ("function-put" code nil nil [916166 916223])
            ("pcase-lambda" function (:prototype-flag t) nil [916225 916525])
            ("function-put" code nil nil [916527 916574])
            ("function-put" code nil nil [916576 916633])
            ("pcase-let*" function (:prototype-flag t) nil [916635 916862])
            ("function-put" code nil nil [916864 916915])
            ("pcase-let" function (:prototype-flag t) nil [916917 917305])
            ("function-put" code nil nil [917307 917357])
            ("pcase-dolist" function (:prototype-flag t) nil [917359 917493])
            ("function-put" code nil nil [917495 917548])
            ("pcase-defmacro" function (:prototype-flag t) nil [917550 917869])
            ("function-put" code nil nil [917871 917926])
            ("function-put" code nil nil [917928 917977])
            ("if" code nil nil [917979 918074])
            ("pcomplete/cvs" function (:prototype-flag t) nil [918188 918284])
            ("if" code nil nil [918286 918389])
            ("pcomplete/gzip" function (:prototype-flag t) nil [918503 918583])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [918585 918667])
            ("pcomplete/make" function (:prototype-flag t) nil [918669 918753])
            ("pcomplete/tar" function (:prototype-flag t) nil [918755 918847])
            ("pcomplete/find" function (:prototype-flag t) nil [918849 918943])
            ("defalias" code nil nil [918945 918987])
            ("if" code nil nil [918989 919092])
            ("pcomplete/kill" function (:prototype-flag t) nil [919212 919328])
            ("pcomplete/umount" function (:prototype-flag t) nil [919330 919426])
            ("pcomplete/mount" function (:prototype-flag t) nil [919428 919522])
            ("if" code nil nil [919524 919653])
            ("pcomplete/rpm" function (:prototype-flag t) nil [919767 919857])
            ("if" code nil nil [919859 919962])
            ("pcomplete/cd" function (:prototype-flag t) nil [920079 920156])
            ("defalias" code nil nil [920158 920199])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [920201 920284])
            ("pcomplete/rm" function (:prototype-flag t) nil [920286 920363])
            ("pcomplete/xargs" function (:prototype-flag t) nil [920365 920448])
            ("defalias" code nil nil [920450 920493])
            ("pcomplete/which" function (:prototype-flag t) nil [920495 920578])
            ("pcomplete/chown" function (:prototype-flag t) nil [920580 920675])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [920677 920772])
            ("pcomplete/ssh" function (:prototype-flag t) nil [920774 920871])
            ("pcomplete/scp" function (:prototype-flag t) nil [920873 921028])
            ("if" code nil nil [921030 921130])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [921238 921330])
            ("pcomplete/ack" function (:prototype-flag t) nil [921332 921500])
            ("defalias" code nil nil [921502 921547])
            ("pcomplete/ag" function (:prototype-flag t) nil [921549 921635])
            ("if" code nil nil [921637 921736])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921850 922107])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922109 922217])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922219 922376])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922378 922492])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922494 922638])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922640 922758])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922760 922879])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [922881 923152])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [923154 923255])
            ("if" code nil nil [923257 923360])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923465 923732])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923734 924114])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924116 924624])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924626 925078])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [925080 925525])
            ("cvs-dired-action" variable (:default-value 'cvs-quickdir) nil [925527 925695])
            ("custom-autoload" code nil nil [925697 925741])
            ("cvs-dired-use-hook" variable (:default-value '(4)) nil [925743 926074])
            ("custom-autoload" code nil nil [926076 926122])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [926124 926651])
            ("if" code nil nil [926653 926762])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] `(menu-item ,(purecopy "Directory Status") cvs-status :help ,(purecopy "A more verbose status of a workarea"))) (define-key m [checkout] `(menu-item ,(purecopy "Checkout Module") cvs-checkout :help ,(purecopy "Check out a module from the repository"))) (define-key m [update] `(menu-item ,(purecopy "Update Directory") cvs-update :help ,(purecopy "Fetch updates from the repository"))) (define-key m [examine] `(menu-item ,(purecopy "Examine Directory") cvs-examine :help ,(purecopy "Examine the current state of a workarea"))) (fset 'cvs-global-menu m))) nil [926882 927559])
            ("if" code nil nil [927561 927658])
            ("if" code nil nil [927778 927875])
            ("if" code nil nil [927998 928096])
            ("if" code nil nil [928216 928313])
            ("put" code nil nil [928454 928509])
            ("put" code nil nil [928510 928579])
            ("put" code nil nil [928580 928645])
            ("put" code nil nil [928646 928701])
            ("put" code nil nil [928702 928767])
            ("put" code nil nil [928768 928823])
            ("perl-flymake" function (:prototype-flag t) nil [928825 929113])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [929115 931321])
            ("if" code nil nil [931323 931460])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [931588 935346])
            ("defalias" code nil nil [935348 935386])
            ("if" code nil nil [935388 935487])
            ("pixel-scroll-mode" variable nil nil [935610 935915])
            ("custom-autoload" code nil nil [935917 935972])
            ("pixel-scroll-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935974 936338])
            ("if" code nil nil [936340 936442])
            ("plstore-open" function (:prototype-flag t) nil [936550 936656])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936658 936747])
            ("if" code nil nil [936749 936848])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [936961 937181])
            ("if" code nil nil [937183 937272])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937381 937631])
            ("if" code nil nil [937633 937726])
            ("pop3-movemail" function (:prototype-flag t) nil [937833 937968])
            ("if" code nil nil [937970 938063])
            ("pp-to-string" function (:prototype-flag t) nil [938178 938441])
            ("pp-buffer" function (:prototype-flag t) nil [938443 938562])
            ("pp" function (:prototype-flag t) nil [938564 938870])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938872 939053])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939055 939176])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939178 939372])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939374 939582])
            ("if" code nil nil [939584 939673])
            ("push" code nil nil [939783 939844])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939846 940066])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940068 940917])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940919 941797])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941799 942653])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942655 943580])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943582 944220])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944222 944880])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944882 945516])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945518 946223])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946225 946375])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946377 946566])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946568 946721])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946723 946905])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946907 947059])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947061 947252])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947254 947409])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947411 947587])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947589 948152])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948154 948435])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948437 948718])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948720 949088])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949090 949176])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949178 949264])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949266 949354])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949356 949847])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949849 950357])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950359 950855])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950857 951387])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951389 951490])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951492 951622])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951624 951751])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951753 951850])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951852 951993])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951995 952912])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952914 953010])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953012 953270])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953272 953374])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953376 953472])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953474 953557])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953559 953631])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953633 953704])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953706 953939])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953941 954018])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954020 954101])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954103 954177])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954179 954256])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954258 954338])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954340 954432])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954434 954506])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954508 954617])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954619 954691])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954693 954797])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954799 954899])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954901 954992])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954994 955087])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955089 955177])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955179 955275])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955277 955378])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955380 955481])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955483 955580])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955582 958094])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958096 959086])
            ("if" code nil nil [959088 959195])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959300 959656])
            ("if" code nil nil [959658 959755])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959866 960140])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960142 960235])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960237 960343])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960345 960450])
            ("if" code nil nil [960452 960553])
            ("project-current" function (:prototype-flag t) nil [960681 961050])
            ("project-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961052 961536])
            ("project-or-external-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961538 961772])
            ("project-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961774 961964])
            ("project-or-external-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961966 962186])
            ("if" code nil nil [962188 962287])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962412 962819])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962821 962960])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962962 963156])
            ("if" code nil nil [963158 963274])
            ("bdf-directory-list" variable (:default-value (if (memq system-type '(ms-dos windows-nt)) (list (expand-file-name "fonts/bdf" installation-directory)) '("/usr/local/share/emacs/fonts/bdf"))) nil [963379 963667])
            ("custom-autoload" code nil nil [963669 963717])
            ("if" code nil nil [963719 963813])
            ("push" code nil nil [963940 964000])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964002 965079])
            ("if" code nil nil [965081 965175])
            ("if" code nil nil [965320 965419])
            ("push" code nil nil [965529 965590])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list 'a4 (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list 'a3 (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list 'letter (* 72 8.5) (* 72 11.0) "Letter") (list 'legal (* 72 8.5) (* 72 14.0) "Legal") (list 'letter-small (* 72 7.68) (* 72 10.16) "LetterSmall") (list 'tabloid (* 72 11.0) (* 72 17.0) "Tabloid") (list 'ledger (* 72 17.0) (* 72 11.0) "Ledger") (list 'statement (* 72 5.5) (* 72 8.5) "Statement") (list 'executive (* 72 7.5) (* 72 10.0) "Executive") (list 'a4small (* 72 7.47) (* 72 10.85) "A4Small") (list 'b4 (* 72 10.125) (* 72 14.33) "B4") (list 'b5 (* 72 7.16) (* 72 10.125) "B5") '(addresslarge 236.0 99.0 "AddressLarge") '(addresssmall 236.0 68.0 "AddressSmall") '(cuthanging13 90.0 222.0 "CutHanging13") '(cuthanging15 90.0 114.0 "CutHanging15") '(diskette 181.0 136.0 "Diskette") '(eurofilefolder 139.0 112.0 "EuropeanFilefolder") '(eurofoldernarrow 526.0 107.0 "EuroFolderNarrow") '(eurofolderwide 526.0 136.0 "EuroFolderWide") '(euronamebadge 189.0 108.0 "EuroNameBadge") '(euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge") '(filefolder 230.0 37.0 "FileFolder") '(jewelry 76.0 136.0 "Jewelry") '(mediabadge 180.0 136.0 "MediaBadge") '(multipurpose 126.0 68.0 "MultiPurpose") '(retaillabel 90.0 104.0 "RetailLabel") '(shipping 271.0 136.0 "Shipping") '(slide35mm 26.0 104.0 "Slide35mm") '(spine8mm 187.0 26.0 "Spine8mm") '(topcoated 425.19685 136.0 "TopCoatedPaper") '(topcoatedpaper 396.0 136.0 "TopcoatedPaper150") '(vhsface 205.0 127.0 "VHSFace") '(vhsspine 400.0 50.0 "VHSSpine") '(zipdisk 156.0 136.0 "ZipDisk")))) nil [965592 967297])
            ("custom-autoload" code nil nil [967299 967358])
            ("ps-paper-type" variable (:default-value 'letter) nil [967360 967549])
            ("custom-autoload" code nil nil [967551 967596])
            ("ps-print-color-p" variable (:default-value (or (fboundp 'x-color-values) (fboundp 'color-instance-rgb-components))) nil [967598 967935])
            ("custom-autoload" code nil nil [967937 967985])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967987 968078])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968080 968595])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968597 968937])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968939 969134])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969136 969484])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969486 969783])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969785 970191])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970193 970450])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970452 970862])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970864 971373])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971375 971619])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971621 971809])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971811 971998])
            ("ps-setup" function (:prototype-flag t) nil [972000 972098])
            ("ps-extend-face-list" function (:prototype-flag t) nil [972100 972597])
            ("ps-extend-face" function (:prototype-flag t) nil [972599 973686])
            ("if" code nil nil [973688 973783])
            ("if" code nil nil [973891 973985])
            ("push" code nil nil [974098 974154])
            ("pulse-momentary-highlight-one-line" function (:prototype-flag t) nil [974156 974385])
            ("pulse-momentary-highlight-region" function (:prototype-flag t) nil [974387 974618])
            ("if" code nil nil [974620 974715])
            ("if" code nil nil [974822 974915])
            ("push" code nil nil [975039 975099])
            ("add-to-list" code nil nil [975101 975178])
            ("add-to-list" code nil nil [975180 975264])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975266 976054])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976056 976163])
            ("if" code nil nil [976165 976307])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976410 976952])
            ("if" code nil nil [976954 977057])
            ("quail-title" function (:prototype-flag t) nil [977187 977284])
            ("quail-use-package" function (:prototype-flag t) nil [977286 977581])
            ("quail-define-package" function (:prototype-flag t) nil [977583 981760])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981762 982200])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982202 982437])
            ("quail-define-rules" function (:prototype-flag t) nil [982439 983910])
            ("quail-install-map" function (:prototype-flag t) nil [983912 984196])
            ("quail-install-decode-map" function (:prototype-flag t) nil [984198 984524])
            ("quail-defrule" function (:prototype-flag t) nil [984526 985794])
            ("quail-defrule-internal" function (:prototype-flag t) nil [985796 986234])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [986236 986811])
            ("if" code nil nil [986813 986908])
            ("if" code nil nil [987055 987179])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [987320 987576])
            ("if" code nil nil [987578 987703])
            ("if" code nil nil [987844 987958])
            ("if" code nil nil [988082 988187])
            ("if" code nil nil [988334 988447])
            ("if" code nil nil [988571 988699])
            ("if" code nil nil [988823 988944])
            ("if" code nil nil [989088 989220])
            ("if" code nil nil [989347 989464])
            ("if" code nil nil [989608 989725])
            ("ucs-input-activate" function (:prototype-flag t) nil [989875 990169])
            ("if" code nil nil [990171 990280])
            ("if" code nil nil [990407 990524])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'write-file-functions (lambda () (quickurl-read) nil) nil t))
;; End:
")
                nil [990643 991168])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991170 991418])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991420 991541])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991543 991773])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991775 992043])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992045 992186])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992188 992303])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992305 992482])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992484 992609])
            ("if" code nil nil [992611 992712])
            ("if" code nil nil [992859 992964])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993074 993286])
            ("defalias" code nil nil [993288 993310])
            ("rcirc-connect" function (:prototype-flag t) nil [993312 993462])
            ("rcirc-track-minor-mode" variable nil nil [993464 993789])
            ("custom-autoload" code nil nil [993791 993844])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993846 994227])
            ("if" code nil nil [994229 994373])
            ("defalias" code nil nil [994520 994558])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994560 994948])
            ("if" code nil nil [994950 995077])
            ("recentf-mode" variable nil nil [995185 995470])
            ("custom-autoload" code nil nil [995472 995517])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995519 996019])
            ("if" code nil nil [996021 996120])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996219 996647])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [996649 997024])
            ("extract-rectangle" function (:prototype-flag t) nil [997026 997227])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997229 997877])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997879 998009])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998011 998125])
            ("insert-rectangle" function (:prototype-flag t) nil [998127 998498])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998500 998934])
            ("defalias" code nil nil [998936 998992])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998994 999485])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999487 999880])
            ("defalias" code nil nil [999882 999929])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999931 1000276])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000278 1000622])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000624 1001016])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001018 1001446])
            ("if" code nil nil [1001448 1001682])
            ("if" code nil nil [1001807 1001901])
            ("if" code nil nil [1002023 1002118])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002243 1002840])
            ("if" code nil nil [1002842 1002939])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003063 1003110])
            ("reftex-all-document-files" function (:prototype-flag t) nil [1003111 1003163])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003164 1003223])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003224 1003282])
            ("turn-on-reftex" function (:prototype-flag t) nil [1003284 1003359])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003361 1005011])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [1005013 1005198])
            ("if" code nil nil [1005200 1005297])
            ("if" code nil nil [1005471 1005572])
            ("if" code nil nil [1005749 1005851])
            ("if" code nil nil [1006025 1006126])
            ("if" code nil nil [1006309 1006413])
            ("if" code nil nil [1006593 1006696])
            ("if" code nil nil [1006876 1006979])
            ("if" code nil nil [1007153 1007254])
            ("if" code nil nil [1007428 1007529])
            ("if" code nil nil [1007703 1007804])
            ("put" code nil nil [1007951 1008043])
            ("put" code nil nil [1008044 1008136])
            ("put" code nil nil [1008137 1008194])
            ("put" code nil nil [1008195 1008277])
            ("if" code nil nil [1008279 1008381])
            ("regexp-opt" function (:prototype-flag t) nil [1008528 1010090])
            ("regexp-opt-depth" function (:prototype-flag t) nil [1010092 1010287])
            ("if" code nil nil [1010289 1010394])
            ("push" code nil nil [1010514 1010569])
            ("if" code nil nil [1010571 1010664])
            ("if" code nil nil [1010775 1010876])
            ("push" code nil nil [1011006 1011065])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011067 1011344])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011346 1011458])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011460 1011626])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [1011628 1011739])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011741 1012695])
            ("if" code nil nil [1012697 1012798])
            ("push" code nil nil [1012902 1012960])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012962 1013650])
            ("if" code nil nil [1013652 1013749])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [1013870 1015076])
            ("if" code nil nil [1015078 1015179])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1015296 1016426])
            ("if" code nil nil [1016428 1016546])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016651 1017113])
            ("global-reveal-mode" variable nil nil [1017115 1017424])
            ("custom-autoload" code nil nil [1017426 1017476])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1017478 1017913])
            ("if" code nil nil [1017915 1018012])
            ("if" code nil nil [1018156 1018255])
            ("if" code nil nil [1018373 1018485])
            ("if" code nil nil [1018603 1018702])
            ("if" code nil nil [1018818 1018917])
            ("if" code nil nil [1019035 1019134])
            ("if" code nil nil [1019252 1019351])
            ("if" code nil nil [1019466 1019563])
            ("ring-p" function (:prototype-flag t) nil [1019684 1019770])
            ("make-ring" function (:prototype-flag t) nil [1019772 1019868])
            ("if" code nil nil [1019870 1019963])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1020076 1021801])
            ("if" code nil nil [1021803 1021900])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [1022012 1022095])
            ("custom-autoload" code nil nil [1022097 1022141])
            ("put" code nil nil [1022143 1022371])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type '(hpux usg-unix-v)) "/usr/mail/") (t "/usr/spool/mail/")))) nil [1022373 1022698])
            ("custom-autoload" code nil nil [1022700 1022750])
            ("custom-initialize-delay" code nil nil [1022751 1022803])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [1022805 1022998])
            ("rmail-user-mail-address-regexp" variable nil nil [1023000 1023620])
            ("custom-autoload" code nil nil [1023622 1023681])
            ("define-obsolete-variable-alias" code nil nil [1023683 1023775])
            ("rmail-default-dont-reply-to-names" variable nil nil [1023777 1023981])
            ("make-obsolete-variable" code nil nil [1023983 1024075])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^ARC-.*:" "\\|^Received-SPF:" "\\|^Authentication-Results:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [1024077 1025556])
            ("custom-autoload" code nil nil [1025558 1025608])
            ("rmail-displayed-headers" variable nil nil [1025610 1025790])
            ("custom-autoload" code nil nil [1025792 1025844])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [1025846 1026115])
            ("custom-autoload" code nil nil [1026117 1026173])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [1026175 1026385])
            ("custom-autoload" code nil nil [1026387 1026441])
            ("rmail-primary-inbox-list" variable nil nil [1026443 1026806])
            ("custom-autoload" code nil nil [1026808 1026861])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [1026863 1026970])
            ("custom-autoload" code nil nil [1026972 1027031])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [1027033 1027146])
            ("custom-autoload" code nil nil [1027148 1027204])
            ("rmail-mode-hook" variable nil nil [1027206 1027287])
            ("rmail-show-message-hook" variable nil nil [1027289 1027386])
            ("custom-autoload" code nil nil [1027388 1027440])
            ("rmail-file-coding-system" variable nil nil [1027442 1027549])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [1027551 1027923])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1027925 1028506])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028508 1031851])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031853 1031938])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031940 1032082])
            ("if" code nil nil [1032084 1032187])
            ("if" code nil nil [1032343 1032457])
            ("if" code nil nil [1032618 1032717])
            ("if" code nil nil [1032875 1032973])
            ("if" code nil nil [1033128 1033225])
            ("put" code nil nil [1033345 1033399])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1033401 1034960])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034962 1035512])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1035514 1036098])
            ("if" code nil nil [1036100 1036198])
            ("if" code nil nil [1036359 1036458])
            ("if" code nil nil [1036616 1036714])
            ("read-multiple-choice" function (:prototype-flag t) nil [1036832 1038178])
            ("rng-c-load-schema" function (:prototype-flag t) nil [1038302 1038445])
            ("if" code nil nil [1038447 1038544])
            ("if" code nil nil [1038659 1038756])
            ("if" code nil nil [1038874 1038969])
            ("if" code nil nil [1039093 1039190])
            ("if" code nil nil [1039314 1039411])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039532 1039775])
            ("if" code nil nil [1039777 1039873])
            ("if" code nil nil [1039997 1040100])
            ("if" code nil nil [1040224 1040321])
            ("if" code nil nil [1040439 1040534])
            ("if" code nil nil [1040655 1040751])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040875 1042173])
            ("if" code nil nil [1042175 1042272])
            ("put" code nil nil [1042390 1042475])
            ("rng-xsd-compile" function (:prototype-flag t) nil [1042477 1043568])
            ("if" code nil nil [1043570 1043700])
            ("robin-define-package" function (:prototype-flag t) nil [1043830 1044273])
            ("robin-modify-package" function (:prototype-flag t) nil [1044275 1044561])
            ("robin-use-package" function (:prototype-flag t) nil [1044563 1044675])
            ("if" code nil nil [1044677 1044772])
            ("rot13" function (:prototype-flag t) nil [1044874 1045160])
            ("rot13-string" function (:prototype-flag t) nil [1045162 1045255])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045257 1045382])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045384 1045756])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045758 1045869])
            ("if" code nil nil [1045871 1045966])
            ("add-to-list" code nil nil [1046082 1046151])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1046153 1046415])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1046417 1046915])
            ("if" code nil nil [1046917 1047008])
            ("if" code nil nil [1047110 1047205])
            ("push" code nil nil [1047346 1047406])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1047408 1047492])
            ("add-to-list" code nil nil [1047494 1047752])
            ("dolist" code nil nil [1047754 1047889])
            ("if" code nil nil [1047891 1047989])
            ("push" code nil nil [1048105 1048166])
            ("ruler-mode" variable nil nil [1048168 1048283])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1048285 1048642])
            ("if" code nil nil [1048644 1048744])
            ("rx-to-string" function (:prototype-flag t) nil [1048859 1049089])
            ("rx" function (:prototype-flag t) nil [1049091 1058309])
            ("if" code nil nil [1058311 1058400])
            ("if" code nil nil [1058507 1058600])
            ("if" code nil nil [1058722 1058829])
            ("if" code nil nil [1058957 1059068])
            ("push" code nil nil [1059189 1059244])
            ("if" code nil nil [1059246 1059349])
            ("if" code nil nil [1059494 1059603])
            ("push" code nil nil [1059713 1059771])
            ("savehist-mode" variable nil nil [1059773 1060062])
            ("custom-autoload" code nil nil [1060064 1060111])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060113 1060876])
            ("if" code nil nil [1060878 1060979])
            ("save-place-mode" variable nil nil [1061093 1061390])
            ("custom-autoload" code nil nil [1061392 1061442])
            ("save-place-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061444 1061929])
            ("save-place-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061931 1062581])
            ("if" code nil nil [1062583 1062720])
            ("if" code nil nil [1062831 1062952])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063077 1063908])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063910 1064356])
            ("if" code nil nil [1064358 1064464])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064591 1064750])
            ("if" code nil nil [1064752 1064871])
            ("scroll-all-mode" variable nil nil [1064988 1065285])
            ("custom-autoload" code nil nil [1065287 1065338])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1065340 1065842])
            ("if" code nil nil [1065844 1065949])
            ("if" code nil nil [1066066 1066276])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066396 1066982])
            ("if" code nil nil [1066984 1067091])
            ("when" code nil nil [1067206 1067283])
            ("if" code nil nil [1067285 1067384])
            ("push" code nil nil [1067506 1067565])
            ("semantic-default-submodes" variable (:default-value '(global-semantic-idle-scheduler-mode global-semanticdb-minor-mode)) nil [1067567 1069116])
            ("custom-autoload" code nil nil [1069118 1069175])
            ("semantic-mode" variable nil nil [1069177 1069466])
            ("custom-autoload" code nil nil [1069468 1069515])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069517 1070155])
            ("if" code nil nil [1070157 1070269])
            ("if" code nil nil [1070453 1070563])
            ("if" code nil nil [1070774 1070900])
            ("if" code nil nil [1071073 1071195])
            ("if" code nil nil [1071362 1071483])
            ("if" code nil nil [1071682 1071796])
            ("if" code nil nil [1071977 1072085])
            ("if" code nil nil [1072272 1072401])
            ("if" code nil nil [1072571 1072685])
            ("if" code nil nil [1072875 1073016])
            ("if" code nil nil [1073209 1073321])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1073497 1073611])
            ("if" code nil nil [1073613 1073727])
            ("if" code nil nil [1073923 1074052])
            ("if" code nil nil [1074245 1074357])
            ("if" code nil nil [1074506 1074619])
            ("if" code nil nil [1074806 1074916])
            ("if" code nil nil [1075091 1075197])
            ("if" code nil nil [1075366 1075472])
            ("if" code nil nil [1075630 1075742])
            ("if" code nil nil [1075906 1076031])
            ("if" code nil nil [1076180 1076307])
            ("if" code nil nil [1076491 1076602])
            ("if" code nil nil [1076786 1076897])
            ("if" code nil nil [1077087 1077200])
            ("if" code nil nil [1077373 1077508])
            ("if" code nil nil [1077692 1077803])
            ("if" code nil nil [1077955 1078069])
            ("if" code nil nil [1078268 1078384])
            ("if" code nil nil [1078562 1078675])
            ("if" code nil nil [1078833 1078943])
            ("if" code nil nil [1079154 1079283])
            ("if" code nil nil [1079485 1079635])
            ("if" code nil nil [1079807 1079975])
            ("if" code nil nil [1080147 1080255])
            ("if" code nil nil [1080422 1080539])
            ("if" code nil nil [1080714 1080820])
            ("if" code nil nil [1080995 1081101])
            ("if" code nil nil [1081282 1081390])
            ("if" code nil nil [1081530 1081633])
            ("if" code nil nil [1081788 1081897])
            ("if" code nil nil [1082061 1082185])
            ("if" code nil nil [1082360 1082485])
            ("if" code nil nil [1082654 1082761])
            ("if" code nil nil [1082939 1083050])
            ("if" code nil nil [1083225 1083398])
            ("if" code nil nil [1083576 1083683])
            ("if" code nil nil [1083829 1083935])
            ("if" code nil nil [1084107 1084225])
            ("if" code nil nil [1084409 1084540])
            ("if" code nil nil [1084739 1084889])
            ("if" code nil nil [1085029 1085136])
            ("if" code nil nil [1085314 1085421])
            ("if" code nil nil [1085605 1085737])
            ("if" code nil nil [1085912 1086018])
            ("if" code nil nil [1086199 1086314])
            ("if" code nil nil [1086516 1086653])
            ("if" code nil nil [1086826 1086948])
            ("if" code nil nil [1087150 1087287])
            ("if" code nil nil [1087483 1087603])
            ("if" code nil nil [1087808 1087947])
            ("if" code nil nil [1088143 1088263])
            ("if" code nil nil [1088435 1088540])
            ("if" code nil nil [1088727 1088851])
            ("if" code nil nil [1089032 1089140])
            ("if" code nil nil [1089330 1089451])
            ("if" code nil nil [1089626 1089732])
            ("if" code nil nil [1089878 1089984])
            ("if" code nil nil [1090177 1090289])
            ("if" code nil nil [1090441 1090569])
            ("if" code nil nil [1090736 1090847])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091023 1091137])
            ("if" code nil nil [1091139 1091253])
            ("if" code nil nil [1091464 1091608])
            ("if" code nil nil [1091822 1091985])
            ("if" code nil nil [1092187 1092329])
            ("if" code nil nil [1092502 1092644])
            ("mail-from-style" variable (:default-value 'angles) nil [1092765 1093170])
            ("custom-autoload" code nil nil [1093172 1093219])
            ("mail-specify-envelope-from" variable nil nil [1093221 1093677])
            ("custom-autoload" code nil nil [1093679 1093737])
            ("mail-self-blind" variable nil nil [1093739 1093940])
            ("custom-autoload" code nil nil [1093942 1093989])
            ("mail-interactive" variable (:default-value t) nil [1093991 1094148])
            ("custom-autoload" code nil nil [1094150 1094198])
            ("send-mail-function" variable (:default-value (if (and (boundp 'smtpmail-smtp-server) smtpmail-smtp-server) 'smtpmail-send-it 'sendmail-query-once)) nil [1094200 1094660])
            ("custom-autoload" code nil nil [1094662 1094712])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [1094714 1094856])
            ("custom-autoload" code nil nil [1094858 1094911])
            ("mail-archive-file-name" variable nil nil [1094913 1095106])
            ("custom-autoload" code nil nil [1095108 1095162])
            ("mail-default-reply-to" variable nil nil [1095164 1095363])
            ("custom-autoload" code nil nil [1095365 1095418])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [1095420 1095682])
            ("custom-autoload" code nil nil [1095684 1095740])
            ("mail-setup-hook" variable nil nil [1095742 1095840])
            ("custom-autoload" code nil nil [1095842 1095889])
            ("mail-aliases" variable (:default-value t) nil [1095891 1096197])
            ("mail-yank-prefix" variable (:default-value "> ") nil [1096199 1096368])
            ("custom-autoload" code nil nil [1096370 1096418])
            ("mail-indentation-spaces" variable (:default-value 3) nil [1096420 1096579])
            ("custom-autoload" code nil nil [1096581 1096636])
            ("mail-citation-hook" variable nil nil [1096638 1097134])
            ("custom-autoload" code nil nil [1097136 1097186])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [1097188 1097565])
            ("custom-autoload" code nil nil [1097567 1097626])
            ("mail-signature" variable (:default-value t) nil [1097628 1098076])
            ("custom-autoload" code nil nil [1098078 1098124])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [1098126 1098241])
            ("custom-autoload" code nil nil [1098243 1098294])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [1098296 1098564])
            ("custom-autoload" code nil nil [1098566 1098620])
            ("mail-default-headers" variable nil nil [1098622 1098860])
            ("custom-autoload" code nil nil [1098862 1098914])
            ("sendmail-query-once" function (:prototype-flag t) nil [1098916 1099096])
            ("define-mail-user-agent" code nil nil [1099098 1099192])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [1099194 1099377])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099379 1100507])
            ("mail-mailing-lists" variable nil nil [1100509 1100721])
            ("custom-autoload" code nil nil [1100723 1100773])
            ("sendmail-coding-system" variable nil nil [1100775 1101094])
            ("default-sendmail-coding-system" variable (:default-value 'iso-latin-1) nil [1101096 1101572])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101574 1103762])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103764 1103953])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103955 1104142])
            ("if" code nil nil [1104144 1104253])
            ("push" code nil nil [1104370 1104425])
            ("if" code nil nil [1104427 1104518])
            ("put" code nil nil [1104623 1104665])
            ("put" code nil nil [1104667 1104709])
            ("put" code nil nil [1104711 1104757])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1104759 1105600])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1105602 1105835])
            ("server-mode" variable nil nil [1105837 1106118])
            ("custom-autoload" code nil nil [1106120 1106163])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1106165 1106631])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [1106633 1106948])
            ("if" code nil nil [1106950 1107047])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1107143 1108592])
            ("if" code nil nil [1108594 1108704])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1108846 1109567])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1109569 1111378])
            ("if" code nil nil [1111380 1111486])
            ("push" code nil nil [1111627 1111689])
            ("put" code nil nil [1111690 1111735])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1111737 1114317])
            ("defalias" code nil nil [1114319 1114357])
            ("if" code nil nil [1114359 1114455])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1114582 1116523])
            ("if" code nil nil [1116525 1116633])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116750 1117190])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1117192 1117533])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1117535 1117991])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1117993 1118075])
            ("if" code nil nil [1118077 1118177])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [1118279 1118630])
            ("custom-autoload" code nil nil [1118632 1118684])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118686 1120346])
            ("if" code nil nil [1120348 1120462])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120566 1120709])
            ("shr-insert-document" function (:prototype-flag t) nil [1120711 1120909])
            ("if" code nil nil [1120911 1121002])
            ("if" code nil nil [1121124 1121227])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121337 1121409])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121411 1121476])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121478 1121552])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121554 1121628])
            ("if" code nil nil [1121630 1121725])
            ("if" code nil nil [1121864 1121966])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1122091 1122434])
            ("if" code nil nil [1122436 1122536])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1122661 1124806])
            ("if" code nil nil [1124808 1124905])
            ("skeleton-filter-function" variable (:default-value 'identity) nil [1125016 1125133])
            ("define-skeleton" function (:prototype-flag t) nil [1125135 1125382])
            ("function-put" code nil nil [1125384 1125434])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [1125436 1126018])
            ("skeleton-insert" function (:prototype-flag t) nil [1126020 1129562])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129564 1130290])
            ("if" code nil nil [1130292 1130393])
            ("smerge-refine-regions" function (:prototype-flag t) nil [1130519 1131452])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131454 1131672])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131674 1132064])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1132066 1132247])
            ("if" code nil nil [1132249 1132351])
            ("if" code nil nil [1132472 1132565])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1132680 1132850])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1132852 1133053])
            ("if" code nil nil [1133055 1133177])
            ("if" code nil nil [1133289 1133383])
            ("smtpmail-send-it" function (:prototype-flag t) nil [1133504 1133563])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1133565 1133702])
            ("if" code nil nil [1133704 1133805])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1133917 1134481])
            ("if" code nil nil [1134483 1134578])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1134700 1135077])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135079 1135462])
            ("if" code nil nil [1135464 1135561])
            ("push" code nil nil [1135688 1135752])
            ("if" code nil nil [1135754 1135854])
            ("if" code nil nil [1135993 1136094])
            ("if" code nil nil [1136204 1136299])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1136419 1136813])
            ("if" code nil nil [1136815 1136945])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1137069 1138733])
            ("if" code nil nil [1138735 1138838])
            ("put" code nil nil [1138936 1138988])
            ("sort-subr" function (:prototype-flag t) nil [1138990 1141141])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141143 1141483])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141485 1141835])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141837 1142177])
            ("put" code nil nil [1142178 1142233])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142235 1142812])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142814 1143272])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143274 1144385])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144387 1145180])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145182 1145345])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145347 1146292])
            ("if" code nil nil [1146294 1146387])
            ("if" code nil nil [1146495 1146593])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146702 1147062])
            ("if" code nil nil [1147064 1147157])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147295 1147624])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [1147626 1147849])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [1147851 1148056])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148058 1148309])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148311 1148507])
            ("if" code nil nil [1148509 1148616])
            ("if" code nil nil [1148740 1148875])
            ("if" code nil nil [1148999 1149097])
            ("defalias" code nil nil [1149208 1149249])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149251 1149710])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149712 1149958])
            ("if" code nil nil [1149960 1150061])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150173 1150271])
            ("snarf-spooks" function (:prototype-flag t) nil [1150273 1150388])
            ("if" code nil nil [1150390 1150491])
            ("push" code nil nil [1150606 1150660])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [1150662 1151400])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151402 1152494])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152496 1152822])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152824 1153379])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1153381 1154606])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154608 1155844])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155846 1156964])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156966 1158220])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158222 1159498])
            ("sql-mariadb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1159500 1160770])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160772 1161905])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1161907 1163010])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1163012 1164231])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1164233 1165728])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1165730 1166883])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166885 1168212])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1168214 1169425])
            ("sql-vertica" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1169427 1169523])
            ("if" code nil nil [1169525 1169616])
            ("push" code nil nil [1169735 1169793])
            ("if" code nil nil [1169795 1169901])
            ("if" code nil nil [1170044 1170148])
            ("if" code nil nil [1170329 1170436])
            ("if" code nil nil [1170605 1170708])
            ("if" code nil nil [1170851 1170955])
            ("if" code nil nil [1171116 1171226])
            ("if" code nil nil [1171410 1171527])
            ("if" code nil nil [1171693 1171821])
            ("if" code nil nil [1172014 1172125])
            ("if" code nil nil [1172277 1172391])
            ("if" code nil nil [1172540 1172646])
            ("if" code nil nil [1172798 1172919])
            ("if" code nil nil [1173062 1173166])
            ("if" code nil nil [1173344 1173450])
            ("if" code nil nil [1173628 1173734])
            ("if" code nil nil [1173903 1174006])
            ("if" code nil nil [1174178 1174282])
            ("if" code nil nil [1174437 1174554])
            ("if" code nil nil [1174723 1174831])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174986 1175094])
            ("defalias" code nil nil [1175096 1175139])
            ("if" code nil nil [1175141 1175261])
            ("if" code nil nil [1175407 1175531])
            ("if" code nil nil [1175715 1175838])
            ("if" code nil nil [1176010 1176149])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176257 1176691])
            ("strokes-read-stroke" function (:prototype-flag t) nil [1176693 1177129])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [1177131 1177610])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177612 1177776])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177778 1177951])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177953 1178095])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178097 1178194])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178196 1178321])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178323 1178669])
            ("strokes-mode" variable nil nil [1178671 1178956])
            ("custom-autoload" code nil nil [1178958 1179003])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1179005 1179866])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1179868 1180137])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180139 1180276])
            ("if" code nil nil [1180278 1180377])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180492 1180581])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180583 1180709])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180711 1180798])
            ("if" code nil nil [1180925 1181090])
            ("define-obsolete-function-alias" code nil nil [1181218 1181295])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1181297 1182476])
            ("global-subword-mode" variable nil nil [1182478 1182791])
            ("custom-autoload" code nil nil [1182793 1182845])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182847 1183254])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1183256 1183864])
            ("global-superword-mode" variable nil nil [1183866 1184187])
            ("custom-autoload" code nil nil [1184189 1184243])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184245 1184666])
            ("if" code nil nil [1184668 1184788])
            ("sc-cite-original" function (:prototype-flag t) nil [1184912 1185913])
            ("if" code nil nil [1185915 1186011])
            ("if" code nil nil [1186107 1186198])
            ("define-obsolete-function-alias" code nil nil [1186306 1186375])
            ("gpm-mouse-mode" variable (:default-value t) nil [1186377 1186668])
            ("custom-autoload" code nil nil [1186670 1186717])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186719 1187453])
            ("if" code nil nil [1187455 1187556])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1187661 1188056])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188058 1188552])
            ("if" code nil nil [1188554 1188657])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188779 1193879])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193881 1194208])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194210 1194562])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194564 1194715])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194717 1195086])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195088 1195143])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195145 1195483])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195485 1195555])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195557 1195821])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195823 1195884])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195886 1196351])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1196353 1196413])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1196415 1196853])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1196855 1197347])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197349 1197596])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197598 1197822])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197824 1199698])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199700 1199916])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199918 1200089])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200091 1200252])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200254 1200435])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200437 1200596])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200598 1200855])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200857 1201224])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1201226 1201429])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1201431 1201640])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1201642 1202421])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1202423 1203179])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1203181 1204348])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1204350 1205985])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1205987 1206238])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206240 1206511])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206513 1211654])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1211656 1211964])
            ("if" code nil nil [1211966 1212072])
            ("push" code nil nil [1212230 1212295])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212394 1212503])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212505 1212618])
            ("if" code nil nil [1212620 1212713])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212824 1213603])
            ("if" code nil nil [1213605 1213701])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213817 1214881])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1214883 1215084])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215086 1215278])
            ("if" code nil nil [1215280 1215473])
            ("if" code nil nil [1215620 1215726])
            ("if" code nil nil [1215885 1216000])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1216113 1216716])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1216718 1216950])
            ("if" code nil nil [1216952 1217074])
            ("if" code nil nil [1217176 1217271])
            ("make-term" function (:prototype-flag t) nil [1217370 1217789])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1217791 1218038])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218040 1218286])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218288 1218862])
            ("if" code nil nil [1218864 1219019])
            ("testcover-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219163 1219403])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219405 1219506])
            ("if" code nil nil [1219508 1219611])
            ("push" code nil nil [1219725 1219782])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219784 1220521])
            ("if" code nil nil [1220523 1220620])
            ("tex-shell-file-name" variable nil nil [1220751 1220859])
            ("custom-autoload" code nil nil [1220861 1220912])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1220914 1221201])
            ("custom-autoload" code nil nil [1221203 1221248])
            ("tex-first-line-header-regexp" variable nil nil [1221250 1221527])
            ("custom-autoload" code nil nil [1221529 1221589])
            ("tex-main-file" variable nil nil [1221591 1221782])
            ("custom-autoload" code nil nil [1221784 1221829])
            ("tex-offer-save" variable (:default-value t) nil [1221831 1221934])
            ("custom-autoload" code nil nil [1221936 1221982])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [1221984 1222145])
            ("custom-autoload" code nil nil [1222147 1222194])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [1222196 1222365])
            ("custom-autoload" code nil nil [1222367 1222416])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [1222418 1222591])
            ("custom-autoload" code nil nil [1222593 1222643])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [1222645 1222941])
            ("custom-autoload" code nil nil [1222943 1222992])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [1222994 1223249])
            ("custom-autoload" code nil nil [1223251 1223301])
            ("latex-block-names" variable nil nil [1223303 1223439])
            ("custom-autoload" code nil nil [1223441 1223490])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [1223492 1223751])
            ("custom-autoload" code nil nil [1223753 1223803])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1223805 1224055])
            ("custom-autoload" code nil nil [1224057 1224110])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1224112 1224724])
            ("custom-autoload" code nil nil [1224726 1224783])
            ("tex-dvi-view-command" variable (:default-value `(cond ((eq window-system 'x) ,(purecopy "xdvi")) ((eq window-system 'w32) ,(purecopy "yap")) (t ,(purecopy "dvi2tty * | cat -s")))) nil [1224785 1225275])
            ("custom-autoload" code nil nil [1225277 1225329])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [1225331 1225507])
            ("custom-autoload" code nil nil [1225509 1225563])
            ("tex-default-mode" variable (:default-value 'latex-mode) nil [1225565 1225863])
            ("custom-autoload" code nil nil [1225865 1225913])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1225915 1226026])
            ("custom-autoload" code nil nil [1226028 1226074])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1226076 1226189])
            ("custom-autoload" code nil nil [1226191 1226238])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226240 1226672])
            ("defalias" code nil nil [1226674 1226704])
            ("defalias" code nil nil [1226706 1226748])
            ("defalias" code nil nil [1226750 1226784])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226786 1228531])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1228533 1230237])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1230239 1232012])
            ("tex-start-shell" function (:prototype-flag t) nil [1232014 1232072])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232074 1232158])
            ("if" code nil nil [1232160 1232306])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232437 1232863])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232865 1233206])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1233208 1233835])
            ("if" code nil nil [1233837 1233958])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1234086 1234205])
            ("custom-autoload" code nil nil [1234207 1234256])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1234258 1234379])
            ("custom-autoload" code nil nil [1234381 1234431])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234433 1237256])
            ("if" code nil nil [1237258 1237357])
            ("if" code nil nil [1237502 1237604])
            ("if" code nil nil [1237781 1237899])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238039 1238252])
            ("thai-compose-string" function (:prototype-flag t) nil [1238254 1238390])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238392 1238499])
            ("thai-composition-function" function (:prototype-flag t) nil [1238501 1238578])
            ("if" code nil nil [1238580 1238763])
            ("if" code nil nil [1238903 1239001])
            ("forward-thing" function (:prototype-flag t) nil [1239115 1239439])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1239441 1239954])
            ("thing-at-point" function (:prototype-flag t) nil [1239956 1240473])
            ("sexp-at-point" function (:prototype-flag t) nil [1240475 1240582])
            ("symbol-at-point" function (:prototype-flag t) nil [1240584 1240695])
            ("number-at-point" function (:prototype-flag t) nil [1240697 1240808])
            ("list-at-point" function (:prototype-flag t) nil [1240810 1240922])
            ("if" code nil nil [1240924 1241166])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241271 1241361])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241363 1241603])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241605 1241717])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241719 1241842])
            ("defalias" code nil nil [1241844 1241884])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241886 1242002])
            ("if" code nil nil [1242004 1242101])
            ("push" code nil nil [1242224 1242280])
            ("if" code nil nil [1242282 1242377])
            ("tibetan-char-p" function (:prototype-flag t) nil [1242520 1242678])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1242680 1242833])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1242835 1243029])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1243031 1243129])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243131 1243248])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243250 1243509])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1243511 1243748])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243750 1243954])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243956 1244132])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1244134 1244211])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1244213 1244294])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1244296 1244391])
            ("if" code nil nil [1244393 1244495])
            ("push" code nil nil [1244622 1244682])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1244684 1245146])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1245148 1245590])
            ("tildify-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1245592 1246449])
            ("tildify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1246451 1247304])
            ("if" code nil nil [1247306 1247405])
            ("display-time-day-and-date" variable nil nil [1247504 1247622])
            ("custom-autoload" code nil nil [1247624 1247677])
            ("put" code nil nil [1247678 1247728])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1247730 1248048])
            ("display-time-mode" variable nil nil [1248050 1248355])
            ("custom-autoload" code nil nil [1248357 1248404])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1248406 1249097])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249099 1249324])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249326 1249584])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249586 1249702])
            ("if" code nil nil [1249704 1249886])
            ("date-to-time" function (:prototype-flag t) nil [1250026 1250211])
            ("defalias" code nil nil [1250213 1250252])
            ("seconds-to-time" function (:prototype-flag t) nil [1250254 1250353])
            ("days-to-time" function (:prototype-flag t) nil [1250355 1250447])
            ("time-since" function (:prototype-flag t) nil [1250449 1250601])
            ("define-obsolete-function-alias" code nil nil [1250603 1250672])
            ("date-to-day" function (:prototype-flag t) nil [1250674 1250819])
            ("days-between" function (:prototype-flag t) nil [1250821 1250984])
            ("date-leap-year-p" function (:prototype-flag t) nil [1250986 1251083])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1251085 1251213])
            ("time-to-days" function (:prototype-flag t) nil [1251215 1251433])
            ("safe-date-to-time" function (:prototype-flag t) nil [1251435 1251625])
            ("format-seconds" function (:prototype-flag t) nil [1251627 1252581])
            ("seconds-to-string" function (:prototype-flag t) nil [1252583 1252705])
            ("if" code nil nil [1252707 1252871])
            ("put" code nil nil [1252987 1253041])
            ("put" code nil nil [1253042 1253108])
            ("put" code nil nil [1253109 1253168])
            ("put" code nil nil [1253169 1253222])
            ("put" code nil nil [1253223 1253274])
            ("put" code nil nil [1253275 1253336])
            ("put" code nil nil [1253337 1253391])
            ("put" code nil nil [1253392 1253447])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1253449 1254391])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254393 1254614])
            ("if" code nil nil [1254616 1254721])
            ("push" code nil nil [1254860 1254922])
            ("timeclock-mode-line-display" variable nil nil [1254924 1255274])
            ("custom-autoload" code nil nil [1255276 1255338])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255340 1255905])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255907 1256673])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1256675 1257150])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1257152 1257489])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1257491 1257831])
            ("timeclock-query-out" function (:prototype-flag t) nil [1257833 1258000])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258002 1258169])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258171 1258567])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258569 1258865])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258867 1259284])
            ("if" code nil nil [1259286 1259389])
            ("list-timers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1259536 1259651])
            ("put" code nil nil [1259653 1259746])
            ("if" code nil nil [1259748 1259853])
            ("if" code nil nil [1259964 1260065])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1260218 1260471])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1260473 1260929])
            ("if" code nil nil [1260931 1261142])
            ("define-key" code nil nil [1261238 1261281])
            ("define-key" code nil nil [1261283 1261344])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261346 1261841])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261843 1262125])
            ("tmm-prompt" function (:prototype-flag t) nil [1262127 1262756])
            ("if" code nil nil [1262758 1262849])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1262989 1264869])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1264871 1265002])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1265004 1265130])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1265132 1265289])
            ("if" code nil nil [1265291 1265389])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1265500 1265696])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1265698 1266463])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1266465 1267106])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1267108 1267817])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1267819 1268385])
            ("if" code nil nil [1268387 1268488])
            ("if" code nil nil [1268596 1268695])
            ("tq-create" function (:prototype-flag t) nil [1268810 1269098])
            ("if" code nil nil [1269100 1269189])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1269313 1269403])
            ("custom-autoload" code nil nil [1269405 1269446])
            ("trace-values" function (:prototype-flag t) nil [1269448 1269623])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1269625 1270509])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1270511 1270771])
            ("defalias" code nil nil [1270773 1270826])
            ("if" code nil nil [1270828 1270950])
            ("tramp-mode" variable (:default-value t) nil [1271060 1271174])
            ("custom-autoload" code nil nil [1271176 1271215])
            ("tramp-initial-file-name-regexp" variable
               (:constant-flag t
                :default-value "\\`/.+:.*:")
                nil [1271217 1271375])
            ("tramp-file-name-regexp" variable (:default-value tramp-initial-file-name-regexp) nil [1271377 1271694])
            ("tramp-ignored-file-name-regexp" variable nil nil [1271696 1271818])
            ("custom-autoload" code nil nil [1271820 1271879])
            ("tramp-autoload-file-name-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`/" (if (memq system-type '(cygwin windows-nt)) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") ":"))
                nil [1271881 1272249])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1272251 1272532])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1272534 1272833])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1272835 1272879])
            ("tramp-unload-file-name-handlers" function nil nil [1272881 1273248])
            ("tramp-completion-mode" variable nil nil [1273250 1273364])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1273366 1273462])
            ("if" code nil nil [1273464 1273567])
            ("if" code nil nil [1273689 1273788])
            ("tramp-archive-enabled" variable (:default-value (featurep 'dbusbind)) nil [1273930 1274033])
            ("tramp-archive-suffixes" variable
               (:constant-flag t
                :default-value '("7z" "apk" "ar" "cab" "CAB" "cpio" "deb" "depot" "exe" "iso" "jar" "lzh" "LZH" "msu" "MSU" "mtree" "odb" "odf" "odg" "odp" "ods" "odt" "pax" "rar" "rpm" "shar" "tar" "tbz" "tgz" "tlz" "txz" "warc" "xar" "xpi" "xps" "zip" "ZIP"))
                nil [1274035 1274389])
            ("tramp-archive-compression-suffixes" variable
               (:constant-flag t
                :default-value '("bz2" "gz" "lrz" "lz" "lz4" "lzma" "lzo" "uu" "xz" "Z"))
                nil [1274391 1274588])
            ("tramp-archive-autoload-file-name-regexp" function nil nil [1274590 1274867])
            ("tramp-register-archive-file-name-handler" function nil nil [1274869 1275189])
            ("add-hook" code nil nil [1275191 1275260])
            ("add-hook" code nil nil [1275262 1275385])
            ("if" code nil nil [1275387 1275528])
            ("if" code nil nil [1275656 1275757])
            ("if" code nil nil [1275882 1275982])
            ("if" code nil nil [1276121 1276223])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1276345 1276456])
            ("if" code nil nil [1276458 1276557])
            ("if" code nil nil [1276682 1276801])
            ("if" code nil nil [1276920 1277018])
            ("if" code nil nil [1277140 1277243])
            ("if" code nil nil [1277362 1277462])
            ("push" code nil nil [1277580 1277638])
            ("if" code nil nil [1277640 1277738])
            ("if" code nil nil [1277858 1277965])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1278076 1278862])
            ("if" code nil nil [1278864 1278999])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1279125 1279223])
            ("if" code nil nil [1279225 1279325])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279470 1279518])
            ("global-set-key" code nil nil [1279520 1279556])
            ("global-set-key" code nil nil [1279558 1279591])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279593 1280056])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280058 1280317])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280319 1281105])
            ("if" code nil nil [1281107 1281204])
            ("type-break-mode" variable nil nil [1281321 1281618])
            ("custom-autoload" code nil nil [1281620 1281671])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1281673 1285412])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1285414 1285695])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1285697 1285969])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1285971 1287250])
            ("if" code nil nil [1287252 1287365])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1287471 1287782])
            ("if" code nil nil [1287784 1287875])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1288037 1288163])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1288165 1288285])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1288287 1288413])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1288415 1288535])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1288537 1288665])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1288667 1288789])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1288791 1288919])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1288921 1289043])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1289045 1289197])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1289199 1289345])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1289347 1289499])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1289501 1289647])
            ("if" code nil nil [1289649 1289772])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1289914 1290159])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1290161 1290387])
            ("if" code nil nil [1290545 1290643])
            ("batch-unrmail" function (:prototype-flag t) nil [1290761 1291088])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1291090 1291288])
            ("if" code nil nil [1291290 1291400])
            ("unsafep" function (:prototype-flag t) nil [1291530 1291771])
            ("if" code nil nil [1291773 1291889])
            ("url-retrieve" function (:prototype-flag t) nil [1291993 1293481])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1293483 1294060])
            ("if" code nil nil [1294062 1294153])
            ("if" code nil nil [1294275 1294372])
            ("url-get-authentication" function (:prototype-flag t) nil [1294491 1295658])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1295660 1296341])
            ("if" code nil nil [1296343 1296439])
            ("url-store-in-cache" function (:prototype-flag t) nil [1296561 1296669])
            ("url-is-cached" function (:prototype-flag t) nil [1296671 1296841])
            ("url-cache-extract" function (:prototype-flag t) nil [1296843 1296948])
            ("if" code nil nil [1296950 1297047])
            ("url-cid" function (:prototype-flag t) nil [1297163 1297216])
            ("if" code nil nil [1297218 1297321])
            ("if" code nil nil [1297446 1297550])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1297666 1297819])
            ("url-dav-request" function (:prototype-flag t) nil [1297821 1298604])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1298606 1298673])
            ("if" code nil nil [1298675 1298770])
            ("if" code nil nil [1298892 1298989])
            ("if" code nil nil [1299114 1299219])
            ("if" code nil nil [1299344 1299442])
            ("url-file" function (:prototype-flag t) nil [1299561 1299659])
            ("if" code nil nil [1299661 1299762])
            ("if" code nil nil [1299878 1299976])
            ("if" code nil nil [1300101 1300206])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1300319 1300449])
            ("url-open-stream" function (:prototype-flag t) nil [1300451 1300877])
            ("if" code nil nil [1300879 1300973])
            ("url-handler-mode" variable nil nil [1301112 1301413])
            ("custom-autoload" code nil nil [1301415 1301469])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1301471 1301854])
            ("url-file-handler" function (:prototype-flag t) nil [1301856 1302125])
            ("url-copy-file" function (:prototype-flag t) nil [1302127 1302781])
            ("url-file-local-copy" function (:prototype-flag t) nil [1302783 1302990])
            ("url-insert-buffer-contents" function (:prototype-flag t) nil [1302992 1303271])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1303273 1303380])
            ("if" code nil nil [1303382 1303482])
            ("if" code nil nil [1303610 1303709])
            ("url-default-expander" function (:prototype-flag t) nil [1303828 1303873])
            ("defalias" code nil nil [1303875 1303935])
            ("url-https" function (:prototype-flag t) nil [1303937 1303969])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1303971 1304017])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1304019 1304067])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1304069 1304117])
            ("if" code nil nil [1304119 1304216])
            ("if" code nil nil [1304335 1304435])
            ("url-irc" function (:prototype-flag t) nil [1304551 1304604])
            ("if" code nil nil [1304606 1304705])
            ("url-ldap" function (:prototype-flag t) nil [1304824 1305077])
            ("if" code nil nil [1305079 1305180])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1305305 1305367])
            ("url-mailto" function (:prototype-flag t) nil [1305369 1305458])
            ("if" code nil nil [1305460 1305573])
            ("if" code nil nil [1305701 1305807])
            ("url-man" function (:prototype-flag t) nil [1305926 1306009])
            ("url-info" function (:prototype-flag t) nil [1306011 1306087])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1306089 1306163])
            ("defalias" code nil nil [1306165 1306216])
            ("defalias" code nil nil [1306218 1306269])
            ("defalias" code nil nil [1306271 1306322])
            ("url-data" function (:prototype-flag t) nil [1306324 1306407])
            ("if" code nil nil [1306409 1306525])
            ("url-news" function (:prototype-flag t) nil [1306644 1306699])
            ("url-snews" function (:prototype-flag t) nil [1306701 1306757])
            ("if" code nil nil [1306759 1306860])
            ("if" code nil nil [1306976 1307074])
            ("isPlainHostName" function (:prototype-flag t) nil [1307187 1307248])
            ("dnsDomainIs" function (:prototype-flag t) nil [1307250 1307311])
            ("dnsResolve" function (:prototype-flag t) nil [1307313 1307369])
            ("isResolvable" function (:prototype-flag t) nil [1307371 1307429])
            ("isInNet" function (:prototype-flag t) nil [1307431 1307491])
            ("url-ns-prefs" function (:prototype-flag t) nil [1307493 1307561])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1307563 1307642])
            ("if" code nil nil [1307644 1307741])
            ("url-recreate-url" function (:prototype-flag t) nil [1307863 1307975])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1307977 1309424])
            ("if" code nil nil [1309426 1309523])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1309651 1309776])
            ("if" code nil nil [1309778 1309888])
            ("if" code nil nil [1310010 1310107])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1310229 1310667])
            ("if" code nil nil [1310669 1310771])
            ("url-tramp-protocols" variable (:default-value '("ftp" "ssh" "scp" "rsync" "telnet")) nil [1310893 1311076])
            ("custom-autoload" code nil nil [1311078 1311130])
            ("url-tramp-file-handler" function (:prototype-flag t) nil [1311132 1311381])
            ("if" code nil nil [1311383 1311494])
            ("url-debug" variable nil nil [1311613 1311921])
            ("custom-autoload" code nil nil [1311923 1311964])
            ("url-debug" function (:prototype-flag t) nil [1311966 1312033])
            ("url-parse-args" function (:prototype-flag t) nil [1312035 1312117])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1312119 1312536])
            ("url-normalize-url" function (:prototype-flag t) nil [1312538 1312679])
            ("url-lazy-message" function (:prototype-flag t) nil [1312681 1312871])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1312873 1313023])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1313025 1313134])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1313136 1313244])
            ("url-display-percentage" function (:prototype-flag t) nil [1313246 1313331])
            ("url-percentage" function (:prototype-flag t) nil [1313333 1313394])
            ("defalias" code nil nil [1313396 1313440])
            ("url-file-directory" function (:prototype-flag t) nil [1313442 1313553])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1313555 1313672])
            ("url-parse-query-string" function (:prototype-flag t) nil [1313674 1313779])
            ("url-build-query-string" function (:prototype-flag t) nil [1313781 1314404])
            ("url-unhex-string" function (:prototype-flag t) nil [1314406 1314709])
            ("url-hexify-string" function (:prototype-flag t) nil [1314711 1315336])
            ("url-encode-url" function (:prototype-flag t) nil [1315338 1315651])
            ("url-file-extension" function (:prototype-flag t) nil [1315653 1315870])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1315872 1316078])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1316080 1316329])
            ("url-domain" function (:prototype-flag t) nil [1316331 1316565])
            ("if" code nil nil [1316567 1316663])
            ("if" code nil nil [1316782 1316878])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1316989 1317466])
            ("userlock--ask-user-about-supersession-threat" function (:prototype-flag t) nil [1317468 1317558])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1317560 1318066])
            ("if" code nil nil [1318068 1318219])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1318349 1318419])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1318421 1318496])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1318498 1318572])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1318574 1318653])
            ("if" code nil nil [1318655 1318750])
            ("utf7-encode" function (:prototype-flag t) nil [1318877 1319020])
            ("if" code nil nil [1319022 1319115])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319236 1319516])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319518 1319747])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1319749 1319937])
            ("if" code nil nil [1319939 1320040])
            ("vc-checkout-hook" variable nil nil [1320139 1320252])
            ("custom-autoload" code nil nil [1320254 1320296])
            ("vc-checkin-hook" variable nil nil [1320298 1320427])
            ("custom-autoload" code nil nil [1320429 1320470])
            ("vc-before-checkin-hook" variable nil nil [1320472 1320599])
            ("custom-autoload" code nil nil [1320601 1320649])
            ("vc-responsible-backend" function (:prototype-flag t) nil [1320651 1321115])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1321117 1322254])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322256 1322921])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322923 1323061])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1323063 1323452])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1323454 1323609])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1323611 1324013])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1324015 1324443])
            ("vc-root-dir" function (:prototype-flag t) nil [1324445 1324598])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1324600 1324857])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1324859 1325069])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325071 1325750])
            ("vc-message-unresolved-conflicts" function (:prototype-flag t) nil [1325752 1325891])
            ("defalias" code nil nil [1325893 1325939])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325941 1326274])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1326276 1326873])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1326875 1327293])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327295 1327629])
            ("vc-print-branch-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327631 1327735])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327737 1327978])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327980 1328215])
            ("vc-region-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1328217 1328395])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1328397 1328640])
            ("define-obsolete-function-alias" code nil nil [1328642 1328710])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1328712 1329395])
            ("defalias" code nil nil [1329397 1329427])
            ("vc-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1329429 1329917])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1329919 1330343])
            ("vc-transfer-file" function (:prototype-flag t) nil [1330345 1330956])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1330958 1331186])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1331188 1331424])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1331426 1332039])
            ("vc-branch-part" function (:prototype-flag t) nil [1332041 1332144])
            ("if" code nil nil [1332146 1332256])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1332382 1333960])
            ("if" code nil nil [1333962 1334060])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1334171 1334275])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1334277 1334419])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1334421 1334591])
            ("if" code nil nil [1334593 1334690])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1334800 1335028])
            ("if" code nil nil [1335030 1335127])
            ("if" code nil nil [1335238 1335335])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1335446 1336167])
            ("if" code nil nil [1336169 1336262])
            ("vc-do-command" function (:prototype-flag t) nil [1336402 1337371])
            ("if" code nil nil [1337373 1337473])
            ("if" code nil nil [1337599 1337697])
            ("vc-git-registered" function (:arguments ("file")) nil [1337808 1338021])
            ("if" code nil nil [1338023 1338120])
            ("vc-hg-registered" function (:arguments ("file")) nil [1338228 1338435])
            ("if" code nil nil [1338437 1338532])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1338643 1338713])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1338715 1338831])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1338833 1338989])
            ("if" code nil nil [1338991 1339088])
            ("vc-rcs-master-templates" variable (:default-value (purecopy '("%sRCS/%s,v" "%s%s,v" "%sRCS/%s"))) nil [1339199 1339389])
            ("custom-autoload" code nil nil [1339391 1339444])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1339446 1339506])
            ("if" code nil nil [1339508 1339602])
            ("vc-sccs-master-templates" variable (:default-value (purecopy '("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir))) nil [1339716 1339925])
            ("custom-autoload" code nil nil [1339927 1339982])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1339984 1340046])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1340048 1340731])
            ("if" code nil nil [1340733 1340832])
            ("vc-src-master-templates" variable (:default-value (purecopy '("%s.src/%s,v"))) nil [1340943 1341114])
            ("custom-autoload" code nil nil [1341116 1341169])
            ("vc-src-registered" function (:arguments ("f")) nil [1341171 1341231])
            ("if" code nil nil [1341233 1341330])
            ("vc-svn-registered" function (:arguments ("f")) nil [1341441 1341762])
            ("if" code nil nil [1341764 1341861])
            ("if" code nil nil [1341969 1342068])
            ("push" code nil nil [1342209 1342270])
            ("add-to-list" code nil nil [1342272 1342348])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1342350 1344072])
            ("if" code nil nil [1344074 1344172])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1344323 1350943])
            ("if" code nil nil [1350945 1351075])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1351217 1376837])
            ("if" code nil nil [1376839 1376937])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1377077 1377201])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1377203 1377469])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1377471 1377608])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1377610 1377876])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1377878 1378015])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1378017 1378090])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1378092 1378169])
            ("if" code nil nil [1378171 1378293])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1378392 1378560])
            ("custom-autoload" code nil nil [1378562 1378619])
            ("view-mode" variable nil nil [1378621 1378794])
            ("make-variable-buffer-local" code nil nil [1378796 1378835])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1378837 1378970])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1378972 1379422])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1379424 1380001])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1380003 1380596])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1380598 1381688])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1381690 1382578])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1382580 1383466])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1383468 1388419])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1388421 1388965])
            ("make-obsolete" code nil nil [1388967 1389051])
            ("view-mode-enter" function (:prototype-flag t) nil [1389053 1389721])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1389723 1389830])
            ("if" code nil nil [1389832 1389933])
            ("push" code nil nil [1390054 1390113])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1390115 1390248])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1390250 1390365])
            ("if" code nil nil [1390367 1390530])
            ("if" code nil nil [1390672 1390771])
            ("if" code nil nil [1390902 1391006])
            ("if" code nil nil [1391151 1391251])
            ("if" code nil nil [1391396 1391519])
            ("if" code nil nil [1391664 1391770])
            ("if" code nil nil [1391915 1392015])
            ("if" code nil nil [1392160 1392259])
            ("if" code nil nil [1392376 1392473])
            ("if" code nil nil [1392587 1392684])
            ("if" code nil nil [1392792 1392887])
            ("if" code nil nil [1392998 1393094])
            ("warning-prefix-function" variable nil nil [1393235 1393632])
            ("warning-series" variable nil nil [1393634 1394072])
            ("warning-fill-prefix" variable nil nil [1394074 1394183])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1394185 1394424])
            ("display-warning" function (:prototype-flag t) nil [1394426 1395672])
            ("lwarn" function (:prototype-flag t) nil [1395674 1396533])
            ("warn" function (:prototype-flag t) nil [1396535 1396823])
            ("if" code nil nil [1396825 1396985])
            ("push" code nil nil [1397089 1397146])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1397148 1397538])
            ("if" code nil nil [1397540 1397637])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1397753 1398031])
            ("if" code nil nil [1398033 1398132])
            ("put" code nil nil [1398277 1398325])
            ("put" code nil nil [1398327 1398376])
            ("define-obsolete-function-alias" code nil nil [1398378 1398455])
            ("which-function-mode" variable nil nil [1398457 1398770])
            ("custom-autoload" code nil nil [1398772 1398827])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1398829 1399373])
            ("if" code nil nil [1399375 1399479])
            ("push" code nil nil [1399595 1399659])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1399661 1400112])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1400114 1400772])
            ("global-whitespace-mode" variable nil nil [1400774 1401099])
            ("custom-autoload" code nil nil [1401101 1401159])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1401161 1401642])
            ("global-whitespace-newline-mode" variable nil nil [1401644 1402001])
            ("custom-autoload" code nil nil [1402003 1402069])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1402071 1402770])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1402772 1405588])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1405590 1408420])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408422 1410568])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1410570 1412187])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412189 1412382])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412384 1413804])
            ("if" code nil nil [1413806 1413911])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1414028 1414121])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1414123 1414221])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1414223 1414356])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1414358 1414711])
            ("if" code nil nil [1414713 1414814])
            ("widgetp" function (:prototype-flag t) nil [1414925 1415019])
            ("widget-prompt-value" function (:prototype-flag t) nil [1415021 1415239])
            ("widget-create" function (:prototype-flag t) nil [1415241 1415387])
            ("widget-delete" function (:prototype-flag t) nil [1415389 1415466])
            ("widget-insert" function (:prototype-flag t) nil [1415468 1415597])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'widget-forward) (define-key map "	" 'widget-backward) (define-key map [(shift tab)] 'widget-backward) (put 'widget-backward :advertised-binding [(shift tab)]) (define-key map [backtab] 'widget-backward) (define-key map [down-mouse-2] 'widget-button-click) (define-key map [down-mouse-1] 'widget-button-click) (define-key map [(control 109)] 'widget-button-press) map)) nil [1415599 1416228])
            ("widget-setup" function (:prototype-flag t) nil [1416230 1416338])
            ("if" code nil nil [1416340 1416439])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416550 1416977])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416979 1417392])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1417394 1417823])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1417825 1418243])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1418245 1418535])
            ("if" code nil nil [1418537 1418638])
            ("winner-mode" variable nil nil [1418743 1419024])
            ("custom-autoload" code nil nil [1419026 1419069])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419071 1419773])
            ("if" code nil nil [1419775 1419872])
            ("push" code nil nil [1419973 1420031])
            ("woman-locale" variable nil nil [1420033 1420308])
            ("custom-autoload" code nil nil [1420310 1420351])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420353 1421002])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1421004 1421117])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1421119 1421633])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1421635 1421746])
            ("if" code nil nil [1421748 1421899])
            ("if" code nil nil [1422001 1422096])
            ("if" code nil nil [1422192 1422283])
            ("xml-parse-file" function (:prototype-flag t) nil [1422379 1423115])
            ("xml-parse-region" function (:prototype-flag t) nil [1423117 1424084])
            ("xml-remove-comments" function (:prototype-flag t) nil [1424086 1424269])
            ("if" code nil nil [1424271 1424362])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1424477 1425134])
            ("if" code nil nil [1425136 1425233])
            ("xref-find-backend" function (:prototype-flag t) nil [1425352 1425408])
            ("xref-pop-marker-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1425410 1425529])
            ("xref-marker-stack-empty-p" function (:prototype-flag t) nil [1425531 1425648])
            ("xref-find-definitions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1425650 1426075])
            ("xref-find-definitions-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426077 1426219])
            ("xref-find-definitions-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426221 1426361])
            ("xref-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426363 1426523])
            ("xref-find-definitions-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426525 1426712])
            ("xref-find-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426714 1426874])
            ("define-key" code nil nil [1426876 1426924])
            ("define-key" code nil nil [1426926 1426974])
            ("define-key" code nil nil [1426976 1427023])
            ("define-key" code nil nil [1427025 1427073])
            ("define-key" code nil nil [1427075 1427140])
            ("define-key" code nil nil [1427142 1427206])
            ("xref-collect-matches" function (:prototype-flag t) nil [1427208 1427433])
            ("if" code nil nil [1427435 1427528])
            ("if" code nil nil [1427656 1427938])
            ("if" code nil nil [1428065 1428165])
            ("xterm-mouse-mode" variable nil nil [1428276 1428577])
            ("custom-autoload" code nil nil [1428579 1428629])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1428631 1429360])
            ("if" code nil nil [1429362 1429492])
            ("xwidget-webkit-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1429600 1429869])
            ("if" code nil nil [1429871 1429970])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1430079 1430211])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1430213 1430311])
            ("if" code nil nil [1430313 1430406])
            ("if" code nil nil [1430525 1430626])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1430735 1430797])
            ("if" code nil nil [1430799 1430892])
            ("loaddefs" package nil nil [1439669 1439688]))          
      :file "loaddefs.el"
      :pointmax 1439834
      :fsize 1442833
      :lastmodtime '(23455 961 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-187858c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4864 4879])
            ("ansi-color" include nil nil [4880 4901])
            ("regexp-opt" include nil nil [4902 4923])
            ("comint" customgroup
               (:documentation "General command interpreter in a window stuff."
                :user-visible-flag t)
                nil [6635 6727])
            ("comint-completion" customgroup
               (:documentation "Completion facilities in comint."
                :user-visible-flag t)
                nil [6729 6815])
            ("comint-prompt-regexp" variable
               (:documentation "Regexp to recognize prompts in the inferior process.
Defaults to \"^\", the null string at BOL.

This variable is only used if the variable
`comint-use-prompt-regexp' is non-nil.

Good choices:
  Canonical Lisp: \"^[^> \\n]*>+:? *\" (Lucid, franz, kcl, T, cscheme, oaklisp)
  Lucid Common Lisp: \"^\\\\(>\\\\|\\\\(->\\\\)+\\\\) *\"
  franz: \"^\\\\(->\\\\|<[0-9]*>:\\\\) *\"
  kcl: \"^>+ *\"
  shell: \"^[^#$%>\\n]*[#$%>] *\"
  T: \"^>+ *\"

This is a good thing to set in mode hooks."
                :default-value "^")
                nil [6952 7474])
            ("comint-prompt-read-only" variable (:documentation "If non-nil, the comint prompt is read only.
The read only region includes the newline before the prompt.
This does not affect existing prompts.
Certain derived modes may override this option.

If you set this option to t, then the safe way to temporarily
override the read-only-ness of comint prompts is to call
`comint-kill-whole-line' or `comint-kill-region' with no
narrowing in effect.  This way you will be certain that none of
the remaining prompts will be accidentally messed up.  You may
wish to put something like the following in your init file:

(add-hook \\='comint-mode-hook
          (lambda ()
            (define-key comint-mode-map [remap kill-region] \\='comint-kill-region)
            (define-key comint-mode-map [remap kill-whole-line]
              \\='comint-kill-whole-line)))

If you sometimes use comint-mode on text-only terminals or with `emacs -nw',
you might wish to use another binding for `comint-kill-whole-line'.") nil [7476 8519])
            ("comint-delimiter-argument-list" variable (:documentation "List of characters to recognize as separate arguments in input.
Strings comprising a character in this list will separate the arguments
surrounding them, and also be regarded as arguments in their own right (unlike
whitespace).  See `comint-arguments'.
Defaults to the empty list.

For shells, a good value is (?\\| ?& ?< ?> ?\\( ?\\) ?;).

This is a good thing to set in mode hooks.") nil [8521 8951])
            ("comint-input-autoexpand" variable (:documentation "If non-nil, expand input command history references on completion.
This mirrors the optional behavior of tcsh (its autoexpand and histlist).

If the value is `input', then the expansion is seen on input.
If the value is `history', then the expansion is only when inserting
into the buffer's input ring.  See also `comint-magic-space' and
`completion-at-point'.

This variable is buffer-local.") nil [8953 9506])
            ("comint-highlight-input" variable
               (:documentation "Face to use to highlight user input."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [9508 9620])
            ("comint-highlight-prompt" variable
               (:documentation "Face to use to highlight prompts."
                :default-value '((t :inherit minibuffer-prompt))
                :type "face")
                nil [9622 9746])
            ("comint-input-ignoredups" variable (:documentation "If non-nil, don't add input matching the last on the input ring.
This mirrors the optional behavior of bash.

This variable is buffer-local.") nil [9748 9966])
            ("comint-input-ring-file-name" variable (:documentation "If non-nil, name of the file to read/write input history.
See also `comint-read-input-ring' and `comint-write-input-ring'.
`comint-mode' makes this a buffer-local variable.  You probably want
to set this in a mode hook, rather than customize the default value.") nil [9968 10342])
            ("comint-scroll-to-bottom-on-input" variable (:documentation "Controls whether input to interpreter causes window to scroll.
If nil, then do not scroll.  If t or `all', scroll all windows showing buffer.
If `this', scroll only the selected window.

The default is nil.

See `comint-preinput-scroll-to-bottom'.  This variable is buffer-local.") nil [10344 10778])
            ("defvaralias" code nil nil [10780 10858])
            ("comint-move-point-for-output" variable (:documentation "Controls whether interpreter output moves point to the end of the output.
If nil, then output never moves point to the output.
 (If the output occurs at point, it is inserted before point.)
If t or `all', move point in all windows showing the buffer.
If `this', move point only the selected window.
If `others', move point only in other windows, not in the selected window.

The default is nil.

See the variable `comint-scroll-show-maximum-output' and the function
`comint-postoutput-scroll-to-bottom'.
This variable is buffer-local in all Comint buffers.") nil [10860 11585])
            ("comint-move-point-for-matching-input" variable
               (:documentation "Controls where to place point after matching input.
\\<comint-mode-map>This influences the commands \\[comint-previous-matching-input-from-input] and \\[comint-next-matching-input-from-input].
If `after-input', point will be positioned after the input typed
by the user, but before the rest of the history entry that has
been inserted.  If `end-of-line', point will be positioned at the
end of the current logical (not visual) line after insertion."
                :default-value 'after-input)
                nil [11587 12260])
            ("comint-scroll-show-maximum-output" variable
               (:documentation "Controls how to scroll due to interpreter output.
This variable applies when point is at the end of the buffer
(either because it was originally there, or because
`comint-move-point-for-output' said to move it there)
and output from the subprocess is inserted.

Non-nil means scroll so that the window is full of text
and point is on the last line.  A value of nil
means don't do anything special--scroll normally.

See also the variable `comint-move-point-for-output' and the function
`comint-postoutput-scroll-to-bottom'.
This variable is buffer-local in all Comint buffers."
                :default-value t)
                nil [12262 12925])
            ("comint-buffer-maximum-size" variable
               (:documentation "The maximum size in lines for Comint buffers.
Comint buffers are truncated from the top to be no greater than this number, if
the function `comint-truncate-buffer' is on `comint-output-filter-functions'."
                :default-value 1024)
                nil [12927 13212])
            ("comint-input-ring-size" variable
               (:documentation "Size of the input history ring in `comint-mode'."
                :default-value 500)
                nil [13214 13357])
            ("comint-input-ring-separator" variable
               (:documentation "Separator between commands in the history file."
                :default-value "
")
                nil [13359 13452])
            ("comint-input-history-ignore" variable
               (:documentation "Regexp for history entries that should be ignored when Comint initializes."
                :default-value "^#")
                nil [13454 13574])
            ("comint-process-echoes" variable (:documentation "If non-nil, assume that the subprocess echoes any input.
If so, delete one copy of the input so that only one copy eventually
appears in the buffer.

This variable is buffer-local.") nil [13576 13832])
            ("comint-password-prompt-regexp" variable
               (:documentation "Regexp matching prompts for passwords in the inferior process.
This is used by `comint-watch-for-password-prompt'."
                :default-value (concat "\\(^ *\\|" (regexp-opt '("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "PEM" "SUDO" "[sudo]" "Repeat" "Bad" "Retype") t) " +.*\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?" "\\(?: [[:alpha:]]+ .+\\)?[[:blank:]]*[:\357\274\232\341\237\226][[:blank:]]*\\'"))
                nil [14424 15256])
            ("comint-get-old-input" variable
               (:documentation "Function that returns old text in Comint mode.
This function is called when return is typed while the point is in old
text.  It returns the text to be submitted as process input.  The
default is `comint-get-old-input-default', which either grabs the
current input field or grabs the current line and strips off leading
text matching `comint-prompt-regexp', depending on the value of
`comint-use-prompt-regexp'."
                :default-value nil)
                nil [15297 15781])
            ("comint-dynamic-complete-functions" variable
               (:documentation "List of functions called to perform completion.
Works like `completion-at-point-functions'.
See also `completion-at-point'.

This is a good thing to set in mode hooks."
                :default-value '(comint-c-a-p-replace-by-expanded-history comint-filename-completion))
                nil [15783 16070])
            ("comint-input-filter" variable
               (:documentation "Predicate for filtering additions to input history.
Takes one argument, the input.  If non-nil, the input may be saved on the input
history list.  Default is to save anything that isn't all whitespace."
                :default-value nil)
                nil [16072 16326])
            ("comint-input-filter-functions" variable
               (:documentation "Abnormal hook run before input is sent to the process.
These functions get one argument, a string containing the text to send."
                :default-value 'nil)
                nil [16328 16501])
            ("comint-output-filter-functions" variable
               (:documentation "Functions to call after output is inserted into the buffer.
One possible function is `comint-postoutput-scroll-to-bottom'.
These functions get one argument, a string containing the text as originally
inserted.  Note that this might not be the same as the buffer contents between
`comint-last-output-start' and the buffer's `process-mark', if other filter
functions have already modified the buffer.

See also `comint-preoutput-filter-functions'.

You can use `add-hook' to add functions to this list
either globally or locally."
                :default-value '(ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))
                nil [16518 17186])
            ("comint-input-sender-no-newline" variable (:documentation "Non-nil directs the `comint-input-sender' function not to send a newline.") nil [17188 17309])
            ("comint-input-sender" variable
               (:documentation "Function to actually send to PROCESS the STRING submitted by user.
Usually this is just `comint-simple-send', but if your mode needs to
massage the input string, put a different function here.
`comint-simple-send' just sends the string plus a newline.
(If `comint-input-sender-no-newline' is non-nil, it omits the newline.)
This is called from the user command `comint-send-input'."
                :default-value nil)
                nil [17311 17756])
            ("comint-eol-on-send" variable
               (:documentation "Non-nil means go to the end of the line before sending input.
See `comint-send-input'."
                :default-value t)
                nil [17758 17915])
            ("comint-use-prompt-regexp" variable (:documentation "If non-nil, use `comint-prompt-regexp' to recognize prompts.
If nil, then program output and user-input are given different `field'
properties, which Emacs commands can use to distinguish them (in
particular, common movement commands such as `beginning-of-line'
respect field boundaries in a natural way).") nil [18091 18475])
            ("comint-mode-hook" variable (:documentation "Hook run upon entry to `comint-mode'.
This is run before the process is cranked up.") nil [18477 18628])
            ("comint-exec-hook" variable
               (:documentation "Hook run each time a process is exec'd by `comint-exec'.
This is called after the process is cranked up.  It is useful for things that
must be done each time a process is executed in a Comint mode buffer (e.g.,
`set-process-query-on-exit-flag').  In contrast, `comint-mode-hook' is only
executed once, when the buffer is created."
                :default-value 'nil)
                nil [18630 19027])
            ("comint-terminfo-terminal" variable
               (:documentation "Value to use for TERM when the system uses terminfo."
                :default-value "dumb")
                nil [19029 19180])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" 'comint-previous-input) (define-key map "n" 'comint-next-input) (define-key map [C-up] 'comint-previous-input) (define-key map [C-down] 'comint-next-input) (define-key map "r" 'comint-history-isearch-backward-regexp) (define-key map [3 134217842] 'comint-previous-matching-input-from-input) (define-key map [3 134217843] 'comint-next-matching-input-from-input) (define-key map "" 'comint-show-output) (define-key map "" 'comint-send-input) (define-key map "" 'comint-delchar-or-maybe-eof) (define-key map [delete] 'delete-forward-char) (define-key map [kp-delete] 'delete-forward-char) (define-key map " " 'comint-accumulate) (define-key map "" 'comint-get-next-from-history) (define-key map "" 'comint-bol-or-process-mark) (define-key map "" 'comint-kill-input) (define-key map "" 'backward-kill-word) (define-key map "" 'comint-interrupt-subjob) (define-key map "" 'comint-stop-subjob) (define-key map "" 'comint-quit-subjob) (define-key map "" 'comint-copy-old-input) (define-key map "" 'comint-delete-output) (define-key map "\357" 'comint-clear-buffer) (define-key map "" 'comint-show-output) (define-key map "" 'comint-show-maximum-output) (define-key map "" 'comint-dynamic-list-input-ring) (define-key map "" 'comint-next-prompt) (define-key map "" 'comint-previous-prompt) (define-key map "" 'comint-send-eof) (define-key map "" 'comint-write-output) (define-key map "." 'comint-insert-previous-argument) (define-key map [mouse-2] 'comint-insert-input) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] '("Expand File Name" . comint-replace-by-expanded-filename)) (define-key map [menu-bar completion complete-listing] '("File Completion Listing" . comint-dynamic-list-filename-completions)) (define-key map [menu-bar completion complete-file] '("Complete File Name" . comint-dynamic-complete-filename)) (define-key map [menu-bar completion complete] '("Complete at Point" . completion-at-point)) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] '("Delete Current Output Group" . comint-delete-output)) (define-key map [menu-bar inout append-output-to-file] '("Append Current Output Group to File" . comint-append-output-to-file)) (define-key map [menu-bar inout write-output] '("Write Current Output Group to File" . comint-write-output)) (define-key map [menu-bar inout next-prompt] '("Forward Output Group" . comint-next-prompt)) (define-key map [menu-bar inout previous-prompt] '("Backward Output Group" . comint-previous-prompt)) (define-key map [menu-bar inout show-maximum-output] '("Show Maximum Output" . comint-show-maximum-output)) (define-key map [menu-bar inout show-output] '("Show Current Output Group" . comint-show-output)) (define-key map [menu-bar inout kill-input] '("Kill Current Input" . comint-kill-input)) (define-key map [menu-bar inout copy-input] '("Copy Old Input" . comint-copy-old-input)) (define-key map [menu-bar inout history-isearch-backward-regexp] '("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp)) (define-key map [menu-bar inout history-isearch-backward] '("Isearch Input String Backward..." . comint-history-isearch-backward)) (define-key map [menu-bar inout forward-matching-history] '("Forward Matching Input..." . comint-forward-matching-input)) (define-key map [menu-bar inout backward-matching-history] '("Backward Matching Input..." . comint-backward-matching-input)) (define-key map [menu-bar inout next-matching-history] '("Next Matching Input..." . comint-next-matching-input)) (define-key map [menu-bar inout previous-matching-history] '("Previous Matching Input..." . comint-previous-matching-input)) (define-key map [menu-bar inout next-matching-history-from-input] '("Next Matching Current Input" . comint-next-matching-input-from-input)) (define-key map [menu-bar inout previous-matching-history-from-input] '("Previous Matching Current Input" . comint-previous-matching-input-from-input)) (define-key map [menu-bar inout next-history] '("Next Input" . comint-next-input)) (define-key map [menu-bar inout previous-history] '("Previous Input" . comint-previous-input)) (define-key map [menu-bar inout list-history] '("List Input History" . comint-dynamic-list-input-ring)) (define-key map [menu-bar inout expand-history] '("Expand History Before Point" . comint-replace-by-expanded-history)) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] '("EOF" . comint-send-eof)) (define-key signals-map [kill] '("KILL" . comint-kill-subjob)) (define-key signals-map [quit] '("QUIT" . comint-quit-subjob)) (define-key signals-map [cont] '("CONT" . comint-continue-subjob)) (define-key signals-map [stop] '("STOP" . comint-stop-subjob)) (define-key signals-map [break] '("BREAK" . comint-interrupt-subjob))) (setq menu-bar-final-items (append '(completion inout signals) menu-bar-final-items)) map)) nil [19182 25295])
            ("comint-ptyp" variable
               (:documentation "Non-nil if communications via pty; false if by pipe.  Buffer local.
This is to work around a bug in Emacs process signaling."
                :default-value t)
                nil [25331 25482])
            ("comint-input-ring" variable nil nil [25484 25514])
            ("comint-last-input-start" variable nil nil [25515 25551])
            ("comint-last-input-end" variable nil nil [25552 25586])
            ("comint-last-output-start" variable nil nil [25587 25624])
            ("comint-input-ring-index" variable (:documentation "Index of last matched history element.") nil [25625 25704])
            ("comint-matching-input-from-input-string" variable (:documentation "Input previously used to match input history.") nil [25705 25806])
            ("comint-save-input-ring-index" variable (:documentation "Last input ring index which you copied.
This is to support the command \\[comint-get-next-from-history].") nil [25807 25957])
            ("comint-accum-marker" variable (:documentation "Non-nil if you are accumulating input lines to send as input together.
The command \\[comint-accumulate] sets this.") nil [25959 26111])
            ("comint-stored-incomplete-input" variable (:documentation "Stored input for history cycling.") nil [26113 26194])
            ("put" code nil nil [26196 26275])
            ("put" code nil nil [26276 26319])
            ("put" code nil nil [26320 26369])
            ("put" code nil nil [26370 26424])
            ("put" code nil nil [26425 26474])
            ("put" code nil nil [26475 26530])
            ("put" code nil nil [26531 26587])
            ("put" code nil nil [26588 26647])
            ("put" code nil nil [26648 26706])
            ("put" code nil nil [26707 26761])
            ("put" code nil nil [26762 26821])
            ("put" code nil nil [26822 26859])
            ("put" code nil nil [26861 26900])
            ("define-derived-mode" code nil nil [26902 31649])
            ("comint-check-proc" function
               (:documentation "Return non-nil if there is a living process associated w/buffer BUFFER.
Living means the status is `open', `run', or `stop'.
BUFFER can be either a buffer or the name of one."
                :arguments ("buffer"))
                nil [31651 31970])
            ("make-comint-in-buffer" function
               (:documentation "Make a Comint process NAME in BUFFER, running PROGRAM.
If BUFFER is nil, it defaults to NAME surrounded by `*'s.
If there is a running process in BUFFER, it is not restarted.

PROGRAM should be one of the following:
- a string, denoting an executable program to create via
  `start-file-process'
- a cons pair of the form (HOST . SERVICE), denoting a TCP
  connection to be opened via `open-network-stream'
- nil, denoting a newly-allocated pty.

Optional fourth arg STARTFILE is the name of a file, whose
contents are sent to the process as its initial input.

If PROGRAM is a string, any more args are arguments to PROGRAM.

Return the (possibly newly created) process buffer."
                :arguments ("name" "buffer" "program" "startfile" "switches"))
                nil [31987 33312])
            ("make-comint" function
               (:documentation "Make a Comint process NAME in a buffer, running PROGRAM.
The name of the buffer is made by surrounding NAME with `*'s.
PROGRAM should be either a string denoting an executable program to create
via `start-file-process', or a cons pair of the form (HOST . SERVICE) denoting
a TCP connection to be opened via `open-network-stream'.  If there is already
a running process in that buffer, it is not restarted.  Optional third arg
STARTFILE is the name of a file, whose contents are sent to the
process as its initial input.

If PROGRAM is a string, any more args are arguments to PROGRAM.

Returns the (possibly newly created) process buffer."
                :arguments ("name" "program" "startfile" "switches"))
                nil [33329 34111])
            ("comint-run" function
               (:documentation "Run PROGRAM in a Comint buffer and switch to it.
The buffer name is made by surrounding the file name of PROGRAM with `*'s.
The file name is used to make a symbol name, such as `comint-sh-hook', and any
hooks on this symbol are run in the buffer.
See `make-comint' and `comint-exec'."
                :arguments ("program"))
                nil [34128 34682])
            ("comint-exec" function
               (:documentation "Start up a process named NAME in buffer BUFFER for Comint modes.
Runs the given COMMAND with SWITCHES, and initial input from STARTFILE.

COMMAND should be one of the following:
- a string, denoting an executable program to create via
  `start-file-process'
- a cons pair of the form (HOST . SERVICE), denoting a TCP
  connection to be opened via `open-network-stream'
- nil, denoting a newly-allocated pty.

This function blasts any old process running in the buffer, and
does not set the buffer mode.  You can use this to cheaply run a
series of processes in the same Comint buffer.  The hook
`comint-exec-hook' is run after each exec."
                :arguments ("buffer" "name" "command" "startfile" "switches"))
                nil [34684 36548])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [36651 37998])
            ("comint-term-environment" function (:documentation "Return an environment variable list for terminal configuration.") nil [38000 38774])
            ("comint-nonblank-p" function
               (:documentation "Return non-nil if STR contains non-whitespace syntax."
                :arguments ("str"))
                nil [38776 38906])
            ("comint-insert-input" function
               (:documentation "In a Comint buffer, set the current input to the previous input at point.
If there is no previous input at point, run the command specified
by the global keymap (usually `mouse-yank-at-click')."
                :user-visible-flag t
                :arguments ("event"))
                nil [38908 40712])
            ("comint-read-input-ring" function
               (:documentation "Set the buffer's `comint-input-ring' from a history file.
The name of the file is given by the variable `comint-input-ring-file-name'.
The history ring is of size `comint-input-ring-size', regardless of file size.
If `comint-input-ring-file-name' is nil this function does nothing.

If the optional argument SILENT is non-nil, we say nothing about a
failure to read the history file.

This function is useful for major mode commands and mode hooks.

The commands stored in the history file are separated by the
`comint-input-ring-separator', and entries that match
`comint-input-history-ignore' are ignored.  The most recent command
comes last.

See also `comint-input-ignoredups' and `comint-write-input-ring'."
                :arguments ("silent"))
                nil [41844 44545])
            ("comint-write-input-ring" function (:documentation "Writes the buffer's `comint-input-ring' to a history file.
The name of the file is given by the variable `comint-input-ring-file-name'.
The original contents of the file are lost if `comint-input-ring' is not empty.
If `comint-input-ring-file-name' is nil this function does nothing.

Useful within process sentinels.

See also `comint-read-input-ring'.") nil [44547 45783])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [45786 45837])
            ("comint-dynamic-list-input-ring-select" function
               (:documentation "Choose the input history entry that point is in or next to."
                :user-visible-flag t)
                nil [45839 46624])
            ("comint-dynamic-list-input-ring" function
               (:documentation "Display a list of recent inputs entered into the current buffer."
                :user-visible-flag t)
                nil [46626 47955])
            ("comint-regexp-arg" function
               (:documentation "Return list of regexp and prefix arg using PROMPT."
                :arguments ("prompt"))
                nil [47958 48519])
            ("comint-search-arg" function (:arguments ("arg")) nil [48521 48943])
            ("comint-restore-input" function
               (:documentation "Restore unfinished input."
                :user-visible-flag t)
                nil [48945 49256])
            ("comint-search-start" function
               (:documentation "Index to start a directional search, starting at `comint-input-ring-index'."
                :arguments ("arg"))
                nil [49258 49739])
            ("comint-previous-input-string" function
               (:documentation "Return the string ARG places along the input ring.
Moves relative to `comint-input-ring-index'."
                :arguments ("arg"))
                nil [49773 50070])
            ("comint-previous-input" function
               (:documentation "Cycle backwards through input history, saving input."
                :user-visible-flag t
                :arguments ("arg"))
                nil [50072 50559])
            ("comint-next-input" function
               (:documentation "Cycle forwards through input history."
                :user-visible-flag t
                :arguments ("arg"))
                nil [50561 50689])
            ("comint-previous-matching-input-string" function
               (:documentation "Return the string matching REGEXP ARG places along the input ring.
Moves relative to `comint-input-ring-index'."
                :arguments ("regexp" "arg"))
                nil [50691 50988])
            ("comint-previous-matching-input-string-position" function
               (:documentation "Return the index matching REGEXP ARG places along the input ring.
Moves relative to START, or `comint-input-ring-index'."
                :arguments ("regexp" "arg" "start"))
                nil [50990 52190])
            ("comint-delete-input" function (:documentation "Delete all input between accumulation or process mark and point.") nil [52192 52477])
            ("comint-previous-matching-input" function
               (:documentation "Search backwards through input history for match for REGEXP.
(Previous history elements are earlier commands.)
With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52479 53441])
            ("comint-next-matching-input" function
               (:documentation "Search forwards through input history for match for REGEXP.
(Later history elements are more recent commands.)
With prefix argument N, search for Nth following match.
If N is negative, find the previous or Nth previous match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [53443 53836])
            ("comint-previous-matching-input-from-input" function
               (:documentation "Search backwards through input history for match for current input.
(Previous history elements are earlier commands.)
With prefix argument N, search for Nth previous match.
If N is negative, search forwards for the -Nth following match."
                :user-visible-flag t
                :arguments ("n"))
                nil [53838 54769])
            ("comint-next-matching-input-from-input" function
               (:documentation "Search forwards through input history for match for current input.
(Following history elements are more recent commands.)
With prefix argument N, search for Nth following match.
If N is negative, search backwards for the -Nth previous match."
                :user-visible-flag t
                :arguments ("n"))
                nil [54771 55139])
            ("comint-replace-by-expanded-history" function
               (:documentation "Expand input command history references before point.
Expansion is dependent on the value of `comint-input-autoexpand'.

This function depends on the buffer's idea of the input history, which may not
match the command interpreter's idea, assuming it has one.

Assumes history syntax is like typical Un*x shells'.  However, since Emacs
cannot know the interpreter's idea of input line numbers, assuming it has one,
it cannot expand absolute input line number references.

If the optional argument SILENT is non-nil, never complain
even if history reference seems erroneous.

If the optional argument START is non-nil, that specifies the
start of the text to scan for history references, rather
than the logical beginning of line.

See `comint-magic-space' and `comint-replace-by-expanded-history-before-point'.

Returns t if successful."
                :user-visible-flag t
                :arguments ("silent" "start"))
                nil [55142 56158])
            ("comint-c-a-p-replace-by-expanded-history" function
               (:documentation "Expand input command history at point.
For use on `completion-at-point-functions'."
                :arguments ("silent" "start"))
                nil [56160 57177])
            ("comint-replace-by-expanded-history-before-point" function
               (:documentation "Expand directory stack reference before point.
See `comint-replace-by-expanded-history'.  Returns t if successful.

If the optional argument START is non-nil, that specifies the
start of the text to scan for history references, rather
than the logical beginning of line.

If DRY-RUN is non-nil, throw to DRY-RUN before performing any
actual side-effect."
                :arguments ("silent" "start" "dry-run"))
                nil [57180 61412])
            ("comint-magic-space" function
               (:documentation "Expand input history references before point and insert ARG spaces.
A useful command to bind to SPC.  See `comint-replace-by-expanded-history'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [61415 61682])
            ("comint-history-isearch" variable (:documentation "Non-nil to Isearch in input history only, not in comint buffer output.
If t, usual Isearch keys like `C-r' and `C-M-r' in comint mode search
in the input history.
If `dwim', Isearch keys search in the input history only when initial
point position is at the comint command line.  When starting Isearch
from other parts of the comint buffer, they search in the comint buffer.
If nil, Isearch operates on the whole comint buffer.") nil [61721 62423])
            ("comint-history-isearch-backward" function
               (:documentation "Search for a string backward in input history using Isearch."
                :user-visible-flag t)
                nil [62425 62609])
            ("comint-history-isearch-backward-regexp" function
               (:documentation "Search for a regular expression backward in input history using Isearch."
                :user-visible-flag t)
                nil [62611 62821])
            ("defvar-local" code nil nil [62823 62880])
            ("comint-history-isearch-setup" function (:documentation "Set up a comint for using Isearch to search the input history.
Intended to be added to `isearch-mode-hook' in `comint-mode'.") nil [62882 63966])
            ("comint-history-isearch-end" function (:documentation "Clean up the comint after terminating Isearch in comint.") nil [63968 64547])
            ("comint-goto-input" function
               (:documentation "Put input history item of the absolute history position POS."
                :arguments ("pos"))
                nil [64549 65134])
            ("comint-history-isearch-search" function (:documentation "Return the proper search function, for Isearch in input history.") nil [65136 67489])
            ("comint-history-isearch-message" function
               (:documentation "Display the input history search prompt.
If there are no search errors, this function displays an overlay with
the Isearch prompt which replaces the original comint prompt.
Otherwise, it displays the standard Isearch message returned from
the function `isearch-message'."
                :arguments ("c-q-hack" "ellipsis"))
                nil [67491 69243])
            ("comint-history-isearch-wrap" function (:documentation "Wrap the input history search when search fails.
Move point to the first history element for a forward search,
or to the last history element for a backward search.") nil [69245 69834])
            ("comint-history-isearch-push-state" function (:documentation "Save a function restoring the state of input history search.
Save `comint-input-ring-index' to the additional state parameter
in the search status stack.") nil [69836 70150])
            ("comint-history-isearch-pop-state" function
               (:documentation "Restore the input history search state.
Go to the history element by the absolute history position HIST-POS."
                :arguments ("_cmd" "hist-pos"))
                nil [70152 70352])
            ("comint-within-quotes" function
               (:documentation "Return t if the number of quotes between BEG and END is odd.
Quotes are single and double."
                :arguments ("beg" "end"))
                nil [70356 70682])
            ("comint-how-many-region" function
               (:documentation "Return number of matches for REGEXP from BEG to END."
                :arguments ("regexp" "beg" "end"))
                nil [70684 70949])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [70951 71726])
            ("comint-delim-arg" function
               (:documentation "Return a list of arguments from ARG.
Break it up at the delimiters in `comint-delimiter-argument-list'.
Returned list is backwards.

Characters with non-nil values of the text property `literal' are
assumed to have literal values (e.g., backslash-escaped
characters), and are not considered to be delimiters."
                :arguments ("arg"))
                nil [71728 72744])
            ("comint-arguments" function
               (:documentation "Return from STRING the NTH to MTH arguments.
NTH and/or MTH can be nil, which means the last argument.
NTH and MTH can be negative to count from the end; -1 means
the last argument.
Returned arguments are separated by single spaces.  We assume
whitespace separates arguments, except within quotes and except
for a space or tab that immediately follows a backslash.  Also, a
run of one or more of a single character in
`comint-delimiter-argument-list' is a separate argument.
Argument 0 is the command name."
                :arguments ("string" "nth" "mth"))
                nil [72746 75494])
            ("comint-add-to-input-history" function
               (:documentation "Add CMD to the input history.
Ignore duplicates if `comint-input-ignoredups' is non-nil."
                :arguments ("cmd"))
                nil [75529 76199])
            ("comint-send-input" function
               (:documentation "Send input to process.
After the process output mark, sends all text from the process mark to
point as input to the process.  Before the process output mark, calls
value of variable `comint-get-old-input' to retrieve old input, copies
it to the process mark, and sends it.

This command also sends and inserts a final newline, unless
NO-NEWLINE is non-nil.

Any history reference may be expanded depending on the value of the variable
`comint-input-autoexpand'.  The list of function names contained in the value
of `comint-input-filter-functions' is called on the input before sending it.
The input is entered into the input history ring, if the value of variable
`comint-input-filter' returns non-nil when called on the input.

If variable `comint-eol-on-send' is non-nil, then point is moved to the
end of line before sending the input.

After the input has been sent, if `comint-process-echoes' is non-nil,
then `comint-send-input' waits to see if the process outputs a string
matching the input, and if so, deletes that part of the output.
If ARTIFICIAL is non-nil, it inhibits such deletion.
Callers sending input not from the user should use ARTIFICIAL = t.

The values of `comint-get-old-input', `comint-input-filter-functions', and
`comint-input-filter' are chosen according to the command interpreter running
in the buffer.  E.g.,

If the interpreter is the csh,
    `comint-get-old-input' is the default:
	If `comint-use-prompt-regexp' is nil, then
	either return the current input field, if point is on an input
	field, or the current line, if point is on an output field.
	If `comint-use-prompt-regexp' is non-nil, then
	return the current line with any initial string matching the
	regexp `comint-prompt-regexp' removed.
    `comint-input-filter-functions' monitors input for \"cd\", \"pushd\", and
	\"popd\" commands.  When it sees one, it cd's the buffer.
    `comint-input-filter' is the default: returns t if the input isn't all white
	space.

If the Comint is Lucid Common Lisp,
    `comint-get-old-input' snarfs the sexp ending at point.
    `comint-input-filter-functions' does nothing.
    `comint-input-filter' returns nil if the input matches input-filter-regexp,
	which matches (1) all whitespace (2) :a, :c, etc.

Similarly for Soar, Scheme, etc."
                :user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [76201 84619])
            ("comint-preoutput-filter-functions" variable (:documentation "List of functions to call before inserting Comint output into the buffer.
Each function gets one argument, a string containing the text received
from the subprocess.  It should return the string to insert, perhaps
the same string that was received, or perhaps a modified or transformed
string.

The functions on the list are called sequentially, and each one is
given the string returned by the previous one.  The string returned by
the last function is the text that is actually inserted in the
redirection buffer.

You can use `add-hook' to add functions to this list
either globally or locally.") nil [84621 85269])
            ("comint-inhibit-carriage-motion" variable (:documentation "If nil, Comint will interpret `carriage control' characters in output.
See `comint-carriage-motion' for details.") nil [85271 85431])
            ("comint-last-prompt" variable (:documentation "Markers pointing to the last prompt.
If non-nil, a cons cell containing markers.  The car points to
the start, the cdr to the end of the last prompt recognized.") nil [85433 85629])
            ("comint-snapshot-last-prompt" function (:documentation "Snapshot the current `comint-last-prompt'.
Freezes the `font-lock-face' text property in place.") nil [85631 86174])
            ("comint-carriage-motion" function
               (:documentation "Interpret carriage control characters in the region from START to END.
Translate carriage return/linefeed sequences to linefeeds.
Make single carriage returns delete to the beginning of the line.
Make backspaces delete the previous character."
                :arguments ("start" "end"))
                nil [86176 88426])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [88569 92707])
            ("comint-preinput-scroll-to-bottom" function (:documentation "Go to the end of buffer in all windows showing it.
Movement occurs if point in the selected window is not after the process mark,
and `this-command' is an insertion command.  Insertion commands recognized
are `self-insert-command', `comint-magic-space', `yank', and `hilit-yank'.
Depends on the value of `comint-scroll-to-bottom-on-input'.

This function should be a pre-command hook.") nil [92709 93810])
            ("follow-mode" variable nil nil [93812 93832])
            ("declare-function" code nil nil [93833 93910])
            ("comint-postoutput-scroll-to-bottom" function
               (:documentation "Go to the end of buffer in some or all windows showing it.
Do not scroll if the current line is the last line in the buffer.
Depends on the value of `comint-move-point-for-output' and
`comint-scroll-show-maximum-output'.

This function should be in the list `comint-output-filter-functions'."
                :arguments ("_string"))
                nil [93912 94862])
            ("comint-adjust-window-point" function
               (:documentation "Move point in WINDOW based on Comint settings.
For point adjustment use the process-mark of PROCESS."
                :arguments ("window" "process"))
                nil [94865 95536])
            ("comint-adjust-point" function
               (:documentation "Move point in the selected window based on Comint settings.
SELECTED is the window that was originally selected."
                :arguments ("selected"))
                nil [95572 96208])
            ("comint-truncate-buffer" function
               (:documentation "Truncate the buffer to `comint-buffer-maximum-size'.
This function could be on `comint-output-filter-functions' or bound to a key."
                :user-visible-flag t
                :arguments ("_string"))
                nil [96210 96649])
            ("comint-strip-ctrl-m" function
               (:documentation "Strip trailing `^M' characters from the current output group.
This function could be on `comint-output-filter-functions' or bound to a key."
                :user-visible-flag t
                :arguments ("_string"))
                nil [96651 97180])
            ("define-obsolete-function-alias" code nil nil [97181 97262])
            ("comint-show-maximum-output" function
               (:documentation "Put the end of the buffer at the bottom of the window."
                :user-visible-flag t)
                nil [97264 97436])
            ("comint-get-old-input-default" function (:documentation "Default for `comint-get-old-input'.
If `comint-use-prompt-regexp' is nil, then either
return the current input field, if point is on an input field, or the
current line, if point is on an output field.
If `comint-use-prompt-regexp' is non-nil, then return
the current line with any initial string matching the regexp
`comint-prompt-regexp' removed.") nil [97438 98387])
            ("comint-copy-old-input" function
               (:documentation "Insert after prompt old input at point as new input to be edited.
Calls `comint-get-old-input' to get old input."
                :user-visible-flag t)
                nil [98389 98783])
            ("comint-skip-prompt" function (:documentation "Skip past the text matching regexp `comint-prompt-regexp'.
If this takes us past the end of the current line, don't skip at all.") nil [98785 99069])
            ("comint-after-pmark-p" function (:documentation "Return t if point is after the process output marker.") nil [99071 99327])
            ("comint-simple-send" function
               (:documentation "Default function for sending to PROC input STRING.
This just sends STRING plus a newline.  To override this,
set the hook `comint-input-sender'."
                :arguments ("proc" "string"))
                nil [99329 99904])
            ("comint-line-beginning-position" function (:documentation "Return the buffer position of the beginning of the line, after any prompt.
If `comint-use-prompt-regexp' is non-nil, then the prompt skip is done by
skipping text matching the regular expression `comint-prompt-regexp',
a buffer local variable.") nil [99906 100993])
            ("comint-bol" function
               (:documentation "Go to the beginning of line, then skip past the prompt, if any.
If prefix argument is given (\\[universal-argument]) the prompt is not skipped.
If `comint-use-prompt-regexp' is non-nil, then the prompt skip is done
by skipping text matching the regular expression `comint-prompt-regexp',
a buffer local variable."
                :user-visible-flag t
                :arguments ("arg"))
                nil [100995 101524])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [101548 101624])
            ("comint-send-invisible" function
               (:documentation "Read a string without echoing.
Then send it to the process running in the current buffer.
The string is sent using `comint-input-sender'.
Security bug: your string can still be temporarily recovered with
\\[view-lossage]; `clear-this-command-keys' can fix that."
                :user-visible-flag t
                :arguments ("prompt"))
                nil [101823 102675])
            ("define-obsolete-function-alias" code nil nil [102677 102756])
            ("comint-watch-for-password-prompt" function
               (:documentation "Prompt in the minibuffer for password and send without echoing.
Looks for a match to `comint-password-prompt-regexp' in order
to detect the need to (prompt and) send a password.

This function could be in the list `comint-output-filter-functions'."
                :arguments ("string"))
                nil [102758 103292])
            ("comint-send-string" function
               (:documentation "Like `process-send-string', but also does extra bookkeeping for Comint mode."
                :arguments ("process" "string"))
                nil [103331 103690])
            ("comint-send-region" function
               (:documentation "Like `process-send-region', but also does extra bookkeeping for Comint mode."
                :arguments ("process" "start" "end"))
                nil [103692 104057])
            ("comint-delete-output" function
               (:documentation "Delete all output from interpreter since last input.
Does not delete the prompt."
                :user-visible-flag t)
                nil [104086 104730])
            ("comint-write-output" function
               (:documentation "Write output from interpreter since last input to FILENAME.
Any prompt at the end of the output is not written.

If the optional argument APPEND (the prefix argument when interactive)
is non-nil, the output is appended to the file instead.

If the optional argument MUSTBENEW is non-nil, check for an existing
file with the same name.  If MUSTBENEW is `excl', that means to get an
error if the file already exists; never overwrite.  If MUSTBENEW is
neither nil nor `excl', that means ask for confirmation before
overwriting, but do go ahead and overwrite the file if the user
confirms.  When interactive, MUSTBENEW is nil when appending, and t
otherwise."
                :user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [104732 105833])
            ("comint-append-output-to-file" function
               (:documentation "Append output from interpreter since last input to FILENAME.
Any prompt at the end of the output is not written."
                :user-visible-flag t
                :arguments ("filename"))
                nil [105970 106212])
            ("comint-show-output" function
               (:documentation "Display start of this batch of interpreter output at top of window.
Sets mark to the value of point when this command is run."
                :user-visible-flag t)
                nil [106214 106728])
            ("comint-clear-buffer" function
               (:documentation "Clear the comint buffer."
                :user-visible-flag t)
                nil [106730 106875])
            ("comint-interrupt-subjob" function
               (:documentation "Interrupt the current subjob."
                :user-visible-flag t)
                nil [106877 107060])
            ("comint-kill-subjob" function
               (:documentation "Send kill signal to the current subjob."
                :user-visible-flag t)
                nil [107062 107206])
            ("comint-quit-subjob" function
               (:documentation "Send quit signal to the current subjob."
                :user-visible-flag t)
                nil [107208 107352])
            ("comint-stop-subjob" function
               (:documentation "Stop the current subjob.

WARNING: if there is no current subjob, you can end up suspending
the top-level process running in the buffer.  If you accidentally do
this, use \\[comint-continue-subjob] to resume the process.  (This
is not a problem with most shells, since they ignore this signal.)"
                :user-visible-flag t)
                nil [107354 107753])
            ("comint-continue-subjob" function
               (:documentation "Send CONT signal to process buffer's process group.
Useful if you accidentally suspend the top-level process."
                :user-visible-flag t)
                nil [107755 107955])
            ("comint-skip-input" function (:documentation "Skip all pending input, from last stuff output by interpreter to point.
This means mark it as if it had been sent as input, without sending it.") nil [107957 108450])
            ("comint-kill-input" function
               (:documentation "Kill all text from last stuff output by interpreter to point."
                :user-visible-flag t)
                nil [108452 108707])
            ("comint-delchar-or-maybe-eof" function
               (:documentation "Delete ARG characters forward or send an EOF to subprocess.
Sends an EOF only if point is at the end of the buffer and there is no input."
                :user-visible-flag t
                :arguments ("arg"))
                nil [108709 109087])
            ("comint-send-eof" function
               (:documentation "Send an EOF to the current buffer's process."
                :user-visible-flag t)
                nil [109089 109227])
            ("comint-backward-matching-input" function
               (:documentation "Search backward through buffer for input fields that match REGEXP.
If `comint-use-prompt-regexp' is non-nil, then input fields are identified
by lines that match `comint-prompt-regexp'.

With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [109230 110312])
            ("comint-forward-matching-input" function
               (:documentation "Search forward through buffer for input fields that match REGEXP.
If `comint-use-prompt-regexp' is non-nil, then input fields are identified
by lines that match `comint-prompt-regexp'.

With prefix argument N, search for Nth following match.
If N is negative, find the previous or Nth previous match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [110315 110788])
            ("comint-next-prompt" function
               (:documentation "Move to end of Nth next prompt in the buffer.
If `comint-use-prompt-regexp' is nil, then this means the beginning of
the Nth next `input' field, otherwise, it means the Nth occurrence of
text matching `comint-prompt-regexp'."
                :user-visible-flag t
                :arguments ("n"))
                nil [110791 111966])
            ("comint-previous-prompt" function
               (:documentation "Move to end of Nth previous prompt in the buffer.
If `comint-use-prompt-regexp' is nil, then this means the beginning of
the Nth previous `input' field, otherwise, it means the Nth occurrence of
text matching `comint-prompt-regexp'."
                :user-visible-flag t
                :arguments ("n"))
                nil [111969 112289])
            ("defvar-local" code nil nil [112356 112421])
            ("defvar-local" code nil nil [112422 112483])
            ("comint-insert-previous-argument-from-end" variable (:documentation "If non-nil, `comint-insert-previous-argument' counts args from the end.
If this variable is nil, the default, `comint-insert-previous-argument'
counts the arguments from the beginning; if non-nil, it counts from
the end instead.  This allows to emulate the behavior of `ESC-NUM ESC-.'
in both Bash and zsh: in Bash, `number' counts from the
beginning (variable is nil), while in zsh, it counts from the end.") nil [112485 113005])
            ("comint-insert-previous-argument" function
               (:documentation "Insert the INDEXth argument from the previous Comint command-line at point.
Spaces are added at beginning and/or end of the inserted string if
necessary to ensure that it's separated from adjacent arguments.
Interactively, if no prefix argument is given, the last argument is inserted.
Repeated interactive invocations will cycle through the same argument
from progressively earlier commands (using the value of INDEX specified
with the first command).  Values of INDEX < 0 count from the end, so
INDEX = -1 is the last argument.  This command is like `M-.' in
Bash and zsh."
                :user-visible-flag t
                :arguments ("index"))
                nil [113007 115100])
            ("comint-update-fence" function (:documentation "Update read-only status of newline before point.
The `fence' read-only property is used to indicate that a newline
is read-only for no other reason than to \"fence off\" a
following front-sticky read-only region.  This is used to
implement comint read-only prompts.  If the text after a newline
changes, the read-only status of that newline may need updating.
That is what this function does.

This function does nothing if point is not at the beginning of a
line, or is at the beginning of the accessible portion of the buffer.
Otherwise, if the character after point has a front-sticky
read-only property, then the preceding newline is given a
read-only property of `fence', unless it already is read-only.
If the character after point does not have a front-sticky
read-only property, any read-only property of `fence' on the
preceding newline is removed.") nil [115165 116582])
            ("comint-kill-whole-line" function
               (:documentation "Kill current line, ignoring read-only and field properties.
With prefix arg COUNT, kill that many lines starting from the current line.
If COUNT is negative, kill backward.  Also kill the preceding newline,
instead of the trailing one.  (This is meant to make \\[repeat] work well
with negative arguments.)
If COUNT is zero, kill current line but exclude the trailing newline.
The read-only status of newlines is updated with `comint-update-fence',
if necessary."
                :user-visible-flag t
                :arguments ("count"))
                nil [116584 117256])
            ("comint-kill-region" function
               (:documentation "Like `kill-region', but ignores read-only properties, if safe.
This command assumes that the buffer contains read-only
\"prompts\" which are regions with front-sticky read-only
properties at the beginning of a line, with the preceding newline
being read-only to protect the prompt.  This is true of the
comint prompts if `comint-prompt-read-only' is non-nil.  This
command will not delete the region if this would create mutilated
or out of place prompts.  That is, if any part of a prompt is
deleted, the entire prompt must be deleted and all remaining
prompts should stay at the beginning of a line.  If this is not
the case, this command just calls `kill-region' with all
read-only properties intact.  The read-only status of newlines is
updated using `comint-update-fence', if necessary."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [117258 118838])
            ("comint-source-default" function
               (:documentation "Compute the defaults for `load-file' and `compile-file' commands.

PREVIOUS-DIR/FILE is a pair (DIRECTORY . FILENAME) from the last
source-file processing command, or nil if there hasn't been one yet.
SOURCE-MODES is a list used to determine what buffers contain source
files: if the major mode of the buffer is in SOURCE-MODES, it's source.
Typically, (lisp-mode) or (scheme-mode).

If the command is given while the cursor is inside a string, *and*
the string is an existing filename, *and* the filename is not a directory,
then the string is taken as default.  This allows you to just position
your cursor over a string that's a filename and have it taken as default.

If the command is given in a file buffer whose major mode is in
SOURCE-MODES, then the filename is the default file, and the
file's directory is the default directory.

If the buffer isn't a source file buffer (e.g., it's the process buffer),
then the default directory & file are what was used in the last source-file
processing command (i.e., PREVIOUS-DIR/FILE).  If this is the first time
the command has been run (PREVIOUS-DIR/FILE is nil), the default directory
is the cwd, with no default file.  (\"no default file\" = nil)

SOURCE-MODES is typically going to be something like (tea-mode)
for T programs, (lisp-mode) for Lisp programs, (soar-mode lisp-mode)
for Soar programs, etc.

The function returns a pair: (default-directory . default-file)."
                :arguments ("previous-dir/file" "source-modes"))
                nil [120322 122037])
            ("comint-check-source" function
               (:documentation "Check whether to save buffers visiting file FNAME.
Prior to loading or compiling (or otherwise processing) a file (in the CMU
process-in-a-buffer modes), this function can be called on the filename.
If the file is loaded into a buffer, and the buffer is modified, the user
is queried to see if he wants to save the buffer before proceeding with
the load or compile."
                :arguments ("fname"))
                nil [122040 122659])
            ("comint-extract-string" function (:documentation "Return string around point, or nil.") nil [122661 122971])
            ("comint-get-source" function
               (:documentation "Prompt for filenames in commands that process source files,
e.g. loading or compiling a file.
Provides a default, if there is one, and returns the result filename.

See `comint-source-default' for more on determining defaults.

PROMPT is the prompt string.  PREV-DIR/FILE is the (DIRECTORY . FILE) pair
from the last source processing command.  SOURCE-MODES is a list of major
modes used to determine what file buffers contain source files.  (These
two arguments are used for determining defaults.)  If MUSTMATCH-P is true,
then the filename reader will only accept a file that exists.

A typical use:
 (interactive (comint-get-source \"Compile file: \" prev-lisp-dir/file
                                 \\='(lisp-mode) t))"
                :arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p"))
                nil [122973 124474])
            ("comint-proc-query" function
               (:documentation "Send to the inferior process PROC the string STR.
Pop-up but do not select a window for the inferior process so that
its response can be seen."
                :arguments ("proc" "str"))
                nil [125597 126633])
            ("comint-completion-autolist" variable (:documentation "If non-nil, automatically list possibilities on partial completion.
This mirrors the optional behavior of tcsh.") nil [127627 127830])
            ("comint-completion-addsuffix" variable
               (:documentation "If non-nil, add ` ' to file names.
It can either be a string FILESUFFIX or a cons (DIRSUFFIX . FILESUFFIX)
where DIRSUFFIX is ignored and FILESUFFIX is a string added on unambiguous
or exact completion.
This mirrors the optional behavior of tcsh."
                :default-value t)
                nil [127832 128375])
            ("comint-completion-recexact" variable (:documentation "If non-nil, use shortest completion if characters cannot be added.
This mirrors the optional behavior of tcsh.

A non-nil value is useful if `comint-completion-autolist' is non-nil too.") nil [128377 128654])
            ("comint-completion-fignore" variable (:documentation "List of suffixes to be disregarded during file completion.
This mirrors the optional behavior of bash and tcsh.

Note that this applies to `comint-dynamic-complete-filename' only.") nil [128656 128950])
            ("comint-file-name-prefix" variable
               (:documentation "Prefix prepended to absolute file names taken from process input.
This is used by Comint's and shell's completion functions, and by shell's
directory tracking functions."
                :default-value (purecopy ""))
                nil [128967 129187])
            ("comint-file-name-chars" variable
               (:documentation "String of characters valid in a file name.
Note that all non-ASCII characters are considered valid in a file name
regardless of what this variable says.

This is a good thing to set in mode hooks."
                :default-value (if (memq system-type '(ms-dos windows-nt cygwin)) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-"))
                nil [129189 129546])
            ("comint-file-name-quote-list" variable (:documentation "List of characters to quote with `\\' when in a file name.

This is a good thing to set in mode hooks.") nil [129548 129695])
            ("comint-directory" function
               (:documentation "Return expanded DIRECTORY, with `comint-file-name-prefix' if absolute."
                :arguments ("directory"))
                nil [129698 129932])
            ("comint-word" function
               (:documentation "Return the word of WORD-CHARS at point, or nil if none is found.
Word constituents are considered to be those in WORD-CHARS, which is like the
inside of a \"[...]\" (see `skip-chars-forward'), plus all non-ASCII characters."
                :arguments ("word-chars"))
                nil [129935 130978])
            ("comint-substitute-in-file-name" function
               (:documentation "Return FILENAME with environment variables substituted.
Supports additional environment variable syntax of the command
interpreter (e.g., the percent notation of cmd.exe on Windows)."
                :arguments ("filename"))
                nil [130980 131602])
            ("comint--match-partial-filename" function (:documentation "Return the filename at point as-is, or nil if none is found.
See `comint-word'.") nil [131604 131768])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [131770 133063])
            ("comint--unquote-argument" function (:arguments ("str")) nil [133065 133150])
            ("define-obsolete-function-alias" code nil nil [133151 133252])
            ("comint-match-partial-filename" function (:documentation "Return the unquoted&expanded filename at point, or nil if none is found.
Environment variables are substituted.  See `comint-word'.") nil [133254 133539])
            ("comint-quote-filename" function
               (:documentation "Return FILENAME with magic characters quoted.
Magic characters are those in `comint-file-name-quote-list'."
                :arguments ("filename"))
                nil [133541 134009])
            ("comint-unquote-filename" function
               (:documentation "Return FILENAME with quoted characters unquoted."
                :arguments ("filename"))
                nil [134011 134283])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [134285 134467])
            ("comint-completion-at-point" function nil nil [134469 134578])
            ("define-obsolete-function-alias" code nil nil [134580 134669])
            ("comint-dynamic-complete-filename" function
               (:documentation "Dynamically complete the filename at point.
Completes if after a filename.
This function is similar to `comint-replace-by-expanded-filename', except that
it won't change parts of the filename already entered in the buffer; it just
adds completion characters to the end of the filename.  A completions listing
may be shown in a separate buffer if completion is ambiguous.

Completion is dependent on the value of `comint-completion-addsuffix',
`comint-completion-recexact' and `comint-completion-fignore', and the timing of
completions listing is dependent on the value of `comint-completion-autolist'.

Returns t if successful."
                :user-visible-flag t)
                nil [134671 135602])
            ("comint-filename-completion" function (:documentation "Return completion data for filename at point, if any.") nil [135604 135779])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [135781 136490])
            ("comint-unquote-function" variable
               (:documentation "Function to use for completion of quoted data.
See `completion-table-with-quoting' and `comint-requote-function'."
                :default-value nil)
                nil [136492 136669])
            ("comint-requote-function" variable
               (:documentation "Function to use for completion of quoted data.
See `completion-table-with-quoting' and `comint-unquote-function'."
                :default-value nil)
                nil [136670 136847])
            ("comint--complete-file-name-data" function (:documentation "Return the completion data for file name at point.") nil [136849 138147])
            ("comint-dynamic-complete-as-filename" function (:documentation "Dynamically complete at point as a filename.
See `comint-dynamic-complete-filename'.  Returns t if successful.") nil [138149 138484])
            ("comint-replace-by-expanded-filename" function
               (:documentation "Dynamically expand and complete the filename at point.
Replace the filename with an expanded, canonicalized and
completed replacement, i.e. substituting environment
variables (e.g. $HOME), `~'s, `..', and `.', and making the
filename absolute.  For expansion see `expand-file-name' and
`substitute-in-file-name'.  For completion see
`comint-dynamic-complete-filename'."
                :user-visible-flag t)
                nil [138486 139089])
            ("comint-dynamic-simple-complete" function
               (:documentation "Dynamically complete STUB from CANDIDATES list.
This function inserts completion characters at point by
completing STUB from the strings in CANDIDATES.  If completion is
ambiguous, possibly show a completions listing in a separate
buffer.

Return nil if no completion was inserted.
Return `sole' if completed with the only completion match.
Return `shortest' if completed with the shortest match.
Return `partial' if completed as far as possible.
Return `listed' if a completion listing was shown.

See also `comint-dynamic-complete-filename'."
                :arguments ("stub" "candidates"))
                nil [139092 141360])
            ("comint-dynamic-list-filename-completions" function
               (:documentation "Display a list of possible completions for the filename at point."
                :user-visible-flag t)
                nil [141362 141859])
            ("comint-displayed-dynamic-completions" variable nil nil [142071 142120])
            ("comint-dynamic-list-completions-config" variable nil nil [142122 142173])
            ("comint-dynamic-list-completions" function
               (:documentation "Display a list of sorted COMPLETIONS.
Typing SPC flushes the completions buffer.

The optional argument COMMON-SUBSTRING, if non-nil, should be a string
specifying a common substring for adding the faces
`completions-first-difference' and `completions-common-part' to
the completions."
                :arguments ("completions" "common-substring"))
                nil [142175 145246])
            ("comint-get-next-from-history" function
               (:documentation "After fetching a line from input history, this fetches the following line.
In other words, this recalls the input line after the line you recalled last.
You can use this to repeat a sequence of input lines."
                :user-visible-flag t)
                nil [145249 145698])
            ("comint-accumulate" function
               (:documentation "Accumulate a line to send as input along with more lines.
This inserts a newline so that you can enter more text
to be sent along with this line.  Use \\[comint-send-input]
to send all the accumulated input, at once.
The entire accumulated text becomes one item in the input history
when you send it."
                :user-visible-flag t)
                nil [145700 146216])
            ("comint-goto-process-mark" function
               (:documentation "Move point to the process mark.
The process mark separates output, and input already sent,
from input that has not yet been sent."
                :user-visible-flag t)
                nil [146218 146648])
            ("comint-bol-or-process-mark" function
               (:documentation "Move point to beginning of line (after prompt) or to the process mark.
The first time you use this command, it moves to the beginning of the line
(but after the prompt, if any).  If you repeat it again immediately,
it moves point to the process mark.

The process mark separates the process output, along with input already sent,
from input that has not yet been sent.  Ordinarily, the process mark
is at the beginning of the current input line; but if you have
used \\[comint-accumulate] to send multiple lines at once,
the process mark is at the beginning of the accumulated input."
                :user-visible-flag t)
                nil [146650 147405])
            ("comint-set-process-mark" function
               (:documentation "Set the process mark at point."
                :user-visible-flag t)
                nil [147407 147679])
            ("comint-redirect-verbose" variable (:documentation "If non-nil, print messages each time the redirection filter is invoked.
Also print a message when redirection is completed.") nil [149927 150128])
            ("comint-redirect-filter-functions" variable (:documentation "List of functions to call before inserting redirected process output.
Each function gets one argument, a string containing the text received
from the subprocess.  It should return the string to insert, perhaps
the same string that was received, or perhaps a modified or transformed
string.

The functions on the list are called sequentially, and each one is given
the string returned by the previous one.  The string returned by the
last function is the text that is actually inserted in the redirection buffer.

You can use `add-hook' to add functions to this list
either globally or locally.") nil [150189 150832])
            ("comint-redirect-output-buffer" variable (:documentation "The buffer or list of buffers to put output into.") nil [150857 150953])
            ("comint-redirect-finished-regexp" variable (:documentation "Regular expression that determines when to stop redirection in Comint.
When the redirection filter function is given output that matches this regexp,
the output is inserted as usual, and redirection is completed.") nil [150955 151216])
            ("comint-redirect-insert-matching-regexp" variable (:documentation "If non-nil, the text that ends a redirection is included in it.
More precisely, the text that matches `comint-redirect-finished-regexp'
and therefore terminates an output redirection is inserted in the
redirection target buffer, along with the preceding output.") nil [151218 151535])
            ("comint-redirect-echo-input" variable (:documentation "Non-nil means echo input in the process buffer even during redirection.") nil [151537 151652])
            ("comint-redirect-completed" variable (:documentation "Non-nil if redirection has completed in the current buffer.") nil [151654 151756])
            ("comint-redirect-original-mode-line-process" variable (:documentation "Original mode line for redirected process.") nil [151758 151860])
            ("comint-redirect-perform-sanity-check" variable
               (:documentation "If non-nil, check that redirection is likely to complete successfully.
More precisely, before starting a redirection, verify that the
regular expression `comint-redirect-finished-regexp' that controls
when to terminate it actually matches some text already in the process
buffer.  The idea is that this regular expression should match a prompt
string, and that there ought to be at least one copy of your prompt string
in the process buffer already."
                :default-value t)
                nil [151862 152363])
            ("comint-redirect-subvert-readonly" variable (:documentation "Non-nil means `comint-redirect' can insert into read-only buffers.
This works by binding `inhibit-read-only' around the insertion.
This is useful, for instance, for insertion into Help mode buffers.
You probably want to set it locally to the output buffer.") nil [152365 152671])
            ("comint-redirect-previous-input-string" variable (:documentation "Last redirected line of text.
Allows detection of the end of the redirection in case the
completion string is split between two output segments.") nil [152673 152872])
            ("comint-redirect-setup" function
               (:documentation "Set up for output redirection.
This function sets local variables that are used by `comint-redirect-filter'
to perform redirection.

Output from COMINT-BUFFER is redirected to OUTPUT-BUFFER, until something
in the output matches FINISHED-REGEXP.

If optional argument ECHO-INPUT is non-nil, output is echoed to the
original Comint buffer.

This function is called by `comint-redirect-send-command-to-process',
and does not normally need to be invoked by the end user or programmer."
                :arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input"))
                nil [153010 154177])
            ("comint-redirect-cleanup" function
               (:documentation "End a Comint redirection.  See `comint-redirect-send-command'."
                :user-visible-flag t)
                nil [154179 154700])
            ("defalias" code nil nil [154801 154872])
            ("comint-redirect-filter" function
               (:documentation "Filter function which redirects output from PROCESS to a buffer or buffers.
The variable `comint-redirect-output-buffer' says which buffer(s) to
place output in.

INPUT-STRING is the input from the Comint process.

This function runs as a process filter, and does not need to be invoked by the
end user."
                :arguments ("orig-filter" "process" "input-string"))
                nil [154874 155543])
            ("comint-redirect-preoutput-filter" function
               (:documentation "Comint filter function which redirects Comint output to a buffer or buffers.
The variable `comint-redirect-output-buffer' says which buffer(s) to
place output in.

INPUT-STRING is the input from the Comint process.

This function does not need to be invoked by the end user."
                :arguments ("input-string"))
                nil [155546 158105])
            ("comint-redirect-send-command" function
               (:documentation "Send COMMAND to process in current buffer, with output to OUTPUT-BUFFER.
With prefix arg ECHO, echo output in process buffer.

If NO-DISPLAY is non-nil, do not show the output buffer."
                :user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [158122 158667])
            ("comint-redirect-send-command-to-process" function
               (:documentation "Send COMMAND to PROCESS, with output to OUTPUT-BUFFER.
With prefix arg, echo output in process buffer.

If NO-DISPLAY is non-nil, do not show the output buffer."
                :user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [158684 160181])
            ("comint-redirect-results-list" function
               (:documentation "Send COMMAND to current process.
Return a list of expressions in the output which match REGEXP.
REGEXP-GROUP is the regular expression group in REGEXP to use."
                :arguments ("command" "regexp" "regexp-group"))
                nil [160198 160545])
            ("comint-redirect-results-list-from-process" function
               (:documentation "Send COMMAND to PROCESS.
Return a list of expressions in the output which match REGEXP.
REGEXP-GROUP is the regular expression group in REGEXP to use."
                :arguments ("process" "command" "regexp" "regexp-group"))
                nil [160562 161660])
            ("comint" package nil nil [165189 165206]))          
      :file "comint.el.gz"
      :pointmax 165232
      :fsize 44757
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18785ac"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1861 1878])
            ("widget-event-point" function
               (:documentation "Character position of the end of event if that exists, or nil."
                :arguments ("event"))
                nil [1900 2034])
            ("widget-button-release-event-p" function
               (:documentation "Non-nil if EVENT is a mouse-button-release event object."
                :arguments ("event"))
                nil [2036 2323])
            ("widgets" customgroup
               (:documentation "Customization support for the Widget Library."
                :user-visible-flag t)
                nil [2345 2556])
            ("widget-documentation" customgroup
               (:documentation "Options controlling the display of documentation strings."
                :user-visible-flag t)
                nil [2558 2673])
            ("widget-faces" customgroup
               (:documentation "Faces used by the widget library."
                :user-visible-flag t)
                nil [2675 2774])
            ("widget-documentation-face" variable
               (:documentation "Face used for documentation strings in widgets.
This exists as a variable so it can be set locally in certain buffers."
                :default-value 'widget-documentation)
                nil [2776 2955])
            ("widget-documentation" variable
               (:documentation "Face used for documentation text."
                :default-value '((((class color) (background dark)) (:foreground "lime green")) (((class color) (background light)) (:foreground "dark green")) (t nil))
                :type "face")
                nil [2957 3247])
            ("widget-button-face" variable
               (:documentation "Face used for buttons in widgets.
This exists as a variable so it can be set locally in certain buffers."
                :default-value 'widget-button)
                nil [3249 3400])
            ("widget-button" variable
               (:documentation "Face used for widget buttons."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [3402 3504])
            ("widget-mouse-face" variable
               (:documentation "Face used for widget buttons when the mouse is above them."
                :default-value 'highlight)
                nil [3506 3646])
            ("widget-field" variable
               (:documentation "Face used for editable fields."
                :default-value '((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic))
                :type "face")
                nil [3842 4176])
            ("widget-single-line-field" variable
               (:documentation "Face used for editable fields spanning only a single line."
                :default-value '((((type tty)) :background "green3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic))
                :type "face")
                nil [4178 4601])
            ("widget-princ-to-string" function
               (:documentation "Return string representation of OBJECT, any Lisp object.
No quoting characters are used; no delimiters are printed around
the contents of strings."
                :arguments ("object"))
                nil [5096 5333])
            ("widget-clear-undo" function (:documentation "Clear all undo information.") nil [5335 5459])
            ("widget-menu-max-size" variable
               (:documentation "Largest number of items allowed in a popup-menu.
Larger menus are read through the minibuffer."
                :default-value 40)
                nil [5461 5630])
            ("widget-menu-max-shortcuts" variable
               (:documentation "Largest number of items for which it works to choose one with a character.
For a larger number of items, the minibuffer is used."
                :default-value 40)
                nil [5632 5840])
            ("widget-menu-minibuffer-flag" variable (:documentation "Control how to ask for a choice from the keyboard.
Non-nil means use the minibuffer;
nil means read a single character.") nil [5842 6044])
            ("widget-choose" function
               (:documentation "Choose an item from a list.

First argument TITLE is the name of the list.
Second argument ITEMS is a list whose members are either
 (NAME . VALUE), to indicate selectable items, or just strings to
 indicate unselectable items.
Optional third argument EVENT is an input event.

The user is asked to choose between each NAME from the items alist,
and the VALUE of the chosen element will be returned.  If EVENT is a
mouse event, and the number of elements in items is less than
`widget-menu-max-size', a popup menu will be used, otherwise the
minibuffer."
                :arguments ("title" "items" "event"))
                nil [6046 9423])
            ("widget-field-add-space" variable
               (:documentation "Non-nil means add extra space at the end of editable text fields.
If you don't add the space, it will become impossible to edit a zero
size field."
                :constant-flag t)
                nil [9586 9774])
            ("widget-field-use-before-change" variable
               (:documentation "Non-nil means use `before-change-functions' to track editable fields.
This enables the use of undo.  Using before hooks also means that
the :notify function can't know the new value."
                :default-value t)
                nil [9776 10004])
            ("widget-specify-field" function
               (:documentation "Specify editable button for WIDGET between FROM and TO."
                :arguments ("widget" "from" "to"))
                nil [10006 12118])
            ("widget-specify-secret" function
               (:documentation "Replace text in FIELD with value of `:secret', if non-nil."
                :arguments ("field"))
                nil [12120 12742])
            ("widget-specify-button" function
               (:documentation "Specify button for WIDGET between FROM and TO."
                :arguments ("widget" "from" "to"))
                nil [12744 14054])
            ("widget-mouse-help" function
               (:documentation "Help-echo callback for widgets whose :help-echo is a function."
                :arguments ("_window" "overlay" "_point"))
                nil [14056 14413])
            ("widget-specify-sample" function
               (:documentation "Specify sample for WIDGET between FROM and TO."
                :arguments ("widget" "from" "to"))
                nil [14415 14723])
            ("widget-specify-doc" function
               (:documentation "Specify documentation for WIDGET between FROM and TO."
                :arguments ("widget" "from" "to"))
                nil [14725 15066])
            ("widget-specify-insert" function
               (:documentation "Execute FORM without inheriting any text properties."
                :arguments ("form"))
                nil [15068 15355])
            ("widget-inactive" variable
               (:documentation "Face used for inactive widgets."
                :default-value '((t :inherit shadow))
                :type "face")
                nil [15357 15466])
            ("widget-specify-inactive" function
               (:documentation "Make WIDGET inactive for user modifications."
                :arguments ("widget" "from" "to"))
                nil [15468 16044])
            ("widget-overlay-inactive" function
               (:documentation "Ignoring the arguments, signal an error."
                :arguments ("_junk"))
                nil [16046 16209])
            ("widget-specify-active" function
               (:documentation "Make WIDGET active for user modifications."
                :arguments ("widget"))
                nil [16212 16440])
            ("widget-type" function
               (:documentation "Return the type of WIDGET.  The type is a symbol."
                :arguments ("widget"))
                nil [16466 16566])
            ("widgetp" function
               (:documentation "Return non-nil if WIDGET is a widget."
                :arguments ("widget"))
                nil [16583 16789])
            ("widget-get-indirect" function
               (:documentation "In WIDGET, get the value of PROPERTY.
If the value is a symbol, return its binding.
Otherwise, just return the value."
                :arguments ("widget" "property"))
                nil [16791 17064])
            ("widget-member" function
               (:documentation "Non-nil if there is a definition in WIDGET for PROPERTY."
                :arguments ("widget" "property"))
                nil [17066 17302])
            ("widget-value" function
               (:documentation "Extract the current value of WIDGET."
                :arguments ("widget"))
                nil [17304 17452])
            ("widget-value-set" function
               (:documentation "Set the current value of WIDGET to VALUE."
                :arguments ("widget" "value"))
                nil [17454 17629])
            ("widget-default-get" function
               (:documentation "Extract the default external value of WIDGET."
                :arguments ("widget"))
                nil [17631 18152])
            ("widget-match-inline" function
               (:documentation "In WIDGET, match the start of VALS."
                :arguments ("widget" "vals"))
                nil [18154 18433])
            ("widget-apply-action" function
               (:documentation "Apply :action in WIDGET in response to EVENT."
                :arguments ("widget" "event"))
                nil [18435 18675])
            ("widget-prompt-value" function
               (:documentation "Prompt for a value matching WIDGET, using PROMPT.
The current value is assumed to be VALUE, unless UNBOUND is non-nil."
                :arguments ("widget" "prompt" "value" "unbound"))
                nil [18748 19293])
            ("widget-get-sibling" function
               (:documentation "Get the item WIDGET is assumed to toggle.
This is only meaningful for radio buttons or checkboxes in a list."
                :arguments ("widget"))
                nil [19295 19707])
            ("widget-map-buttons" function
               (:documentation "Map FUNCTION over the buttons in BUFFER.
FUNCTION is called with the arguments WIDGET and MAPARG.

If FUNCTION returns non-nil, the walk is canceled.

The arguments MAPARG, and BUFFER default to nil and (current-buffer),
respectively."
                :arguments ("function" "buffer" "maparg"))
                nil [19709 20373])
            ("widget-image-directory" variable
               (:documentation "Where widget button images are located.
If this variable is nil, widget will try to locate the directory
automatically."
                :default-value (file-name-as-directory (expand-file-name "images/custom" data-directory)))
                nil [20388 20665])
            ("widget-image-enable" variable
               (:documentation "If non-nil, use image buttons in widgets when available."
                :default-value t)
                nil [20667 20814])
            ("widget-image-conversion" variable
               (:documentation "Conversion alist from image formats to file name suffixes."
                :default-value '((xpm ".xpm") (gif ".gif") (png ".png") (jpeg ".jpg" ".jpeg") (xbm ".xbm")))
                nil [20816 21165])
            ("widget-image-find" function
               (:documentation "Create a graphical button from IMAGE.
IMAGE should either already be an image, or be a file name sans
extension (xpm, xbm, gif, jpg, or png) located in
`widget-image-directory' or otherwise where `find-image' will find it."
                :arguments ("image"))
                nil [21167 21993])
            ("widget-button-pressed-face" variable
               (:documentation "Face used for pressed buttons in widgets.
This exists as a variable so it can be set locally in certain
buffers."
                :default-value 'widget-button-pressed)
                nil [21995 22170])
            ("widget-image-insert" function
               (:documentation "In WIDGET, insert the text TAG or, if supported, IMAGE.
IMAGE should either be an image or an image file name sans extension
(xpm, xbm, gif, jpg, or png) located in `widget-image-directory'.

Optional arguments DOWN and INACTIVE are used instead of IMAGE when the
button is pressed or inactive, respectively.  These are currently ignored."
                :arguments ("widget" "tag" "image" "_down" "_inactive"))
                nil [22172 22761])
            ("widget-move-and-invoke" function
               (:documentation "Move to where you click, and if it is an active field, invoke it."
                :user-visible-flag t
                :arguments ("event"))
                nil [22763 23040])
            ("widget-button" customgroup
               (:documentation "The look of various kinds of buttons."
                :user-visible-flag t)
                nil [23056 23144])
            ("widget-button-prefix" variable (:documentation "String used as prefix for buttons.") nil [23146 23260])
            ("widget-button-suffix" variable (:documentation "String used as suffix for buttons.") nil [23262 23376])
            ("widget-create" function
               (:documentation "Create widget of TYPE.
The optional ARGS are additional keyword arguments."
                :arguments ("type" "args"))
                nil [23416 23632])
            ("widget-create-child-and-convert" function
               (:documentation "As part of the widget PARENT, create a child widget TYPE.
The child is converted, using the keyword arguments ARGS."
                :arguments ("parent" "type" "args"))
                nil [23634 24154])
            ("widget-create-child" function
               (:documentation "Create widget of TYPE."
                :arguments ("parent" "type"))
                nil [24156 24545])
            ("widget-create-child-value" function
               (:documentation "Create widget of TYPE with value VALUE."
                :arguments ("parent" "type" "value"))
                nil [24547 25043])
            ("widget-delete" function
               (:documentation "Delete WIDGET."
                :arguments ("widget"))
                nil [25060 25141])
            ("widget-copy" function
               (:documentation "Make a deep copy of WIDGET."
                :arguments ("widget"))
                nil [25143 25249])
            ("widget-convert" function
               (:documentation "Convert TYPE to a widget without inserting it in the buffer.
The optional ARGS are additional keyword arguments."
                :arguments ("type" "args"))
                nil [25251 27137])
            ("widget-insert" function
               (:documentation "Call `insert' with ARGS even if surrounding text is read only."
                :arguments ("args"))
                nil [27154 27344])
            ("widget-convert-text" function
               (:documentation "Return a widget of type TYPE with endpoint FROM TO.
No text will be inserted to the buffer, instead the text between FROM
and TO will be used as the widgets end points.  If optional arguments
BUTTON-FROM and BUTTON-TO are given, these will be used as the widgets
button end points.
Optional ARGS are extra keyword arguments for TYPE."
                :arguments ("type" "from" "to" "button-from" "button-to" "args"))
                nil [27346 28146])
            ("widget-convert-button" function
               (:documentation "Return a widget of type TYPE with endpoint FROM TO.
Optional ARGS are extra keyword arguments for TYPE.
No text will be inserted to the buffer, instead the text between FROM
and TO will be used as the widgets end points, as well as the widgets
button end points."
                :arguments ("type" "from" "to" "args"))
                nil [28148 28527])
            ("widget-leave-text" function
               (:documentation "Remove markers and overlays from WIDGET and its children."
                :arguments ("widget"))
                nil [28529 29146])
            ("define-obsolete-function-alias" code nil nil [29379 29465])
            ("widget-keymap" variable
               (:documentation "Keymap containing useful binding for buffers containing widgets.
Recommended as a parent keymap for modes using widgets.
Note that such modes will need to require wid-edit."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'widget-forward) (define-key map "	" 'widget-backward) (define-key map [(shift tab)] 'widget-backward) (put 'widget-backward :advertised-binding [(shift tab)]) (define-key map [backtab] 'widget-backward) (define-key map [down-mouse-2] 'widget-button-click) (define-key map [down-mouse-1] 'widget-button-click) (define-key map [(control 109)] 'widget-button-press) map))
                nil [29482 30279])
            ("widget-global-map" variable
               (:documentation "Keymap used for events a widget does not handle itself."
                :default-value global-map)
                nil [30281 30378])
            ("make-variable-buffer-local" code nil nil [30379 30426])
            ("widget-field-keymap" variable
               (:documentation "Keymap used inside an editable field."
                :default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" 'widget-kill-line) (define-key map "\211" 'widget-complete) (define-key map "" 'widget-field-activate) (define-key map "" 'widget-end-of-line) map))
                nil [30428 30928])
            ("widget-text-keymap" variable
               (:documentation "Keymap used inside a text field."
                :default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" 'widget-end-of-line) map))
                nil [30930 31281])
            ("widget-field-activate" function
               (:documentation "Invoke the editable field at point."
                :user-visible-flag t
                :arguments ("pos" "event"))
                nil [31283 31570])
            ("widget-button-pressed" variable
               (:documentation "Face used for pressed buttons."
                :default-value '((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:weight bold :underline t)))
                :type "face")
                nil [31572 31814])
            ("widget-button-click-moves-point" variable (:documentation "If non-nil, `widget-button-click' moves point to a button after invoking it.
If nil, point returns to its original position after invoking a button.") nil [31816 32013])
            ("widget-button-click" function
               (:documentation "Invoke the button that the mouse is pointing at."
                :user-visible-flag t
                :arguments ("event"))
                nil [32015 35977])
            ("widget-button-press" function
               (:documentation "Invoke button at POS."
                :user-visible-flag t
                :arguments ("pos" "event"))
                nil [35979 36312])
            ("widget-tabable-at" function
               (:documentation "Return the tabable widget at POS, or nil.
POS defaults to the value of (point)."
                :arguments ("pos"))
                nil [36314 36600])
            ("widget-use-overlay-change" variable
               (:documentation "If non-nil, use overlay change functions to tab around in the buffer.
This is much faster."
                :default-value t)
                nil [36602 36733])
            ("widget-move" function
               (:documentation "Move point to the ARG next field or button.
ARG may be negative to move backward."
                :arguments ("arg"))
                nil [36735 38005])
            ("widget-forward" function
               (:documentation "Move point to the next field or button.
With optional ARG, move across that many fields."
                :user-visible-flag t
                :arguments ("arg"))
                nil [38007 38203])
            ("widget-backward" function
               (:documentation "Move point to the previous field or button.
With optional ARG, move across that many fields."
                :user-visible-flag t
                :arguments ("arg"))
                nil [38205 38411])
            ("defalias" code nil nil [38534 38589])
            ("widget-end-of-line" function
               (:documentation "Go to end of field or end of line, whichever is first.
Trailing spaces at the end of padded fields are not considered part of
the field."
                :user-visible-flag t)
                nil [38591 39188])
            ("widget-kill-line" function
               (:documentation "Kill to end of field or end of line, whichever is first."
                :user-visible-flag t)
                nil [39190 39508])
            ("widget-narrow-to-field" function
               (:documentation "Narrow to field."
                :user-visible-flag t)
                nil [39510 39707])
            ("widget-complete" function
               (:documentation "Complete content of editable field from point.
When not inside a field, signal an error."
                :user-visible-flag t)
                nil [39849 40400])
            ("widget-completions-at-point" function nil nil [40654 40804])
            ("widget-field-new" variable (:documentation "List of all newly created editable fields in the buffer.") nil [40834 40924])
            ("make-variable-buffer-local" code nil nil [40925 40971])
            ("widget-field-list" variable (:documentation "List of all editable fields in the buffer.") nil [40973 41050])
            ("make-variable-buffer-local" code nil nil [41051 41098])
            ("widget-at" function
               (:documentation "The button or field at POS (default, point)."
                :arguments ("pos"))
                nil [41100 41262])
            ("widget-setup" function (:documentation "Setup current buffer so editing string widgets works.") nil [41279 41883])
            ("widget-field-last" variable nil nil [41885 41915])
            ("make-variable-buffer-local" code nil nil [41948 41995])
            ("widget-field-was" variable nil nil [41997 42026])
            ("make-variable-buffer-local" code nil nil [42065 42111])
            ("widget-field-at" function
               (:documentation "Return the widget field at POS, or nil if none."
                :arguments ("pos"))
                nil [42113 42348])
            ("widget-field-buffer" function
               (:documentation "Return the buffer of WIDGET's editing field."
                :arguments ("widget"))
                nil [42350 42606])
            ("widget-field-start" function
               (:documentation "Return the start of WIDGET's editing field."
                :arguments ("widget"))
                nil [42608 42819])
            ("widget-field-end" function
               (:documentation "Return the end of WIDGET's editing field."
                :arguments ("widget"))
                nil [42821 44166])
            ("widget-field-text-end" function (:arguments ("widget")) nil [44168 44619])
            ("widget-field-find" function
               (:documentation "Return the field at POS.
Unlike (get-char-property POS \\='field), this works with empty fields too."
                :arguments ("pos"))
                nil [44621 45051])
            ("widget-before-change" function (:arguments ("from" "to")) nil [45053 45772])
            ("widget-add-change" function nil nil [45774 45988])
            ("widget-after-change" function
               (:documentation "Adjust field size and text properties."
                :arguments ("from" "to" "_old"))
                nil [45990 47014])
            ("widget-parent-action" function
               (:documentation "Tell :parent of WIDGET to handle the :action.
Optional EVENT is the event that triggered the action."
                :arguments ("widget" "event"))
                nil [47108 47325])
            ("widget-children-value-delete" function
               (:documentation "Delete all :children and :buttons in WIDGET."
                :arguments ("widget"))
                nil [47327 47599])
            ("widget-children-validate" function
               (:documentation "All the :children must be valid."
                :arguments ("widget"))
                nil [47601 47897])
            ("widget-child-value-get" function
               (:documentation "Get the value of the first member of :children in WIDGET."
                :arguments ("widget"))
                nil [47899 48053])
            ("widget-child-value-inline" function
               (:documentation "Get the inline value of the first member of :children in WIDGET."
                :arguments ("widget"))
                nil [48055 48233])
            ("widget-child-validate" function
               (:documentation "The result of validating the first member of :children in WIDGET."
                :arguments ("widget"))
                nil [48235 48406])
            ("widget-type-value-create" function
               (:documentation "Convert and instantiate the value of the :type attribute of WIDGET.
Store the newly created widget in the :children attribute.

The value of the :type attribute should be an unconverted widget type."
                :arguments ("widget"))
                nil [48408 48949])
            ("widget-type-default-get" function
               (:documentation "Get default value from the :type attribute of WIDGET.

The value of the :type attribute should be an unconverted widget type."
                :arguments ("widget"))
                nil [48951 49187])
            ("widget-type-match" function
               (:documentation "Non-nil if the :type value of WIDGET matches VALUE.

The value of the :type attribute should be an unconverted widget type."
                :arguments ("widget" "value"))
                nil [49189 49430])
            ("widget-types-copy" function
               (:documentation "Copy :args as widget types in WIDGET."
                :arguments ("widget"))
                nil [49432 49593])
            ("widget-types-convert-widget" function
               (:documentation "Convert :args as widget types in WIDGET."
                :arguments ("widget"))
                nil [49646 49826])
            ("widget-value-convert-widget" function
               (:documentation "Initialize :value from :args in WIDGET."
                :arguments ("widget"))
                nil [49828 50245])
            ("widget-value-value-get" function
               (:documentation "Return the :value property of WIDGET."
                :arguments ("widget"))
                nil [50247 50357])
            ("define-widget" code nil nil [50386 51475])
            ("widget--completing-widget" variable nil nil [51477 51511])
            ("widget-default-completions" function
               (:documentation "Return completion data, like `completion-at-point-functions' would."
                :arguments ("widget"))
                nil [51513 52155])
            ("widget-default-create" function
               (:documentation "Create WIDGET at point in the current buffer."
                :arguments ("widget"))
                nil [52157 54610])
            ("widget-default-format-handler" function (:arguments ("_widget" "escape")) nil [54612 54705])
            ("widget-default-button-face-get" function (:arguments ("widget")) nil [54707 54968])
            ("widget-default-mouse-face-get" function (:arguments ("widget")) nil [54970 55225])
            ("widget-default-sample-face-get" function (:arguments ("widget")) nil [55227 55332])
            ("widget-default-delete" function
               (:documentation "Remove widget from the buffer."
                :arguments ("widget"))
                nil [55334 56267])
            ("widget-default-value-set" function
               (:documentation "Recreate widget with new value."
                :arguments ("widget" "value"))
                nil [56269 57125])
            ("widget-default-value-inline" function
               (:documentation "Wrap value in a list unless it is inline."
                :arguments ("widget"))
                nil [57127 57313])
            ("widget-default-default-get" function
               (:documentation "Get `:value'."
                :arguments ("widget"))
                nil [57315 57405])
            ("widget-default-menu-tag-get" function
               (:documentation "Use tag or value for menus."
                :arguments ("widget"))
                nil [57407 57609])
            ("widget-default-active" function
               (:documentation "Return t if this widget is active (user modifiable)."
                :arguments ("widget"))
                nil [57611 57903])
            ("widget-default-deactivate" function
               (:documentation "Make WIDGET inactive for user modifications."
                :arguments ("widget"))
                nil [57905 58093])
            ("widget-default-action" function
               (:documentation "Notify the parent when a widget changes."
                :arguments ("widget" "event"))
                nil [58095 58308])
            ("widget-default-notify" function
               (:documentation "Pass notification to parent."
                :arguments ("widget" "_child" "event"))
                nil [58310 58443])
            ("widget-default-prompt-value" function
               (:documentation "Read an arbitrary value."
                :arguments ("_widget" "prompt" "_value" "_unbound"))
                nil [58445 58569])
            ("widget-docstring" function
               (:documentation "Return the documentation string specified by WIDGET, or nil if none.
If WIDGET has a `:doc' property, that specifies the documentation string.
Otherwise, try the `:documentation-property' property.  If this
is a function, call it with the widget's value as an argument; if
it is a symbol, use this symbol together with the widget's value
as the argument to `documentation-property'."
                :arguments ("widget"))
                nil [58571 59586])
            ("define-widget" code nil nil [59612 59960])
            ("widget-item-value-create" function
               (:documentation "Insert the printed representation of the value."
                :arguments ("widget"))
                nil [59962 60109])
            ("widget-item-match" function (:arguments ("widget" "value")) nil [60111 60231])
            ("widget-item-match-inline" function (:arguments ("widget" "vals")) nil [60233 60557])
            ("widget-sublist" function
               (:documentation "Return the sublist of LIST from START to END.
If END is omitted, it defaults to the length of LIST."
                :arguments ("list" "start" "end"))
                nil [60559 60913])
            ("widget-item-action" function (:arguments ("widget" "event")) nil [60915 61036])
            ("widget-push-button-prefix" variable
               (:documentation "String used as prefix for buttons."
                :default-value "[")
                nil [61287 61407])
            ("widget-push-button-suffix" variable
               (:documentation "String used as suffix for buttons."
                :default-value "]")
                nil [61409 61529])
            ("define-widget" code nil nil [61531 61696])
            ("widget-push-button-value-create" function
               (:documentation "Insert text representing the `on' and `off' states."
                :arguments ("widget"))
                nil [61698 62118])
            ("widget-link-prefix" variable
               (:documentation "String used as prefix for links."
                :default-value "[")
                nil [62270 62381])
            ("widget-link-suffix" variable
               (:documentation "String used as suffix for links."
                :default-value "]")
                nil [62383 62494])
            ("define-widget" code nil nil [62496 63125])
            ("define-widget" code nil nil [63156 63251])
            ("widget-info-link-action" function
               (:documentation "Open the info node specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [63253 63385])
            ("define-widget" code nil nil [63415 63506])
            ("widget-url-link-action" function
               (:documentation "Open the URL specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [63508 63639])
            ("define-widget" code nil nil [63674 63782])
            ("widget-function-link-action" function
               (:documentation "Show the function specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [63784 63932])
            ("define-widget" code nil nil [63967 64075])
            ("widget-variable-link-action" function
               (:documentation "Show the variable specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [64077 64225])
            ("define-widget" code nil nil [64256 64345])
            ("widget-file-link-action" function
               (:documentation "Find the file specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [64347 64479])
            ("define-widget" code nil nil [64519 64646])
            ("widget-emacs-library-link-action" function
               (:documentation "Find the Emacs library file specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [64648 64820])
            ("define-widget" code nil nil [64863 65010])
            ("widget-emacs-commentary-link-action" function
               (:documentation "Find the Commentary section of the Emacs file specified by WIDGET."
                :arguments ("widget" "_event"))
                nil [65012 65196])
            ("define-widget" code nil nil [65232 66047])
            ("widget-field-history" variable (:documentation "History of field minibuffer edits.") nil [66049 66121])
            ("widget-field-prompt-internal" function
               (:documentation "Read string for WIDGET prompting with PROMPT.
INITIAL is the initial input and HISTORY is a symbol containing
the earlier input."
                :arguments ("_widget" "prompt" "initial" "history"))
                nil [66123 66364])
            ("widget-field-prompt-value" function
               (:documentation "Prompt for a string."
                :arguments ("widget" "prompt" "value" "unbound"))
                nil [66366 66707])
            ("widget-edit-functions" variable nil nil [66709 66743])
            ("widget-field-action" function
               (:documentation "Move to next field."
                :arguments ("widget" "_event"))
                nil [66745 66896])
            ("widget-field-validate" function
               (:documentation "Valid if the content matches `:valid-regexp'."
                :arguments ("widget"))
                nil [66898 67093])
            ("widget-field-value-set" function
               (:documentation "Set an editable text field WIDGET to VALUE"
                :arguments ("widget" "value"))
                nil [67095 67452])
            ("widget-field-value-create" function
               (:documentation "Create an editable text field."
                :arguments ("widget"))
                nil [67454 68289])
            ("widget-field-value-delete" function
               (:documentation "Remove the widget from the list of active editing fields."
                :arguments ("widget"))
                nil [68291 68690])
            ("widget-field-value-get" function
               (:documentation "Return current text in editing field.
Normally, trailing spaces within the editing field are truncated.
But if NO-TRUNCATE is non-nil, include them."
                :arguments ("widget" "no-truncate"))
                nil [68692 69497])
            ("widget-field-match" function (:arguments ("_widget" "value")) nil [69499 69582])
            ("define-widget" code nil nil [69608 69701])
            ("define-widget" code nil nil [69734 70351])
            ("widget-choice-value-create" function
               (:documentation "Insert the first choice that matches the value."
                :arguments ("widget"))
                nil [70353 71373])
            ("widget-choice-default-get" function (:arguments ("widget")) nil [71375 71511])
            ("widget-choice-toggle" variable (:documentation "If non-nil, a binary choice will just toggle between the values.
Otherwise, the user will explicitly have to choose between the values
when he invoked the menu.") nil [71513 71749])
            ("widget-choice-mouse-down-action" function (:arguments ("widget" "_event")) nil [71751 72370])
            ("widget-choice-action" function (:arguments ("widget" "event")) nil [72372 73815])
            ("widget-choice-validate" function (:arguments ("widget")) nil [73817 74043])
            ("widget-choice-match" function (:arguments ("widget" "value")) nil [74045 74334])
            ("widget-choice-match-inline" function (:arguments ("widget" "vals")) nil [74336 74631])
            ("define-widget" code nil nil [74659 74877])
            ("widget-toggle-value-create" function
               (:documentation "Insert text representing the `on' and `off' states."
                :arguments ("widget"))
                nil [74879 75276])
            ("widget-toggle-action" function (:arguments ("widget" "event")) nil [75278 75504])
            ("define-widget" code nil nil [75534 75947])
            ("widget-checkbox-action" function
               (:documentation "Toggle checkbox, notify parent, and set active state of sibling."
                :arguments ("widget" "event"))
                nil [75949 76309])
            ("define-widget" code nil nil [76340 76751])
            ("widget-checklist-value-create" function (:arguments ("widget")) nil [76753 77076])
            ("widget-checklist-add-item" function
               (:documentation "Create checklist item in WIDGET of type TYPE.
If the item is checked, CHOSEN is a cons whose cdr is the value."
                :arguments ("widget" "type" "chosen"))
                nil [77078 78707])
            ("widget-checklist-match" function (:arguments ("widget" "vals")) nil [78709 78890])
            ("widget-checklist-match-inline" function (:arguments ("widget" "vals")) nil [78892 79544])
            ("widget-checklist-match-find" function
               (:documentation "Find the vals which match a type in the checklist.
Return an alist of (TYPE MATCH)."
                :arguments ("widget" "vals"))
                nil [79546 80207])
            ("widget-checklist-match-up" function
               (:documentation "Return the first type from ARGS that matches VALS."
                :arguments ("args" "vals"))
                nil [80209 80492])
            ("widget-checklist-value-get" function (:arguments ("widget")) nil [80494 80857])
            ("widget-checklist-validate" function (:arguments ("widget")) nil [80859 81238])
            ("define-widget" code nil nil [81265 81348])
            ("define-widget" code nil nil [81381 81532])
            ("define-widget" code nil nil [81566 81818])
            ("widget-radio-button-notify" function (:arguments ("widget" "_child" "event")) nil [81820 81969])
            ("define-widget" code nil nil [82010 82560])
            ("widget-radio-value-create" function (:arguments ("widget")) nil [82562 82782])
            ("widget-radio-add-item" function
               (:documentation "Add to radio widget WIDGET a new radio button item of type TYPE."
                :arguments ("widget" "type"))
                nil [82784 84443])
            ("widget-radio-value-get" function (:arguments ("widget")) nil [84445 84607])
            ("widget-radio-chosen" function
               (:documentation "Return the widget representing the chosen radio button."
                :arguments ("widget"))
                nil [84609 84977])
            ("widget-radio-value-inline" function (:arguments ("widget")) nil [84979 85358])
            ("widget-radio-value-set" function (:arguments ("widget" "value")) nil [85360 86047])
            ("widget-radio-validate" function (:arguments ("widget")) nil [86049 86454])
            ("widget-radio-action" function (:arguments ("widget" "child" "event")) nil [86456 87083])
            ("define-widget" code nil nil [87118 87331])
            ("widget-insert-button-action" function (:arguments ("widget" "_event")) nil [87333 87526])
            ("define-widget" code nil nil [87561 87755])
            ("widget-delete-button-action" function (:arguments ("widget" "_event")) nil [87757 87946])
            ("define-widget" code nil nil [88140 88736])
            ("widget-editable-list-format-handler" function (:arguments ("widget" "escape")) nil [88738 89196])
            ("widget-editable-list-value-create" function (:arguments ("widget")) nil [89198 89856])
            ("widget-editable-list-value-get" function (:arguments ("widget")) nil [89858 90054])
            ("widget-editable-list-match" function (:arguments ("widget" "value")) nil [90056 90263])
            ("widget-editable-list-match-inline" function (:arguments ("widget" "value")) nil [90265 90592])
            ("widget-editable-list-insert-before" function (:arguments ("widget" "before")) nil [90594 91472])
            ("widget-editable-list-delete-at" function (:arguments ("widget" "child")) nil [91474 92386])
            ("widget-editable-list-entry-create" function (:arguments ("widget" "value" "conv")) nil [92388 94133])
            ("define-widget" code nil nil [94160 94567])
            ("widget-group-value-create" function (:arguments ("widget")) nil [94569 95294])
            ("widget-group-default-get" function (:arguments ("widget")) nil [95296 95434])
            ("widget-group-match" function (:arguments ("widget" "vals")) nil [95436 95629])
            ("widget-group-match-inline" function (:arguments ("widget" "vals")) nil [95631 96048])
            ("define-widget" code nil nil [96080 96757])
            ("defalias" code nil nil [96759 96829])
            ("define-widget" code nil nil [96927 97109])
            ("widget-documentation-link-action" function
               (:documentation "Display documentation for WIDGET's value.  Ignore optional argument EVENT."
                :arguments ("widget" "_event"))
                nil [97111 97828])
            ("widget-documentation-links" variable
               (:documentation "Add hyperlinks to documentation strings when non-nil."
                :default-value t)
                nil [97830 97976])
            ("widget-documentation-link-regexp" variable
               (:documentation "Regexp for matching potential links in documentation strings.
The first group should be the link itself."
                :default-value "['`\342\200\230]\\([^
 `'\342\200\230\342\200\231]+\\)['\342\200\231]")
                nil [97978 98207])
            ("widget-documentation-link-p" variable
               (:documentation "Predicate used to test if a string is useful as a link.
The value should be a function.  The function will be called with one
argument, a string, and should return non-nil if there should be a
link for that string."
                :default-value 'intern-soft)
                nil [98209 98571])
            ("widget-documentation-link-type" variable
               (:documentation "Widget type used for links in documentation strings."
                :default-value 'documentation-link)
                nil [98573 98739])
            ("widget-documentation-link-add" function (:arguments ("widget" "from" "to")) nil [98741 99511])
            ("define-widget" code nil nil [99553 99776])
            ("widget-documentation-string-value-create" function (:arguments ("widget")) nil [99778 101291])
            ("widget-documentation-string-indent-to" function (:arguments ("col")) nil [101293 101524])
            ("widget-documentation-string-action" function (:arguments ("widget" "_ignore")) nil [101526 101822])
            ("widget-add-documentation-string-button" function
               (:documentation "Insert a new `documentation-string' widget based on WIDGET.
The new widget becomes a child of WIDGET, and is also added to
its `:buttons' list.  The documentation string is found from
WIDGET using the function `widget-docstring'.
Optional ARGS specifies additional keyword arguments for the
`documentation-string' widget."
                :arguments ("widget" "args"))
                nil [101824 102746])
            ("define-widget" code nil nil [102772 102885])
            ("widget-const-prompt-value" function (:arguments ("widget" "_prompt" "_value" "_unbound")) nil [102887 103013])
            ("define-widget" code nil nil [103015 103225])
            ("define-widget" code nil nil [103227 103365])
            ("define-widget" code nil nil [103367 103742])
            ("widget-string-prompt-value-history" variable (:documentation "History of input to `widget-string-prompt-value'.") nil [103744 103845])
            ("define-widget" code nil nil [103847 104035])
            ("define-widget" code nil nil [104037 104268])
            ("widget-regexp-match" function (:arguments ("_widget" "value")) nil [104270 104449])
            ("widget-regexp-validate" function
               (:documentation "Check that the value of WIDGET is a valid regexp."
                :arguments ("widget"))
                nil [104451 104705])
            ("define-widget" code nil nil [104707 105020])
            ("widget-file-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [105022 105438])
            ("define-widget" code nil nil [106049 106179])
            ("widget-symbol-prompt-value-history" variable (:documentation "History of input to `widget-symbol-prompt-value'.") nil [106181 106282])
            ("define-widget" code nil nil [106284 106815])
            ("widget-symbol-prompt-internal" function (:arguments ("widget" "prompt" "initial" "history")) nil [106817 107135])
            ("widget-function-prompt-value-history" variable (:documentation "History of input to `widget-function-prompt-value'.") nil [107137 107242])
            ("define-widget" code nil nil [107244 107887])
            ("widget-variable-prompt-value-history" variable (:documentation "History of input to `widget-variable-prompt-value'.") nil [107889 107994])
            ("define-widget" code nil nil [107996 108272])
            ("define-widget" code nil nil [108274 108915])
            ("widget-coding-system-prompt-value" function
               (:documentation "Read coding-system from minibuffer."
                :arguments ("widget" "prompt" "value" "_unbound"))
                nil [108917 109303])
            ("widget-coding-system-action" function (:arguments ("widget" "event")) nil [109305 109604])
            ("widget-key-sequence-prompt-value-history" variable (:documentation "History of input to `widget-key-sequence-prompt-value'.") nil [109659 109772])
            ("widget-key-sequence-default-value" variable
               (:documentation "Default value for an empty key sequence."
                :default-value [ignore])
                nil [109774 109870])
            ("widget-key-sequence-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map widget-field-keymap) (define-key map [(control 113)] 'widget-key-sequence-read-event) map)) nil [109872 110065])
            ("define-widget" code nil nil [110067 110766])
            ("widget-key-sequence-read-event" function (:arguments ("ev")) nil [110768 111890])
            ("widget-key-sequence-validate" function (:arguments ("widget")) nil [111892 112134])
            ("widget-key-sequence-value-to-internal" function (:arguments ("widget" "value")) nil [112136 112338])
            ("widget-key-sequence-value-to-external" function (:arguments ("_widget" "value")) nil [112340 112548])
            ("define-widget" code nil nil [112552 112960])
            ("widget-sexp-value-to-internal" function (:arguments ("_widget" "value")) nil [112962 113310])
            ("widget-sexp-validate" function (:arguments ("widget")) nil [113312 114301])
            ("widget-sexp-prompt-value-history" variable (:documentation "History of input to `widget-sexp-prompt-value'.") nil [114303 114400])
            ("widget-sexp-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [114402 114824])
            ("define-widget" code nil nil [114826 115206])
            ("widget-restricted-sexp-match" function (:arguments ("widget" "value")) nil [115208 115667])
            ("define-widget" code nil nil [115670 115842])
            ("define-widget" code nil nil [115844 116067])
            ("define-widget" code nil nil [116069 116279])
            ("define-widget" code nil nil [116281 116821])
            ("define-widget" code nil nil [116823 116906])
            ("define-widget" code nil nil [116908 117160])
            ("widget-vector-match" function (:arguments ("widget" "value")) nil [117162 117316])
            ("define-widget" code nil nil [117318 117595])
            ("widget-cons-match" function (:arguments ("widget" "value")) nil [117597 117747])
            ("define-widget" code nil nil [117801 119875])
            ("define-widget" code nil nil [119926 120105])
            ("widget-plist-value-type" variable nil nil [120107 120139])
            ("widget-plist-convert-widget" function (:arguments ("widget")) nil [120159 120691])
            ("widget-plist-convert-option" function (:arguments ("option")) nil [120693 121117])
            ("define-widget" code nil nil [121170 121351])
            ("widget-alist-value-type" variable nil nil [121353 121385])
            ("widget-alist-convert-widget" function (:arguments ("widget")) nil [121405 121937])
            ("widget-alist-convert-option" function (:arguments ("option")) nil [121939 122352])
            ("define-widget" code nil nil [122355 122612])
            ("widget-choice-prompt-value" function
               (:documentation "Make a choice."
                :arguments ("widget" "prompt" "value" "_unbound"))
                nil [122614 123738])
            ("define-widget" code nil nil [123741 123903])
            ("define-widget" code nil nil [123905 124027])
            ("define-widget" code nil nil [124029 124137])
            ("define-widget" code nil nil [124139 124446])
            ("widget-boolean-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [124448 124559])
            ("define-widget" code nil nil [124603 124973])
            ("widget-color-value-create" function (:arguments ("widget")) nil [124975 125213])
            ("widget-color--choose-action" function (:arguments ("widget" "_event")) nil [125215 125647])
            ("widget-color-sample-face-get" function (:arguments ("widget")) nil [125649 125888])
            ("widget-color-action" function
               (:documentation "Prompt for a color."
                :arguments ("widget" "event"))
                nil [125890 126234])
            ("widget-color-notify" function
               (:documentation "Update the sample, and notify the parent."
                :arguments ("widget" "child" "event"))
                nil [126236 126490])
            ("widget-echo-help" function
               (:documentation "Display help-echo text for widget at POS."
                :arguments ("pos"))
                nil [126512 126809])
            ("wid-edit" package nil nil [126825 126844]))          
      :file "wid-edit.el.gz"
      :pointmax 126872
      :fsize 30400
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18785cc"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("indent" customgroup
               (:documentation "Indentation commands."
                :user-visible-flag t)
                nil [1005 1070])
            ("standard-indent" variable
               (:documentation "Default number of columns for margin-changing functions to indent."
                :default-value 4)
                nil [1072 1206])
            ("indent-line-function" variable
               (:documentation "Function to indent the current line.
This function will be called with no arguments.
If it is called somewhere where auto-indentation cannot be done
(e.g. inside a string), the function should simply return `noindent'.
Setting this function is all you need to make TAB indent appropriately.
Don't rebind TAB unless you really need to."
                :default-value 'indent-relative)
                nil [1208 1594])
            ("tab-always-indent" variable
               (:documentation "Controls the operation of the TAB key.
If t, hitting TAB always just indents the current line.
If nil, hitting TAB indents the current line if point is at the left margin
or in the line's indentation, otherwise it inserts a \"real\" TAB character.
If `complete', TAB first tries to indent the current line, and if the line
was already indented, then try to complete the thing at point.

Some programming language modes have their own variable to control this,
e.g., `c-tab-always-indent', and do not respect this variable."
                :default-value t)
                nil [1596 2351])
            ("indent-according-to-mode" function
               (:documentation "Indent line in proper way for current major mode.
Normally, this is done by calling the function specified by the
variable `indent-line-function'.  However, if the value of that
variable is `indent-relative' or `indent-relative-maybe', handle
it specially (since those functions are used for tabbing); in
that case, indent by aligning to the previous non-blank line."
                :user-visible-flag t)
                nil [2354 3473])
            ("indent--default-inside-comment" function nil nil [3475 4034])
            ("indent-for-tab-command" function
               (:documentation "Indent the current line or region, or insert a tab, as appropriate.
This function either inserts a tab, or indents the current line,
or performs symbol completion, depending on `tab-always-indent'.
The function called to actually indent the line or insert a tab
is given by the variable `indent-line-function'.

If a prefix argument is given, after this function indents the
current line or inserts a tab, it also rigidly indents the entire
balanced expression which starts at the beginning of the current
line, to reflect the current line's indentation.

In most major modes, if point was in the current line's
indentation, it is moved to the first non-whitespace character
after indenting; otherwise it stays at the same position relative
to the text.

If `transient-mark-mode' is turned on and the region is active,
this function instead calls `indent-region'.  In this case, any
prefix argument is ignored."
                :user-visible-flag t
                :arguments ("arg"))
                nil [4036 6747])
            ("indent--funcall-widened" function (:arguments ("func")) nil [6749 6839])
            ("insert-tab" function (:arguments ("arg")) nil [6841 7133])
            ("indent-rigidly--current-indentation" function
               (:documentation "Return the smallest indentation in range from BEG to END.
Blank lines are ignored."
                :arguments ("beg" "end"))
                nil [7135 7620])
            ("indent-rigidly-map" variable
               (:documentation "Transient keymap for adjusting indentation interactively.
It is activated by calling `indent-rigidly' interactively."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [left] 'indent-rigidly-left) (define-key map [right] 'indent-rigidly-right) (define-key map [S-left] 'indent-rigidly-left-to-tab-stop) (define-key map [S-right] 'indent-rigidly-right-to-tab-stop) map))
                nil [7622 8045])
            ("indent-rigidly" function
               (:documentation "Indent all lines starting in the region.
If called interactively with no prefix argument, activate a
transient mode in which the indentation can be adjusted interactively
by typing \\<indent-rigidly-map>\\[indent-rigidly-left], \\[indent-rigidly-right], \\[indent-rigidly-left-to-tab-stop], or \\[indent-rigidly-right-to-tab-stop].
Typing any other key deactivates the transient mode.

If called from a program, or interactively with prefix ARG,
indent all lines starting in the region forward by ARG columns.
If called from a program, START and END specify the beginning and
end of the text to act on, in place of the region.

Negative values of ARG indent backward, so you can remove all
indentation by specifying a large negative ARG."
                :user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [8047 9928])
            ("indent-rigidly--pop-undo" function nil nil [9930 10217])
            ("indent-rigidly-left" function
               (:documentation "Indent all lines between BEG and END leftward by one space."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [10219 10467])
            ("indent-rigidly-right" function
               (:documentation "Indent all lines between BEG and END rightward by one space."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [10469 10719])
            ("indent-rigidly-left-to-tab-stop" function
               (:documentation "Indent all lines between BEG and END leftward to a tab stop."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [10721 11119])
            ("indent-rigidly-right-to-tab-stop" function
               (:documentation "Indent all lines between BEG and END rightward to a tab stop."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [11121 11517])
            ("indent-line-to" function
               (:documentation "Indent current line to COLUMN.
This function removes or adds spaces and tabs at beginning of line
only if necessary.  It leaves point at end of indentation."
                :arguments ("column"))
                nil [11519 12476])
            ("current-left-margin" function (:documentation "Return the left margin to use for this line.
This is the value of the buffer-local variable `left-margin' plus the value
of the `left-margin' text-property at the start of the line.") nil [12478 12882])
            ("move-to-left-margin" function
               (:documentation "Move to the left margin of the current line.
With optional argument, move forward N-1 lines first.
The column moved to is the one given by the `current-left-margin' function.
If the line's indentation appears to be wrong, and this command is called
interactively or with optional argument FORCE, it will be fixed."
                :user-visible-flag t
                :arguments ("n" "force"))
                nil [12884 13799])
            ("indent-to-left-margin" function (:documentation "Indent current line to the column given by `current-left-margin'.") nil [13899 14210])
            ("delete-to-left-margin" function
               (:documentation "Remove left margin indentation from a region.
This deletes to the column given by `current-left-margin'.
In no case will it delete non-whitespace.
Args FROM and TO are optional; default is the whole buffer."
                :arguments ("from" "to"))
                nil [14212 14776])
            ("set-left-margin" function
               (:documentation "Set the left margin of the region to WIDTH.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.

Interactively, WIDTH is the prefix argument, if specified.
Without prefix argument, the command prompts for WIDTH."
                :user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14778 15653])
            ("set-right-margin" function
               (:documentation "Set the right margin of the region to WIDTH.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.

Interactively, WIDTH is the prefix argument, if specified.
Without prefix argument, the command prompts for WIDTH."
                :user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [15655 16214])
            ("alter-text-property" function
               (:documentation "Programmatically change value of a text-property.
For each region between FROM and TO that has a single value for PROPERTY,
apply FUNCTION to that value and sets the property to the function's result.
Optional fifth argument OBJECT specifies the string or buffer to operate on."
                :arguments ("from" "to" "prop" "func" "object"))
                nil [16216 16884])
            ("increase-left-margin" function
               (:documentation "Increase or decrease the left-margin of the region.
With no prefix argument, this adds `standard-indent' of indentation.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.
If `auto-fill-mode' is active, re-fill the region to fit the new margin."
                :user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16886 17720])
            ("decrease-left-margin" function
               (:documentation "Make the left margin of the region smaller.
With no prefix argument, decrease the indentation by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.
If `auto-fill-mode' is active, re-fill the region to fit the new margin."
                :user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17722 18203])
            ("increase-right-margin" function
               (:documentation "Increase the right-margin of the region.
With no prefix argument, increase the right margin by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.  A negative argument decreases
the right margin width.
If `auto-fill-mode' is active, re-fill the region to fit the new margin."
                :user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [18205 18858])
            ("decrease-right-margin" function
               (:documentation "Make the right margin of the region smaller.
With no prefix argument, decrease the right margin by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
of width to remove, in characters.  A negative argument increases
the right margin width.
If `auto-fill-mode' is active, re-fills region to fit in new margin."
                :user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [18860 19391])
            ("beginning-of-line-text" function
               (:documentation "Move to the beginning of the text on this line.
With optional argument, move forward N-1 lines first.
From the beginning of the line, moves past the left-margin indentation, the
fill-prefix, and any indentation used for centering or right-justifying the
line, but does not move past any whitespace that was explicitly inserted
(such as a tab used to indent the first line of a paragraph)."
                :user-visible-flag t
                :arguments ("n"))
                nil [19393 20407])
            ("indent-region-function" variable
               (:documentation "Short cut function to indent region using `indent-according-to-mode'.
Default is to really run `indent-according-to-mode' on each line."
                :default-value nil)
                nil [20409 20609])
            ("indent-region" function
               (:documentation "Indent each nonblank line in the region.
A numeric prefix argument specifies a column: indent each line to that column.

With no prefix argument, the command chooses one of these methods and
indents all the lines with it:

  1) If `fill-prefix' is non-nil, insert `fill-prefix' at the
     beginning of each line in the region that does not already begin
     with it.
  2) If `indent-region-function' is non-nil, call that function
     to indent the region.
  3) Indent each line via `indent-according-to-mode'.

Called from a program, START and END specify the region to indent.
If the third argument COLUMN is an integer, it specifies the
column to indent to; if it is nil, use one of the three methods above."
                :user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [20611 22674])
            ("indent-region-line-by-line" function (:arguments ("start" "end")) nil [22676 23164])
            ("define-obsolete-function-alias" code nil nil [23166 23266])
            ("indent-relative-first-indent-point" function
               (:documentation "Indent the current line like the previous nonblank line.
Indent to the first indentation position in the previous nonblank
line if that position is greater than the current column.

See also `indent-relative'."
                :user-visible-flag t)
                nil [23268 23565])
            ("indent-relative" function
               (:documentation "Space out to under next indent point in previous nonblank line.
An indent point is a non-whitespace character following whitespace.
The following line shows the indentation points in this line.
    ^         ^    ^     ^   ^           ^      ^  ^    ^
If FIRST-ONLY is non-nil, then only the first indent point is
considered.

If the previous nonblank line has no indent points beyond the
column point starts at, then `tab-to-tab-stop' is done, if both
FIRST-ONLY and UNINDENTED-OK are nil, otherwise nothing is done
in this case.

See also `indent-relative-first-indent-point'."
                :user-visible-flag t
                :arguments ("first-only" "unindented-ok"))
                nil [23567 25114])
            ("tab-stop-list" variable (:documentation "List of tab stop positions used by `tab-to-tab-stop'.
This should be nil, or a list of integers, ordered from smallest to largest.
It implicitly extends to infinity through repetition of the last step.
For example, (1 2 5) is equivalent to (1 2 5 8 11 ...).  If the list has
fewer than 2 elements, `tab-width' is used as the \"last step\".
A value of nil means a tab stop every `tab-width' columns.") nil [25116 25674])
            ("edit-tab-stops-map" variable
               (:documentation "Keymap used in `edit-tab-stops'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "" 'edit-tab-stops-note-changes) (define-key map "" 'edit-tab-stops-note-changes) map))
                nil [25676 25907])
            ("edit-tab-stops-buffer" variable (:documentation "Buffer whose tab stops are being edited.
This matters if the variable `tab-stop-list' is local in that buffer.") nil [25909 26058])
            ("edit-tab-stops" function
               (:documentation "Edit the tab stops used by `tab-to-tab-stop'.
Creates a buffer *Tab Stops* containing text describing the tab stops.
A colon indicates a column where there is a tab stop.
You can add or remove colons and then do \\<edit-tab-stops-map>\\[edit-tab-stops-note-changes] to make changes take effect."
                :user-visible-flag t)
                nil [26060 27083])
            ("edit-tab-stops-note-changes" function
               (:documentation "Put edited tab stops into effect."
                :user-visible-flag t)
                nil [27085 27485])
            ("indent-next-tab-stop" function
               (:documentation "Return the next tab stop after COLUMN.
If PREV is non-nil, return the previous one instead."
                :arguments ("column" "prev"))
                nil [27487 28486])
            ("indent-accumulate-tab-stops" function
               (:documentation "Get a list of tab stops before LIMIT (inclusive)."
                :arguments ("limit"))
                nil [28488 28728])
            ("tab-to-tab-stop" function
               (:documentation "Insert spaces or tabs to next defined tab-stop column.
The variable `tab-stop-list' is a list of columns at which there are tab stops.
Use \\[edit-tab-stops] to edit them interactively."
                :user-visible-flag t)
                nil [28730 29159])
            ("move-to-tab-stop" function
               (:documentation "Move point to next defined tab-stop column.
The variable `tab-stop-list' is a list of columns at which there are tab stops.
Use \\[edit-tab-stops] to edit them interactively."
                :user-visible-flag t)
                nil [29161 30021])
            ("define-key" code nil nil [30023 30075])
            ("define-key" code nil nil [30076 30119])
            ("define-key" code nil nil [30120 30163])
            ("define-key" code nil nil [30164 30205]))          
      :file "indent.el.gz"
      :pointmax 30231
      :fsize 8335
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1874314"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [10482 10499])
            ("cl-lib" include nil nil [10519 10536])
            ("font-lock" customgroup
               (:documentation "Font Lock mode text highlighting package."
                :user-visible-flag t
                :value '((jit-lock custom-group)))
                nil [10573 10815])
            ("font-lock-faces" customgroup
               (:documentation "Faces for highlighting text."
                :user-visible-flag t)
                nil [10817 10923])
            ("font-lock-extra-types" customgroup
               (:documentation "Extra mode-specific type names for highlighting declarations."
                :user-visible-flag t)
                nil [10925 11047])
            ("font-lock-maximum-size" variable
               (:documentation "Maximum buffer size for unsupported buffer fontification.
When `font-lock-support-mode' is nil, only buffers smaller than
this are fontified.  This variable has no effect if a Font Lock
support mode (usually `jit-lock-mode') is enabled.

If nil, means size is irrelevant.
If a list, each element should be a cons pair of the form (MAJOR-MODE . SIZE),
where MAJOR-MODE is a symbol or t (meaning the default).  For example:
 ((c-mode . 256000) (c++-mode . 256000) (rmail-mode . 1048576))
means that the maximum size is 250K for buffers in C or C++ modes, one megabyte
for buffers in Rmail mode, and size is irrelevant otherwise."
                :default-value 256000)
                nil [11070 12126])
            ("make-obsolete-variable" code nil nil [12127 12186])
            ("font-lock-maximum-decoration" variable
               (:documentation "Maximum decoration level for fontification.
If nil, use the default decoration (typically the minimum available).
If t, use the maximum decoration available.
If a number, use that level of decoration (or if not available the maximum).
The higher the number, the more decoration is done.
If a list, each element should be a cons pair of the form (MAJOR-MODE . LEVEL),
where MAJOR-MODE is a symbol or t (meaning the default).  For example:
 ((c-mode . t) (c++-mode . 2) (t . 1))
means use the maximum decoration available for buffers in C mode, level 2
decoration for buffers in C++ mode, and level 1 decoration otherwise."
                :default-value t)
                nil [12188 13318])
            ("font-lock-verbose" variable (:documentation "If non-nil, means show status messages for buffer fontification.
If a number, only buffers greater than this size have fontification messages.") nil [13320 13633])
            ("font-lock-comment-face" variable
               (:documentation "Face name to use for comments."
                :default-value 'font-lock-comment-face)
                nil [14307 14398])
            ("font-lock-comment-delimiter-face" variable
               (:documentation "Face name to use for comment delimiters."
                :default-value 'font-lock-comment-delimiter-face)
                nil [14400 14520])
            ("font-lock-string-face" variable
               (:documentation "Face name to use for strings."
                :default-value 'font-lock-string-face)
                nil [14522 14610])
            ("font-lock-doc-face" variable
               (:documentation "Face name to use for documentation."
                :default-value 'font-lock-doc-face)
                nil [14612 14700])
            ("font-lock-keyword-face" variable
               (:documentation "Face name to use for keywords."
                :default-value 'font-lock-keyword-face)
                nil [14702 14793])
            ("font-lock-builtin-face" variable
               (:documentation "Face name to use for builtins."
                :default-value 'font-lock-builtin-face)
                nil [14795 14886])
            ("font-lock-function-name-face" variable
               (:documentation "Face name to use for function names."
                :default-value 'font-lock-function-name-face)
                nil [14888 14996])
            ("font-lock-variable-name-face" variable
               (:documentation "Face name to use for variable names."
                :default-value 'font-lock-variable-name-face)
                nil [14998 15106])
            ("font-lock-type-face" variable
               (:documentation "Face name to use for type and class names."
                :default-value 'font-lock-type-face)
                nil [15108 15205])
            ("define-obsolete-variable-alias" code nil nil [15207 15299])
            ("font-lock-constant-face" variable
               (:documentation "Face name to use for constant and label names."
                :default-value 'font-lock-constant-face)
                nil [15301 15410])
            ("font-lock-warning-face" variable
               (:documentation "Face name to use for things that should stand out."
                :default-value 'font-lock-warning-face)
                nil [15412 15523])
            ("font-lock-negation-char-face" variable
               (:documentation "Face name to use for easy to overlook negation.
This can be an \"!\" or the \"n\" in \"ifndef\"."
                :default-value 'font-lock-negation-char-face)
                nil [15525 15693])
            ("font-lock-preprocessor-face" variable
               (:documentation "Face name to use for preprocessor directives."
                :default-value 'font-lock-preprocessor-face)
                nil [15695 15810])
            ("font-lock-keywords" variable (:documentation "A list of the keywords to highlight.
There are two kinds of values: user-level, and compiled.

A user-level keywords list is what a major mode or the user would
set up.  Normally the list would come from `font-lock-defaults'.
through selection of a fontification level and evaluation of any
contained expressions.  You can also alter it by calling
`font-lock-add-keywords' or `font-lock-remove-keywords' with MODE = nil.

Each element in a user-level keywords list should have one of these forms:

 MATCHER
 (MATCHER . SUBEXP)
 (MATCHER . FACENAME)
 (MATCHER . HIGHLIGHT)
 (MATCHER HIGHLIGHT ...)
 (eval . FORM)

where MATCHER can be either the regexp to search for, or the
function name to call to make the search (called with one
argument, the limit of the search; it should return non-nil, move
point, and set `match-data' appropriately if it succeeds; like
`re-search-forward' would).  MATCHER regexps can be generated via
the function `regexp-opt'.

FORM is an expression, whose value should be a keyword element,
evaluated when the keyword is (first) used in a buffer.  This
feature can be used to provide a keyword that can only be
generated when Font Lock mode is actually turned on.

HIGHLIGHT should be either MATCH-HIGHLIGHT or MATCH-ANCHORED.

For highlighting single items, for example each instance of the
word \"foo\", typically only MATCH-HIGHLIGHT is required.
However, if an item or (typically) items are to be highlighted
following the instance of another item (the anchor), for example
each instance of the word \"bar\" following the word \"anchor\"
then MATCH-ANCHORED may be required.

MATCH-HIGHLIGHT should be of the form:

 (SUBEXP FACENAME [OVERRIDE [LAXMATCH]])

SUBEXP is the number of the subexpression of MATCHER to be
highlighted.

FACENAME is an expression whose value is the face name to use.
Instead of a face, FACENAME can evaluate to a property list of
the form (face FACE PROP1 VAL1 PROP2 VAL2 ...)  in which case all
the listed text-properties will be set rather than just FACE.  In
such a case, you will most likely want to put those properties in
`font-lock-extra-managed-props' or to override
`font-lock-unfontify-region-function'.

OVERRIDE and LAXMATCH are flags.  If OVERRIDE is t, existing
fontification can be overwritten.  If `keep', only parts not
already fontified are highlighted.  If `prepend' or `append',
existing fontification is merged with the new, in which the new
or existing fontification, respectively, takes precedence.  If
LAXMATCH is non-nil, that means don't signal an error if there is
no match for SUBEXP in MATCHER.

For example, an element of the form highlights (if not already
highlighted):

 \"\\\\\\=<foo\\\\\\=>\"
  Discrete occurrences of \"foo\" in the value of the variable
  `font-lock-keyword-face'.

 (\"fu\\\\(bar\\\\)\" . 1)
  Substring \"bar\" within all occurrences of \"fubar\" in the
  value of `font-lock-keyword-face'.

 (\"fubar\" . fubar-face)
  Occurrences of \"fubar\" in the value of `fubar-face'.

 (\"foo\\\\|bar\" 0 foo-bar-face t)
  Occurrences of either \"foo\" or \"bar\" in the value of
  `foo-bar-face', even if already highlighted.

 (fubar-match 1 fubar-face)
  The first subexpression within all occurrences of whatever the
  function `fubar-match' finds and matches in the value of
  `fubar-face'.

MATCH-ANCHORED should be of the form:

 (MATCHER PRE-MATCH-FORM POST-MATCH-FORM MATCH-HIGHLIGHT ...)

where MATCHER is a regexp to search for or the function name to
call to make the search, as for MATCH-HIGHLIGHT above, but with
one exception; see below.  PRE-MATCH-FORM and POST-MATCH-FORM are
evaluated before the first, and after the last, instance
MATCH-ANCHORED's MATCHER is used.  Therefore they can be used to
initialize before, and cleanup after, MATCHER is used.
Typically, PRE-MATCH-FORM is used to move to some position
relative to the original MATCHER, before starting with
MATCH-ANCHORED's MATCHER.  POST-MATCH-FORM might be used to move
back, before resuming with MATCH-ANCHORED's parent's MATCHER.

For example, an element of the form highlights (if not already
highlighted):

 (\"\\\\\\=<anchor\\\\\\=>\" (0 anchor-face)
  (\"\\\\\\=<item\\\\\\=>\" nil nil (0 item-face)))

  Discrete occurrences of \"anchor\" in the value of
  `anchor-face', and subsequent discrete occurrences of
  \"item\" (on the same line) in the value of `item-face'.
  (Here PRE-MATCH-FORM and POST-MATCH-FORM are nil.  Therefore
  \"item\" is initially searched for starting from the end of the
  match of \"anchor\", and searching for subsequent instances of
  \"anchor\" resumes from where searching for \"item\" concluded.)

The above-mentioned exception is as follows.  The limit of the
MATCHER search defaults to the end of the line after
PRE-MATCH-FORM is evaluated.  However, if PRE-MATCH-FORM returns
a position greater than the position after PRE-MATCH-FORM is
evaluated, that position is used as the limit of the search.  It
is generally a bad idea to return a position greater than the end
of the line, i.e., cause the MATCHER search to span lines.

These regular expressions can match text which spans lines,
although it is better to avoid it if possible since updating them
while editing text is slower, and it is not guaranteed to be
always correct when using support modes like jit-lock or
lazy-lock.

This variable is set by major modes via the variable
`font-lock-defaults'.  Be careful when composing regexps for this
list; a poorly written pattern can dramatically slow things down!

A compiled keywords list starts with t.  It is produced
internally by `font-lock-compile-keywords' from a user-level
keywords list.  Its second element is the user-level keywords
list that was compiled.  The remaining elements have the same
form as user-level keywords, but normally their values have been
optimized.") nil [15841 21692])
            ("font-lock-keywords-alist" variable (:documentation "Alist of additional `font-lock-keywords' elements for major modes.

Each element has the form (MODE KEYWORDS . HOW).
Function `font-lock-set-defaults' adds the elements in the list KEYWORDS to
`font-lock-keywords' when Font Lock is turned on in major mode MODE.

If HOW is nil, KEYWORDS are added at the beginning of
`font-lock-keywords'.  If it is `set', they are used to replace the
value of `font-lock-keywords'.  If HOW is any other non-nil value,
they are added at the end.

This is normally set via `font-lock-add-keywords' and
`font-lock-remove-keywords'.") nil [21694 22298])
            ("put" code nil nil [22299 22354])
            ("font-lock-removed-keywords-alist" variable (:documentation "Alist of `font-lock-keywords' elements to be removed for major modes.

Each element has the form (MODE . KEYWORDS).  Function `font-lock-set-defaults'
removes the elements in the list KEYWORDS from `font-lock-keywords'
when Font Lock is turned on in major mode MODE.

This is normally set via `font-lock-add-keywords' and
`font-lock-remove-keywords'.") nil [22356 22756])
            ("font-lock-keywords-only" variable (:documentation "Non-nil means Font Lock should not fontify comments or strings.
This is normally set via `font-lock-defaults'.") nil [22758 22909])
            ("font-lock-keywords-case-fold-search" variable (:documentation "Non-nil means the patterns in `font-lock-keywords' are case-insensitive.
This is set via the function `font-lock-set-defaults', based on
the CASE-FOLD argument of `font-lock-defaults'.") nil [22911 23148])
            ("make-variable-buffer-local" code nil nil [23149 23214])
            ("font-lock-syntactically-fontified" variable (:documentation "Point up to which `font-lock-syntactic-keywords' has been applied.
If nil, this is ignored, in which case the syntactic fontification may
sometimes be slightly incorrect.") nil [23216 23435])
            ("make-variable-buffer-local" code nil nil [23436 23499])
            ("font-lock-syntactic-face-function" variable
               (:documentation "Function to determine which face to use when fontifying syntactically.
The function is called with a single parameter (the state as returned by
`parse-partial-sexp' at the beginning of the region to highlight) and
should return a face.  This is normally set via `font-lock-defaults'."
                :default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face)))
                nil [23501 23918])
            ("font-lock-syntactic-keywords" variable (:documentation "A list of the syntactic keywords to put syntax properties on.
The value can be the list itself, or the name of a function or variable
whose value is the list.

See `font-lock-keywords' for a description of the form of this list;
only the differences are stated here.  MATCH-HIGHLIGHT should be of the form:

 (SUBEXP SYNTAX OVERRIDE LAXMATCH)

where SYNTAX can be a string (as taken by `modify-syntax-entry'), a syntax
table, a cons cell (as returned by `string-to-syntax') or an expression whose
value is such a form.  OVERRIDE cannot be `prepend' or `append'.

Here are two examples of elements of `font-lock-syntactic-keywords'
and what they do:

 (\"\\\\$\\\\(#\\\\)\" 1 \".\")

 gives a hash character punctuation syntax (\".\") when following a
 dollar-sign character.  Hash characters in other contexts will still
 follow whatever the syntax table says about the hash character.

 (\"\\\\(\\='\\\\).\\\\(\\='\\\\)\"
  (1 \"\\\"\")
  (2 \"\\\"\"))

 gives a pair of apostrophes, which surround a single character, a
 SYNTAX of \"\\\"\" (meaning string quote syntax).  Apostrophes in other

 contexts will not be affected.

This is normally set via `font-lock-defaults'.") nil [23920 25141])
            ("make-obsolete-variable" code nil nil [25142 25255])
            ("font-lock-syntax-table" variable (:documentation "Non-nil means use this syntax table for fontifying.
If this is nil, the major mode's syntax table is used.
This is normally set via `font-lock-defaults'.") nil [25257 25450])
            ("font-lock-mark-block-function" variable (:documentation "Non-nil means use this function to mark a block of text.
When called with no args it should leave point at the beginning of any
enclosing textual block and mark at the end.
This is normally set via `font-lock-defaults'.") nil [25452 25718])
            ("font-lock-fontify-buffer-function" variable
               (:documentation "Function to use for fontifying the buffer.
This is normally set via `font-lock-defaults'."
                :default-value nil)
                nil [25720 25891])
            ("font-lock-unfontify-buffer-function" variable
               (:documentation "Function to use for unfontifying the buffer.
This is used when turning off Font Lock mode.
This is normally set via `font-lock-defaults'."
                :default-value nil)
                nil [25893 26116])
            ("font-lock-fontify-region-function" variable
               (:documentation "Function to use for fontifying a region.
It should take two args, the beginning and end of the region, and an optional
third arg VERBOSE.  If VERBOSE is non-nil, the function should print status
messages.  This is normally set via `font-lock-defaults'.
If it fontifies a larger region, it should ideally return a list of the form
(jit-lock-bounds BEG . END) indicating the bounds of the region actually
fontified."
                :default-value nil)
                nil [26118 26614])
            ("font-lock-unfontify-region-function" variable
               (:documentation "Function to use for unfontifying a region.
It should take two args, the beginning and end of the region.
This is normally set via `font-lock-defaults'."
                :default-value nil)
                nil [26616 26853])
            ("font-lock-inhibit-thing-lock" variable (:documentation "List of Font Lock mode related modes that should not be turned on.
Currently, valid mode names are `fast-lock-mode', `jit-lock-mode' and
`lazy-lock-mode'.  This is normally set via `font-lock-defaults'.") nil [26855 27103])
            ("make-obsolete-variable" code nil nil [27104 27169])
            ("defvar-local" code nil nil [27171 27504])
            ("defvar-local" code nil nil [27506 27544])
            ("save-buffer-state" function
               (:documentation "Bind variables according to VARLIST and eval BODY restoring buffer state."
                :arguments ("body"))
                nil [27745 27996])
            ("defvar-local" code nil nil [27999 28040])
            ("font-lock-specified-p" function
               (:documentation "Return non-nil if the current buffer is ready for fontification.
The MODE argument, if non-nil, means Font Lock mode is about to
be enabled."
                :arguments ("mode"))
                nil [28077 28464])
            ("font-lock-initial-fontify" function nil nil [28466 29028])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29030 29453])
            ("font-lock-add-keywords" function
               (:documentation "Add highlighting KEYWORDS for MODE.

MODE should be a symbol, the major mode command name, such as `c-mode'
or nil.  If nil, highlighting keywords are added for the current buffer.
KEYWORDS should be a list; see the variable `font-lock-keywords'.
By default they are added at the beginning of the current highlighting list.
If optional argument HOW is `set', they are used to replace the current
highlighting list.  If HOW is any other non-nil value, they are added at the
end of the current highlighting list.

For example:

 (font-lock-add-keywords \\='c-mode
  \\='((\"\\\\\\=<\\\\(FIXME\\\\):\" 1 \\='font-lock-warning-face prepend)
    (\"\\\\\\=<\\\\(and\\\\|or\\\\|not\\\\)\\\\\\=>\" . \\='font-lock-keyword-face)))

adds two fontification patterns for C mode, to fontify `FIXME:' words, even in
comments, and to fontify `and', `or' and `not' words as keywords.

The above procedure will only add the keywords for C mode, not
for modes derived from C mode.  To add them for derived modes too,
pass nil for MODE and add the call to c-mode-hook.

For example:

 (add-hook \\='c-mode-hook
  (lambda ()
   (font-lock-add-keywords nil
    \\='((\"\\\\\\=<\\\\(FIXME\\\\):\" 1 \\='font-lock-warning-face prepend)
      (\"\\\\\\=<\\\\(and\\\\|or\\\\|not\\\\)\\\\\\=>\" .
       \\='font-lock-keyword-face)))))

The above procedure may fail to add keywords to derived modes if
some involved major mode does not follow the standard conventions.
File a bug report if this happens, so the major mode can be corrected.

Note that some modes have specialized support for additional patterns, e.g.,
see the variables `c-font-lock-extra-types', `c++-font-lock-extra-types',
`objc-font-lock-extra-types' and `java-font-lock-extra-types'."
                :arguments ("mode" "keywords" "how"))
                nil [29455 33196])
            ("font-lock-update-removed-keyword-alist" function
               (:documentation "Update `font-lock-removed-keywords-alist' when adding new KEYWORDS to MODE."
                :arguments ("mode" "keywords" "how"))
                nil [33198 34286])
            ("font-lock-remove-keywords" function
               (:documentation "Remove highlighting KEYWORDS for MODE.

MODE should be a symbol, the major mode command name, such as
`c-mode' or nil.  If nil, highlighting keywords are removed for
the current buffer.

For a description of KEYWORDS, see `font-lock-add-keywords'.

To make the removal apply to modes derived from MODE as well,
pass nil for MODE and add the call to MODE-hook.  This may fail
for some derived modes if some involved major mode does not
follow the standard conventions.  File a bug report if this
happens, so the major mode can be corrected."
                :arguments ("mode" "keywords"))
                nil [35084 37796])
            ("font-lock-support-mode" variable
               (:documentation "Support mode for Font Lock mode.
Support modes speed up Font Lock mode by being choosy about when fontification
occurs.  The default support mode, Just-in-time Lock mode (symbol
`jit-lock-mode'), is recommended.

Other, older support modes are Fast Lock mode (symbol `fast-lock-mode') and
Lazy Lock mode (symbol `lazy-lock-mode').  See those modes for more info.
However, they are no longer recommended, as Just-in-time Lock mode is better.

If nil, means support for Font Lock mode is never performed.
If a symbol, use that support mode.
If a list, each element should be of the form (MAJOR-MODE . SUPPORT-MODE),
where MAJOR-MODE is a symbol or t (meaning the default).  For example:
 ((c-mode . fast-lock-mode) (c++-mode . fast-lock-mode) (t . lazy-lock-mode))
means that Fast Lock mode is used to support Font Lock mode for buffers in C or
C++ modes, and Lazy Lock mode is used to support Font Lock mode otherwise.

The value of this variable is used when Font Lock mode is turned on."
                :default-value 'jit-lock-mode)
                nil [38140 39819])
            ("fast-lock-mode" variable nil nil [39821 39844])
            ("lazy-lock-mode" variable nil nil [39845 39868])
            ("jit-lock-mode" variable nil nil [39869 39891])
            ("declare-function" code nil nil [39893 39954])
            ("declare-function" code nil nil [39955 40018])
            ("declare-function" code nil nil [40019 40064])
            ("declare-function" code nil nil [40065 40126])
            ("declare-function" code nil nil [40127 40190])
            ("declare-function" code nil nil [40191 40236])
            ("font-lock-turn-on-thing-lock" function nil nil [40238 41560])
            ("font-lock-turn-off-thing-lock" function nil nil [41562 41921])
            ("font-lock-after-fontify-buffer" function nil nil [41923 42245])
            ("font-lock-after-unfontify-buffer" function nil nil [42247 42783])
            ("font-lock-extend-after-change-region-function" variable (:documentation "A function that determines the region to refontify after a change.

This variable is either nil, or is a function that determines the
region to refontify after a change.
It is usually set by the major mode via `font-lock-defaults'.
Font-lock calls this function after each buffer change.

The function is given three parameters, the standard BEG, END, and OLD-LEN
from `after-change-functions'.  It should return either a cons of the beginning
and end buffer positions (in that order) of the region to refontify, or nil
(which directs the caller to fontify a default region).
This function should preserve the match-data.
The region it returns may start or end in the middle of a line.") nil [45435 46185])
            ("make-variable-buffer-local" code nil nil [46186 46261])
            ("font-lock-fontify-buffer" function
               (:documentation "Fontify the current buffer the way the function `font-lock-mode' would."
                :arguments ("interactively"))
                nil [46263 47243])
            ("font-lock-unfontify-buffer" function nil nil [47245 47330])
            ("font-lock-fontify-region" function
               (:documentation "Fontify the text between BEG and END.
If LOUDLY is non-nil, print status messages while fontifying.
This works by calling `font-lock-fontify-region-function'."
                :arguments ("beg" "end" "loudly"))
                nil [47332 47642])
            ("font-lock-unfontify-region" function
               (:documentation "Unfontify the text between BEG and END.
This works by calling `font-lock-unfontify-region-function'."
                :arguments ("beg" "end"))
                nil [47644 47873])
            ("font-lock-flush-function" variable
               (:documentation "Function to use to mark a region for refontification.
Called with two arguments BEG and END."
                :default-value nil)
                nil [47875 48039])
            ("font-lock-flush" function
               (:documentation "Declare the region BEG...END's fontification as out-of-date.
If the region is not specified, it defaults to the entire
accessible portion of the current buffer."
                :arguments ("beg" "end"))
                nil [48041 48399])
            ("font-lock-ensure-function" variable
               (:documentation "Function to make sure a region has been fontified.
Called with two arguments BEG and END."
                :default-value (lambda (_beg _end) (unless font-lock-fontified (font-lock-default-fontify-buffer) (unless font-lock-mode (setq font-lock-fontified nil)))))
                nil [48401 48907])
            ("font-lock-ensure" function
               (:documentation "Make sure the region BEG...END has been fontified.
If the region is not specified, it defaults to the entire accessible
portion of the buffer."
                :arguments ("beg" "end"))
                nil [48909 49218])
            ("font-lock-default-fontify-buffer" function (:documentation "Fontify the whole buffer using `font-lock-fontify-region-function'.") nil [49220 49974])
            ("font-lock-default-unfontify-buffer" function (:documentation "Unfontify the whole buffer using `font-lock-unfontify-region-function'.") nil [49976 50315])
            ("font-lock-dont-widen" variable (:documentation "If non-nil, font-lock will work on the non-widened buffer.
Useful for things like RMAIL and Info where the whole buffer is not
a very meaningful entity to highlight.") nil [50317 50520])
            ("font-lock-beg" variable nil nil [50523 50545])
            ("font-lock-end" variable nil nil [50546 50568])
            ("font-lock-extend-region-functions" variable
               (:documentation "Special hook run just before proceeding to fontify a region.
This is used to allow major modes to help font-lock find safe buffer positions
as beginning and end of the fontified region.  Its most common use is to solve
the problem of /identification/ of multiline elements by providing a function
that tries to find such elements and move the boundaries such that they do
not fall in the middle of one.
Each function is called with no argument; it is expected to adjust the
dynamically bound variables `font-lock-beg' and `font-lock-end'; and return
non-nil if it did make such an adjustment.
These functions are run in turn repeatedly until they all return nil.
Put first the functions more likely to cause a change and cheaper to compute."
                :default-value '(font-lock-extend-region-wholelines font-lock-extend-region-multiline))
                nil [50569 51876])
            ("make-variable-buffer-local" code nil nil [52007 52070])
            ("font-lock-extend-region-multiline" function (:documentation "Move fontification boundaries away from any `font-lock-multiline' property.") nil [52072 52841])
            ("font-lock-extend-region-wholelines" function (:documentation "Move fontification boundaries to beginning of lines.") nil [52843 53334])
            ("font-lock-default-fontify-region" function
               (:documentation "Fontify the text between BEG and END.
If LOUDLY is non-nil, print status messages while fontifying.
This function is the default `font-lock-fontify-region-function'."
                :arguments ("beg" "end" "loudly"))
                nil [53336 55339])
            ("font-lock-extra-managed-props" variable (:documentation "Additional text properties managed by font-lock.
This is used by `font-lock-default-unfontify-region' to decide
what properties to clear before refontifying a region.") nil [55782 55995])
            ("font-lock-default-unfontify-region" function
               (:documentation "Unfontify the text between BEG and END.
This function is the default `font-lock-unfontify-region-function'."
                :arguments ("beg" "end"))
                nil [55997 56368])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [56426 57573])
            ("jit-lock-start" variable nil nil [57575 57598])
            ("jit-lock-end" variable nil nil [57599 57620])
            ("font-lock-extend-jit-lock-region-after-change" function
               (:documentation "Function meant for `jit-lock-after-change-extend-region-functions'.
This function does 2 things:
- extend the region so that it not only includes the part that was modified
  but also the surrounding text whose highlighting may change as a consequence.
- anticipate (part of) the region extension that will happen later in
  `font-lock-default-fontify-region', in order to avoid the need for
  double-redisplay in `jit-lock-fontify-now'."
                :arguments ("beg" "end" "old-len"))
                nil [57621 61097])
            ("font-lock-fontify-block" function
               (:documentation "Fontify some lines the way `font-lock-fontify-buffer' would.
The lines could be a function or paragraph, or a specified number of lines.
If ARG is given, fontify that many lines before and after point, or 16 lines if
no ARG is given and `font-lock-mark-block-function' is nil.
If `font-lock-mark-block-function' non-nil and no ARG is given, it is used to
delimit the region to fontify."
                :user-visible-flag t
                :arguments ("arg"))
                nil [61099 62221])
            ("font-lock-prepend-text-property" function
               (:documentation "Prepend to one property of the text from START to END.
Arguments PROP and VALUE specify the property and value to prepend to the value
already in place.  The resulting property values are always lists.
Optional argument OBJECT is the string or buffer containing the text."
                :arguments ("start" "end" "prop" "value" "object"))
                nil [62655 63584])
            ("font-lock-append-text-property" function
               (:documentation "Append to one property of the text from START to END.
Arguments PROP and VALUE specify the property and value to append to the value
already in place.  The resulting property values are always lists.
Optional argument OBJECT is the string or buffer containing the text."
                :arguments ("start" "end" "prop" "value" "object"))
                nil [63586 64512])
            ("font-lock-fillin-text-property" function
               (:documentation "Fill in one property of the text from START to END.
Arguments PROP and VALUE specify the property and value to put where none are
already in place.  Therefore existing property values are not overwritten.
Optional argument OBJECT is the string or buffer containing the text."
                :arguments ("start" "end" "prop" "value" "object"))
                nil [64514 65147])
            ("font-lock--remove-face-from-text-property" function
               (:documentation "Remove a specific property value from text from START to END.
Arguments PROP and VALUE specify the property and value to remove.  The
resulting property values are not `eq' to VALUE nor lists containing VALUE.
Optional argument OBJECT is the string or buffer containing the text."
                :arguments ("start" "end" "prop" "value" "object"))
                nil [65149 66409])
            ("font-lock-apply-syntactic-highlight" function
               (:documentation "Apply HIGHLIGHT following a match.
HIGHLIGHT should be of the form MATCH-HIGHLIGHT,
see `font-lock-syntactic-keywords'."
                :arguments ("highlight"))
                nil [67013 68344])
            ("font-lock-fontify-syntactic-anchored-keywords" function
               (:documentation "Fontify according to KEYWORDS until LIMIT.
KEYWORDS should be of the form MATCH-ANCHORED, see `font-lock-keywords',
LIMIT can be modified by the value of its PRE-MATCH-FORM."
                :arguments ("keywords" "limit"))
                nil [68346 69395])
            ("font-lock-fontify-syntactic-keywords-region" function
               (:documentation "Fontify according to `font-lock-syntactic-keywords' between START and END.
START should be at the beginning of a line."
                :arguments ("start" "end"))
                nil [69397 71207])
            ("font-lock-comment-start-skip" variable (:documentation "If non-nil, Font Lock mode uses this instead of `comment-start-skip'.") nil [71304 71419])
            ("font-lock-comment-end-skip" variable (:documentation "If non-nil, Font Lock mode uses this instead of `comment-end'.") nil [71421 71527])
            ("font-lock-fontify-syntactically-region" function
               (:documentation "Put proper face on each string and comment between START and END.
START should be at the beginning of a line."
                :arguments ("start" "end" "loudly"))
                nil [71529 73265])
            ("font-lock-apply-highlight" function
               (:documentation "Apply HIGHLIGHT following a match.
HIGHLIGHT should be of the form MATCH-HIGHLIGHT, see `font-lock-keywords'."
                :arguments ("highlight"))
                nil [73360 74884])
            ("font-lock-fontify-anchored-keywords" function
               (:documentation "Fontify according to KEYWORDS until LIMIT.
KEYWORDS should be of the form MATCH-ANCHORED, see `font-lock-keywords',
LIMIT can be modified by the value of its PRE-MATCH-FORM."
                :arguments ("keywords" "limit"))
                nil [74886 76298])
            ("font-lock-fontify-keywords-region" function
               (:documentation "Fontify according to `font-lock-keywords' between START and END.
START should be at the beginning of a line.
LOUDLY, if non-nil, allows progress-meter bar."
                :arguments ("start" "end" "loudly"))
                nil [76300 78689])
            ("font-lock-compile-keywords" function
               (:documentation "Compile KEYWORDS into the form (t KEYWORDS COMPILED...)
Here each COMPILED is of the form (MATCHER HIGHLIGHT ...) as shown in the
`font-lock-keywords' doc string.
If SYNTACTIC-KEYWORDS is non-nil, it means these keywords are used for
`font-lock-syntactic-keywords' rather than for `font-lock-keywords'."
                :arguments ("keywords" "syntactic-keywords"))
                nil [78767 80605])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [80607 81485])
            ("font-lock-eval-keywords" function
               (:documentation "Evaluate KEYWORDS if a function (funcall) or variable (eval) name."
                :arguments ("keywords"))
                nil [81487 81743])
            ("font-lock-value-in-major-mode" function
               (:documentation "If VALUES is a list, use `major-mode' as a key and return the `assq' value.
VALUES should then be an alist on the form ((MAJOR-MODE . VALUE) ...) where
MAJOR-MODE may be t.
If VALUES isn't a list, return VALUES."
                :arguments ("values"))
                nil [81745 82098])
            ("font-lock-choose-keywords" function
               (:documentation "Return LEVELth element of KEYWORDS.
A LEVEL of nil is equal to a LEVEL of 0, a LEVEL of t is equal to
(1- (length KEYWORDS))."
                :arguments ("keywords" "level"))
                nil [82100 82488])
            ("font-lock-refresh-defaults" function (:documentation "Restart fontification in current buffer after recomputing from defaults.
Recompute fontification variables using `font-lock-defaults' and
`font-lock-maximum-decoration'.  Then restart fontification.

Use this function when you have changed any of the above
variables directly.

Note: This function will erase modifications done by
`font-lock-add-keywords' or `font-lock-remove-keywords', but will
preserve `hi-lock-mode' highlighting patterns.") nil [82490 83066])
            ("font-lock-major-mode" variable (:documentation "Major mode for which the font-lock settings have been setup.") nil [83068 83166])
            ("make-variable-buffer-local" code nil nil [83167 83217])
            ("font-lock-set-defaults" function (:documentation "Set fontification defaults appropriately for this mode.
Sets various variables using `font-lock-defaults' and
`font-lock-maximum-decoration'.") nil [83219 85881])
            ("font-lock-comment-face" variable
               (:documentation "Font Lock mode face used to highlight comments."
                :default-value '((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic))
                :type "face")
                nil [86006 86843])
            ("font-lock-comment-delimiter-face" variable
               (:documentation "Font Lock mode face used to highlight comment delimiters."
                :default-value '((default :inherit font-lock-comment-face))
                :type "face")
                nil [86845 87022])
            ("font-lock-string-face" variable
               (:documentation "Font Lock mode face used to highlight strings."
                :default-value '((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic))
                :type "face")
                nil [87024 87705])
            ("font-lock-doc-face" variable
               (:documentation "Font Lock mode face used to highlight documentation."
                :default-value '((t :inherit font-lock-string-face))
                :type "face")
                nil [87707 87858])
            ("font-lock-keyword-face" variable
               (:documentation "Font Lock mode face used to highlight keywords."
                :default-value '((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold))
                :type "face")
                nil [87860 88532])
            ("font-lock-builtin-face" variable
               (:documentation "Font Lock mode face used to highlight builtins."
                :default-value '((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold))
                :type "face")
                nil [88534 89233])
            ("font-lock-function-name-face" variable
               (:documentation "Font Lock mode face used to highlight function names."
                :default-value '((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold))
                :type "face")
                nil [89235 89786])
            ("font-lock-variable-name-face" variable
               (:documentation "Font Lock mode face used to highlight variable names."
                :default-value '((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic))
                :type "face")
                nil [89788 90549])
            ("font-lock-type-face" variable
               (:documentation "Font Lock mode face used to highlight type and classes."
                :default-value '((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t))
                :type "face")
                nil [90551 91245])
            ("font-lock-constant-face" variable
               (:documentation "Font Lock mode face used to highlight constants and labels."
                :default-value '((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t))
                :type "face")
                nil [91247 91986])
            ("font-lock-warning-face" variable
               (:documentation "Font Lock mode face used to highlight warnings."
                :default-value '((t :inherit error))
                :type "face")
                nil [91988 92122])
            ("font-lock-negation-char-face" variable
               (:documentation "Font Lock mode face used to highlight easy to overlook negation."
                :default-value '((t nil))
                :type "face")
                nil [92124 92270])
            ("font-lock-preprocessor-face" variable
               (:documentation "Font Lock mode face used to highlight preprocessor directives."
                :default-value '((t :inherit font-lock-builtin-face))
                :type "face")
                nil [92272 92443])
            ("font-lock-regexp-grouping-backslash" variable
               (:documentation "Font Lock mode face for backslashes in Lisp regexp grouping constructs."
                :default-value '((t :inherit bold))
                :type "face")
                nil [92445 92615])
            ("font-lock-regexp-grouping-construct" variable
               (:documentation "Font Lock mode face used to highlight grouping constructs in Lisp regexps."
                :default-value '((t :inherit bold))
                :type "face")
                nil [92617 92790])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function
               (:documentation "Match, and move over, any declaration/definition item after point.
Matches after point, but ignores leading whitespace and `*' characters.
Does not move further than LIMIT.

The expected syntax of a declaration/definition item is `word' (preceded by
optional whitespace and `*' characters and proceeded by optional whitespace)
optionally followed by a `('.  Everything following the item (but belonging to
it) is expected to be skip-able by `scan-sexps', and items are expected to be
separated with a `,' and to be terminated with a `;'.

Thus the regexp matches after point:	word (
					^^^^ ^
Where the match subexpressions are:	  1  2

The item is delimited by (match-beginning 1) and (match-end 1).
If (match-beginning 2) is non-nil, the item is followed by a `('.

This function could be MATCHER in a MATCH-ANCHORED `font-lock-keywords' item."
                :arguments ("limit"))
                nil [97631 99660])
            ("cpp-font-lock-keywords-source-directives" variable
               (:documentation "Regular expression used in `cpp-font-lock-keywords'."
                :constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [100285 100531])
            ("cpp-font-lock-keywords-source-depth" variable
               (:documentation "An integer representing regular expression depth of `cpp-font-lock-keywords-source-directives'.
Used in `cpp-font-lock-keywords'."
                :constant-flag t)
                nil [100786 100968])
            ("cpp-font-lock-keywords" variable
               (:documentation "Font lock keywords for C preprocessor directives.
`c-mode', `c++-mode' and `objc-mode' have their own font lock keywords
for C preprocessor directives.  This definition is for the other modes
in which C preprocessor directives are used. e.g. `asm-mode' and
`ld-script-mode'."
                :constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list '("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend) '("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend) '("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend))) '("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") '(1 font-lock-preprocessor-face prepend) (list (+ 2 directives-depth) 'font-lock-variable-name-face nil t)))))
                nil [100970 102777])
            ("font-lock" package nil nil [102780 102800]))          
      :file "font-lock.el.gz"
      :pointmax 102829
      :fsize 26732
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 27996 . 27997) (symbol 27608 . 27625) (open-paren 27607 . 27608) (close-paren 10536 . 10537) (symbol 10501 . 10518) (open-paren 10500 . 10501)))
    (semanticdb-table "semanticdb-table-1874334"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal-lisp-face-attributes" variable (:default-value [nil :family :foundry :swidth :height :weight :slant :underline :inverse :foreground :background :stipple :overline :strike :box :font :inherit :fontset :vector]) nil [2615 2826])
            ("face-attrs-more-relative-p" function
               (:documentation "Return true if ATTRS1 contains a greater number of relative
face-attributes than ATTRS2.  A face attribute is considered
relative if `face-attribute-relative-p' returns non-nil.

ATTRS1 and ATTRS2 may be any value suitable for a `face' text
property, including face names, lists of face names,
face-attribute plists, etc.

This function can be used as a predicate with `sort', to sort
face lists so that more specific faces are located near the end."
                :arguments ("attrs1" "attrs2"))
                nil [2828 3869])
            ("face-remap-order" function
               (:documentation "Order ENTRY so that more relative face specs are near the beginning.
The list structure of ENTRY may be destructively modified."
                :arguments ("entry"))
                nil [3871 4150])
            ("face-remap-add-relative" function
               (:documentation "Add a face remapping entry of FACE to SPECS in the current buffer.
Return a cookie which can be used to delete this remapping with
`face-remap-remove-relative'.

The remaining arguments, SPECS, should form a list of faces.
Each list element should be either a face name or a property list
of face attribute/value pairs.  If more than one face is listed,
that specifies an aggregate face, in the same way as in a `face'
text property, except for possible priority changes noted below.

The face remapping specified by SPECS takes effect alongside the
remappings from other calls to `face-remap-add-relative' for the
same FACE, as well as the normal definition of FACE (at lowest
priority).  This function tries to sort multiple remappings for
the same face, so that remappings specifying relative face
attributes are applied after remappings specifying absolute face
attributes.

The base (lowest priority) remapping may be set to something
other than the normal definition of FACE via `face-remap-set-base'."
                :arguments ("face" "specs"))
                nil [4167 5780])
            ("face-remap-remove-relative" function
               (:documentation "Remove a face remapping previously added by `face-remap-add-relative'.
COOKIE should be the return value from that function."
                :arguments ("cookie"))
                nil [5782 6480])
            ("face-remap-reset-base" function
               (:documentation "Set the base remapping of FACE to the normal definition of FACE.
This causes the remappings specified by `face-remap-add-relative'
to apply on top of the normal definition of FACE."
                :arguments ("face"))
                nil [6497 7288])
            ("face-remap-set-base" function
               (:documentation "Set the base remapping of FACE in the current buffer to SPECS.
This causes the remappings specified by `face-remap-add-relative'
to apply on top of the face specification given by SPECS.

The remaining arguments, SPECS, should form a list of faces.
Each list element should be either a face name or a property list
of face attribute/value pairs, like in a `face' text property.

If SPECS is empty, call `face-remap-reset-base' to use the normal
definition of FACE as the base remapping; note that this is
different from SPECS containing a single value nil, which means
not to inherit from the global definition of FACE at all."
                :arguments ("face" "specs"))
                nil [7343 8604])
            ("text-scale-mode-step" variable
               (:documentation "Scale factor used by `text-scale-mode'.
Each positive or negative step scales the default face height by this amount."
                :default-value 1.2)
                nil [8696 8906])
            ("text-scale-mode-remapping" variable nil nil [8956 8994])
            ("make-variable-buffer-local" code nil nil [8995 9050])
            ("text-scale-mode-lighter" variable (:default-value "+0") nil [9122 9159])
            ("make-variable-buffer-local" code nil nil [9160 9213])
            ("text-scale-mode-amount" variable nil nil [9290 9323])
            ("make-variable-buffer-local" code nil nil [9324 9376])
            ("define-minor-mode" code nil nil [9378 10382])
            ("text-scale-min-amount" function (:documentation "Return the minimum amount of text-scaling we allow.") nil [10384 10745])
            ("text-scale-max-amount" function (:documentation "Return the maximum amount of text-scaling we allow.") nil [10747 11119])
            ("text-scale-set" function
               (:documentation "Set the scale factor of the default face in the current buffer to LEVEL.
If LEVEL is non-zero, `text-scale-mode' is enabled, otherwise it is disabled.

LEVEL is a number of steps, with 0 representing the default size.
Each step scales the height of the default face by the variable
`text-scale-mode-step' (a negative number decreases the height by
the same amount)."
                :user-visible-flag t
                :arguments ("level"))
                nil [11136 11723])
            ("text-scale-increase" function
               (:documentation "Increase the height of the default face in the current buffer by INC steps.
If the new height is other than the default, `text-scale-mode' is enabled.

Each step scales the height of the default face by the variable
`text-scale-mode-step' (a negative number of steps decreases the
height by the same amount).  As a special case, an argument of 0
will remove any scaling currently active."
                :user-visible-flag t
                :arguments ("inc"))
                nil [11740 12663])
            ("text-scale-decrease" function
               (:documentation "Decrease the height of the default face in the current buffer by DEC steps.
See `text-scale-increase' for more details."
                :user-visible-flag t
                :arguments ("dec"))
                nil [12680 12889])
            ("text-scale-adjust" function
               (:documentation "Adjust the height of the default face by INC.

INC may be passed as a numeric prefix argument.

The actual adjustment made depends on the final component of the
key-binding used to invoke the command, with all modifiers removed:

   +, =   Increase the default face height by one step
   -      Decrease the default face height by one step
   0      Reset the default face height to the global default

After adjusting, continue to read input events and further adjust
the face height as long as the input event read
(with all modifiers removed) is one of the above characters.

Each step scales the height of the default face by the variable
`text-scale-mode-step' (a negative number of steps decreases the
height by the same amount).  As a special case, an argument of 0
will remove any scaling currently active.

This command is a special-purpose wrapper around the
`text-scale-increase' command which makes repetition convenient
even when it is bound in a non-top-level keymap.  For binding in
a top-level keymap, `text-scale-increase' or
`text-scale-decrease' may be more appropriate."
                :user-visible-flag t
                :arguments ("inc"))
                nil [13194 15022])
            ("buffer-face-mode-face" variable
               (:documentation "The face specification used by `buffer-face-mode'.
It may contain any value suitable for a `face' text property,
including a face name, a list of face names, a face-attribute
plist, etc."
                :default-value 'variable-pitch)
                nil [15120 15496])
            ("buffer-face-mode-remapping" variable nil nil [15548 15587])
            ("make-variable-buffer-local" code nil nil [15588 15644])
            ("define-minor-mode" code nil nil [15661 16140])
            ("buffer-face-set" function
               (:documentation "Enable `buffer-face-mode', using face specs SPECS.
Each argument in SPECS should be a face, i.e. either a face name
or a property list of face attributes and values.  If more than
one face is listed, that specifies an aggregate face, like in a
`face' text property.  If SPECS is nil or omitted, disable
`buffer-face-mode'.

This function makes the variable `buffer-face-mode-face' buffer
local, and sets it to FACE."
                :user-visible-flag t
                :arguments ("specs"))
                nil [16157 16901])
            ("buffer-face-toggle" function
               (:documentation "Toggle `buffer-face-mode', using face specs SPECS.
Each argument in SPECS should be a face, i.e. either a face name
or a property list of face attributes and values.  If more than
one face is listed, that specifies an aggregate face, like in a
`face' text property.

If `buffer-face-mode' is already enabled, and is currently using
the face specs SPECS, then it is disabled; if `buffer-face-mode'
is disabled, or is enabled and currently displaying some other
face, then is left enabled, but the face changed to reflect SPECS.

This function will make the variable `buffer-face-mode-face'
buffer local, and set it to SPECS."
                :user-visible-flag t
                :arguments ("specs"))
                nil [16918 17909])
            ("buffer-face-mode-invoke" function
               (:documentation "Enable or disable `buffer-face-mode' using face specs SPECS.
ARG controls whether the mode is enabled or disabled, and is
interpreted in the usual manner for minor-mode commands.

SPECS can be any value suitable for a `face' text property,
including a face name, a plist of face attributes and values,
or a list of faces.

If INTERACTIVE is non-nil, display a message describing the
result.

This is a wrapper function which calls `buffer-face-set' or
`buffer-face-toggle' (depending on ARG), and prints a status
message in the echo area.  In many cases one of those functions
may be more appropriate."
                :arguments ("specs" "arg" "interactive"))
                nil [17911 18949])
            ("variable-pitch-mode" function
               (:documentation "Variable-pitch default-face mode.
An interface to `buffer-face-mode' which uses the `variable-pitch' face.
Besides the choice of face, it is the same as `buffer-face-mode'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [19060 19427])
            ("face-remap" package nil nil [19430 19451]))          
      :file "face-remap.el.gz"
      :pointmax 19481
      :fsize 5822
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1874354"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup
               (:documentation "Backups of edited data files."
                :user-visible-flag t)
                nil [1238 1309])
            ("find-file" customgroup
               (:documentation "Finding files."
                :user-visible-flag t)
                nil [1311 1370])
            ("delete-auto-save-files" variable
               (:documentation "Non-nil means delete auto-save file when a buffer is saved or killed.

Note that the auto-save file will not be deleted if the buffer is killed
when it has unsaved changes."
                :default-value t)
                nil [1373 1623])
            ("directory-abbrev-alist" variable (:documentation "Alist of abbreviations for file directories.
A list of elements of the form (FROM . TO), each meaning to replace
a match for FROM with TO when a directory name matches FROM.  This
replacement is done when setting up the default directory of a
newly visited file buffer.

FROM is a regexp that is matched against directory names anchored at
the first character, so it should start with a \"\\\\\\=`\", or, if
directory names cannot have embedded newlines, with a \"^\".

FROM and TO should be equivalent names, which refer to the
same directory.  TO should be an absolute directory name.
Do not use `~' in the TO strings.

Use this feature when you have directories which you normally refer to
via absolute symbolic links.  Make TO the name of the link, and FROM
a regexp matching the name it is linked to.") nil [1625 2637])
            ("make-backup-files" variable
               (:documentation "Non-nil means make a backup of a file the first time it is saved.
This can be done by renaming the file or by copying.

Renaming means that Emacs renames the existing file so that it is a
backup file, then writes the buffer into a new file.  Any other names
that the old file had will now refer to the backup file.  The new file
is owned by you and its group is defaulted.

Copying means that Emacs copies the existing file into the backup
file, then writes the buffer on top of the existing file.  Any other
names that the old file had will now refer to the new (edited) file.
The file's owner and group are unchanged.

The choice of renaming or copying is controlled by the variables
`backup-by-copying', `backup-by-copying-when-linked',
`backup-by-copying-when-mismatch' and
`backup-by-copying-when-privileged-mismatch'.  See also `backup-inhibited'."
                :default-value t)
                nil [2639 3562])
            ("backup-inhibited" variable (:documentation "If non-nil, backups will be inhibited.
This variable is intended for use by making it local to a buffer,
but it is not an automatically buffer-local variable.") nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable (:documentation "Non-nil means always use copying to create backup files.
See documentation of variable `make-backup-files'.") nil [3900 4078])
            ("backup-by-copying-when-linked" variable (:documentation "Non-nil means use copying to create backups for files with multiple names.
This causes the alternate names to refer to the latest version as edited.
This variable is relevant only if `backup-by-copying' is nil.") nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable
               (:documentation "Non-nil means create backups by copying if this preserves owner or group.
Renaming may still be used (subject to control of other variables)
when it would not result in changing the owner or group of the file;
that is, for files which are owned by you and whose group matches
the default for a new file created there by you.
This variable is relevant only if `backup-by-copying' is nil."
                :default-value t)
                nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable
               (:documentation "Non-nil means create backups by copying to preserve a privileged owner.
Renaming may still be used (subject to control of other variables)
when it would not result in changing the owner of the file or if the owner
has a user id greater than the value of this variable.  This is useful
when low-numbered uid's are used for special system users (such as root)
that must maintain ownership of certain files.
This variable is relevant only if `backup-by-copying' and
`backup-by-copying-when-mismatch' are nil."
                :default-value 200)
                nil [4923 5546])
            ("backup-enable-predicate" variable
               (:documentation "Predicate that looks at a file name and decides whether to make backups.
Called with an absolute file name as argument, it returns t to enable backup."
                :default-value 'normal-backup-enable-predicate)
                nil [5548 5767])
            ("buffer-offer-save" variable (:documentation "Non-nil in a buffer means always offer to save buffer on exiting Emacs.
Do so even if the buffer is not visiting a file.
Automatically local in all buffers.

Set to the symbol `always' to offer to save buffer whenever
`save-some-buffers' is called.

Note that this option has no effect on `kill-buffer';
if you want to control what happens when a buffer is killed,
use `kill-buffer-query-functions'.") nil [5769 6390])
            ("make-variable-buffer-local" code nil nil [6391 6438])
            ("put" code nil nil [6439 6482])
            ("find-file-existing-other-name" variable
               (:documentation "Non-nil means find a file under alternative names, in existing buffers.
This means if any existing buffer is visiting the file you want
under another name, you get the existing buffer instead of a new buffer."
                :default-value t)
                nil [6484 6777])
            ("find-file-visit-truename" variable (:documentation "Non-nil means visiting a file uses its truename as the visited-file name.
That is, the buffer visiting the file has the truename as the
value of `buffer-file-name'.  The truename of a file is found by
chasing all links both at the file level and at the levels of the
containing directories.") nil [6779 7151])
            ("put" code nil nil [7152 7214])
            ("revert-without-query" variable (:documentation "Specify which files should be reverted without query.
The value is a list of regular expressions.
If the file name matches one of these regular expressions,
then `revert-buffer' reverts the file without querying
if the file has changed on disk and you have not edited the buffer.") nil [7216 7581])
            ("buffer-file-number" variable (:documentation "The device number and file number of the file visited in the current buffer.
The value is a list of the form (FILENUM DEVNUM).
This pair of numbers uniquely identifies the file.
If the buffer is visiting a new file, the value is nil.") nil [7583 7852])
            ("make-variable-buffer-local" code nil nil [7853 7901])
            ("put" code nil nil [7902 7946])
            ("buffer-file-numbers-unique" variable
               (:documentation "Non-nil means that `buffer-file-number' uniquely identifies files."
                :default-value (not (memq system-type '(windows-nt))))
                nil [7948 8093])
            ("buffer-file-read-only" variable (:documentation "Non-nil if visited file was read-only when visited.") nil [8095 8185])
            ("make-variable-buffer-local" code nil nil [8186 8237])
            ("small-temporary-file-directory" variable
               (:documentation "The directory for writing small temporary files.
If non-nil, this directory is used instead of `temporary-file-directory'
by programs that create small temporary files.  This is for systems that
have fast storage with limited space, such as a RAM disk."
                :default-value (if (eq system-type 'ms-dos) (getenv "TMPDIR")))
                nil [8239 8683])
            ("null-device" variable
               (:documentation "The system null device."
                :default-value (purecopy "/dev/null"))
                nil [8751 8820])
            ("declare-function" code nil nil [8822 8872])
            ("declare-function" code nil nil [8873 8922])
            ("declare-function" code nil nil [8923 9009])
            ("declare-function" code nil nil [9010 9077])
            ("declare-function" code nil nil [9078 9150])
            ("declare-function" code nil nil [9151 9207])
            ("declare-function" code nil nil [9208 9267])
            ("file-name-invalid-regexp" variable
               (:documentation "Regexp recognizing file names which aren't allowed by the filesystem."
                :default-value (cond ((and (eq system-type 'ms-dos) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type '(ms-dos windows-nt cygwin)) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]"))))
                nil [9269 9942])
            ("file-precious-flag" variable (:documentation "Non-nil means protect against I/O errors while saving files.
Some modes set this non-nil in particular buffers.

This feature works by writing the new contents into a temporary file
and then renaming the temporary file to replace the original.
In this way, any I/O error in writing leaves the original untouched,
and there is never any instant where the file is nonexistent.

Note that this feature forces backups to be made by copying.
Yet, at the same time, saving a precious file
breaks any hard links between it and other files.

This feature is advisory: for example, if the directory in which the
file is being saved is not writable, Emacs may ignore a non-nil value
of `file-precious-flag' and write directly into the file.

See also: `break-hardlink-on-save'.") nil [9944 10784])
            ("break-hardlink-on-save" variable (:documentation "Whether to allow breaking hardlinks when saving files.
If non-nil, then when saving a file that exists under several
names (i.e., has multiple hardlinks), break the hardlink
associated with `buffer-file-name' and write to a new file, so
that the other instances of the file are not affected by the
save.

If `buffer-file-name' refers to a symlink, do not break the symlink.

Unlike `file-precious-flag', `break-hardlink-on-save' is not advisory.
For example, if the directory in which a file is being saved is not
itself writable, then error instead of saving in some
hardlink-nonbreaking way.

See also `backup-by-copying' and `backup-by-copying-when-linked'.") nil [10786 11541])
            ("version-control" variable (:documentation "Control use of version numbers for backup files.
When t, make numeric backup versions unconditionally.
When nil, make them for files that have some already.
The value `never' means do not make them.") nil [11543 11900])
            ("version-control-safe-local-p" function
               (:documentation "Return whether X is safe as local value for `version-control'."
                :arguments ("x"))
                nil [11902 12046])
            ("put" code nil nil [12048 12127])
            ("dired-kept-versions" variable
               (:documentation "When cleaning directory, number of versions to keep."
                :default-value 2)
                nil [12129 12269])
            ("delete-old-versions" variable (:documentation "If t, delete excess backup versions silently.
If nil, ask confirmation.  Any other value prevents any trimming.") nil [12271 12537])
            ("kept-old-versions" variable
               (:documentation "Number of oldest versions to keep when a new numbered backup is made."
                :default-value 2)
                nil [12539 12678])
            ("put" code nil nil [12679 12734])
            ("kept-new-versions" variable
               (:documentation "Number of newest versions to keep when a new numbered backup is made.
Includes the new backup.  Must be greater than 0."
                :default-value 2)
                nil [12736 12925])
            ("put" code nil nil [12926 12981])
            ("require-final-newline" variable (:documentation "Whether to add a newline automatically at the end of the file.

A value of t means do this only when the file is about to be saved.
A value of `visit' means do this right after the file is visited.
A value of `visit-save' means do it at both of those times.
Any other non-nil value means ask user whether to add a newline, when saving.
A value of nil means don't add newlines.

Certain major modes set this locally to the value obtained
from `mode-require-final-newline'.") nil [12983 13754])
            ("mode-require-final-newline" variable
               (:documentation "Whether to add a newline at end of file, in certain major modes.
Those modes set `require-final-newline' to this value when you enable them.
They do so because they are often used for files that are supposed
to end in newlines, and the question is how to arrange that.

A value of t means do this only when the file is about to be saved.
A value of `visit' means do this right after the file is visited.
A value of `visit-save' means do it at both of those times.
Any other non-nil value means ask user whether to add a newline, when saving.

A value of nil means do not add newlines.  That is a risky choice in this
variable since this value is used for modes for files that ought to have
final newlines.  So if you set this to nil, you must explicitly check and
add a final newline, whenever you save a file that really needs one."
                :default-value t)
                nil [13756 14891])
            ("auto-save-default" variable
               (:documentation "Non-nil says by default do auto-saving of every file-visiting buffer."
                :default-value t)
                nil [14893 15035])
            ("auto-save-file-name-transforms" variable
               (:documentation "Transforms to apply to buffer file name before making auto-save file name.
Each transform is a list (REGEXP REPLACEMENT UNIQUIFY):
REGEXP is a regular expression to match against the file name.
If it matches, `replace-match' is used to replace the
matching part with REPLACEMENT.
If the optional element UNIQUIFY is non-nil, the auto-save file name is
constructed by taking the directory part of the replaced file-name,
concatenated with the buffer file name with all directory separators
changed to `!' to prevent clashes.  This will not work
correctly if your filesystem truncates the resulting name.

All the transforms in the list are tried, in the order they are listed.
When one transform applies, its result is final;
no further transforms are tried.

The default value is set up to put the auto-save file into the
temporary directory (see the variable `temporary-file-directory') for
editing a remote file.

On MS-DOS filesystems without long names this variable is always
ignored."
                :default-value `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(concat temporary-file-directory "\\2") t)))
                nil [15037 16465])
            ("auto-save--timer" variable (:documentation "Timer for `auto-save-visited-mode'.") nil [16467 16534])
            ("auto-save-visited-interval" variable
               (:documentation "Interval in seconds for `auto-save-visited-mode'.
If `auto-save-visited-mode' is enabled, Emacs will save all
buffers visiting a file to the visited file after it has been
idle for `auto-save-visited-interval' seconds."
                :default-value 5)
                nil [16536 17017])
            ("define-minor-mode" code nil nil [17019 17767])
            ("make-obsolete-variable" code nil nil [17962 18081])
            ("save-abbrevs" variable
               (:documentation "Non-nil means save word abbrevs too when files are saved.
If `silently', don't ask the user before saving."
                :default-value t)
                nil [18083 18294])
            ("find-file-run-dired" variable
               (:documentation "Non-nil means allow `find-file' to visit directories.
To visit the directory, `find-file' runs `find-directory-functions'."
                :default-value t)
                nil [18296 18493])
            ("find-directory-functions" variable
               (:documentation "List of functions to try in sequence to visit a directory.
Each function is called with the directory name as the sole argument
and should return either a buffer or nil."
                :default-value '(cvs-dired-noselect dired-noselect))
                nil [18495 18823])
            ("file-name-at-point-functions" variable
               (:documentation "List of functions to try in sequence to get a file name at point.
Each function should return either nil or a file name found at the
location of point in the current buffer."
                :default-value '(ffap-guess-file-name-at-point))
                nil [18884 19212])
            ("define-obsolete-variable-alias" code nil nil [19324 19425])
            ("find-file-not-found-functions" variable (:documentation "List of functions to be called for `find-file' on nonexistent file.
These functions are called as soon as the error is detected.
Variable `buffer-file-name' is already set up.
The functions are called in the order given until one of them returns non-nil.") nil [19426 19727])
            ("define-obsolete-variable-alias" code nil nil [19894 19966])
            ("find-file-hook" variable (:documentation "List of functions to be called after a buffer is loaded from a file.
The buffer's local variables (if any) will have been processed before the
functions are called.") nil [19967 20244])
            ("define-obsolete-variable-alias" code nil nil [20316 20395])
            ("write-file-functions" variable (:documentation "List of functions to be called before saving a buffer to a file.
Only used by `save-buffer'.
If one of them returns non-nil, the file is considered already written
and the rest are not called.
These hooks are considered to pertain to the visited file.
So any buffer-local binding of this variable is discarded if you change
the visited file name with \\[set-visited-file-name], but not when you
change the major mode.

This hook is not run if any of the functions in
`write-contents-functions' returns non-nil.  Both hooks pertain
to how to save a buffer to file, for instance, choosing a suitable
coding system and setting mode bits.  (See Info
node `(elisp)Saving Buffers'.)  To perform various checks or
updates before the buffer is saved, use `before-save-hook'.") nil [20396 21200])
            ("put" code nil nil [21201 21247])
            ("local-write-file-hooks" variable nil nil [21310 21345])
            ("make-variable-buffer-local" code nil nil [21346 21398])
            ("put" code nil nil [21399 21447])
            ("make-obsolete-variable" code nil nil [21448 21525])
            ("define-obsolete-variable-alias" code nil nil [21588 21679])
            ("write-contents-functions" variable (:documentation "List of functions to be called before writing out a buffer to a file.

Only used by `save-buffer'.  If one of them returns non-nil, the
file is considered already written and the rest are not called
and neither are the functions in `write-file-functions'.  This
hook can thus be used to create save behavior for buffers that
are not visiting a file at all.

This variable is meant to be used for hooks that pertain to the
buffer's contents, not to the particular visited file; thus,
`set-visited-file-name' does not clear this variable; but changing the
major mode does clear it.

For hooks that _do_ pertain to the particular visited file, use
`write-file-functions'.  Both this variable and
`write-file-functions' relate to how a buffer is saved to file.
To perform various checks or updates before the buffer is saved,
use `before-save-hook'.") nil [21680 22567])
            ("make-variable-buffer-local" code nil nil [22568 22622])
            ("enable-local-variables" variable
               (:documentation "Control use of local variables in files you visit.
The value can be t, nil, :safe, :all, or something else.

A value of t means file local variables specifications are obeyed
if all the specified variable values are safe; if any values are
not safe, Emacs queries you, once, whether to set them all.
(When you say yes to certain values, they are remembered as safe.)

:safe means set the safe variables, and ignore the rest.
:all means set all variables, whether safe or not.
 (Don't set it permanently to :all.)
A value of nil means always ignore the file local variables.

Any other value means always query you once whether to set them all.
(When you say yes to certain values, they are remembered as safe, but
this has no effect when `enable-local-variables' is \"something else\".)

This variable also controls use of major modes specified in
a -*- line.

The command \\[normal-mode], when used interactively,
always obeys file local variable specifications and the -*- line,
and ignores this variable."
                :default-value t)
                nil [22624 23876])
            ("enable-dir-local-variables" variable
               (:documentation "Non-nil means enable use of directory-local variables.
Some modes may wish to set this to nil to prevent directory-local
settings being applied, but still respect file-local ones."
                :default-value t)
                nil [23878 24099])
            ("local-enable-local-variables" variable
               (:documentation "Like `enable-local-variables', except for major mode in a -*- line.
The meaningful values are nil and non-nil.  The default is non-nil.
It should be set in a buffer-local fashion.

Setting this to nil has the same effect as setting `enable-local-variables'
to nil, except that it does not ignore any mode: setting in a -*- line.
Unless this difference matters to you, you should set `enable-local-variables'
instead of this variable."
                :default-value t)
                nil [25462 25939])
            ("enable-local-eval" variable
               (:documentation "Control processing of the \"variable\" `eval' in a file's local variables.
The value can be t, nil or something else.
A value of t means obey `eval' variables.
A value of nil means ignore them; anything else means query."
                :default-value 'maybe)
                nil [25941 26332])
            ("view-read-only" variable (:documentation "Non-nil means buffers visiting files read-only do so in view mode.
In fact, this means that all read-only buffers normally have
View mode enabled, including buffers that are read-only because
you visit a file you cannot alter, and buffers you make read-only
using \\[read-only-mode].") nil [26334 26684])
            ("file-name-history" variable (:documentation "History list of file names entered in the minibuffer.

Maximum length of the history list is determined by the value
of `history-length', which see.") nil [26686 26869])
            ("save-silently" variable (:documentation "If non-nil, avoid messages when saving files.
Error-related messages will still be printed, but all other
messages will not.") nil [26871 27026])
            ("put" code nil nil [27030 27084])
            ("ange-ftp-completion-hook-function" function
               (:documentation "Provides support for ange-ftp host name completion.
Runs the usual ange-ftp hook, but only for completion operations."
                :arguments ("op" "args"))
                nil [27085 27691])
            ("declare-function" code nil nil [27693 27765])
            ("declare-function" code nil nil [27766 27838])
            ("convert-standard-filename" function
               (:documentation "Convert a standard file's name to something suitable for the OS.
This means to guarantee valid names and perhaps to canonicalize
certain patterns.

FILENAME should be an absolute file name since the conversion rules
sometimes vary depending on the position in the file name.  E.g. c:/foo
is a valid DOS file name, but c:/bar/c:/foo is not.

This function's standard definition is trivial; it just returns
the argument.  However, on Windows and DOS, replace invalid
characters.  On DOS, make sure to obey the 8.3 limitations.
In the native Windows build, turn Cygwin names into native names.

See Info node `(elisp)Standard File Names' for more details."
                :arguments ("filename"))
                nil [27840 28996])
            ("read-directory-name" function
               (:documentation "Read directory name, prompting with PROMPT and completing in directory DIR.
Value is not expanded---you must call `expand-file-name' yourself.
Default name to DEFAULT-DIRNAME if user exits with the same
non-empty string that was inserted by this function.
 (If DEFAULT-DIRNAME is omitted, DIR combined with INITIAL is used,
  or just DIR if INITIAL is nil.)
If the user exits with an empty minibuffer, this function returns
an empty string.  (This can only happen if the user erased the
pre-inserted contents or if `insert-default-directory' is nil.)
Fourth arg MUSTMATCH non-nil means require existing directory's name.
 Non-nil and non-t means also require confirmation after completion.
Fifth arg INITIAL specifies text to start with.
DIR should be an absolute directory name.  It defaults to
the value of `default-directory'."
                :arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial"))
                nil [28998 30119])
            ("pwd" function
               (:documentation "Show the current default directory.
With prefix argument INSERT, insert the current default directory
at point instead."
                :user-visible-flag t
                :arguments ("insert"))
                nil [30123 30391])
            ("cd-path" variable (:documentation "Value of the CDPATH environment variable, as a list.
Not actually set up until the first time you use it.") nil [30393 30523])
            ("parse-colon-path" function
               (:documentation "Explode a search path into a list of directory names.
Directories are separated by `path-separator' (which is colon in
GNU and Unix systems).  Substitute environment variables into the
resulting list of directory names.  For an empty path element (i.e.,
a leading or trailing separator, or two adjacent separators), return
nil (meaning `default-directory') as the associated list element."
                :arguments ("search-path"))
                nil [30525 31144])
            ("cd-absolute" function
               (:documentation "Change current directory to given absolute file name DIR."
                :arguments ("dir"))
                nil [31146 32051])
            ("cd" function
               (:documentation "Make DIR become the current buffer's default directory.
If your environment includes a `CDPATH' variable, try each one of
that list of directories (separated by occurrences of
`path-separator') when resolving a relative directory name.
The path separator is colon in GNU and GNU-like systems."
                :user-visible-flag t
                :arguments ("dir"))
                nil [32053 33880])
            ("directory-files-recursively" function
               (:documentation "Return list of all files under DIR that have file names matching REGEXP.
This function works recursively.  Files are returned in \"depth first\"
order, and files from each directory are sorted in alphabetical order.
Each file name appears in the returned list in its absolute form.
Optional argument INCLUDE-DIRECTORIES non-nil means also include in the
output directories whose names match REGEXP."
                :arguments ("dir" "regexp" "include-directories"))
                nil [33882 35277])
            ("module-file-suffix" variable nil nil [35279 35306])
            ("load-file" function
               (:documentation "Load the Lisp file named FILE."
                :user-visible-flag t
                :arguments ("file"))
                nil [35308 35776])
            ("locate-file" function
               (:documentation "Search for FILENAME through PATH.
If found, return the absolute file name of FILENAME; otherwise
return nil.
PATH should be a list of directories to look in, like the lists in
`exec-path' or `load-path'.
If SUFFIXES is non-nil, it should be a list of suffixes to append to
file name when searching.  If SUFFIXES is nil, it is equivalent to (\"\").
Use (\"/\") to disable PATH search, but still try the suffixes in SUFFIXES.
If non-nil, PREDICATE is used instead of `file-readable-p'.

This function will normally skip directories, so if you want it to find
directories, make sure the PREDICATE function returns `dir-ok' for them.

PREDICATE can also be an integer to pass to the `access' system call,
in which case file-name handlers are ignored.  This usage is deprecated.
For compatibility, PREDICATE can also be one of the symbols
`executable', `readable', `writable', or `exists', or a list of
one or more of those symbols."
                :arguments ("filename" "path" "suffixes" "predicate"))
                nil [35778 37155])
            ("locate-file-completion-table" function
               (:documentation "Do completion for file names passed to `locate-file'."
                :arguments ("dirs" "suffixes" "string" "pred" "action"))
                nil [37157 40119])
            ("locate-file-completion" function
               (:documentation "Do completion for file names passed to `locate-file'.
PATH-AND-SUFFIXES is a pair of lists, (DIRECTORIES . SUFFIXES)."
                :arguments ("string" "path-and-suffixes" "action"))
                nil [40121 40529])
            ("locate-dominating-stop-dir-regexp" variable
               (:documentation "Regexp of directory names which stop the search in `locate-dominating-file'.
Any directory whose name matches this regexp will be treated like
a kind of root directory by `locate-dominating-file' which will stop its search
when it bumps into it.
The default regexp prevents fruitless and time-consuming attempts to find
special files in directories in which filenames are interpreted as hostnames,
or mount points potentially requiring authentication as a different user."
                :default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'"))
                nil [40531 41135])
            ("locate-dominating-file" function
               (:documentation "Starting at FILE, look up directory hierarchy for directory containing NAME.
FILE can be a file or a directory.  If it's a file, its directory will
serve as the starting point for searching the hierarchy of directories.
Stop at the first parent directory containing a file NAME,
and return the directory.  Return nil if not found.
Instead of a string, NAME can also be a predicate taking one argument
(a directory) and returning a non-nil value if that directory is the one for
which we're looking.  The predicate will be called with every file/directory
the function needs to examine, starting with FILE."
                :arguments ("file" "name"))
                nil [41137 42550])
            ("user-emacs-directory-warning" variable
               (:documentation "Non-nil means warn if cannot access `user-emacs-directory'.
Set this to nil at your own risk..."
                :default-value t)
                nil [42552 42754])
            ("locate-user-emacs-file" function
               (:documentation "Return an absolute per-user Emacs-specific file name.
If NEW-NAME exists in `user-emacs-directory', return it.
Else if OLD-NAME is non-nil and ~/OLD-NAME exists, return ~/OLD-NAME.
Else return NEW-NAME in `user-emacs-directory', creating the
directory if it does not exist."
                :arguments ("new-name" "old-name"))
                nil [42756 44442])
            ("exec-path" function (:documentation "Return list of directories to search programs to run in remote subprocesses.
The remote host is identified by `default-directory'.  For remote
hosts which do not support subprocesses, this returns `nil'.
If `default-directory' is a local directory, this function returns
the value of the variable `exec-path'.") nil [44444 44915])
            ("executable-find" function
               (:documentation "Search for COMMAND in `exec-path' and return the absolute file name.
Return nil if COMMAND is not found anywhere in `exec-path'.  If
REMOTE is non-nil, search on the remote host indicated by
`default-directory' instead."
                :arguments ("command" "remote"))
                nil [44917 45655])
            ("load-library" function
               (:documentation "Load the Emacs Lisp library named LIBRARY.
LIBRARY should be a string.
This is an interface to the function `load'.  LIBRARY is searched
for in `load-path', both with and without `load-suffixes' (as
well as `load-file-rep-suffixes').

See Info node `(emacs)Lisp Libraries' for more details.
See `load-file' for a different interface to `load'."
                :user-visible-flag t
                :arguments ("library"))
                nil [45657 46352])
            ("file-remote-p" function
               (:documentation "Test whether FILE specifies a location on a remote system.
A file is considered remote if accessing it is likely to
be slower or less reliable than accessing local files.

`file-remote-p' never opens a new remote connection.  It can
only reuse a connection that is already open.

Return nil or a string identifying the remote connection
(ideally a prefix of FILE).  Return nil if FILE is a relative
file name.

When IDENTIFICATION is nil, the returned string is a complete
remote identifier: with components method, user, and host.  The
components are those present in FILE, with defaults filled in for
any that are missing.

IDENTIFICATION can specify which part of the identification to
return.  IDENTIFICATION can be the symbol `method', `user',
`host', or `localname'.  Any other value is handled like nil and
means to return the complete identification.  The string returned
for IDENTIFICATION `localname' can differ depending on whether
there is an existing connection.

If CONNECTED is non-nil, return an identification only if FILE is
located on a remote system and a connection is established to
that remote system.

Tip: You can use this expansion of remote identifier components
     to derive a new remote file name from an existing one.  For
     example, if FILE is \"/sudo::/path/to/file\" then

       (concat (file-remote-p FILE) \"/bin/sh\")

     returns a remote file name for file \"/bin/sh\" that has the
     same remote identifier as FILE but expanded; a name such as
     \"/sudo:root@myhost:/bin/sh\"."
                :arguments ("file" "identification" "connected"))
                nil [46354 48106])
            ("remote-shell-program" variable
               (:documentation "Program to use to execute commands on a remote host (e.g. ssh or rsh)."
                :default-value (purecopy (let ((list '("ssh" "remsh" "rcmd" "rsh"))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh"))))
                nil [48405 49124])
            ("remote-file-name-inhibit-cache" variable
               (:documentation "Whether to use the remote file-name cache for read access.
When nil, never expire cached values (caution)
When t, never use the cache (safe, but may be slow)
A number means use cached values for that amount of seconds since caching.

The attributes of remote files are cached for better performance.
If they are changed outside of Emacs's control, the cached values
become invalid, and must be reread.  If you are sure that nothing
other than Emacs changes the files, you can set this variable to nil.

If a remote file is checked regularly, it might be a good idea to
let-bind this variable to a value less than the interval between
consecutive checks.  For example:

  (defun display-time-file-nonempty-p (file)
    (let ((remote-file-name-inhibit-cache (- display-time-interval 5)))
      (and (file-exists-p file)
           (< 0 (nth 7 (file-attributes (file-chase-links file)))))))"
                :default-value 10)
                nil [49126 50345])
            ("file-local-name" function
               (:documentation "Return the local name component of FILE.
It returns a file name which can be used directly as argument of
`process-file', `start-file-process', or `shell-command'."
                :arguments ("file"))
                nil [50347 50589])
            ("file-local-copy" function
               (:documentation "Copy the file FILE into a temporary file on this machine.
Returns the name of the local copy, or nil, if FILE is directly
accessible."
                :arguments ("file"))
                nil [50591 50980])
            ("files--name-absolute-system-p" function
               (:documentation "Return non-nil if FILE is an absolute name to the operating system.
This is like `file-name-absolute-p', except that it returns nil for
names beginning with `~'."
                :arguments ("file"))
                nil [50982 51263])
            ("files--splice-dirname-file" function
               (:documentation "Splice DIRNAME to FILE like the operating system would.
If FILE is relative, return DIRNAME concatenated to FILE.
Otherwise return FILE, quoted as needed if DIRNAME and FILE have
different handlers; although this quoting is dubious if DIRNAME
is magic, it is not clear what would be better.  This function
differs from `expand-file-name' in that DIRNAME must be a
directory name and leading `~' and `/:' are not special in FILE."
                :arguments ("dirname" "file"))
                nil [51265 52044])
            ("file-truename" function
               (:documentation "Return the truename of FILENAME.
If FILENAME is not absolute, first expands it against `default-directory'.
The truename of a file name is found by chasing symbolic links
both at the level of the file and at the level of the directories
containing it, until no links are left at any level.

(fn FILENAME)"
                :arguments ("filename" "counter" "prev-dirs"))
                nil [52046 56882])
            ("file-chase-links" function
               (:documentation "Chase links in FILENAME until a name that is not a link.
Unlike `file-truename', this does not check whether a parent
directory name is a symbolic link.
If the optional argument LIMIT is a number,
it means chase no more than that many links and then stop."
                :arguments ("filename" "limit"))
                nil [56884 58305])
            ("file-size-human-readable" function
               (:documentation "Produce a string showing FILE-SIZE in human-readable form.

Optional second argument FLAVOR controls the units and the display format:

 If FLAVOR is nil or omitted, each kilobyte is 1024 bytes and the produced
    suffixes are \"k\", \"M\", \"G\", \"T\", etc.
 If FLAVOR is `si', each kilobyte is 1000 bytes and the produced suffixes
    are \"k\", \"M\", \"G\", \"T\", etc.
 If FLAVOR is `iec', each kilobyte is 1024 bytes and the produced suffixes
    are \"KiB\", \"MiB\", \"GiB\", \"TiB\", etc."
                :arguments ("file-size" "flavor"))
                nil [58437 59554])
            ("mounted-file-systems" variable
               (:documentation "File systems which ought to be mounted."
                :default-value (if (memq system-type '(windows-nt cygwin)) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)"))
                nil [59556 59987])
            ("temporary-file-directory" function (:documentation "The directory for writing temporary files.
In case of a remote `default-directory', this is a directory for
temporary files on that remote host.  If such a directory does
not exist, or `default-directory' ought to be located on a
mounted file system (see `mounted-file-systems'), the function
returns `default-directory'.
For a non-remote and non-mounted `default-directory', the value of
the variable `temporary-file-directory' is returned.") nil [59989 60765])
            ("make-temp-file" function
               (:documentation "Create a temporary file.
The returned file name (created by appending some random characters at the end
of PREFIX, and expanding against `temporary-file-directory' if necessary),
is guaranteed to point to a newly created file.
You can then use `write-region' to write new data into the file.

If DIR-FLAG is non-nil, create a new empty directory instead of a file.

If SUFFIX is non-nil, add that at the end of the file name.

If TEXT is a string, insert it into the new file; DIR-FLAG should be nil.
Otherwise the file will be empty."
                :arguments ("prefix" "dir-flag" "suffix" "text"))
                nil [60767 61820])
            ("files--make-magic-temp-file" function
               (:documentation "Implement (make-temp-file ABSOLUTE-PREFIX DIR-FLAG SUFFIX TEXT).
This implementation works on magic file names."
                :arguments ("absolute-prefix" "dir-flag" "suffix" "text"))
                nil [61822 62762])
            ("make-nearby-temp-file" function
               (:documentation "Create a temporary file as close as possible to `default-directory'.
If PREFIX is a relative file name, and `default-directory' is a
remote file name or located on a mounted file systems, the
temporary file is created in the directory returned by the
function `temporary-file-directory'.  Otherwise, the function
`make-temp-file' is used.  PREFIX, DIR-FLAG and SUFFIX have the
same meaning as in `make-temp-file'."
                :arguments ("prefix" "dir-flag" "suffix"))
                nil [62764 63601])
            ("recode-file-name" function
               (:documentation "Change the encoding of FILE's name from CODING to NEW-CODING.
The value is a new name of FILE.
Signals a `file-already-exists' error if a file of the new name
already exists unless optional fourth argument OK-IF-ALREADY-EXISTS
is non-nil.  A number as fourth arg means request confirmation if
the new name already exists.  This is what happens in interactive
use with M-x."
                :user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [63603 65840])
            ("confirm-nonexistent-file-or-buffer" variable
               (:documentation "Whether confirmation is requested before visiting a new file or buffer.
If nil, confirmation is not requested.
If the value is `after-completion', confirmation is only
 requested if the user called `minibuffer-complete' right before
 `minibuffer-complete-and-exit'.
Any other non-nil value means to request confirmation.

This affects commands like `switch-to-buffer' and `find-file'."
                :default-value 'after-completion)
                nil [65843 66456])
            ("confirm-nonexistent-file-or-buffer" function (:documentation "Whether to request confirmation before visiting a new file or buffer.
The variable `confirm-nonexistent-file-or-buffer' determines the
return value, which may be passed as the REQUIRE-MATCH arg to
`read-buffer' or `find-file-read-args'.") nil [66458 66899])
            ("minibuffer-with-setup-hook" function
               (:documentation "Temporarily add FUN to `minibuffer-setup-hook' while executing BODY.

By default, FUN is prepended to `minibuffer-setup-hook'.  But if FUN is of
the form `(:append FUN1)', FUN1 will be appended to `minibuffer-setup-hook'
instead of prepending it.

BODY should use the minibuffer at most once.
Recursive uses of the minibuffer are unaffected (FUN is not
called additional times).

This macro actually adds an auxiliary function that calls FUN,
rather than FUN itself, to `minibuffer-setup-hook'."
                :arguments ("fun" "body"))
                nil [66901 68144])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [68146 68260])
            ("find-file" function
               (:documentation "Edit file FILENAME.
Switch to a buffer visiting file FILENAME,
creating one if none already exists.
Interactively, the default if you just type RET is the current directory,
but the visited file name is available through the minibuffer history:
type \\[next-history-element] to pull it into the minibuffer.

The first time \\[next-history-element] is used after Emacs prompts for
the file name, the result is affected by `file-name-at-point-functions',
which by default try to guess the file name by looking at point in the
current buffer.  Customize the value of `file-name-at-point-functions'
or set it to nil, if you want only the visited file name and the
current directory to be available on first \\[next-history-element]
request.

You can visit files on remote machines by specifying something
like /ssh:SOME_REMOTE_MACHINE:FILE for the file name.  You can
also visit local files as a different user by specifying
/sudo::FILE for the file name.
See the Info node `(tramp)File name Syntax' in the Tramp Info
manual, for more about this.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and visit multiple files.  You can
suppress wildcard expansion by setting `find-file-wildcards' to nil.

To visit a file without any kind of conversion and without
automatically choosing a major mode, use \\[find-file-literally]."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68262 69976])
            ("find-file-other-window" function
               (:documentation "Edit file FILENAME, in another window.

Like \\[find-file] (which see), but creates a new window or reuses
an existing one.  See the function `display-buffer'.

Interactively, the default if you just type RET is the current directory,
but the visited file name is available through the minibuffer history:
type \\[next-history-element] to pull it into the minibuffer.

The first time \\[next-history-element] is used after Emacs prompts for
the file name, the result is affected by `file-name-at-point-functions',
which by default try to guess the file name by looking at point in the
current buffer.  Customize the value of `file-name-at-point-functions'
or set it to nil, if you want only the visited file name and the
current directory to be available on first \\[next-history-element]
request.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and visit multiple files."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69978 71360])
            ("find-file-other-frame" function
               (:documentation "Edit file FILENAME, in another frame.

Like \\[find-file] (which see), but creates a new frame or reuses
an existing one.  See the function `display-buffer'.

Interactively, the default if you just type RET is the current directory,
but the visited file name is available through the minibuffer history:
type \\[next-history-element] to pull it into the minibuffer.

The first time \\[next-history-element] is used after Emacs prompts for
the file name, the result is affected by `file-name-at-point-functions',
which by default try to guess the file name by looking at point in the
current buffer.  Customize the value of `file-name-at-point-functions'
or set it to nil, if you want only the visited file name and the
current directory to be available on first \\[next-history-element]
request.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and visit multiple files."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [71362 72738])
            ("find-file-existing" function
               (:documentation "Edit the existing file FILENAME.
Like \\[find-file], but only allow a file that exists, and do not allow
file names with wildcards."
                :user-visible-flag t
                :arguments ("filename"))
                nil [72740 73175])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [73177 73602])
            ("find-file-read-only" function
               (:documentation "Edit file FILENAME but don't allow changes.
Like \\[find-file], but marks buffer as read-only.
Use \\[read-only-mode] to permit editing."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73604 73985])
            ("find-file-read-only-other-window" function
               (:documentation "Edit file FILENAME in another window but don't allow changes.
Like \\[find-file-other-window], but marks buffer as read-only.
Use \\[read-only-mode] to permit editing."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73987 74438])
            ("find-file-read-only-other-frame" function
               (:documentation "Edit file FILENAME in another frame but don't allow changes.
Like \\[find-file-other-frame], but marks buffer as read-only.
Use \\[read-only-mode] to permit editing."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74440 74886])
            ("find-alternate-file-other-window" function
               (:documentation "Find file FILENAME as a replacement for the file in the next window.
This command does not select that window.

See \\[find-file] for the possible forms of the FILENAME argument.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and replace the file with multiple files."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74888 75837])
            ("kill-buffer-hook" variable (:documentation "Hook run when a buffer is killed.
The buffer being killed is current while the hook is running.
See `kill-buffer'.

Note: Be careful with let-binding this hook considering it is
frequently used for cleanup.") nil [75898 76138])
            ("find-alternate-file" function
               (:documentation "Find file FILENAME, select its buffer, kill previous buffer.
If the current buffer now contains an empty file that you just visited
(presumably by mistake), use this command to visit the file you really want.

See \\[find-file] for the possible forms of the FILENAME argument.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and replace the file with multiple files.

If the current buffer is an indirect buffer, or the base buffer
for one or more indirect buffers, the other buffer(s) are not
killed."
                :user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [76140 79475])
            ("create-file-buffer" function
               (:documentation "Create a suitably named buffer for visiting FILENAME, and return it.
FILENAME (sans directory) is used unchanged if that name is free;
otherwise a string <2> or <3> or ... is appended to get an unused name.

Emacs treats buffers whose names begin with a space as internal buffers.
To avoid confusion when visiting a file whose name begins with a space,
this function prepends a \"|\" to the final result if necessary."
                :arguments ("filename"))
                nil [79600 80280])
            ("generate-new-buffer" function
               (:documentation "Create and return a buffer with a name based on NAME.
Choose the buffer's name using `generate-new-buffer-name'."
                :arguments ("name"))
                nil [80282 80487])
            ("automount-dir-prefix" variable
               (:documentation "Regexp to match the automounter prefix in a directory name."
                :default-value (purecopy "^/tmp_mnt/"))
                nil [80489 80641])
            ("make-obsolete-variable" code nil nil [80642 80719])
            ("abbreviated-home-dir" variable (:documentation "Regexp matching the user's homedir at the beginning of file name.
The value includes abbreviation according to `directory-abbrev-alist'.") nil [80721 80895])
            ("abbreviate-file-name" function
               (:documentation "Return a version of FILENAME shortened using `directory-abbrev-alist'.
This also substitutes \"~\" for the user's home directory (unless the
home directory is a root directory) and removes automounter prefixes
(see the variable `automount-dir-prefix').

When this function is first called, it caches the user's home
directory as a regexp in `abbreviated-home-dir', and reuses it
afterwards (so long as the home directory does not change;
if you want to permanently change your home directory after having
started Emacs, set `abbreviated-home-dir' to nil so it will be recalculated)."
                :arguments ("filename"))
                nil [80897 84955])
            ("find-buffer-visiting" function
               (:documentation "Return the buffer visiting file FILENAME (a string).
This is like `get-file-buffer', except that it checks for any buffer
visiting the same file, possibly under a different name.
If PREDICATE is non-nil, only buffers satisfying it are eligible,
and others are ignored.
If there is no such live buffer, return nil."
                :arguments ("filename" "predicate"))
                nil [84957 86884])
            ("find-file-wildcards" variable
               (:documentation "Non-nil means file-visiting commands should handle wildcards.
For example, if you specify `*.c', that would visit all the files
whose names match the pattern."
                :default-value t)
                nil [86887 87134])
            ("find-file-suppress-same-file-warnings" variable (:documentation "Non-nil means suppress warning messages for symlinked files.
When nil, Emacs prints a warning when visiting a file that is already
visited, but with a different name.  Setting this option to t
suppresses this warning.") nil [87136 87462])
            ("large-file-warning-threshold" variable
               (:documentation "Maximum size of file above which a confirmation is requested.
When nil, never request confirmation."
                :default-value 10000000)
                nil [87464 87743])
            ("out-of-memory-warning-percentage" variable (:documentation "Warn if file size exceeds this percentage of available free memory.
When nil, never issue warning.  Beware: This probably doesn't do what you
think it does, because \"free\" is pretty hard to define in practice.") nil [87745 88128])
            ("declare-function" code nil nil [88130 88209])
            ("files--ask-user-about-large-file" function (:arguments ("size" "op-type" "filename" "offer-raw")) nil [88211 89218])
            ("abort-if-file-too-large" function
               (:documentation "If file SIZE larger than `large-file-warning-threshold', allow user to abort.
OP-TYPE specifies the file operation being performed (for message
to user).  If OFFER-RAW is true, give user the additional option
to open the file literally. If the user chooses this option,
`abort-if-file-too-large' returns the symbol `raw'. Otherwise, it
returns nil or exits non-locally."
                :arguments ("size" "op-type" "filename" "offer-raw"))
                nil [89220 90073])
            ("warn-maybe-out-of-memory" function
               (:documentation "Warn if an attempt to open file of SIZE bytes may run out of memory."
                :arguments ("size"))
                nil [90075 90913])
            ("files--message" function
               (:documentation "Like `message', except sometimes don't print to minibuffer.
If the variable `save-silently' is non-nil, the message is not
displayed on the minibuffer."
                :arguments ("format" "args"))
                nil [90915 91182])
            ("find-file-noselect" function
               (:documentation "Read file FILENAME into a buffer and return the buffer.
If a buffer exists visiting FILENAME, return that one, but
verify that the file has not changed since visited or saved.
The buffer is not selected, just returned to the caller.
Optional second arg NOWARN non-nil means suppress any warning messages.
Optional third arg RAWFILE non-nil means the file is read literally.
Optional fourth arg WILDCARDS non-nil means do wildcard processing
and visit all the matching files.  When wildcards are actually
used and expanded, return a list of buffers that are visiting
the various files."
                :arguments ("filename" "nowarn" "rawfile" "wildcards"))
                nil [91184 98348])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [98350 100795])
            ("insert-file-contents-literally" function
               (:documentation "Like `insert-file-contents', but only reads in the file literally.
See `insert-file-contents' for an explanation of the parameters.
A buffer may be modified in several ways after reading into the buffer,
due to Emacs features such as format decoding, character code
conversion, `find-file-hook', automatic uncompression, etc.

This function ensures that none of these modifications will take place."
                :arguments ("filename" "visit" "beg" "end" "replace"))
                nil [100798 101881])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [101883 102575])
            ("insert-file-literally" function
               (:documentation "Insert contents of file FILENAME into buffer after point with no conversion.

This function is meant for the user to run interactively.
Don't call it from programs!  Use `insert-file-contents-literally' instead.
(Its calling sequence is different; see its documentation)."
                :arguments ("filename"))
                nil [102577 103060])
            ("find-file-literally" variable (:documentation "Non-nil if this buffer was made by `find-file-literally' or equivalent.
This has the `permanent-local' property, which takes effect if you
make the variable buffer-local.") nil [103062 103269])
            ("put" code nil nil [103270 103315])
            ("find-file-literally" function
               (:documentation "Visit file FILENAME with no conversion of any kind.
Format conversion and character code conversion are both disabled,
and multibyte characters are disabled in the resulting buffer.
The major mode used is Fundamental mode regardless of the file name,
and local variable specifications in the file are ignored.
Automatic uncompression and adding a newline at the end of the
file due to `require-final-newline' is also disabled.

If Emacs already has a buffer which is visiting the file,
this command asks you whether to visit it literally instead.

In non-interactive use, the value is the buffer where the file is
visited literally.  If the file was visited in a buffer before
this command was invoked, it will reuse the existing buffer,
regardless of whether it was created literally or not; however,
the contents of that buffer will be the literal text of the file
without any conversions.

In a Lisp program, if you want to be sure of accessing a file's
contents literally, you should create a temporary buffer and then read
the file contents into it using `insert-file-contents-literally'."
                :user-visible-flag t
                :arguments ("filename"))
                nil [103317 104646])
            ("after-find-file" function
               (:documentation "Called after finding a file and by the default revert function.
Sets buffer mode, parses local variables.
Optional args ERROR, WARN, and NOAUTO: ERROR non-nil means there was an
error in reading the file.  WARN non-nil means warn if there
exists an auto-save file more recent than the visited file.
NOAUTO means don't mess with auto-save mode.
Fourth arg AFTER-FIND-FILE-FROM-REVERT-BUFFER is ignored
(see `revert-buffer-in-progress-p' for similar functionality).
Fifth arg NOMODES non-nil means don't alter the file's modes.
Finishes by calling the functions in `find-file-hook'
unless NOMODES is non-nil."
                :arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes"))
                nil [104649 107989])
            ("define-obsolete-function-alias" code nil nil [107991 108066])
            ("normal-mode" function
               (:documentation "Choose the major mode for this buffer automatically.
Also sets up any specified local variables of the file.
Uses the visited file name, the -*- line, and the local variables spec.

This function is called automatically from `find-file'.  In that case,
we may set up the file-specified mode and local variables,
depending on the value of `enable-local-variables'.
In addition, if `local-enable-local-variables' is nil, we do
not set local variables (though we do notice a mode specified with -*-.)

`enable-local-variables' is ignored if you run `normal-mode' interactively,
or from Lisp without specifying the optional argument FIND-FILE;
in that case, this function acts as if `enable-local-variables' were t."
                :user-visible-flag t
                :arguments ("find-file"))
                nil [108068 110043])
            ("auto-mode-case-fold" variable
               (:documentation "Non-nil means to try second pass through `auto-mode-alist'.
This means that if the first case-sensitive search through the alist fails
to find a matching major mode, a second case-insensitive search is made.
On systems with case-insensitive file names, this variable is ignored,
since only a single case-insensitive search through the alist is made."
                :default-value t)
                nil [110045 110483])
            ("auto-mode-alist" variable
               (:documentation "Alist of filename patterns vs corresponding major mode functions.
Each element looks like (REGEXP . FUNCTION) or (REGEXP FUNCTION NON-NIL).
(NON-NIL stands for anything that is not nil; the value does not matter.)
Visiting a file whose name matches REGEXP specifies FUNCTION as the
mode function to use.  FUNCTION will be called, unless it is nil.

If the element has the form (REGEXP FUNCTION NON-NIL), then after
calling FUNCTION (if it's not nil), we delete the suffix that matched
REGEXP and search the list again for another match.

The extensions whose FUNCTION is `archive-mode' should also
appear in `auto-coding-alist' with `no-conversion' coding system.

See also `interpreter-mode-alist', which detects executable script modes
based on the interpreters they specify to run,
and `magic-mode-alist', which determines modes based on file contents."
                :default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) `(("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) ,@(if (memq system-type '(berkeley-unix darwin)) '(("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode)) '(("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))
                nil [110485 122009])
            ("put" code nil nil [122010 122056])
            ("conf-mode-maybe" function (:documentation "Select Conf mode or XML mode according to start of file.") nil [122058 122308])
            ("interpreter-mode-alist" variable
               (:documentation "Alist mapping interpreter names to major modes.
This is used for files whose first lines match `auto-mode-interpreter-regexp'.
Each element looks like (REGEXP . MODE).
If REGEXP matches the entire name (minus any directory part) of
the interpreter specified in the first line of a script, enable
major mode MODE.

See also `auto-mode-alist'."
                :default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) '(("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))
                nil [122310 123705])
            ("define-obsolete-variable-alias" code nil nil [123707 123820])
            ("inhibit-local-variables-regexps" variable
               (:documentation "List of regexps matching file names in which to ignore local variables.
This includes `-*-' lines as well as trailing \"Local Variables\" sections.
Files matching this list are typically binary file formats.
They may happen to contain sequences that look like local variable
specifications, but are not really, or they may be containers for
member files with their own local variable sections, which are
not appropriate for the containing file.
The function `inhibit-local-variables-p' uses this."
                :default-value (mapcar 'purecopy '("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))
                nil [124019 124879])
            ("define-obsolete-variable-alias" code nil nil [124881 124991])
            ("inhibit-local-variables-suffixes" variable (:documentation "List of regexps matching suffixes to remove from file names.
The function `inhibit-local-variables-p' uses this: when checking
a file name, it first discards from the end of the name anything that
matches one of these regexps.") nil [124993 125269])
            ("inhibit-local-variables-ignore-case" variable
               (:documentation "Non-nil means `inhibit-local-variables-p' ignores case."
                :default-value t)
                nil [125341 125447])
            ("inhibit-local-variables-p" function (:documentation "Return non-nil if file local variables should be ignored.
This checks the file (or buffer) name against `inhibit-local-variables-regexps'
and `inhibit-local-variables-suffixes'.  If
`inhibit-local-variables-ignore-case' is non-nil, this ignores case.") nil [125449 126259])
            ("auto-mode-interpreter-regexp" variable
               (:documentation "Regexp matching interpreters, for file mode determination.
This regular expression is matched against the first line of a file
to determine the file's mode in `set-auto-mode'.  If it matches, the file
is assumed to be interpreted by the interpreter matched by the second group
of the regular expression.  The mode is then determined as the mode
associated with that interpreter in `interpreter-mode-alist'."
                :default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)"))
                nil [126261 126779])
            ("magic-mode-alist" variable (:documentation "Alist of buffer beginnings vs. corresponding major mode functions.
Each element looks like (REGEXP . FUNCTION) or (MATCH-FUNCTION . FUNCTION).
After visiting a file, if REGEXP matches the text at the beginning of the
buffer, or calling MATCH-FUNCTION returns non-nil, `normal-mode' will
call FUNCTION rather than allowing `auto-mode-alist' to decide the buffer's
major mode.

If FUNCTION is nil, then it is not called.  (That is a way of saying
\"allow `auto-mode-alist' to decide for these files.\")") nil [126781 127315])
            ("put" code nil nil [127316 127363])
            ("magic-fallback-mode-alist" variable
               (:documentation "Like `magic-mode-alist' but has lower priority than `auto-mode-alist'.
Each element looks like (REGEXP . FUNCTION) or (MATCH-FUNCTION . FUNCTION).
After visiting a file, if REGEXP matches the text at the beginning of the
buffer, or calling MATCH-FUNCTION returns non-nil, `normal-mode' will
call FUNCTION, provided that `magic-mode-alist' and `auto-mode-alist'
have not specified a mode for this file.

If FUNCTION is nil, then it is not called."
                :default-value (purecopy `((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) (,(let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]")) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) (,(let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE ")) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))
                nil [127365 128908])
            ("put" code nil nil [128909 128965])
            ("magic-mode-regexp-match-limit" variable
               (:documentation "Upper limit on `magic-mode-alist' regexp matches.
Also applies to `magic-fallback-mode-alist'."
                :default-value 4000)
                nil [128967 129109])
            ("set-auto-mode" function
               (:documentation "Select major mode appropriate for current buffer.

To find the right major mode, this function checks for a -*- mode tag
checks for a `mode:' entry in the Local Variables section of the file,
checks if it uses an interpreter listed in `interpreter-mode-alist',
matches the buffer beginning against `magic-mode-alist',
compares the filename against the entries in `auto-mode-alist',
then matches the buffer beginning against `magic-fallback-mode-alist'.

If `enable-local-variables' is nil, or if the file name matches
`inhibit-local-variables-regexps', this function does not check
for any mode: tag anywhere in the file.  If `local-enable-local-variables'
is nil, then the only mode: tag that can be relevant is a -*- one.

If the optional argument KEEP-MODE-IF-SAME is non-nil, then we
set the major mode only if that would change it.  In other words
we don't actually set it to the same mode the buffer already has."
                :arguments ("keep-mode-if-same"))
                nil [129111 136482])
            ("set-auto-mode-0" function
               (:documentation "Apply MODE and return it.
If optional arg KEEP-MODE-IF-SAME is non-nil, MODE is chased of
any aliases and compared to current major mode.  If they are the
same, do nothing and return nil."
                :arguments ("mode" "keep-mode-if-same"))
                nil [136735 137142])
            ("file-auto-mode-skip" variable
               (:documentation "Regexp of lines to skip when looking for file-local settings.
If the first line matches this regular expression, then the -*-...-*- file-
local settings will be consulted on the second line instead of the first."
                :default-value "^\\(#!\\|'\\\\\"\\)")
                nil [137144 137410])
            ("set-auto-mode-1" function (:documentation "Find the -*- spec in the buffer.
Call with point at the place to start searching from.
If one is found, set point to the beginning and return the position
of the end.  Otherwise, return nil; may change point.
The variable `inhibit-local-variables-regexps' can cause a -*- spec to
be ignored; but `enable-local-variables' and `local-enable-local-variables'
have no effect.") nil [137412 138917])
            ("ignored-local-variables" variable
               (:documentation "Variables to be ignored in a file's local variable spec."
                :default-value '(ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))
                nil [138955 139161])
            ("put" code nil nil [139162 139216])
            ("hack-local-variables-hook" variable (:documentation "Normal hook run after processing a file's local variables specs.
Major modes can use this to examine user-specified local variables
in order to initialize other data structure based on them.") nil [139218 139451])
            ("safe-local-variable-values" variable (:documentation "List variable-value pairs that are considered safe.
Each element is a cons cell (VAR . VAL), where VAR is a variable
symbol and VAL is a value that is considered safe.") nil [139453 139713])
            ("safe-local-eval-forms" variable
               (:documentation "Expressions that are considered safe in an `eval:' local variable.
Add expressions to this list if you want Emacs to evaluate them, when
they appear in an `eval' local variable specification, without first
asking you for confirmation."
                :default-value '((add-hook 'write-file-hooks 'time-stamp) (add-hook 'write-file-functions 'time-stamp) (add-hook 'before-save-hook 'time-stamp nil t) (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
                nil [139715 140377])
            ("mapc" code nil nil [140405 141022])
            ("dolist" code nil nil [141664 142352])
            ("put" code nil nil [142354 142468])
            ("put" code nil nil [142470 142516])
            ("file-local-variables-alist" variable (:documentation "Alist of file-local variable settings in the current buffer.
Each element in this list has the form (VAR . VALUE), where VAR
is a file-local variable (a symbol) and VALUE is the value
specified.  The actual value in the buffer may differ from VALUE,
if it is changed by the major or minor modes, or by the user.") nil [142518 142873])
            ("make-variable-buffer-local" code nil nil [142874 142930])
            ("put" code nil nil [142931 142983])
            ("dir-local-variables-alist" variable (:documentation "Alist of directory-local variable settings in the current buffer.
Each element in this list has the form (VAR . VALUE), where VAR
is a directory-local variable (a symbol) and VALUE is the value
specified in .dir-locals.el.  The actual value in the buffer
may differ from VALUE, if it is changed by the major or minor modes,
or by the user.") nil [142985 143367])
            ("make-variable-buffer-local" code nil nil [143368 143423])
            ("before-hack-local-variables-hook" variable (:documentation "Normal hook run before setting file-local variables.
It is called after checking for unsafe/risky variables and
setting `file-local-variables-alist', and before applying the
variables stored in `file-local-variables-alist'.  A hook
function is allowed to change the contents of this alist.

This hook is called only if there is at least one file-local
variable to set.") nil [143425 143843])
            ("hack-local-variables-confirm" function
               (:documentation "Get confirmation before setting up local variable values.
ALL-VARS is the list of all variables to be set up.
UNSAFE-VARS is the list of those that aren't marked as safe or risky.
RISKY-VARS is the list of those that are marked as risky.
If these settings come from directory-local variables, then
DIR-NAME is the name of the associated directory.  Otherwise it is nil."
                :arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name"))
                nil [143845 146750])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [146752 146839])
            ("hack-local-variables-prop-line" function
               (:documentation "Return local variables specified in the -*- line.
Usually returns an alist of elements (VAR . VAL), where VAR is a
variable and VAL is the specified value.  Ignores any
specification for `coding:', and sometimes for `mode' (which
should have already been handled by `set-auto-coding' and
`set-auto-mode', respectively).  Return nil if the -*- line is
malformed.

If HANDLE-MODE is nil, we return the alist of all the local
variables in the line except `coding' as described above.  If it
is neither nil nor t, we do the same, except that any settings of
`mode' and `coding' are ignored.  If HANDLE-MODE is t, we ignore
all settings in the line except for `mode', which (if present) we
return as the symbol specifying the mode."
                :arguments ("handle-mode"))
                nil [146841 150119])
            ("hack-local-variables-filter" function
               (:documentation "Filter local variable settings, querying the user if necessary.
VARIABLES is the alist of variable-value settings.  This alist is
 filtered based on the values of `ignored-local-variables',
 `enable-local-eval', `enable-local-variables', and (if necessary)
 user interaction.  The results are added to
 `file-local-variables-alist', without applying them.
If these settings come from directory-local variables, then
DIR-NAME is the name of the associated directory.  Otherwise it is nil."
                :arguments ("variables" "dir-name"))
                nil [150121 152607])
            ("hack-local-variables--warned-lexical" variable nil nil [152668 152717])
            ("hack-local-variables" function
               (:documentation "Parse and put into effect this buffer's local variables spec.
Uses `hack-local-variables-apply' to apply the variables.

If HANDLE-MODE is nil, we apply all the specified local
variables.  If HANDLE-MODE is neither nil nor t, we do the same,
except that any settings of `mode' are ignored.

If HANDLE-MODE is t, all we do is check whether a \"mode:\"
is specified, and return the corresponding mode symbol, or nil.
In this case, we try to ignore minor-modes, and only return a
major-mode.

If `enable-local-variables' or `local-enable-local-variables' is nil,
this function does nothing.  If `inhibit-local-variables-regexps'
applies to the file in question, the file is not scanned for
local variables, but directory-local variables may still be applied."
                :arguments ("handle-mode"))
                nil [152719 159301])
            ("hack-local-variables-apply" function (:documentation "Apply the elements of `file-local-variables-alist'.
If there are any elements, runs `before-hack-local-variables-hook',
then calls `hack-one-local-variable' to apply the alist elements one by one.
Finishes by running `hack-local-variables-hook', regardless of whether
the alist is empty or not.

Note that this function ignores a `mode' entry if it specifies the same
major mode as the buffer already has.") nil [159303 160104])
            ("safe-local-variable-p" function
               (:documentation "Non-nil if SYM is safe as a file-local variable with value VAL.
It is safe if any of these conditions are met:

 * There is a matching entry (SYM . VAL) in the
   `safe-local-variable-values' user option.

 * The `safe-local-variable' property of SYM is a function that
   evaluates to a non-nil value with VAL as an argument."
                :arguments ("sym" "val"))
                nil [160106 160794])
            ("risky-local-variable-p" function
               (:documentation "Non-nil if SYM could be dangerous as a file-local variable.
It is dangerous if either of these conditions are met:

 * Its `risky-local-variable' property is non-nil.

 * Its name ends with \"hook(s)\", \"function(s)\", \"form(s)\", \"map\",
   \"program\", \"command(s)\", \"predicate(s)\", \"frame-alist\",
   \"mode-alist\", \"font-lock-(syntactic-)keyword*\",
   \"map-alist\", or \"bindat-spec\"."
                :arguments ("sym" "_ignored"))
                nil [160796 161699])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [161701 161805])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [161807 161995])
            ("hack-one-local-variable-eval-safep" function
               (:documentation "Return t if it is safe to eval EXP when it is found in a file."
                :arguments ("exp"))
                nil [161997 163817])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [163819 164251])
            ("hack-one-local-variable" function
               (:documentation "Set local variable VAR with value VAL.
If VAR is `mode', call `VAL-mode' as a function unless it's
already the major mode."
                :arguments ("var" "val"))
                nil [164253 165166])
            ("dir-locals-class-alist" variable
               (:documentation "Alist mapping directory-local variable classes (symbols) to variable lists."
                :default-value 'nil)
                nil [165232 165347])
            ("dir-locals-directory-cache" variable
               (:documentation "List of cached directory roots for directory-local variable classes.
Each element in this list has the form (DIR CLASS MTIME).
DIR is the name of the directory.
CLASS is the name of a variable class (a symbol).
MTIME is the recorded modification time of the directory-local
variables file associated with this entry.  This time is a list
of integers (the same format as `file-attributes'), and is
used to test whether the cache entry is still valid.
Alternatively, MTIME can be nil, which means the entry is always
considered valid."
                :default-value 'nil)
                nil [165349 165925])
            ("dir-locals-get-class-variables" function
               (:documentation "Return the variable list for CLASS."
                :arguments ("class"))
                nil [165927 166060])
            ("dir-locals-collect-mode-variables" function
               (:documentation "Collect directory-local variables from MODE-VARIABLES.
VARIABLES is the initial list of variables.
Returns the new list."
                :arguments ("mode-variables" "variables"))
                nil [166062 166707])
            ("dir-locals-collect-variables" function
               (:documentation "Collect entries from CLASS-VARIABLES into VARIABLES.
ROOT is the root directory of the project.
Return the new variables list."
                :arguments ("class-variables" "root" "variables"))
                nil [166709 168880])
            ("dir-locals-set-directory-class" function
               (:documentation "Declare that the DIRECTORY root is an instance of CLASS.
DIRECTORY is the name of a directory, a string.
CLASS is the name of a project class, a symbol.
MTIME is either the modification time of the directory-local
variables file that defined this class, or nil.

When a file beneath DIRECTORY is visited, the mode-specific
variables from CLASS are applied to the buffer.  The variables
for a class are defined using `dir-locals-set-class-variables'."
                :arguments ("directory" "class" "mtime"))
                nil [168882 169646])
            ("dir-locals-set-class-variables" function
               (:documentation "Map the type CLASS to a list of variable settings.
CLASS is the project class, a symbol.  VARIABLES is a list
that declares directory-local variables for the class.
An element in VARIABLES is either of the form:
    (MAJOR-MODE . ALIST)
or
    (DIRECTORY . LIST)

In the first form, MAJOR-MODE is a symbol, and ALIST is an alist
whose elements are of the form (VARIABLE . VALUE).

In the second form, DIRECTORY is a directory name (a string), and
LIST is a list of the form accepted by the function.

When a file is visited, the file's class is found.  A directory
may be assigned a class using `dir-locals-set-directory-class'.
Then variables are set in the file's buffer according to the
VARIABLES list of the class.  The list is processed in order.

* If the element is of the form (MAJOR-MODE . ALIST), and the
  buffer's major mode is derived from MAJOR-MODE (as determined
  by `derived-mode-p'), then all the variables in ALIST are
  applied.  A MAJOR-MODE of nil may be used to match any buffer.
  `make-local-variable' is called for each variable before it is
  set.

* If the element is of the form (DIRECTORY . LIST), and DIRECTORY
  is an initial substring of the file's directory, then LIST is
  applied by recursively following these rules."
                :arguments ("class" "variables"))
                nil [169648 171023])
            ("dir-locals-file" variable
               (:documentation "File that contains directory-local variables.
It has to be constant to enforce uniform values across different
environments and users.

A second dir-locals file can be used by a user to specify their
personal dir-local variables even if the current directory
already has a `dir-locals-file' that is shared with other
users (such as in a git repository).  The name of this second
file is derived by appending \"-2\" to the base name of
`dir-locals-file'.  With the default value of `dir-locals-file',
a \".dir-locals-2.el\" file in the same directory will override
the \".dir-locals.el\".

See Info node `(elisp)Directory Local Variables' for details."
                :constant-flag t
                :default-value ".dir-locals.el")
                nil [171025 171723])
            ("dir-locals--all-files" function
               (:documentation "Return a list of all readable dir-locals files in DIRECTORY.
The returned list is sorted by increasing priority.  That is,
values specified in the last file should take precedence over
those in the first."
                :arguments ("directory"))
                nil [171725 172655])
            ("dir-locals-find-file" function
               (:documentation "Find the directory-local variables for FILE.
This searches upward in the directory tree from FILE.
It stops at the first directory that has been registered in
`dir-locals-directory-cache' or contains a `dir-locals-file'.
If it finds an entry in the cache, it checks that it is valid.
A cache entry with no modification time element (normally, one that
has been assigned directly using `dir-locals-set-directory-class', not
set from a file) is always valid.
A cache entry based on a `dir-locals-file' is valid if the modification
time stored in the cache matches the current file modification time.
If not, the cache entry is cleared so that the file will be re-read.

This function returns either:
  - nil (no directory local variables found),
  - the matching entry from `dir-locals-directory-cache' (a list),
  - or the full path to the directory (a string) containing at
    least one `dir-locals-file' in the case of no valid cache
    entry."
                :arguments ("file"))
                nil [172657 175784])
            ("declare-function" code nil nil [175786 175852])
            ("declare-function" code nil nil [175853 175905])
            ("dir-locals-read-from-dir" function
               (:documentation "Load all variables files in DIR and register a new class and instance.
DIR is the absolute name of a directory which must contain at
least one dir-local file (which is a file holding variables to
apply).
Return the new class name, which is a symbol named DIR."
                :arguments ("dir"))
                nil [175907 177550])
            ("define-obsolete-function-alias" code nil nil [177552 177646])
            ("enable-remote-dir-locals" variable (:documentation "Non-nil means dir-local variables will be applied to remote files.") nil [177648 177814])
            ("hack-dir-local-variables--warned-coding" variable nil nil [177816 177868])
            ("hack-dir-local-variables" function (:documentation "Read per-directory local variables for the current buffer.
Store the directory-local variables in `dir-local-variables-alist'
and `file-local-variables-alist', without applying them.

This does nothing if either `enable-local-variables' or
`enable-dir-local-variables' are nil.") nil [177870 179487])
            ("hack-dir-local-variables-non-file-buffer" function (:documentation "Apply directory-local variables to a non-file buffer.
For non-file buffers, such as Dired buffers, directory-local
variables are looked for in `default-directory' and its parent
directories.") nil [179489 179795])
            ("change-major-mode-with-file-name" variable
               (:documentation "Non-nil means \\[write-file] should set the major mode from the file name.
However, the mode will not be changed if
(1) a local variables list or the `-*-' line specifies a major mode, or
(2) the current major mode is a \"special\" mode,
    not suitable for ordinary files, or
(3) the new file name does not particularly specify any mode."
                :default-value t)
                nil [179799 180234])
            ("set-visited-file-name" function
               (:documentation "Change name of file visited in current buffer to FILENAME.
This also renames the buffer to correspond to the new file.
The next time the buffer is saved it will go in the newly specified file.
FILENAME nil or an empty string means mark buffer as not visiting any file.
Remember to delete the initial contents of the minibuffer
if you wish to pass an empty string as the argument.

The optional second argument NO-QUERY, if non-nil, inhibits asking for
confirmation in the case where another buffer is already visiting FILENAME.

The optional third argument ALONG-WITH-FILE, if non-nil, means that
the old visited file has been renamed to the new name FILENAME."
                :user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [180236 185325])
            ("write-file" function
               (:documentation "Write current buffer into file FILENAME.
This makes the buffer visit that file, and marks it as not modified.

If you specify just a directory name as FILENAME, that means to use
the default file name but in that directory.  You can also yank
the default file name into the minibuffer to edit it, using \\<minibuffer-local-map>\\[next-history-element].

If the buffer is not already visiting a file, the default file name
for the output file is the buffer name.

If optional second arg CONFIRM is non-nil, this function
asks for confirmation before overwriting an existing file.
Interactively, confirmation is required unless you supply a prefix argument."
                :user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [185327 187367])
            ("file-extended-attributes" function
               (:documentation "Return an alist of extended attributes of file FILENAME.

Extended attributes are platform-specific metadata about the file,
such as SELinux context, list of ACL entries, etc."
                :arguments ("filename"))
                nil [187370 187684])
            ("set-file-extended-attributes" function
               (:documentation "Set extended attributes of file FILENAME to ATTRIBUTES.

ATTRIBUTES must be an alist of file attributes as returned by
`file-extended-attributes'.
Value is t if the function succeeds in setting the attributes."
                :arguments ("filename" "attributes"))
                nil [187686 188288])
            ("backup-buffer" function (:documentation "Make a backup of the disk file visited by the current buffer, if appropriate.
This is normally done before saving the buffer the first time.

A backup may be done by renaming or by copying; see documentation of
variable `make-backup-files'.  If it's done by renaming, then the file is
no longer accessible under its old name.

The value is non-nil after a backup was made by renaming.
It has the form (MODES EXTENDED-ATTRIBUTES BACKUPNAME).
MODES is the result of `file-modes' on the original
file; this means that the caller, after saving the buffer, should change
the modes of the new file to agree with the old modes.
EXTENDED-ATTRIBUTES is the result of `file-extended-attributes'
on the original file; this means that the caller, after saving
the buffer, should change the extended attributes of the new file
to agree with the old attributes.
BACKUPNAME is the backup file name, which is the old file renamed.") nil [188291 191914])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [191916 193017])
            ("file-name-version-regexp" variable
               (:documentation "Regular expression matching the backup/version part of a file name.
Used by `file-name-sans-versions'."
                :default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)")
                nil [193019 193312])
            ("file-name-sans-versions" function
               (:documentation "Return file NAME sans backup versions or strings.
This is a separate procedure so your site-init or startup file can
redefine it.
If the optional argument KEEP-BACKUP-VERSION is non-nil,
we do not remove backup version numbers, only true file version numbers.
See also `file-name-version-regexp'."
                :arguments ("name" "keep-backup-version"))
                nil [193314 194013])
            ("file-ownership-preserved-p" function
               (:documentation "Return t if deleting FILE and rewriting it would preserve the owner.
Return also t if FILE does not exist.  If GROUP is non-nil, check whether
the group would be preserved too."
                :arguments ("file" "group"))
                nil [194015 195822])
            ("file-name-sans-extension" function
               (:documentation "Return FILENAME sans final \"extension\".
The extension, in a file name, is the part that begins with the last `.',
except that a leading `.' of the file name, if there is one, doesn't count."
                :arguments ("filename"))
                nil [195824 196549])
            ("file-name-extension" function
               (:documentation "Return FILENAME's final \"extension\".
The extension, in a file name, is the part that begins with the last `.',
excluding version numbers and backup suffixes, except that a leading `.'
of the file name, if there is one, doesn't count.
Return nil for extensionless file names such as `foo'.
Return the empty string for file names such as `foo.'.

By default, the returned value excludes the period that starts the
extension, but if the optional argument PERIOD is non-nil, the period
is included in the value, and in that case, if FILENAME has no
extension, the value is \"\"."
                :arguments ("filename" "period"))
                nil [196551 197480])
            ("file-name-base" function
               (:documentation "Return the base name of the FILENAME: no directory, no extension."
                :arguments ("filename"))
                nil [197482 197747])
            ("make-backup-file-name-function" variable
               (:documentation "A function that `make-backup-file-name' uses to create backup file names.
The function receives a single argument, the original file name.

If you change this, you may need to change `backup-file-name-p' and
`file-name-sans-versions' too.

You could make this buffer-local to do something special for specific files.

For historical reasons, a value of nil means to use the default function.
This should not be relied upon.

See also `backup-directory-alist'."
                :default-value nil)
                nil [197749 198497])
            ("backup-directory-alist" variable (:documentation "Alist of filename patterns and backup directory names.
Each element looks like (REGEXP . DIRECTORY).  Backups of files with
names matching REGEXP will be made in DIRECTORY.  DIRECTORY may be
relative or absolute.  If it is absolute, so that all matching files
are backed up into the same directory, the file names in this
directory will be the full name of the file backed up with all
directory separators changed to `!' to prevent clashes.  This will not
work correctly if your filesystem truncates the resulting name.

For the common case of all backups going into one directory, the alist
should contain a single element pairing \".\" with the appropriate
directory name.

If this variable is nil, or it fails to match a filename, the backup
is made in the original file's directory.

On MS-DOS filesystems without long names this variable is always
ignored.") nil [198499 199536])
            ("normal-backup-enable-predicate" function
               (:documentation "Default `backup-enable-predicate' function.
Checks for files in `temporary-file-directory',
`small-temporary-file-directory', and \"/tmp\"."
                :arguments ("name"))
                nil [199538 200834])
            ("make-backup-file-name" function
               (:documentation "Create the non-numeric backup file name for FILE.
This calls the function that `make-backup-file-name-function' specifies,
with a single argument FILE."
                :arguments ("file"))
                nil [200836 201149])
            ("make-backup-file-name--default-function" function
               (:documentation "Default function for `make-backup-file-name'.
Normally this just returns FILE's name with `~' appended.
It searches for a match for FILE in `backup-directory-alist'.
If the directory for the backup doesn't exist, it is created."
                :arguments ("file"))
                nil [201151 201901])
            ("make-backup-file-name-1" function
               (:documentation "Subroutine of `make-backup-file-name--default-function'.
The function `find-backup-file-name' also uses this."
                :arguments ("file"))
                nil [201903 204503])
            ("backup-file-name-p" function
               (:documentation "Return non-nil if FILE is a backup file name (numeric or not).
This is a separate function so you can redefine it for customization.
You may need to redefine `file-name-sans-versions' as well."
                :arguments ("file"))
                nil [204505 204766])
            ("backup-extract-version-start" variable nil nil [204768 204805])
            ("backup-extract-version" function
               (:documentation "Given the name of a numeric backup file, FN, return the backup number.
Uses the free variable `backup-extract-version-start', whose value should be
the index in the name where the version number begins."
                :arguments ("fn"))
                nil [204980 205432])
            ("find-backup-file-name" function
               (:documentation "Find a file name for a backup file FN, and suggestions for deletions.
Value is a list whose car is the name for the backup file
and whose cdr is a list of old versions to consider deleting now.
If the value is nil, don't make a backup.
Uses `backup-directory-alist' in the same way as
`make-backup-file-name--default-function' does."
                :arguments ("fn"))
                nil [205434 207573])
            ("file-nlinks" function
               (:documentation "Return number of names file FILENAME has."
                :arguments ("filename"))
                nil [207575 207692])
            ("file-relative-name" function
               (:documentation "Convert FILENAME to be relative to DIRECTORY (default: `default-directory').
This function returns a relative file name which is equivalent to FILENAME
when used with that default directory as the default.
If FILENAME is a relative file name, it will be interpreted as existing in
`default-directory'.
If FILENAME and DIRECTORY lie on different machines or on different drives
on a DOS/Windows machine, it returns FILENAME in expanded form."
                :arguments ("filename" "directory"))
                nil [207694 210449])
            ("save-buffer" function
               (:documentation "Save current buffer in visited file if modified.
Variations are described below.

By default, makes the previous version into a backup file
 if previously requested or if this is the first save.
Prefixed with one \\[universal-argument], marks this version
 to become a backup when the next save is done.
Prefixed with two \\[universal-argument]'s,
 makes the previous version into a backup file.
Prefixed with three \\[universal-argument]'s, marks this version
 to become a backup when the next save is done,
 and makes the previous version into a backup file.

With a numeric prefix argument of 0, never make the previous version
into a backup file.

Note that the various variables that control backups, such
as `version-control', `backup-enable-predicate', `vc-make-backup-files',
and `backup-inhibited', to name just the more popular ones, still
control whether a backup will actually be produced, even when you
invoke this command prefixed with two or three \\[universal-argument]'s.

If a file's name is FOO, the names of its numbered backup versions are
 FOO.~i~ for various integers i.  A non-numbered backup file is called FOO~.
Numeric backups (rather than FOO~) will be made if value of
 `version-control' is not the atom `never' and either there are already
 numeric versions of the file being backed up, or `version-control' is
 non-nil.
We don't want excessive versions piling up, so there are variables
 `kept-old-versions', which tells Emacs how many oldest versions to keep,
 and `kept-new-versions', which tells how many newest versions to keep.
 Defaults are 2 old versions and 2 new.
`dired-kept-versions' controls dired's clean-directory (.) command.
If `delete-old-versions' is nil, system will query user
 before trimming versions.  Otherwise it does it silently.

If `vc-make-backup-files' is nil, which is the default,
 no backup files are made for files managed by version control.
 (This is because the version control system itself records previous versions.)

See the subroutine `basic-save-buffer' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [210452 213270])
            ("delete-auto-save-file-if-necessary" function
               (:documentation "Delete auto-save file for current buffer if `delete-auto-save-files' is t.
Normally delete only if the file was written by this Emacs since
the last real save, but optional arg FORCE non-nil means delete anyway."
                :arguments ("force"))
                nil [213272 213843])
            ("auto-save-hook" variable (:documentation "Normal hook run just before auto-saving.") nil [213845 213917])
            ("before-save-hook" variable (:documentation "Normal hook that is run before a buffer is saved to its file.
Only used by `save-buffer'.") nil [213919 214117])
            ("after-save-hook" variable (:documentation "Normal hook that is run after a buffer is saved to its file.
Only used by `save-buffer'.") nil [214119 214338])
            ("save-buffer-coding-system" variable (:documentation "If non-nil, use this coding system for saving the buffer.
More precisely, use this coding system in place of the
value of `buffer-file-coding-system', when saving the buffer.
Calling `write-region' for any purpose other than saving the buffer
will still use `buffer-file-coding-system'; this variable has no effect
in such cases.") nil [214340 214712])
            ("make-variable-buffer-local" code nil nil [214714 214769])
            ("put" code nil nil [214770 214821])
            ("basic-save-buffer" function
               (:documentation "Save the current buffer in its visited file, if it has been modified.

The hooks `write-contents-functions', `local-write-file-hooks'
and `write-file-functions' get a chance to do the job of saving;
if they do not, then the buffer is saved in the visited file in
the usual way.

Before and after saving the buffer, this function runs
`before-save-hook' and `after-save-hook', respectively."
                :user-visible-flag t
                :arguments ("called-interactively"))
                nil [214823 219667])
            ("basic-save-buffer-1" function nil nil [219949 220252])
            ("basic-save-buffer-2" function nil nil [220341 224502])
            ("declare-function" code nil nil [224504 224590])
            ("save-some-buffers-action-alist" variable
               (:documentation "ACTION-ALIST argument used in call to `map-y-or-n-p'."
                :default-value `((18 ,(lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil) ,(purecopy "view this buffer")) (100 ,(lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require 'diff) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil 'noasync))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil) ,(purecopy "view changes in this buffer"))))
                nil [224592 225758])
            ("put" code nil nil [225759 225820])
            ("buffer-save-without-query" variable (:documentation "Non-nil means `save-some-buffers' should save this buffer without asking.") nil [225822 225938])
            ("make-variable-buffer-local" code nil nil [225939 225994])
            ("save-some-buffers-default-predicate" variable (:documentation "Default predicate for `save-some-buffers'.
This allows you to stop `save-some-buffers' from asking
about certain files that you'd usually rather not save.") nil [225996 226408])
            ("save-some-buffers" function
               (:documentation "Save some modified file-visiting buffers.  Asks user about each one.
You can answer `y' or SPC to save, `n' or DEL not to save, `C-r'
to look at the buffer in question with `view-buffer' before
deciding, `d' to view the differences using
`diff-buffer-with-file', `!' to save the buffer and all remaining
buffers without any further querying, `.' to save only the
current buffer and skip the remaining ones and `q' or RET to exit
the function without saving any more buffers.  `C-h' displays a
help message describing these options.

This command first saves any buffers where `buffer-save-without-query' is
non-nil, without asking.

Optional argument ARG (interactively, prefix argument) non-nil means save
all with no questions.
Optional second argument PRED determines which buffers are considered:
If PRED is nil, all the file-visiting buffers are considered.
If PRED is t, then certain non-file buffers will also be considered.
If PRED is a zero-argument function, it indicates for each buffer whether
to consider it or not when called with that buffer current.
PRED defaults to the value of `save-some-buffers-default-predicate'.

See `save-some-buffers-action-alist' if you want to
change the additional actions you can take on files."
                :user-visible-flag t
                :arguments ("arg" "pred"))
                nil [226410 230430])
            ("clear-visited-file-modtime" function (:documentation "Clear out records of last mod time of visited file.
Next attempt to save will not complain of a discrepancy.") nil [230433 230614])
            ("not-modified" function
               (:documentation "Mark current buffer as unmodified, not needing to be saved.
With prefix ARG, mark buffer as modified, so \\[save-buffer] will save.

It is not a good idea to use this function in Lisp programs, because it
prints a message in the minibuffer.  Instead, use `set-buffer-modified-p'."
                :arguments ("arg"))
                nil [230616 231139])
            ("toggle-read-only" function
               (:documentation "Change whether this buffer is read-only."
                :arguments ("arg" "interactive"))
                nil [231141 231427])
            ("insert-file" function
               (:documentation "Insert contents of file FILENAME into buffer after point.
Set mark after the inserted text.

This function is meant for the user to run interactively.
Don't call it from programs!  Use `insert-file-contents' instead.
(Its calling sequence is different; see its documentation)."
                :arguments ("filename"))
                nil [231429 231877])
            ("append-to-file" function
               (:documentation "Append the contents of the region to the end of file FILENAME.
When called from a function, expects three arguments,
START, END and FILENAME.  START and END are normally buffer positions
specifying the part of the buffer to write.
If START is nil, that means to use the entire buffer contents.
If START is a string, then output that string to the file
instead of any buffer contents; END is ignored.

This does character code conversion and applies annotations
like `write-region' does."
                :user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [231879 232537])
            ("file-newest-backup" function
               (:documentation "Return most recent backup file for FILENAME or nil if no backups exist."
                :arguments ("filename"))
                nil [232539 233462])
            ("rename-uniquely" function
               (:documentation "Rename current buffer to a similar name not already taken.
This function is useful for creating multiple shell process buffers
or multiple mail buffers, etc.

Note that some commands, in particular those based on `compilation-mode'
(`compile', `grep', etc.) will reuse the current buffer if it has the
appropriate mode even if it has been renamed.  So as well as renaming
the buffer, you also need to switch buffers before running another
instance of such commands."
                :user-visible-flag t)
                nil [233464 234480])
            ("files--ensure-directory" function
               (:documentation "Make directory DIR if it is not already a directory.  Return nil."
                :arguments ("dir"))
                nil [234482 234733])
            ("make-directory" function
               (:documentation "Create the directory DIR and optionally any nonexistent parent dirs.
If DIR already exists as a directory, signal an error, unless
PARENTS is non-nil.

Interactively, the default choice of directory to create is the
current buffer's default directory.  That is useful when you have
visited a file in a nonexistent directory.

Noninteractively, the second (optional) argument PARENTS, if
non-nil, says whether to create parent directories that don't
exist.  Interactively, this happens by default.

If creating the directory or directories fail, an error will be
raised."
                :user-visible-flag t
                :arguments ("dir" "parents"))
                nil [234735 236282])
            ("make-empty-file" function
               (:documentation "Create an empty file FILENAME.
Optional arg PARENTS, if non-nil then creates parent dirs as needed.

If called interactively, then PARENTS is non-nil."
                :user-visible-flag t
                :arguments ("filename" "parents"))
                nil [236284 236899])
            ("directory-files-no-dot-files-regexp" variable
               (:documentation "Regexp matching any file name except \".\" and \"..\"."
                :constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [236901 237047])
            ("files--force" function
               (:documentation "Use NO-SUCH to affect behavior of function FN applied to list ARGS.
This acts like (apply FN ARGS) except it returns NO-SUCH if it is
non-nil and if FN fails due to a missing file or directory."
                :arguments ("no-such" "fn" "args"))
                nil [237049 237397])
            ("delete-directory" function
               (:documentation "Delete the directory named DIRECTORY.  Does not follow symlinks.
If RECURSIVE is non-nil, delete files in DIRECTORY as well, with
no error if something else is simultaneously deleting them.
TRASH non-nil means to trash the directory instead, provided
`delete-by-moving-to-trash' is non-nil.

When called interactively, TRASH is nil if and only if a prefix
argument is given, and a further prompt asks the user for
RECURSIVE if DIRECTORY is nonempty."
                :user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [237399 240162])
            ("file-equal-p" function
               (:documentation "Return non-nil if files FILE1 and FILE2 name the same file.
If FILE1 or FILE2 does not exist, the return value is unspecified."
                :arguments ("file1" "file2"))
                nil [240164 240724])
            ("file-in-directory-p" function
               (:documentation "Return non-nil if FILE is in DIR or a subdirectory of DIR.
A directory is considered to be \"in\" itself.
Return nil if DIR is not an existing directory."
                :arguments ("file" "dir"))
                nil [240726 241844])
            ("copy-directory" function
               (:documentation "Copy DIRECTORY to NEWNAME.  Both args must be strings.
This function always sets the file modes of the output files to match
the corresponding input file.

The third arg KEEP-TIME non-nil means give the output files the same
last-modified time as the old ones.  (This works on only some systems.)

A prefix arg makes KEEP-TIME non-nil.

Noninteractively, the last argument PARENTS says whether to
create parent directories if they don't exist.  Interactively,
this happens by default.

If NEWNAME is a directory name, copy DIRECTORY as a subdirectory
there.  However, if called from Lisp with a non-nil optional
argument COPY-CONTENTS, copy the contents of DIRECTORY directly
into NEWNAME instead."
                :user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [241846 244966])
            ("prune-directory-list" function
               (:documentation "Return a copy of DIRS with all non-existent directories removed.
The optional argument KEEP is a list of directories to retain even if
they don't exist, and REJECT is a list of directories to remove from
DIRS, even if they exist; REJECT takes precedence over KEEP.

Note that membership in REJECT and KEEP is checked using simple string
comparison."
                :arguments ("dirs" "keep" "reject"))
                nil [245014 245576])
            ("put" code nil nil [245580 245628])
            ("revert-buffer-function" variable
               (:documentation "Function to use to revert this buffer.
The function receives two arguments IGNORE-AUTO and NOCONFIRM,
which are the arguments that `revert-buffer' received.
It also has access to the `preserve-modes' argument of `revert-buffer'
via the `revert-buffer-preserve-modes' dynamic variable.

For historical reasons, a value of nil means to use the default function.
This should not be relied upon."
                :default-value nil)
                nil [245629 246081])
            ("put" code nil nil [246083 246152])
            ("revert-buffer-insert-file-contents-function" variable
               (:documentation "Function to use to insert contents when reverting this buffer.
The function receives two arguments: the first the nominal file name to use;
the second is t if reading the auto-save file.

The function is responsible for updating (or preserving) point.

For historical reasons, a value of nil means to use the default function.
This should not be relied upon."
                :default-value nil)
                nil [246153 246625])
            ("buffer-stale--default-function" function
               (:documentation "Default function to use for `buffer-stale-function'.
This function ignores its argument.
This returns non-nil if the current buffer is visiting a readable file
whose modification time does not match that of the buffer.

This function only handles buffers that are visiting files.
Non-file buffers need a custom function"
                :arguments ("_noconfirm"))
                nil [246627 247189])
            ("buffer-stale-function" variable
               (:documentation "Function to check whether a buffer needs reverting.
This should be a function with one optional argument NOCONFIRM.
Auto Revert Mode passes t for NOCONFIRM.  The function should return
non-nil if the buffer should be reverted.  A return value of
`fast' means that the need for reverting was not checked, but
that reverting the buffer is fast.  The buffer is current when
this function is called.

The idea behind the NOCONFIRM argument is that it should be
non-nil if the buffer is going to be reverted without asking the
user.  In such situations, one has to be careful with potentially
time consuming operations.

For historical reasons, a value of nil means to use the default function.
This should not be relied upon.

For more information on how this variable is used by Auto Revert mode,
see Info node `(emacs)Supporting additional buffers'."
                :default-value nil)
                nil [247191 248106])
            ("before-revert-hook" variable (:documentation "Normal hook for `revert-buffer' to run before reverting.
The function `revert-buffer--default' runs this.
A customized `revert-buffer-function' need not run this hook.") nil [248108 248311])
            ("after-revert-hook" variable (:documentation "Normal hook for `revert-buffer' to run after reverting.
Note that the hook value that it runs is the value that was in effect
before reverting; that makes a difference if you have buffer-local
hook functions.

The function `revert-buffer--default' runs this.
A customized `revert-buffer-function' need not run this hook.") nil [248313 248668])
            ("revert-buffer-in-progress-p" variable (:documentation "Non-nil if a `revert-buffer' operation is in progress, nil otherwise.") nil [248670 248784])
            ("revert-buffer-internal-hook" variable nil nil [248786 248822])
            ("revert-buffer-preserve-modes" variable nil nil [249012 249049])
            ("revert-buffer" function
               (:documentation "Replace current buffer text with the text of the visited file on disk.
This undoes all changes since the file was visited or saved.
With a prefix argument, offer to revert from latest auto-save file, if
that is more recent than the visited file.

This command also implements an interface for special buffers
that contain text which doesn't come from a file, but reflects
some other data instead (e.g. Dired buffers, `buffer-list'
buffers).  This is done via the variable `revert-buffer-function'.
In these cases, it should reconstruct the buffer contents from the
appropriate data.

When called from Lisp, the first argument is IGNORE-AUTO; only offer
to revert from the auto-save file when this is nil.  Note that the
sense of this argument is the reverse of the prefix argument, for the
sake of backward compatibility.  IGNORE-AUTO is optional, defaulting
to nil.

Optional second argument NOCONFIRM means don't ask for confirmation
at all.  (The variable `revert-without-query' offers another way to
revert buffers without querying for confirmation.)

Optional third argument PRESERVE-MODES non-nil means don't alter
the files modes.  Normally we reinitialize them using `normal-mode'.

This function binds `revert-buffer-in-progress-p' non-nil while it operates.

This function calls the function that `revert-buffer-function' specifies
to do the work, with arguments IGNORE-AUTO and NOCONFIRM.
The default function runs the hooks `before-revert-hook' and
`after-revert-hook'."
                :user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [249051 251263])
            ("revert-buffer--default" function
               (:documentation "Default function for `revert-buffer'.
The arguments IGNORE-AUTO and NOCONFIRM are as described for `revert-buffer'.
Runs the hooks `before-revert-hook' and `after-revert-hook' at the
start and end.

Calls `revert-buffer-insert-file-contents-function' to reread the
contents of the visited file, with two arguments: the first is the file
name, the second is non-nil if reading an auto-save file.

This function only handles buffers that are visiting files.
Non-file buffers need a custom function."
                :arguments ("ignore-auto" "noconfirm"))
                nil [251265 254620])
            ("revert-buffer-insert-file-contents--default-function" function
               (:documentation "Default function for `revert-buffer-insert-file-contents-function'.
The function `revert-buffer--default' calls this.
FILE-NAME is the name of the file.  AUTO-SAVE-P is non-nil if this is
an auto-save file."
                :arguments ("file-name" "auto-save-p"))
                nil [254622 256822])
            ("recover-this-file" function
               (:documentation "Recover the visited file--get contents from its last auto-save file."
                :user-visible-flag t)
                nil [256824 257055])
            ("recover-file" function
               (:documentation "Visit file FILE, but get contents from its last auto-save file."
                :user-visible-flag t
                :arguments ("file"))
                nil [257057 259332])
            ("recover-session" function
               (:documentation "Recover auto save files from a previous Emacs session.
This command first displays a Dired buffer showing you the
previous sessions that you could recover from.
To choose one, move point to the proper line and then type C-c C-c.
Then you'll be asked about a number of files to recover."
                :user-visible-flag t)
                nil [259334 261066])
            ("recover-session-finish" function
               (:documentation "Choose one saved session to recover auto-save files from.
This command is used in the special Dired buffer created by
\\[recover-session]."
                :user-visible-flag t)
                nil [261068 263471])
            ("kill-buffer-ask" function
               (:documentation "Kill BUFFER if confirmed."
                :arguments ("buffer"))
                nil [263473 263724])
            ("kill-some-buffers" function
               (:documentation "Kill some buffers.  Asks the user whether to kill each one of them.
Non-interactively, if optional argument LIST is non-nil, it
specifies the list of buffers to kill, asking for approval for each one."
                :user-visible-flag t
                :arguments ("list"))
                nil [263726 264329])
            ("kill-matching-buffers" function
               (:documentation "Kill buffers whose name matches the specified REGEXP.
Ignores buffers whose name starts with a space, unless optional
prefix argument INTERNAL-TOO is non-nil.  Asks before killing
each buffer, unless NO-ASK is non-nil."
                :user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [264331 264988])
            ("rename-auto-save-file" function (:documentation "Adjust current buffer's auto save file name for current conditions.
Also rename any existing auto save file, if it was made in this session.") nil [264992 265556])
            ("make-auto-save-file-name" function (:documentation "Return file name to use for auto-saves of current buffer.
Does not consider `auto-save-visited-file-name' as that variable is checked
before calling this function.  You can redefine this for customization.
See also `auto-save-file-name-p'.") nil [265558 269729])
            ("auto-save-file-name-p" function
               (:documentation "Return non-nil if FILENAME can be yielded by `make-auto-save-file-name'.
FILENAME should lack slashes.  You can redefine this for customization."
                :arguments ("filename"))
                nil [269731 269959])
            ("wildcard-to-regexp" function
               (:documentation "Given a shell file name pattern WILDCARD, return an equivalent regexp.
The generated regexp will match a filename only if the filename
matches that wildcard according to shell rules.  Only wildcards known
by `sh' are supported."
                :arguments ("wildcard"))
                nil [269962 272145])
            ("list-directory-brief-switches" variable
               (:documentation "Switches for `list-directory' to pass to `ls' for brief listing."
                :default-value (purecopy "-CF"))
                nil [272148 272309])
            ("list-directory-verbose-switches" variable
               (:documentation "Switches for `list-directory' to pass to `ls' for verbose listing."
                :default-value (purecopy "-l"))
                nil [272311 272477])
            ("file-expand-wildcards" function
               (:documentation "Expand wildcard pattern PATTERN.
This returns a list of file names which match the pattern.
Files are sorted in `string<' order.

If PATTERN is written as an absolute file name,
the values are absolute also.

If PATTERN is written as a relative file name, it is interpreted
relative to the current default directory, `default-directory'.
The file names returned are normally also relative to the current
default directory.  However, if FULL is non-nil, they are absolute."
                :arguments ("pattern" "full"))
                nil [272479 274085])
            ("files" package nil nil [274159 274195])
            ("list-directory" function
               (:documentation "Display a list of files in or matching DIRNAME, a la `ls'.
DIRNAME is globbed by the shell if necessary.
Prefix arg (second arg if noninteractive) means supply -l switch to `ls'.
Actions controlled by variables `list-directory-brief-switches'
and `list-directory-verbose-switches'."
                :user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [274197 275543])
            ("shell-quote-wildcard-pattern" function
               (:documentation "Quote characters special to the shell in PATTERN, leave wildcards alone.

PATTERN is assumed to represent a file-name wildcard suitable for the
underlying filesystem.  For Unix and GNU/Linux, each character from the
set [ \\t\\n;<>&|()\\=`\\='\"#$] is quoted with a backslash; for DOS/Windows, all
the parts of the pattern which don't include wildcard characters are
quoted with double quotes.

This function leaves alone existing quote characters (\\ on Unix and \"
on Windows), so PATTERN can use them to quote wildcard characters that
need to be passed verbatim to shell commands."
                :arguments ("pattern"))
                nil [275545 277383])
            ("insert-directory-program" variable
               (:documentation "Absolute or relative name of the `ls' program used by `insert-directory'."
                :default-value (purecopy "ls"))
                nil [277386 277513])
            ("directory-free-space-program" variable
               (:documentation "Program to get the amount of free space on a file system.
We assume the output has the format of `df'.
The value of this variable must be just a command name or file name;
if you want to specify options, use `directory-free-space-args'.

A value of nil disables this feature.

This variable is obsolete; Emacs no longer uses it."
                :default-value (purecopy "df"))
                nil [277515 277986])
            ("make-obsolete-variable" code nil nil [277987 278106])
            ("directory-free-space-args" variable
               (:documentation "Options to use when running `directory-free-space-program'."
                :default-value (purecopy (if (eq system-type 'darwin) "-k" "-Pk")))
                nil [278108 278295])
            ("make-obsolete-variable" code nil nil [278296 278412])
            ("get-free-disk-space" function
               (:documentation "Return the amount of free space on directory DIR's file system.
The return value is a string describing the amount of free
space (normally, the number of free 1KB blocks).

If DIR's free space cannot be obtained, this function returns nil."
                :arguments ("dir"))
                nil [278414 278813])
            ("directory-listing-before-filename-regexp" variable
               (:documentation "Regular expression to match up to the file name in a directory listing.
The default value is designed to recognize dates and times
regardless of the language."
                :default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +"))))
                nil [278885 281274])
            ("insert-directory-ls-version" variable (:default-value 'unknown) nil [281276 281321])
            ("insert-directory-wildcard-in-dir-p" function
               (:documentation "Return non-nil if DIR contents a shell wildcard in the directory part.
The return value is a cons (DIR . WILDCARDS); DIR is the
`default-directory' in the Dired buffer, and WILDCARDS are the wildcards.

Valid wildcards are '*', '?', '[abc]' and '[a-z]'."
                :arguments ("dir"))
                nil [281323 282138])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [282140 284151])
            ("insert-directory" function
               (:documentation "Insert directory listing for FILE, formatted according to SWITCHES.
Leaves point after the inserted text.
SWITCHES may be a string of options, or a list of strings
representing individual options.
Optional third arg WILDCARD means treat FILE as shell wildcard.
Optional fourth arg FULL-DIRECTORY-P means file is a directory and
switches do not contain `d', so that a full listing is expected.

This works by running a directory listing program
whose name is in the variable `insert-directory-program'.
If WILDCARD, it also runs the shell specified by `shell-file-name'.

When SWITCHES contains the long `--dired' option, this function
treats it specially, for the sake of dired.  However, the
normally equivalent short `-D' option is just passed on to
`insert-directory-program', as any other option."
                :arguments ("file" "switches" "wildcard" "full-directory-p"))
                nil [285225 293981])
            ("insert-directory-adj-pos" function
               (:documentation "Convert `ls --dired' file name position value POS to a buffer position.
File name position values returned in ls --dired output
count only stdout; they don't count the error messages sent to stderr.
So this function converts to them to real buffer positions.
ERROR-LINES is a list of buffer positions of error message lines,
of the form (START END)."
                :arguments ("pos" "error-lines"))
                nil [293983 294549])
            ("insert-directory-safely" function
               (:documentation "Insert directory listing for FILE, formatted according to SWITCHES.

Like `insert-directory', but if FILE does not exist, it inserts a
message to that effect instead of signaling an error."
                :arguments ("file" "switches" "wildcard" "full-directory-p"))
                nil [294551 295035])
            ("kill-emacs-query-functions" variable (:documentation "Functions to call with no arguments to query about killing Emacs.
If any of these functions returns nil, killing Emacs is canceled.
`save-buffers-kill-emacs' calls these functions, but `kill-emacs',
the low level primitive, does not.  See also `kill-emacs-hook'.") nil [295037 295400])
            ("confirm-kill-emacs" variable (:documentation "How to ask for confirmation when leaving Emacs.
If nil, the default, don't ask at all.  If the value is non-nil, it should
be a predicate function; for example `yes-or-no-p'.") nil [295402 295842])
            ("confirm-kill-processes" variable
               (:documentation "Non-nil if Emacs should confirm killing processes on exit.
If this variable is nil, the value of
`process-query-on-exit-flag' is ignored.  Otherwise, if there are
processes with a non-nil `process-query-on-exit-flag', Emacs will
prompt the user before killing them."
                :default-value t)
                nil [295844 296207])
            ("save-buffers-kill-emacs" function
               (:documentation "Offer to save each buffer, then kill this Emacs process.
With prefix ARG, silently save all file-visiting buffers without asking.
If there are active processes where `process-query-on-exit-flag'
returns non-nil and `confirm-kill-processes' is non-nil,
asks whether processes should be killed.
Runs the members of `kill-emacs-query-functions' in turn and stops
if any returns nil.  If `confirm-kill-emacs' is non-nil, calls it."
                :user-visible-flag t
                :arguments ("arg"))
                nil [296209 298549])
            ("save-buffers-kill-terminal" function
               (:documentation "Offer to save each buffer, then kill the current connection.
If the current frame has no client, kill Emacs itself using
`save-buffers-kill-emacs'.

With prefix ARG, silently save all file-visiting buffers, then kill.

If emacsclient was started with a list of filenames to edit, then
only these files will be asked to be saved."
                :user-visible-flag t
                :arguments ("arg"))
                nil [298551 299071])
            ("setq" code nil nil [299181 299302])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [299563 306186])
            ("file-name-quoted-p" function
               (:documentation "Whether NAME is quoted with prefix \"/:\".
If NAME is a remote file name and TOP is nil, check the local part of NAME."
                :arguments ("name" "top"))
                nil [306188 306484])
            ("file-name-quote" function
               (:documentation "Add the quotation prefix \"/:\" to file NAME.
If NAME is a remote file name and TOP is nil, the local part of
NAME is quoted.  If NAME is already a quoted file name, NAME is
returned unchanged."
                :arguments ("name" "top"))
                nil [306486 306920])
            ("file-name-unquote" function
               (:documentation "Remove quotation prefix \"/:\" from file NAME, if any.
If NAME is a remote file name and TOP is nil, the local part of
NAME is unquoted."
                :arguments ("name" "top"))
                nil [306922 307408])
            ("file-modes-char-to-who" function
               (:documentation "Convert CHAR to a numeric bit-mask for extracting mode bits.
CHAR is in [ugoa] and represents the category of users (Owner, Group,
Others, or All) for whom to produce the mask.
The bit-mask that is returned extracts from mode bits the access rights
for the specified category of users."
                :arguments ("char"))
                nil [307451 307918])
            ("file-modes-char-to-right" function
               (:documentation "Convert CHAR to a numeric value of mode bits.
CHAR is in [rwxXstugo] and represents symbolic access permissions.
If CHAR is in [Xugo], the value is taken from FROM (or 0 if omitted)."
                :arguments ("char" "from"))
                nil [307920 308769])
            ("file-modes-rights-to-number" function
               (:documentation "Convert a symbolic mode string specification to an equivalent number.
RIGHTS is the symbolic mode spec, it should match \"([+=-][rwxXstugo]*)+\".
WHO-MASK is the bit-mask specifying the category of users to which to
apply the access permissions.  See `file-modes-char-to-who'.
FROM (or 0 if nil) gives the mode bits on which to base permissions if
RIGHTS request to add, remove, or set permissions based on existing ones,
as in \"og+rX-w\"."
                :arguments ("rights" "who-mask" "from"))
                nil [308771 309925])
            ("file-modes-symbolic-to-number" function
               (:documentation "Convert symbolic file modes to numeric file modes.
MODES is the string to convert, it should match
\"[ugoa]*([+-=][rwxXstugo]*)+,...\".
See Info node `(coreutils)File permissions' for more information on this
notation.
FROM (or 0 if nil) gives the mode bits on which to base permissions if
MODES request to add, remove, or set permissions based on existing ones,
as in \"og+rX-w\"."
                :arguments ("modes" "from"))
                nil [309927 311010])
            ("read-file-modes" function
               (:documentation "Read file modes in octal or symbolic notation and return its numeric value.
PROMPT is used as the prompt, default to \"File modes (octal or symbolic): \".
ORIG-FILE is the name of a file on whose mode bits to base returned
permissions if what user types requests to add, remove, or set permissions
based on existing mode bits, as in \"og+rX-w\"."
                :arguments ("prompt" "orig-file"))
                nil [311012 312079])
            ("define-obsolete-variable-alias" code nil nil [312081 312163])
            ("trash-directory" variable (:documentation "Directory for `move-file-to-trash' to move files and directories to.
This directory is only used when the function `system-move-file-to-trash'
is not defined.
Relative paths are interpreted relative to `default-directory'.
If the value is nil, Emacs uses a freedesktop.org-style trashcan.") nil [312187 312590])
            ("trash--hexify-table" variable nil nil [312592 312620])
            ("declare-function" code nil nil [312622 312688])
            ("move-file-to-trash" function
               (:documentation "Move the file (or directory) named FILENAME to the trash.
When `delete-by-moving-to-trash' is non-nil, this function is
called by `delete-file' and `delete-directory' instead of
deleting files outright.

If the function `system-move-file-to-trash' is defined, call it
 with FILENAME as an argument.
Otherwise, if `trash-directory' is non-nil, move FILENAME to that
 directory.
Otherwise, trash FILENAME using the freedesktop.org conventions,
 like the GNOME, KDE and XFCE desktop environments.  Emacs only
 moves files to \"home trash\", ignoring per-volume trashcans."
                :user-visible-flag t
                :arguments ("filename"))
                nil [312690 317684])
            ("file-attribute-type" function
               (:documentation "The type field in ATTRIBUTES returned by `file-attributes'.
The value is either t for directory, string (name linked to) for
symbolic link, or nil."
                :arguments ("attributes"))
                nil [317686 317902])
            ("file-attribute-link-number" function
               (:documentation "Return the number of links in ATTRIBUTES returned by `file-attributes'."
                :arguments ("attributes"))
                nil [317904 318051])
            ("file-attribute-user-id" function
               (:documentation "The UID field in ATTRIBUTES returned by `file-attributes'.
This is either a string or a number.  If a string value cannot be
looked up, a numeric value, either an integer or a float, is
returned."
                :arguments ("attributes"))
                nil [318053 318320])
            ("file-attribute-group-id" function
               (:documentation "The GID field in ATTRIBUTES returned by `file-attributes'.
This is either a string or a number.  If a string value cannot be
looked up, a numeric value, either an integer or a float, is
returned."
                :arguments ("attributes"))
                nil [318322 318590])
            ("file-attribute-access-time" function
               (:documentation "The last access time in ATTRIBUTES returned by `file-attributes'.
This a list of integers (HIGH LOW USEC PSEC) in the same style
as (current-time)."
                :arguments ("attributes"))
                nil [318592 318815])
            ("file-attribute-modification-time" function
               (:documentation "The modification time in ATTRIBUTES returned by `file-attributes'.
This is the time of the last change to the file's contents, and
is a list of integers (HIGH LOW USEC PSEC) in the same style
as (current-time)."
                :arguments ("attributes"))
                nil [318817 319109])
            ("file-attribute-status-change-time" function
               (:documentation "The status modification time in ATTRIBUTES returned by `file-attributes'.
This is the time of last change to the file's attributes: owner
and group, access mode bits, etc, and is a list of integers (HIGH
LOW USEC PSEC) in the same style as (current-time)."
                :arguments ("attributes"))
                nil [319111 319449])
            ("file-attribute-size" function
               (:documentation "The size (in bytes) in ATTRIBUTES returned by `file-attributes'.
This is a floating point number if the size is too large for an integer."
                :arguments ("attributes"))
                nil [319451 319657])
            ("file-attribute-modes" function
               (:documentation "The file modes in ATTRIBUTES returned by `file-attributes'.
This is a string of ten letters or dashes as in ls -l."
                :arguments ("attributes"))
                nil [319659 319843])
            ("file-attribute-inode-number" function
               (:documentation "The inode number in ATTRIBUTES returned by `file-attributes'.
If it is larger than what an Emacs integer can hold, this is of
the form (HIGH . LOW): first the high bits, then the low 16 bits.
If even HIGH is too large for an Emacs integer, this is instead
of the form (HIGH MIDDLE . LOW): first the high bits, then the
middle 24 bits, and finally the low 16 bits."
                :arguments ("attributes"))
                nil [319845 320286])
            ("file-attribute-device-number" function
               (:documentation "The file system device number in ATTRIBUTES returned by `file-attributes'.
If it is larger than what an Emacs integer can hold, this is of
the form (HIGH . LOW): first the high bits, then the low 16 bits.
If even HIGH is too large for an Emacs integer, this is instead
of the form (HIGH MIDDLE . LOW): first the high bits, then the
middle 24 bits, and finally the low 16 bits."
                :arguments ("attributes"))
                nil [320288 320743])
            ("file-attribute-collect" function
               (:documentation "Return a sublist of ATTRIBUTES returned by `file-attributes'.
ATTR-NAMES are symbols with the selected attribute names.

Valid attribute names are: type, link-number, user-id, group-id,
access-time, modification-time, status-change-time, size, modes,
inode-number and device-number."
                :arguments ("attributes" "attr-names"))
                nil [320745 321600])
            ("define-key" code nil nil [321603 321643])
            ("define-key" code nil nil [321644 321694])
            ("define-key" code nil nil [321695 321745])
            ("define-key" code nil nil [321746 321788])
            ("define-key" code nil nil [321789 321834])
            ("define-key" code nil nil [321835 321876])
            ("define-key" code nil nil [321877 321916])
            ("define-key" code nil nil [321917 321955])
            ("define-key" code nil nil [321956 322001])
            ("define-key" code nil nil [322002 322059])
            ("define-key" code nil nil [322060 322105])
            ("define-key" code nil nil [322107 322159])
            ("define-key" code nil nil [322160 322222])
            ("define-key" code nil nil [322223 322278])
            ("define-key" code nil nil [322279 322338])
            ("define-key" code nil nil [322339 322386])
            ("define-key" code nil nil [322388 322446])
            ("define-key" code nil nil [322447 322498])
            ("define-key" code nil nil [322499 322553])
            ("define-key" code nil nil [322554 322615])
            ("define-key" code nil nil [322616 322675]))          
      :file "files.el.gz"
      :pointmax 322700
      :fsize 91997
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table-1874374"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("Electric-command-loop" function (:arguments ("return-tag" "prompt" "inhibit-quitting" "loop-function" "loop-state")) nil [2974 5149])
            ("Electric-pop-up-window" function (:arguments ("buffer" "max-height")) nil [5754 6591])
            ("electricity" customgroup
               (:documentation "Electric behavior for self inserting keys."
                :user-visible-flag t)
                nil [6613 6703])
            ("electric--after-char-pos" function (:documentation "Return the position after the char we just inserted.
Returns nil when we can't find this char.") nil [6705 7312])
            ("electric--sort-post-self-insertion-hook" function (:documentation "Ensure order of electric functions in `post-self-insertion-hook'.

Hooks in this variable interact in non-trivial ways, so a
relative order must be maintained within it.") nil [7314 7795])
            ("electric-indent-chars" variable
               (:documentation "Characters that should cause automatic reindentation."
                :default-value '(10))
                nil [8038 8133])
            ("electric-indent-functions" variable (:documentation "Special hook run to decide whether to auto-indent.
Each function is called with one argument (the inserted char), with
point right after that char, and it should return t to cause indentation,
`no-indent' to prevent indentation or nil to let other functions decide.") nil [8135 8443])
            ("defvar-local" code nil nil [8445 8675])
            ("electric-indent-functions-without-reindent" variable
               (:documentation "List of indent functions that can't reindent.
If `indent-line-function' is one of those, then `electric-indent-mode' will
not try to reindent lines.  It is normally better to make the major
mode set `electric-indent-inhibit', but this can be used as a workaround."
                :default-value '(indent-relative indent-to-left-margin indent-relative-maybe py-indent-line coffee-indent-line org-indent-line yaml-indent-line haskell-indentation-indent-line haskell-indent-cycle haskell-simple-indent yaml-indent-line))
                nil [8677 9232])
            ("electric-indent-post-self-insert-function" function (:documentation "Function that `electric-indent-mode' adds to `post-self-insert-hook'.
This indents if the hook `electric-indent-functions' returns non-nil,
or if a member of `electric-indent-chars' was typed; but not in a string
or comment.") nil [9234 12813])
            ("put" code nil nil [12815 12877])
            ("electric-indent-just-newline" function
               (:documentation "Insert just a newline, without any auto-indentation."
                :user-visible-flag t
                :arguments ("arg"))
                nil [12879 13067])
            ("define-key" code nil nil [13084 13149])
            ("electric-newline-and-maybe-indent" function
               (:documentation "Insert a newline.
If `electric-indent-mode' is enabled, that's that, but if it
is *disabled* then additionally indent according to major mode.
Indentation is done using the value of `indent-line-function'.
In programming language modes, this is the same as TAB.
In some text modes, where TAB inserts a tab, this command indents to the
column specified by the function `current-left-margin'."
                :user-visible-flag t)
                nil [13165 13718])
            ("define-minor-mode" code nil nil [13735 14646])
            ("define-minor-mode" code nil nil [14663 15203])
            ("electric-layout-rules" variable (:documentation "List of rules saying where to automatically insert newlines.

Each rule has the form (CHAR . WHERE) where CHAR is the char that
was just inserted and WHERE specifies where to insert newlines
and can be: nil, `before', `after', `around', `after-stay', or a
function of no arguments that returns one of those symbols.

The symbols specify where in relation to CHAR the newline
character(s) should be inserted. `after-stay' means insert a
newline after CHAR but stay in the same place.") nil [15260 15781])
            ("electric-layout-post-self-insert-function" function nil nil [15783 17282])
            ("put" code nil nil [17284 17346])
            ("define-minor-mode" code nil nil [17363 17877])
            ("electric-quote-comment" variable
               (:documentation "Non-nil means to use electric quoting in program comments."
                :default-value t)
                nil [17902 18072])
            ("electric-quote-string" variable (:documentation "Non-nil means to use electric quoting in program strings.") nil [18074 18244])
            ("electric-quote-chars" variable
               (:documentation "Curved quote characters for `electric-quote-mode'.
This list's members correspond to left single quote, right single
quote, left double quote, and right double quote, respectively."
                :default-value '(8216 8217 8220 8221))
                nil [18246 18713])
            ("electric-quote-paragraph" variable
               (:documentation "Non-nil means to use electric quoting in text paragraphs."
                :default-value t)
                nil [18715 18886])
            ("electric-quote-context-sensitive" variable (:documentation "Non-nil means to replace \\=' with an electric quote depending on context.
If `electric-quote-context-sensitive' is non-nil, Emacs replaces
\\=' and \\='\\=' with an opening quote after a line break,
whitespace, opening parenthesis, or quote and leaves \\=` alone.") nil [18888 19277])
            ("electric-quote-replace-double" variable (:documentation "Non-nil means to replace \" with an electric double quote.
Emacs replaces \" with an opening double quote after a line
break, whitespace, opening parenthesis, or quote, and with a
closing double quote otherwise.") nil [19279 19612])
            ("electric-quote-inhibit-functions" variable (:documentation "List of functions that should inhibit electric quoting.
When the variable `electric-quote-mode' is non-nil, Emacs will
call these functions in order after the user has typed an \\=` or
\\=' character.  If one of them returns non-nil, electric quote
substitution is inhibited.  The functions are called after the
\\=` or \\=' character has been inserted with point directly
after the inserted character.  The functions in this hook should
not move point or change the current buffer.") nil [19614 20145])
            ("electric-pair-text-pairs" variable nil nil [20147 20180])
            ("electric-quote-post-self-insert-function" function (:documentation "Function that `electric-quote-mode' adds to `post-self-insert-hook'.
This requotes when a quoting key is typed.") nil [20182 23530])
            ("put" code nil nil [23532 23592])
            ("define-minor-mode" code nil nil [23609 24735])
            ("define-minor-mode" code nil nil [24752 25283])
            ("electric" package nil nil [25285 25304]))          
      :file "electric.el.gz"
      :pointmax 25332
      :fsize 7335
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1874394"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [4333 4350])
            ("pcomplete" include nil nil [4351 4371])
            ("shell" customgroup
               (:documentation "Running shell from within Emacs buffers."
                :user-visible-flag t)
                nil [4413 4513])
            ("shell-directories" customgroup
               (:documentation "Directory support in shell mode."
                :user-visible-flag t)
                nil [4515 4600])
            ("shell-dumb-shell-regexp" variable
               (:documentation "Regexp to match shells that don't save their command history, and
don't handle the backslash as a quote character.  For shells that
match this regexp, Emacs will write out the command history when the
shell finishes, and won't remove backslashes when it unquotes shell
arguments."
                :default-value (purecopy "cmd\\(proxy\\)?\\.exe"))
                nil [4712 5098])
            ("shell-prompt-pattern" variable
               (:documentation "Regexp to match prompts in the inferior shell.
Defaults to \"^[^#$%>\\n]*[#$%>] *\", which works pretty well.
This variable is used to initialize `comint-prompt-regexp' in the
shell buffer.

If `comint-use-prompt-regexp' is nil, then this variable is only used
to determine paragraph boundaries.  See Info node `Shell Prompts' for
how Shell mode treats paragraphs.

The pattern should probably not match more than one line.  If it does,
Shell mode may become confused trying to distinguish prompt from input
on lines which don't start with a prompt."
                :default-value "^[^#$%>
]*[#$%>] *")
                nil [5100 5740])
            ("shell-completion-fignore" variable (:documentation "List of suffixes to be disregarded during file/command completion.
This variable is used to initialize `comint-completion-fignore' in the shell
buffer.  The default is nil, for compatibility with most shells.
Some people like (\"~\" \"#\" \"%\").") nil [5742 6090])
            ("shell-delimiter-argument-list" variable
               (:documentation "List of characters to recognize as separate arguments.
This variable is used to initialize `comint-delimiter-argument-list' in the
shell buffer.  The value may depend on the operating system or shell."
                :default-value '(124 38 60 62 40 41 59))
                nil [6092 6460])
            ("shell-file-name-chars" variable
               (:documentation "String of characters valid in a file name.
This variable is used to initialize `comint-file-name-chars' in the
shell buffer.  The value may depend on the operating system or shell."
                :default-value (if (memq system-type '(ms-dos windows-nt cygwin)) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-"))
                nil [6462 6837])
            ("shell-file-name-quote-list" variable
               (:documentation "List of characters to quote when in a file name.
This variable is used to initialize `comint-file-name-quote-list' in the
shell buffer.  The value may depend on the operating system or shell."
                :default-value (if (memq system-type '(ms-dos windows-nt)) nil (append shell-delimiter-argument-list '(32 36 42 33 34 39 96 35 92))))
                nil [6839 7255])
            ("shell-dynamic-complete-functions" variable
               (:documentation "List of functions called to perform completion.
This variable is used to initialize `comint-dynamic-complete-functions' in the
shell buffer."
                :default-value '(comint-c-a-p-replace-by-expanded-history shell-environment-variable-completion shell-command-completion shell-c-a-p-replace-by-expanded-directory pcomplete-completions-at-point shell-filename-completion comint-filename-completion))
                nil [7257 7748])
            ("shell-command-regexp" variable
               (:documentation "Regexp to match a single command within a pipeline.
This is used for directory tracking and does not do a perfect job."
                :default-value "[^;&|
]+")
                nil [7750 7949])
            ("shell-command-separator-regexp" variable
               (:documentation "Regexp to match a single command within a pipeline.
This is used for directory tracking and does not do a perfect job."
                :default-value "[;&|
 	]*")
                nil [7951 8162])
            ("shell-completion-execonly" variable
               (:documentation "If non-nil, use executable files only for completion candidates.
This mirrors the optional behavior of tcsh.

Detecting executability of files may slow command completion considerably."
                :default-value t)
                nil [8164 8425])
            ("shell-popd-regexp" variable
               (:documentation "Regexp to match subshell commands equivalent to popd."
                :default-value "popd")
                nil [8427 8565])
            ("shell-pushd-regexp" variable
               (:documentation "Regexp to match subshell commands equivalent to pushd."
                :default-value "pushd")
                nil [8567 8708])
            ("shell-pushd-tohome" variable (:documentation "If non-nil, make pushd with no arg behave as \"pushd ~\" (like cd).
This mirrors the optional behavior of tcsh.") nil [8710 8905])
            ("shell-pushd-dextract" variable (:documentation "If non-nil, make \"pushd +n\" pop the nth dir to the stack top.
This mirrors the optional behavior of tcsh.") nil [8907 9100])
            ("shell-pushd-dunique" variable (:documentation "If non-nil, make pushd only add unique directories to the stack.
This mirrors the optional behavior of tcsh.") nil [9102 9295])
            ("shell-cd-regexp" variable
               (:documentation "Regexp to match subshell commands equivalent to cd."
                :default-value "cd")
                nil [9297 9429])
            ("shell-chdrive-regexp" variable
               (:documentation "If non-nil, is regexp used to track drive changes."
                :default-value (if (memq system-type '(ms-dos windows-nt)) "[]a-zA-Z^_`\\[\\\\]:" nil))
                nil [9431 9745])
            ("shell-dirtrack-verbose" variable
               (:documentation "If non-nil, show the directory stack following directory change.
This is effective only if directory tracking is enabled.
The `dirtrack' package provides an alternative implementation of this feature -
see the function `dirtrack-mode'."
                :default-value t)
                nil [9747 10068])
            ("explicit-shell-file-name" variable (:documentation "If non-nil, is file name to use for explicitly requested inferior shell.
When nil, such interactive shell sessions fallback to using either
the shell specified in $ESHELL or in `shell-file-name'.") nil [10070 10373])
            ("explicit-csh-args" variable
               (:documentation "Args passed to inferior shell by \\[shell], if the shell is csh.
Value is a list of strings, which may be nil."
                :default-value (if (eq system-type 'hpux) '("-i" "-T") '("-i")))
                nil [10517 10890])
            ("explicit-bash-args" variable
               (:documentation "Args passed to inferior shell by \\[shell], if the shell is bash.
Value is a list of strings, which may be nil."
                :default-value '("--noediting" "-i"))
                nil [11048 11404])
            ("shell-input-autoexpand" variable
               (:documentation "If non-nil, expand input command history references on completion.
This mirrors the optional behavior of tcsh (its autoexpand and histlit).

If the value is `input', then the expansion is seen on input.
If the value is `history', then the expansion is only when inserting
into the buffer's input ring.  See also `comint-magic-space' and
`comint-dynamic-complete-functions'.

This variable supplies a default for `comint-input-autoexpand',
for Shell mode only."
                :default-value 'history)
                nil [11406 12029])
            ("shell-dirstack" variable (:documentation "List of directories saved by pushd in this buffer's shell.
Thus, this does not include the shell's current directory.") nil [12031 12180])
            ("defvaralias" code nil nil [12182 12233])
            ("shell-dirtrackp" variable
               (:documentation "Non-nil in a shell buffer means directory tracking is enabled."
                :default-value t)
                nil [12235 12328])
            ("shell-last-dir" variable (:documentation "Keep track of last directory for ksh `cd -' command.") nil [12330 12414])
            ("shell-dirstack-query" variable (:documentation "Command used by `shell-resync-dirs' to query the shell.") nil [12416 12509])
            ("shell-mode-map" variable (:default-value (let ((map (nconc (make-sparse-keymap) comint-mode-map))) (define-key map "" 'shell-forward-command) (define-key map "" 'shell-backward-command) (define-key map "	" 'completion-at-point) (define-key map (kbd "M-RET") 'shell-resync-dirs) (define-key map "\277" 'comint-dynamic-list-filename-completions) (define-key map [menu-bar completion] (cons "Complete" (copy-keymap (lookup-key comint-mode-map [menu-bar completion])))) (define-key-after (lookup-key map [menu-bar completion]) [complete-env-variable] '("Complete Env. Variable Name" . shell-dynamic-complete-environment-variable) 'complete-file) (define-key-after (lookup-key map [menu-bar completion]) [expand-directory] '("Expand Directory Reference" . shell-replace-by-expanded-directory) 'complete-expand) map)) nil [12511 13404])
            ("shell-mode-hook" variable
               (:documentation "Hook for customizing Shell mode."
                :default-value 'nil)
                nil [13406 13504])
            ("shell-font-lock-keywords" variable
               (:documentation "Additional expressions to highlight in Shell mode."
                :default-value '(("[ 	]\\([+-][^ 	
]+\\)" 1 font-lock-comment-face) ("^[^ 	
]+:.*" . font-lock-string-face) ("^\\[[1-9][0-9]*\\]" . font-lock-string-face)))
                nil [13506 13750])
            ("shell--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [13774 15690])
            ("shell--unquote-argument" function (:arguments ("str")) nil [15692 15775])
            ("shell--requote-argument" function (:arguments ("upos" "qstr")) nil [15776 15956])
            ("shell--parse-pcomplete-arguments" function (:documentation "Parse whitespace separated arguments in the current region.") nil [15958 17591])
            ("shell-command-completion-function" function (:documentation "Completion function for shell command names.
This is the value of `pcomplete-command-completion-function' for
Shell buffers.  It implements `shell-completion-execonly' for
`pcomplete' completion.") nil [17593 17945])
            ("shell-completion-vars" function (:documentation "Setup completion vars for `shell-mode' and `read-shell-command'.") nil [17947 19716])
            ("put" code nil nil [19718 19756])
            ("define-derived-mode" code nil nil [19758 25426])
            ("shell-apply-ansi-color" function
               (:documentation "Apply FACE as the ansi-color face for the text between BEG and END."
                :arguments ("beg" "end" "face"))
                nil [25428 25666])
            ("shell-reapply-ansi-color" function (:documentation "Reapply ansi-color faces to the existing contents of the buffer.") nil [25668 26165])
            ("shell-filter-ctrl-a-ctrl-b" function
               (:documentation "Remove `^A' and `^B' characters from comint output.

Bash uses these characters as internal quoting characters in its
prompt.  Due to a bug in some bash versions (including 2.03,
2.04, and 2.05b), they may erroneously show up when bash is
started with the `--noediting' option and Select Graphic
Rendition (SGR) control sequences (formerly known as ANSI escape
sequences) are used to color the prompt.

This function can be put on `comint-preoutput-filter-functions'."
                :arguments ("string"))
                nil [26167 26795])
            ("shell-write-history-on-exit" function
               (:documentation "Called when the shell process is stopped.

Writes the input history to a history file
`comint-input-ring-file-name' using `comint-write-input-ring'
and inserts a short message in the shell buffer.

This function is a sentinel watching the shell interpreter process.
Sentinels will always get the two parameters PROCESS and EVENT."
                :arguments ("process" "event"))
                nil [26797 27394])
            ("shell" function
               (:documentation "Run an inferior shell, with I/O through BUFFER (which defaults to `*shell*').
Interactively, a prefix arg means to prompt for BUFFER.
If `default-directory' is a remote file name, it is also prompted
to change if called with a prefix arg.

If BUFFER exists but shell process is not running, make new shell.
If BUFFER exists and shell process is running, just switch to BUFFER.
Program used comes from variable `explicit-shell-file-name',
 or (if that is nil) from the ESHELL environment variable,
 or (if that is nil) from `shell-file-name'.
If a file `~/.emacs_SHELLNAME' exists, or `~/.emacs.d/init_SHELLNAME.sh',
it is given as initial input (but this may be lost, due to a timing
error, if the shell discards input when it starts up).
The buffer is put in Shell mode, giving commands for sending input
and controlling the subjobs of the shell.  See `shell-mode'.
See also the variable `shell-prompt-pattern'.

To specify a coding system for converting non-ASCII characters
in the input and output to the shell, use \\[universal-coding-system-argument]
before \\[shell].  You can also specify this with \\[set-buffer-process-coding-system]
in the shell buffer, after you start the shell.
The default comes from `process-coding-system-alist' and
`default-process-coding-system'.

The shell file name (sans directories) is used to make a symbol name
such as `explicit-csh-args'.  If that symbol is a variable,
its value is used as a list of arguments when invoking the shell.
Otherwise, one argument `-i' is passed to the shell.

(Type \\[describe-mode] in the shell buffer for a list of commands.)"
                :user-visible-flag t
                :arguments ("buffer"))
                nil [27411 31866])
            ("shell-directory-tracker" function
               (:documentation "Tracks cd, pushd and popd commands issued to the shell.
This function is called on each input passed to the shell.
It watches for cd, pushd and popd commands and sets the buffer's
default directory to track these commands.

You may toggle this tracking on and off with \\[shell-dirtrack-mode].
If Emacs gets confused, you can resync with the shell with \\[dirs].
(The `dirtrack' package provides an alternative implementation of this
feature - see the function `dirtrack-mode'.)

See variables `shell-cd-regexp', `shell-chdrive-regexp', `shell-pushd-regexp',
and  `shell-popd-regexp', while `shell-pushd-tohome', `shell-pushd-dextract',
and `shell-pushd-dunique' control the behavior of the relevant command.

Environment variables are expanded, see function `substitute-in-file-name'."
                :arguments ("str"))
                nil [33982 36423])
            ("shell-unquote-argument" function
               (:documentation "Remove all kinds of shell quoting from STRING."
                :arguments ("string"))
                nil [36425 37293])
            ("shell-process-popd" function (:arguments ("arg")) nil [37308 37853])
            ("shell-prefixed-directory-name" function (:arguments ("dir")) nil [37923 38253])
            ("shell-process-cd" function (:arguments ("arg")) nil [38267 38589])
            ("shell-process-pushd" function (:arguments ("arg")) nil [38611 40083])
            ("shell-extract-num" function (:arguments ("str")) nil [40149 40256])
            ("define-minor-mode" code nil nil [40258 40756])
            ("define-obsolete-function-alias" code nil nil [40758 40843])
            ("shell-cd" function
               (:documentation "Do normal `cd' to DIR, and set `list-buffers-directory'."
                :arguments ("dir"))
                nil [40845 41016])
            ("shell-resync-dirs" function
               (:documentation "Resync the buffer's idea of the current directory stack.
This command queries the shell with the command bound to
`shell-dirstack-query' (default \"dirs\"), reads the next
line output and parses it to form the new directory stack.
DON'T issue this command unless the buffer is at a shell prompt.
Also, note that if some other subprocess decides to do output
immediately after the query, its output will be taken as the
new directory stack -- you lose.  If this happens, just do the
command again."
                :user-visible-flag t)
                nil [41018 43400])
            ("defalias" code nil nil [43434 43469])
            ("shell-dirstack-message" function nil nil [43747 44597])
            ("shell-snarf-envar" function
               (:documentation "Return as a string the shell's value of environment variable VAR."
                :arguments ("var"))
                nil [44649 45392])
            ("shell-copy-environment-variable" function
               (:documentation "Copy the environment variable VARIABLE from the subshell to Emacs.
This command reads the value of the specified environment variable
in the shell, and sets the same environment variable in Emacs
(what `getenv' in Emacs would return) to that value.
That value will affect any new subprocesses that you subsequently start
from Emacs."
                :user-visible-flag t
                :arguments ("variable"))
                nil [45394 45920])
            ("shell-forward-command" function
               (:documentation "Move forward across ARG shell command(s).  Does not cross lines.
See `shell-command-regexp'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [45922 46294])
            ("shell-backward-command" function
               (:documentation "Move backward across ARG shell command(s).  Does not cross lines.
See `shell-command-regexp'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [46297 46896])
            ("shell-dynamic-complete-command" function
               (:documentation "Dynamically complete the command at point.
This function is similar to `comint-dynamic-complete-filename', except that it
searches `exec-path' (minus trailing `exec-directory') for completion
candidates.  Note that this may not be the same as the shell's idea of the
path.

Completion is dependent on the value of `shell-completion-execonly',
`shell-completion-fignore', plus those that affect file completion.  See Info
node `Shell Options'.

Returns t if successful."
                :user-visible-flag t)
                nil [46898 47609])
            ("shell-command-completion" function (:documentation "Return the completion data for the command at point, if any.") nil [47611 47969])
            ("shell--command-completion-data" function (:documentation "Return the completion data for the command at point.") nil [47971 50246])
            ("shell-dynamic-complete-filename" function
               (:documentation "Dynamically complete the filename at point.
This completes only if point is at a suitable position for a
filename argument."
                :user-visible-flag t)
                nil [50486 50767])
            ("shell-filename-completion" function (:documentation "Return the completion data for file name at point, if any.") nil [50769 51131])
            ("shell-match-partial-variable" function (:documentation "Return the shell variable at point, or nil if none is found.") nil [51133 51536])
            ("shell-dynamic-complete-environment-variable" function
               (:documentation "Dynamically complete the environment variable at point.
Completes if after a variable, i.e., if it starts with a \"$\".

This function is similar to `comint-dynamic-complete-filename', except that it
searches `process-environment' for completion candidates.  Note that this may
not be the same as the interpreter's idea of variable names.  The main problem
with this type of completion is that `process-environment' is the environment
which Emacs started with.  Emacs does not track changes to the environment made
by the interpreter.  Perhaps it would be more accurate if this function was
called `shell-dynamic-complete-process-environment-variable'.

Returns non-nil if successful."
                :user-visible-flag t)
                nil [51538 52492])
            ("shell-environment-variable-completion" function (:documentation "Completion data for an environment variable at point, if any.") nil [52495 53695])
            ("shell-c-a-p-replace-by-expanded-directory" function (:documentation "Expand directory stack reference before point.
For use on `completion-at-point-functions'.") nil [53698 54881])
            ("shell-replace-by-expanded-directory" function
               (:documentation "Expand directory stack reference before point.
Directory stack references are of the form \"=digit\" or \"=-\".
See `default-directory' and `shell-dirstack'.

Returns t if successful."
                :user-visible-flag t)
                nil [54883 55214])
            ("shell" package nil nil [55216 55232]))          
      :file "shell.el.gz"
      :pointmax 55257
      :fsize 16121
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18743b4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [942 973])
            ("custom-declare-face" function
               (:documentation "Like `defface', but with FACE evaluated as a normal argument."
                :arguments ("face" "spec" "doc" "args"))
                nil [998 1434])
            ("custom-face-attributes" variable
               (:documentation "Alist of face attributes.

The elements are of the form (KEY TYPE PRE-FILTER POST-FILTER),
where KEY is the name of the attribute, TYPE is a widget type for
editing the attribute, PRE-FILTER is a function to make the attribute's
value suitable for the customization widget, and POST-FILTER is a
function to make the customized value suitable for storing.  PRE-FILTER
and POST-FILTER are optional.

The PRE-FILTER should take a single argument, the attribute value as
stored, and should return a value for customization (using the
customization type TYPE).

The POST-FILTER should also take a single argument, the value after
being customized, and should return a value suitable for setting the
given face attribute."
                :constant-flag t
                :default-value '((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) 'foreground-color)) (style (or (and (consp real-value) (plist-get real-value :style)) 'line))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style 'line) (if (eq color 'foreground-color) t color)) (t `(:color ,color :style ,style))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth `(:line-width ,lwidth)) (and color `(:color ,color)) (and style `(:style ,style))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value 'unspecified)) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value)))))
                nil [1458 8955])
            ("custom-face-attributes-get" function
               (:documentation "For FACE on FRAME, return an alternating list describing its attributes.
The list has the form (KEYWORD VALUE KEYWORD VALUE...).
Each keyword should be listed in `custom-face-attributes'.

If FRAME is nil, use the global defaults for FACE."
                :arguments ("face" "frame"))
                nil [8957 9592])
            ("custom-set-faces" function
               (:documentation "Apply a list of face specs for user customizations.
This works by calling `custom-theme-set-faces' for the `user'
theme, a special theme referring to settings made via Customize.
The arguments should be a list where each entry has the form:

  (FACE SPEC [NOW [COMMENT]])

See the documentation of `custom-theme-set-faces' for details."
                :arguments ("args"))
                nil [9613 10035])
            ("custom-theme-set-faces" function
               (:documentation "Apply a list of face specs associated with theme THEME.
THEME should be a theme name (a symbol).  The special theme named
`user' refers to user settings applied via Customize.

The remaining ARGS should be a list where each entry is a list of
the form:

  (FACE SPEC [NOW [COMMENT]])

FACE should be a face name (a symbol).  If FACE is a face alias,
the setting refers to the parent face.

SPEC should be a face spec.  For details, see `defface'.

NOW, if present and non-nil, forces the face settings to take
immediate effect in the Emacs display; in particular, FACE is
initialized as a face if it is not yet one.  If NOW is omitted or
nil, the caller is responsible for making the settings take
effect later, by calling `custom-theme-recalc-face' or
`face-spec-recalc'.

COMMENT is a string comment about FACE.

This function works by calling `custom-push-theme' to record each
SPEC in each FACE's `theme-face' property, and in THEME's
`theme-settings' property.  If FACE has not already been
customized, it also stores SPEC in the `saved-face' property.

If THEME has a non-nil `theme-immediate' property, this is
equivalent to providing the NOW argument to all faces in the
argument list."
                :arguments ("theme" "args"))
                nil [10037 12354])
            ("custom-theme-reset-faces" function
               (:documentation "Reset the specs in THEME of some faces to their specs in other themes.
Each of the arguments ARGS has this form:

    (FACE IGNORED)

This means reset FACE.  The argument IGNORED is ignored."
                :arguments ("theme" "args"))
                nil [12516 12872])
            ("custom-reset-faces" function
               (:documentation "Reset the specs of some faces to their specs in specified themes.
This creates settings in the `user' theme.

Each of the arguments ARGS has this form:

    (FACE FROM-THEME)

This means reset FACE to its value in FROM-THEME."
                :arguments ("args"))
                nil [12874 13190])
            ("cus-face" package nil nil [13206 13225]))          
      :file "cus-face.el.gz"
      :pointmax 13253
      :fsize 3966
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18743d4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("idle-update-delay" variable
               (:documentation "Idle time delay before updating various things on the screen.
Various Emacs features that update auxiliary information when point moves
wait this many seconds after Emacs becomes idle before doing an update."
                :default-value 0.5)
                nil [1268 1565])
            ("killing" customgroup
               (:documentation "Killing and yanking commands."
                :user-visible-flag t)
                nil [1567 1641])
            ("paren-matching" customgroup
               (:documentation "Highlight (un)matching of parens and expressions."
                :user-visible-flag t)
                nil [1643 1745])
            ("next-error" customgroup
               (:documentation "`next-error' support framework."
                :user-visible-flag t)
                nil [1782 1883])
            ("next-error" variable
               (:documentation "Face used to highlight next error locus."
                :default-value '((t (:inherit region)))
                :type "face")
                nil [1885 2016])
            ("next-error-highlight" variable
               (:documentation "Highlighting of locations in selected source buffers.
If a number, highlight the locus in `next-error' face for the given time
in seconds, or until the next command is executed.
If t, highlight the locus until the next command is executed, or until
some other locus replaces it.
If nil, don't highlight the locus in the source buffer.
If `fringe-arrow', indicate the locus by the fringe arrow
indefinitely until some other locus replaces it."
                :default-value 0.5)
                nil [2018 2773])
            ("next-error-highlight-no-select" variable
               (:documentation "Highlighting of locations in `next-error-no-select'.
If number, highlight the locus in `next-error' face for given time in seconds.
If t, highlight the locus indefinitely until some other locus replaces it.
If nil, don't highlight the locus in the source buffer.
If `fringe-arrow', indicate the locus by the fringe arrow
indefinitely until some other locus replaces it."
                :default-value 0.5)
                nil [2775 3468])
            ("next-error-recenter" variable (:documentation "Display the line in the visited source file recentered as specified.
If non-nil, the value is passed directly to `recenter'.") nil [3470 3832])
            ("next-error-hook" variable (:documentation "List of hook functions run by `next-error' after visiting source file.") nil [3834 3975])
            ("next-error-highlight-timer" variable nil nil [3977 4016])
            ("next-error-overlay-arrow-position" variable nil nil [4018 4064])
            ("put" code nil nil [4065 4143])
            ("add-to-list" code nil nil [4144 4221])
            ("next-error-last-buffer" variable (:documentation "The most recent `next-error' buffer.
A buffer becomes most recent when its compilation, grep, or
similar mode is started, or when it is used with \\[next-error]
or \\[compile-goto-error].") nil [4223 4450])
            ("next-error-buffer" variable (:documentation "The buffer-local value of the most recent `next-error' buffer.") nil [4452 4549])
            ("make-variable-buffer-local" code nil nil [4780 4827])
            ("next-error-function" variable (:documentation "Function to use to find the next error in the current buffer.
The function is called with 2 parameters:
ARG is an integer specifying by how many errors to move.
RESET is a boolean which, if non-nil, says to go back to the beginning
of the errors before moving.
Major modes providing compile-like functionality should set this variable
to indicate to `next-error' that this is a candidate buffer and how
to navigate in it.") nil [4829 5287])
            ("make-variable-buffer-local" code nil nil [5288 5337])
            ("next-error-move-function" variable (:documentation "Function to use to move to an error locus.
It takes two arguments, a buffer position in the error buffer
and a buffer position in the error locus buffer.
The buffer for the error locus should already be current.
nil means use goto-char using the second argument position.") nil [5339 5652])
            ("make-variable-buffer-local" code nil nil [5653 5707])
            ("next-error-buffer-p" function
               (:documentation "Return non-nil if BUFFER is a `next-error' capable buffer.
If AVOID-CURRENT is non-nil, and BUFFER is the current buffer,
return nil.

The function EXTRA-TEST-INCLUSIVE, if non-nil, is called if
BUFFER would not normally qualify.  If it returns non-nil, BUFFER
is considered `next-error' capable, anyway, and the function
returns non-nil.

The function EXTRA-TEST-EXCLUSIVE, if non-nil, is called if the
buffer would normally qualify.  If it returns nil, BUFFER is
rejected, and the function returns nil."
                :arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive"))
                nil [5709 6791])
            ("next-error-find-buffer-function" variable
               (:documentation "Function called to find a `next-error' capable buffer.
This functions takes the same three arguments as the function
`next-error-find-buffer', and should return the buffer to be
used by the subsequent invocation of the command `next-error'
and `previous-error'.
If the function returns nil, `next-error-find-buffer' will
try to use the buffer it used previously, and failing that
all other buffers."
                :default-value nil)
                nil [6793 7531])
            ("next-error-found-function" variable
               (:documentation "Function called when a next locus is found and displayed.
Function is called with two arguments: a FROM-BUFFER buffer
from which next-error navigated, and a target buffer TO-BUFFER."
                :default-value nil)
                nil [7533 7905])
            ("next-error-buffer-on-selected-frame" function
               (:documentation "Return a single visible next-error buffer on the selected frame."
                :arguments ("_avoid-current" "extra-test-inclusive" "extra-test-exclusive"))
                nil [7907 8648])
            ("next-error-find-buffer" function
               (:documentation "Return a `next-error' capable buffer.

If AVOID-CURRENT is non-nil, treat the current buffer
as an absolute last resort only.

The function EXTRA-TEST-INCLUSIVE, if non-nil, is called in each buffer
that normally would not qualify.  If it returns t, the buffer
in question is treated as usable.

The function EXTRA-TEST-EXCLUSIVE, if non-nil, is called in each buffer
that would normally be considered usable.  If it returns nil,
that buffer is rejected."
                :arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive"))
                nil [8650 11079])
            ("next-error" function
               (:documentation "Visit next `next-error' message and corresponding source code.

If all the error messages parsed so far have been processed already,
the message buffer is checked for new ones.

A prefix ARG specifies how many error messages to move;
negative means move back to previous error messages.
Just \\[universal-argument] as a prefix means reparse the error message buffer
and start at the first error.

The RESET argument specifies that we should restart from the beginning.

\\[next-error] normally uses the most recently started
compilation, grep, or occur buffer.  It can also operate on any
buffer with output from the \\[compile], \\[grep] commands, or,
more generally, on any buffer in Compilation mode or with
Compilation Minor mode enabled, or any buffer in which
`next-error-function' is bound to an appropriate function.
To specify use of a particular buffer for error messages, type
\\[next-error] in that buffer.  You can also use the command
`next-error-select-buffer' to select the buffer to use for the subsequent
invocation of `next-error'.

Once \\[next-error] has chosen the buffer for error messages, it
runs `next-error-hook' with `run-hooks', and stays with that buffer
until you use it in some other buffer which uses Compilation mode
or Compilation Minor mode.

To control which errors are matched, customize the variable
`compilation-error-regexp-alist'."
                :user-visible-flag t
                :arguments ("arg" "reset"))
                nil [11081 13209])
            ("next-error-internal" function (:documentation "Visit the source code corresponding to the `next-error' message at point.") nil [13211 13581])
            ("next-error-found" function
               (:documentation "Function to call when the next locus is found and displayed.
FROM-BUFFER is a buffer from which next-error navigated,
and TO-BUFFER is a target buffer."
                :arguments ("from-buffer" "to-buffer"))
                nil [13583 14116])
            ("next-error-select-buffer" function
               (:documentation "Select a `next-error' capable BUFFER and set it as the last used.
This means that the selected buffer becomes the source of locations
for the subsequent invocation of `next-error' or `previous-error'.
Interactively, this command allows selection only among buffers
where `next-error-function' is bound to an appropriate function."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [14118 14698])
            ("defalias" code nil nil [14700 14739])
            ("defalias" code nil nil [14740 14774])
            ("previous-error" function
               (:documentation "Visit previous `next-error' message and corresponding source code.

Prefix arg N says how many error messages to move backwards (or
forwards, if negative).

This operates on the output from the \\[compile] and \\[grep] commands.

See `next-error' for the details."
                :user-visible-flag t
                :arguments ("n"))
                nil [14776 15128])
            ("first-error" function
               (:documentation "Restart at the first error.
Visit corresponding source code.
With prefix arg N, visit the source code of the Nth error.
This operates on the output from the \\[compile] command, for instance."
                :user-visible-flag t
                :arguments ("n"))
                nil [15130 15398])
            ("next-error-no-select" function
               (:documentation "Move point to the next error in the `next-error' buffer and highlight match.
Prefix arg N says how many error messages to move forwards (or
backwards, if negative).
Finds and highlights the source line like \\[next-error], but does not
select the source buffer."
                :user-visible-flag t
                :arguments ("n"))
                nil [15400 16155])
            ("previous-error-no-select" function
               (:documentation "Move point to the previous error in the `next-error' buffer and highlight match.
Prefix arg N says how many error messages to move backwards (or
forwards, if negative).
Finds and highlights the source line like \\[previous-error], but does not
select the source buffer."
                :user-visible-flag t
                :arguments ("n"))
                nil [16157 16535])
            ("next-error-follow-last-line" variable nil nil [16606 16646])
            ("define-minor-mode" code nil nil [16648 17211])
            ("next-error-follow-mode-post-command-hook" function nil nil [17327 17660])
            ("fundamental-mode" function
               (:documentation "Major mode not specialized for anything in particular.
Other major modes are defined by comparison with this one."
                :user-visible-flag t)
                nil [17669 17878])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" 'quit-window) (define-key map " " 'scroll-up-command) (define-key map [33554464] 'scroll-down-command) (define-key map "" 'scroll-down-command) (define-key map "?" 'describe-mode) (define-key map "h" 'describe-mode) (define-key map ">" 'end-of-buffer) (define-key map "<" 'beginning-of-buffer) (define-key map "g" 'revert-buffer) map)) nil [17956 18440])
            ("put" code nil nil [18442 18482])
            ("define-derived-mode" code nil nil [18483 18628])
            ("self-insert-uses-region-functions" variable (:documentation "Special hook to tell if `self-insert-command' will use the region.
It must be called via `run-hook-with-args-until-success' with no arguments.

If any function on this hook returns a non-nil value, `delete-selection-mode'
will act on that value (see `delete-selection-helper'), and will
usually delete the region.  If all the functions on this hook return
nil, it is an indiction that `self-insert-command' needs the region
untouched by `delete-selection-mode', and will itself do whatever is
appropriate with the region.
Any function on `post-self-insert-hook' which act on the region should
add a function to this hook so that `delete-selection-mode' could
refrain from deleting the region before `post-self-insert-hook'
functions are called.
This hook is run by `delete-selection-uses-region-p', which see.") nil [18661 19521])
            ("hard-newline" variable
               (:documentation "Propertized string representing a hard newline character."
                :default-value (propertize "
" 'hard t 'rear-nonsticky '(hard)))
                nil [19523 19656])
            ("newline" function
               (:documentation "Insert a newline, and move to left margin of the new line if it's blank.
If option `use-hard-newlines' is non-nil, the newline is marked with the
text-property `hard'.
With ARG, insert that many newlines.

If `electric-indent-mode' is enabled, this indents the final new line
that it adds, and reindents the preceding line.  To just insert
a newline, use \\[electric-indent-just-newline].

Calls `auto-fill-function' if the current column number is greater
than the value of `fill-column' and ARG is nil.
A non-nil INTERACTIVE argument means to run the `post-self-insert-hook'."
                :user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [19658 22462])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [22464 22812])
            ("open-line" function
               (:documentation "Insert a newline and leave point before it.
If there is a fill prefix and/or a `left-margin', insert them on
the new line if the line would have been blank.
With arg N, insert N newlines."
                :user-visible-flag t
                :arguments ("n"))
                nil [22814 23591])
            ("split-line" function
               (:documentation "Split current line, moving portion beyond point vertically down.
If the current line starts with `fill-prefix', insert it on the new
line as well.  With prefix ARG, don't insert `fill-prefix' on new line.

When called from Lisp code, ARG may be a prefix string to copy."
                :user-visible-flag t
                :arguments ("arg"))
                nil [23593 24394])
            ("delete-indentation" function
               (:documentation "Join this line to previous and fix up whitespace at join.
If there is a fill prefix, delete it from the beginning of this line.
With argument, join this line to following line."
                :user-visible-flag t
                :arguments ("arg"))
                nil [24396 25109])
            ("defalias" code nil nil [25111 25153])
            ("delete-blank-lines" function
               (:documentation "On blank line, delete all surrounding blank lines, leaving just one.
On isolated blank line, delete that one.
On nonblank line, delete any immediately following blank lines."
                :user-visible-flag t)
                nil [25172 26599])
            ("delete-trailing-lines" variable
               (:documentation "If non-nil, \\[delete-trailing-whitespace] deletes trailing lines.
Trailing lines are deleted only if `delete-trailing-whitespace'
is called on the entire buffer (rather than an active region)."
                :default-value t)
                nil [26601 26887])
            ("region-modifiable-p" function
               (:documentation "Return non-nil if the region contains no read-only text."
                :arguments ("start" "end"))
                nil [26889 27111])
            ("delete-trailing-whitespace" function
               (:documentation "Delete trailing whitespace between START and END.
If called interactively, START and END are the start/end of the
region if the mark is active, or of the buffer's accessible
portion if the mark is inactive.

This command deletes whitespace characters after the last
non-whitespace character in each line between START and END.  It
does not consider formfeed characters to be whitespace.

If this command acts on the entire buffer (i.e. if called
interactively with the mark inactive, or called from Lisp with
END nil), it also deletes all trailing lines at the end of the
buffer if the variable `delete-trailing-lines' is non-nil."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [27113 29085])
            ("newline-and-indent" function
               (:documentation "Insert a newline, then indent according to major mode.
Indentation is done using the value of `indent-line-function'.
In programming language modes, this is the same as TAB.
In some text modes, where TAB inserts a tab, this command indents to the
column specified by the function `current-left-margin'."
                :user-visible-flag t)
                nil [29087 29520])
            ("reindent-then-newline-and-indent" function
               (:documentation "Reindent current line, insert newline, then indent the new line.
Indentation of both lines is done according to the current major mode,
which means calling the current value of `indent-line-function'.
In programming language modes, this is the same as TAB.
In some text modes, where TAB inserts a tab, this indents to the
column specified by the function `current-left-margin'."
                :user-visible-flag t)
                nil [29522 30748])
            ("read-quoted-char-radix" variable
               (:documentation "Radix for \\[quoted-insert] and other uses of `read-quoted-char'.
Legitimate radix values are 8, 10 and 16."
                :default-value 8)
                nil [30750 30971])
            ("read-quoted-char" function
               (:documentation "Like `read-char', but do not allow quitting.
Also, if the first character read is an octal digit,
we read any number of octal digits and return the
specified character code.  Any nondigit terminates the sequence.
If the terminator is RET, it is discarded;
any other terminator is used itself as input.

The optional argument PROMPT specifies a string to use to prompt the user.
The variable `read-quoted-char-radix' controls which radix to use
for numeric input."
                :arguments ("prompt"))
                nil [30973 33822])
            ("quoted-insert" function
               (:documentation "Read next input character and insert it.
This is useful for inserting control characters.
With argument, insert ARG copies of the character.

If the first character you type after this command is an octal digit,
you should type a sequence of octal digits which specify a character code.
Any nondigit terminates the sequence.  If the terminator is a RET,
it is discarded; any other terminator is used itself as input.
The variable `read-quoted-char-radix' specifies the radix for this feature;
set it to 10 or 16 to use decimal or hex instead of octal.

In overwrite mode, this function inserts the character anyway, and
does not handle octal digits specially.  This means that if you use
overwrite as your normal editing mode, you can use this function to
insert characters when necessary.

In binary overwrite mode, this function does overwrite, and octal
digits are interpreted as a character code.  This is intended to be
useful for editing binary files."
                :user-visible-flag t
                :arguments ("arg"))
                nil [33824 35853])
            ("forward-to-indentation" function
               (:documentation "Move forward ARG lines and position at first nonblank character."
                :user-visible-flag t
                :arguments ("arg"))
                nil [35855 36048])
            ("backward-to-indentation" function
               (:documentation "Move backward ARG lines and position at first nonblank character."
                :user-visible-flag t
                :arguments ("arg"))
                nil [36050 36249])
            ("back-to-indentation" function
               (:documentation "Move point to the first non-whitespace character on this line."
                :user-visible-flag t)
                nil [36251 36541])
            ("fixup-whitespace" function
               (:documentation "Fixup white space between objects around point.
Leave one space or none, according to the context."
                :user-visible-flag t)
                nil [36543 36886])
            ("delete-horizontal-space" function
               (:documentation "Delete all spaces and tabs around point.
If BACKWARD-ONLY is non-nil, only delete them before point."
                :user-visible-flag t
                :arguments ("backward-only"))
                nil [36888 37326])
            ("just-one-space" function
               (:documentation "Delete all spaces and tabs around point, leaving one space (or N spaces).
If N is negative, delete newlines as well, leaving -N spaces.
See also `cycle-spacing'."
                :user-visible-flag t
                :arguments ("n"))
                nil [37328 37588])
            ("cycle-spacing--context" variable (:documentation "Store context used in consecutive calls to `cycle-spacing' command.
The first time `cycle-spacing' runs, it saves in this variable:
its N argument, the original point position, and the original spacing
around point.") nil [37590 37845])
            ("cycle-spacing" function
               (:documentation "Manipulate whitespace around point in a smart way.
In interactive use, this function behaves differently in successive
consecutive calls.

The first call in a sequence acts like `just-one-space'.
It deletes all spaces and tabs around point, leaving one space
(or N spaces).  N is the prefix argument.  If N is negative,
it deletes newlines as well, leaving -N spaces.
(If PRESERVE-NL-BACK is non-nil, it does not delete newlines before point.)

The second call in a sequence deletes all spaces.

The third call in a sequence restores the original whitespace (and point).

If MODE is `single-shot', it only performs the first step in the sequence.
If MODE is `fast' and the first step would not result in any change
(i.e., there are exactly (abs N) spaces around point),
the function goes straight to the second step.

Repeatedly calling the function with different values of N starts a
new sequence each time."
                :user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [37847 40296])
            ("beginning-of-buffer" function
               (:documentation "Move point to the beginning of the buffer.
With numeric arg N, put point N/10 of the way from the beginning.
If the buffer is narrowed, this command uses the beginning of the
accessible part of the buffer.

Push mark at previous position, unless either a \\[universal-argument] prefix
is supplied, or Transient Mark mode is enabled and the mark is active."
                :arguments ("arg"))
                nil [40299 41222])
            ("end-of-buffer" function
               (:documentation "Move point to the end of the buffer.
With numeric arg N, put point N/10 of the way from the end.
If the buffer is narrowed, this command uses the end of the
accessible part of the buffer.

Push mark at previous position, unless either a \\[universal-argument] prefix
is supplied, or Transient Mark mode is enabled and the mark is active."
                :arguments ("arg"))
                nil [41224 42471])
            ("delete-active-region" variable
               (:documentation "Whether single-char deletion commands delete an active region.
This has an effect only if Transient Mark mode is enabled, and
affects `delete-forward-char' and `delete-backward-char', though
not `delete-char'.

If the value is the symbol `kill', the active region is killed
instead of deleted."
                :default-value t)
                nil [42473 43010])
            ("region-extract-function" variable
               (:documentation "Function to get the region's content.
Called with one argument METHOD which can be:
- nil: return the content as a string.
- `delete-only': delete the region; the return value is undefined.
- `bounds': return the boundaries of the region as a list of cons
  cells of the form (START . END).
- anything else: delete the region and return its content
  as a string, after filtering it with `filter-buffer-substring', which
  is called with METHOD as its 3rd argument."
                :default-value (lambda (method) (when (region-beginning) (cond ((eq method 'bounds) (list (cons (region-beginning) (region-end)))) ((eq method 'delete-only) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method))))))
                nil [43012 43834])
            ("region-insert-function" variable
               (:documentation "Function to insert the region's content.
Called with one argument LINES.
Insert the region as a list of lines."
                :default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil)))))
                nil [43836 44182])
            ("delete-backward-char" function
               (:documentation "Delete the previous N characters (following if N is negative).
If Transient Mark mode is enabled, the mark is active, and N is 1,
delete the text in the region and deactivate the mark instead.
To disable this, set option `delete-active-region' to nil.

Optional second arg KILLFLAG, if non-nil, means to kill (save in
kill ring) instead of delete.  Interactively, N is the prefix
arg, and KILLFLAG is set if N is explicitly specified.

When killing, the killed text is filtered by
`filter-buffer-substring' before it is saved in the kill ring, so
the actual saved text might be different from what was killed.

In Overwrite mode, single character backward deletion may replace
tabs with spaces so as to back over columns, unless point is at
the end of the line."
                :arguments ("n" "killflag"))
                nil [44184 45821])
            ("delete-forward-char" function
               (:documentation "Delete the following N characters (previous if N is negative).
If Transient Mark mode is enabled, the mark is active, and N is 1,
delete the text in the region and deactivate the mark instead.
To disable this, set variable `delete-active-region' to nil.

Optional second arg KILLFLAG non-nil means to kill (save in kill
ring) instead of delete.  Interactively, N is the prefix arg, and
KILLFLAG is set if N was explicitly specified.

When killing, the killed text is filtered by
`filter-buffer-substring' before it is saved in the kill ring, so
the actual saved text might be different from what was killed."
                :arguments ("n" "killflag"))
                nil [45823 46966])
            ("mark-whole-buffer" function (:documentation "Put point at beginning and mark at end of buffer.
Also push mark at point before pushing mark at end of buffer.
If narrowing is in effect, only uses the accessible part of the buffer.
You probably should not use this function in Lisp programs;
it is usually a mistake for a Lisp function to use any subroutine
that uses or sets the mark.") nil [46968 47589])
            ("goto-line" function
               (:documentation "Go to LINE, counting from line 1 at beginning of buffer.
If called interactively, a numeric prefix argument specifies
LINE; without a numeric prefix argument, read LINE from the
minibuffer.

If optional argument BUFFER is non-nil, switch to that buffer and
move to line LINE there.  If called interactively with \\[universal-argument]
as argument, BUFFER is the most recently selected other buffer.

Prior to moving point, this function sets the mark (without
activating it), unless Transient Mark mode is enabled and the
mark is already active.

This function is usually the wrong thing to use in a Lisp program.
What you probably want instead is something like:
  (goto-char (point-min))
  (forward-line (1- N))
If at all possible, an even better solution is to use char counts
rather than line counts."
                :arguments ("line" "buffer"))
                nil [47633 49910])
            ("count-words-region" function
               (:documentation "Count the number of words in the region.
If called interactively, print a message reporting the number of
lines, words, and characters in the region (whether or not the
region is active); with prefix ARG, report for the entire buffer
rather than the region.

If called from Lisp, return the number of words between positions
START and END."
                :user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [49912 50594])
            ("count-words" function
               (:documentation "Count words between START and END.
If called interactively, START and END are normally the start and
end of the buffer; but if the region is active, START and END are
the start and end of the region.  Print a message reporting the
number of lines, words, and chars.

If called from Lisp, return the number of words between START and
END, without printing any message."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [50596 51389])
            ("count-words--buffer-message" function nil nil [51391 51544])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [51546 51871])
            ("define-obsolete-function-alias" code nil nil [51873 51952])
            ("what-line" function
               (:documentation "Print the current buffer line number and narrowed line number of point."
                :user-visible-flag t)
                nil [51954 52305])
            ("count-lines" function
               (:documentation "Return number of lines between START and END.
This is usually the number of newlines between them,
but can be one more if START is not equal to END
and the greater of them is not at the start of a line."
                :arguments ("start" "end"))
                nil [52307 53144])
            ("line-number-at-pos" function
               (:documentation "Return buffer line number at position POS.
If POS is nil, use current buffer location.

If ABSOLUTE is nil, the default, counting starts
at (point-min), so the value refers to the contents of the
accessible portion of the (potentially narrowed) buffer.  If
ABSOLUTE is non-nil, ignore any narrowing and return the
absolute line number."
                :arguments ("pos" "absolute"))
                nil [53146 53813])
            ("what-cursor-position" function
               (:documentation "Print info on cursor position (on screen and within buffer).
Also describe the character after point, and give its character code
in octal, decimal and hex.

For a non-ASCII multibyte character, also give its encoding in the
buffer's selected coding system if the coding system encodes the
character safely.  If the character is encoded into one byte, that
code is shown in hex.  If the character is encoded into more than one
byte, just \"...\" is shown.

In addition, with prefix argument, show details about that character
in *Help* buffer.  See also the command `describe-char'."
                :user-visible-flag t
                :arguments ("detail"))
                nil [53815 58318])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" 'completion-at-point) (define-key m "	" 'completion-at-point) (set-keymap-parent m minibuffer-local-map) m)) nil [58383 58698])
            ("read-minibuffer" function
               (:documentation "Return a Lisp object read using the minibuffer, unevaluated.
Prompt with PROMPT.  If non-nil, optional second arg INITIAL-CONTENTS
is a string to insert in the minibuffer before reading.
(INITIAL-CONTENTS can also be a cons of a string and an integer.
Such arguments are used as in `read-from-minibuffer'.)"
                :arguments ("prompt" "initial-contents"))
                nil [58700 59223])
            ("eval-minibuffer" function
               (:documentation "Return value of Lisp expression read using the minibuffer.
Prompt with PROMPT.  If non-nil, optional second arg INITIAL-CONTENTS
is a string to insert in the minibuffer before reading.
(INITIAL-CONTENTS can also be a cons of a string and an integer.
Such arguments are used as in `read-from-minibuffer'.)"
                :arguments ("prompt" "initial-contents"))
                nil [59225 59682])
            ("minibuffer-completing-symbol" variable (:documentation "Non-nil means completing a Lisp symbol in the minibuffer.") nil [59684 59787])
            ("make-obsolete-variable" code nil nil [59788 59858])
            ("minibuffer-default" variable (:documentation "The current default value or list of default values in the minibuffer.
The functions `read-from-minibuffer' and `completing-read' bind
this variable locally.") nil [59860 60053])
            ("eval-expression-print-level" variable
               (:documentation "Value for `print-level' while printing value in `eval-expression'.
A value of nil means no limit."
                :default-value 4)
                nil [60055 60285])
            ("eval-expression-print-length" variable
               (:documentation "Value for `print-length' while printing value in `eval-expression'.
A value of nil means no limit."
                :default-value 12)
                nil [60287 60520])
            ("eval-expression-debug-on-error" variable
               (:documentation "If non-nil set `debug-on-error' to t in `eval-expression'.
If nil, don't change the value of `debug-on-error'."
                :default-value t)
                nil [60522 60731])
            ("eval-expression-print-maximum-character" variable
               (:documentation "The largest integer that will be displayed as a character.
This affects printing by `eval-expression' (via
`eval-expression-print-format')."
                :default-value 127)
                nil [60733 60982])
            ("eval-expression-print-format" function
               (:documentation "If VALUE is an integer, return a specially formatted string.
This string will typically look like \" (#o1, #x1, ?\\C-a)\".
If VALUE is not an integer, return nil.
This function is used by commands like `eval-expression' that
display the result of expression evaluation."
                :arguments ("value"))
                nil [60984 61666])
            ("eval-expression-minibuffer-setup-hook" variable (:documentation "Hook run by `eval-expression' when entering the minibuffer.") nil [61668 61782])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [61784 62468])
            ("eval-expression-get-print-arguments" function
               (:documentation "Get arguments for commands that print an expression result.
Returns a list (INSERT-VALUE NO-TRUNCATE CHAR-PRINT-LIMIT)
based on PREFIX-ARG.  This function determines the interpretation
of the prefix argument for `eval-expression' and
`eval-last-sexp'."
                :arguments ("prefix-argument"))
                nil [62470 63087])
            ("eval-expression" function
               (:documentation "Evaluate EXP and print value in the echo area.
When called interactively, read an Emacs Lisp expression and
evaluate it.  Value is also consed on to front of the variable
`values'.  Optional argument INSERT-VALUE non-nil (interactively,
with a non `-' prefix argument) means insert the result into the
current buffer instead of printing it in the echo area.

Normally, this function truncates long output according to the
value of the variables `eval-expression-print-length' and
`eval-expression-print-level'.  When NO-TRUNCATE is
non-nil (interactively, with a prefix argument of zero), however,
there is no such truncation.

If the resulting value is an integer, and CHAR-PRINT-LIMIT is
non-nil (interactively, unless given a non-zero prefix argument)
it will be printed in several additional formats (octal,
hexadecimal, and character).  The character format is only used
if the value is below CHAR-PRINT-LIMIT (interactively, if the
prefix argument is -1 or the value doesn't exceed
`eval-expression-print-maximum-character').

Runs the hook `eval-expression-minibuffer-setup-hook' on entering the
minibuffer.

If `eval-expression-debug-on-error' is non-nil, which is the default,
this command arranges for all errors to enter the debugger."
                :user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [63217 65745])
            ("edit-and-eval-command" function
               (:documentation "Prompting with PROMPT, let user edit COMMAND and eval result.
COMMAND is a Lisp expression.  Let user edit that expression in
the minibuffer, then read and evaluate the result."
                :arguments ("prompt" "command"))
                nil [65747 66522])
            ("repeat-complex-command" function
               (:documentation "Edit and re-evaluate last complex command, or ARGth from last.
A complex command is one which used the minibuffer.
The command is placed in the minibuffer as a Lisp form for editing.
The result is executed, repeating the command as changed.
If the command has been changed or is not the most recent previous
command it is added to the front of the command history.
You can use the minibuffer history commands \\<minibuffer-local-map>\\[next-history-element] and \\[previous-history-element]
to get different commands to edit and resubmit."
                :user-visible-flag t
                :arguments ("arg"))
                nil [66524 68058])
            ("extended-command-history" variable nil nil [68061 68098])
            ("execute-extended-command--last-typed" variable nil nil [68099 68148])
            ("read-extended-command" function (:documentation "Read command name to invoke in `execute-extended-command'.") nil [68150 70334])
            ("suggest-key-bindings" variable
               (:documentation "Non-nil means show the equivalent key-binding when M-x command has one.
The value can be a length of time to show the message for.
If the value is non-nil and not a number, we wait 2 seconds."
                :default-value t)
                nil [70336 70702])
            ("extended-command-suggest-shorter" variable
               (:documentation "If non-nil, show a shorter M-x invocation when there is one."
                :default-value t)
                nil [70704 70869])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [70871 71333])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [71335 72245])
            ("execute-extended-command" function
               (:documentation "Read a command name, then read the arguments and call the command.
To pass a prefix argument to the command you are
invoking, give a prefix argument to `execute-extended-command'."
                :arguments ("prefixarg" "command-name" "typed"))
                nil [72247 76050])
            ("command-execute" function
               (:documentation "Execute CMD as an editor command.
CMD must be a symbol that satisfies the `commandp' predicate.
Optional second arg RECORD-FLAG non-nil
means unconditionally put this command in the variable `command-history'.
Otherwise, that is done only if an arg is read using the minibuffer.
The argument KEYS specifies the value to use instead of (this-command-keys)
when reading the arguments; if it is nil, (this-command-keys) is used.
The argument SPECIAL, if non-nil, means that this command is executing
a special event, so ignore the prefix argument and don't clear it."
                :arguments ("cmd" "record-flag" "keys" "special"))
                nil [76052 78441])
            ("minibuffer-history" variable (:documentation "Default minibuffer history list.
This is used for all minibuffer input
except when an alternate history list is specified.

Maximum length of the history list is determined by the value
of `history-length', which see.") nil [78444 78697])
            ("minibuffer-history-sexp-flag" variable (:documentation "Control whether history list elements are expressions or strings.
If the value of this variable equals current minibuffer depth,
they are expressions; otherwise they are strings.
(That convention is designed to do the right thing for
recursive uses of the minibuffer.)") nil [78698 79013])
            ("setq" code nil nil [79014 79068])
            ("setq" code nil nil [79069 79107])
            ("minibuffer-history-search-history" variable nil nil [79133 79179])
            ("minibuffer-text-before-history" variable (:documentation "Text that was in this minibuffer before any history commands.
This is nil if there have not yet been any history commands
in this use of the minibuffer.") nil [79181 79381])
            ("add-hook" code nil nil [79383 79447])
            ("minibuffer-history-initialize" function nil nil [79449 79533])
            ("minibuffer-avoid-prompt" function
               (:documentation "A point-motion hook for the minibuffer, that moves point out of the prompt."
                :arguments ("_new" "_old"))
                nil [79535 79750])
            ("minibuffer-history-case-insensitive-variables" variable (:documentation "Minibuffer history variables for which matching should ignore case.
If a history variable is a member of this list, then the
\\[previous-matching-history-element] and \\[next-matching-history-element] commands ignore case when searching it, regardless of `case-fold-search'.") nil [79752 80142])
            ("previous-matching-history-element" function
               (:documentation "Find the previous history element that matches REGEXP.
(Previous history elements refer to earlier actions.)
With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match.
Normally, history elements are matched case-insensitively if
`case-fold-search' is non-nil, but an uppercase letter in REGEXP
makes the search case-sensitive.
See also `minibuffer-history-case-insensitive-variables'."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80144 82988])
            ("next-matching-history-element" function
               (:documentation "Find the next history element that matches REGEXP.
(The next history element refers to a more recent action.)
With prefix argument N, search for Nth next match.
If N is negative, find the previous or Nth previous match.
Normally, history elements are matched case-insensitively if
`case-fold-search' is non-nil, but an uppercase letter in REGEXP
makes the search case-sensitive."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [82990 84044])
            ("minibuffer-temporary-goal-position" variable nil nil [84046 84093])
            ("minibuffer-default-add-function" variable
               (:documentation "Function run by `goto-history-element' before consuming default values.
This is useful to dynamically add more elements to the list of default values
when `goto-history-element' reaches the end of this list.
Before calling this function `goto-history-element' sets the variable
`minibuffer-default-add-done' to t, so it will call this function only
once.  In special cases, when this function needs to be called more
than once, it can set `minibuffer-default-add-done' to nil explicitly,
overriding the setting of this variable to t in `goto-history-element'."
                :default-value 'minibuffer-default-add-completions)
                nil [84095 84735])
            ("minibuffer-default-add-done" variable (:documentation "When nil, add more elements to the end of the list of default values.
The value nil causes `goto-history-element' to add more elements to
the list of defaults when it reaches the end of this list.  It does
this by calling a function defined by `minibuffer-default-add-function'.") nil [84737 85060])
            ("make-variable-buffer-local" code nil nil [85062 85119])
            ("minibuffer-default-add-completions" function (:documentation "Return a list of all completions without the default value.
This function is used to add all elements of the completion table to
the end of the list of defaults just after the default value.") nil [85121 85575])
            ("goto-history-element" function
               (:documentation "Puts element of the minibuffer history in the minibuffer.
The argument NABS specifies the absolute history position."
                :user-visible-flag t
                :arguments ("nabs"))
                nil [85577 87865])
            ("next-history-element" function
               (:documentation "Puts next element of the minibuffer history in the minibuffer.
With argument N, it uses the Nth following element."
                :user-visible-flag t
                :arguments ("n"))
                nil [87867 88118])
            ("previous-history-element" function
               (:documentation "Puts previous element of the minibuffer history in the minibuffer.
With argument N, it uses the Nth previous element."
                :user-visible-flag t
                :arguments ("n"))
                nil [88120 88378])
            ("next-line-or-history-element" function
               (:documentation "Move cursor vertically down ARG lines, or to the next history element.
When point moves over the bottom line of multi-line minibuffer, puts ARGth
next element of the minibuffer history in the minibuffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [88380 89971])
            ("previous-line-or-history-element" function
               (:documentation "Move cursor vertically up ARG lines, or to the previous history element.
When point moves over the top line of multi-line minibuffer, puts ARGth
previous element of the minibuffer history in the minibuffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [89973 92012])
            ("next-complete-history-element" function
               (:documentation "Get next history element which completes the minibuffer before the point.
The contents of the minibuffer after the point are deleted, and replaced
by the new completion."
                :user-visible-flag t
                :arguments ("n"))
                nil [92014 92670])
            ("previous-complete-history-element" function
               (:documentation "Get previous history element which completes the minibuffer before the point.
The contents of the minibuffer after the point are deleted, and replaced
by the new completion."
                :user-visible-flag t
                :arguments ("n"))
                nil [92672 92957])
            ("minibuffer-prompt-width" function (:documentation "Return the display width of the minibuffer prompt.
Return 0 if current buffer is not a minibuffer.") nil [93016 93305])
            ("add-hook" code nil nil [93338 93405])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [93407 93458])
            ("make-variable-buffer-local" code nil nil [93459 93531])
            ("minibuffer-history-isearch-setup" function (:documentation "Set up a minibuffer for using isearch to search the minibuffer history.
Intended to be added to `minibuffer-setup-hook'.") nil [93533 94173])
            ("minibuffer-history-isearch-end" function (:documentation "Clean up the minibuffer after terminating isearch in the minibuffer.") nil [94175 94405])
            ("minibuffer-history-isearch-search" function (:documentation "Return the proper search function, for isearch in minibuffer history.") nil [94407 96312])
            ("minibuffer-history-isearch-message" function
               (:documentation "Display the minibuffer history search prompt.
If there are no search errors, this function displays an overlay with
the isearch prompt which replaces the original minibuffer prompt.
Otherwise, it displays the standard isearch message returned from
the function `isearch-message'."
                :arguments ("c-q-hack" "ellipsis"))
                nil [96314 97711])
            ("minibuffer-history-isearch-wrap" function (:documentation "Wrap the minibuffer history search when search fails.
Move point to the first history element for a forward search,
or to the last history element for a backward search.") nil [97713 98330])
            ("minibuffer-history-isearch-push-state" function (:documentation "Save a function restoring the state of minibuffer history search.
Save `minibuffer-history-position' to the additional state parameter
in the search status stack.") nil [98332 98663])
            ("minibuffer-history-isearch-pop-state" function
               (:documentation "Restore the minibuffer history search state.
Go to the history element by the absolute history position HIST-POS."
                :arguments ("_cmd" "hist-pos"))
                nil [98665 98877])
            ("define-obsolete-function-alias" code nil nil [98955 99017])
            ("undo-equiv-table" variable
               (:documentation "Table mapping redo records to the corresponding undo one.
A redo record for undo-in-region maps to t.
A redo record for ordinary undo maps to the following (earlier) undo."
                :constant-flag t
                :default-value (make-hash-table :test 'eq :weakness t))
                nil [99019 99262])
            ("undo-in-region" variable (:documentation "Non-nil if `pending-undo-list' is not just a tail of `buffer-undo-list'.") nil [99264 99368])
            ("undo-no-redo" variable (:documentation "If t, `undo' doesn't go through redo entries.") nil [99370 99445])
            ("pending-undo-list" variable (:documentation "Within a run of consecutive undo commands, list remaining to be undone.
If t, we undid all the way to the end of it.") nil [99447 99598])
            ("undo" function
               (:documentation "Undo some previous changes.
Repeat this command to undo more changes.
A numeric ARG serves as a repeat count.

In Transient Mark mode when the mark is active, only undo changes within
the current region.  Similarly, when not in Transient Mark mode, just \\[universal-argument]
as an argument limits undo to changes within the current region."
                :user-visible-flag t
                :arguments ("arg"))
                nil [99600 104221])
            ("buffer-disable-undo" function
               (:documentation "Make BUFFER stop keeping undo information.
No argument or nil as argument means do this for the current buffer."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [104223 104504])
            ("undo-only" function
               (:documentation "Undo some previous changes.
Repeat this command to undo more changes.
A numeric ARG serves as a repeat count.
Contrary to `undo', this will not redo a previous undo."
                :user-visible-flag t
                :arguments ("arg"))
                nil [104506 104768])
            ("undo-in-progress" variable (:documentation "Non-nil while performing an undo.
Some change-hooks test this variable to do something different.") nil [104770 104901])
            ("undo-more" function
               (:documentation "Undo back N undo-boundaries beyond what was already undone recently.
Call `undo-start' to get ready to undo recent changes,
then call `undo-more' one or more times to undo them."
                :arguments ("n"))
                nil [104903 105598])
            ("primitive-undo" function
               (:documentation "Undo N records from the front of the list LIST.
Return what remains of the list."
                :arguments ("n" "list"))
                nil [105600 112234])
            ("undo-copy-list" function
               (:documentation "Make a copy of undo list LIST."
                :arguments ("list"))
                nil [112259 112357])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [112359 112468])
            ("undo-start" function
               (:documentation "Set `pending-undo-list' to the front of the undo list.
The next call to `undo-more' will undo the most recently made change.
If BEG and END are specified, then only undo elements
that apply to text between BEG and END are used; other undo elements
are ignored.  If BEG and END are nil, all undo elements are used."
                :arguments ("beg" "end"))
                nil [112470 113058])
            ("undo-make-selective-list" function
               (:documentation "Return a list of undo elements for the region START to END.
The elements come from `buffer-undo-list', but we keep only the
elements inside this region, and discard those outside this
region.  The elements' positions are adjusted so as the returned
list can be applied to the current buffer."
                :arguments ("start" "end"))
                nil [116056 118342])
            ("undo-elt-in-region" function
               (:documentation "Determine whether UNDO-ELT falls inside the region START ... END.
If it crosses the edge, we return nil.

Generally this function is not useful for determining
whether (MARKER . ADJUSTMENT) undo elements are in the region,
because markers can be arbitrarily relocated.  Instead, pass the
marker adjustment's corresponding (TEXT . POS) element."
                :arguments ("undo-elt" "start" "end"))
                nil [118344 119383])
            ("undo-elt-crosses-region" function
               (:documentation "Test whether UNDO-ELT crosses one edge of that region START ... END.
This assumes we have already decided that UNDO-ELT
is not *inside* the region START...END."
                :arguments ("undo-elt" "start" "end"))
                nil [119385 119927])
            ("undo-adjust-elt" function
               (:documentation "Return adjustment of undo element ELT by the undo DELTAS
list."
                :arguments ("elt" "deltas"))
                nil [119929 120694])
            ("undo-adjust-beg-end" function
               (:documentation "Return cons of adjustments to BEG and END by the undo DELTAS
list."
                :arguments ("beg" "end" "deltas"))
                nil [121585 121890])
            ("undo-adjust-pos" function
               (:documentation "Return adjustment of POS by the undo DELTAS list, comparing
with < or <= based on USE-<."
                :arguments ("pos" "deltas" "use-<"))
                nil [121892 122364])
            ("undo-delta" function (:arguments ("undo-elt")) nil [122535 122868])
            ("defvar-local" code nil nil [123064 123785])
            ("undo-auto-current-boundary-timer" variable (:documentation "Current timer which will run `undo-auto--boundary-timer' or nil.

If set to non-nil, this will effectively disable the timer.") nil [123787 123962])
            ("undo-auto--this-command-amalgamating" variable (:documentation "Non-nil if `this-command' should be amalgamated.
This variable is set to nil by `undo-auto--boundaries' and is set
by `undo-auto-amalgamate'.") nil [123964 124160])
            ("undo-auto--needs-boundary-p" function (:documentation "Return non-nil if `buffer-undo-list' needs a boundary at the start.") nil [124162 124302])
            ("undo-auto--last-boundary-amalgamating-number" function (:documentation "Return the number of amalgamating last commands or nil.
Amalgamating commands are, by default, either
`self-insert-command' and `delete-char', but can be any command
that calls `undo-auto-amalgamate'.") nil [124304 124608])
            ("undo-auto--ensure-boundary" function
               (:documentation "Add an `undo-boundary' to the current buffer if needed.
REASON describes the reason that the boundary is being added; see
`undo-auto--last-boundary-cause' for more information."
                :arguments ("cause"))
                nil [124610 125244])
            ("undo-auto--boundaries" function
               (:documentation "Check recently changed buffers and add a boundary if necessary.
REASON describes the reason that the boundary is being added; see
`undo-last-boundary' for more information."
                :arguments ("cause"))
                nil [125246 125915])
            ("undo-auto--boundary-timer" function (:documentation "Timer function run by `undo-auto-current-boundary-timer'.") nil [125917 126094])
            ("undo-auto--boundary-ensure-timer" function (:documentation "Ensure that the `undo-auto-current-boundary-timer' is set.") nil [126096 126349])
            ("undo-auto--undoably-changed-buffers" variable (:documentation "List of buffers that have changed recently.

This list is maintained by `undo-auto--undoable-change' and
`undo-auto--boundaries' and can be affected by changes to their
default values.") nil [126351 126588])
            ("undo-auto--add-boundary" function (:documentation "Add an `undo-boundary' in appropriate buffers.") nil [126590 126861])
            ("undo-auto-amalgamate" function (:documentation "Amalgamate undo if necessary.
This function can be called before an amalgamating command.  It
removes the previous `undo-boundary' if a series of such calls
have been made.  By default `self-insert-command' and
`delete-char' are the only amalgamating commands, although this
function could be called by any command wishing to have this
behavior.") nil [126863 128292])
            ("undo-auto--undoable-change" function (:documentation "Called after every undoable buffer change.") nil [128294 128967])
            ("undo-amalgamate-change-group" function
               (:documentation "Amalgamate changes in change-group since HANDLE.
Remove all undo boundaries between the state of HANDLE and now.
HANDLE is as returned by `prepare-change-group'."
                :arguments ("handle"))
                nil [128998 130587])
            ("undo-ask-before-discard" variable (:documentation "If non-nil ask about discarding undo info for the current command.
Normally, Emacs discards the undo info for the current command if
it exceeds `undo-outer-limit'.  But if you set this option
non-nil, it asks in the echo area whether to discard the info.
If you answer no, there is a slight risk that Emacs might crash, so
only do it if you really want to undo the command.

This option is mainly intended for debugging.  You have to be
careful if you use it for other purposes.  Garbage collection is
inhibited while the question is asked, meaning that Emacs might
leak memory.  So you should make sure that you do not wait
excessively long before answering the question.") nil [130590 131356])
            ("undo-extra-outer-limit" variable (:documentation "If non-nil, an extra level of size that's ok in an undo item.
We don't ask the user about truncating the undo list until the
current item gets bigger than this amount.

This variable only matters if `undo-ask-before-discard' is non-nil.") nil [131358 131634])
            ("make-variable-buffer-local" code nil nil [131635 131687])
            ("setq" code nil nil [131972 132031])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [132032 133823])
            ("shell-command-history" variable (:documentation "History list for some commands that read shell commands.

Maximum length of the history list is determined by the value
of `history-length', which see.") nil [133826 134016])
            ("shell-command-switch" variable
               (:documentation "Switch used to have the shell execute its command line argument."
                :default-value (purecopy "-c"))
                nil [134018 134132])
            ("shell-command-default-error-buffer" variable (:documentation "Buffer name for `shell-command' and `shell-command-on-region' error output.
This buffer is used when `shell-command' or `shell-command-on-region'
is run interactively.  A value of nil means that output to stderr and
stdout will be intermixed in the output stream.") nil [134134 134449])
            ("declare-function" code nil nil [134451 134517])
            ("declare-function" code nil nil [134518 134604])
            ("minibuffer-default-add-shell-commands" function
               (:documentation "Return a list of all commands associated with the current file.
This function is used to add all related commands retrieved by `mailcap'
to the end of the list of defaults just after the default value."
                :user-visible-flag t)
                nil [134606 135310])
            ("declare-function" code nil nil [135312 135363])
            ("minibuffer-local-shell-command-map" variable
               (:documentation "Keymap used for completing shell commands in minibuffer."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" 'completion-at-point) map))
                nil [135365 135610])
            ("read-shell-command" function
               (:documentation "Read a shell command from the minibuffer.
The arguments are the same as the ones of `read-from-minibuffer',
except READ and KEYMAP are missing and HIST defaults
to `shell-command-history'."
                :arguments ("prompt" "initial-contents" "hist" "args"))
                nil [135612 136241])
            ("async-shell-command-buffer" variable
               (:documentation "What to do when the output buffer is used by another shell command.
This option specifies how to resolve the conflict where a new command
wants to direct its output to the buffer `*Async Shell Command*',
but this buffer is already taken by another running shell command.

The value `confirm-kill-process' is used to ask for confirmation before
killing the already running process and running a new process
in the same buffer, `confirm-new-buffer' for confirmation before running
the command in a new buffer with a name other than the default buffer name,
`new-buffer' for doing the same without confirmation,
`confirm-rename-buffer' for confirmation before renaming the existing
output buffer and running a new command in the default buffer,
`rename-buffer' for doing the same without confirmation."
                :default-value 'confirm-new-buffer)
                nil [136243 137496])
            ("async-shell-command-display-buffer" variable
               (:documentation "Whether to display the command buffer immediately.
If t, display the buffer immediately; if nil, wait until there
is output."
                :default-value t)
                nil [137498 137824])
            ("shell-command-dont-erase-buffer" variable (:documentation "If non-nil, output buffer is not erased between shell commands.
Also, a non-nil value sets the point in the output buffer
once the command completes.
The value `beg-last-out' sets point at the beginning of the output,
`end-last-out' sets point at the end of the buffer, `save-point'
restores the buffer position before the command.") nil [137826 138496])
            ("shell-command-saved-pos" variable (:documentation "Record of point positions in output buffers after command completion.
The value is an alist whose elements are of the form (BUFFER . POS),
where BUFFER is the output buffer, and POS is the point position
in BUFFER once the command finishes.
This variable is used when `shell-command-dont-erase-buffer' is non-nil.") nil [138498 138852])
            ("shell-command--save-pos-or-erase" function (:documentation "Store a buffer position or erase the buffer.
See `shell-command-dont-erase-buffer'.") nil [138854 139585])
            ("shell-command--set-point-after-cmd" function
               (:documentation "Set point in BUFFER after command complete.
BUFFER is the output buffer of the command; if nil, then defaults
to the current BUFFER.
Set point to the `cdr' of the element in `shell-command-saved-pos'
whose `car' is BUFFER."
                :arguments ("buffer"))
                nil [139587 140832])
            ("async-shell-command" function
               (:documentation "Execute string COMMAND asynchronously in background.

Like `shell-command', but adds `&' at the end of COMMAND
to execute it asynchronously.

The output appears in the buffer `*Async Shell Command*'.
That buffer is in shell mode.

You can configure `async-shell-command-buffer' to specify what to do
when the `*Async Shell Command*' buffer is already taken by another
running shell command.  To run COMMAND without displaying the output
in a window you can configure `display-buffer-alist' to use the action
`display-buffer-no-window' for the buffer `*Async Shell Command*'.

In Elisp, you will often be better served by calling `start-process'
directly, since it offers more control and does not impose the use of
a shell (with its need to quote arguments)."
                :user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [140834 142135])
            ("declare-function" code nil nil [142137 142202])
            ("shell-command" function
               (:documentation "Execute string COMMAND in inferior shell; display output, if any.
With prefix argument, insert the COMMAND's output at point.

Interactively, prompt for COMMAND in the minibuffer.

If COMMAND ends in `&', execute it asynchronously.
The output appears in the buffer `*Async Shell Command*'.
That buffer is in shell mode.  You can also use
`async-shell-command' that automatically adds `&'.

Otherwise, COMMAND is executed synchronously.  The output appears in
the buffer `*Shell Command Output*'.  If the output is short enough to
display in the echo area (which is determined by the variables
`resize-mini-windows' and `max-mini-window-height'), it is shown
there, but it is nonetheless available in buffer `*Shell Command
Output*' even though that buffer is not automatically displayed.

To specify a coding system for converting non-ASCII characters
in the shell command output, use \\[universal-coding-system-argument] before this command.

Noninteractive callers can specify coding systems by binding
`coding-system-for-read' and `coding-system-for-write'.

The optional second argument OUTPUT-BUFFER, if non-nil,
says to put the output in some other buffer.
If OUTPUT-BUFFER is a buffer or buffer name, erase that buffer
and insert the output there; a non-nil value of
`shell-command-dont-erase-buffer' prevents the buffer from being
erased.  If OUTPUT-BUFFER is not a buffer and not nil, insert the
output in current buffer after point leaving mark after it.  This
cannot be done asynchronously.

If the command terminates without error, but generates output,
and you did not specify \"insert it in the current buffer\",
the output can be displayed in the echo area or in its buffer.
If the output is short enough to display in the echo area
(determined by the variable `max-mini-window-height' if
`resize-mini-windows' is non-nil), it is shown there.
Otherwise, the buffer containing the output is displayed.

If there is output and an error, and you did not specify \"insert it
in the current buffer\", a message about the error goes at the end
of the output.

If the optional third argument ERROR-BUFFER is non-nil, it is a buffer
or buffer name to which to direct the command's standard error output.
If it is nil, error output is mingled with regular output.
In an interactive call, the variable `shell-command-default-error-buffer'
specifies the value of ERROR-BUFFER.

In Elisp, you will often be better served by calling `call-process' or
`start-process' directly, since they offer more control and do not
impose the use of a shell (with its need to quote arguments)."
                :user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [142204 151390])
            ("display-message-or-buffer" function
               (:documentation "Display MESSAGE in the echo area if possible, otherwise in a pop-up buffer.
MESSAGE may be either a string or a buffer.

A pop-up buffer is displayed using `display-buffer' if MESSAGE is too long
for maximum height of the echo area, as defined by `max-mini-window-height'
if `resize-mini-windows' is non-nil.

Returns either the string shown in the echo area, or when a pop-up
buffer is used, the window used to display it.

If MESSAGE is a string, then the optional argument BUFFER-NAME is the
name of the buffer used to display it in the case where a pop-up buffer
is used, defaulting to `*Message*'.  In the case where MESSAGE is a
string and it is displayed in the echo area, it is not specified whether
the contents are inserted into the buffer anyway.

Optional arguments ACTION and FRAME are as for `display-buffer',
and are only used if a pop-up buffer is displayed."
                :arguments ("message" "buffer-name" "action" "frame"))
                nil [151392 153788])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [153973 154260])
            ("shell-command-on-region" function
               (:documentation "Execute string COMMAND in inferior shell with region as input.
Normally display output (if any) in temp buffer `*Shell Command Output*';
Prefix arg means replace the region with it.  Return the exit code of
COMMAND.

To specify a coding system for converting non-ASCII characters
in the input and output to the shell command, use \\[universal-coding-system-argument]
before this command.  By default, the input (from the current buffer)
is encoded using coding-system specified by `process-coding-system-alist',
falling back to `default-process-coding-system' if no match for COMMAND
is found in `process-coding-system-alist'.

Noninteractive callers can specify coding systems by binding
`coding-system-for-read' and `coding-system-for-write'.

If the command generates output, the output may be displayed
in the echo area or in a buffer.
If the output is short enough to display in the echo area
(determined by the variable `max-mini-window-height' if
`resize-mini-windows' is non-nil), it is shown there.
Otherwise it is displayed in the buffer `*Shell Command Output*'.
The output is available in that buffer in both cases.

If there is output and an error, a message about the error
appears at the end of the output.

Optional fourth arg OUTPUT-BUFFER specifies where to put the
command's output.  If the value is a buffer or buffer name,
erase that buffer and insert the output there; a non-nil value of
`shell-command-dont-erase-buffer' prevent to erase the buffer.
If the value is nil, use the buffer `*Shell Command Output*'.
Any other non-nil value means to insert the output in the
current buffer after START.

Optional fifth arg REPLACE, if non-nil, means to insert the
output in place of text from START to END, putting point and mark
around it.

Optional sixth arg ERROR-BUFFER, if non-nil, specifies a buffer
or buffer name to which to direct the command's standard error
output.  If nil, error output is mingled with regular output.
When called interactively, `shell-command-default-error-buffer'
is used for ERROR-BUFFER.

Optional seventh arg DISPLAY-ERROR-BUFFER, if non-nil, means to
display the error buffer if there were any errors.  When called
interactively, this is t."
                :user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [154262 163837])
            ("shell-command-to-string" function
               (:documentation "Execute shell command COMMAND and return its output as a string."
                :arguments ("command"))
                nil [163839 164055])
            ("process-file" function
               (:documentation "Process files synchronously in a separate process.
Similar to `call-process', but may invoke a file handler based on
`default-directory'.  The current working directory of the
subprocess is `default-directory'.

File names in INFILE and BUFFER are handled normally, but file
names in ARGS should be relative to `default-directory', as they
are passed to the process verbatim.  (This is a difference to
`call-process' which does not support file handlers for INFILE
and BUFFER.)

Some file handlers might not support all variants, for example
they might behave as if DISPLAY was nil, regardless of the actual
value passed."
                :arguments ("program" "infile" "buffer" "display" "args"))
                nil [164057 165507])
            ("process-file-side-effects" variable
               (:documentation "Whether a call of `process-file' changes remote files.

By default, this variable is always set to t, meaning that a
call of `process-file' could potentially change any file on a
remote host.  When set to nil, a file handler could optimize
its behavior with respect to remote file attribute caching.

You should only ever change this variable with a let-binding;
never with `setq'."
                :default-value t)
                nil [165509 165931])
            ("start-file-process" function
               (:documentation "Start a program in a subprocess.  Return the process object for it.

Similar to `start-process', but may invoke a file handler based on
`default-directory'.  See Info node `(elisp)Magic File Names'.

This handler ought to run PROGRAM, perhaps on the local host,
perhaps on a remote host that corresponds to `default-directory'.
In the latter case, the local part of `default-directory' becomes
the working directory of the process.

PROGRAM and PROGRAM-ARGS might be file names.  They are not
objects of file handler invocation.  File handlers might not
support pty association, if PROGRAM is nil."
                :arguments ("name" "buffer" "program" "program-args"))
                nil [165933 166818])
            ("tabulated-list-format" variable nil nil [166840 166870])
            ("tabulated-list-entries" variable nil nil [166871 166902])
            ("tabulated-list-sort-key" variable nil nil [166903 166935])
            ("declare-function" code nil nil [166936 167002])
            ("declare-function" code nil nil [167003 167109])
            ("process-menu-query-only" variable nil nil [167111 167147])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] 'process-menu-delete-process) map)) nil [167149 167279])
            ("define-derived-mode" code nil nil [167281 167931])
            ("process-menu-delete-process" function
               (:documentation "Kill process at point in a `list-processes' buffer."
                :user-visible-flag t)
                nil [167933 168238])
            ("list-processes--refresh" function (:documentation "Recompute the list of processes for the Process List buffer.
Also, delete any process that is exited or signaled.") nil [168240 169987])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [169989 170086])
            ("list-processes" function
               (:documentation "Display a list of all processes that are Emacs sub-processes.
If optional argument QUERY-ONLY is non-nil, only processes with
the query-on-exit flag set are listed.
Any process listed as exited or signaled is actually eliminated
after the listing is made.
Optional argument BUFFER specifies a buffer to use, instead of
\"*Process List*\".
The return value is always nil.

This function lists only processes that were launched by Emacs.  To
see other processes running on the system, use `list-system-processes'."
                :user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [170088 171051])
            ("setq" code nil nil [171076 171115])
            ("setq" code nil nil [171116 171152])
            ("internal-echo-keystrokes-prefix" function nil nil [171154 171759])
            ("prefix-command-echo-keystrokes-functions" variable (:documentation "Abnormal hook which constructs the description of the current prefix state.
Each function is called with no argument, should return a string or nil.") nil [171761 171967])
            ("prefix-command-update" function (:documentation "Update state of prefix commands.
Call it whenever you change the \"prefix command state\".") nil [171969 172136])
            ("prefix-command-preserve-state-hook" variable (:documentation "Normal hook run when a command needs to preserve the prefix.") nil [172138 172250])
            ("prefix-command-preserve-state" function (:documentation "Pass the current prefix command state to the next command.
Should be called by all prefix commands.
Runs `prefix-command-preserve-state-hook'.") nil [172252 172745])
            ("reset-this-command-lengths" function nil nil [172747 172850])
            ("add-hook" code nil nil [172946 173042])
            ("universal-argument--description" function nil nil [173043 173502])
            ("add-hook" code nil nil [173504 173591])
            ("universal-argument--preserve" function nil nil [173592 173670])
            ("universal-argument-map" variable
               (:documentation "Keymap used while processing \\[universal-argument]."
                :default-value (let ((map (make-sparse-keymap)) (universal-argument-minus `(menu-item "" negative-argument :filter ,(lambda (cmd) (if (integerp prefix-arg) nil cmd))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] 'universal-argument-more) (define-key map [45] universal-argument-minus) (define-key map [48] 'digit-argument) (define-key map [49] 'digit-argument) (define-key map [50] 'digit-argument) (define-key map [51] 'digit-argument) (define-key map [52] 'digit-argument) (define-key map [53] 'digit-argument) (define-key map [54] 'digit-argument) (define-key map [55] 'digit-argument) (define-key map [56] 'digit-argument) (define-key map [57] 'digit-argument) (define-key map [kp-0] 'digit-argument) (define-key map [kp-1] 'digit-argument) (define-key map [kp-2] 'digit-argument) (define-key map [kp-3] 'digit-argument) (define-key map [kp-4] 'digit-argument) (define-key map [kp-5] 'digit-argument) (define-key map [kp-6] 'digit-argument) (define-key map [kp-7] 'digit-argument) (define-key map [kp-8] 'digit-argument) (define-key map [kp-9] 'digit-argument) (define-key map [kp-subtract] universal-argument-minus) map))
                nil [173672 175288])
            ("universal-argument--mode" function nil nil [175290 175400])
            ("universal-argument" function
               (:documentation "Begin a numeric argument for the following command.
Digits or minus sign following \\[universal-argument] make up the numeric argument.
\\[universal-argument] following the digits or minus sign ends the argument.
\\[universal-argument] without digits or minus sign provides 4 as argument.
Repeating \\[universal-argument] without digits or minus sign
 multiplies the argument by 4 each time.
For some commands, just \\[universal-argument] by itself serves as a flag
which is different in effect from any particular numeric argument.
These commands include \\[set-mark-command] and \\[start-kbd-macro]."
                :user-visible-flag t)
                nil [175402 176145])
            ("universal-argument-more" function (:arguments ("arg")) nil [176147 176619])
            ("negative-argument" function
               (:documentation "Begin a negative numeric argument for the next command.
\\[universal-argument] following digits or minus sign ends the argument."
                :user-visible-flag t
                :arguments ("arg"))
                nil [176621 176995])
            ("digit-argument" function
               (:documentation "Part of the numeric argument for the next command.
\\[universal-argument] following digits or minus sign ends the argument."
                :user-visible-flag t
                :arguments ("arg"))
                nil [176997 177765])
            ("filter-buffer-substring-functions" variable (:documentation "This variable is a wrapper hook around `buffer-substring--filter'.
(See `with-wrapper-hook' for details about wrapper hooks.)") nil [177769 177946])
            ("make-obsolete-variable" code nil nil [177947 178071])
            ("filter-buffer-substring-function" variable
               (:documentation "Function to perform the filtering in `filter-buffer-substring'.
The function is called with the same 3 arguments (BEG END DELETE)
that `filter-buffer-substring' received.  It should return the
buffer substring between BEG and END, after filtering.  If DELETE is
non-nil, it should delete the text between BEG and END from the buffer."
                :default-value nil)
                nil [178073 178479])
            ("buffer-substring-filters" variable (:documentation "List of filter functions for `buffer-substring--filter'.
Each function must accept a single argument, a string, and return a string.
The buffer substring is passed to the first function in the list,
and the return value of each function is passed to the next.
As a special convention, point is set to the start of the buffer text
being operated on (i.e., the first argument of `buffer-substring--filter')
before these functions are called.") nil [178481 178962])
            ("make-obsolete-variable" code nil nil [178963 179078])
            ("filter-buffer-substring" function
               (:documentation "Return the buffer substring between BEG and END, after filtering.
If DELETE is non-nil, delete the text between BEG and END from the buffer.

This calls the function that `filter-buffer-substring-function' specifies
(passing the same three arguments that it received) to do the work,
and returns whatever it does.  The default function does no filtering,
unless a hook has been set.

Use `filter-buffer-substring' instead of `buffer-substring',
`buffer-substring-no-properties', or `delete-and-extract-region' when
you want to allow filtering to take place.  For example, major or minor
modes can use `filter-buffer-substring-function' to extract characters
that are special to a buffer, and should not be copied into other buffers."
                :arguments ("beg" "end" "delete"))
                nil [179080 179936])
            ("buffer-substring--filter" function
               (:documentation "Default function to use for `filter-buffer-substring-function'.
Its arguments and return value are as specified for `filter-buffer-substring'.
Also respects the obsolete wrapper hook `filter-buffer-substring-functions'
(see `with-wrapper-hook' for details about wrapper hooks),
and the abnormal hook `buffer-substring-filters'.
No filtering is done unless a hook says to."
                :arguments ("beg" "end" "delete"))
                nil [179938 180857])
            ("interprogram-cut-function" variable
               (:documentation "Function to call to make a killed region available to other programs.
Most window systems provide a facility for cutting and pasting
text between different programs, such as the clipboard on X and
MS-Windows, or the pasteboard on Nextstep/Mac OS.

This variable holds a function that Emacs calls whenever text is
put in the kill ring, to make the new kill available to other
programs.  The function takes one argument, TEXT, which is a
string containing the text which should be made available."
                :default-value nil)
                nil [180901 181452])
            ("interprogram-paste-function" variable
               (:documentation "Function to call to get text cut from other programs.
Most window systems provide a facility for cutting and pasting
text between different programs, such as the clipboard on X and
MS-Windows, or the pasteboard on Nextstep/Mac OS.

This variable holds a function that Emacs calls to obtain text
that other programs have provided for pasting.  The function is
called with no arguments.  If no other program has provided text
to paste, the function should return nil (in which case the
caller, usually `current-kill', should use the top of the Emacs
kill ring).  If another program has provided text to paste, the
function should return that text as a string (in which case the
caller should put this string in the kill ring as the latest
kill).

The function may also return a list of strings if the window
system supports multiple selections.  The first string will be
used as the pasted text, but the other will be placed in the kill
ring for easy access via `yank-pop'.

Note that the function should return a string only if a program
other than Emacs has provided a string for pasting; if Emacs
provided the most recent string, the function should return nil.
If it is difficult to tell whether Emacs or some other program
provided the current string, it is probably good enough to return
nil if the string is equal (according to `string=') to the last
text Emacs provided."
                :default-value nil)
                nil [181454 182893])
            ("kill-ring" variable (:documentation "List of killed text sequences.
Since the kill ring is supposed to interact nicely with cut-and-paste
facilities offered by window systems, use of this variable should
interact nicely with `interprogram-cut-function' and
`interprogram-paste-function'.  The functions `kill-new',
`kill-append', and `current-kill' are supposed to implement this
interaction; you may want to use them instead of manipulating the kill
ring directly.") nil [182934 183389])
            ("kill-ring-max" variable
               (:documentation "Maximum length of kill ring before oldest elements are thrown away."
                :default-value 60)
                nil [183391 183526])
            ("kill-ring-yank-pointer" variable (:documentation "The tail of the kill ring whose car is the last thing yanked.") nil [183528 183629])
            ("save-interprogram-paste-before-kill" variable (:documentation "Save existing clipboard text into kill ring before replacing it.
A non-nil value ensures that Emacs kill operations do not
irrevocably overwrite existing clipboard text by saving it to the
`kill-ring' prior to the kill.  Such text can subsequently be
retrieved via \\[yank] \\[yank-pop]].") nil [183631 184028])
            ("kill-do-not-save-duplicates" variable (:documentation "Do not add a new string to `kill-ring' if it duplicates the last one.
The comparison is done using `equal-including-properties'.") nil [184030 184259])
            ("kill-new" function
               (:documentation "Make STRING the latest kill in the kill ring.
Set `kill-ring-yank-pointer' to point to it.
If `interprogram-cut-function' is non-nil, apply it to STRING.
Optional second argument REPLACE non-nil means that STRING will replace
the front of the kill ring, rather than being added to the list.

When `save-interprogram-paste-before-kill' and `interprogram-paste-function'
are non-nil, save the interprogram paste string(s) into `kill-ring' before
STRING.

When the yank handler has a non-nil PARAM element, the original STRING
argument is not used by `insert-for-yank'.  However, since Lisp code
may access and use elements from the kill ring directly, the STRING
argument should still be a \"useful\" string for such uses."
                :arguments ("string" "replace"))
                nil [184261 186346])
            ("kill-append-merge-undo" variable (:documentation "Amalgamate appending kills with the last kill for undo.
When non-nil, appending or prepending text to the last kill makes
\\[undo] restore both pieces of text simultaneously.") nil [186527 186797])
            ("kill-append" function
               (:documentation "Append STRING to the end of the latest kill in the kill ring.
If BEFORE-P is non-nil, prepend STRING to the kill instead.
If `interprogram-cut-function' is non-nil, call it with the
resulting kill.
If `kill-append-merge-undo' is non-nil, remove the last undo
boundary in the current buffer."
                :arguments ("string" "before-p"))
                nil [186799 187658])
            ("yank-pop-change-selection" variable (:documentation "Whether rotating the kill ring changes the window system selection.
If non-nil, whenever the kill ring is rotated (usually via the
`yank-pop' command), Emacs also calls `interprogram-cut-function'
to copy the new kill to the window system selection.") nil [187660 188008])
            ("current-kill" function
               (:documentation "Rotate the yanking point by N places, and then return that kill.
If N is zero and `interprogram-paste-function' is set to a
function that returns a string or a list of strings, and if that
function doesn't return nil, then that string (or list) is added
to the front of the kill ring and the string (or first string in
the list) is returned as the latest kill.

If N is not zero, and if `yank-pop-change-selection' is
non-nil, use `interprogram-cut-function' to transfer the
kill at the new yank point into the window system selection.

If optional arg DO-NOT-MOVE is non-nil, then don't actually
move the yanking point; just return the Nth kill forward."
                :arguments ("n" "do-not-move"))
                nil [188010 189920])
            ("kill-read-only-ok" variable (:documentation "Non-nil means don't signal an error for killing read-only text.") nil [189971 190107])
            ("kill-region" function
               (:documentation "Kill (\"cut\") text between point and mark.
This deletes the text from the buffer and saves it in the kill ring.
The command \\[yank] can retrieve it from there.
(If you want to save the region without killing it, use \\[kill-ring-save].)

If you want to append the killed region to the last killed text,
use \\[append-next-kill] before \\[kill-region].

Any command that calls this function is a \"kill command\".
If the previous command was also a kill command,
the text killed this time appends to the text killed last time
to make one entry in the kill ring.

The killed text is filtered by `filter-buffer-substring' before it is
saved in the kill ring, so the actual saved text might be different
from what was killed.

If the buffer is read-only, Emacs will beep and refrain from deleting
the text, but put the text in the kill ring anyway.  This means that
you can use the killing commands to copy text from a read-only buffer.

Lisp programs should use this function for killing text.
 (To delete text, use `delete-region'.)
Supply two arguments, character positions BEG and END indicating the
 stretch of text to be killed.  If the optional argument REGION is
 non-nil, the function ignores BEG and END, and kills the current
 region instead."
                :user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190109 192985])
            ("copy-region-as-kill" function
               (:documentation "Save the region as if killed, but don't kill it.
In Transient Mark mode, deactivate the mark.
If `interprogram-cut-function' is non-nil, also save the text for a window
system cut and paste.

The copied text is filtered by `filter-buffer-substring' before it is
saved in the kill ring, so the actual saved text might be different
from what was in the buffer.

When called from Lisp, save in the kill ring the stretch of text
between BEG and END, unless the optional argument REGION is
non-nil, in which case ignore BEG and END, and save the current
region instead.

This command's old key binding has been given to `kill-ring-save'."
                :user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [193179 194312])
            ("kill-ring-save" function
               (:documentation "Save the region as if killed, but don't kill it.
In Transient Mark mode, deactivate the mark.
If `interprogram-cut-function' is non-nil, also save the text for a window
system cut and paste.

If you want to append the killed line to the last killed text,
use \\[append-next-kill] before \\[kill-ring-save].

The copied text is filtered by `filter-buffer-substring' before it is
saved in the kill ring, so the actual saved text might be different
from what was in the buffer.

When called from Lisp, save in the kill ring the stretch of text
between BEG and END, unless the optional argument REGION is
non-nil, in which case ignore BEG and END, and save the current
region instead.

This command is similar to `copy-region-as-kill', except that it gives
visual feedback indicating the extent of the region being copied."
                :user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [194314 195603])
            ("indicate-copied-region" function
               (:documentation "Indicate that the region text has been copied interactively.
If the mark is visible in the selected window, blink the cursor
between point and mark if there is currently no active region
highlighting.

If the mark lies outside the selected window, display an
informative message containing a sample of the copied text.  The
optional argument MESSAGE-LEN, if non-nil, specifies the length
of this sample text; it defaults to 40."
                :arguments ("message-len"))
                nil [195605 197187])
            ("append-next-kill" function
               (:documentation "Cause following command, if it kills, to add to previous kill.
If the next command kills forward from point, the kill is
appended to the previous killed text.  If the command kills
backward, the kill is prepended.  Kill commands that act on the
region, such as `kill-region', are regarded as killing forward if
point is after mark, and killing backward if point is before
mark.

If the next command is not a kill command, `append-next-kill' has
no effect.

The argument is used for internal purposes; do not supply one."
                :user-visible-flag t
                :arguments ("interactive"))
                nil [197189 198009])
            ("bidi-directional-controls-chars" variable
               (:documentation "Character set that matches bidirectional formatting control characters."
                :default-value "\342\200\252-\342\200\256\342\201\246-\342\201\251")
                nil [198011 198156])
            ("bidi-directional-non-controls-chars" variable
               (:documentation "Character set that matches any character except bidirectional controls."
                :default-value "^\342\200\252-\342\200\256\342\201\246-\342\201\251")
                nil [198158 198308])
            ("squeeze-bidi-context-1" function
               (:documentation "A subroutine of `squeeze-bidi-context'.
FROM and TO should be markers, CATEGORY and REPLACEMENT should be strings."
                :arguments ("from" "to" "category" "replacement"))
                nil [198310 199416])
            ("squeeze-bidi-context" function
               (:documentation "Replace characters between FROM and TO while keeping bidi context.

This function replaces the region of text with as few characters
as possible, while preserving the effect that region will have on
bidirectional display before and after the region."
                :arguments ("from" "to"))
                nil [199418 200519])
            ("line-substring-with-bidi-context" function
               (:documentation "Return buffer text between START and END with its bidi context.

START and END are assumed to belong to the same physical line
of buffer text.  This function prepends and appends to the text
between START and END bidi control characters that preserve the
visual order of that text when it is inserted at some other place."
                :arguments ("start" "end" "no-properties"))
                nil [200521 202447])
            ("buffer-substring-with-bidi-context" function
               (:documentation "Return portion of current buffer between START and END with bidi context.

This function works similar to `buffer-substring', but it prepends and
appends to the text bidi directional control characters necessary to
preserve the visual appearance of the text if it is inserted at another
place.  This is useful when the buffer substring includes bidirectional
text and control characters that cause non-trivial reordering on display.
If copied verbatim, such text can have a very different visual appearance,
and can also change the visual appearance of the surrounding text at the
destination of the copy.

Optional argument NO-PROPERTIES, if non-nil, means copy the text without
the text properties."
                :arguments ("start" "end" "no-properties"))
                nil [202449 203752])
            ("yank-handled-properties" variable
               (:documentation "List of special text property handling conditions for yanking.
Each element should have the form (PROP . FUN), where PROP is a
property symbol and FUN is a function.  When the `yank' command
inserts text into the buffer, it scans the inserted text for
stretches of text that have `eq' values of the text property
PROP; for each such stretch of text, FUN is called with three
arguments: the property's value in that text, and the start and
end positions of the text.

This is done prior to removing the properties specified by
`yank-excluded-properties'."
                :default-value '((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))
                nil [203768 204593])
            ("yank-excluded-properties" variable
               (:documentation "Text properties to discard when yanking.
The value should be a list of text properties to discard or t,
which means to discard all text properties.

See also `yank-handled-properties'."
                :default-value '(category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))
                nil [204666 205129])
            ("yank-window-start" variable nil nil [205131 205161])
            ("yank-undo-function" variable (:documentation "If non-nil, function used by `yank-pop' to delete last stretch of yanked text.
Function is called with two parameters, START and END corresponding to
the value of the mark and point; it is guaranteed that START <= END.
Normally set from the UNDO element of a yank-handler; see `insert-for-yank'.") nil [205162 205493])
            ("yank-pop" function
               (:documentation "Replace just-yanked stretch of killed text with a different stretch.
This command is allowed only immediately after a `yank' or a `yank-pop'.
At such a time, the region contains a stretch of reinserted
previously-killed text.  `yank-pop' deletes that text and inserts in its
place a different stretch of killed text.

With no argument, the previous kill is inserted.
With argument N, insert the Nth previous kill.
If N is negative, this is a more recent kill.

The sequence of kills wraps around, so that after the oldest one
comes the newest one.

This command honors the `yank-handled-properties' and
`yank-excluded-properties' variables, and the `yank-handler' text
property, in the way that `yank' does."
                :user-visible-flag t
                :arguments ("arg"))
                nil [205495 207211])
            ("yank" function
               (:documentation "Reinsert (\"paste\") the last stretch of killed text.
More precisely, reinsert the most recent kill, which is the
stretch of killed text most recently killed OR yanked.  Put point
at the end, and set mark at the beginning without activating it.
With just \\[universal-argument] as argument, put point at beginning, and mark at end.
With argument N, reinsert the Nth most recent kill.

This command honors the `yank-handled-properties' and
`yank-excluded-properties' variables, and the `yank-handler' text
property, as described below.

Properties listed in `yank-handled-properties' are processed,
then those listed in `yank-excluded-properties' are discarded.

If STRING has a non-nil `yank-handler' property anywhere, the
normal insert behavior is altered, and instead, for each contiguous
segment of STRING that has a given value of the `yank-handler'
property, that value is used as follows:

The value of a `yank-handler' property must be a list of one to four
elements, of the form (FUNCTION PARAM NOEXCLUDE UNDO).
FUNCTION, if non-nil, should be a function of one argument (the
 object to insert); FUNCTION is called instead of `insert'.
PARAM, if present and non-nil, is passed to FUNCTION (to be handled
 in whatever way is appropriate; e.g. if FUNCTION is `yank-rectangle',
 PARAM may be a list of strings to insert as a rectangle).  If PARAM
 is nil, then the current segment of STRING is used.
If NOEXCLUDE is present and non-nil, the normal removal of
 `yank-excluded-properties' is not performed; instead FUNCTION is
 responsible for the removal.  This may be necessary if FUNCTION
 adjusts point before or after inserting the object.
UNDO, if present and non-nil, should be a function to be called
 by `yank-pop' to undo the insertion of the current PARAM.  It is
 given two arguments, the start and end of the region.  FUNCTION
 may set `yank-undo-function' to override UNDO.

See also the command `yank-pop' (\\[yank-pop])."
                :user-visible-flag t
                :arguments ("arg"))
                nil [207213 209953])
            ("rotate-yank-pointer" function
               (:documentation "Rotate the yanking point in the kill ring.
With ARG, rotate that many kills forward (or backward, if negative)."
                :user-visible-flag t
                :arguments ("arg"))
                nil [209955 210145])
            ("kill-forward-chars" function (:arguments ("arg")) nil [210210 210355])
            ("kill-backward-chars" function (:arguments ("arg")) nil [210404 210550])
            ("backward-delete-char-untabify-method" variable
               (:documentation "The method for untabifying when deleting backward.
Can be `untabify' -- turn a tab to many spaces, then delete one space;
       `hungry' -- delete all whitespace, both tabs and spaces;
       `all' -- delete all whitespace, including tabs, spaces and newlines;
       nil -- just delete one character."
                :default-value 'untabify)
                nil [210552 211027])
            ("backward-delete-char-untabify" function
               (:documentation "Delete characters backward, changing tabs into spaces.
The exact behavior depends on `backward-delete-char-untabify-method'.
Delete ARG chars, and kill (save in kill ring) if KILLP is non-nil.
Interactively, ARG is the prefix arg (default 1)
and KILLP is t if a prefix arg was specified."
                :user-visible-flag t
                :arguments ("arg" "killp"))
                nil [211029 212381])
            ("zap-to-char" function
               (:documentation "Kill up to and including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found."
                :user-visible-flag t
                :arguments ("arg" "char"))
                nil [212383 213000])
            ("kill-whole-line" variable (:documentation "If non-nil, `kill-line' with no arg at start of line kills the whole line.") nil [213037 213182])
            ("kill-line" function
               (:documentation "Kill the rest of the current line; if no nonblanks there, kill thru newline.
With prefix argument ARG, kill that many lines from point.
Negative arguments kill lines backward.
With zero argument, kills the text before point on the current line.

When calling from a program, nil means \"no arg\",
a number counts as a prefix arg.

To kill a whole line, when point is not at the beginning, type \\[move-beginning-of-line] \\[kill-line] \\[kill-line].

If `show-trailing-whitespace' is non-nil, this command will just
kill the rest of the current line, even if there are no nonblanks
there.

If option `kill-whole-line' is non-nil, then this command kills the whole line
including its terminating newline, when used at the beginning of a line
with no argument.  As a consequence, you can always kill a whole line
by typing \\[move-beginning-of-line] \\[kill-line].

If you want to append the killed line to the last killed text,
use \\[append-next-kill] before \\[kill-line].

If the buffer is read-only, Emacs will beep and refrain from deleting
the line, but put the line in the kill ring anyway.  This means that
you can use this command to copy text from a read-only buffer.
(If the variable `kill-read-only-ok' is non-nil, then this won't
even beep.)"
                :user-visible-flag t
                :arguments ("arg"))
                nil [213184 215398])
            ("kill-whole-line" function
               (:documentation "Kill current line.
With prefix ARG, kill that many lines starting from the current line.
If ARG is negative, kill backward.  Also kill the preceding newline.
(This is meant to make \\[repeat] work well with negative arguments.)
If ARG is zero, kill current line but exclude the trailing newline."
                :user-visible-flag t
                :arguments ("arg"))
                nil [215400 217029])
            ("forward-visible-line" function
               (:documentation "Move forward by ARG lines, ignoring currently invisible newlines only.
If ARG is negative, move backward -ARG lines.
If ARG is zero, move to the beginning of the current line."
                :arguments ("arg"))
                nil [217031 219521])
            ("end-of-visible-line" function (:documentation "Move to end of current visible line.") nil [219523 220289])
            ("kill-current-buffer" function
               (:documentation "Kill the current buffer.
When called in the minibuffer, get out of the minibuffer
using `abort-recursive-edit'.

This is like `kill-this-buffer', but it doesn't have to be invoked
via the menu bar, and pays no attention to the menu-bar's frame."
                :user-visible-flag t)
                nil [220291 220796])
            ("insert-buffer" function
               (:documentation "Insert after point the contents of BUFFER.
Puts mark after the inserted text.
BUFFER may be a buffer or a buffer name."
                :arguments ("buffer"))
                nil [220800 221353])
            ("append-to-buffer" function
               (:documentation "Append to specified buffer the text of the region.
It is inserted into that buffer before its point.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied."
                :user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [221355 222255])
            ("prepend-to-buffer" function
               (:documentation "Prepend to specified buffer the text of the region.
It is inserted into that buffer after its point.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied."
                :user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [222257 222799])
            ("copy-to-buffer" function
               (:documentation "Copy to specified buffer the text of the region.
It is inserted into that buffer, replacing existing text there.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied."
                :user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [222801 223370])
            ("define-error" code nil nil [223373 223442])
            ("activate-mark-hook" variable (:documentation "Hook run when the mark becomes active.
It is also run at the end of a command, if the mark is active and
it is possible that the region may have changed.") nil [223444 223633])
            ("deactivate-mark-hook" variable (:documentation "Hook run when the mark becomes inactive.") nil [223635 223713])
            ("mark" function
               (:documentation "Return this buffer's mark value as integer, or nil if never set.

In Transient Mark mode, this function signals an error if
the mark is not active.  However, if `mark-even-if-inactive' is non-nil,
or the argument FORCE is non-nil, it disregards whether the mark
is active, and returns an integer or nil in the usual way.

If you are using this in an editing command, you are most likely making
a mistake; see the documentation of `set-mark'."
                :arguments ("force"))
                nil [223715 224339])
            ("deactivate-mark" function
               (:documentation "Deactivate the mark.
If Transient Mark mode is disabled, this function normally does
nothing; but if FORCE is non-nil, it deactivates the mark anyway.

Deactivating the mark sets `mark-active' to nil, updates the
primary selection according to `select-active-regions', and runs
`deactivate-mark-hook'.

If Transient Mark mode was temporarily enabled, reset the value
of the variable `transient-mark-mode'; if this causes Transient
Mark mode to be disabled, don't change `mark-active' to nil or
run `deactivate-mark-hook'."
                :arguments ("force"))
                nil [224374 226464])
            ("activate-mark" function
               (:documentation "Activate the mark.
If NO-TMM is non-nil, leave `transient-mark-mode' alone."
                :arguments ("no-tmm"))
                nil [226466 226857])
            ("set-mark" function
               (:documentation "Set this buffer's mark to POS.  Don't use this function!
That is to say, don't use this function unless you want
the user to see that the mark has moved, and you want the previous
mark position to be lost.

Normally, when a new mark is set, the old one should go on the stack.
This is why most applications should use `push-mark', not `set-mark'.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  The mark saves a location for the user's convenience.
Most editing commands should not alter the mark.
To remember a location for internal use in the Lisp program,
store it in a Lisp variable.  Example:

   (let ((beg (point))) (forward-line 1) (delete-region beg (point)))."
                :arguments ("pos"))
                nil [226859 228083])
            ("save-mark-and-excursion--save" function nil nil [228085 228234])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [228236 229186])
            ("save-mark-and-excursion" function
               (:documentation "Like `save-excursion', but also save and restore the mark state.
This macro does what `save-excursion' did before Emacs 25.1."
                :arguments ("body"))
                nil [229188 229643])
            ("use-empty-active-region" variable (:documentation "Whether \"region-aware\" commands should act on empty regions.
If nil, region-aware commands treat the empty region as inactive.
If non-nil, region-aware commands treat the region as active as
long as the mark is active, even if the region is empty.

Region-aware commands are those that act on the region if it is
active and Transient Mark mode is enabled, and on the text near
point otherwise.") nil [229645 230144])
            ("use-region-p" function (:documentation "Return t if the region is active and it is appropriate to act on it.
This is used by commands that act specially on the region under
Transient Mark mode.

The return value is t if Transient Mark mode is enabled and the
mark is active; furthermore, if `use-empty-active-region' is nil,
the region must not be empty.  Otherwise, the return value is nil.

For some commands, it may be appropriate to ignore the value of
`use-empty-active-region'; in that case, use `region-active-p'.") nil [230146 230752])
            ("region-active-p" function (:documentation "Return non-nil if Transient Mark mode is enabled and the mark is active.

Some commands act specially on the region when Transient Mark
mode is enabled.  Usually, such commands should use
`use-region-p' instead of this function, because `use-region-p'
also checks the value of `use-empty-active-region'.") nil [230754 231443])
            ("region-bounds" function (:documentation "Return the boundaries of the region as a pair of positions.
Value is a list of cons cells of the form (START . END).") nil [231445 231634])
            ("region-noncontiguous-p" function (:documentation "Return non-nil if the region contains several pieces.
An example is a rectangular region handled as a list of
separate contiguous regions for each line.") nil [231636 231859])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [231861 231967])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol 'window window) (overlay-put nrol 'face 'region) (overlay-put nrol 'priority '(nil . 100)) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [231969 232840])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [232842 233678])
            ("pre-redisplay-functions" variable
               (:documentation "Hook run just before redisplay.
It is called in each window that is to be redisplayed.  It takes one argument,
which is the window that will be redisplayed.  When run, the `current-buffer'
is set to the buffer displayed in that window."
                :default-value (list #'redisplay--update-region-highlight))
                nil [233680 233996])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [233998 234463])
            ("add-function" code nil nil [234465 234561])
            ("defvar-local" code nil nil [234564 234663])
            ("put" code nil nil [234664 234699])
            ("mark-ring-max" variable
               (:documentation "Maximum size of mark ring.  Start discarding off end if gets this big."
                :default-value 16)
                nil [234701 234846])
            ("global-mark-ring" variable (:documentation "The list of saved global marks, most recent first.") nil [234848 234932])
            ("global-mark-ring-max" variable
               (:documentation "Maximum size of global mark ring.  Start discarding off end if gets this big."
                :default-value 16)
                nil [234934 235095])
            ("pop-to-mark-command" function
               (:documentation "Jump to mark, and pop a new position for mark off the ring.
(Does not affect global mark ring)."
                :user-visible-flag t)
                nil [235097 235410])
            ("push-mark-command" function
               (:documentation "Set mark at where point is.
If no prefix ARG and mark is already set there, just activate it.
Display `Mark set' unless the optional second arg NOMSG is non-nil."
                :user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [235412 235823])
            ("set-mark-command-repeat-pop" variable (:documentation "Non-nil means repeating \\[set-mark-command] after popping mark pops it again.
That means that C-u \\[set-mark-command] \\[set-mark-command]
will pop the mark twice, and
C-u \\[set-mark-command] \\[set-mark-command] \\[set-mark-command]
will pop the mark three times.

A value of nil means \\[set-mark-command]'s behavior does not change
after C-u \\[set-mark-command].") nil [235825 236284])
            ("set-mark-command" function
               (:documentation "Set the mark where point is, and activate it; or jump to the mark.
Setting the mark also alters the region, which is the text
between point and mark; this is the closest equivalent in
Emacs to what some editors call the \"selection\".

With no prefix argument, set the mark at point, and push the
old mark position on local mark ring.  Also push the new mark on
global mark ring, if the previous mark was set in another buffer.

When Transient Mark Mode is off, immediately repeating this
command activates `transient-mark-mode' temporarily.

With prefix argument (e.g., \\[universal-argument] \\[set-mark-command]), jump to the mark, and set the mark from
position popped off the local mark ring (this does not affect the global
mark ring).  Use \\[pop-global-mark] to jump to a mark popped off the global
mark ring (see `pop-global-mark').

If `set-mark-command-repeat-pop' is non-nil, repeating
the \\[set-mark-command] command with no prefix argument pops the next position
off the local (or global) mark ring and jumps there.

With \\[universal-argument] \\[universal-argument] as prefix
argument, unconditionally set mark where point is, even if
`set-mark-command-repeat-pop' is non-nil.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  See the documentation of `set-mark' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [236286 238605])
            ("push-mark" function
               (:documentation "Set mark at LOCATION (point, by default) and push old mark on mark ring.
If the last global mark pushed was not in the current buffer,
also push LOCATION on the global mark ring.
Display `Mark set' unless the optional second arg NOMSG is non-nil.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  See the documentation of `set-mark' for more information.

In Transient Mark mode, activate mark if optional third arg ACTIVATE non-nil."
                :arguments ("location" "nomsg" "activate"))
                nil [238607 240063])
            ("pop-mark" function (:documentation "Pop off mark ring into the buffer's actual mark.
Does not set point.  Does nothing if mark ring is empty.") nil [240065 240440])
            ("define-obsolete-function-alias" code nil nil [240442 240531])
            ("exchange-point-and-mark" function
               (:documentation "Put the mark where point is now, and point where the mark is now.
This command works even when the mark is not active,
and it reactivates the mark.

If Transient Mark mode is on, a prefix ARG deactivates the mark
if it is active, and otherwise avoids reactivating it.  If
Transient Mark mode is off, a prefix ARG enables Transient Mark
mode temporarily."
                :user-visible-flag t
                :arguments ("arg"))
                nil [240532 241427])
            ("shift-select-mode" variable
               (:documentation "When non-nil, shifted motion keys activate the mark momentarily.

While the mark is activated in this way, any shift-translated point
motion key extends the region, and if Transient Mark mode was off, it
is temporarily turned on.  Furthermore, the mark will be deactivated
by any subsequent point motion key that was not shift-translated, or
by any action that normally deactivates the mark in Transient Mark mode.

See `this-command-keys-shift-translated' for the meaning of
shift-translation."
                :default-value t)
                nil [241429 242001])
            ("handle-shift-selection" function (:documentation "Activate/deactivate mark depending on invocation thru shift translation.
This function is called by `call-interactively' when a command
with a `^' character in its `interactive' spec is invoked, before
running the command itself.

If `shift-select-mode' is enabled and the command was invoked
through shift translation, set the mark and activate the region
temporarily, unless it was already set in this way.  See
`this-command-keys-shift-translated' for the meaning of shift
translation.

Otherwise, if the region has been activated temporarily,
deactivate it, and restore the variable `transient-mark-mode' to
its earlier value.") nil [242003 243328])
            ("define-minor-mode" code nil nil [243330 244514])
            ("widen-automatically" variable
               (:documentation "Non-nil means it is ok for commands to call `widen' when they want to.
Some commands will do this in order to go to positions outside
the current accessible part of the buffer.

If `widen-automatically' is nil, these commands will do something else
as a fallback, and won't change the buffer bounds."
                :default-value t)
                nil [244516 244850])
            ("non-essential" variable (:documentation "Whether the currently executing code is performing an essential task.
This variable should be non-nil only when running code which should not
disturb the user.  E.g. it can be used to prevent Tramp from prompting the
user for a password when we are simply scanning a set of files in the
background or displaying possible completions before the user even asked
for it.") nil [244852 245250])
            ("pop-global-mark" function
               (:documentation "Pop off global mark ring and jump to the top location."
                :user-visible-flag t)
                nil [245252 246067])
            ("next-line-add-newlines" variable (:documentation "If non-nil, `next-line' inserts newline to avoid `end of buffer' error.") nil [246070 246244])
            ("next-line" function
               (:documentation "Move cursor vertically down ARG lines.
Interactively, vscroll tall lines if `auto-window-vscroll' is enabled.
Non-interactively, use TRY-VSCROLL to control whether to vscroll tall
lines: if either `auto-window-vscroll' or TRY-VSCROLL is nil, this
function will not vscroll.

ARG defaults to 1.

If there is no character in the target line exactly under the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.
If there is no line in the buffer after this one, behavior depends on the
value of `next-line-add-newlines'.  If non-nil, it inserts a newline character
to create a line, and moves the cursor to that line.  Otherwise it moves the
cursor to the end of the buffer.

If the variable `line-move-visual' is non-nil, this command moves
by display lines.  Otherwise, it moves by buffer lines, without
taking variable-width characters or continued lines into account.
See \\[next-logical-line] for a command that always moves by buffer lines.

The command \\[set-goal-column] can be used to create
a semipermanent goal column for this command.
Then instead of trying to move exactly vertically (or as close as possible),
this command moves to the specified goal column (or as close as possible).
The goal column is stored in the variable `goal-column', which is nil
when there is no goal column.  Note that setting `goal-column'
overrides `line-move-visual' and causes this command to move by buffer
lines rather than by display lines."
                :arguments ("arg" "try-vscroll"))
                nil [246246 248443])
            ("previous-line" function
               (:documentation "Move cursor vertically up ARG lines.
Interactively, vscroll tall lines if `auto-window-vscroll' is enabled.
Non-interactively, use TRY-VSCROLL to control whether to vscroll tall
lines: if either `auto-window-vscroll' or TRY-VSCROLL is nil, this
function will not vscroll.

ARG defaults to 1.

If there is no character in the target line exactly over the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.

If the variable `line-move-visual' is non-nil, this command moves
by display lines.  Otherwise, it moves by buffer lines, without
taking variable-width characters or continued lines into account.
See \\[previous-logical-line] for a command that always moves by buffer lines.

The command \\[set-goal-column] can be used to create
a semipermanent goal column for this command.
Then instead of trying to move exactly vertically (or as close as possible),
this command moves to the specified goal column (or as close as possible).
The goal column is stored in the variable `goal-column', which is nil
when there is no goal column.  Note that setting `goal-column'
overrides `line-move-visual' and causes this command to move by buffer
lines rather than by display lines."
                :arguments ("arg" "try-vscroll"))
                nil [248445 250151])
            ("track-eol" variable (:documentation "Non-nil means vertical motion starting at end of line keeps to ends of lines.
This means moving to the end of each line moved onto.
The beginning of a blank line does not count as the end of a line.
This has no effect when the variable `line-move-visual' is non-nil.") nil [250153 250491])
            ("goal-column" variable (:documentation "Semipermanent goal column for vertical motion, as set by \\[set-goal-column], or nil.
A non-nil setting overrides the variable `line-move-visual', which see.") nil [250493 250760])
            ("make-variable-buffer-local" code nil nil [250761 250802])
            ("temporary-goal-column" variable (:documentation "Current goal column for vertical motion.
It is the column where point was at the start of the current run
of vertical motion commands.

When moving by visual lines via the function `line-move-visual', it is a cons
cell (COL . HSCROLL), where COL is the x-position, in pixels,
divided by the default column width, and HSCROLL is the number of
columns by which window is scrolled from left margin.

When the `track-eol' feature is doing its job, the value is
`most-positive-fixnum'.") nil [250804 251321])
            ("line-move-ignore-invisible" variable
               (:documentation "Non-nil means commands that move by lines ignore invisible newlines.
When this option is non-nil, \\[next-line], \\[previous-line], \\[move-end-of-line], and \\[move-beginning-of-line] behave
as if newlines that are invisible didn't exist, and count
only visible newlines.  Thus, moving across 2 newlines
one of which is invisible will be counted as a one-line move.
Also, a non-nil value causes invisible text to be ignored when
counting columns for the purposes of keeping point in the same
column by \\[next-line] and \\[previous-line].

Outline mode sets this."
                :default-value t)
                nil [251323 251974])
            ("line-move-visual" variable
               (:documentation "When non-nil, `line-move' moves point by visual lines.
This movement is based on where the cursor is displayed on the
screen, instead of relying on buffer contents alone.  It takes
into account variable-width characters and line continuation.
If nil, `line-move' moves point by logical lines.
A non-nil setting of `goal-column' overrides the value of this variable
and forces movement by logical lines.
A window that is horizontally scrolled also forces movement by logical
lines."
                :default-value t)
                nil [251976 252551])
            ("declare-function" code nil nil [252588 252648])
            ("default-font-height" function (:documentation "Return the height in pixels of the current buffer's default face font.

If the default font is remapped (see `face-remapping-alist'), the
function returns the height of the remapped face.") nil [252650 253284])
            ("default-font-width" function (:documentation "Return the width in pixels of the current buffer's default face font.

If the default font is remapped (see `face-remapping-alist'), the
function returns the width of the remapped face.") nil [253286 254007])
            ("default-line-height" function (:documentation "Return the pixel height of current buffer's default-face text line.

The value includes `line-spacing', if any, defined for the buffer
or the frame.") nil [254009 254471])
            ("window-screen-lines" function (:documentation "Return the number of screen lines in the text area of the selected window.

This is different from `window-text-height' in that this function counts
lines in units of the height of the font used by the default face displayed
in the window, not in units of the frame's default font, and also accounts
for `line-spacing', if any, defined for the window's buffer or frame.

The value is a floating-point number.") nil [254473 255043])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [255090 258864])
            ("line-move" function
               (:documentation "Move forward ARG lines.
If NOERROR, don't signal an error if we can't move ARG lines.
TO-END is unused.
TRY-VSCROLL controls whether to vscroll tall lines: if either
`auto-window-vscroll' or TRY-VSCROLL is nil, this function will
not vscroll."
                :arguments ("arg" "noerror" "_to-end" "try-vscroll"))
                nil [259188 261145])
            ("line-move-visual" function
               (:documentation "Move ARG lines forward.
If NOERROR, don't signal an error if we can't move that many lines."
                :arguments ("arg" "noerror"))
                nil [261293 264296])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [264450 269123])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [269125 272626])
            ("line-move-to-column" function
               (:documentation "Try to find column COL, considering invisibility.
This function works only in certain cases,
because what we really need is for `move-to-column'
and `current-column' to be able to ignore invisible text."
                :arguments ("col"))
                nil [272628 274210])
            ("move-end-of-line" function
               (:documentation "Move point to end of current line as displayed.
With argument ARG not nil or 1, move forward ARG - 1 lines first.
If point reaches the beginning or end of buffer, it stops there.

To ignore the effects of the `intangible' text or overlay
property, bind `inhibit-point-motion-hooks' to t.
If there is an image in the current line, this function
disregards newlines that are part of the text on which the image
rests."
                :user-visible-flag t
                :arguments ("arg"))
                nil [274212 275567])
            ("move-beginning-of-line" function
               (:documentation "Move point to beginning of current line as displayed.
(If there's an image in the line, this disregards newlines
which are part of the text that the image rests on.)

With argument ARG not nil or 1, move forward ARG - 1 lines first.
If point reaches the beginning or end of buffer, it stops there.
(But if the buffer doesn't end in a newline, it stops at the
beginning of the last line.)
To ignore intangibility, bind `inhibit-point-motion-hooks' to t."
                :user-visible-flag t
                :arguments ("arg"))
                nil [275569 277192])
            ("put" code nil nil [277322 277356])
            ("set-goal-column" function
               (:documentation "Set the current horizontal position as a goal for \\[next-line] and \\[previous-line].
Those commands will move to this position in the line moved to
rather than trying to keep the same horizontal position.
With a non-nil argument ARG, clears out the goal column
so that \\[next-line] and \\[previous-line] resume vertical motion.
The goal column is stored in the variable `goal-column'.
This is a buffer-local setting."
                :user-visible-flag t
                :arguments ("arg"))
                nil [277358 278391])
            ("end-of-visual-line" function
               (:documentation "Move point to end of current visual line.
With argument N not nil or 1, move forward N - 1 visual lines first.
If point reaches the beginning or end of buffer, it stops there.
To ignore intangibility, bind `inhibit-point-motion-hooks' to t."
                :user-visible-flag t
                :arguments ("n"))
                nil [278459 279023])
            ("beginning-of-visual-line" function
               (:documentation "Move point to beginning of current visual line.
With argument N not nil or 1, move forward N - 1 visual lines first.
If point reaches the beginning or end of buffer, it stops there.
(But if the buffer doesn't end in a newline, it stops at the
beginning of the last visual line.)
To ignore intangibility, bind `inhibit-point-motion-hooks' to t."
                :user-visible-flag t
                :arguments ("n"))
                nil [279025 279714])
            ("kill-visual-line" function
               (:documentation "Kill the rest of the visual line.
With prefix argument ARG, kill that many visual lines from point.
If ARG is negative, kill visual lines backward.
If ARG is zero, kill the text before point on the current visual
line.

If you want to append the killed line to the last killed text,
use \\[append-next-kill] before \\[kill-line].

If the buffer is read-only, Emacs will beep and refrain from deleting
the line, but put the line in the kill ring anyway.  This means that
you can use this command to copy text from a read-only buffer.
(If the variable `kill-read-only-ok' is non-nil, then this won't
even beep.)"
                :user-visible-flag t
                :arguments ("arg"))
                nil [279716 281138])
            ("next-logical-line" function
               (:documentation "Move cursor vertically down ARG lines.
This is identical to `next-line', except that it always moves
by logical lines instead of visual lines, ignoring the value of
the variable `line-move-visual'."
                :user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [281140 281509])
            ("previous-logical-line" function
               (:documentation "Move cursor vertically up ARG lines.
This is identical to `previous-line', except that it always moves
by logical lines instead of visual lines, ignoring the value of
the variable `line-move-visual'."
                :user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [281511 281890])
            ("visual-line" customgroup
               (:documentation "Editing based on visual lines."
                :user-visible-flag t)
                nil [281892 281993])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] 'kill-visual-line) (define-key map [remap move-beginning-of-line] 'beginning-of-visual-line) (define-key map [remap move-end-of-line] 'end-of-visual-line) map)) nil [281995 282483])
            ("visual-line-fringe-indicators" variable
               (:documentation "How fringe indicators are shown for wrapped lines in `visual-line-mode'.
The value should be a list of the form (LEFT RIGHT), where LEFT
and RIGHT are symbols representing the bitmaps to display, to
indicate wrapped lines, in the left and right fringes respectively.
See also `fringe-indicator-alist'.
The default is not to display fringe indicators for wrapped lines.
This variable does not affect fringe indicators displayed for
other purposes."
                :default-value '(nil nil))
                nil [282485 283672])
            ("visual-line--saved-state" variable nil nil [283674 283711])
            ("define-minor-mode" code nil nil [283713 285214])
            ("turn-on-visual-line-mode" function nil nil [285216 285274])
            ("define-globalized-minor-mode" code nil nil [285276 285374])
            ("transpose-chars" function
               (:documentation "Interchange characters around point, moving forward one character.
With prefix arg ARG, effect is to take character before point
and drag it forward past ARG other characters (backward if ARG negative).
If no argument and at end of line, the previous two chars are exchanged."
                :user-visible-flag t
                :arguments ("arg"))
                nil [285378 285892])
            ("transpose-words" function
               (:documentation "Interchange words around point, leaving point at end of them.
With prefix arg ARG, effect is to take word before or around point
and drag it forward past ARG other words (backward if ARG negative).
If ARG is zero, the words around or after point and around or after mark
are interchanged."
                :user-visible-flag t
                :arguments ("arg"))
                nil [285894 286338])
            ("transpose-sexps" function
               (:documentation "Like \\[transpose-chars] (`transpose-chars'), but applies to sexps.
Unlike `transpose-words', point must be between the two sexps and not
in the middle of a sexp to be transposed.
With non-zero prefix arg ARG, effect is to take the sexp before point
and drag it forward past ARG other sexps (backward if ARG is negative).
If ARG is zero, the sexps ending at or after point and at or after mark
are interchanged."
                :user-visible-flag t
                :arguments ("arg"))
                nil [286340 288094])
            ("transpose-lines" function
               (:documentation "Exchange current line and previous line, leaving point after both.
With argument ARG, takes previous line and moves it past ARG lines.
With argument 0, interchanges line point is in with line mark is in."
                :user-visible-flag t
                :arguments ("arg"))
                nil [288096 288703])
            ("transpose-subr" function
               (:documentation "Subroutine to do the work of transposing objects.
Works for lines, sentences, paragraphs, etc.  MOVER is a function that
moves forward by units of the given object (e.g. forward-sentence,
forward-paragraph).  If ARG is zero, exchanges the current object
with the one containing mark.  If ARG is an integer, moves the
current object past ARG following (if ARG is positive) or
preceding (if ARG is negative) objects, leaving point after the
current object."
                :arguments ("mover" "arg" "special"))
                nil [288854 290111])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [290113 291117])
            ("backward-word" function
               (:documentation "Move backward until encountering the beginning of a word.
With argument ARG, do this that many times.
If ARG is omitted or nil, move point backward one word.

The word boundaries are normally determined by the buffer's
syntax table and character script (according to
`char-script-table'), but `find-word-boundary-function-table',
such as set up by `subword-mode', can change that.  If a Lisp
program needs to move by words determined strictly by the syntax
table, it should use `backward-word-strictly' instead.  See Info
node `(elisp) Word Motion' for details."
                :user-visible-flag t
                :arguments ("arg"))
                nil [291120 291776])
            ("mark-word" function
               (:documentation "Set mark ARG words away from point.
The place mark goes is the same place \\[forward-word] would
move to with the same argument.
Interactively, if this command is repeated
or (in Transient Mark mode) if the mark is active,
it marks the next ARG words after the ones already marked."
                :user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [291778 292530])
            ("kill-word" function
               (:documentation "Kill characters forward until encountering the end of a word.
With argument ARG, do this that many times."
                :user-visible-flag t
                :arguments ("arg"))
                nil [292532 292744])
            ("backward-kill-word" function
               (:documentation "Kill characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
                :user-visible-flag t
                :arguments ("arg"))
                nil [292746 292937])
            ("current-word" function
               (:documentation "Return the word at or near point, as a string.
The return value includes no text properties.

If optional arg STRICT is non-nil, return nil unless point is
within or adjacent to a word, otherwise look for a word within
point's line.  If there is no word anywhere on point's line, the
value is nil regardless of STRICT.

By default, this function treats as a single word any sequence of
characters that have either word or symbol syntax.  If optional
arg REALLY-WORD is non-nil, only characters of word syntax can
constitute a word."
                :arguments ("strict" "really-word"))
                nil [292939 294547])
            ("fill-prefix" variable (:documentation "String for filling to insert at front of new line, or nil for none.") nil [294550 294716])
            ("make-variable-buffer-local" code nil nil [294717 294758])
            ("put" code nil nil [294759 294816])
            ("auto-fill-inhibit-regexp" variable (:documentation "Regexp to match lines which should not be auto-filled.") nil [294818 294984])
            ("do-auto-fill" function (:documentation "The default value for `normal-auto-fill-function'.
This is the default auto-fill function, some major modes use a different one.
Returns t if it really did any work.") nil [294986 298342])
            ("comment-line-break-function" variable
               (:documentation "Mode-specific function which line breaks and continues a comment.
This function is called during auto-filling when a comment syntax
is defined.
The function should take a single optional argument, which is a flag
indicating whether it should use soft newlines."
                :default-value 'comment-indent-new-line)
                nil [298344 298670])
            ("default-indent-new-line" function
               (:documentation "Break line at point and indent.
If a comment syntax is defined, call `comment-indent-new-line'.

The inserted newline is marked hard if variable `use-hard-newlines' is true,
unless optional argument SOFT is non-nil."
                :user-visible-flag t
                :arguments ("soft"))
                nil [298672 299779])
            ("internal-auto-fill" function (:documentation "The function called by `self-insert-command' to perform auto-filling.") nil [299781 300035])
            ("normal-auto-fill-function" variable
               (:documentation "The function to use for `auto-fill-function' if Auto Fill mode is turned on.
Some major modes set this."
                :default-value 'do-auto-fill)
                nil [300037 300193])
            ("put" code nil nil [300195 300257])
            ("put" code nil nil [300431 300483])
            ("define-minor-mode" code nil nil [300485 301068])
            ("auto-fill-function" function (:documentation "Automatically break line at a previous space, in insertion of text.") nil [301135 301242])
            ("turn-on-auto-fill" function (:documentation "Unconditionally turn on Auto Fill mode.") nil [301244 301337])
            ("turn-off-auto-fill" function (:documentation "Unconditionally turn off Auto Fill mode.") nil [301339 301435])
            ("custom-add-option" code nil nil [301437 301491])
            ("set-fill-column" function
               (:documentation "Set `fill-column' to specified argument.
Use \\[universal-argument] followed by a number to specify a column.
Just \\[universal-argument] as argument means to use the current column."
                :user-visible-flag t
                :arguments ("arg"))
                nil [301493 302331])
            ("set-selective-display" function
               (:documentation "Set `selective-display' to ARG; clear it if no arg.
When the value of `selective-display' is a number > 0,
lines whose indentation is >= that value are not displayed.
The variable `selective-display' has a separate value for each buffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [302334 303124])
            ("defvaralias" code nil nil [303126 303184])
            ("toggle-truncate-lines" function
               (:documentation "Toggle truncating of long lines for the current buffer.
When truncating is off, long lines are folded.
With prefix argument ARG, truncate long lines if ARG is positive,
otherwise fold them.  Note that in side-by-side windows, this
command has no effect if `truncate-partial-width-windows' is
non-nil."
                :user-visible-flag t
                :arguments ("arg"))
                nil [303186 303966])
            ("toggle-word-wrap" function
               (:documentation "Toggle whether to use word-wrapping for continuation lines.
With prefix argument ARG, wrap continuation lines at word boundaries
if ARG is positive, otherwise wrap them at the right screen edge.
This command toggles the value of `word-wrap'.  It has no effect
if long lines are truncated."
                :user-visible-flag t
                :arguments ("arg"))
                nil [303968 304512])
            ("overwrite-mode-textual" variable
               (:documentation "The string displayed in the mode line when in overwrite mode."
                :default-value (purecopy " Ovwrt"))
                nil [304514 304631])
            ("overwrite-mode-binary" variable
               (:documentation "The string displayed in the mode line when in binary overwrite mode."
                :default-value (purecopy " Bin Ovwrt"))
                nil [304632 304759])
            ("define-minor-mode" code nil nil [304761 305334])
            ("define-minor-mode" code nil nil [305336 306097])
            ("define-minor-mode" code nil nil [306099 306413])
            ("define-minor-mode" code nil nil [306415 306555])
            ("define-minor-mode" code nil nil [306557 306699])
            ("define-minor-mode" code nil nil [306701 307537])
            ("paren-blinking" customgroup
               (:documentation "Blinking matching of parens and expressions."
                :user-visible-flag t)
                nil [307540 307671])
            ("blink-matching-paren" variable
               (:documentation "Non-nil means show matching open-paren when close-paren is inserted.
If t, highlight the paren.  If `jump', briefly move cursor to its
position.  If `jump-offscreen', move cursor there even if the
position is off screen.  With any other non-nil value, the
off-screen position of the opening paren will be shown in the
echo area."
                :default-value t)
                nil [307673 308271])
            ("blink-matching-paren-on-screen" variable
               (:documentation "Non-nil means show matching open-paren when it is on screen.
If nil, don't show it (but the open-paren can still be shown
in the echo area when it is off screen).

This variable has no effect if `blink-matching-paren' is nil.
(In that case, the open-paren is never shown.)
It is also ignored if `show-paren-mode' is enabled."
                :default-value t)
                nil [308273 308689])
            ("blink-matching-paren-distance" variable
               (:documentation "If non-nil, maximum distance to search backwards for matching open-paren.
If nil, search stops at the beginning of the accessible portion of the buffer."
                :default-value (* 100 1024))
                nil [308691 309016])
            ("blink-matching-delay" variable
               (:documentation "Time in seconds to delay after showing a matching paren."
                :default-value 1)
                nil [309018 309154])
            ("blink-matching-paren-dont-ignore-comments" variable (:documentation "If nil, `blink-matching-paren' ignores comments.
More precisely, when looking for the matching parenthesis,
it skips the contents of comments that end before point.") nil [309156 309424])
            ("blink-matching-check-mismatch" function
               (:documentation "Return whether or not START...END are matching parens.
END is the current point and START is the blink position.
START might be nil if no matching starter was found.
Returns non-nil if we find there is a mismatch."
                :arguments ("start" "end"))
                nil [309426 310411])
            ("blink-matching-check-function" variable
               (:documentation "Function to check parentheses mismatches.
The function takes two arguments (START and END) where START is the
position just before the opening token and END is the position right after.
START can be nil, if it was not found.
The function should return non-nil if the two tokens do not match."
                :default-value nil)
                nil [310413 310779])
            ("blink-matching--overlay" variable
               (:documentation "Overlay used to highlight the matching paren."
                :default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol 'face 'show-paren-match) (delete-overlay ol) ol))
                nil [310781 310991])
            ("blink-matching-open" function
               (:documentation "Momentarily highlight the beginning of the sexp before point."
                :user-visible-flag t)
                nil [310993 315557])
            ("blink-paren-function" variable
               (:documentation "Function called, if non-nil, whenever a close parenthesis is inserted.
More precisely, a char with closeparen syntax is self-inserted."
                :default-value 'blink-matching-open)
                nil [315559 315748])
            ("blink-paren-post-self-insert-function" function nil nil [315750 316397])
            ("put" code nil nil [316399 316457])
            ("add-hook" code nil nil [316459 316838])
            ("keyboard-quit" function
               (:documentation "Signal a `quit' condition.
During execution of Lisp code, this character causes a quit directly.
At top-level, as an editor command, this simply beeps."
                :user-visible-flag t)
                nil [317025 317743])
            ("buffer-quit-function" variable (:documentation "Function to call to \"quit\" the current buffer, or nil if none.
\\[keyboard-escape-quit] calls this function when its more local actions
(such as canceling a prefix argument, minibuffer or region) do not apply.") nil [317745 317995])
            ("keyboard-escape-quit" function
               (:documentation "Exit the current \"mode\" (in a generalized sense of the word).
This command can exit an interactive command such as `query-replace',
can clear out a prefix argument or a region,
can get out of the minibuffer or other recursive edit,
cancel the use of the current buffer (for special-purpose buffers),
or go back to just one window (by deleting all but the selected window)."
                :user-visible-flag t)
                nil [317997 318823])
            ("play-sound-file" function
               (:documentation "Play sound stored in FILE.
VOLUME and DEVICE correspond to the keywords of the sound
specification for `play-sound'."
                :user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [318825 319220])
            ("read-mail-command" variable
               (:documentation "Your preference for a mail reading package.
This is used by some keybindings which support reading mail.
See also `mail-user-agent' concerning sending mail."
                :default-value 'rmail)
                nil [319224 319741])
            ("mail-user-agent" variable
               (:documentation "Your preference for a mail composition package.
Various Emacs Lisp packages (e.g. Reporter) require you to compose an
outgoing email message.  This variable lets you specify which
mail-sending package you prefer.

Valid values include:

  `message-user-agent'  -- use the Message package.
                           See Info node `(message)'.
  `sendmail-user-agent' -- use the Mail package.
                           See Info node `(emacs)Sending Mail'.
  `mh-e-user-agent'     -- use the Emacs interface to the MH mail system.
                           See Info node `(mh-e)'.
  `gnus-user-agent'     -- like `message-user-agent', but with Gnus
                           paraphernalia if Gnus is running, particularly
                           the Gcc: header for archiving.

Additional valid symbols may be available; check with the author of
your package for details.  The function should return non-nil if it
succeeds.

See also `read-mail-command' concerning reading mail."
                :default-value 'message-user-agent)
                nil [319743 321287])
            ("compose-mail-user-agent-warnings" variable
               (:documentation "If non-nil, `compose-mail' warns about changes in `mail-user-agent'.
If the value of `mail-user-agent' is the default, and the user
appears to have customizations applying to the old default,
`compose-mail' issues a warning."
                :default-value t)
                nil [321289 321614])
            ("rfc822-goto-eoh" function (:documentation "If the buffer starts with a mail header, move point to the header's end.
Otherwise, moves to `point-min'.
The end of the header is the start of the next line, if there is one,
else the end of the last line.  This function obeys RFC822.") nil [321616 322020])
            ("mail-encode-mml" variable (:documentation "If non-nil, mail-user-agent's `sendfunc' command should mml-encode
the outgoing message before sending it.") nil [322062 322201])
            ("compose-mail" function
               (:documentation "Start composing a mail message to send.
This uses the user's chosen mail composition package
as selected with the variable `mail-user-agent'.
The optional arguments TO and SUBJECT specify recipients
and the initial Subject field, respectively.

OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

CONTINUE, if non-nil, says to continue editing a message already
being composed.  Interactively, CONTINUE is the prefix argument.

SWITCH-FUNCTION, if non-nil, is a function to use to
switch to and display the buffer used for mail composition.

YANK-ACTION, if non-nil, is an action to perform, if and when necessary,
to insert the raw text of the message being replied to.
It has the form (FUNCTION . ARGS).  The user agent will apply
FUNCTION to ARGS, to insert the raw text of the original message.
(The user agent will also run `mail-citation-hook', *after* the
original text has been inserted in this way.)

SEND-ACTIONS is a list of actions to call when the message is sent.
Each action has the form (FUNCTION . ARGS).

RETURN-ACTION, if non-nil, is an action for returning to the
caller.  It has the form (FUNCTION . ARGS).  The function is
called after the mail has been sent or put aside, and the mail
buffer buried."
                :user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [322203 324974])
            ("compose-mail-other-window" function
               (:documentation "Like \\[compose-mail], but edit the outgoing message in another window."
                :user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324976 325367])
            ("compose-mail-other-frame" function
               (:documentation "Like \\[compose-mail], but edit the outgoing message in another frame."
                :user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [325369 325757])
            ("set-variable-value-history" variable (:documentation "History of values entered with `set-variable'.

Maximum length of the history list is determined by the value
of `history-length', which see.") nil [325761 325946])
            ("set-variable" function
               (:documentation "Set VARIABLE to VALUE.  VALUE is a Lisp object.
VARIABLE should be a user option variable name, a Lisp variable
meant to be customized by users.  You should enter VALUE in Lisp syntax,
so if you want VALUE to be a string, you must surround it with doublequotes.
VALUE is used literally, not evaluated.

If VARIABLE has a `variable-interactive' property, that is used as if
it were the arg to `interactive' (which see) to interactively read VALUE.

If VARIABLE has been defined with `defcustom', then the type information
in the definition is used to check that VALUE is valid.

Note that this function is at heart equivalent to the basic `set' function.
For a variable defined with `defcustom', it does not pay attention to
any :set property that the variable might have (if you want that, use
\\[customize-set-variable] instead).

With a prefix argument, set VARIABLE to VALUE buffer-locally."
                :user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [325948 329044])
            ("completion-list-mode-map" variable
               (:documentation "Local map for completion list buffers."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] 'choose-completion) (define-key map [follow-link] 'mouse-face) (define-key map [down-mouse-2] nil) (define-key map "" 'choose-completion) (define-key map "" 'delete-completion-window) (define-key map [left] 'previous-completion) (define-key map [right] 'next-completion) (define-key map [9] 'next-completion) (define-key map [backtab] 'previous-completion) (define-key map "q" 'quit-window) (define-key map "z" 'kill-current-buffer) map))
                nil [329099 329735])
            ("put" code nil nil [329803 329851])
            ("completion-reference-buffer" variable (:documentation "Record the buffer that was current when the completion list was requested.
This is a local variable in the completion list buffer.
Initial value is nil to avoid some compiler warnings.") nil [329853 330082])
            ("completion-no-auto-exit" variable (:documentation "Non-nil means `choose-completion-string' should never exit the minibuffer.
This also applies to other functions such as `choose-completion'.") nil [330084 330265])
            ("completion-base-position" variable (:documentation "Position of the base of the text corresponding to the shown completions.
This variable is used in the *Completions* buffers.
Its value is a list of the form (START END) where START is the place
where the completion should be inserted and END (if non-nil) is the end
of the text to replace.  If END is nil, point is used instead.") nil [330267 330637])
            ("completion-list-insert-choice-function" variable
               (:documentation "Function to use to insert the text chosen in *Completions*.
Called with three arguments (BEG END TEXT), it should replace the text
between BEG and END with TEXT.  Expected to be set buffer-locally
in the *Completions* buffer."
                :default-value nil)
                nil [330639 330938])
            ("completion-base-size" variable (:documentation "Number of chars before point not involved in completion.
This is a local variable in the completion list buffer.
It refers to the chars in the minibuffer if completing in the
minibuffer, or in `completion-reference-buffer' otherwise.
Only characters in the field at point are included.

If nil, Emacs determines which part of the tail end of the
buffer's text is involved in completion by comparing the text
directly.") nil [330940 331395])
            ("make-obsolete-variable" code nil nil [331396 331475])
            ("delete-completion-window" function
               (:documentation "Delete the completion list window.
Go to the window from which completion was requested."
                :user-visible-flag t)
                nil [331477 331851])
            ("previous-completion" function
               (:documentation "Move to the previous item in the completion list."
                :user-visible-flag t
                :arguments ("n"))
                nil [331853 331984])
            ("next-completion" function
               (:documentation "Move to the next item in the completion list.
With prefix argument N, move N items (negative N means move backward)."
                :user-visible-flag t
                :arguments ("n"))
                nil [331986 333236])
            ("choose-completion" function
               (:documentation "Choose the completion at point.
If EVENT, use EVENT's position to determine the starting position."
                :user-visible-flag t
                :arguments ("event"))
                nil [333238 335197])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [335281 336119])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [336121 336313])
            ("choose-completion-string-functions" variable (:documentation "Functions that may override the normal insertion of a completion choice.
These functions are called in order with three arguments:
CHOICE - the string to insert in the buffer,
BUFFER - the buffer in which the choice should be inserted,
BASE-POSITION - where to insert the completion.

If a function in the list returns non-nil, that function is supposed
to have inserted the CHOICE in the BUFFER, and possibly exited
the minibuffer; no further functions will be called.

If all functions in the list return nil, that means to use
the default method of inserting the completion in BUFFER.") nil [336315 336954])
            ("choose-completion-string" function
               (:documentation "Switch to BUFFER and insert the completion choice CHOICE.
BASE-POSITION says where to insert the completion.
INSERT-FUNCTION says how to insert the completion and falls
back on `completion-list-insert-choice-function' when nil."
                :arguments ("choice" "buffer" "base-position" "insert-function"))
                nil [336956 340366])
            ("define-derived-mode" code nil nil [340368 340740])
            ("completion-list-mode-finish" function (:documentation "Finish setup of the completions buffer.
Called from `temp-buffer-show-hook'.") nil [340742 340938])
            ("add-hook" code nil nil [340940 341002])
            ("completion-show-help" variable
               (:documentation "Non-nil means show help message in *Completions* buffer."
                :default-value t)
                nil [341066 341217])
            ("completion-setup-function" function nil nil [341348 343330])
            ("add-hook" code nil nil [343332 343392])
            ("define-key" code nil nil [343394 343469])
            ("define-key" code nil nil [343470 343545])
            ("switch-to-completions" function
               (:documentation "Select the completion list window."
                :user-visible-flag t)
                nil [343547 344088])
            ("event-apply-alt-modifier" function
               (:documentation "\\<function-key-map>Add the Alt modifier to the following event.
For example, type \\[event-apply-alt-modifier] & to enter Alt-&."
                :arguments ("_ignore-prompt"))
                nil [344250 344493])
            ("event-apply-super-modifier" function
               (:documentation "\\<function-key-map>Add the Super modifier to the following event.
For example, type \\[event-apply-super-modifier] & to enter Super-&."
                :arguments ("_ignore-prompt"))
                nil [344494 344747])
            ("event-apply-hyper-modifier" function
               (:documentation "\\<function-key-map>Add the Hyper modifier to the following event.
For example, type \\[event-apply-hyper-modifier] & to enter Hyper-&."
                :arguments ("_ignore-prompt"))
                nil [344748 345001])
            ("event-apply-shift-modifier" function
               (:documentation "\\<function-key-map>Add the Shift modifier to the following event.
For example, type \\[event-apply-shift-modifier] & to enter Shift-&."
                :arguments ("_ignore-prompt"))
                nil [345002 345255])
            ("event-apply-control-modifier" function
               (:documentation "\\<function-key-map>Add the Ctrl modifier to the following event.
For example, type \\[event-apply-control-modifier] & to enter Ctrl-&."
                :arguments ("_ignore-prompt"))
                nil [345256 345513])
            ("event-apply-meta-modifier" function
               (:documentation "\\<function-key-map>Add the Meta modifier to the following event.
For example, type \\[event-apply-meta-modifier] & to enter Meta-&."
                :arguments ("_ignore-prompt"))
                nil [345514 345762])
            ("event-apply-modifier" function
               (:documentation "Apply a modifier flag to event EVENT.
SYMBOL is the name of this modifier, as a symbol.
LSHIFTBY is the numeric value of this modifier, in keyboard events.
PREFIX is the string that represents this modifier in an event type symbol."
                :arguments ("event" "symbol" "lshiftby" "prefix"))
                nil [345764 346800])
            ("define-key" code nil nil [346802 346873])
            ("define-key" code nil nil [346874 346945])
            ("define-key" code nil nil [346946 347016])
            ("define-key" code nil nil [347017 347086])
            ("define-key" code nil nil [347087 347158])
            ("define-key" code nil nil [347159 347232])
            ("mapc" code nil nil [347522 348117])
            ("clone-buffer-hook" variable (:documentation "Normal hook to run in the new buffer at the end of `clone-buffer'.") nil [348169 348270])
            ("clone-indirect-buffer-hook" variable (:documentation "Normal hook to run in the new buffer at the end of `clone-indirect-buffer'.") nil [348272 348391])
            ("clone-process" function
               (:documentation "Create a twin copy of PROCESS.
If NEWNAME is nil, it defaults to PROCESS' name;
NEWNAME is modified by adding or incrementing <N> at the end as necessary.
If PROCESS is associated with a buffer, the new process will be associated
  with the current buffer instead.
Returns nil if PROCESS has already terminated."
                :arguments ("process" "newname"))
                nil [348393 349902])
            ("clone-buffer" function
               (:documentation "Create and return a twin copy of the current buffer.
Unlike an indirect buffer, the new buffer can be edited
independently of the old one (if it is not read-only).
NEWNAME is the name of the new buffer.  It may be modified by
adding or incrementing <N> at the end as necessary to create a
unique buffer name.  If nil, it defaults to the name of the
current buffer, with the proper suffix.  If DISPLAY-FLAG is
non-nil, the new buffer is shown with `pop-to-buffer'.  Trying to
clone a file-visiting buffer, or a buffer whose major mode symbol
has a non-nil `no-clone' property, results in an error.

Interactively, DISPLAY-FLAG is t and NEWNAME is the name of the
current buffer with appropriate suffix.  However, if a prefix
argument is given, then the command prompts for NEWNAME in the
minibuffer.

This runs the normal hook `clone-buffer-hook' in the new buffer
after it has been set up properly in other respects."
                :user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [350005 353114])
            ("clone-indirect-buffer" function
               (:documentation "Create an indirect buffer that is a twin copy of the current buffer.

Give the indirect buffer name NEWNAME.  Interactively, read NEWNAME
from the minibuffer when invoked with a prefix arg.  If NEWNAME is nil
or if not called with a prefix arg, NEWNAME defaults to the current
buffer's name.  The name is modified by adding a `<N>' suffix to it
or by incrementing the N in an existing suffix.  Trying to clone a
buffer whose major mode symbol has a non-nil `no-clone-indirect'
property results in an error.

DISPLAY-FLAG non-nil means show the new buffer with `pop-to-buffer'.
This is always done when called interactively.

Optional third arg NORECORD non-nil means do not put this buffer at the
front of the list of recently selected ones.

Returns the newly created indirect buffer."
                :user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [353117 354757])
            ("clone-indirect-buffer-other-window" function
               (:documentation "Like `clone-indirect-buffer' but display in another window."
                :user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [354760 355243])
            ("normal-erase-is-backspace" variable
               (:documentation "Set the default behavior of the Delete and Backspace keys.

If set to t, Delete key deletes forward and Backspace key deletes
backward.

If set to nil, both Delete and Backspace keys delete backward.

If set to `maybe' (which is the default), Emacs automatically
selects a behavior.  On window systems, the behavior depends on
the keyboard used.  If the keyboard has both a Backspace key and
a Delete key, and both are mapped to their usual meanings, the
option's default value is set to t, so that Backspace can be used
to delete backward, and Delete can be used to delete forward.

If not running under a window system, customizing this option
accomplishes a similar effect by mapping C-h, which is usually
generated by the Backspace key, to DEL, and by mapping DEL to C-d
via `keyboard-translate'.  The former functionality of C-h is
available on the F1 key.  You should probably not use this
setting if you don't have both Backspace, Delete and F1 keys.

Setting this variable with setq doesn't take effect.  Programmatically,
call `normal-erase-is-backspace-mode' (which see) instead."
                :default-value 'maybe)
                nil [355291 356832])
            ("normal-erase-is-backspace-setup-frame" function
               (:documentation "Set up `normal-erase-is-backspace-mode' on FRAME, if necessary."
                :arguments ("frame"))
                nil [356834 357909])
            ("define-minor-mode" code nil nil [357911 361248])
            ("vis-mode-saved-buffer-invisibility-spec" variable (:documentation "Saved value of `buffer-invisibility-spec' when Visible mode is on.") nil [361251 361374])
            ("define-minor-mode" code nil nil [361376 362429])
            ("define-minor-mode" code nil nil [362431 363043])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [363046 363229])
            ("define-derived-mode" code nil nil [363231 363347])
            ("messages-buffer" function (:documentation "Return the \"*Messages*\" buffer.
If it does not exist, create and it switch it to `messages-buffer-mode'.") nil [363349 363636])
            ("bad-packages-alist" variable
               (:documentation "Alist of packages known to cause problems in this version of Emacs.
Each element has the form (PACKAGE SYMBOL REGEXP STRING).
PACKAGE is either a regular expression to match file names, or a
symbol (a feature name), like for `with-eval-after-load'.
SYMBOL is either the name of a string variable, or t.  Upon
loading PACKAGE, if SYMBOL is t or matches REGEXP, display a
warning using STRING as the message."
                :constant-flag t
                :default-value '((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs.")))
                nil [364585 366011])
            ("bad-package-check" function
               (:documentation "Run a check using the element from `bad-packages-alist' matching PACKAGE."
                :arguments ("package"))
                nil [366013 366518])
            ("dolist" code nil nil [366520 366642])
            ("define-alternatives" function
               (:documentation "Define the new command `COMMAND'.

The argument `COMMAND' should be a symbol.

Running `M-x COMMAND RET' for the first time prompts for which
alternative to use and records the selected command as a custom
variable.

Running `C-u M-x COMMAND RET' prompts again for an alternative
and overwrites the previous choice.

The variable `COMMAND-alternatives' contains an alist with
alternative implementations of COMMAND.  `define-alternatives'
does not have any effect until this variable is set.

CUSTOMIZATIONS, if non-nil, should be composed of alternating
`defcustom' keywords and values to add to the declaration of
`COMMAND-alternatives' (typically :group and :version)."
                :arguments ("command" "customizations"))
                nil [367295 369919])
            ("upcase-dwim" function
               (:documentation "Upcase words in the region, if active; if not, upcase word at point.
If the region is active, this function calls `upcase-region'.
Otherwise, it calls `upcase-word', with prefix argument passed to it
to upcase ARG words."
                :user-visible-flag t
                :arguments ("arg"))
                nil [369985 370379])
            ("downcase-dwim" function
               (:documentation "Downcase words in the region, if active; if not, downcase word at point.
If the region is active, this function calls `downcase-region'.
Otherwise, it calls `downcase-word', with prefix argument passed to it
to downcase ARG words."
                :user-visible-flag t
                :arguments ("arg"))
                nil [370381 370793])
            ("capitalize-dwim" function
               (:documentation "Capitalize words in the region, if active; if not, capitalize word at point.
If the region is active, this function calls `capitalize-region'.
Otherwise, it calls `capitalize-word', with prefix argument passed to it
to capitalize ARG words."
                :user-visible-flag t
                :arguments ("arg"))
                nil [370795 371196])
            ("simple" package nil nil [371201 371218]))          
      :file "simple.el.gz"
      :pointmax 371244
      :fsize 100060
      :lastmodtime '(23451 3115 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table-1874714"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable (:documentation "Window-system dependent default frame parameters.
The value should be an alist of elements (WINDOW-SYSTEM . ALIST),
where WINDOW-SYSTEM is a window system symbol (as returned by `framep')
and ALIST is a frame parameter alist like `default-frame-alist'.
Then, for frames on WINDOW-SYSTEM, any parameters specified in
ALIST supersede the corresponding parameters specified in
`default-frame-alist'.") nil [1923 2370])
            ("display-format-alist" variable (:documentation "Alist of patterns to decode display names.
The car of each entry is a regular expression matching a display
name string.  The cdr is a symbol giving the window-system that
handles the corresponding kind of display.") nil [2372 2624])
            ("initial-frame-alist" variable (:documentation "Alist of parameters for the initial X window frame.
You can set this in your init file; for example,

 (setq initial-frame-alist
       \\='((top . 1) (left . 1) (width . 80) (height . 55)))

Parameters specified here supersede the values given in
`default-frame-alist'.

If the value calls for a frame without a minibuffer, and you have
not created a minibuffer frame on your own, a minibuffer frame is
created according to `minibuffer-frame-alist'.

You can specify geometry-related options for just the initial
frame by setting this variable in your init file; however, they
won't take effect until Emacs reads your init file, which happens
after creating the initial frame.  If you want the initial frame
to have the proper geometry as soon as it appears, you need to
use this three-step process:
* Specify X resources to give the geometry you want.
* Set `default-frame-alist' to override these options so that they
  don't affect subsequent frames.
* Set `initial-frame-alist' in a way that matches the X resources,
  to override what you put in `default-frame-alist'.") nil [2816 4049])
            ("minibuffer-frame-alist" variable
               (:documentation "Alist of parameters for the initial minibuffer frame.
This is the minibuffer frame created if `initial-frame-alist'
calls for a frame without a minibuffer.  The parameters specified
here supersede those given in `default-frame-alist', for the
initial minibuffer frame.

You can set this in your init file; for example,

 (setq minibuffer-frame-alist
       \\='((top . 1) (left . 1) (width . 80) (height . 2)))

It is not necessary to include (minibuffer . only); that is
appended when the minibuffer frame is created."
                :default-value '((width . 80) (height . 2)))
                nil [4051 4756])
            ("handle-delete-frame" function
               (:documentation "Handle delete-frame events from the X server."
                :user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("frame-focus-state" function
               (:documentation "Return FRAME's last known focus state.
If nil or omitted, FRAME defaults to the selected frame.

Return nil if the frame is definitely known not be focused, t if
the frame is known to be focused, and `unknown' if we don't know."
                :arguments ("frame"))
                nil [5507 6483])
            ("after-focus-change-function" variable
               (:documentation "Function called after frame focus may have changed.

This function is called with no arguments when Emacs notices that
the set of focused frames may have changed.  Code wanting to do
something when frame focus changes should use `add-function' to
add a function to this one, and in this added function, re-scan
the set of focused frames, calling `frame-focus-state' to
retrieve the last known focus state of each frame.  Focus events
are delivered asynchronously, and frame input focus according to
an external system may not correspond to the notion of the Emacs
selected frame.  Multiple frames may appear to have input focus
simultaneously due to focus event delivery differences, the
presence of multiple Emacs terminals, and other factors, and code
should be robust in the face of this situation.

Depending on window system, focus events may also be delivered
repeatedly and with different focus states before settling to the
expected values.  Code relying on focus notifications should
\"debounce\" any user-visible updates arising from focus changes,
perhaps by deferring work until redisplay.

This function may be called in arbitrary contexts, including from
inside `read-event', so take the same care as you might when
writing a process filter."
                :default-value nil)
                nil [6485 7790])
            ("focus-in-hook" variable (:documentation "Normal hook run when a frame gains focus.
The frame gaining focus is selected at the time this hook is run.

This hook is obsolete.  Despite its name, this hook may be run in
situations other than when a frame obtains input focus: for
example, we also run this hook when switching the selected frame
internally to handle certain input events (like mouse wheel
scrolling) even when the user's notion of input focus
hasn't changed.

Prefer using `after-focus-change-function'.") nil [7792 8297])
            ("make-obsolete-variable" code nil nil [8298 8380])
            ("focus-out-hook" variable (:documentation "Normal hook run when all frames lost input focus.

This hook is obsolete; see `focus-in-hook'.  Depending on timing,
this hook may be delivered when a frame does in fact have focus.
Prefer `after-focus-change-function'.") nil [8382 8633])
            ("make-obsolete-variable" code nil nil [8634 8717])
            ("handle-focus-in" function
               (:documentation "Handle a focus-in event.
Focus-in events are bound to this function; do not change this
binding.  Focus-in events occur when a frame receives focus from
the window system."
                :user-visible-flag t
                :arguments ("event"))
                nil [8719 9345])
            ("handle-focus-out" function
               (:documentation "Handle a focus-out event.
Focus-out events are bound to this function; do not change this
binding.  Focus-out events occur when a frame loses focus, but
that's not the whole story: see `after-focus-change-function'."
                :user-visible-flag t
                :arguments ("event"))
                nil [9347 9980])
            ("handle-move-frame" function
               (:documentation "Handle a move-frame event.
This function runs the abnormal hook `move-frame-functions'."
                :user-visible-flag t
                :arguments ("event"))
                nil [9982 10232])
            ("frame-initial-frame" variable nil nil [10728 10760])
            ("frame-initial-frame-alist" variable nil nil [10839 10873])
            ("frame-initial-geometry-arguments" variable nil nil [10875 10920])
            ("frame-initialize" function (:documentation "Create an initial frame if necessary.") nil [11109 12641])
            ("frame-notice-user-settings" variable
               (:documentation "Non-nil means function `frame-notice-user-settings' wasn't run yet."
                :default-value t)
                nil [12643 12752])
            ("declare-function" code nil nil [12754 12813])
            ("declare-function" code nil nil [12814 12886])
            ("defalias" code nil nil [12888 12938])
            ("frame-notice-user-settings" function (:documentation "Act on user's init file settings of frame parameters.
React to settings of `initial-frame-alist',
`window-system-default-frame-alist' and `default-frame-alist'
there (in decreasing order of priority).") nil [13135 24250])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [24252 24453])
            ("modify-all-frames-parameters" function
               (:documentation "Modify all current and future frames' parameters according to ALIST.
This changes `default-frame-alist' and possibly `initial-frame-alist'.
Furthermore, this function removes all parameters in ALIST from
`window-system-default-frame-alist'.
See help of `modify-frame-parameters' for more information."
                :arguments ("alist"))
                nil [24520 25695])
            ("get-other-frame" function (:documentation "Return some frame other than the current frame.
Create one if necessary.  Note that the minibuffer frame, if separate,
is not considered (see `next-frame').") nil [25697 25955])
            ("next-multiframe-window" function
               (:documentation "Select the next window, regardless of which frame it is on."
                :user-visible-flag t)
                nil [25957 26215])
            ("previous-multiframe-window" function
               (:documentation "Select the previous window, regardless of which frame it is on."
                :user-visible-flag t)
                nil [26217 26481])
            ("window-system-for-display" function
               (:documentation "Return the window system for DISPLAY.
Return nil if we don't know how to interpret DISPLAY."
                :arguments ("display"))
                nil [26483 26978])
            ("make-frame-on-display" function
               (:documentation "Make a frame on display DISPLAY.
The optional argument PARAMETERS specifies additional frame parameters."
                :user-visible-flag t
                :arguments ("display" "parameters"))
                nil [26980 27249])
            ("declare-function" code nil nil [27251 27308])
            ("close-display-connection" function
               (:documentation "Close the connection to a display, deleting all its associated frames.
For DISPLAY, specify either a frame or a display name (a string).
If DISPLAY is nil, that stands for the selected frame's display."
                :user-visible-flag t
                :arguments ("display"))
                nil [27310 28662])
            ("make-frame-command" function
               (:documentation "Make a new frame, on the same terminal as the selected frame.
If the terminal is a text-only terminal, this also selects the
new frame."
                :user-visible-flag t)
                nil [28664 28927])
            ("before-make-frame-hook" variable (:documentation "Functions to run before `make-frame' creates a new frame.") nil [28929 29026])
            ("after-make-frame-functions" variable (:documentation "Functions to run after `make-frame' created a new frame.
The functions are run with one argument, the newly created
frame.") nil [29028 29194])
            ("after-setting-font-hook" variable (:documentation "Functions to run after a frame's font has been changed.") nil [29196 29292])
            ("frame-inherited-parameters" variable
               (:documentation "Parameters `make-frame' copies from the selected to the new frame."
                :default-value 'nil)
                nil [29294 29404])
            ("x-display-name" variable nil nil [29406 29429])
            ("make-frame" function
               (:documentation "Return a newly created frame displaying the current buffer.
Optional argument PARAMETERS is an alist of frame parameters for
the new frame.  Each element of PARAMETERS should have the
form (NAME . VALUE), for example:

 (name . STRING)	The frame should be named STRING.

 (width . NUMBER)	The frame should be NUMBER characters in width.
 (height . NUMBER)	The frame should be NUMBER text lines high.

 (minibuffer . t)	The frame should have a minibuffer.
 (minibuffer . nil)	The frame should have no minibuffer.
 (minibuffer . only)	The frame should contain only a minibuffer.
 (minibuffer . WINDOW)	The frame should use WINDOW as its minibuffer window.

 (window-system . nil)	The frame should be displayed on a terminal device.
 (window-system . x)	The frame should be displayed in an X window.

 (display . \":0\")     The frame should appear on display :0.

 (terminal . TERMINAL)  The frame should use the terminal object TERMINAL.

In addition, any parameter specified in `default-frame-alist',
but not present in PARAMETERS, is applied.

Before creating the frame (via `frame-creation-function'), this
function runs the hook `before-make-frame-hook'.  After creating
the frame, it runs the hook `after-make-frame-functions' with one
argument, the newly created frame.

If a display parameter is supplied and a window-system is not,
guess the window-system from the display.

On graphical displays, this function does not itself make the new
frame the selected frame.  However, the window system may select
the new frame according to its own rules."
                :user-visible-flag t
                :arguments ("parameters"))
                nil [29431 33342])
            ("filtered-frame-list" function
               (:documentation "Return a list of all live frames which satisfy PREDICATE."
                :arguments ("predicate"))
                nil [33344 33643])
            ("minibuffer-frame-list" function (:documentation "Return a list of all frames with their own minibuffers.") nil [33645 33838])
            ("get-device-terminal" function
               (:documentation "Return the terminal corresponding to DEVICE.
DEVICE can be a terminal, a frame, nil (meaning the selected frame's terminal),
the name of an X display device (HOST.SERVER.SCREEN) or a tty device file."
                :arguments ("device"))
                nil [33890 34643])
            ("frames-on-display-list" function
               (:documentation "Return a list of all frames on DEVICE.

DEVICE should be a terminal, a frame,
or a name of an X display or tty (a string of the form
HOST:SERVER.SCREEN).

If DEVICE is omitted or nil, it defaults to the selected
frame's terminal device."
                :arguments ("device"))
                nil [34645 35087])
            ("framep-on-display" function
               (:documentation "Return the type of frames on TERMINAL.
TERMINAL may be a terminal id, a display name or a frame.  If it
is a frame, its type is returned.  If TERMINAL is omitted or nil,
it defaults to the selected frame's terminal device.  All frames
on a given display are of the same type."
                :arguments ("terminal"))
                nil [35089 35528])
            ("frame-remove-geometry-params" function
               (:documentation "Return the parameter list PARAM-LIST, but with geometry specs removed.
This deletes all bindings in PARAM-LIST for `top', `left', `width',
`height', `user-size' and `user-position' parameters.
Emacs uses this to avoid overriding explicit moves and resizings from
the user during startup."
                :arguments ("param-list"))
                nil [35530 36391])
            ("declare-function" code nil nil [36393 36464])
            ("select-frame-set-input-focus" function
               (:documentation "Select FRAME, raise it, and set input focus, if possible.
If `mouse-autoselect-window' is non-nil, also move mouse pointer
to FRAME's selected window.  Otherwise, if `focus-follows-mouse'
is non-nil, move mouse cursor to FRAME.

Optional argument NORECORD means to neither change the order of
recently selected windows nor the buffer list."
                :arguments ("frame" "norecord"))
                nil [36466 37576])
            ("other-frame" function
               (:documentation "Select the ARGth different visible frame on current display, and raise it.
All frames are arranged in a cyclic order.
This command selects the frame ARG steps away in that order.
A negative ARG moves in the opposite order.

To make this command work properly, you must tell Emacs how the
system (or the window manager) generally handles focus-switching
between windows.  If moving the mouse onto a window selects
it (gives it focus), set `focus-follows-mouse' to t.  Otherwise,
that variable should be nil."
                :user-visible-flag t
                :arguments ("arg"))
                nil [37578 38688])
            ("iconify-or-deiconify-frame" function
               (:documentation "Iconify the selected frame, or deiconify if it's currently an icon."
                :user-visible-flag t)
                nil [38690 38920])
            ("suspend-frame" function
               (:documentation "Do whatever is right to suspend the current frame.
Calls `suspend-emacs' if invoked from the controlling tty device,
`suspend-tty' from a secondary tty device, and
`iconify-or-deiconify-frame' from an X frame."
                :user-visible-flag t)
                nil [38922 39399])
            ("make-frame-names-alist" function nil nil [39401 39807])
            ("frame-name-history" variable nil nil [39809 39840])
            ("select-frame-by-name" function
               (:documentation "Select the frame whose name is NAME and raise it.
Frames on the current terminal are checked first.
If there is no frame by that name, signal an error."
                :user-visible-flag t
                :arguments ("name"))
                nil [39841 40686])
            ("frame-background-mode" variable (:documentation "The brightness of the background.
Set this to the symbol `dark' if your background color is dark,
`light' if your background is light, or nil (automatic by default)
if you want Emacs to examine the brightness for you.

If you change this without using customize, you should use
`frame-set-background-mode' to update existing frames;
e.g. (mapc \\='frame-set-background-mode (frame-list)).") nil [40713 41389])
            ("declare-function" code nil nil [41391 41485])
            ("declare-function" code nil nil [41530 41600])
            ("inhibit-frame-set-background-mode" variable nil nil [41602 41648])
            ("frame-set-background-mode" function
               (:documentation "Set up display-dependent faces on FRAME.
Display-dependent faces are those which have different definitions
according to the `background-mode' and `display-type' frame parameters.

If optional arg KEEP-FACE-SPECS is non-nil, don't recalculate
face specs for the new background mode."
                :arguments ("frame" "keep-face-specs"))
                nil [41650 44548])
            ("frame-terminal-default-bg-mode" function
               (:documentation "Return the default background mode of FRAME.
This checks the `frame-background-mode' variable, the X resource
named \"backgroundMode\" (if FRAME is an X frame), and finally
the `background-mode' terminal parameter."
                :arguments ("frame"))
                nil [44550 45066])
            ("current-frame-configuration" function (:documentation "Return a list describing the positions and states of all frames.
Its car is `frame-configuration'.
Each element of the cdr is a list of the form (FRAME ALIST WINDOW-CONFIG),
where
  FRAME is a frame object,
  ALIST is an association list specifying some of FRAME's parameters, and
  WINDOW-CONFIG is a window configuration object for FRAME.") nil [45097 45693])
            ("set-frame-configuration" function
               (:documentation "Restore the frames to the state described by CONFIGURATION.
Each frame listed in CONFIGURATION has its position, size, window
configuration, and other parameters set as specified in CONFIGURATION.
However, this function does not restore deleted frames.

Ordinarily, this function deletes all existing frames not
listed in CONFIGURATION.  But if optional second argument NODELETE
is given and non-nil, the unwanted frames are iconified instead."
                :arguments ("configuration" "nodelete"))
                nil [45695 47690])
            ("frame-height" function
               (:documentation "Return number of lines available for display on FRAME.
If FRAME is omitted, describe the currently selected frame.
Exactly what is included in the return value depends on the
window-system and toolkit in use - see `frame-pixel-height' for
more details.  The lines are in units of the default font height.

The result is roughly related to the frame pixel height via
height in pixels = height in lines * `frame-char-height'.
However, this is only approximate, and is complicated e.g. by the
fact that individual window lines and menu bar lines can have
differing font heights."
                :arguments ("frame"))
                nil [47785 48451])
            ("frame-width" function
               (:documentation "Return number of columns available for display on FRAME.
If FRAME is omitted, describe the currently selected frame."
                :arguments ("frame"))
                nil [48453 48658])
            ("defalias" code nil nil [48660 48719])
            ("defalias" code nil nil [48720 48769])
            ("defalias" code nil nil [48770 48821])
            ("frame-inner-width" function
               (:documentation "Return inner width of FRAME in pixels.
FRAME defaults to the selected frame."
                :arguments ("frame"))
                nil [48823 49073])
            ("frame-inner-height" function
               (:documentation "Return inner height of FRAME in pixels.
FRAME defaults to the selected frame."
                :arguments ("frame"))
                nil [49075 49328])
            ("frame-outer-width" function
               (:documentation "Return outer width of FRAME in pixels.
FRAME defaults to the selected frame."
                :arguments ("frame"))
                nil [49330 49587])
            ("frame-outer-height" function
               (:documentation "Return outer height of FRAME in pixels.
FRAME defaults to the selected frame."
                :arguments ("frame"))
                nil [49589 49848])
            ("declare-function" code nil nil [49850 49955])
            ("set-frame-font" function
               (:documentation "Set the default font to FONT.
When called interactively, prompt for the name of a font, and use
that font on the selected frame.  When called from Lisp, FONT
should be a font name (a string), a font object, font entity, or
font spec.

If KEEP-SIZE is nil, keep the number of frame lines and columns
fixed.  If KEEP-SIZE is non-nil (or with a prefix argument), try
to keep the current frame size fixed (in pixels) by adjusting the
number of lines and columns.

If FRAMES is nil, apply the font to the selected frame only.
If FRAMES is non-nil, it should be a list of frames to act upon,
or t meaning all existing graphical frames.
Also, if FRAMES is non-nil, alter the user's Customization settings
as though the font-related attributes of the `default' face had been
\"set in this session\", so that the font is applied to future frames."
                :user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [49957 53273])
            ("set-frame-parameter" function
               (:documentation "Set frame parameter PARAMETER to VALUE on FRAME.
If FRAME is nil, it defaults to the selected frame.
See `modify-frame-parameters'."
                :arguments ("frame" "parameter" "value"))
                nil [53275 53526])
            ("set-background-color" function
               (:documentation "Set the background color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current background color, use `frame-parameters'."
                :user-visible-flag t
                :arguments ("color-name"))
                nil [53528 54273])
            ("set-foreground-color" function
               (:documentation "Set the foreground color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current foreground color, use `frame-parameters'."
                :user-visible-flag t
                :arguments ("color-name"))
                nil [54275 55020])
            ("set-cursor-color" function
               (:documentation "Set the text cursor color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
This works by setting the `cursor-color' frame parameter on the
selected frame.

You can also set the text cursor color, for all frames, by
customizing the `cursor' face."
                :user-visible-flag t
                :arguments ("color-name"))
                nil [55022 55508])
            ("set-mouse-color" function
               (:documentation "Set the color of the mouse pointer of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current mouse color, use `frame-parameters'."
                :user-visible-flag t
                :arguments ("color-name"))
                nil [55510 55976])
            ("set-border-color" function
               (:documentation "Set the color of the border of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current border color, use `frame-parameters'."
                :user-visible-flag t
                :arguments ("color-name"))
                nil [55978 56360])
            ("define-minor-mode" code nil nil [56362 57081])
            ("define-minor-mode" code nil nil [57083 57763])
            ("set-frame-name" function
               (:documentation "Set the name of the selected frame to NAME.
When called interactively, prompt for the name of the frame.
On text terminals, the frame name is displayed on the mode line.
On graphical displays, it is displayed on the frame's title bar."
                :user-visible-flag t
                :arguments ("name"))
                nil [57765 58141])
            ("frame-current-scroll-bars" function
               (:documentation "Return the current scroll-bar types for frame FRAME.
Value is a cons (VERTICAL . HORIZ0NTAL) where VERTICAL specifies
the current location of the vertical scroll-bars (`left', `right'
or nil), and HORIZONTAL specifies the current location of the
horizontal scroll bars (`bottom' or nil).  FRAME must specify a
live frame and defaults to the selected one."
                :arguments ("frame"))
                nil [58143 58865])
            ("declare-function" code nil nil [58867 58929])
            ("declare-function" code nil nil [58930 58996])
            ("declare-function" code nil nil [58997 59061])
            ("frame-geometry" function
               (:documentation "Return geometric attributes of FRAME.
FRAME must be a live frame and defaults to the selected one.  The return
value is an association list of the attributes listed below.  All height
and width values are in pixels.

`outer-position' is a cons of the outer left and top edges of FRAME
  relative to the origin - the position (0, 0) - of FRAME's display.

`outer-size' is a cons of the outer width and height of FRAME.  The
  outer size includes the title bar and the external borders as well as
  any menu and/or tool bar of frame.

`external-border-size' is a cons of the horizontal and vertical width of
  FRAME's external borders as supplied by the window manager.

`title-bar-size' is a cons of the width and height of the title bar of
  FRAME as supplied by the window manager.  If both of them are zero,
  FRAME has no title bar.  If only the width is zero, Emacs was not
  able to retrieve the width information.

`menu-bar-external', if non-nil, means the menu bar is external (never
  included in the inner edges of FRAME).

`menu-bar-size' is a cons of the width and height of the menu bar of
  FRAME.

`tool-bar-external', if non-nil, means the tool bar is external (never
  included in the inner edges of FRAME).

`tool-bar-position' tells on which side the tool bar on FRAME is and can
  be one of `left', `top', `right' or `bottom'.  If this is nil, FRAME
  has no tool bar.

`tool-bar-size' is a cons of the width and height of the tool bar of
  FRAME.

`internal-border-width' is the width of the internal border of
  FRAME."
                :arguments ("frame"))
                nil [59063 61542])
            ("frame--size-history" function
               (:documentation "Print history of resize operations for FRAME.
Print prettified version of `frame-size-history' into a buffer
called *frame-size-history*.  Optional argument FRAME denotes the
frame whose history will be printed.  FRAME defaults to the
selected frame."
                :arguments ("frame"))
                nil [61544 62372])
            ("declare-function" code nil nil [62374 62438])
            ("declare-function" code nil nil [62439 62507])
            ("declare-function" code nil nil [62508 62574])
            ("frame-edges" function
               (:documentation "Return coordinates of FRAME's edges.
FRAME must be a live frame and defaults to the selected one.  The
list returned has the form (LEFT TOP RIGHT BOTTOM) where all
values are in pixels relative to the origin - the position (0, 0)
- of FRAME's display.  For terminal frames all values are
relative to LEFT and TOP which are both zero.

Optional argument TYPE specifies the type of the edges.  TYPE
`outer-edges' means to return the outer edges of FRAME.  TYPE
`native-edges' (or nil) means to return the native edges of
FRAME.  TYPE `inner-edges' means to return the inner edges of
FRAME."
                :arguments ("frame" "type"))
                nil [62576 63562])
            ("declare-function" code nil nil [63564 63627])
            ("declare-function" code nil nil [63628 63687])
            ("declare-function" code nil nil [63688 63749])
            ("mouse-absolute-pixel-position" function (:documentation "Return absolute position of mouse cursor in pixels.
The position is returned as a cons cell (X . Y) of the
coordinates of the mouse cursor position in pixels relative to a
position (0, 0) of the selected frame's terminal.") nil [63751 64301])
            ("declare-function" code nil nil [64303 64374])
            ("declare-function" code nil nil [64375 64448])
            ("declare-function" code nil nil [64449 64518])
            ("set-mouse-absolute-pixel-position" function
               (:documentation "Move mouse pointer to absolute pixel position (X, Y).
The coordinates X and Y are interpreted in pixels relative to a
position (0, 0) of the selected frame's terminal."
                :arguments ("x" "y"))
                nil [64520 65021])
            ("frame-monitor-attributes" function
               (:documentation "Return the attributes of the physical monitor dominating FRAME.
If FRAME is omitted or nil, describe the currently selected frame.

A frame is dominated by a physical monitor when either the
largest area of the frame resides in the monitor, or the monitor
is the closest to the frame if the frame does not intersect any
physical monitors.

See `display-monitor-attributes-list' for the list of attribute
keys and their meanings."
                :arguments ("frame"))
                nil [65023 65713])
            ("frame-monitor-attribute" function
               (:documentation "Return the value of ATTRIBUTE on FRAME's monitor.
If FRAME is omitted or nil, use currently selected frame.

By default, the current monitor is the physical monitor
dominating the selected frame.  A frame is dominated by a
physical monitor when either the largest area of the frame
resides in the monitor, or the monitor is the closest to the
frame if the frame does not intersect any physical monitors.

If X and Y are both numbers, then ignore the value of FRAME; the
monitor is determined to be the physical monitor that contains
the pixel coordinate (X, Y).

See `display-monitor-attributes-list' for the list of attribute
keys and their meanings."
                :arguments ("attribute" "frame" "x" "y"))
                nil [65715 67057])
            ("frame-monitor-geometry" function
               (:documentation "Return the geometry of FRAME's monitor.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use the currently selected frame.

By default, the current monitor is said to be the physical
monitor dominating the selected frame.  A frame is dominated by
a physical monitor when either the largest area of the frame resides
in the monitor, or the monitor is the closest to the frame if the
frame does not intersect any physical monitors.

If X and Y are both numbers, then ignore the value of FRAME; the
monitor is determined to be the physical monitor that contains
the pixel coordinate (X, Y).

See `display-monitor-attributes-list' for information on the
geometry attribute."
                :arguments ("frame" "x" "y"))
                nil [67059 67870])
            ("frame-monitor-workarea" function
               (:documentation "Return the workarea of FRAME's monitor.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame.

By default, the current monitor is said to be the physical
monitor dominating the selected frame.  A frame is dominated by
a physical monitor when either the largest area of the frame resides
in the monitor, or the monitor is the closest to the frame if the
frame does not intersect any physical monitors.

If X and Y are both numbers, then ignore the value of FRAME; the
monitor is determined to be the physical monitor that contains
the pixel coordinate (X, Y).

See `display-monitor-attributes-list' for information on the
workarea attribute."
                :arguments ("frame" "x" "y"))
                nil [67872 68677])
            ("declare-function" code nil nil [68679 68747])
            ("declare-function" code nil nil [68748 68820])
            ("declare-function" code nil nil [68821 68891])
            ("frame-list-z-order" function
               (:documentation "Return list of Emacs' frames, in Z (stacking) order.
The optional argument DISPLAY specifies which display to poll.
DISPLAY should be either a frame or a display name (a string).
If omitted or nil, that stands for the selected frame's display.

Frames are listed from topmost (first) to bottommost (last).  As
a special case, if DISPLAY is non-nil and specifies a live frame,
return the child frames of that frame in Z (stacking) order.

Return nil if DISPLAY contains no Emacs frame."
                :arguments ("display"))
                nil [68893 69685])
            ("declare-function" code nil nil [69687 69762])
            ("declare-function" code nil nil [69763 69842])
            ("declare-function" code nil nil [69843 69920])
            ("frame-restack" function
               (:documentation "Restack FRAME1 below FRAME2.
This implies that if both frames are visible and the display
areas of these frames overlap, FRAME2 will (partially) obscure
FRAME1.  If the optional third argument ABOVE is non-nil, restack
FRAME1 above FRAME2.  This means that if both frames are visible
and the display areas of these frames overlap, FRAME1 will
(partially) obscure FRAME2.

This may be thought of as an atomic action performed in two
steps: The first step removes FRAME1's window-system window from
the display.  The second step reinserts FRAME1's window
below (above if ABOVE is true) that of FRAME2.  Hence the
position of FRAME2 in its display's Z (stacking) order relative
to all other frames excluding FRAME1 remains unaltered.

Some window managers may refuse to restack windows. "
                :arguments ("frame1" "frame2" "above"))
                nil [69922 71283])
            ("frame-size-changed-p" function
               (:documentation "Return non-nil when the size of FRAME has changed.
More precisely, return non-nil when the inner width or height of
FRAME has changed since `window-size-change-functions' was run
for FRAME."
                :arguments ("frame"))
                nil [71285 72447])
            ("declare-function" code nil nil [72484 72527])
            ("display-mouse-p" function
               (:documentation "Return non-nil if DISPLAY has a mouse available.
DISPLAY can be a display name, a frame, or nil (meaning the selected
frame's display)."
                :arguments ("display"))
                nil [72529 73320])
            ("display-popup-menus-p" function
               (:documentation "Return non-nil if popup menus are supported on DISPLAY.
DISPLAY can be a display name, a frame, or nil (meaning the selected
frame's display).
Support for popup menus requires that the mouse be available."
                :arguments ("display"))
                nil [73322 73608])
            ("display-graphic-p" function
               (:documentation "Return non-nil if DISPLAY is a graphic display.
Graphical displays are those which are capable of displaying several
frames and several different fonts at once.  This is true for displays
that use a window system such as X, and false for text-only terminals.
DISPLAY can be a display name, a frame, or nil (meaning the selected
frame's display)."
                :arguments ("display"))
                nil [73610 74067])
            ("display-images-p" function
               (:documentation "Return non-nil if DISPLAY can display images.

DISPLAY can be a display name, a frame, or nil (meaning the selected
frame's display)."
                :arguments ("display"))
                nil [74069 74347])
            ("defalias" code nil nil [74349 74401])
            ("defalias" code nil nil [74402 74453])
            ("display-selections-p" function
               (:documentation "Return non-nil if DISPLAY supports selections.
A selection is a way to transfer text or other data between programs
via special system buffers called `selection' or `clipboard'.
DISPLAY can be a display name, a frame, or nil (meaning the selected
frame's display)."
                :arguments ("display"))
                nil [74455 75083])
            ("declare-function" code nil nil [75085 75151])
            ("display-screens" function
               (:documentation "Return the number of screens associated with DISPLAY.
DISPLAY should be either a frame or a display name (a string).
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [75153 75542])
            ("declare-function" code nil nil [75544 75615])
            ("display-pixel-height" function
               (:documentation "Return the height of DISPLAY's screen in pixels.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display.

For character terminals, each character counts as a single pixel.

For graphical terminals, note that on \"multi-monitor\" setups this
refers to the pixel height for all physical monitors associated
with DISPLAY.  To get information for each physical monitor, use
`display-monitor-attributes-list'."
                :arguments ("display"))
                nil [75617 76350])
            ("declare-function" code nil nil [76352 76422])
            ("display-pixel-width" function
               (:documentation "Return the width of DISPLAY's screen in pixels.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display.

For character terminals, each character counts as a single pixel.

For graphical terminals, note that on \"multi-monitor\" setups this
refers to the pixel width for all physical monitors associated
with DISPLAY.  To get information for each physical monitor, use
`display-monitor-attributes-list'."
                :arguments ("display"))
                nil [76424 77152])
            ("display-mm-dimensions-alist" variable (:documentation "Alist for specifying screen dimensions in millimeters.
The functions `display-mm-height' and `display-mm-width' consult
this list before asking the system.

Each element has the form (DISPLAY . (WIDTH . HEIGHT)), e.g.
(\":0.0\" . (287 . 215)).

If `display' is t, it specifies dimensions for all graphical displays
not explicitly specified.") nil [77154 77772])
            ("declare-function" code nil nil [77774 77842])
            ("display-mm-height" function
               (:documentation "Return the height of DISPLAY's screen in millimeters.
If the information is unavailable, this function returns nil.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display.

You can override what the system thinks the result should be by
adding an entry to `display-mm-dimensions-alist'.

For graphical terminals, note that on \"multi-monitor\" setups this
refers to the height in millimeters for all physical monitors
associated with DISPLAY.  To get information for each physical
monitor, use `display-monitor-attributes-list'."
                :arguments ("display"))
                nil [77844 78723])
            ("declare-function" code nil nil [78725 78792])
            ("display-mm-width" function
               (:documentation "Return the width of DISPLAY's screen in millimeters.
If the information is unavailable, this function returns nil.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display.

You can override what the system thinks the result should be by
adding an entry to `display-mm-dimensions-alist'.

For graphical terminals, note that on \"multi-monitor\" setups this
refers to the width in millimeters for all physical monitors
associated with DISPLAY.  To get information for each physical
monitor, use `display-monitor-attributes-list'."
                :arguments ("display"))
                nil [78794 79669])
            ("declare-function" code nil nil [79671 79743])
            ("display-backing-store" function
               (:documentation "Return the backing store capability of DISPLAY's screen.
The value may be `always', `when-mapped', `not-useful', or nil if
the question is inapplicable to a certain kind of display.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [79848 80366])
            ("declare-function" code nil nil [80368 80437])
            ("display-save-under" function
               (:documentation "Return non-nil if DISPLAY's screen supports the SaveUnder feature.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [80439 80836])
            ("declare-function" code nil nil [80838 80903])
            ("display-planes" function
               (:documentation "Return the number of planes supported by DISPLAY.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [80905 81346])
            ("declare-function" code nil nil [81348 81418])
            ("display-color-cells" function
               (:documentation "Return the number of color cells supported by DISPLAY.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [81420 81865])
            ("declare-function" code nil nil [81867 81938])
            ("display-visual-class" function
               (:documentation "Return the visual class of DISPLAY.
The value is one of the symbols `static-gray', `gray-scale',
`static-color', `pseudo-color', `true-color', or `direct-color'.
DISPLAY can be a display name or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display."
                :arguments ("display"))
                nil [81940 82530])
            ("declare-function" code nil nil [82532 82618])
            ("declare-function" code nil nil [82619 82708])
            ("declare-function" code nil nil [82709 82797])
            ("display-monitor-attributes-list" function
               (:documentation "Return a list of physical monitor attributes on DISPLAY.
DISPLAY can be a display name, a terminal name, or a frame.
If DISPLAY is omitted or nil, it defaults to the selected frame's display.
Each element of the list represents the attributes of a physical
monitor.  The first element corresponds to the primary monitor.

The attributes for a physical monitor are represented as an alist
of attribute keys and values as follows:

 geometry -- Position and size in pixels in the form of (X Y WIDTH HEIGHT)
 workarea -- Position and size of the work area in pixels in the
	     form of (X Y WIDTH HEIGHT)
 mm-size  -- Width and height in millimeters in the form of
 	     (WIDTH HEIGHT)
 frames   -- List of frames dominated by the physical monitor
 name (*) -- Name of the physical monitor as a string
 source (*) -- Source of multi-monitor information as a string

where X, Y, WIDTH, and HEIGHT are integers.  X and Y are coordinates
of the top-left corner, and might be negative for monitors other than
the primary one.  Keys labeled with (*) are optional.

The \"work area\" is a measure of the \"usable\" display space.
It may be less than the total screen size, owing to space taken up
by window manager features (docks, taskbars, etc.).  The precise
details depend on the platform and environment.

The `source' attribute describes the source from which the information
was obtained.  On X, this may be one of: \"Gdk\", \"XRandr\", \"Xinerama\",
or \"fallback\".

A frame is dominated by a physical monitor when either the
largest area of the frame resides in the monitor, or the monitor
is the closest to the frame if the frame does not intersect any
physical monitors.  Every (non-tooltip) frame (including invisible ones)
in a graphical display is dominated by exactly one physical
monitor at a time, though it can span multiple (or no) physical
monitors."
                :arguments ("display"))
                nil [82799 85324])
            ("frame-geom-value-cons" function
               (:documentation "Return equivalent geometry value for FRAME as a cons with car `+'.
A geometry value equivalent to VALUE for FRAME is returned,
where the value is a cons with car `+', not numeric.
TYPE is the car of the original geometry spec (TYPE . VALUE).
   It is `top' or `left', depending on which edge VALUE is related to.
VALUE is the cdr of a frame geometry spec: (left/top . VALUE).
If VALUE is a number, then it is converted to a cons value, perhaps
   relative to the opposite frame edge from that in the original spec.
FRAME defaults to the selected frame.

Examples (measures in pixels) -
 Assuming display height/width=1024, frame height/width=600:
 300 inside display edge:                   300  => (+  300)
                                        (+  300) => (+  300)
 300 inside opposite display edge:      (-  300) => (+  124)
                                           -300  => (+  124)
 300 beyond display edge
  (= 724 inside opposite display edge): (+ -300) => (+ -300)
 300 beyond display edge
  (= 724 inside opposite display edge): (- -300) => (+  724)

In the 3rd, 4th, and 6th examples, the returned value is relative to
the opposite frame edge from the edge indicated in the input spec."
                :arguments ("type" "value" "frame"))
                nil [85356 87226])
            ("frame-geom-spec-cons" function
               (:documentation "Return equivalent geometry spec for FRAME as a cons with car `+'.
A geometry specification equivalent to SPEC for FRAME is returned,
where the value is a cons with car `+', not numeric.
SPEC is a frame geometry spec: (left . VALUE) or (top . VALUE).
If VALUE is a number, then it is converted to a cons value, perhaps
relative to the opposite frame edge from that in the original spec.
FRAME defaults to the selected frame.

Examples (measures in pixels) -
 Assuming display height=1024, frame height=600:
 top 300 below display top:               (top .  300) => (top +  300)
                                          (top +  300) => (top +  300)
 bottom 300 above display bottom:         (top -  300) => (top +  124)
                                          (top . -300) => (top +  124)
 top 300 above display top
  (= bottom 724 above display bottom):    (top + -300) => (top + -300)
 bottom 300 below display bottom
  (= top 724 below display top):          (top - -300) => (top +  724)

In the 3rd, 4th, and 6th examples, the returned value is relative to
the opposite frame edge from the edge indicated in the input spec."
                :arguments ("spec" "frame"))
                nil [87228 88484])
            ("delete-other-frames" function
               (:documentation "Delete all frames on FRAME's terminal, except FRAME.
If FRAME uses another frame's minibuffer, the minibuffer frame is
left untouched.  Do not delete any of FRAME's child frames.  If
FRAME is a child frame, delete its siblings only.  FRAME must be
a live frame and defaults to the selected one."
                :user-visible-flag t
                :arguments ("frame"))
                nil [88487 90116])
            ("window-divider" customgroup
               (:documentation "Window dividers."
                :user-visible-flag t)
                nil [90141 90244])
            ("window-divider-default-places" variable
               (:documentation "Default positions of window dividers.
Possible values are `bottom-only' (dividers on the bottom of each
window only), `right-only' (dividers on the right of each window
only), and t (dividers on the bottom and on the right of each
window).  The default is `right-only'.

The value takes effect if and only if dividers are enabled by
`window-divider-mode'.

To position dividers on frames individually, use the frame
parameters `bottom-divider-width' and `right-divider-width'."
                :default-value 'right-only)
                nil [90246 91110])
            ("window-divider-width-valid-p" function
               (:documentation "Return non-nil if VALUE is a positive number."
                :arguments ("value"))
                nil [91112 91242])
            ("window-divider-default-bottom-width" variable
               (:documentation "Default width of dividers on bottom of windows.
The value must be a positive integer and takes effect when bottom
dividers are displayed by `window-divider-mode'.

To adjust bottom dividers for frames individually, use the frame
parameter `bottom-divider-width'."
                :default-value 6)
                nil [91244 91894])
            ("window-divider-default-right-width" variable
               (:documentation "Default width of dividers on the right of windows.
The value must be a positive integer and takes effect when right
dividers are displayed by `window-divider-mode'.

To adjust right dividers for frames individually, use the frame
parameter `right-divider-width'."
                :default-value 6)
                nil [91896 92537])
            ("window-divider-mode-apply" function
               (:documentation "Apply window divider places and widths to all frames.
If ENABLE is nil, apply default places and widths.  Else reset
all divider widths to zero."
                :arguments ("enable"))
                nil [92539 93831])
            ("define-minor-mode" code nil nil [93833 94248])
            ("blink-cursor-idle-timer" variable (:documentation "Timer started after `blink-cursor-delay' seconds of Emacs idle time.
The function `blink-cursor-start' is called when the timer fires.") nil [94271 94446])
            ("blink-cursor-timer" variable (:documentation "Timer started from `blink-cursor-start'.
This timer calls `blink-cursor-timer-function' every
`blink-cursor-interval' seconds.") nil [94448 94610])
            ("cursor" customgroup
               (:documentation "Displaying text cursors."
                :user-visible-flag t)
                nil [94612 94697])
            ("blink-cursor-delay" variable
               (:documentation "Seconds of idle time before the first blink of the cursor.
Values smaller than 0.2 sec are treated as 0.2 sec."
                :default-value 0.5)
                nil [94699 95021])
            ("blink-cursor-interval" variable
               (:documentation "Length of cursor blink interval in seconds."
                :default-value 0.5)
                nil [95023 95271])
            ("blink-cursor-blinks" variable
               (:documentation "How many times to blink before using a solid cursor on NS, X, and MS-Windows.
Use 0 or negative value to blink forever."
                :default-value 10)
                nil [95273 95483])
            ("blink-cursor-blinks-done" variable
               (:documentation "Number of blinks done since we started blinking on NS, X, and MS-Windows."
                :default-value 1)
                nil [95485 95598])
            ("blink-cursor--start-idle-timer" function (:documentation "Start the `blink-cursor-idle-timer'.") nil [95600 96148])
            ("blink-cursor--start-timer" function (:documentation "Start the `blink-cursor-timer'.") nil [96150 96435])
            ("blink-cursor-start" function (:documentation "Timer function called from the timer `blink-cursor-idle-timer'.
This starts the timer `blink-cursor-timer', which makes the cursor blink
if appropriate.  It also arranges to cancel that timer when the next
command starts, by installing a pre-command hook.") nil [96437 97040])
            ("blink-cursor-timer-function" function (:documentation "Timer function of timer `blink-cursor-timer'.") nil [97042 97698])
            ("blink-cursor-end" function (:documentation "Stop cursor blinking.
This is installed as a pre-command hook by `blink-cursor-start'.
When run, it cancels the timer `blink-cursor-timer' and removes
itself as a pre-command hook.") nil [97700 98095])
            ("blink-cursor-suspend" function (:documentation "Suspend cursor blinking.
This is called when no frame has focus and timers can be suspended.
Timers are restarted by `blink-cursor-check', which is called when a
frame receives focus.") nil [98097 98452])
            ("blink-cursor--should-blink" function (:documentation "Determine whether we should be blinking.
Returns whether we have any focused non-TTY frame.") nil [98454 98959])
            ("blink-cursor-check" function (:documentation "Check if cursor blinking shall be restarted.
This is done when a frame gets focus.  Blink timers may be
stopped by `blink-cursor-suspend'.  Internally calls
`blink-cursor--should-blink' and returns its result.") nil [98961 99433])
            ("blink-cursor--rescan-frames" function
               (:documentation "Called when the set of focused frames changes or when we delete a frame."
                :arguments ("_ign"))
                nil [99435 99623])
            ("define-minor-mode" code nil nil [99625 100679])
            ("toggle-frame-maximized" function
               (:documentation "Toggle maximization state of FRAME.
Maximize selected frame or un-maximize if it is already maximized.

If the frame is in fullscreen state, don't change its state, but
set the frame's `fullscreen-restore' parameter to `maximized', so
the frame will be maximized after disabling fullscreen state.

Note that with some window managers you may have to set
`frame-resize-pixelwise' to non-nil in order to make a frame
appear truly maximized.  In addition, you may have to set
`x-frame-normalize-before-maximize' in order to enable
transitions from one fullscreen state to another.

See also `toggle-frame-fullscreen'."
                :user-visible-flag t
                :arguments ("frame"))
                nil [100717 101733])
            ("toggle-frame-fullscreen" function
               (:documentation "Toggle fullscreen state of FRAME.
Make selected frame fullscreen or restore its previous size
if it is already fullscreen.

Before making the frame fullscreen remember the current value of
the frame's `fullscreen' parameter in the `fullscreen-restore'
parameter of the frame.  That value is used to restore the
frame's fullscreen state when toggling fullscreen the next time.

Note that with some window managers you may have to set
`frame-resize-pixelwise' to non-nil in order to make a frame
appear truly fullscreen.  In addition, you may have to set
`x-frame-normalize-before-maximize' in order to enable
transitions from one fullscreen state to another.

See also `toggle-frame-maximized'."
                :user-visible-flag t
                :arguments ("frame"))
                nil [101735 103186])
            ("define-key" code nil nil [103209 103257])
            ("define-key" code nil nil [103258 103307])
            ("define-key" code nil nil [103308 103350])
            ("define-key" code nil nil [103351 103392])
            ("define-key" code nil nil [103393 103447])
            ("define-key" code nil nil [103448 103508])
            ("define-key" code nil nil [103509 103569])
            ("define-obsolete-variable-alias" code nil nil [103619 103701])
            ("make-variable-buffer-local" code nil nil [103703 103757])
            ("make-obsolete-variable" code nil nil [103784 103878])
            ("mapc" code nil nil [104279 104866])
            ("frame" package nil nil [104868 104884]))          
      :file "frame.el.gz"
      :pointmax 104909
      :fsize 26434
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table-1874734"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1159 1176])
            ("rectangle" customgroup
               (:documentation "Operations on rectangles."
                :user-visible-flag t)
                nil [1179 1269])
            ("operate-on-rectangle" function
               (:documentation "Call FUNCTION for each line of rectangle with corners at START, END.
If COERCE-TABS is non-nil, convert multi-column characters
that span the starting or ending columns on any line
to multiple spaces before calling FUNCTION.
FUNCTION is called with three arguments:
 position of start of segment of this line within the rectangle,
 number of columns that belong to rectangle but are before that position,
 number of columns that belong to rectangle but are after point.
Point is at the end of the segment of this line within the rectangle."
                :arguments ("function" "start" "end" "coerce-tabs"))
                nil [1338 2617])
            ("defvar-local" code nil nil [2735 2838])
            ("rectangle--pos-cols" function (:arguments ("start" "end" "window")) nil [2840 4473])
            ("rectangle--col-pos" function (:arguments ("col" "kind")) nil [4475 5271])
            ("rectangle--point-col" function (:arguments ("pos")) nil [5273 5453])
            ("rectangle--crutches" function nil nil [5455 5577])
            ("rectangle--reset-crutches" function nil nil [5578 5788])
            ("apply-on-rectangle" function
               (:documentation "Call FUNCTION for each line of rectangle with corners at START, END.
FUNCTION is called with two arguments: the start and end columns of the
rectangle, plus ARGS extra arguments.  Point is at the beginning of line when
the function is called.
The final point after the last operation will be returned."
                :arguments ("function" "start" "end" "args"))
                nil [5817 6946])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [6948 7154])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [7156 7552])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [7721 8685])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value '["" " " "  " "   " "    " "     " "      " "       " "        "])
                nil [8687 8780])
            ("spaces-string" function
               (:documentation "Return a string with N spaces."
                :arguments ("n"))
                nil [8782 8906])
            ("delete-rectangle" function
               (:documentation "Delete (don't save) text in the region-rectangle.
The same range of columns is deleted in each line starting with the
line where the region begins and ending with the line where the region
ends.

When called from a program the rectangle's corners are START and END.
With a prefix (or a FILL) argument, also fill lines where nothing has
to be deleted."
                :user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [8923 9414])
            ("delete-extract-rectangle" function
               (:documentation "Delete the contents of the rectangle with corners at START and END.
Return it as a list of strings, one for each line of the rectangle.

When called from a program the rectangle's corners are START and END.
With an optional FILL argument, also fill lines where nothing has to be
deleted."
                :arguments ("start" "end" "fill"))
                nil [9431 9915])
            ("extract-rectangle" function
               (:documentation "Return the contents of the rectangle with corners at START and END.
Return it as a list of strings, one for each line of the rectangle."
                :arguments ("start" "end"))
                nil [9932 10230])
            ("extract-rectangle-bounds" function
               (:documentation "Return the bounds of the rectangle with corners at START and END.
Return it as a list of (START . END) positions, one for each line of
the rectangle."
                :arguments ("start" "end"))
                nil [10232 10656])
            ("killed-rectangle" variable (:documentation "Rectangle for `yank-rectangle' to insert.") nil [10658 10733])
            ("kill-rectangle" function
               (:documentation "Delete the region-rectangle and save it as the last killed one.

When called from a program the rectangle's corners are START and END.
You might prefer to use `delete-extract-rectangle' from a program.

With a prefix (or a FILL) argument, also fill lines where nothing has to be
deleted.

If the buffer is read-only, Emacs will beep and refrain from deleting
the rectangle, but put it in `killed-rectangle' anyway.  This means that
you can use this command to copy text from a read-only buffer.
(If the variable `kill-read-only-ok' is non-nil, then this won't
even beep.)"
                :user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10750 11818])
            ("copy-rectangle-as-kill" function
               (:documentation "Copy the region-rectangle and save it as the last killed one."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [11835 12154])
            ("yank-rectangle" function
               (:documentation "Yank the last killed rectangle with upper left corner at point."
                :user-visible-flag t)
                nil [12171 12322])
            ("insert-rectangle" function
               (:documentation "Insert text of RECTANGLE with upper left corner at point.
RECTANGLE's first line is inserted at point, its second
line is inserted at a point vertically under point, etc.
RECTANGLE should be a list of strings.
After this command, the mark is at the upper left corner
and point is at the lower right corner."
                :arguments ("rectangle"))
                nil [12339 12996])
            ("open-rectangle" function
               (:documentation "Blank out the region-rectangle, shifting text right.

The text previously in the region is not overwritten by the blanks,
but instead winds up to the right of the rectangle.

When called from a program the rectangle's corners are START and END.
With a prefix (or a FILL) argument, fill with blanks even if there is
no text on the right side of the rectangle."
                :user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [13013 13528])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13530 13733])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [13735 14002])
            ("defalias" code nil nil [14019 14075])
            ("delete-whitespace-rectangle" function
               (:documentation "Delete all whitespace following a specified column in each line.
The left edge of the rectangle specifies the position in each line
at which whitespace deletion should begin.  On each line in the
rectangle, all contiguous whitespace starting at that column is deleted.

When called from a program the rectangle's corners are START and END.
With a prefix (or a FILL) argument, also fill too short lines."
                :user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [14104 14669])
            ("string-rectangle-history" variable nil nil [14671 14708])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [14709 14882])
            ("defvar-local" code nil nil [14884 14934])
            ("defvar-local" code nil nil [14935 14986])
            ("rectangle--string-flush-preview" function nil nil [14988 15155])
            ("rectangle--string-erase-preview" function nil nil [15157 15295])
            ("rectangle--space-to" function (:arguments ("col")) nil [15297 15382])
            ("rectangle-preview" variable
               (:documentation "The face to use for the `string-rectangle' preview."
                :default-value '((t :inherit region))
                :type "face")
                nil [15384 15508])
            ("rectangle-preview" variable
               (:documentation "If non-nil, `string-rectangle' will show an on-the-fly preview."
                :default-value t)
                nil [15510 15644])
            ("rectangle--string-preview" function nil nil [15646 17366])
            ("rectangle--inhibit-region-highlight" variable nil nil [17487 17535])
            ("string-rectangle" function
               (:documentation "Replace rectangle contents with STRING on each line.
The length of STRING need not be the same as the rectangle width.

When called interactively and option `rectangle-preview' is
non-nil, display the result as the user enters the string into
the minibuffer.

Called from a program, takes three args; START, END and STRING."
                :user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [17552 19640])
            ("defalias" code nil nil [19657 19704])
            ("string-insert-rectangle" function
               (:documentation "Insert STRING on each line of region-rectangle, shifting text right.

When called from a program, the rectangle's corners are START and END.
The left edge of the rectangle specifies the column for insertion.
This command does not delete or overwrite any existing text."
                :user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [19721 20393])
            ("clear-rectangle" function
               (:documentation "Blank out the region-rectangle.
The text previously in the region is overwritten with blanks.

When called from a program the rectangle's corners are START and END.
With a prefix (or a FILL) argument, also fill with blanks the parts of the
rectangle which were empty."
                :user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [20410 20816])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [20818 21231])
            ("rectangle-number-line-counter" variable nil nil [21287 21325])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [21327 21558])
            ("rectangle--default-line-number-format" function
               (:documentation "%"
                :arguments ("start" "end" "start-at"))
                nil [21560 21739])
            ("rectangle-number-lines" function
               (:documentation "Insert numbers in front of the region-rectangle.

START-AT, if non-nil, should be a number from which to begin
counting.  FORMAT, if non-nil, should be a format string to pass
to `format' along with the line count.  When called interactively
with a prefix argument, prompt for START-AT and FORMAT."
                :user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [21756 22714])
            ("add-function" code nil nil [22917 23026])
            ("add-function" code nil nil [23027 23140])
            ("add-function" code nil nil [23141 23229])
            ("add-function" code nil nil [23230 23316])
            ("rectangle-mark-mode-map" variable
               (:documentation "Keymap used while marking a rectangular region."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [15] 'open-rectangle) (define-key map [20] 'string-rectangle) (define-key map [remap exchange-point-and-mark] 'rectangle-exchange-point-and-mark) (dolist (cmd '(right-char left-char forward-char backward-char next-line previous-line)) (define-key map (vector 'remap cmd) (intern (format "rectangle-%s" cmd)))) map))
                nil [23318 23834])
            ("define-minor-mode" code nil nil [23851 24272])
            ("rectangle-exchange-point-and-mark" function
               (:documentation "Like `exchange-point-and-mark' but cycles through the rectangle's corners."
                :user-visible-flag t
                :arguments ("arg"))
                nil [24274 25100])
            ("rectangle--*-char" function (:arguments ("cmd" "n" "other-cmd")) nil [25102 26950])
            ("rectangle-right-char" function
               (:documentation "Like `right-char' but steps into wide chars and moves past EOL."
                :user-visible-flag t
                :arguments ("n"))
                nil [26952 27129])
            ("rectangle-left-char" function
               (:documentation "Like `left-char' but steps into wide chars and moves past EOL."
                :user-visible-flag t
                :arguments ("n"))
                nil [27130 27305])
            ("rectangle-forward-char" function
               (:documentation "Like `forward-char' but steps into wide chars and moves past EOL."
                :user-visible-flag t
                :arguments ("n"))
                nil [27307 27494])
            ("rectangle-backward-char" function
               (:documentation "Like `backward-char' but steps into wide chars and moves past EOL."
                :user-visible-flag t
                :arguments ("n"))
                nil [27495 27684])
            ("rectangle-next-line" function
               (:documentation "Like `next-line' but steps into wide chars and moves past EOL.
Ignores `line-move-visual'."
                :user-visible-flag t
                :arguments ("n"))
                nil [27686 27946])
            ("rectangle-previous-line" function
               (:documentation "Like `previous-line' but steps into wide chars and moves past EOL.
Ignores `line-move-visual'."
                :user-visible-flag t
                :arguments ("n"))
                nil [27947 28219])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [28222 29069])
            ("rectangle--insert-region" function (:arguments ("orig" "strings")) nil [29071 29233])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [29235 29632])
            ("rectangle--place-cursor" function (:arguments ("leftcol" "left" "str")) nil [29634 29851])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [29853 35137])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [35139 35333])
            ("rect" package nil nil [35335 35350]))          
      :file "rect.el.gz"
      :pointmax 35374
      :fsize 8771
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1176 . 1177) (symbol 1141 . 1158) (open-paren 1140 . 1141)))
    (semanticdb-table "semanticdb-table-1874754"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [3956 3977])
            ("cl-lib" include nil nil [3978 3995])
            ("button" include nil nil [3996 4013])
            ("man" customgroup
               (:documentation "Browse UNIX manual pages."
                :user-visible-flag t)
                nil [4015 4114])
            ("Man-notify" variable nil nil [4116 4135])
            ("Man-filter-list" variable (:documentation "Manpage cleaning filter command phrases.
This variable contains a list of the following form:

  ((command-string phrase-string*)*)

Each phrase-string is concatenated onto the command-string to form a
command filter.  The (standard) output (and standard error) of the Un*x
man command is piped through each command filter in the order the
commands appear in the association list.  The final output is placed in
the manpage buffer.") nil [4137 4742])
            ("Man-uses-untabify-flag" variable
               (:documentation "Non-nil means use `untabify' instead of `Man-untabify-command'."
                :default-value t)
                nil [4744 4845])
            ("Man-sed-script" variable (:documentation "Script for sed to nuke backspaces and ANSI codes from manpages.") nil [4846 4941])
            ("Man-fontify-manpage-flag" variable
               (:documentation "Non-nil means make up the manpage with fonts."
                :default-value t)
                nil [4943 5062])
            ("Man-overstrike" variable
               (:documentation "Face to use when fontifying overstrike."
                :default-value '((t (:inherit bold)))
                :type "face")
                nil [5064 5189])
            ("Man-underline" variable
               (:documentation "Face to use when fontifying underlining."
                :default-value '((t (:inherit underline)))
                :type "face")
                nil [5191 5321])
            ("Man-reverse" variable
               (:documentation "Face to use when fontifying reverse video."
                :default-value '((t (:inherit highlight)))
                :type "face")
                nil [5323 5453])
            ("Man-ansi-color-map" variable
               (:documentation "The value used here for `ansi-color-map'."
                :default-value (let ((ansi-color-faces-vector [default Man-overstrike default Man-underline Man-underline default default Man-reverse])) (ansi-color-make-color-map)))
                nil [5455 5703])
            ("Man-notify-method" variable
               (:documentation "Selects the behavior when manpage is ready.
This variable may have one of the following values, where (sf) means
that the frames are switched, so the manpage is displayed in the frame
where the man command was called from:

newframe   -- put the manpage in its own frame (see `Man-frame-parameters')
pushy      -- make the manpage the current buffer in the current window
bully      -- make the manpage the current buffer and only window (sf)
aggressive -- make the manpage the current buffer in the other window (sf)
friendly   -- display manpage in the other window but don't make current (sf)
polite     -- don't display manpage, but prints message and beep when ready
quiet      -- like `polite', but don't beep
meek       -- make no indication that the manpage is ready

Any other value of `Man-notify-method' is equivalent to `meek'."
                :default-value (if (boundp 'Man-notify) Man-notify 'friendly))
                nil [5770 6848])
            ("Man-width" variable (:documentation "Number of columns for which manual pages should be formatted.
If nil, use the width of the window where the manpage is displayed.
If non-nil, use the width of the frame where the manpage is displayed.
The value also can be a positive integer for a fixed width.") nil [6850 7306])
            ("Man-frame-parameters" variable (:documentation "Frame parameter list for creating a new frame for a manual page.") nil [7308 7529])
            ("Man-downcase-section-letters-flag" variable
               (:documentation "Non-nil means letters in sections are converted to lower case.
Some Un*x man commands can't handle uppercase letters in sections, for
example \"man 2V chmod\", but they are often displayed in the manpage
with the upper case letter.  When this variable is t, the section
letter (e.g., \"2V\") is converted to lowercase (e.g., \"2v\") before
being sent to the man background process."
                :default-value t)
                nil [7531 7995])
            ("Man-circular-pages-flag" variable
               (:documentation "Non-nil means the manpage list is treated as circular for traversal."
                :default-value t)
                nil [7997 8138])
            ("Man-section-translations-alist" variable
               (:documentation "Association list of bogus sections to real section numbers.
Some manpages (e.g. the Sun C++ 2.1 manpages) have section numbers in
their references which Un*x `man' does not recognize.  This
association list is used to translate those sections, when found, to
the associated section number."
                :default-value (list '("3C++" . "3") '("3X11" . "3") '("1-UCB" . "")))
                nil [8140 8779])
            ("Man-header-file-path" variable
               (:documentation "C Header file search path used in Man."
                :default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil '(t nil) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base '("/usr/include" "/usr/local/include"))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include"))))))
                nil [8819 9473])
            ("Man-name-local-regexp" variable
               (:documentation "Regexp that matches the text that precedes the command's name.
Used in `bookmark-set' to get the default bookmark name."
                :default-value (concat "^" (regexp-opt '("NOM" "NAME")) "$"))
                nil [9475 9729])
            ("manual-program" variable
               (:documentation "Program used by `man' to produce man pages."
                :default-value "man")
                nil [9731 9841])
            ("Man-untabify-command" variable
               (:documentation "Program used by `man' for untabifying."
                :default-value "pr")
                nil [9843 9953])
            ("Man-untabify-command-args" variable
               (:documentation "List of arguments to be passed to `Man-untabify-command' (which see)."
                :default-value (list "-t" "-e"))
                nil [9955 10122])
            ("Man-sed-command" variable
               (:documentation "Program used by `man' to process sed scripts."
                :default-value "sed")
                nil [10124 10237])
            ("Man-awk-command" variable
               (:documentation "Program used by `man' to process awk scripts."
                :default-value "awk")
                nil [10239 10352])
            ("Man-coding-system" variable (:documentation "Coding-system to decode output from the commands run by `man'.
If this is nil, `man' will use `locale-coding-system'.") nil [10510 10720])
            ("Man-mode-hook" variable (:documentation "Hook run when Man mode is enabled.") nil [10722 10818])
            ("Man-cooked-hook" variable (:documentation "Hook run after removing backspaces but before `Man-mode' processing.") nil [10820 10952])
            ("Man-name-regexp" variable
               (:documentation "Regular expression describing the name of a manpage (without section)."
                :default-value "[-[:alnum:]_\302\255+][-[:alnum:]_.:\302\255+]*")
                nil [10954 11089])
            ("Man-section-regexp" variable
               (:documentation "Regular expression describing a manpage section within parentheses."
                :default-value "[0-9][a-zA-Z0-9+]*\\|[LNln]")
                nil [11091 11220])
            ("Man-page-header-regexp" variable
               (:documentation "Regular expression describing the heading of a page."
                :default-value (if (string-match "-solaris2\\." system-configuration) (concat "^[-[:alnum:]_].*[ 	]\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\)$") (concat "^[ 	]*\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\).*\\1")))
                nil [11222 11558])
            ("Man-heading-regexp" variable
               (:documentation "Regular expression describing a manpage heading entry."
                :default-value "^\\([[:upper:]][[:upper:]0-9 /-]+\\)$")
                nil [11560 11686])
            ("Man-see-also-regexp" variable
               (:documentation "Regular expression for SEE ALSO heading (or your equivalent).
This regexp should not start with a `^' character."
                :default-value "\\(SEE ALSO\\|VOIR AUSSI\\|SIEHE AUCH\\|V\303\211ASE TAMBI\303\211N\\|VEJA TAMB\303\211M\\|VEDERE ANCHE\\|ZOBACZ TAK\305\273E\\|\304\260LG\304\260L\304\260 BELGELER\\|\345\217\202\347\205\247\\|\345\217\202\350\247\201 SEE ALSO\\|\345\217\203\350\246\213 SEE ALSO\\)")
                nil [11688 11987])
            ("Man-first-heading-regexp" variable
               (:documentation "Regular expression describing first heading on a manpage.
This regular expression should start with a `^' character."
                :default-value "^NAME$\\|^[ 	]*No manual entry fo.*$")
                nil [12203 12397])
            ("Man-reference-regexp" variable
               (:documentation "Regular expression describing a reference to another manpage."
                :default-value (concat "\\(" Man-name-regexp "\\(\342\200\220?
[ 	]+" Man-name-regexp "\\)*\\)[ 	]*(\\(" Man-section-regexp "\\))"))
                nil [12399 12611])
            ("Man-apropos-regexp" variable
               (:documentation "Regular expression describing a reference to manpages in \"man -k output\"."
                :default-value (concat "\\[\\(" Man-name-regexp "\\)\\][ 	]*(\\(" Man-section-regexp "\\))"))
                nil [12613 12801])
            ("Man-synopsis-regexp" variable
               (:documentation "Regular expression for SYNOPSIS heading (or your equivalent).
This regexp should not start with a `^' character."
                :default-value "SYNOPSIS")
                nil [12803 12959])
            ("Man-files-regexp" variable
               (:documentation "Regular expression for FILES heading (or your equivalent).
This regexp should not start with a `^' character."
                :default-value "FILES\\>")
                nil [12961 13191])
            ("Man-include-regexp" variable
               (:documentation "Regular expression describing the #include (directive of cpp)."
                :default-value "#[ 	]*include[ 	]*")
                nil [13193 13310])
            ("Man-file-name-regexp" variable
               (:documentation "Regular expression describing <> in #include line (directive of cpp)."
                :default-value "[^<>\", 	
]+")
                nil [13312 13432])
            ("Man-normal-file-prefix-regexp" variable
               (:documentation "Regular expression describing a file path appeared in FILES section."
                :default-value "[/~$]")
                nil [13434 13553])
            ("Man-header-regexp" variable
               (:documentation "Regular expression describing references to header files."
                :default-value (concat "\\(" Man-include-regexp "\\)" "[<\"]" "\\(" Man-file-name-regexp "\\)" "[>\"]"))
                nil [13555 13764])
            ("Man-normal-file-regexp" variable
               (:documentation "Regular expression describing references to normal files."
                :default-value (concat Man-normal-file-prefix-regexp Man-file-name-regexp))
                nil [13766 13921])
            ("Man-hyphenated-reference-regexp" variable
               (:documentation "Regular expression describing a reference in the SEE ALSO section."
                :default-value (concat "\\(" Man-name-regexp "\\)\\((\\(" Man-section-regexp "\\))\\)?"))
                nil [14019 14206])
            ("Man-switches" variable (:documentation "Switches passed to the man command, as a single string.
For example, the -a switch lets you see all the manpages for a
specified subject, if your `man' program supports it.") nil [14208 14442])
            ("Man-specified-section-option" variable
               (:documentation "Option that indicates a specified a manual section name."
                :default-value (if (string-match "-solaris[0-9.]*$" system-configuration) "-s" ""))
                nil [14444 14622])
            ("Man-support-local-filenames" variable
               (:documentation "Internal cache for the value of the function `Man-support-local-filenames'.
`auto-detect' means the value is not yet determined.
Otherwise, the value is whatever the function
`Man-support-local-filenames' should return."
                :default-value 'auto-detect)
                nil [14624 14897])
            ("man-imenu-title" variable
               (:documentation "The title to use if man adds a Contents menu to the menubar."
                :default-value "Contents")
                nil [14899 15050])
            ("Man-original-frame" variable nil nil [15100 15127])
            ("make-variable-buffer-local" code nil nil [15128 15176])
            ("Man-arguments" variable nil nil [15177 15199])
            ("make-variable-buffer-local" code nil nil [15200 15243])
            ("put" code nil nil [15244 15283])
            ("Man--sections" variable nil nil [15285 15311])
            ("make-variable-buffer-local" code nil nil [15312 15355])
            ("Man--refpages" variable nil nil [15356 15382])
            ("make-variable-buffer-local" code nil nil [15383 15426])
            ("Man-page-list" variable nil nil [15427 15453])
            ("make-variable-buffer-local" code nil nil [15454 15497])
            ("Man-current-page" variable nil nil [15498 15525])
            ("make-variable-buffer-local" code nil nil [15526 15572])
            ("Man-page-mode-string" variable (:default-value "1 of 1") nil [15573 15611])
            ("make-variable-buffer-local" code nil nil [15612 15662])
            ("Man-sysv-sed-script" variable
               (:documentation "Script for sysV-like sed to nuke backspaces and ANSI codes from manpages."
                :constant-flag t
                :default-value "// {	s/_//g
	s/_//g
        s/o+/o/g
        s/+o/o/g
	:ovstrk
	s/\\(.\\)\\1/\\1/g
	t ovstrk
	}
/\\[[0-9][0-9]*m/ s///g")
                nil [15664 15910])
            ("Man-berkeley-sed-script" variable
               (:documentation "Script for berkeley-like sed to nuke backspaces and ANSI codes from manpages."
                :constant-flag t
                :default-value "// {	s/_//g\\
	s/_//g\\
        s/o+/o/g\\
        s/+o/o/g\\
	:ovstrk\\
	s/\\(.\\)\\1/\\1/g\\
	t ovstrk\\
	}\\
/\\[[0-9][0-9]*m/ s///g")
                nil [15912 16182])
            ("Man-topic-history" variable (:documentation "Topic read history.") nil [16184 16236])
            ("Man-mode-syntax-table" variable
               (:documentation "Syntax table used in Man mode buffers."
                :default-value (let ((table (copy-syntax-table (standard-syntax-table)))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 58 "w" table) table))
                nil [16238 16539])
            ("Man-mode-map" variable
               (:documentation "Keymap for Man mode."
                :default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map "n" 'Man-next-section) (define-key map "p" 'Man-previous-section) (define-key map "n" 'Man-next-manpage) (define-key map "p" 'Man-previous-manpage) (define-key map "." 'beginning-of-buffer) (define-key map "r" 'Man-follow-manual-reference) (define-key map "g" 'Man-goto-section) (define-key map "s" 'Man-goto-see-also-section) (define-key map "k" 'Man-kill) (define-key map "u" 'Man-update-manpage) (define-key map "m" 'man) (define-key map "" 'man-follow) (easy-menu-define nil map "`Man-mode' menu." '("Man" ["Next Section" Man-next-section t] ["Previous Section" Man-previous-section t] ["Go To Section..." Man-goto-section t] ["Go To \"SEE ALSO\" Section" Man-goto-see-also-section :active (cl-member Man-see-also-regexp Man--sections :test #'string-match-p)] ["Follow Reference..." Man-follow-manual-reference :active Man--refpages :help "Go to a manpage referred to in the \"SEE ALSO\" section"] "--" ["Next Manpage" Man-next-manpage :active (> (length Man-page-list) 1)] ["Previous Manpage" Man-previous-manpage :active (> (length Man-page-list) 1)] "--" ["Man..." man t] ["Kill Buffer" Man-kill t] ["Quit" quit-window t])) map))
                nil [16541 18304])
            ("define-button-type" code nil nil [18317 18480])
            ("Man-xref-button-action" function (:arguments ("button")) nil [18482 18763])
            ("define-button-type" code nil nil [18765 18865])
            ("define-button-type" code nil nil [18868 19183])
            ("define-button-type" code nil nil [19185 19563])
            ("Man-init-defvars" function (:documentation "Used for initializing variables based on display's color support.
This is necessary if one wants to dump man.el with Emacs.") nil [19655 22416])
            ("Man-make-page-mode-string" function (:documentation "Formats part of the mode line for Man mode.") nil [22418 22649])
            ("Man-build-man-command" function (:documentation "Builds the entire background manpage and cleaning command.") nil [22651 23738])
            ("Man-translate-cleanup" function
               (:documentation "Strip leading, trailing and middle spaces."
                :arguments ("string"))
                nil [23741 24161])
            ("Man-translate-references" function
               (:documentation "Translates REF from \"chmod(2V)\" to \"2v chmod\" style.
Leave it as is if already in that style.  Possibly downcase and
translate the section (see the `Man-downcase-section-letters-flag'
and the `Man-section-translations-alist' variables)."
                :arguments ("ref"))
                nil [24163 25528])
            ("Man-support-local-filenames" function (:documentation "Return non-nil if the man command supports local filenames.
Different man programs support this feature in different ways.
The default Debian man program (\"man-db\") has a `--local-file'
(or `-l') option for this purpose.  The default Red Hat man
program has no such option, but interprets any name containing
a \"/\" as a local filename.  The function returns either `man-db'
`man', or nil.") nil [25530 26896])
            ("Man-default-man-entry" function
               (:documentation "Guess default manual entry based on the text near position POS.
POS defaults to `point'."
                :arguments ("pos"))
                nil [27017 30523])
            ("defalias" code nil nil [30712 30741])
            ("Man-completion-cache" variable (:documentation "Cache of completion table of the form (PREFIX . TABLE).") nil [30743 30981])
            ("Man-man-k-use-anchor" variable
               (:documentation "If non-nil prepend ^ to the prefix passed to \"man -k\" for completion.
The value should be nil if \"man -k ^PREFIX\" may omit some man
pages whose names start with PREFIX.

Currently, the default value depends on `system-type' and is
non-nil where the standard man programs are known to behave
properly.  Setting the value to nil always gives correct results
but computing the list of completions may take a bit longer."
                :default-value (memq system-type '(gnu gnu/linux gnu/kfreebsd)))
                nil [30983 31511])
            ("Man-parse-man-k" function (:documentation "Parse \"man -k\" output and return the list of page names.

The current buffer should contain the output of a command of the
form \"man -k keyword\", which is traditionally also available with
apropos(1).

While POSIX man(1p) is a bit vague about what to expect here,
this function tries to parse some commonly used formats, which
can be described in the following informal way, with square brackets
indicating optional parts and whitespace being interpreted
somewhat loosely.

foo[, bar [, ...]] [other stuff] (sec) - description
foo(sec)[, bar(sec) [, ...]] [other stuff] - description") nil [31513 33169])
            ("Man-completion-table" function (:arguments ("string" "pred" "action")) nil [33171 36417])
            ("man" function
               (:documentation "Get a Un*x manual page and put it in a buffer.
This command is the top-level command in the man package.
It runs a Un*x command to retrieve and clean a manpage in the
background and places the results in a `Man-mode' browsing
buffer.  The variable `Man-width' defines the number of columns in
formatted manual pages.  The buffer is displayed immediately.
The variable `Man-notify-method' defines how the buffer is displayed.
If a buffer already exists for this man page, it will be displayed
without running the man command.

For a manpage from a particular section, use either of the
following.  \"cat(1)\" is how cross-references appear and is
passed to man as \"1 cat\".

    cat(1)
    1 cat

To see manpages from all sections related to a subject, use an
\"all pages\" option (which might be \"-a\" if it's not the
default), then step through with `Man-next-manpage' (\\<Man-mode-map>\\[Man-next-manpage]) etc.
Add to `Man-switches' to make this option permanent.

    -a chmod

An explicit filename can be given too.  Use -l if it might
otherwise look like a page name.

    /my/file/name.1.gz
    -l somefile.1

An \"apropos\" query with -k gives a buffer of matching page
names or descriptions.  The pattern argument is usually an
\"grep -E\" style regexp.

    -k pattern"
                :user-visible-flag t
                :arguments ("man-args"))
                nil [36434 38770])
            ("man-follow" function
               (:documentation "Get a Un*x manual page of the item under point and put it in a buffer."
                :user-visible-flag t
                :arguments ("man-args"))
                nil [38787 39045])
            ("Man-start-calling" function
               (:documentation "Start the man command in `body' after setting up the environment"
                :arguments ("body"))
                nil [39047 41610])
            ("Man-getpage-in-background" function
               (:documentation "Use TOPIC to build and fire off the manpage and cleaning command.
Return the buffer in which the manpage will appear."
                :arguments ("topic"))
                nil [41612 43363])
            ("Man-update-manpage" function
               (:documentation "Reformat current manpage by calling the man command again synchronously."
                :user-visible-flag t)
                nil [43365 44304])
            ("Man-notify-when-ready" function
               (:documentation "Notify the user when MAN-BUFFER is ready.
See the variable `Man-notify-method' for the different notification behaviors."
                :arguments ("man-buffer"))
                nil [44306 45874])
            ("Man-softhyphen-to-minus" function nil nil [45876 46208])
            ("Man-fontify-manpage" function
               (:documentation "Convert overstriking and underlining to the correct fonts.
Same for the ANSI bold and normal escape sequences."
                :user-visible-flag t)
                nil [46210 48673])
            ("Man-highlight-references" function
               (:documentation "Highlight the references on mouse-over.
References include items in the SEE ALSO section,
header file (#include <foo.h>), and files in FILES.
If optional argument XREF-MAN-TYPE is non-nil, it used as the
button type for items in SEE ALSO section.  If it is nil, the
default type, `Man-xref-man-page' is used for the buttons."
                :arguments ("xref-man-type"))
                nil [48675 49904])
            ("Man-highlight-references0" function (:arguments ("start-section" "regexp" "button-pos" "target" "type")) nil [49906 50701])
            ("Man-cleanup-manpage" function
               (:documentation "Remove overstriking and underlining from the current buffer.
Normally skip any jobs that should have been done by the sed script,
but when called interactively, do those jobs even if the sed
script would have done them."
                :user-visible-flag t
                :arguments ("interactive"))
                nil [50703 51970])
            ("Man-bgproc-filter" function
               (:documentation "Manpage background process filter.
When manpage command is run asynchronously, PROCESS is the process
object for the manpage command; when manpage command is run
synchronously, PROCESS is the name of the buffer where the manpage
command is run.  Second argument STRING is the entire string of output."
                :arguments ("process" "string"))
                nil [51972 52948])
            ("Man-bgproc-sentinel" function
               (:documentation "Manpage background process sentinel.
When manpage command is run asynchronously, PROCESS is the process
object for the manpage command; when manpage command is run
synchronously, PROCESS is the name of the buffer where the manpage
command is run.  Second argument MSG is the exit message of the
manpage command."
                :arguments ("process" "msg"))
                nil [52950 56452])
            ("Man-page-from-arguments" function (:arguments ("args")) nil [56454 56709])
            ("bookmark-make-record-function" variable nil nil [56837 56875])
            ("define-derived-mode" code nil nil [56877 59363])
            ("Man-build-section-list" function (:documentation "Build the list of manpage sections.") nil [59365 59777])
            ("Man-build-references-alist" function (:documentation "Build the list of references (in the SEE ALSO section).") nil [59779 61018])
            ("Man-build-page-list" function (:documentation "Build the list of separate manpages in the buffer.") nil [61020 62156])
            ("Man-strip-page-headers" function (:documentation "Strip all the page headers but the first from the manpage.") nil [62158 63033])
            ("Man-unindent" function (:documentation "Delete the leading spaces that indent the manpage.") nil [63035 64333])
            ("Man-next-section" function
               (:documentation "Move point to Nth next section (default 1)."
                :user-visible-flag t
                :arguments ("n"))
                nil [64433 64996])
            ("Man-previous-section" function
               (:documentation "Move point to Nth previous section (default 1)."
                :user-visible-flag t
                :arguments ("n"))
                nil [64998 65311])
            ("Man-find-section" function
               (:documentation "Move point to SECTION if it exists, otherwise don't move point.
Returns t if section is found, nil otherwise."
                :arguments ("section"))
                nil [65313 65675])
            ("Man--last-section" variable nil nil [65677 65707])
            ("Man-goto-section" function
               (:documentation "Move point to SECTION."
                :user-visible-flag t
                :arguments ("section"))
                nil [65709 66293])
            ("Man-goto-see-also-section" function
               (:documentation "Move point to the \"SEE ALSO\" section.
Actually the section moved to is described by `Man-see-also-regexp'."
                :user-visible-flag t)
                nil [66296 66614])
            ("Man-possibly-hyphenated-word" function (:documentation "Return a possibly hyphenated word at point.
If the word starts at the first non-whitespace column, and the
previous line ends with a hyphen, return the last word on the previous
line instead.  Thus, if a reference to \"tcgetpgrp(3V)\" is hyphenated
as \"tcgetp-grp(3V)\", and point is at \"grp(3V)\", we return
\"tcgetp-\" instead of \"grp\".") nil [66616 67309])
            ("Man--last-refpage" variable nil nil [67311 67341])
            ("Man-follow-manual-reference" function
               (:documentation "Get one of the manpages referred to in the \"SEE ALSO\" section.
Specify which REFERENCE to use; default is based on word at point."
                :user-visible-flag t
                :arguments ("reference"))
                nil [67343 68587])
            ("Man-kill" function
               (:documentation "Kill the buffer containing the manpage."
                :user-visible-flag t)
                nil [68589 68686])
            ("Man-goto-page" function
               (:documentation "Go to the manual page on page PAGE."
                :user-visible-flag t
                :arguments ("page" "noerror"))
                nil [68688 69668])
            ("Man-next-manpage" function
               (:documentation "Find the next manpage entry in the buffer."
                :user-visible-flag t)
                nil [69671 70064])
            ("Man-previous-manpage" function
               (:documentation "Find the previous manpage entry in the buffer."
                :user-visible-flag t)
                nil [70066 70468])
            ("Man-view-header-file" function
               (:documentation "View a header file specified by FILE from `Man-header-file-path'."
                :arguments ("file"))
                nil [70493 70936])
            ("declare-function" code nil nil [70963 71075])
            ("declare-function" code nil nil [71076 71139])
            ("declare-function" code nil nil [71140 71200])
            ("declare-function" code nil nil [71201 71265])
            ("Man-default-bookmark-title" function (:documentation "Default bookmark name for Man or WoMan pages.
Uses `Man-name-local-regexp'.") nil [71267 71592])
            ("Man-bookmark-make-record" function (:documentation "Make a bookmark entry for a Man buffer.") nil [71594 71868])
            ("Man-bookmark-jump" function
               (:documentation "Default bookmark handler for Man buffers."
                :arguments ("bookmark"))
                nil [71885 72536])
            ("Man-init-defvars" code nil nil [72596 72614])
            ("man" package nil nil [72616 72630]))          
      :file "man.el.gz"
      :pointmax 72653
      :fsize 21554
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1874774"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [935 952])
            ("subr-x" include nil nil [972 989])
            ("dom-tag" function
               (:documentation "Return the NODE tag."
                :arguments ("node"))
                nil [992 1149])
            ("dom-attributes" function
               (:documentation "Return the NODE attributes."
                :arguments ("node"))
                nil [1151 1329])
            ("dom-children" function
               (:documentation "Return the NODE children."
                :arguments ("node"))
                nil [1331 1505])
            ("dom-non-text-children" function
               (:documentation "Return all non-text-node children of NODE."
                :arguments ("node"))
                nil [1507 1680])
            ("dom-set-attributes" function
               (:documentation "Set the attributes of NODE to ATTRIBUTES."
                :arguments ("node" "attributes"))
                nil [1682 1842])
            ("dom-set-attribute" function
               (:documentation "Set ATTRIBUTE in NODE to VALUE."
                :arguments ("node" "attribute" "value"))
                nil [1844 2120])
            ("dom-attr" function
               (:documentation "Return the attribute ATTR from NODE.
A typical attribute is `href'."
                :arguments ("node" "attr"))
                nil [2122 2270])
            ("dom-text" function
               (:documentation "Return all the text bits in the current node concatenated."
                :arguments ("node"))
                nil [2272 2434])
            ("dom-texts" function
               (:documentation "Return all textual data under NODE concatenated with SEPARATOR in-between."
                :arguments ("node" "separator"))
                nil [2436 2864])
            ("dom-child-by-tag" function
               (:documentation "Return the first child of DOM that is of type TAG."
                :arguments ("dom" "tag"))
                nil [2866 2988])
            ("dom-by-tag" function
               (:documentation "Return elements in DOM that is of type TAG.
A name is a symbol like `td'."
                :arguments ("dom" "tag"))
                nil [2990 3345])
            ("dom-strings" function
               (:documentation "Return elements in DOM that are strings."
                :arguments ("dom"))
                nil [3347 3542])
            ("dom-by-class" function
               (:documentation "Return elements in DOM that have a class name that matches regexp MATCH."
                :arguments ("dom" "match"))
                nil [3544 3687])
            ("dom-by-style" function
               (:documentation "Return elements in DOM that have a style that matches regexp MATCH."
                :arguments ("dom" "match"))
                nil [3689 3827])
            ("dom-by-id" function
               (:documentation "Return elements in DOM that have an ID that matches regexp MATCH."
                :arguments ("dom" "match"))
                nil [3829 3959])
            ("dom-elements" function
               (:documentation "Find elements matching MATCH (a regexp) in ATTRIBUTE.
ATTRIBUTE would typically be `class', `id' or the like."
                :arguments ("dom" "attribute" "match"))
                nil [3961 4440])
            ("dom-remove-node" function
               (:documentation "Remove NODE from DOM."
                :arguments ("dom" "node"))
                nil [4442 4720])
            ("dom-parent" function
               (:documentation "Return the parent of NODE in DOM."
                :arguments ("dom" "node"))
                nil [4722 5009])
            ("dom-previous-sibling" function
               (:documentation "Return the previous sibling of NODE in DOM."
                :arguments ("dom" "node"))
                nil [5011 5330])
            ("dom-node" function
               (:documentation "Return a DOM node with TAG and ATTRIBUTES."
                :arguments ("tag" "attributes" "children"))
                nil [5332 5516])
            ("dom-append-child" function
               (:documentation "Append CHILD to the end of NODE's children."
                :arguments ("node" "child"))
                nil [5518 5668])
            ("dom-add-child-before" function
               (:documentation "Add CHILD to NODE's children before child BEFORE.
If BEFORE is nil, make CHILD NODE's first child."
                :arguments ("node" "child" "before"))
                nil [5670 6263])
            ("dom-ensure-node" function
               (:documentation "Ensure that NODE is a proper DOM node."
                :arguments ("node"))
                nil [6265 6494])
            ("dom-pp" function
               (:documentation "Pretty-print DOM at point.
If REMOVE-EMPTY, ignore textual nodes that contain just
white-space."
                :arguments ("dom" "remove-empty"))
                nil [6496 7682])
            ("dom" package nil nil [7684 7698]))          
      :file "dom.el.gz"
      :pointmax 7721
      :fsize 2566
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 989 . 990) (symbol 954 . 971) (open-paren 953 . 954)))
    (semanticdb-table "semanticdb-table-1874794"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [6260 6277])
            ("dired" include nil nil [6278 6294])
            ("image-mode" include nil nil [6295 6316])
            ("jka-compr" include nil nil [6317 6337])
            ("subr-x" include nil nil [6357 6374])
            ("doc-view" customgroup
               (:documentation "In-buffer viewer for PDF, PostScript, DVI, and DJVU files."
                :user-visible-flag t)
                nil [6405 6624])
            ("doc-view-ghostscript-program" variable
               (:documentation "Program to convert PS and PDF files to PNG."
                :default-value "gs")
                nil [6626 6752])
            ("doc-view-pdfdraw-program" variable
               (:documentation "Name of MuPDF's program to convert PDF files to PNG."
                :default-value (cond ((executable-find "pdfdraw") "pdfdraw") (t "mudraw")))
                nil [6754 6947])
            ("doc-view-pdf->png-converter-function" variable
               (:documentation "Function to call to convert a PDF file into a PNG file."
                :default-value (if (executable-find doc-view-pdfdraw-program) #'doc-view-pdf->png-converter-mupdf #'doc-view-pdf->png-converter-ghostscript))
                nil [6949 7465])
            ("doc-view-ghostscript-options" variable
               (:documentation "A list of options to give to ghostscript."
                :default-value '("-dSAFER" "-dNOPAUSE" "-sDEVICE=png16m" "-dTextAlphaBits=4" "-dBATCH" "-dGraphicsAlphaBits=4" "-dQUIET"))
                nil [7467 7793])
            ("doc-view-resolution" variable
               (:documentation "Dots per inch resolution used to render the documents.
Higher values result in larger images."
                :default-value 100)
                nil [7795 7963])
            ("doc-view-scale-internally" variable
               (:documentation "Whether we should try to rescale images ourselves.
If nil, the document is re-rendered every time the scaling factor is modified.
This only has an effect if the image libraries linked with Emacs support
scaling."
                :default-value t)
                nil [7965 8255])
            ("doc-view-image-width" variable
               (:documentation "Default image width.
Has only an effect if `doc-view-scale-internally' is non-nil and support for
scaling is compiled into emacs."
                :default-value 850)
                nil [8257 8480])
            ("doc-view-dvipdfm-program" variable
               (:documentation "Program to convert DVI files to PDF.

DVI file will be converted to PDF before the resulting PDF is
converted to PNG.

If this and `doc-view-dvipdf-program' are set,
`doc-view-dvipdf-program' will be preferred."
                :default-value "dvipdfm")
                nil [8482 8776])
            ("doc-view-dvipdf-program" variable
               (:documentation "Program to convert DVI files to PDF.

DVI file will be converted to PDF before the resulting PDF is
converted to PNG.

If this and `doc-view-dvipdfm-program' are set,
`doc-view-dvipdf-program' will be preferred."
                :default-value "dvipdf")
                nil [8778 9071])
            ("define-obsolete-variable-alias" code nil nil [9073 9239])
            ("doc-view-odf->pdf-converter-program" variable
               (:documentation "Program to convert any file type readable by OpenOffice.org to PDF.

Needed for viewing OpenOffice.org (and MS Office) files."
                :default-value (cond ((executable-find "soffice") "soffice") ((executable-find "unoconv") "unoconv") (t "soffice")))
                nil [9241 9581])
            ("doc-view-odf->pdf-converter-function" variable
               (:documentation "Function to call to convert a ODF file into a PDF file."
                :default-value (cond ((string-match "unoconv\\'" doc-view-odf->pdf-converter-program) #'doc-view-odf->pdf-converter-unoconv) ((string-match "soffice\\'" doc-view-odf->pdf-converter-program) #'doc-view-odf->pdf-converter-soffice)))
                nil [9583 10192])
            ("doc-view-ps2pdf-program" variable
               (:documentation "Program to convert PS files to PDF.

PS files will be converted to PDF before searching is possible."
                :default-value "ps2pdf")
                nil [10194 10376])
            ("doc-view-pdftotext-program" variable
               (:documentation "Program to convert PDF files to plain text.

Needed for searching."
                :default-value "pdftotext")
                nil [10378 10532])
            ("doc-view-cache-directory" variable
               (:documentation "The base directory, where the PNG images will be saved."
                :default-value (expand-file-name (format "docview%d" (user-uid)) temporary-file-directory))
                nil [10534 10752])
            ("doc-view-conversion-buffer" variable
               (:documentation "The buffer where messages from the converter programs go to."
                :default-value " *doc-view conversion output*")
                nil [10754 10886])
            ("doc-view-conversion-refresh-interval" variable
               (:documentation "Interval in seconds between refreshes of the DocView buffer while converting.
After such a refresh newly converted pages will be available for
viewing.  If set to nil there won't be any refreshes and the
pages won't be displayed before conversion of the whole document
has finished."
                :default-value 1)
                nil [10888 11261])
            ("doc-view-continuous" variable (:documentation "In Continuous mode reaching the page edge advances to next/previous page.
When non-nil, scrolling a line upward at the bottom edge of the page
moves to the next page, and scrolling a line downward at the top edge
of the page moves to the previous page.") nil [11263 11609])
            ("defvar-local" code nil nil [11636 11718])
            ("doc-view-new-window-function" function (:arguments ("winprops")) nil [11720 13104])
            ("defvar-local" code nil nil [13106 13174])
            ("defvar-local" code nil nil [13176 13244])
            ("defvar-local" code nil nil [13246 13318])
            ("defvar-local" code nil nil [13320 13397])
            ("doc-view--pending-cache-flush" variable (:documentation "Only used internally.") nil [13399 13467])
            ("doc-view--buffer-file-name" variable (:documentation "Only used internally.
The file name used for conversion.  Normally it's the same as
`buffer-file-name', but for remote files, compressed files and
files inside an archive it is a temporary copy of
the (uncompressed, extracted) file residing in
`doc-view-cache-directory'.") nil [13469 13784])
            ("doc-view-doc-type" variable (:documentation "The type of document in the current buffer.
Can be `dvi', `pdf', or `ps'.") nil [13786 13894])
            ("doc-view-single-page-converter-function" variable (:documentation "Function to call to convert a single page of the document to a bitmap file.
May operate on the source document or on some intermediate (typically PDF)
conversion of it.") nil [13896 14121])
            ("defvar-local" code nil nil [14123 14231])
            ("defvar-local" code nil nil [14233 14353])
            ("doc-view-mode-map" variable
               (:documentation "Keymap used by `doc-view-mode' when displaying a doc as a set of images."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map image-mode-map) (define-key map (kbd "n") 'doc-view-next-page) (define-key map (kbd "p") 'doc-view-previous-page) (define-key map (kbd "<next>") 'forward-page) (define-key map (kbd "<prior>") 'backward-page) (define-key map [remap forward-page] 'doc-view-next-page) (define-key map [remap backward-page] 'doc-view-previous-page) (define-key map (kbd "SPC") 'doc-view-scroll-up-or-next-page) (define-key map (kbd "S-SPC") 'doc-view-scroll-down-or-previous-page) (define-key map (kbd "DEL") 'doc-view-scroll-down-or-previous-page) (define-key map (kbd "C-n") 'doc-view-next-line-or-next-page) (define-key map (kbd "<down>") 'doc-view-next-line-or-next-page) (define-key map (kbd "C-p") 'doc-view-previous-line-or-previous-page) (define-key map (kbd "<up>") 'doc-view-previous-line-or-previous-page) (define-key map (kbd "M-<") 'doc-view-first-page) (define-key map (kbd "M->") 'doc-view-last-page) (define-key map [remap goto-line] 'doc-view-goto-page) (define-key map (kbd "RET") 'image-next-line) (define-key map "+" 'doc-view-enlarge) (define-key map "=" 'doc-view-enlarge) (define-key map "-" 'doc-view-shrink) (define-key map "0" 'doc-view-scale-reset) (define-key map [remap text-scale-adjust] 'doc-view-scale-adjust) (define-key map "W" 'doc-view-fit-width-to-window) (define-key map "H" 'doc-view-fit-height-to-window) (define-key map "P" 'doc-view-fit-page-to-window) (define-key map (kbd "K") 'doc-view-kill-proc) (define-key map (kbd "s s") 'doc-view-set-slice) (define-key map (kbd "s m") 'doc-view-set-slice-using-mouse) (define-key map (kbd "s b") 'doc-view-set-slice-from-bounding-box) (define-key map (kbd "s r") 'doc-view-reset-slice) (define-key map (kbd "C-s") 'doc-view-search) (define-key map (kbd "<find>") 'doc-view-search) (define-key map (kbd "C-r") 'doc-view-search-backward) (define-key map (kbd "C-t") 'doc-view-show-tooltip) (define-key map (kbd "C-c C-c") 'doc-view-toggle-display) (define-key map (kbd "C-c C-t") 'doc-view-open-text) (define-key map (kbd "g") 'doc-view-revert-buffer) (define-key map (kbd "r") 'doc-view-revert-buffer) map))
                nil [14377 17456])
            ("doc-view-revert-buffer" function
               (:documentation "Like `revert-buffer', but preserves the buffer's current modes."
                :user-visible-flag t
                :arguments ("ignore-auto" "noconfirm"))
                nil [17458 18684])
            ("easy-menu-define" code nil nil [18687 19522])
            ("doc-view-minor-mode-map" variable
               (:documentation "Keymap used by `doc-minor-view-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-c C-c") 'doc-view-toggle-display) map))
                nil [19524 19761])
            ("doc-view-current-page" function (:arguments ("win")) nil [19789 19875])
            ("doc-view-current-info" function nil nil [19876 19942])
            ("doc-view-current-overlay" function nil nil [19943 20015])
            ("doc-view-current-image" function nil nil [20016 20084])
            ("doc-view-current-slice" function nil nil [20085 20153])
            ("doc-view-last-page-number" function nil nil [20155 20226])
            ("doc-view-goto-page" function
               (:documentation "View the page given by PAGE."
                :user-visible-flag t
                :arguments ("page"))
                nil [20228 22514])
            ("doc-view-next-page" function
               (:documentation "Browse ARG pages forward."
                :user-visible-flag t
                :arguments ("arg"))
                nil [22516 22670])
            ("doc-view-previous-page" function
               (:documentation "Browse ARG pages backward."
                :user-visible-flag t
                :arguments ("arg"))
                nil [22672 22831])
            ("doc-view-first-page" function
               (:documentation "View the first page."
                :user-visible-flag t)
                nil [22833 22929])
            ("doc-view-last-page" function
               (:documentation "View the last page."
                :user-visible-flag t)
                nil [22931 23051])
            ("doc-view-scroll-up-or-next-page" function
               (:documentation "Scroll page up ARG lines if possible, else goto next page.
When `doc-view-continuous' is non-nil, scrolling upward
at the bottom edge of the page moves to the next page.
Otherwise, goto next page only on typing SPC (ARG is nil)."
                :user-visible-flag t
                :arguments ("arg"))
                nil [23053 23720])
            ("doc-view-scroll-down-or-previous-page" function
               (:documentation "Scroll page down ARG lines if possible, else goto previous page.
When `doc-view-continuous' is non-nil, scrolling downward
at the top edge of the page moves to the previous page.
Otherwise, goto previous page only on typing DEL (ARG is nil)."
                :user-visible-flag t
                :arguments ("arg"))
                nil [23722 24416])
            ("doc-view-next-line-or-next-page" function
               (:documentation "Scroll upward by ARG lines if possible, else goto next page.
When `doc-view-continuous' is non-nil, scrolling a line upward
at the bottom edge of the page moves to the next page."
                :user-visible-flag t
                :arguments ("arg"))
                nil [24418 25019])
            ("doc-view-previous-line-or-previous-page" function
               (:documentation "Scroll downward by ARG lines if possible, else goto previous page.
When `doc-view-continuous' is non-nil, scrolling a line downward
at the top edge of the page moves to the previous page."
                :user-visible-flag t
                :arguments ("arg"))
                nil [25021 25651])
            ("doc-view-kill-proc" function
               (:documentation "Kill the current converter process(es)."
                :user-visible-flag t)
                nil [25677 26134])
            ("define-obsolete-function-alias" code nil nil [26136 26228])
            ("doc-view-make-safe-dir" function (:arguments ("dir")) nil [26230 27360])
            ("doc-view--current-cache-dir" function (:documentation "Return the directory where the png files of the current doc should be saved.
It's a subdirectory of `doc-view-cache-directory'.") nil [27362 28570])
            ("doc-view-mode-p" function
               (:documentation "Return non-nil if document type TYPE is available for `doc-view'.
Document types are symbols like `dvi', `ps', `pdf', or `odf' (any
OpenDocument format)."
                :arguments ("type"))
                nil [28587 29523])
            ("doc-view-shrink-factor" variable (:default-value 1.125) nil [29552 29589])
            ("doc-view-enlarge" function
               (:documentation "Enlarge the document by FACTOR."
                :user-visible-flag t
                :arguments ("factor"))
                nil [29591 30367])
            ("doc-view-shrink" function
               (:documentation "Shrink the document."
                :user-visible-flag t
                :arguments ("factor"))
                nil [30369 30508])
            ("doc-view-scale-reset" function
               (:documentation "Reset the document size/zoom level to the initial one."
                :user-visible-flag t)
                nil [30510 30989])
            ("doc-view-scale-adjust" function
               (:documentation "Adjust the scale of the DocView page images by FACTOR.
FACTOR defaults to `doc-view-shrink-factor'.

The actual adjustment made depends on the final component of the
key-binding used to invoke the command, with all modifiers removed:

   +, =   Increase the image scale by FACTOR
   -      Decrease the image scale by FACTOR
   0      Reset the image scale to the initial scale"
                :user-visible-flag t
                :arguments ("factor"))
                nil [30991 31679])
            ("doc-view-fit-width-to-window" function
               (:documentation "Fit the image width to the window width."
                :user-visible-flag t)
                nil [31681 32514])
            ("doc-view-fit-height-to-window" function
               (:documentation "Fit the image height to the window height."
                :user-visible-flag t)
                nil [32516 33587])
            ("doc-view-fit-page-to-window" function
               (:documentation "Fit the image to the window.
More specifically, this function enlarges image by:

min {(window-width / image-width), (window-height / image-height)} times."
                :user-visible-flag t)
                nil [33589 35059])
            ("doc-view-reconvert-doc" function
               (:documentation "Reconvert the current document.
Should be invoked when the cached images aren't up-to-date."
                :user-visible-flag t)
                nil [35061 35461])
            ("doc-view-sentinel" function
               (:documentation "Generic sentinel for doc-view conversion processes."
                :arguments ("proc" "event"))
                nil [35463 36225])
            ("doc-view-start-process" function (:arguments ("name" "program" "args" "callback")) nil [36227 36929])
            ("doc-view-dvi->pdf" function
               (:documentation "Convert DVI to PDF asynchronously and call CALLBACK when finished."
                :arguments ("dvi" "pdf" "callback"))
                nil [36931 37466])
            ("doc-view-pdf->png-converter-ghostscript" function (:arguments ("pdf" "png" "page" "callback")) nil [37468 37859])
            ("defalias" code nil nil [37861 37954])
            ("doc-view-djvu->tiff-converter-ddjvu" function
               (:documentation "Convert PAGE of a DJVU file to bitmap(s) asynchronously.
Call CALLBACK with no arguments when done.
If PAGE is nil, convert the whole document."
                :arguments ("djvu" "tiff" "page" "callback"))
                nil [37956 38519])
            ("doc-view-pdf->png-converter-mupdf" function (:arguments ("pdf" "png" "page" "callback")) nil [38521 38789])
            ("doc-view-odf->pdf-converter-unoconv" function
               (:documentation "Convert ODF to PDF asynchronously and call CALLBACK when finished.
The converted PDF is put into the current cache directory, and it
is named like ODF with the extension turned to pdf."
                :arguments ("odf" "callback"))
                nil [38791 39188])
            ("doc-view-odf->pdf-converter-soffice" function
               (:documentation "Convert ODF to PDF asynchronously and call CALLBACK when finished.
The converted PDF is put into the current cache directory, and it
is named like ODF with the extension turned to pdf."
                :arguments ("odf" "callback"))
                nil [39190 40526])
            ("doc-view-pdf/ps->png" function
               (:documentation "Convert PDF-PS to PNG asynchronously."
                :arguments ("pdf-ps" "png"))
                nil [40528 41774])
            ("declare-function" code nil nil [41776 41841])
            ("doc-view-document->bitmap" function
               (:documentation "Convert a document file to bitmap images asynchronously.
Start by converting PAGES, and then the rest."
                :arguments ("pdf" "png" "pages"))
                nil [41843 43163])
            ("doc-view-pdf->txt" function
               (:documentation "Convert PDF to TXT asynchronously and call CALLBACK when finished."
                :arguments ("pdf" "txt" "callback"))
                nil [43165 43554])
            ("doc-view-current-cache-doc-pdf" function (:documentation "Return the name of the doc.pdf in the current cache dir.
  This file exists only if the current document isn't a PDF or PS file already.") nil [43556 43799])
            ("doc-view-doc->txt" function
               (:documentation "Convert the current document to text and call CALLBACK when done."
                :arguments ("txt" "callback"))
                nil [43801 44831])
            ("doc-view-ps->pdf" function
               (:documentation "Convert PS to PDF asynchronously and call CALLBACK when finished."
                :arguments ("ps" "pdf" "callback"))
                nil [44833 45441])
            ("doc-view-active-pages" function nil nil [45443 45688])
            ("doc-view-convert-current-doc" function (:documentation "Convert `doc-view--buffer-file-name' to a set of png files, one file per page.
Those files are saved in the directory given by the function
`doc-view--current-cache-dir'.") nil [45690 47918])
            ("declare-function" code nil nil [47934 48003])
            ("doc-view-set-slice" function
               (:documentation "Set the slice of the images that should be displayed.
You can use this function to tell doc-view not to display the
margins of the document.  It prompts for the top-left corner (X
and Y) of the slice to display and its WIDTH and HEIGHT.

See `doc-view-set-slice-using-mouse' and
`doc-view-set-slice-from-bounding-box' for more convenient ways
to do that.  To reset the slice use `doc-view-reset-slice'."
                :user-visible-flag t
                :arguments ("x" "y" "width" "height"))
                nil [48005 48931])
            ("doc-view-set-slice-using-mouse" function
               (:documentation "Set the slice of the images that should be displayed.
You set the slice by pressing mouse-1 at its top-left corner and
dragging it to its bottom-right corner.  See also
`doc-view-set-slice' and `doc-view-reset-slice'."
                :user-visible-flag t)
                nil [48933 49686])
            ("doc-view-get-bounding-box" function (:documentation "Get the BoundingBox information of the current page.") nil [49688 50476])
            ("doc-view-paper-sizes" variable
               (:documentation "An alist from paper size names to dimensions."
                :default-value '((a4 595 842) (a4-landscape 842 595) (letter 612 792) (letter-landscape 792 612) (legal 612 1008) (legal-landscape 1008 612) (a3 842 1191) (a3-landscape 1191 842) (tabloid 792 1224) (ledger 1224 792)))
                nil [50478 50797])
            ("doc-view-guess-paper-size" function
               (:documentation "Guess the paper size according to the aspect ratio."
                :arguments ("iw" "ih"))
                nil [50799 51114])
            ("doc-view-scale-bounding-box" function (:arguments ("ps" "iw" "ih" "bb")) nil [51116 51425])
            ("doc-view-set-slice-from-bounding-box" function
               (:documentation "Set the slice from the document's BoundingBox information.
The result is that the margins are almost completely cropped,
much more accurate than could be done manually using
`doc-view-set-slice-using-mouse'."
                :user-visible-flag t
                :arguments ("force-paper-size"))
                nil [51427 52433])
            ("doc-view-reset-slice" function
               (:documentation "Reset the current slice.
After calling this function whole pages will be visible again."
                :user-visible-flag t)
                nil [52435 52674])
            ("doc-view-insert-image" function
               (:documentation "Insert the given png FILE.
ARGS is a list of image descriptors."
                :arguments ("file" "args"))
                nil [52690 55229])
            ("doc-view-sort" function
               (:documentation "Return non-nil if A should be sorted before B.
Predicate for sorting `doc-view--current-files'."
                :arguments ("a" "b"))
                nil [55231 55454])
            ("doc-view-display" function
               (:documentation "Start viewing the document in BUFFER.
If FORCE is non-nil, start viewing even if the document does not
have the page we want to view."
                :arguments ("buffer" "force"))
                nil [55456 56690])
            ("doc-view-buffer-message" function nil nil [56692 57542])
            ("declare-function" code nil nil [57544 57616])
            ("doc-view-show-tooltip" function nil nil [57618 57707])
            ("doc-view-open-text" function
               (:documentation "Display the current doc's contents as text."
                :user-visible-flag t)
                nil [57709 58559])
            ("defvar-local" code nil nil [58603 58699])
            ("put" code nil nil [58700 58749])
            ("doc-view-toggle-display" function
               (:documentation "Toggle between editing a document as text or viewing it."
                :user-visible-flag t)
                nil [58751 59677])
            ("doc-view-search-internal" function
               (:documentation "Return a list of FILE's pages that contain text matching REGEXP.
The value is an alist of the form (PAGE CONTEXTS) where PAGE is
the pagenumber and CONTEXTS are all lines of text containing a match."
                :arguments ("regexp" "file"))
                nil [59696 60708])
            ("doc-view-search-no-of-matches" function
               (:documentation "Extract the number of matches from the search result LIST."
                :arguments ("list"))
                nil [60710 60902])
            ("doc-view-search-backward" function
               (:documentation "Call `doc-view-search' for backward search.
If prefix NEW-QUERY is given, ask for a new regexp."
                :user-visible-flag t
                :arguments ("new-query"))
                nil [60904 61100])
            ("doc-view-search" function
               (:documentation "Jump to the next match or initiate a new search if NEW-QUERY is given.
If the current document hasn't been transformed to plain text
till now do that first.
If BACKWARD is non-nil, jump to the previous match."
                :user-visible-flag t
                :arguments ("new-query" "backward"))
                nil [61102 62225])
            ("doc-view-search-next-match" function
               (:documentation "Go to the ARGth next matching page."
                :user-visible-flag t
                :arguments ("arg"))
                nil [62227 62745])
            ("doc-view-search-previous-match" function
               (:documentation "Go to the ARGth previous matching page."
                :user-visible-flag t
                :arguments ("arg"))
                nil [62747 63291])
            ("put" code nil nil [63336 63377])
            ("doc-view-already-converted-p" function (:documentation "Return non-nil if the current doc was already converted.") nil [63379 63944])
            ("doc-view-initiate-display" function nil nil [63946 65384])
            ("bookmark-make-record-function" variable nil nil [65386 65424])
            ("doc-view-clone-buffer-hook" function nil nil [65426 66188])
            ("doc-view-intersection" function (:arguments ("l1" "l2")) nil [66190 66298])
            ("doc-view-set-doc-type" function (:documentation "Figure out the current document type (`doc-view-doc-type').") nil [66300 67893])
            ("doc-view-set-up-single-converter" function (:documentation "Find the right single-page converter for the current document type") nil [67895 68457])
            ("doc-view-desktop-save-buffer" function (:arguments ("_desktop-dirname")) nil [68486 68806])
            ("declare-function" code nil nil [68808 68924])
            ("doc-view-restore-desktop-buffer" function (:arguments ("file" "name" "misc")) nil [68926 69673])
            ("add-to-list" code nil nil [69675 69775])
            ("doc-view-mode" function
               (:documentation "Major mode in DocView buffers.

DocView Mode is an Emacs document viewer.  It displays PDF, PS
and DVI files (as PNG images) in Emacs buffers.

You can use \\<doc-view-mode-map>\\[doc-view-toggle-display] to
toggle between displaying the document or editing it as text.
\\{doc-view-mode-map}"
                :user-visible-flag t)
                nil [69792 74108])
            ("doc-view-fallback-mode" function (:documentation "Fallback to the previous or next best major mode.") nil [74110 74610])
            ("doc-view-mode-maybe" function (:documentation "Switch to `doc-view-mode' if possible.
If the required external tools are not available, then fallback
to the next best mode.") nil [74627 74971])
            ("define-minor-mode" code nil nil [74988 75478])
            ("doc-view-clear-cache" function
               (:documentation "Delete the whole cache (`doc-view-cache-directory')."
                :user-visible-flag t)
                nil [75480 75639])
            ("doc-view-dired-cache" function
               (:documentation "Open `dired' in `doc-view-cache-directory'."
                :user-visible-flag t)
                nil [75641 75771])
            ("declare-function" code nil nil [75801 75913])
            ("declare-function" code nil nil [75914 75977])
            ("declare-function" code nil nil [75978 76038])
            ("doc-view-bookmark-make-record" function nil nil [76040 76218])
            ("doc-view-bookmark-jump" function (:arguments ("bmk")) nil [76235 76910])
            ("doc-view" package nil nil [76912 76931]))          
      :file "doc-view.el.gz"
      :pointmax 77020
      :fsize 20657
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 6374 . 6375) (symbol 6339 . 6356) (open-paren 6338 . 6339)))
    (semanticdb-table "semanticdb-table-18747b4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1223 1240])
            ("help-mode" include nil nil [1241 1261])
            ("radix-tree" include nil nil [1262 1283])
            ("help-fns-describe-function-functions" variable (:documentation "List of functions to run in help buffer in `describe-function'.
Those functions will be run after the header line and argument
list was inserted, and before the documentation will be inserted.
The functions will receive the function name as argument.") nil [1285 1589])
            ("help-definition-prefixes" variable (:documentation "Radix-tree representation replacing `definition-prefixes'.") nil [1605 2131])
            ("help-definition-prefixes" function (:documentation "Return the up-to-date radix-tree form of `definition-prefixes'.") nil [2133 2688])
            ("help--loaded-p" function
               (:documentation "Try and figure out if FILE has already been loaded."
                :arguments ("file"))
                nil [2690 3044])
            ("help--load-prefixes" function (:arguments ("prefixes")) nil [3046 3636])
            ("help--symbol-completion-table" function (:arguments ("string" "pred" "action")) nil [3638 4143])
            ("describe-function-orig-buffer" variable (:documentation "Buffer that was current when `describe-function' was invoked.
Functions on `help-fns-describe-function-functions' can use this
to get buffer-local values.") nil [4145 4346])
            ("describe-function" function
               (:documentation "Display the full documentation of FUNCTION (a symbol).
When called from lisp, FUNCTION may also be a function object."
                :user-visible-flag t
                :arguments ("function"))
                nil [4363 6458])
            ("help-C-file-name" function
               (:documentation "Return the name of the C file where SUBR-OR-VAR is defined.
KIND should be `var' for a variable or `subr' for a subroutine."
                :arguments ("subr-or-var" "kind"))
                nil [6851 7929])
            ("help-downcase-arguments" variable (:documentation "If non-nil, argument names in *Help* buffers are downcased.") nil [7931 8084])
            ("help-highlight-arg" function
               (:documentation "Highlight ARG as an argument name for a *Help* buffer.
Return ARG in face `help-argument-name'; ARG is also downcased
if the variable `help-downcase-arguments' is non-nil."
                :arguments ("arg"))
                nil [8086 8390])
            ("help-do-arg-highlight" function (:arguments ("doc" "args")) nil [8392 9313])
            ("help-highlight-arguments" function (:arguments ("usage" "doc" "args")) nil [9315 10494])
            ("find-lisp-object-file-name" function
               (:documentation "Guess the file that defined the Lisp object OBJECT, of type TYPE.
OBJECT should be a symbol associated with a function, variable, or face;
  alternatively, it can be a function definition.
If TYPE is `defvar', search for a variable definition.
If TYPE is `defface', search for a face definition.
If TYPE is not a symbol, search for a function definition.

The return value is the absolute name of a readable file where OBJECT is
defined.  If several such files exist, preference is given to a file
found via `load-path'.  The return value can also be `C-source', which
means that OBJECT is a function or variable defined in C.  If no
suitable file is found, return nil."
                :arguments ("object" "type"))
                nil [11134 15295])
            ("help-fns--key-bindings" function (:arguments ("function")) nil [15297 17387])
            ("help-fns--compiler-macro" function (:arguments ("function")) nil [17389 18290])
            ("help-fns--signature" function
               (:documentation "Insert usage at point and return docstring.  With highlighting."
                :arguments ("function" "doc" "real-def" "real-function" "buffer"))
                nil [18292 20843])
            ("help-fns--parent-mode" function (:arguments ("function")) nil [20845 21423])
            ("help-fns--obsolete" function (:arguments ("function")) nil [21425 22043])
            ("help-fns--autoloaded-p" function
               (:documentation "Return non-nil if FUNCTION has previously been autoloaded.
FILE is the file where FUNCTION was probably defined."
                :arguments ("function" "file"))
                nil [22113 22635])
            ("help-fns--interactive-only" function
               (:documentation "Insert some help blurb if FUNCTION should only be used interactively."
                :arguments ("function"))
                nil [22637 23757])
            ("help-fns-short-filename" function (:arguments ("filename")) nil [23759 24170])
            ("help-fns--analyze-function" function
               (:documentation "Return information about FUNCTION.
Returns a list of the form (REAL-FUNCTION DEF ALIASED REAL-DEF)."
                :arguments ("function"))
                nil [24172 25955])
            ("help-fns-function-description-header" function
               (:documentation "Print a line describing FUNCTION to `standard-output'."
                :arguments ("function"))
                nil [25957 29471])
            ("describe-function-1" function (:arguments ("function")) nil [29488 31902])
            ("add-hook" code nil nil [31963 32032])
            ("add-hook" code nil nil [32033 32110])
            ("add-hook" code nil nil [32111 32183])
            ("add-hook" code nil nil [32184 32259])
            ("variable-at-point" function
               (:documentation "Return the bound variable symbol found at or before point.
Return 0 if there is no such symbol.
If ANY-SYMBOL is non-nil, don't insist the symbol be bound."
                :arguments ("any-symbol"))
                nil [32292 33329])
            ("describe-variable-custom-version-info" function (:arguments ("variable")) nil [33331 34241])
            ("describe-variable" function
               (:documentation "Display the full documentation of VARIABLE (a symbol).
Returns the documentation as a string, also.
If VARIABLE has a buffer-local value in BUFFER or FRAME
(default to the current buffer and current frame),
it is displayed along with the global value."
                :user-visible-flag t
                :arguments ("variable" "buffer" "frame"))
                nil [34258 47433])
            ("help-xref-stack-item" variable nil nil [47436 47465])
            ("describe-symbol" function
               (:documentation "Display the full documentation of SYMBOL.
Will show the info of SYMBOL as a function, variable, and/or face.
Optional arguments BUFFER and FRAME specify for which buffer and
frame to show the information about SYMBOL; they default to the
current buffer and the selected frame, respectively."
                :user-visible-flag t
                :arguments ("symbol" "buffer" "frame"))
                nil [47482 50462])
            ("describe-syntax" function
               (:documentation "Describe the syntax specifications in the syntax table of BUFFER.
The descriptions are inserted in a help buffer, which is then displayed.
BUFFER defaults to the current buffer."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [50479 51210])
            ("help-describe-category-set" function (:arguments ("value")) nil [51212 51436])
            ("describe-categories" function
               (:documentation "Describe the category specifications in the current category table.
The descriptions are inserted in a buffer, which is then displayed.
If BUFFER is non-nil, then describe BUFFER's category table instead.
BUFFER should be a buffer or a buffer name."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [51453 53766])
            ("doc-file-to-man" function
               (:documentation "Produce an nroff buffer containing the doc-strings from the DOC file."
                :user-visible-flag t
                :arguments ("file"))
                nil [53895 54912])
            ("doc-file-to-info" function
               (:documentation "Produce a texinfo buffer with sorted doc-strings from the DOC file."
                :user-visible-flag t
                :arguments ("file"))
                nil [54963 57946])
            ("help-fns" package nil nil [57948 57967]))          
      :file "help-fns.el.gz"
      :pointmax 57995
      :fsize 15433
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18747d4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("double" customgroup
               (:documentation "Remap keyboard, but get original by typing the same key twice."
                :user-visible-flag t)
                nil [2103 2206])
            ("double-map" variable
               (:documentation "Alist of key translations activated by double mode.

Each entry is a list with three elements:
1. The key activating the translation.
2. The string to be inserted when the key is pressed once.
3. The string to be inserted when the key is pressed twice."
                :default-value '((59 "\346" ";") (39 "\370" "'") (91 "\345" "[") (58 "\306" ":") (34 "\330" "\"") (123 "\305" "{")))
                nil [2208 2741])
            ("double-prefix-only" variable
               (:documentation "Non-nil means that Double mode mapping only works for prefix keys.
That is, for any key `X' in `double-map', `X' alone will be mapped
but not `C-u X' or `ESC X' since the X is not the prefix key."
                :default-value t)
                nil [2743 3009])
            ("double-last-event" variable nil nil [3027 3057])
            ("double-read-event" function (:arguments ("prompt")) nil [3110 3317])
            ("global-set-key" code nil nil [3319 3352])
            ("or" code nil nil [3354 3414])
            ("define-key" code nil nil [3416 3510])
            ("double-translate-key" function (:arguments ("prompt")) nil [3512 4728])
            ("define-minor-mode" code nil nil [4961 5780])
            ("double" package nil nil [5782 5799]))          
      :file "double.el.gz"
      :pointmax 5825
      :fsize 2498
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d0f14"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("kmacro" include nil nil [1210 1227])
            ("defalias" code nil nil [1244 1300])
            ("insert-kbd-macro" function
               (:documentation "Insert in buffer the definition of kbd macro MACRONAME, as Lisp code.
MACRONAME should be a symbol.
Optional second arg KEYS means also record the keys it is on
(this is the prefix argument, when calling interactively).

This Lisp code will, when executed, define the kbd macro with the same
definition it has now.  If you say to record the keys, the Lisp code
will also rebind those keys to the macro.  Only global key bindings
are recorded since executing this Lisp code always makes global
bindings.

To save a kbd macro, visit a file of Lisp code such as your `~/.emacs',
use this command, and then save the file."
                :user-visible-flag t
                :arguments ("macroname" "keys"))
                nil [1317 4935])
            ("kbd-macro-query" function
               (:documentation "Query user during kbd macro execution.
  With prefix argument, enters recursive edit, reading keyboard
commands even within a kbd macro.  You can give different commands
each time the macro executes.
  Without prefix argument, asks whether to continue running the macro.
Your options are: \\<query-replace-map>
\\[act]	Finish this iteration normally and continue with the next.
\\[skip]	Skip the rest of this iteration, and start the next.
\\[exit]	Stop the macro entirely right now.
\\[recenter]	Redisplay the screen, then ask again.
\\[edit]	Enter recursive edit; ask again when you exit from that."
                :user-visible-flag t
                :arguments ("flag"))
                nil [4952 7223])
            ("apply-macro-to-region-lines" function
               (:documentation "Apply last keyboard macro to all lines in the region.
For each line that begins in the region, move to the beginning of
the line, and run the last keyboard macro.

When called from lisp, this function takes two arguments TOP and
BOTTOM, describing the current region.  TOP must be before BOTTOM.
The optional third argument MACRO specifies a keyboard macro to
execute.

This is useful for quoting or unquoting included text, adding and
removing comments, or producing tables where the entries are regular.

For example, in Usenet articles, sections of text quoted from another
author are indented, or have each line start with `>'.  To quote a
section of text, define a keyboard macro which inserts `>', put point
and mark at opposite ends of the quoted section, and use
`\\[apply-macro-to-region-lines]' to mark the entire section.

Suppose you wanted to build a keyword table in C where each entry
looked like this:

    { \"foo\", foo_data, foo_function },
    { \"bar\", bar_data, bar_function },
    { \"baz\", baz_data, baz_function },

You could enter the names in this format:

    foo
    bar
    baz

and write a macro to massage a word into a table entry:

    \\C-x (
       \\M-d { \"\\C-y\", \\C-y_data, \\C-y_function },
    \\C-x )

and then select the region of un-tablified names and use
`\\[apply-macro-to-region-lines]' to build the table from the names."
                :user-visible-flag t
                :arguments ("top" "bottom" "macro"))
                nil [7240 9345])
            ("macros" package nil nil [9407 9424]))          
      :file "macros.el.gz"
      :pointmax 9450
      :fsize 3320
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d0f34"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("completion" customgroup
               (:documentation "Dynamic word-completion code."
                :user-visible-flag t)
                nil [10613 10713])
            ("enable-completion" variable
               (:documentation "Non-nil means enable recording and saving of completions.
If nil, no new words are added to the database or saved to the init file."
                :default-value t)
                nil [10716 10921])
            ("save-completions-flag" variable
               (:documentation "Non-nil means save most-used completions when exiting Emacs.
See also `save-completions-retention-time'."
                :default-value t)
                nil [10923 11105])
            ("save-completions-file-name" variable
               (:documentation "The filename to save completions to."
                :default-value (locate-user-emacs-file "completions" ".completions"))
                nil [11107 11277])
            ("save-completions-retention-time" variable
               (:documentation "Discard a completion if unused for this many hours.
(1 day = 24, 1 week = 168).  If this is 0, non-permanent completions
will not be saved unless these are used.  Default is two weeks."
                :default-value 336)
                nil [11279 11554])
            ("completion-on-separator-character" variable (:documentation "Non-nil means separator characters mark previous word as used.
This means the word will be saved as a completion.") nil [11556 11761])
            ("completions-file-versions-kept" variable
               (:documentation "Number of versions to keep for the saved completions file."
                :default-value kept-new-versions)
                nil [11763 11924])
            ("completion-prompt-speed-threshold" variable
               (:documentation "Minimum output speed at which to display next potential completion."
                :default-value 4800)
                nil [11926 12086])
            ("completion-cdabbrev-prompt-flag" variable (:documentation "If non-nil, the next completion prompt does a cdabbrev search.
This can be time consuming.") nil [12088 12268])
            ("completion-search-distance" variable
               (:documentation "How far to search in the buffer when looking for completions.
In number of characters.  If nil, search the whole buffer."
                :default-value 15000)
                nil [12270 12477])
            ("completions-merging-modes" variable
               (:documentation "List of modes {`c' or `lisp'} for automatic completions merging.
Definitions from visited files which have these modes
are automatically added to the completion database."
                :default-value '(lisp c))
                nil [12479 12760])
            ("completion-min-length" variable
               (:documentation "The minimum length of a stored completion.
DON'T CHANGE WITHOUT RECOMPILING !  This is used by macros."
                :default-value 6)
                nil [12927 13066])
            ("completion-max-length" variable
               (:documentation "The maximum length of a stored completion.
DON'T CHANGE WITHOUT RECOMPILING !  This is used by macros."
                :default-value 200)
                nil [13068 13209])
            ("completion-prefix-min-length" variable
               (:documentation "The minimum length of a completion search string.
DON'T CHANGE WITHOUT RECOMPILING !  This is used by macros."
                :default-value 3)
                nil [13211 13364])
            ("cmpl-initialized-p" variable (:documentation "Set to t when the completion system is initialized.
Indicates that the old completion file has been read in.") nil [13545 13689])
            ("cmpl-completions-accepted-p" variable (:documentation "Set to t as soon as the first completion has been accepted.
Used to decide whether to save completions.") nil [13691 13839])
            ("cmpl-preceding-syntax" variable nil nil [13841 13871])
            ("cmpl--completion-string" variable nil nil [13873 13905])
            ("cmpl-string-case-type" function
               (:documentation "Return :capitalized, :up, :down, :mixed, or :neither for case of STRING."
                :arguments ("string"))
                nil [14209 14678])
            ("cmpl-coerce-string-case" function (:arguments ("string" "case-type")) nil [14961 15234])
            ("cmpl-merge-string-cases" function (:arguments ("string-to-coerce" "given-string")) nil [15236 15728])
            ("cmpl-hours-since-origin" function nil nil [16004 16066])
            ("completion-standard-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table)) i) (setq i 0) (while (< i 256) (modify-syntax-entry i " " table) (setq i (1+ i))) (setq i 0) (while (< i 26) (modify-syntax-entry (+ 97 i) "_" table) (modify-syntax-entry (+ 65 i) "_" table) (setq i (1+ i))) (setq i 0) (while (< i 10) (modify-syntax-entry (+ 48 i) "_" table) (setq i (1+ i))) (let ((symbol-chars '(64 47 92 42 43 126 36 60 62 37)) (symbol-chars-ignore '(95 45 58 46))) (dolist (char symbol-chars) (modify-syntax-entry char "_" table)) (dolist (char symbol-chars-ignore) (modify-syntax-entry char "w" table))) table))
                nil [18304 19102])
            ("defvaralias" code nil nil [19138 19195])
            ("completion-syntax-table" variable
               (:documentation "This variable holds the current completion syntax table."
                :default-value completion-standard-syntax-table)
                nil [19197 19323])
            ("make-variable-buffer-local" code nil nil [19324 19377])
            ("cmpl-symbol-start" variable (:documentation "Holds first character of symbol, after any completion symbol function.") nil [19499 19604])
            ("cmpl-symbol-end" variable (:documentation "Holds last character of symbol, after any completion symbol function.") nil [19605 19707])
            ("symbol-under-point" function (:documentation "Return the symbol that the point is currently on.
But only if it is longer than `completion-min-length'.") nil [19709 21108])
            ("symbol-before-point" function (:documentation "Return a string of the symbol immediately before point.
Returns nil if there isn't one longer than `completion-min-length'.") nil [21432 23603])
            ("symbol-under-or-before-point" function nil nil [23978 24409])
            ("symbol-before-point-for-complete" function nil nil [24412 25630])
            ("cmpl-source-unknown" variable (:constant-flag t) nil [26434 26466])
            ("cmpl-source-init-file" variable
               (:constant-flag t
                :default-value 1)
                nil [26467 26501])
            ("cmpl-source-file-parsing" variable
               (:constant-flag t
                :default-value 2)
                nil [26502 26539])
            ("cmpl-source-separator" variable
               (:constant-flag t
                :default-value 3)
                nil [26540 26574])
            ("cmpl-source-cursor-moves" variable
               (:constant-flag t
                :default-value 4)
                nil [26575 26612])
            ("cmpl-source-interactive" variable
               (:constant-flag t
                :default-value 5)
                nil [26613 26649])
            ("cmpl-source-cdabbrev" variable
               (:constant-flag t
                :default-value 6)
                nil [26650 26683])
            ("num-cmpl-sources" variable
               (:constant-flag t
                :default-value 7)
                nil [26684 26713])
            ("current-completion-source" variable (:default-value cmpl-source-unknown) nil [26714 26768])
            ("cdabbrev-completions-tried" variable nil nil [27366 27405])
            ("cdabbrev-current-point" variable nil nil [27475 27508])
            ("cdabbrev-current-window" variable nil nil [27571 27607])
            ("cdabbrev-wrapped-p" variable nil nil [27737 27768])
            ("cdabbrev-abbrev-string" variable nil nil [27838 27872])
            ("cdabbrev-start-point" variable nil nil [27873 27904])
            ("cdabbrev-stop-point" variable nil nil [27905 27933])
            ("reset-cdabbrev" function
               (:documentation "Reset the cdabbrev search to search for ABBREV-STRING.
INITIAL-COMPLETIONS-TRIED is a list of downcased strings to ignore
during the search."
                :arguments ("abbrev-string" "initial-completions-tried"))
                nil [28139 28519])
            ("set-cdabbrev-buffer" function nil nil [28521 28710])
            ("reset-cdabbrev-window" function
               (:documentation "Reset the cdabbrev search to search for abbrev-string."
                :arguments ("initializep"))
                nil [28713 29614])
            ("next-cdabbrev" function (:documentation "Return the next possible cdabbrev expansion or nil if there isn't one.
`reset-cdabbrev' must've been called already.
This is sensitive to `case-fold-search'.") nil [29616 32492])
            ("cmpl-obarray-length" variable
               (:constant-flag t
                :default-value 511)
                nil [33593 33627])
            ("cmpl-prefix-obarray" variable
               (:documentation "An obarray used to store the downcased completion prefixes.
Each symbol is bound to a list of completion entries."
                :default-value (make-vector cmpl-obarray-length 0))
                nil [33629 33811])
            ("cmpl-obarray" variable
               (:documentation "An obarray used to store the downcased completions.
Each symbol is bound to a single completion entry."
                :default-value (make-vector cmpl-obarray-length 0))
                nil [33813 33977])
            ("completion-string" function (:arguments ("completion-entry")) nil [34502 34580])
            ("completion-num-uses" function (:arguments ("completion-entry")) nil [34582 34756])
            ("completion-last-use-time" function (:arguments ("completion-entry")) nil [34758 34978])
            ("completion-source" function (:arguments ("completion-entry")) nil [34980 35060])
            ("set-completion-string" function (:arguments ("completion-entry" "string")) nil [35079 35178])
            ("set-completion-num-uses" function (:arguments ("completion-entry" "num-uses")) nil [35180 35297])
            ("set-completion-last-use-time" function (:arguments ("completion-entry" "last-use-time")) nil [35299 35443])
            ("make-completion" function
               (:documentation "Return a completion entry."
                :arguments ("string"))
                nil [35460 35571])
            ("defalias" code nil nil [35871 35910])
            ("defalias" code nil nil [35912 35951])
            ("set-cmpl-prefix-entry-head" function (:arguments ("prefix-entry" "new-head")) nil [35971 36071])
            ("set-cmpl-prefix-entry-tail" function (:arguments ("prefix-entry" "new-tail")) nil [36073 36173])
            ("make-cmpl-prefix-entry" function
               (:documentation "Make a new prefix entry containing only completion-entry."
                :arguments ("completion-entry-list"))
                nil [36191 36360])
            ("clear-all-completions" function
               (:documentation "Initialize the completion storage.  All existing completions are lost."
                :user-visible-flag t)
                nil [36498 36744])
            ("completions-list-return-value" variable nil nil [36746 36784])
            ("list-all-completions" function (:documentation "Return a list of all the known completion entries.") nil [36786 37011])
            ("list-all-completions-1" function (:arguments ("prefix-symbol")) nil [37013 37236])
            ("list-all-completions-by-hash-bucket" function (:documentation "Return list of lists of known completion entries, organized by hash bucket.") nil [37238 37518])
            ("list-all-completions-by-hash-bucket-1" function (:arguments ("prefix-symbol")) nil [37520 37754])
            ("completion-to-accept" variable (:documentation "Set to a string that is pending its acceptance.") nil [37958 38043])
            ("cmpl-db-downcase-string" variable (:documentation "Setup by `find-exact-completion', etc.  The given string, downcased.") nil [38098 38207])
            ("cmpl-db-symbol" variable (:documentation "The interned symbol corresponding to `cmpl-db-downcase-string'.
Set up by `cmpl-db-symbol'.") nil [38208 38331])
            ("cmpl-db-prefix-symbol" variable (:documentation "The interned prefix symbol corresponding to `cmpl-db-downcase-string'.") nil [38332 38441])
            ("cmpl-db-entry" variable nil nil [38442 38468])
            ("cmpl-db-debug-p" variable (:documentation "Set to t if you want to debug the database.") nil [38469 38545])
            ("find-exact-completion" function
               (:documentation "Return the completion entry for STRING or nil.
Sets up `cmpl-db-downcase-string' and `cmpl-db-symbol'."
                :arguments ("string"))
                nil [38556 38863])
            ("find-cmpl-prefix-entry" function
               (:documentation "Return the prefix entry for string.
Sets `cmpl-db-prefix-symbol'.
Prefix-string must be exactly `completion-prefix-min-length' long
and downcased.  Sets up `cmpl-db-prefix-symbol'."
                :arguments ("prefix-string"))
                nil [38865 39236])
            ("inside-locate-completion-entry" variable nil nil [39238 39281])
            ("locate-completion-entry" function
               (:documentation "Locate the completion entry.
Returns a pointer to the element before the completion entry or nil if
the completion entry is at the head.
Must be called after `find-exact-completion'."
                :arguments ("completion-entry" "prefix-entry"))
                nil [39334 40430])
            ("locate-completion-entry-retry" function (:arguments ("old-entry")) nil [40432 41039])
            ("locate-completion-db-error" function nil nil [41041 41205])
            ("add-completion-to-tail-if-new" function
               (:documentation "If STRING is not in the database add it to appropriate prefix list.
STRING is added to the end of the appropriate prefix list with
num-uses = 0.  The database is unchanged if it is there.  STRING must be
longer than `completion-prefix-min-length'.
This must be very fast.
Returns the completion entry."
                :arguments ("string"))
                nil [41217 42345])
            ("add-completion-to-head" function
               (:documentation "If COMPLETION-STRING is not in the database, add it to prefix list.
We add COMPLETION-STRING to the head of the appropriate prefix list,
or to the head of the list.
COMPLETION-STRING must be longer than `completion-prefix-min-length'.
Updates the saved string with the supplied string.
This must be very fast.
Returns the completion entry."
                :arguments ("completion-string"))
                nil [42347 44747])
            ("delete-completion" function
               (:documentation "Delete the completion from the database.
String must be longer than `completion-prefix-min-length'."
                :arguments ("completion-string"))
                nil [44749 46074])
            ("interactive-completion-string-reader" function (:arguments ("prompt")) nil [48317 48660])
            ("check-completion-length" function (:arguments ("string")) nil [48662 48874])
            ("add-completion" function
               (:documentation "Add STRING to completion list, or move it to head of list.
The completion is altered appropriately if NUM-USES and/or LAST-USE-TIME
are specified."
                :user-visible-flag t
                :arguments ("string" "num-uses" "last-use-time"))
                nil [48876 49520])
            ("add-permanent-completion" function
               (:documentation "Add STRING if it isn't already listed, and mark it permanent."
                :user-visible-flag t
                :arguments ("string"))
                nil [49522 49907])
            ("kill-completion" function (:arguments ("string")) nil [49909 50081])
            ("accept-completion" function (:documentation "Accept the pending completion in `completion-to-accept'.
This bumps num-uses.  Called by `add-completion-to-head' and
`completion-search-reset'.") nil [50083 50613])
            ("use-completion-under-point" function (:documentation "Add the completion symbol underneath the point into the completion buffer.") nil [50615 50897])
            ("use-completion-before-point" function (:documentation "Add the completion symbol before point into the completion buffer.") nil [50899 51175])
            ("use-completion-under-or-before-point" function (:documentation "Add the completion symbol before point into the completion buffer.") nil [51177 51471])
            ("use-completion-before-separator" function (:documentation "Add the completion symbol before point into the completion buffer.
Completions added this way will automatically be saved if
`completion-on-separator-character' is non-nil.") nil [51473 52070])
            ("cmpl-test-string" variable nil nil [53307 53335])
            ("cmpl-test-regexp" variable nil nil [53393 53421])
            ("cmpl-last-index" variable nil nil [53516 53542])
            ("cmpl-cdabbrev-reset-p" variable nil nil [53609 53643])
            ("cmpl-next-possibilities" variable nil nil [53691 53727])
            ("cmpl-starting-possibilities" variable nil nil [53851 53891])
            ("cmpl-next-possibility" variable nil nil [53942 53976])
            ("cmpl-tried-list" variable nil nil [54013 54041])
            ("completion-search-reset" function
               (:documentation "Set up the for completion searching for STRING.
STRING must be longer than `completion-prefix-min-length'."
                :arguments ("string"))
                nil [54106 54569])
            ("completion-search-reset-1" function nil nil [54571 54765])
            ("completion-search-next" function
               (:documentation "Return the next completion entry.
If INDEX is out of sequence, reset and start from the top.
If there are no more entries, try cdabbrev and return only a string."
                :arguments ("index"))
                nil [54767 56267])
            ("completion-search-peek" function
               (:documentation "Return the next completion entry without actually moving the pointers.
Calling this again or calling `completion-search-next' results in the same
string being returned.  Depends on `case-fold-search'.
If there are no more entries, try cdabbrev and then return only a string."
                :arguments ("use-cdabbrev"))
                nil [56270 57544])
            ("completion-mode" function
               (:documentation "Toggle whether or not to add new words to the completion database."
                :user-visible-flag t)
                nil [59054 59293])
            ("cmpl-current-index" variable nil nil [59295 59324])
            ("cmpl-original-string" variable nil nil [59325 59358])
            ("cmpl-last-insert-location" variable (:default-value -1) nil [59359 59396])
            ("cmpl-leave-point-at-start" variable nil nil [59397 59435])
            ("complete" function
               (:documentation "Fill out a completion of the word before point.
Point is left at end.  Consecutive calls rotate through all possibilities.
Prefix args ::
  control-u :: leave the point at the beginning of the completion rather
               than at the end.
  a number  :: rotate through the possible completions by that amount
  `-'       :: same as -1 (insert previous completion)
 {See the comments at the top of `completion.el' for more info.}"
                :user-visible-flag t
                :arguments ("arg"))
                nil [59437 62808])
            ("add-completions-from-file" function
               (:documentation "Parse possible completions from a FILE and add them to database."
                :user-visible-flag t
                :arguments ("file"))
                nil [63165 63699])
            ("add-completions-from-buffer" function nil nil [63701 64061])
            ("completion-find-file-hook" function nil nil [64081 64407])
            ("add-completions-from-tags-table" function
               (:documentation "Add completions from the current tags table."
                :user-visible-flag t)
                nil [64536 65045])
            ("*lisp-def-regexp*" variable
               (:documentation "A regexp that searches for Lisp definition form."
                :constant-flag t
                :default-value "
(\\(\\w*:\\)?def\\(\\w\\|\\s_\\)*\\s +(*")
                nil [65424 65552])
            ("add-completions-from-lisp-buffer" function nil nil [65982 66365])
            ("completion-c-def-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table)) (whitespace-chars '(32 10 9 12 11 13)) (separator-chars '(44 42 61 40 59)) i) (setq i 0) (while (< i 256) (modify-syntax-entry i "w" table) (setq i (1+ i))) (dolist (char whitespace-chars) (modify-syntax-entry char "_" table)) (dolist (char separator-chars) (modify-syntax-entry char " " table)) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 93 ")[" table) (modify-syntax-entry 125 "){" table) table))
                nil [66959 67658])
            ("*c-def-regexp*" variable
               (:documentation "A regexp that searches for a definition form."
                :constant-flag t
                :default-value "
[_a-zA-Z#]")
                nil [67671 68296])
            ("add-completions-from-c-buffer" function nil nil [69557 73212])
            ("kill-emacs-save-completions" function nil nil [73457 73717])
            ("completion-version" variable
               (:constant-flag t
                :default-value "11")
                nil [73868 73902])
            ("saved-cmpl-file-header" variable
               (:constant-flag t
                :default-value ";;; Completion Initialization file.
;; Version = %s
;; Format is (<string> . <last-use-time>)
;;  <string> is the completion
;;  <last-use-time> is the time the completion was last used
;;    If it is t, the completion will never be pruned from the file.
;;    Otherwise it is in hours since origin.

")
                nil [73904 74246])
            ("completion-backup-filename" function (:arguments ("filename")) nil [74248 74320])
            ("save-completions-to-file" function
               (:documentation "Save completions in init file FILENAME.
If file name is not specified, use `save-completions-file-name'."
                :user-visible-flag t
                :arguments ("filename"))
                nil [74322 77598])
            ("load-completions-from-file" function
               (:documentation "Load a completion init file FILENAME.
If file is not specified, then use `save-completions-file-name'."
                :user-visible-flag t
                :arguments ("filename" "no-message-p"))
                nil [77948 80801])
            ("completion-initialize" function
               (:documentation "Load the default completions file.
Also sets up so that exiting Emacs will automatically save the file."
                :user-visible-flag t)
                nil [80803 81054])
            ("completion-kill-region" function
               (:documentation "Kill between point and mark.
The text is deleted but saved in the kill ring.
The command \\[yank] can retrieve it from there.
/(If you want to kill and then yank immediately, use \\[copy-region-as-kill].)

This is the primitive for programs to kill text (as opposed to deleting it).
Supply two arguments, character positions indicating the stretch of text
 to be killed.
Any command that calls this function is a \"kill command\".
If the previous command was also a kill command,
the text killed this time appends to the text killed last time
to make one entry in the kill ring.
Patched to remove the most recent completion."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [81179 82064])
            ("completion-separator-chars" variable (:default-value (append " !%^&()=`|{}[];\\'#,?" ".:" nil)) nil [82574 83003])
            ("completion--post-self-insert" function nil nil [83005 83286])
            ("completion-def-wrapper" function
               (:documentation "Add a call to update the completion database before function execution.
TYPE is the type of the wrapper to be added.  Can be :before or :under."
                :arguments ("function-name" "type"))
                nil [83530 84278])
            ("use-completion-minibuffer-separator" function nil nil [84280 84433])
            ("use-completion-backward-under" function nil nil [84435 84506])
            ("use-completion-backward" function nil nil [84508 84548])
            ("completion-before-command" function nil nil [84550 84724])
            ("completion-lisp-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (symbol-chars '(33 38 63 61 94))) (dolist (char symbol-chars) (modify-syntax-entry char "_" table)) table))
                nil [84748 84978])
            ("declare-function" code nil nil [84980 85059])
            ("completion-lisp-mode-hook" function nil nil [85061 85358])
            ("completion-c-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (separator-chars '(43 42 47 58 37))) (dolist (char separator-chars) (modify-syntax-entry char " " table)) table))
                nil [85378 85611])
            ("completion-def-wrapper" code nil nil [85613 85665])
            ("completion-c-mode-hook" function nil nil [85666 85856])
            ("completion-fortran-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (separator-chars '(43 45 42 47 58))) (dolist (char separator-chars) (modify-syntax-entry char " " table)) table))
                nil [85925 86164])
            ("completion-setup-fortran-mode" function nil nil [86166 86370])
            ("fortran-mode-hook" variable nil nil [86401 86427])
            ("completion-saved-bindings" variable nil nil [86429 86467])
            ("define-minor-mode" code nil nil [86484 88569])
            ("completion-def-wrapper" code nil nil [88693 88737])
            ("completion-def-wrapper" code nil nil [88738 88793])
            ("completion-def-wrapper" code nil nil [88794 88848])
            ("completion-def-wrapper" code nil nil [88849 88912])
            ("completion-def-wrapper" code nil nil [88913 88970])
            ("completion-def-wrapper" code nil nil [88971 89022])
            ("completion-def-wrapper" code nil nil [89213 89265])
            ("completion-def-wrapper" code nil nil [89266 89322])
            ("completion-def-wrapper" code nil nil [89323 89385])
            ("completion-def-wrapper" code nil nil [89386 89442])
            ("completion-def-wrapper" code nil nil [89443 89503])
            ("completion-def-wrapper" code nil nil [89504 89558])
            ("completion-def-wrapper" code nil nil [89559 89614])
            ("completion-def-wrapper" code nil nil [89615 89670])
            ("completion-def-wrapper" code nil nil [89671 89726])
            ("completion-def-wrapper" code nil nil [89727 89782])
            ("completion-def-wrapper" code nil nil [89783 89838])
            ("completion-def-wrapper" code nil nil [89839 89894])
            ("completion-def-wrapper" code nil nil [89896 89952])
            ("completion-def-wrapper" code nil nil [89953 90018])
            ("defalias" code nil nil [90054 90111])
            ("completion" package nil nil [90113 90134]))          
      :file "completion.el.gz"
      :pointmax 90164
      :fsize 22679
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d0f54"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function
               (:documentation "Read file-local variable using PROMPT and completion.
Intended to be used in the `interactive' spec of
`add-file-local-variable', `delete-file-local-variable',
`add-dir-local-variable', `delete-dir-local-variable'."
                :arguments ("prompt"))
                nil [1155 1917])
            ("read-file-local-variable-value" function
               (:documentation "Read value of file-local VARIABLE using completion.
Intended to be used in the `interactive' spec of
`add-file-local-variable' and `add-dir-local-variable'."
                :arguments ("variable"))
                nil [1919 3571])
            ("read-file-local-variable-mode" function (:documentation "Read per-directory file-local variable's mode using completion.
Intended to be used in the `interactive' spec of
`add-dir-local-variable', `delete-dir-local-variable'.") nil [3573 4410])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4412 5507])
            ("modify-file-local-variable" function
               (:documentation "Modify file-local VARIABLE in Local Variables depending on operation OP.

If OP is `add-or-replace' then delete all existing settings of
VARIABLE (except `mode' and `eval') and add a new file-local VARIABLE
with VALUE to the Local Variables list.

If there is no Local Variables list in the current file buffer and OP
is not `delete' then this function adds the first line containing the
string `Local Variables:' and the last line containing the string `End:'.

If OP is `delete' then delete all existing settings of VARIABLE
from the Local Variables list ignoring the input argument VALUE."
                :arguments ("variable" "value" "op" "interactive"))
                nil [5509 8837])
            ("add-file-local-variable" function
               (:documentation "Add file-local VARIABLE with its VALUE to the Local Variables list.

This command deletes all existing settings of VARIABLE (except `mode'
and `eval') and adds a new file-local VARIABLE with VALUE to the
Local Variables list.

If there is no Local Variables list in the current file buffer
then this function adds the first line containing the string
`Local Variables:' and the last line containing the string `End:'."
                :user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8854 9888])
            ("delete-file-local-variable" function
               (:documentation "Delete all settings of file-local VARIABLE from the Local Variables list."
                :user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9905 10198])
            ("modify-file-local-variable-prop-line" function
               (:documentation "Modify file-local VARIABLE in the -*- line depending on operation OP.

If OP is `add-or-replace' then delete all existing settings of
VARIABLE (except `mode' and `eval') and add a new file-local VARIABLE
with VALUE to the -*- line.

If there is no -*- line at the beginning of the current file buffer
and OP is not `delete' then this function adds the -*- line.

If OP is `delete' then delete all existing settings of VARIABLE
from the -*- line ignoring the input argument VALUE."
                :arguments ("variable" "value" "op" "interactive"))
                nil [10200 14745])
            ("add-file-local-variable-prop-line" function
               (:documentation "Add file-local VARIABLE with its VALUE to the -*- line.

This command deletes all existing settings of VARIABLE (except `mode'
and `eval') and adds a new file-local VARIABLE with VALUE to
the -*- line.

If there is no -*- line at the beginning of the current file buffer
then this function adds it."
                :user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14762 15389])
            ("delete-file-local-variable-prop-line" function
               (:documentation "Delete all settings of file-local VARIABLE from the -*- line."
                :user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [15406 15711])
            ("auto-insert" variable nil nil [15713 15733])
            ("modify-dir-local-variable" function
               (:documentation "Modify directory-local VARIABLE in .dir-locals.el depending on operation OP.

If OP is `add-or-replace' then delete all existing settings of
VARIABLE (except `mode' and `eval') and add a new directory-local VARIABLE
with VALUE to the MODE alist where MODE can be a mode name symbol or
a subdirectory name.

If .dir-locals.el was not found and OP is not `delete' then create
this file in the current directory.

If OP is `delete' then delete all existing settings of VARIABLE
from the MODE alist ignoring the input argument VALUE."
                :arguments ("mode" "variable" "value" "op"))
                nil [15756 19315])
            ("add-dir-local-variable" function
               (:documentation "Add directory-local VARIABLE with its VALUE and MODE to .dir-locals.el."
                :user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [19332 19740])
            ("delete-dir-local-variable" function
               (:documentation "Delete all MODE settings of file-local VARIABLE from .dir-locals.el."
                :user-visible-flag t
                :arguments ("mode" "variable"))
                nil [19757 20062])
            ("copy-file-locals-to-dir-locals" function
               (:documentation "Copy file-local variables to .dir-locals.el."
                :user-visible-flag t)
                nil [20079 20347])
            ("copy-dir-locals-to-file-locals" function
               (:documentation "Copy directory-local variables to the Local Variables list."
                :user-visible-flag t)
                nil [20364 20578])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:documentation "Copy directory-local variables to the -*- line."
                :user-visible-flag t)
                nil [20595 20817])
            ("enable-connection-local-variables" variable
               (:documentation "Non-nil means enable use of connection-local variables."
                :default-value t)
                nil [20869 20973])
            ("connection-local-variables-alist" variable (:documentation "Alist of connection-local variable settings in the current buffer.
Each element in this list has the form (VAR . VALUE), where VAR
is a connection-local variable (a symbol) and VALUE is its value.
The actual value in the buffer may differ from VALUE, if it is
changed by the user.") nil [20975 21305])
            ("make-variable-buffer-local" code nil nil [21306 21368])
            ("setq" code nil nil [21369 21470])
            ("connection-local-profile-alist" variable
               (:documentation "Alist mapping connection profiles to variable lists.
Each element in this list has the form (PROFILE VARIABLES).
PROFILE is the name of a connection profile (a symbol).
VARIABLES is a list that declares connection-local variables for
PROFILE.  An element in VARIABLES is an alist whose elements are
of the form (VAR . VALUE)."
                :default-value 'nil)
                nil [21472 21845])
            ("connection-local-criteria-alist" variable
               (:documentation "Alist mapping connection criteria to connection profiles.
Each element in this list has the form (CRITERIA PROFILES).
CRITERIA is a plist identifying a connection and the application
using this connection.  Property names might be `:application',
`:protocol', `:user' and `:machine'.  The property value of
`:application' is a symbol, all other property values are
strings.  All properties are optional; if CRITERIA is nil, it
always applies.
PROFILES is a list of connection profiles (symbols)."
                :default-value 'nil)
                nil [21847 22391])
            ("connection-local-normalize-criteria" function
               (:documentation "Normalize plist CRITERIA according to properties.
Return a reordered plist."
                :arguments ("criteria"))
                nil [22393 22768])
            ("connection-local-get-profiles" function
               (:documentation "Return the connection profiles list for CRITERIA.
CRITERIA is a plist identifying a connection and the application
using this connection, see `connection-local-criteria-alist'."
                :arguments ("criteria"))
                nil [22770 23503])
            ("connection-local-set-profiles" function
               (:documentation "Add PROFILES for CRITERIA.
CRITERIA is a plist identifying a connection and the application
using this connection, see `connection-local-criteria-alist'.
PROFILES are the names of connection profiles (a symbol).

When a connection to a remote server is opened and CRITERIA
matches to that server, the connection-local variables from
PROFILES are applied to the corresponding process buffer.  The
variables for a connection profile are defined using
`connection-local-set-profile-variables'."
                :arguments ("criteria" "profiles"))
                nil [23520 24660])
            ("connection-local-get-profile-variables" function
               (:documentation "Return the connection-local variable list for PROFILE."
                :arguments ("profile"))
                nil [24662 24834])
            ("connection-local-set-profile-variables" function
               (:documentation "Map the symbol PROFILE to a list of variable settings.
VARIABLES is a list that declares connection-local variables for
the connection profile.  An element in VARIABLES is an alist
whose elements are of the form (VAR . VALUE).

When a connection to a remote server is opened, the server's
connection profiles are found.  A server may be assigned a
connection profile using `connection-local-set-profiles'.  Then
variables are set in the server's process buffer according to the
VARIABLES list of the connection profile.  The list is processed
in order."
                :arguments ("profile" "variables"))
                nil [24851 25544])
            ("hack-connection-local-variables" function
               (:documentation "Read connection-local variables according to CRITERIA.
Store the connection-local variables in buffer local
variable`connection-local-variables-alist'.

This does nothing if `enable-connection-local-variables' is nil."
                :arguments ("criteria"))
                nil [25546 26196])
            ("hack-connection-local-variables-apply" function
               (:documentation "Apply connection-local variables identified by CRITERIA.
Other local variables, like file-local and dir-local variables,
will not be changed."
                :arguments ("criteria"))
                nil [26213 26581])
            ("with-connection-local-profiles" function
               (:documentation "Apply connection-local variables according to PROFILES in current buffer.
Execute BODY, and unwind connection-local variables."
                :arguments ("profiles" "body"))
                nil [26598 27418])
            ("files-x" package nil nil [27423 27441]))          
      :file "files-x.el.gz"
      :pointmax 27468
      :fsize 6683
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d0f74"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1050 1067])
            ("obarray" include nil nil [1069 1087])
            ("abbrev-mode" customgroup
               (:documentation "Word abbreviations mode."
                :user-visible-flag t)
                nil [1089 1203])
            ("abbrev-file-name" variable
               (:documentation "Default name of file from which to read abbrevs."
                :default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs"))
                nil [1205 1395])
            ("only-global-abbrevs" variable (:documentation "Non-nil means user plans to use global abbrevs only.
This makes the commands that normally define mode-specific abbrevs
define global abbrevs instead.") nil [1397 1648])
            ("define-minor-mode" code nil nil [1650 1918])
            ("put" code nil nil [1920 1969])
            ("define-obsolete-variable-alias" code nil nil [1973 2055])
            ("edit-abbrevs-mode-map" variable
               (:documentation "Keymap used in `edit-abbrevs'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "" 'abbrev-edit-save-buffer) (define-key map "" 'abbrev-edit-save-to-file) (define-key map "" 'edit-abbrevs-redefine) map))
                nil [2056 2336])
            ("kill-all-abbrevs" function
               (:documentation "Undefine all defined abbrevs."
                :user-visible-flag t)
                nil [2338 2509])
            ("copy-abbrev-table" function
               (:documentation "Make a new abbrev-table with the same abbrevs as TABLE.
Does not copy property lists."
                :arguments ("table"))
                nil [2511 2849])
            ("insert-abbrevs" function
               (:documentation "Insert after point a description of all defined abbrevs.
Mark is set after the inserted text."
                :user-visible-flag t)
                nil [2851 3137])
            ("list-abbrevs" function
               (:documentation "Display a list of defined abbrevs.
If LOCAL is non-nil, interactively when invoked with a
prefix arg, display only local, i.e. mode-specific, abbrevs.
Otherwise display all abbrevs."
                :user-visible-flag t
                :arguments ("local"))
                nil [3139 3437])
            ("abbrev-table-name" function
               (:documentation "Value is the name of abbrev table TABLE."
                :arguments ("table"))
                nil [3439 3725])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3727 4613])
            ("edit-abbrevs" function
               (:documentation "Alter abbrev definitions by editing a list of them.
Selects a buffer containing a list of abbrev definitions with
point located in the abbrev table of current buffer.
You can edit them and type \\<edit-abbrevs-map>\\[edit-abbrevs-redefine] to redefine abbrevs
according to your editing.
Buffer contains a header line for each abbrev table,
 which is the abbrev table name in parentheses.
This is followed by one line per abbrev in that table:
NAME   USECOUNT   EXPANSION   HOOK
where NAME and EXPANSION are strings with quotes,
USECOUNT is an integer, and HOOK is any valid function
or may be omitted (it is usually omitted)."
                :user-visible-flag t)
                nil [4615 5558])
            ("edit-abbrevs-redefine" function
               (:documentation "Redefine abbrevs according to current buffer contents."
                :user-visible-flag t)
                nil [5560 5755])
            ("define-abbrevs" function
               (:documentation "Define abbrevs according to current visible buffer contents.
See documentation of `edit-abbrevs' for info on the format of the
text you must have in the buffer.
With argument, eliminate all abbrev definitions except
the ones defined from the buffer now."
                :user-visible-flag t
                :arguments ("arg"))
                nil [5757 6755])
            ("read-abbrev-file" function
               (:documentation "Read abbrev definitions from file written with `write-abbrev-file'.
Optional argument FILE is the name of the file to read;
it defaults to the value of `abbrev-file-name'.
Optional second argument QUIETLY non-nil means don't display a message."
                :user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6757 7274])
            ("quietly-read-abbrev-file" function
               (:documentation "Read abbrev definitions from file written with `write-abbrev-file'.
Optional argument FILE is the name of the file to read;
it defaults to the value of `abbrev-file-name'.
Does not display any message."
                :arguments ("file"))
                nil [7276 7601])
            ("write-abbrev-file" function
               (:documentation "Write all user-level abbrev definitions to a file of Lisp code.
This does not include system abbrevs; it includes only the abbrev tables
listed in listed in `abbrev-table-name-list'.
The file written can be loaded in another session to define the same abbrevs.
The argument FILE is the file name to write.  If omitted or nil, the file
specified in `abbrev-file-name' is used.
If VERBOSE is non-nil, display a message indicating where abbrevs
have been saved."
                :user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7603 9362])
            ("abbrev-edit-save-to-file" function
               (:documentation "Save all user-level abbrev definitions in current buffer to FILE."
                :user-visible-flag t
                :arguments ("file"))
                nil [9364 9684])
            ("abbrev-edit-save-buffer" function
               (:documentation "Save all user-level abbrev definitions in current buffer.
The saved abbrevs are written to the file specified by
`abbrev-file-name'."
                :user-visible-flag t)
                nil [9686 9919])
            ("add-mode-abbrev" function
               (:documentation "Define mode-specific abbrev for last word(s) before point.
Argument is how many words before point form the expansion;
or zero means the region is the expansion.
A negative argument means to undefine the specified abbrev.
Reads the abbreviation in the minibuffer.

Don't use this function in a Lisp program; use `define-abbrev' instead."
                :user-visible-flag t
                :arguments ("arg"))
                nil [9923 10463])
            ("add-global-abbrev" function
               (:documentation "Define global (all modes) abbrev for last word(s) before point.
The prefix argument specifies the number of words before point that form the
expansion; or zero means the region is the expansion.
A negative argument means to undefine the specified abbrev.
This command uses the minibuffer to read the abbreviation.

Don't use this function in a Lisp program; use `define-abbrev' instead."
                :user-visible-flag t
                :arguments ("arg"))
                nil [10465 10955])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [10957 11550])
            ("inverse-add-mode-abbrev" function
               (:documentation "Define last word before point as a mode-specific abbrev.
With prefix argument N, defines the Nth word before point.
This command uses the minibuffer to read the expansion.
Expands the abbreviation after defining it."
                :user-visible-flag t
                :arguments ("n"))
                nil [11552 11983])
            ("inverse-add-global-abbrev" function
               (:documentation "Define last word before point as a global (mode-independent) abbrev.
With prefix argument N, defines the Nth word before point.
This command uses the minibuffer to read the expansion.
Expands the abbreviation after defining it."
                :user-visible-flag t
                :arguments ("n"))
                nil [11985 12328])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12330 12941])
            ("abbrev-prefix-mark" function
               (:documentation "Mark current point as the beginning of an abbrev.
Abbrev to be expanded starts here rather than at beginning of word.
This way, you can expand an abbrev with a prefix: insert the prefix,
use this command, then insert the abbrev.  This command inserts a
temporary hyphen after the prefix (until the intended abbrev
expansion occurs).
If the prefix is itself an abbrev, this command expands it, unless
ARG is non-nil.  Interactively, ARG is the prefix argument."
                :user-visible-flag t
                :arguments ("arg"))
                nil [12943 13604])
            ("expand-region-abbrevs" function
               (:documentation "For abbrev occurrence in the region, offer to expand it.
The user is asked to type `y' or `n' for each occurrence.
A prefix argument means don't query; expand all abbrevs."
                :user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13606 14301])
            ("abbrev-table-get" function
               (:documentation "Get the PROP property of abbrev table TABLE."
                :arguments ("table" "prop"))
                nil [14327 14480])
            ("abbrev-table-put" function
               (:documentation "Set the PROP property of abbrev table TABLE to VAL."
                :arguments ("table" "prop" "val"))
                nil [14482 14712])
            ("defalias" code nil nil [14714 14803])
            ("defalias" code nil nil [14805 14975])
            ("abbrev-table-name-list" variable
               (:documentation "List of symbols whose values are abbrev tables."
                :default-value '(fundamental-mode-abbrev-table global-abbrev-table))
                nil [15031 15172])
            ("make-abbrev-table" function
               (:documentation "Create a new, empty abbrev table object.
PROPS is a list of properties."
                :arguments ("props"))
                nil [15174 15913])
            ("abbrev-table-p" function
               (:documentation "Return non-nil if OBJECT is an abbrev table."
                :arguments ("object"))
                nil [15915 16085])
            ("abbrev-table-empty-p" function
               (:documentation "Return nil if there are no abbrev symbols in OBJECT.
If IGNORE-SYSTEM is non-nil, system definitions are ignored."
                :arguments ("object" "ignore-system"))
                nil [16087 16667])
            ("global-abbrev-table" variable
               (:documentation "The abbrev table whose abbrevs affect all buffers.
Each buffer may also have a local abbrev table.
If it does, the local table overrides the global one
for any particular abbrev defined in both."
                :default-value (make-abbrev-table))
                nil [16669 16916])
            ("abbrev-minor-mode-table-alist" variable (:documentation "Alist of abbrev tables to use for minor modes.
Each element looks like (VARIABLE . ABBREV-TABLE);
ABBREV-TABLE is active whenever VARIABLE's value is non-nil.
ABBREV-TABLE can also be a list of abbrev tables.") nil [16918 17173])
            ("fundamental-mode-abbrev-table" variable
               (:documentation "The abbrev table of mode-specific abbrevs for Fundamental Mode."
                :default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table))
                nil [17175 17450])
            ("abbrevs-changed" variable (:documentation "Set non-nil by defining or altering any word abbrevs.
This causes `save-some-buffers' to offer to save the abbrevs.") nil [17452 17600])
            ("abbrev-all-caps" variable (:documentation "Non-nil means expand multi-word abbrevs all caps if abbrev was so.") nil [17602 17743])
            ("abbrev-start-location" variable (:documentation "Buffer position for `expand-abbrev' to use as the start of the abbrev.
When nil, use the word before point as the abbrev.
Calling `expand-abbrev' sets this to nil.") nil [17745 17947])
            ("abbrev-start-location-buffer" variable (:documentation "Buffer that `abbrev-start-location' has been set for.
Trying to expand an abbrev in any other buffer clears `abbrev-start-location'.") nil [17949 18127])
            ("last-abbrev" variable (:documentation "The abbrev-symbol of the last abbrev expanded.  See `abbrev-symbol'.") nil [18129 18226])
            ("last-abbrev-text" variable (:documentation "The exact text of the last abbrev expanded.
It is nil if the abbrev has already been unexpanded.") nil [18228 18358])
            ("last-abbrev-location" variable (:documentation "The location of the start of the last abbrev expanded.") nil [18360 18450])
            ("pre-abbrev-expand-hook" variable (:documentation "Function or functions to be called before abbrev expansion is done.
This is the first thing that `expand-abbrev' does, and so this may change
the current abbrev table before abbrev lookup happens.") nil [18627 18902])
            ("make-obsolete-variable" code nil nil [18903 18982])
            ("clear-abbrev-table" function
               (:documentation "Undefine all abbrevs in abbrev table TABLE, leaving it empty."
                :arguments ("table"))
                nil [18984 19611])
            ("define-abbrev" function
               (:documentation "Define an abbrev in TABLE named NAME, to expand to EXPANSION and call HOOK.
NAME must be a string, and should be lower-case.
EXPANSION should usually be a string.
To undefine an abbrev, define it with EXPANSION = nil.
If HOOK is non-nil, it should be a function of no arguments;
it is called after EXPANSION is inserted.
If EXPANSION is not a string (and not nil), the abbrev is a
 special one, which does not expand in the usual way but only
 runs HOOK.

If HOOK is a non-nil symbol with a non-nil `no-self-insert' property,
it can control whether the character that triggered abbrev expansion
is inserted.  If such a HOOK returns non-nil, the character is not
inserted.  If such a HOOK returns nil, then so does `abbrev-insert'
(and `expand-abbrev'), as if no abbrev expansion had taken place.

PROPS is a property list.  The following properties are special:
- `:count': the value for the abbrev's usage-count, which is incremented each
  time the abbrev is used (the default is zero).
- `:system': if non-nil, says that this is a \"system\" abbreviation
  which should not be saved in the user's abbreviation file.
  Unless `:system' is `force', a system abbreviation will not
  overwrite a non-system abbreviation of the same name.
- `:case-fixed': non-nil means that abbreviations are looked up without
  case-folding, and the expansion is not capitalized/upcased.
- `:enable-function': a function of no argument which returns non-nil if the
  abbrev should be used for a particular call of `expand-abbrev'.

An obsolete but still supported calling form is:

(define-abbrev TABLE NAME EXPANSION &optional HOOK COUNT SYSTEM)."
                :arguments ("table" "name" "expansion" "hook" "props"))
                nil [19613 22754])
            ("abbrev--check-chars" function
               (:documentation "Check if the characters in ABBREV have word syntax in either the
current (if global is nil) or standard syntax table."
                :arguments ("abbrev" "global"))
                nil [22756 23499])
            ("define-global-abbrev" function
               (:documentation "Define ABBREV as a global abbreviation for EXPANSION.
The characters in ABBREV must all be word constituents in the standard
syntax table."
                :user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23501 23859])
            ("define-mode-abbrev" function
               (:documentation "Define ABBREV as a mode-specific abbreviation for EXPANSION.
The characters in ABBREV must all be word-constituents in the current mode."
                :user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23861 24283])
            ("abbrev--active-tables" function
               (:documentation "Return the list of abbrev tables currently active.
TABLES if non-nil overrides the usual rules.  It can hold
either a single abbrev table or a list of abbrev tables."
                :arguments ("tables"))
                nil [24285 25332])
            ("abbrev--symbol" function
               (:documentation "Return the symbol representing abbrev named ABBREV in TABLE.
This symbol's name is ABBREV, but it is not the canonical symbol of that name;
it is interned in the abbrev-table TABLE rather than the normal obarray.
The value is nil if that abbrev is not defined."
                :arguments ("abbrev" "table"))
                nil [25335 26283])
            ("abbrev-symbol" function
               (:documentation "Return the symbol representing abbrev named ABBREV.
This symbol's name is ABBREV, but it is not the canonical symbol of that name;
it is interned in an abbrev-table rather than the normal obarray.
The value is nil if that abbrev is not defined.
Optional second arg TABLE is abbrev table to look it up in.
The default is to try buffer's mode-specific abbrev table, then global table."
                :arguments ("abbrev" "table"))
                nil [26285 26979])
            ("abbrev-expansion" function
               (:documentation "Return the string that ABBREV expands into in the current buffer.
Optionally specify an abbrev table as second arg;
then ABBREV is looked up in that table only."
                :arguments ("abbrev" "table"))
                nil [26982 27242])
            ("abbrev--before-point" function (:documentation "Try and find an abbrev before point.  Return it if found, nil otherwise.") nil [27245 29863])
            ("abbrev-insert" function
               (:documentation "Insert abbrev ABBREV at point.
If non-nil, NAME is the name by which this abbrev was found.
If non-nil, WORDSTART is the place where to insert the abbrev.
If WORDEND is non-nil, the abbrev replaces the previous text between
WORDSTART and WORDEND.
Return ABBREV if the expansion should be considered as having taken place.
The return value can be influenced by a `no-self-insert' property;
see `define-abbrev' for details."
                :arguments ("abbrev" "name" "wordstart" "wordend"))
                nil [29865 32909])
            ("abbrev-expand-functions" variable (:documentation "Wrapper hook around `abbrev--default-expand'.") nil [32911 32997])
            ("make-obsolete-variable" code nil nil [32998 33078])
            ("abbrev-expand-function" variable
               (:documentation "Function that `expand-abbrev' uses to perform abbrev expansion.
Takes no argument and should return the abbrev symbol if expansion took place."
                :default-value nil)
                nil [33080 33283])
            ("expand-abbrev" function
               (:documentation "Expand the abbrev before point, if there is an abbrev there.
Effective when explicitly called even when `abbrev-mode' is nil.
Before doing anything else, runs `pre-abbrev-expand-hook'.
Calls the value of `abbrev-expand-function' with no argument to do
the work, and returns whatever it does.  (That return value should
be the abbrev symbol if expansion occurred, else nil.)"
                :user-visible-flag t)
                nil [33285 33776])
            ("abbrev--default-expand" function (:documentation "Default function to use for `abbrev-expand-function'.
This also respects the obsolete wrapper hook `abbrev-expand-functions'.
(See `with-wrapper-hook' for details about wrapper hooks.)
Calls `abbrev-insert' to insert any expansion, and returns what it does.") nil [33778 35297])
            ("unexpand-abbrev" function
               (:documentation "Undo the expansion of the last abbrev that expanded.
This differs from ordinary undo in that other editing done since then
is not undone."
                :user-visible-flag t)
                nil [35299 36197])
            ("abbrev--write" function
               (:documentation "Write the abbrev in a `read'able form.
Only writes the non-system abbrevs.
Presumes that `standard-output' points to `current-buffer'."
                :arguments ("sym"))
                nil [36199 36904])
            ("abbrev--describe" function (:arguments ("sym")) nil [36906 37300])
            ("insert-abbrev-table-description" function
               (:documentation "Insert before point a full description of abbrev table named NAME.
NAME is a symbol whose value is an abbrev table.
If optional 2nd arg READABLE is non-nil, a human-readable description
is inserted.  Otherwise the description is an expression,
a call to `define-abbrev-table', which would
define the abbrev table NAME exactly as it is currently defined.

Abbrevs marked as \"system abbrevs\" are omitted."
                :arguments ("name" "readable"))
                nil [37302 38343])
            ("define-abbrev-table" function
               (:documentation "Define TABLENAME (a symbol) as an abbrev table name.
Define abbrevs in it according to DEFINITIONS, which is a list of elements
of the form (ABBREVNAME EXPANSION ...) that are passed to `define-abbrev'.
PROPS is a property list to apply to the table.
Properties with special meaning:
- `:parents' contains a list of abbrev tables from which this table inherits
  abbreviations.
- `:case-fixed' non-nil means that abbreviations are looked up without
  case-folding, and the expansion is not capitalized/upcased.
- `:regexp' is a regular expression that specifies how to extract the
  name of the abbrev before point.  The submatch 1 is treated
  as the potential name of an abbrev.  If :regexp is nil, the default
  behavior uses `backward-word' and `forward-word' to extract the name
  of the abbrev, which can therefore only be a single word.
- `:enable-function' can be set to a function of no argument which returns
  non-nil if and only if the abbrevs in this table should be used for this
  instance of `expand-abbrev'."
                :arguments ("tablename" "definitions" "docstring" "props"))
                nil [38345 40634])
            ("abbrev-table-menu" function
               (:documentation "Return a menu that shows all abbrevs in TABLE.
Selecting an entry runs `abbrev-insert'.
PROMPT is the prompt to use for the keymap.
SORTFUN is passed to `sort' to change the default ordering."
                :arguments ("table" "prompt" "sortfun"))
                nil [40636 41487])
            ("define-derived-mode" code nil nil [41582 41712])
            ("abbrev" package nil nil [41714 41731]))          
      :file "abbrev.el.gz"
      :pointmax 41757
      :fsize 12082
      :lastmodtime '(23443 29218 0 0)
      :unmatched-syntax '((close-paren 1067 . 1068) (symbol 1032 . 1049) (open-paren 1031 . 1032)))
    (semanticdb-table "semanticdb-table-16d0f94"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("type-break" customgroup
               (:documentation "Encourage the user to take a rest from typing at suitable intervals."
                :user-visible-flag t)
                nil [2583 2723])
            ("type-break-interval" variable
               (:documentation "Number of seconds between scheduled typing breaks."
                :default-value (* 60 60))
                nil [2725 2859])
            ("type-break-good-rest-interval" variable
               (:documentation "Number of seconds of idle time considered to be an adequate typing rest.

When this variable is non-nil, Emacs checks the idle time between
keystrokes.  If this idle time is long enough to be considered a \"good\"
rest from typing, then the next typing break is simply rescheduled for later.

If a break is interrupted before this much time elapses, the user will be
asked whether or not really to interrupt the break."
                :default-value (/ type-break-interval 6))
                nil [2861 3425])
            ("type-break-good-break-interval" variable (:documentation "Number of seconds considered to be an adequate explicit typing rest.

When this variable is non-nil, its value is considered to be a \"good\"
length (in seconds) for a break initiated by the command `type-break',
overriding `type-break-good-rest-interval'.  This provides querying of
break interruptions when `type-break-good-rest-interval' is nil.") nil [3427 3885])
            ("type-break-keystroke-threshold" variable
               (:documentation "Upper and lower bound on number of keystrokes for considering typing break.
This structure is a pair of numbers (MIN . MAX).

The first number is the minimum number of keystrokes that must have been
entered since the last typing break before considering another one, even if
the scheduled time has elapsed; the break is simply rescheduled until later
if the minimum threshold hasn't been reached.  If this first value is nil,
then there is no minimum threshold; as soon as the scheduled time has
elapsed, the user will always be queried.

The second number is the maximum number of keystrokes that can be entered
before a typing break is requested immediately, pre-empting the originally
scheduled break.  If this second value is nil, then no pre-emptive breaks
will occur; only scheduled ones will.

Keys with bucky bits (shift, control, meta, etc) are counted as only one
keystroke even though they really require multiple keys to generate them.

The command `type-break-guesstimate-keystroke-threshold' can be used to
guess a reasonably good pair of values for this variable."
                :default-value (let* ((wpm 35) (avg-word-length 5) (upper (* wpm avg-word-length (/ type-break-interval 60))) (lower (/ upper 5))) (cons lower upper)))
                nil [3887 5875])
            ("type-break-query-function" variable
               (:documentation "Function to use for making query for a typing break.
It should take a string as an argument, the prompt.
Usually this should be set to `yes-or-no-p' or `y-or-n-p'.

To avoid being queried at all, set `type-break-query-mode' to nil."
                :default-value 'yes-or-no-p)
                nil [5877 6295])
            ("type-break-query-interval" variable
               (:documentation "Number of seconds between queries to take a break, if put off.
The user will continue to be prompted at this interval until he or she
finally submits to taking a typing break."
                :default-value 60)
                nil [6297 6555])
            ("type-break-time-warning-intervals" variable
               (:documentation "List of time intervals for warnings about upcoming typing break.
At each of the intervals (specified in seconds) away from a scheduled
typing break, print a warning in the echo area."
                :default-value '(300 120 60 30))
                nil [6557 6853])
            ("type-break-keystroke-warning-intervals" variable
               (:documentation "List of keystroke measurements for warnings about upcoming typing break.
At each of the intervals (specified in keystrokes) away from the upper
keystroke threshold, print a warning in the echo area.
If either this variable or the upper threshold is set, then no warnings
will occur."
                :default-value '(300 200 100 50))
                nil [6855 7257])
            ("type-break-warning-repeat" variable
               (:documentation "Number of keystrokes for which warnings should be repeated.
That is, for each of this many keystrokes the warning is redisplayed
in the echo area to make sure it's really seen."
                :default-value 40)
                nil [7259 7518])
            ("type-break-time-stamp-format" variable
               (:documentation "Timestamp format used to prefix messages.
Format specifiers are as used by `format-time-string'."
                :default-value "[%H:%M] ")
                nil [7520 7709])
            ("type-break-demo-functions" variable
               (:documentation "List of functions to consider running as demos during typing breaks.
When a typing break begins, one of these functions is selected randomly
to have Emacs do something interesting.

Any function in this list should start a demo which ceases as soon as a
key is pressed."
                :default-value '(type-break-demo-boring type-break-demo-life type-break-demo-hanoi))
                nil [7711 8141])
            ("type-break-demo-boring-stats" variable (:documentation "Show word per minute and keystroke figures in the Boring demo.") nil [8143 8292])
            ("type-break-terse-messages" variable (:documentation "Use slightly terser messages.") nil [8294 8407])
            ("type-break-file-name" variable
               (:documentation "Name of file used to save state across sessions.
If this is nil, no data will be saved across sessions."
                :default-value (locate-user-emacs-file "type-break" ".type-break"))
                nil [8409 8677])
            ("type-break-post-command-hook" variable
               (:documentation "Hook run indirectly by `post-command-hook' for typing break functions.
This is not really intended to be set by the user, but it's probably
harmless to do so.  Mainly it is used by various parts of the typing break
program to delay actions until after the user has completed some command.
It exists because `post-command-hook' itself is inaccessible while its
functions are being run, and some type-break--related functions want to
remove themselves after running."
                :default-value '(type-break-check))
                nil [8679 9205])
            ("type-break-mode-line-format" variable
               (:documentation "Format of messages in the mode line concerning typing breaks."
                :default-value '(type-break-mode-line-message-mode ("" type-break-mode-line-break-message type-break-mode-line-warning)))
                nil [9229 9453])
            ("type-break-mode-line-break-message" variable (:default-value '(type-break-mode-line-break-message-p type-break-mode-line-break-string)) nil [9455 9578])
            ("type-break-mode-line-break-message-p" variable nil nil [9580 9629])
            ("type-break-mode-line-break-string" variable (:default-value " *** TAKE A TYPING BREAK NOW ***") nil [9630 9707])
            ("type-break-mode-line-warning" variable (:default-value '(type-break-mode-line-break-message-p ("") (type-break-warning-countdown-string (" *** " "Break in " type-break-warning-countdown-string " " type-break-warning-countdown-string-type "***")))) nil [9709 10019])
            ("type-break-warning-countdown-string" variable (:documentation "If non-nil, this is a countdown for the next typing break.

This variable, in conjunction with `type-break-warning-countdown-string-type'
(which indicates whether this value is a number of keystrokes or seconds)
is installed in `mode-line-format' to notify of imminent typing breaks.") nil [10021 10358])
            ("type-break-warning-countdown-string-type" variable (:documentation "Indicates the unit type of `type-break-warning-countdown-string'.
It will be either \"seconds\" or \"keystrokes\".") nil [10360 10532])
            ("type-break-alarm-p" variable nil nil [10597 10628])
            ("type-break-keystroke-count" variable nil nil [10629 10666])
            ("type-break-time-last-break" variable nil nil [10667 10706])
            ("type-break-time-next-break" variable nil nil [10707 10746])
            ("type-break-time-last-command" variable (:default-value (current-time)) nil [10747 10799])
            ("type-break-current-time-warning-interval" variable nil nil [10800 10853])
            ("type-break-current-keystroke-warning-interval" variable nil nil [10854 10912])
            ("type-break-time-warning-count" variable nil nil [10913 10953])
            ("type-break-keystroke-warning-count" variable nil nil [10954 10999])
            ("type-break-interval-start" variable nil nil [11000 11038])
            ("define-minor-mode" code nil nil [11057 16591])
            ("define-minor-mode" code nil nil [16593 17045])
            ("define-minor-mode" code nil nil [17047 17248])
            ("type-break-auto-save-file-name" variable
               (:documentation "Auto-save name of `type-break-file-name'."
                :default-value (let ((buffer-file-name type-break-file-name)) (make-auto-save-file-name)))
                nil [17280 17446])
            ("type-break-file-time" function
               (:documentation "File break time in `type-break-file-name', unless the file is locked."
                :arguments ("time"))
                nil [17448 17983])
            ("type-break-file-keystroke-count" function (:documentation "File keystroke count in `type-break-file-name', unless the file is locked.") nil [17985 18645])
            ("timep" function
               (:documentation "If TIME is in the format returned by `current-time' then
return TIME, else return nil."
                :arguments ("time"))
                nil [18647 18832])
            ("type-break-choose-file" function (:documentation "Return file to read from.") nil [18834 19229])
            ("type-break-get-previous-time" function (:documentation "Get previous break time from `type-break-file-name'.
Returns nil if the file is missing or if the time breaks with the
`current-time' format.") nil [19231 19756])
            ("type-break-get-previous-count" function (:documentation "Get previous keystroke count from `type-break-file-name'.
Return 0 if the file is missing or if the form read is not an
integer.") nil [19758 20483])
            ("type-break" function
               (:documentation "Take a typing break.

During the break, a demo selected from the functions listed in
`type-break-demo-functions' is run.

After the typing break is finished, the next break is scheduled
as per the function `type-break-schedule'."
                :user-visible-flag t)
                nil [20502 22932])
            ("type-break-schedule" function
               (:documentation "Schedule a typing break for TIME seconds from now.
If time is not specified it defaults to `type-break-interval'.
START and INTERVAL are used when recovering a break.
START is the start of the break (defaults to now).
INTERVAL is the full length of an interval (defaults to TIME)."
                :user-visible-flag t
                :arguments ("time" "start" "interval"))
                nil [22936 23712])
            ("type-break-cancel-schedule" function nil nil [23714 23923])
            ("type-break-time-warning-schedule" function (:arguments ("time" "resetp")) nil [23925 25397])
            ("type-break-cancel-time-warning-schedule" function nil nil [25399 25800])
            ("type-break-alarm" function nil nil [25802 25949])
            ("type-break-time-warning-alarm" function nil nil [25951 26215])
            ("type-break-run-tb-post-command-hook" function nil nil [26219 26338])
            ("type-break-check" function (:documentation "Ask to take a typing break if appropriate.
This may be the case either because the scheduled time has come (and the
minimum keystroke threshold has been reached) or because the maximum
keystroke threshold has been exceeded.") nil [26340 28857])
            ("type-break-check-keystroke-warning" function nil nil [28924 29977])
            ("type-break-query" function nil nil [30058 30149])
            ("type-break-do-query" function nil nil [30151 31521])
            ("type-break-noninteractive-query" function
               (:documentation "Null query function which doesn't interrupt user and assumes `no'.
It prints a reminder in the echo area to take a break, but doesn't enforce
this or ask the user to start one right now."
                :arguments ("_ignored-args"))
                nil [31523 32156])
            ("type-break-time-warning" function nil nil [32158 33513])
            ("type-break-keystroke-warning" function nil nil [33515 34711])
            ("type-break-mode-line-countdown-or-break" function (:arguments ("type")) nil [34713 35500])
            ("type-break-statistics" function
               (:documentation "Print statistics about typing breaks in a temporary buffer.
This includes the last time a typing break was taken, when the next one is
scheduled, the keystroke thresholds and the current keystroke count, etc."
                :user-visible-flag t)
                nil [35519 37214])
            ("type-break-guesstimate-keystroke-threshold" function
               (:documentation "Guess values for the minimum/maximum keystroke threshold for typing breaks.

If called interactively, the user is prompted for their guess as to how
many words per minute they usually type.  This value should not be your
maximum WPM, but your average.  Of course, this is harder to gauge since it
can vary considerably depending on what you are doing.  For example, one
tends to type less when debugging a program as opposed to writing
documentation.  (Perhaps a separate program should be written to estimate
average typing speed.)

From that, this command sets the values in `type-break-keystroke-threshold'
based on a fairly simple algorithm involving assumptions about the average
length of words (5).  For the minimum threshold, it uses about a fifth of
the computed maximum threshold.

When called from Lisp programs, the optional args WORDLEN and FRAC can be
used to override the default assumption about average word length and the
fraction of the maximum threshold to which to set the minimum threshold.
FRAC should be the inverse of the fractional value; for example, a value of
2 would mean to use one half, a value of 4 would mean to use one quarter, etc."
                :user-visible-flag t
                :arguments ("wpm" "wordlen" "frac"))
                nil [37231 39013])
            ("type-break-time-difference" function (:arguments ("a" "b")) nil [39156 39239])
            ("type-break-time-sum" function (:arguments ("tmlist")) nil [39309 39444])
            ("type-break-time-stamp" function (:arguments ("when")) nil [39446 39782])
            ("type-break-format-time" function (:arguments ("secs")) nil [39784 40030])
            ("type-break-keystroke-reset" function nil nil [40032 40399])
            ("type-break-force-mode-line-update" function
               (:documentation "Force the mode-line of the current buffer to be redisplayed.
With optional non-nil ALL, force redisplay of all mode-lines."
                :arguments ("all"))
                nil [40401 40680])
            ("type-break-check-post-command-hook" function nil nil [41065 41187])
            ("type-break-run-at-time" function (:arguments ("time" "repeat" "function")) nil [41333 41498])
            ("timer-dont-exit" variable nil nil [41500 41524])
            ("type-break-cancel-function-timers" function (:arguments ("function")) nil [41525 41645])
            ("type-break-catch-up-event" function nil nil [41668 41949])
            ("type-break-demo-hanoi" function (:documentation "Take a hanoiing typing break.") nil [42146 42598])
            ("type-break-demo-life" function (:documentation "Take a typing break and get a life.") nil [42763 43422])
            ("type-break-demo-boring" function (:documentation "Boring typing break demo.") nil [43468 47516])
            ("type-break" package nil nil [47520 47541])
            ("if" code nil nil [47543 47587]))          
      :file "type-break.el.gz"
      :pointmax 47617
      :fsize 12151
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d0fb4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [12875 12914])
            ("ange-ftp" include nil nil [12935 12954])
            ("cl-lib" include nil nil [12975 12992])
            ("ring" include nil nil [12994 13009])
            ("ehelp" include nil nil [13010 13026])
            ("comint" include nil nil [13027 13044])
            ("declare-function" code nil nil [13065 13110])
            ("declare-function" code nil nil [13111 13158])
            ("declare-function" code nil nil [13159 13221])
            ("declare-function" code nil nil [13222 13266])
            ("declare-function" code nil nil [13267 13316])
            ("term" customgroup
               (:documentation "General command interpreter in a window."
                :user-visible-flag t)
                nil [13318 13402])
            ("term-input-ring-size" variable
               (:documentation "Size of input history ring."
                :default-value 32)
                nil [13883 13945])
            ("term-height" variable nil nil [14680 14700])
            ("term-width" variable nil nil [14749 14768])
            ("term-home-marker" variable nil nil [14820 14845])
            ("term-saved-home-marker" variable (:documentation "When using alternate sub-buffer,
contains saved term-home-marker from original sub-buffer.") nil [14897 15027])
            ("term-start-line-column" variable (:documentation "(current-column) at start of screen line, or nil if unknown.") nil [15028 15126])
            ("term-current-column" variable (:documentation "If non-nil, is cache for (current-column).") nil [15127 15202])
            ("term-current-row" variable (:documentation "Current vertical row (relative to home-marker) or nil if unknown.") nil [15203 15300])
            ("term-insert-mode" variable nil nil [15301 15330])
            ("term-vertical-motion" variable nil nil [15331 15360])
            ("term-do-line-wrapping" variable (:documentation "Last character was a graphic in the last column.
If next char is graphic, first move one column right
(and line warp) before displaying it.
This emulates (more or less) the behavior of xterm.") nil [15361 15592])
            ("term-kill-echo-list" variable (:documentation "A queue of strings whose echo we want suppressed.") nil [15593 15679])
            ("term-terminal-undecoded-bytes" variable nil nil [15680 15722])
            ("term-current-face" variable (:default-value 'term) nil [15723 15755])
            ("term-scroll-start" variable (:documentation "Top-most line (inclusive) of scrolling region.") nil [15756 15833])
            ("term-scroll-end" variable nil nil [15834 15858])
            ("term-pager-count" variable (:documentation "Number of lines before we need to page; if nil, paging is disabled.") nil [15913 16014])
            ("term-saved-cursor" variable nil nil [16015 16045])
            ("term-command-hook" variable nil nil [16046 16072])
            ("term-log-buffer" variable nil nil [16073 16101])
            ("term-scroll-with-delete" variable (:documentation "If t, forward scrolling should be implemented by delete to
top-most line(s); and if nil, scrolling should be implemented
by moving term-home-marker.  It is set to t if there is a
(non-default) scroll-region OR the alternate buffer is used.") nil [16102 16383])
            ("term-pending-delete-marker" variable nil nil [16384 16419])
            ("term-old-mode-map" variable (:documentation "Saves the old keymap when in char mode.") nil [16591 16663])
            ("term-old-mode-line-format" variable nil nil [16664 16698])
            ("term-pager-old-local-map" variable (:documentation "Saves old keymap while paging.") nil [16742 16812])
            ("term-pager-old-filter" variable nil nil [16813 16843])
            ("defvar-local" code nil nil [16881 16992])
            ("explicit-shell-file-name" variable (:documentation "If non-nil, is file name to use for explicitly requested inferior shell.") nil [16994 17161])
            ("term-prompt-regexp" variable
               (:documentation "Regexp to recognize prompts in the inferior process.
Defaults to \"^\", the null string at BOL.

Good choices:
  Canonical Lisp: \"^[^> \\n]*>+:? *\" (Lucid, franz, kcl, T, cscheme, oaklisp)
  Lucid Common Lisp: \"^\\\\(>\\\\|\\\\(->\\\\)+\\\\) *\"
  franz: \"^\\\\(->\\\\|<[0-9]*>:\\\\) *\"
  kcl: \"^>+ *\"
  shell: \"^[^#$%>\\n]*[#$%>] *\"
  T: \"^>+ *\"

This is a good thing to set in mode hooks."
                :default-value "^")
                nil [17163 17600])
            ("term-delimiter-argument-list" variable (:documentation "List of characters to recognize as separate arguments in input.
Strings comprising a character in this list will separate the arguments
surrounding them, and also be regarded as arguments in their own right
(unlike whitespace).  See `term-arguments'.
Defaults to the empty list.

For shells, a good value is (?\\| ?& ?< ?> ?\\( ?\\) ?\\;).

This is a good thing to set in mode hooks.") nil [17602 18031])
            ("term-input-autoexpand" variable (:documentation "If non-nil, expand input command history references on completion.
This mirrors the optional behavior of tcsh (its autoexpand and histlit).

If the value is `input', then the expansion is seen on input.
If the value is `history', then the expansion is only when inserting
into the buffer's input ring.  See also `term-magic-space' and
`term-dynamic-complete'.

This variable is buffer-local.") nil [18033 18551])
            ("term-input-ignoredups" variable (:documentation "If non-nil, don't add input matching the last on the input ring.
This mirrors the optional behavior of bash.

This variable is buffer-local.") nil [18553 18767])
            ("term-input-ring-file-name" variable (:documentation "If non-nil, name of the file to read/write input history.
See also `term-read-input-ring' and `term-write-input-ring'.

This variable is buffer-local, and is a good thing to set in mode hooks.") nil [18769 19039])
            ("term-char-mode-buffer-read-only" variable
               (:documentation "If non-nil, only the process filter may modify the buffer in char mode.

A non-nil value makes the buffer read-only in `term-char-mode',
which prevents editing commands from making the buffer state
inconsistent with the state of the terminal understood by the
inferior process.  Only the process filter is allowed to make
changes to the buffer.

Customize this option to nil if you want the previous behavior."
                :default-value t)
                nil [19041 19550])
            ("term-char-mode-point-at-process-mark" variable
               (:documentation "If non-nil, keep point at the process mark in char mode.

A non-nil value causes point to be moved to the current process
mark after each command in `term-char-mode' (provided that the
pre-command point position was also at the process mark).  This
prevents commands that move point from making the buffer state
inconsistent with the state of the terminal understood by the
inferior process.

Mouse events are not affected, so moving point and selecting text
is still possible in char mode via the mouse, after which other
commands can be invoked on the mouse-selected point or region,
until the process filter (or user) moves point to the process
mark once again.

Customize this option to nil if you want the previous behavior."
                :default-value t)
                nil [19552 20386])
            ("term-scroll-to-bottom-on-output" variable (:documentation "Controls whether interpreter output causes window to scroll.
If nil, then do not scroll.  If t or `all', scroll all windows showing buffer.
If `this', scroll only the selected window.
If `others', scroll only those that are not the selected window.

The default is nil.

See variable `term-scroll-show-maximum-output'.
This variable is buffer-local.") nil [20388 20821])
            ("term-scroll-show-maximum-output" variable (:documentation "Controls how interpreter output causes window to scroll.
If non-nil, then show the maximum output when the window is scrolled.

See variable `term-scroll-to-bottom-on-output'.
This variable is buffer-local.") nil [20823 21113])
            ("term-suppress-hard-newline" variable (:documentation "Non-nil means interpreter should not break long lines with newlines.
This means text can automatically reflow if the window is resized.") nil [21115 21347])
            ("term-pending-frame" variable nil nil [21518 21549])
            ("term-get-old-input" variable
               (:documentation "Function that submits old text in term mode.
This function is called when return is typed while the point is in old text.
It returns the text to be submitted as process input.  The default is
`term-get-old-input-default', which grabs the current line, and strips off
leading text matching `term-prompt-regexp'."
                :default-value nil)
                nil [21591 21971])
            ("term-dynamic-complete-functions" variable
               (:documentation "List of functions called to perform completion.
Functions should return non-nil if completion was performed.
See also `term-dynamic-complete'.

This is a good thing to set in mode hooks."
                :default-value '(term-replace-by-expanded-history term-dynamic-complete-filename))
                nil [21973 22273])
            ("term-input-filter" variable
               (:documentation "Predicate for filtering additions to input history.
Only inputs answering true to this function are saved on the input
history list.  Default is to save anything that isn't all whitespace."
                :default-value nil)
                nil [22275 22561])
            ("term-input-filter-functions" variable
               (:documentation "Functions to call before input is sent to the process.
These functions get one argument, a string containing the text to send.

This variable is buffer-local."
                :default-value 'nil)
                nil [22563 22766])
            ("term-input-sender" variable
               (:documentation "Function to actually send to PROCESS the STRING submitted by user.
Usually this is just `term-simple-send', but if your mode needs to
massage the input string, this is your hook.  This is called from
the user command `term-send-input'.  `term-simple-send' just sends
the string plus a newline."
                :default-value nil)
                nil [22768 23120])
            ("term-eol-on-send" variable
               (:documentation "Non-nil means go to the end of the line before sending input.
See `term-send-input'."
                :default-value t)
                nil [23122 23273])
            ("term-mode-hook" variable
               (:documentation "Called upon entry into term mode.
This is run before the process is cranked up."
                :default-value 'nil)
                nil [23275 23418])
            ("term-exec-hook" variable
               (:documentation "Called each time a process is exec'd by `term-exec'.
This is called after the process is cranked up.  It is useful for things that
must be done each time a process is executed in a term mode buffer (e.g.,
`set-process-query-on-exit-flag').  In contrast, `term-mode-hook' is only
executed once, when the buffer is created."
                :default-value 'nil)
                nil [23420 23805])
            ("term-mode-map" variable
               (:documentation "Keymap for Term mode."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "p" 'term-previous-input) (define-key map "n" 'term-next-input) (define-key map "r" 'term-previous-matching-input) (define-key map "s" 'term-next-matching-input) (unless (featurep 'xemacs) (define-key map [138412146] 'term-previous-matching-input-from-input) (define-key map [138412147] 'term-next-matching-input-from-input)) (define-key map "" 'term-show-output) (define-key map "" 'term-send-input) (define-key map "" 'term-delchar-or-maybe-eof) (define-key map "" 'term-bol) (define-key map "" 'term-kill-input) (define-key map "" 'backward-kill-word) (define-key map "" 'term-interrupt-subjob) (define-key map "" 'term-stop-subjob) (define-key map "" 'term-quit-subjob) (define-key map "" 'term-copy-old-input) (define-key map "" 'term-kill-output) (define-key map "" 'term-show-output) (define-key map "" 'term-show-maximum-output) (define-key map "" 'term-dynamic-list-input-ring) (define-key map "" 'term-next-prompt) (define-key map "" 'term-previous-prompt) (define-key map "" 'term-send-eof) (define-key map "" 'term-char-mode) (define-key map "
" 'term-line-mode) (define-key map "" 'term-pager-toggle) (easy-menu-define nil map "Complete menu for Term mode." '("Complete" ["Complete Before Point" term-dynamic-complete t] ["Complete File Name" term-dynamic-complete-filename t] ["File Completion Listing" term-dynamic-list-filename-completions t] ["Expand File Name" term-replace-by-expanded-filename t])) (easy-menu-define nil map "In/Out menu for Term mode." '("In/Out" ["Expand History Before Point" term-replace-by-expanded-history term-input-autoexpand] ["List Input History" term-dynamic-list-input-ring t] ["Previous Input" term-previous-input t] ["Next Input" term-next-input t] ["Previous Matching Current Input" term-previous-matching-input-from-input t] ["Next Matching Current Input" term-next-matching-input-from-input t] ["Previous Matching Input..." term-previous-matching-input t] ["Next Matching Input..." term-next-matching-input t] ["Backward Matching Input..." term-backward-matching-input t] ["Forward Matching Input..." term-forward-matching-input t] ["Copy Old Input" term-copy-old-input t] ["Kill Current Input" term-kill-input t] ["Show Current Output Group" term-show-output t] ["Show Maximum Output" term-show-maximum-output t] ["Backward Output Group" term-previous-prompt t] ["Forward Output Group" term-next-prompt t] ["Kill Current Output Group" term-kill-output t])) map))
                nil [23807 26878])
            ("term-escape-char" variable (:documentation "Escape character for char sub-mode of term mode.
Do not change it directly; use `term-set-escape-char' instead.") nil [26880 27025])
            ("term-pager-break-map" variable
               (:documentation "Keymap used in Term pager mode."
                :default-value (let ((map (make-keymap))) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map " " 'term-pager-page) (define-key map "" 'term-pager-line) (define-key map "?" 'term-pager-help) (define-key map "h" 'term-pager-help) (define-key map "b" 'term-pager-back-page) (define-key map "" 'term-pager-back-line) (define-key map "q" 'term-pager-discard) (define-key map "D" 'term-pager-disable) (define-key map "<" 'term-pager-bob) (define-key map ">" 'term-pager-eob) map))
                nil [27027 27855])
            ("term-ptyp" variable
               (:documentation "True if communications via pty; false if by pipe.  Buffer local.
This is to work around a bug in Emacs process signaling."
                :default-value t)
                nil [27857 28003])
            ("term-last-input-match" variable (:documentation "Last string searched for by term input history search, for defaulting.
Buffer local variable.") nil [28005 28136])
            ("term-input-ring" variable nil nil [28138 28166])
            ("term-last-input-start" variable nil nil [28167 28197])
            ("term-last-input-end" variable nil nil [28198 28226])
            ("term-input-ring-index" variable (:documentation "Index of last matched history element.") nil [28227 28304])
            ("term-matching-input-from-input-string" variable (:documentation "Input previously used to match input history.") nil [28305 28404])
            ("term-pager-filter" variable (:default-value t) nil [28519 28547])
            ("put" code nil nil [28549 28590])
            ("put" code nil nil [28591 28638])
            ("put" code nil nil [28639 28686])
            ("put" code nil nil [28687 28740])
            ("put" code nil nil [28741 28798])
            ("put" code nil nil [28799 28856])
            ("put" code nil nil [28857 28892])
            ("term-in-char-mode" function nil nil [28894 28964])
            ("term-in-line-mode" function nil nil [28965 29023])
            ("term-pager-enabled" function nil nil [29067 29117])
            ("term-handling-pager" function nil nil [29118 29177])
            ("term-using-alternate-sub-buffer" function nil nil [29178 29247])
            ("term-ansi-at-host" variable nil nil [29288 29318])
            ("term-ansi-at-dir" variable nil nil [29319 29348])
            ("term-ansi-at-user" variable nil nil [29349 29379])
            ("term-ansi-at-message" variable nil nil [29380 29413])
            ("term-ansi-at-save-user" variable nil nil [29414 29449])
            ("term-ansi-at-save-pwd" variable nil nil [29450 29484])
            ("term-ansi-at-save-anon" variable nil nil [29485 29520])
            ("term-ansi-current-bold" variable nil nil [29521 29556])
            ("term-ansi-current-color" variable nil nil [29557 29591])
            ("term-ansi-face-already-done" variable nil nil [29592 29632])
            ("term-ansi-current-bg-color" variable nil nil [29633 29670])
            ("term-ansi-current-underline" variable nil nil [29671 29711])
            ("term-ansi-current-reverse" variable nil nil [29712 29750])
            ("term-ansi-current-invisible" variable nil nil [29751 29791])
            ("ansi-term-color-vector" variable (:default-value [term term-color-black term-color-red term-color-green term-color-yellow term-color-blue term-color-magenta term-color-cyan term-color-white]) nil [29803 30002])
            ("term-default-fg-color" variable (:documentation "If non-nil, default color for foreground in Term mode.") nil [30004 30167])
            ("make-obsolete-variable" code nil nil [30168 30277])
            ("term-default-bg-color" variable (:documentation "If non-nil, default color for foreground in Term mode.") nil [30279 30442])
            ("make-obsolete-variable" code nil nil [30443 30552])
            ("term" variable
               (:documentation "Default face to use in Term mode."
                :default-value `((t :foreground ,term-default-fg-color :background ,term-default-bg-color :inherit default))
                :type "face")
                nil [30554 30732])
            ("term-bold" variable
               (:documentation "Default face to use for bold text."
                :default-value '((t :bold t))
                :type "face")
                nil [30734 30824])
            ("term-underline" variable
               (:documentation "Default face to use for underlined text."
                :default-value '((t :underline t))
                :type "face")
                nil [30826 30932])
            ("term-color-black" variable
               (:documentation "Face used to render black color code."
                :default-value '((t :foreground "black" :background "black"))
                :type "face")
                nil [30934 31066])
            ("term-color-red" variable
               (:documentation "Face used to render red color code."
                :default-value '((t :foreground "red3" :background "red3"))
                :type "face")
                nil [31068 31194])
            ("term-color-green" variable
               (:documentation "Face used to render green color code."
                :default-value '((t :foreground "green3" :background "green3"))
                :type "face")
                nil [31196 31330])
            ("term-color-yellow" variable
               (:documentation "Face used to render yellow color code."
                :default-value '((t :foreground "yellow3" :background "yellow3"))
                :type "face")
                nil [31332 31470])
            ("term-color-blue" variable
               (:documentation "Face used to render blue color code."
                :default-value '((t :foreground "blue2" :background "blue2"))
                :type "face")
                nil [31472 31602])
            ("term-color-magenta" variable
               (:documentation "Face used to render magenta color code."
                :default-value '((t :foreground "magenta3" :background "magenta3"))
                :type "face")
                nil [31604 31746])
            ("term-color-cyan" variable
               (:documentation "Face used to render cyan color code."
                :default-value '((t :foreground "cyan3" :background "cyan3"))
                :type "face")
                nil [31748 31878])
            ("term-color-white" variable
               (:documentation "Face used to render white color code."
                :default-value '((t :foreground "white" :background "white"))
                :type "face")
                nil [31880 32012])
            ("term-buffer-maximum-size" variable
               (:documentation "The maximum size in lines for term buffers.
Term buffers are truncated from the top to be no greater than this number.
Notice that a setting of 0 means \"don't truncate anything\".  This variable
is buffer-local."
                :default-value 2048)
                nil [32053 32343])
            ("term-raw-map" variable
               (:documentation "Keyboard map for sending characters directly to the inferior process."
                :default-value (let* ((map (make-keymap)) (esc-map (make-keymap)) (i 0)) (while (< i 128) (define-key map (make-string 1 i) 'term-send-raw) (unless (or (eq i 79) (eq i 91)) (define-key esc-map (make-string 1 i) 'term-send-raw-meta)) (setq i (1+ i))) (define-key map [remap self-insert-command] 'term-send-raw) (define-key map "" esc-map) (if (featurep 'xemacs) (define-key map [button2] 'term-mouse-paste) (define-key map [mouse-2] 'term-mouse-paste)) (define-key map [up] 'term-send-up) (define-key map [down] 'term-send-down) (define-key map [right] 'term-send-right) (define-key map [left] 'term-send-left) (define-key map [C-up] 'term-send-ctrl-up) (define-key map [C-down] 'term-send-ctrl-down) (define-key map [C-right] 'term-send-ctrl-right) (define-key map [C-left] 'term-send-ctrl-left) (define-key map [delete] 'term-send-del) (define-key map [deletechar] 'term-send-del) (define-key map [backspace] 'term-send-backspace) (define-key map [home] 'term-send-home) (define-key map [end] 'term-send-end) (define-key map [insert] 'term-send-insert) (define-key map [S-prior] 'scroll-down) (define-key map [S-next] 'scroll-up) (define-key map [S-insert] 'term-paste) (define-key map [prior] 'term-send-prior) (define-key map [next] 'term-send-next) (define-key map [xterm-paste] #'term--xterm-paste) map))
                nil [32376 34049])
            ("easy-menu-define" code nil nil [34051 34545])
            ("easy-menu-define" code nil nil [34547 35232])
            ("easy-menu-define" code nil nil [35234 35726])
            ("term-raw-escape-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map 'Control-X-prefix) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" 'term-pager-toggle) (define-key map "" 'term-char-mode) (define-key map "
" 'term-line-mode) (define-key map [134217848] 'execute-extended-command) map)) nil [35728 36365])
            ("term-set-escape-char" function
               (:documentation "Change `term-escape-char' and keymaps that depend on it."
                :arguments ("key"))
                nil [36367 36895])
            ("term-set-escape-char" code nil nil [36897 36947])
            ("put" code nil nil [36951 36988])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37048 37486])
            ("term-ansi-reset" function nil nil [37488 38003])
            ("define-derived-mode" code nil nil [38005 44320])
            ("term-reset-size" function (:arguments ("height" "width")) nil [44323 44944])
            ("term-check-kill-echo-list" function nil nil [45379 46005])
            ("term-send-raw-string" function (:arguments ("chars")) nil [46007 46453])
            ("term-send-raw" function
               (:documentation "Send the last character typed through the terminal-emulator
without any interpretation."
                :user-visible-flag t)
                nil [46455 46691])
            ("term-send-raw-meta" function nil nil [46693 47286])
            ("term-mouse-paste" function
               (:documentation "Insert the primary selection at the position clicked on."
                :user-visible-flag t
                :arguments ("click"))
                nil [47288 47774])
            ("term-paste" function
               (:documentation "Insert the last stretch of killed text at point."
                :user-visible-flag t)
                nil [47776 47909])
            ("term--xterm-paste" function
               (:documentation "Insert the text pasted in an XTerm bracketed paste operation."
                :user-visible-flag t)
                nil [47911 48067])
            ("declare-function" code nil nil [48069 48122])
            ("term-send-up" function nil nil [48397 48467])
            ("term-send-down" function nil nil [48468 48538])
            ("term-send-right" function nil nil [48539 48609])
            ("term-send-left" function nil nil [48610 48680])
            ("term-send-ctrl-up" function nil nil [48681 48759])
            ("term-send-ctrl-down" function nil nil [48760 48838])
            ("term-send-ctrl-right" function nil nil [48839 48917])
            ("term-send-ctrl-left" function nil nil [48918 48996])
            ("term-send-home" function nil nil [48997 49068])
            ("term-send-insert" function nil nil [49069 49140])
            ("term-send-end" function nil nil [49141 49212])
            ("term-send-prior" function nil nil [49213 49284])
            ("term-send-next" function nil nil [49285 49356])
            ("term-send-del" function nil nil [49357 49428])
            ("term-send-backspace" function nil nil [49429 49504])
            ("term-char-mode" function
               (:documentation "Switch to char (\"raw\") sub-mode of term mode.
Each character you type is sent directly to the inferior without
intervention from Emacs, except for the escape character (usually C-c)."
                :user-visible-flag t)
                nil [49507 50728])
            ("term-line-mode" function
               (:documentation "Switch to line (\"cooked\") sub-mode of term mode.
This means that Emacs editing commands work as normally, until
you type \\[term-send-input] which sends the current line to the inferior."
                :user-visible-flag t)
                nil [50730 51302])
            ("term-line-mode-buffer-read-only-update" function (:documentation "Update the user-set state of `buffer-read-only' in `term-line-mode'.

Called as a buffer-local `read-only-mode-hook' function.") nil [51304 51573])
            ("term-update-mode-line" function nil nil [51575 53933])
            ("term-check-proc" function
               (:documentation "True if there is a process associated w/buffer BUFFER, and it
is alive.  BUFFER can be either a buffer or the name of one."
                :arguments ("buffer"))
                nil [53935 54215])
            ("make-term" function
               (:documentation "Make a term process NAME in a buffer, running PROGRAM.
The name of the buffer is made by surrounding NAME with `*'s.
If there is already a running process in that buffer, it is not restarted.
Optional third arg STARTFILE is the name of a file to send the contents of to
the process.  Any more args are arguments to PROGRAM."
                :arguments ("name" "program" "startfile" "switches"))
                nil [54232 55035])
            ("term" function
               (:documentation "Start a terminal-emulator in a new buffer.
The buffer is in Term mode; see `term-mode' for the
commands to use in that buffer.

\\<term-raw-map>Type \\[switch-to-buffer] to switch to another buffer."
                :user-visible-flag t
                :arguments ("program"))
                nil [55052 55548])
            ("term-exec" function
               (:documentation "Start up a process in buffer for term modes.
Blasts any old process running in the buffer.  Doesn't set the buffer mode.
You can use this to cheaply run a series of processes in the same term
buffer.  The hook `term-exec-hook' is run after each exec."
                :arguments ("buffer" "name" "command" "startfile" "switches"))
                nil [55550 56940])
            ("term-sentinel" function
               (:documentation "Sentinel for term buffers.
The main purpose is to get rid of the local keymap."
                :arguments ("proc" "msg"))
                nil [56942 57705])
            ("term-handle-exit" function
               (:documentation "Write process exit (or other change) message MSG in the current buffer."
                :arguments ("process-name" "msg"))
                nil [57707 58371])
            ("term-term-name" variable
               (:documentation "Name to use for TERM.
Using \"emacs\" loses, because bash disables editing if $TERM == emacs."
                :default-value "eterm-color")
                nil [58374 58509])
            ("term-termcap-format" variable
               (:documentation "Termcap capabilities supported."
                :default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E[24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:")
                nil [58600 59349])
            ("term--bash-needs-EMACS-status" variable (:documentation "43 if Bash is so old that it needs EMACS set.
Some other integer if Bash is new or not in use.
Nil if unknown.") nil [59812 59969])
            ("term--bash-needs-EMACSp" function (:documentation "t if Bash is old, nil if it is new or not in use.") nil [59970 60475])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [60576 62073])
            ("term-read-input-ring" function
               (:documentation "Set the buffer's `term-input-ring' from a history file.
The name of the file is given by the variable `term-input-ring-file-name'.
The history ring is of size `term-input-ring-size', regardless of file size.
If `term-input-ring-file-name' is nil this function does nothing.

If the optional argument SILENT is non-nil, we say nothing about a
failure to read the history file.

This function is useful for major mode commands and mode hooks.

The structure of the history file should be one input command per line,
with the most recent command last.
See also `term-input-ignoredups' and `term-write-input-ring'."
                :arguments ("silent"))
                nil [63173 65090])
            ("term-write-input-ring" function (:documentation "Write the buffer's `term-input-ring' to a history file.
The name of the file is given by the variable `term-input-ring-file-name'.
The original contents of the file are lost if `term-input-ring' is not empty.
If `term-input-ring-file-name' is nil this function does nothing.

Useful within process sentinels.

See also `term-read-input-ring'.") nil [65092 66275])
            ("term-dynamic-list-input-ring" function
               (:documentation "List in help buffer the buffer's input history."
                :user-visible-flag t)
                nil [66278 67315])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [67318 67767])
            ("term-search-arg" function (:arguments ("arg")) nil [67769 68171])
            ("term-search-start" function (:arguments ("arg")) nil [68173 68640])
            ("term-previous-input-string" function
               (:documentation "Return the string ARG places along the input ring.
Moves relative to `term-input-ring-index'."
                :arguments ("arg"))
                nil [68674 68959])
            ("term-previous-input" function
               (:documentation "Cycle backwards through input history."
                :user-visible-flag t
                :arguments ("arg"))
                nil [68961 69099])
            ("term-next-input" function
               (:documentation "Cycle forwards through input history."
                :user-visible-flag t
                :arguments ("arg"))
                nil [69101 69225])
            ("term-previous-matching-input-string" function
               (:documentation "Return the string matching REGEXP ARG places along the input ring.
Moves relative to `term-input-ring-index'."
                :arguments ("regexp" "arg"))
                nil [69227 69518])
            ("term-previous-matching-input-string-position" function
               (:documentation "Return the index matching REGEXP ARG places along the input ring.
Moves relative to START, or `term-input-ring-index'."
                :arguments ("regexp" "arg" "start"))
                nil [69520 70710])
            ("term-previous-matching-input" function
               (:documentation "Search backwards through input history for match for REGEXP.
(Previous history elements are earlier commands.)
With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [70712 71502])
            ("term-next-matching-input" function
               (:documentation "Search forwards through input history for match for REGEXP.
(Later history elements are more recent commands.)
With prefix argument N, search for Nth following match.
If N is negative, find the previous or Nth previous match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [71504 71891])
            ("term-previous-matching-input-from-input" function
               (:documentation "Search backwards through input history for match for current input.
(Previous history elements are earlier commands.)
With prefix argument N, search for Nth previous match.
If N is negative, search forwards for the -Nth following match."
                :user-visible-flag t
                :arguments ("n"))
                nil [71893 72629])
            ("term-next-matching-input-from-input" function
               (:documentation "Search forwards through input history for match for current input.
(Following history elements are more recent commands.)
With prefix argument N, search for Nth following match.
If N is negative, search backwards for the -Nth previous match."
                :user-visible-flag t
                :arguments ("n"))
                nil [72631 72995])
            ("term-replace-by-expanded-history" function
               (:documentation "Expand input command history references before point.
Expansion is dependent on the value of `term-input-autoexpand'.

This function depends on the buffer's idea of the input history, which may not
match the command interpreter's idea, assuming it has one.

Assumes history syntax is like typical Un*x shells'.  However, since Emacs
cannot know the interpreter's idea of input line numbers, assuming it has one,
it cannot expand absolute input line number references.

If the optional argument SILENT is non-nil, never complain
even if history reference seems erroneous.

See `term-magic-space' and `term-replace-by-expanded-history-before-point'.

Returns t if successful."
                :user-visible-flag t
                :arguments ("silent"))
                nil [72998 74224])
            ("term-replace-by-expanded-history-before-point" function
               (:documentation "Expand directory stack reference before point.
See `term-replace-by-expanded-history'.  Returns t if successful."
                :arguments ("silent"))
                nil [74227 77854])
            ("term-magic-space" function
               (:documentation "Expand input history references before point and insert ARG spaces.
A useful command to bind to SPC.  See `term-replace-by-expanded-history'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [77857 78118])
            ("term-within-quotes" function
               (:documentation "Return t if the number of quotes between BEG and END is odd.
Quotes are single and double."
                :arguments ("beg" "end"))
                nil [78121 78441])
            ("term-how-many-region" function
               (:documentation "Return number of matches for REGEXP from BEG to END."
                :arguments ("regexp" "beg" "end"))
                nil [78443 78706])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [78708 79477])
            ("term-delim-arg" function (:arguments ("arg")) nil [79615 80153])
            ("term-arguments" function
               (:documentation "Return from STRING the NTH to MTH arguments.
NTH and/or MTH can be nil, which means the last argument.
Returned arguments are separated by single spaces.
We assume whitespace separates arguments, except within quotes.
Also, a run of one or more of a single character
in `term-delimiter-argument-list' is a separate argument.
Argument 0 is the command name."
                :arguments ("string" "nth" "mth"))
                nil [80155 81647])
            ("term-send-input" function
               (:documentation "Send input to process.
After the process output mark, sends all text from the process mark to
point as input to the process.  Before the process output mark, calls value
of variable `term-get-old-input' to retrieve old input, copies it to the
process mark, and sends it.  A terminal newline is also inserted into the
buffer and sent to the process.  The functions in `term-input-filter-functions'
are called on the input before sending it.

The input is entered into the input history ring, if the value of variable
`term-input-filter' returns non-nil when called on the input.  Any history
reference may be expanded depending on the value of the variable
`term-input-autoexpand'.

If variable `term-eol-on-send' is non-nil, then point is moved to the
end of line before sending the input.

The values of `term-get-old-input', `term-input-filter-functions', and
`term-input-filter' are chosen according to the command interpreter running
in the buffer.  E.g.,

If the interpreter is the csh,
    term-get-old-input is the default: take the current line, discard any
        initial string matching regexp term-prompt-regexp.
    term-input-filter-functions monitors input for \"cd\", \"pushd\", and
	\"popd\" commands.  When it sees one, it cd's the buffer.
    term-input-filter is the default: returns t if the input isn't all white
	space.

If the term is Lucid Common Lisp,
    term-get-old-input snarfs the sexp ending at point.
    term-input-filter-functions does nothing.
    term-input-filter returns nil if the input matches input-filter-regexp,
        which matches (1) all whitespace (2) :a, :c, etc.

Similarly for Soar, Scheme, etc."
                :user-visible-flag t)
                nil [81698 85625])
            ("term-get-old-input-default" function (:documentation "Default for `term-get-old-input'.
Take the current line, and discard any initial text matching
`term-prompt-regexp'.") nil [85627 85934])
            ("term-copy-old-input" function
               (:documentation "Insert after prompt old input at point as new input to be edited.
Calls `term-get-old-input' to get old input."
                :user-visible-flag t)
                nil [85936 86320])
            ("term-skip-prompt" function (:documentation "Skip past the text matching regexp `term-prompt-regexp'.
If this takes us past the end of the current line, don't skip at all.") nil [86322 86628])
            ("term-after-pmark-p" function (:documentation "Is point after the process output marker?") nil [86631 87101])
            ("term-simple-send" function
               (:documentation "Default function for sending to PROC input STRING.
This just sends STRING plus a newline.  To override this,
set the hook `term-input-sender'."
                :arguments ("proc" "string"))
                nil [87103 87352])
            ("term-bol" function
               (:documentation "Go to the beginning of line, then skip past the prompt, if any.
If a prefix argument is given (\\[universal-argument]), then no prompt skip
-- go straight to column 0.

The prompt skip is done by skipping text matching the regular expression
`term-prompt-regexp', a buffer local variable."
                :user-visible-flag t
                :arguments ("arg"))
                nil [87354 87750])
            ("term-read-noecho" function
               (:documentation "Read a single line of text from user without echoing, and return it.
Prompt with argument PROMPT, a string.  Optional argument STARS causes
input to be echoed with `*' characters on the prompt line.  Input ends with
RET, LFD, or ESC.  DEL or C-h rubs out.  C-u kills line.  C-g aborts (if
`inhibit-quit' is set because e.g. this function was called from a process
filter and C-g is pressed, this function returns nil rather than a string).

Note that the keystrokes comprising the text can still be recovered
(temporarily) with \\[view-lossage].  This may be a security bug for some
applications."
                :arguments ("prompt" "stars"))
                nil [87945 89990])
            ("term-send-invisible" function
               (:documentation "Read a string without echoing.
Then send it to the process running in the current buffer.  A new-line
is additionally sent.  String is not saved on term input history list."
                :user-visible-flag t
                :arguments ("str" "proc"))
                nil [89992 90625])
            ("term-watch-for-password-prompt" function
               (:documentation "Prompt in the minibuffer for password and send without echoing.
Checks if STRING contains a password prompt as defined by
`comint-password-prompt-regexp'."
                :arguments ("string"))
                nil [90696 91084])
            ("term-input-chunk-size" variable
               (:documentation "Long inputs send to term processes are broken up into chunks of this size.
If your process is choking on big inputs, try lowering the value."
                :default-value 512)
                nil [91125 91339])
            ("term-send-string" function
               (:documentation "Send to PROC the contents of STR as input.
This is equivalent to `process-send-string', except that long input strings
are broken up into chunks of size `term-input-chunk-size'.  Processes
are given a chance to output between chunks.  This can help prevent processes
from hanging when you send them long inputs on some OS's."
                :arguments ("proc" "str"))
                nil [91341 92002])
            ("term-send-region" function
               (:documentation "Send to PROC the region delimited by START and END.
This is a replacement for `process-send-region' that tries to keep
your process from hanging on long inputs.  See `term-send-string'."
                :arguments ("proc" "start" "end"))
                nil [92004 92290])
            ("term-kill-output" function
               (:documentation "Kill all output from interpreter since last input."
                :user-visible-flag t)
                nil [92320 92626])
            ("term-show-output" function
               (:documentation "Display start of this batch of interpreter output at top of window.
Sets mark to the value of point when this command is run."
                :user-visible-flag t)
                nil [92628 92938])
            ("term-interrupt-subjob" function
               (:documentation "Interrupt the current subjob."
                :user-visible-flag t)
                nil [92940 93058])
            ("term-kill-subjob" function
               (:documentation "Send kill signal to the current subjob."
                :user-visible-flag t)
                nil [93060 93178])
            ("term-quit-subjob" function
               (:documentation "Send quit signal to the current subjob."
                :user-visible-flag t)
                nil [93180 93298])
            ("term-stop-subjob" function
               (:documentation "Stop the current subjob.
WARNING: if there is no current subjob, you can end up suspending
the top-level process running in the buffer.  If you accidentally do
this, use \\[term-continue-subjob] to resume the process.  (This
is not a problem with most shells, since they ignore this signal.)"
                :user-visible-flag t)
                nil [93300 93670])
            ("term-continue-subjob" function
               (:documentation "Send CONT signal to process buffer's process group.
Useful if you accidentally suspend the top-level process."
                :user-visible-flag t)
                nil [93672 93868])
            ("term-kill-input" function
               (:documentation "Kill all text from last stuff output by interpreter to point."
                :user-visible-flag t)
                nil [93870 94147])
            ("term-delchar-or-maybe-eof" function
               (:documentation "Delete ARG characters forward, or send an EOF to process if at end of
buffer."
                :user-visible-flag t
                :arguments ("arg"))
                nil [94149 94351])
            ("term-send-eof" function
               (:documentation "Send an EOF to the current buffer's process."
                :user-visible-flag t)
                nil [94353 94463])
            ("term-backward-matching-input" function
               (:documentation "Search backward through buffer for match for REGEXP.
Matches are searched for on lines that match `term-prompt-regexp'.
With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [94465 95094])
            ("term-forward-matching-input" function
               (:documentation "Search forward through buffer for match for REGEXP.
Matches are searched for on lines that match `term-prompt-regexp'.
With prefix argument N, search for Nth following match.
If N is negative, find the previous or Nth previous match."
                :user-visible-flag t
                :arguments ("regexp" "n"))
                nil [95096 95496])
            ("term-next-prompt" function
               (:documentation "Move to end of Nth next prompt in the buffer.
See `term-prompt-regexp'."
                :user-visible-flag t
                :arguments ("n"))
                nil [95499 95754])
            ("term-previous-prompt" function
               (:documentation "Move to end of Nth previous prompt in the buffer.
See `term-prompt-regexp'."
                :user-visible-flag t
                :arguments ("n"))
                nil [95756 95915])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [99101 99384])
            ("term-check-source" function (:arguments ("fname")) nil [99826 100100])
            ("term-extract-string" function (:documentation "Return string around `point' that starts the current line or nil.") nil [101221 101672])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [101674 102424])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [103706 104592])
            ("term-horizontal-column" function nil nil [104710 104796])
            ("term-vertical-motion" function (:arguments ("count")) nil [104861 104946])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [105095 106446])
            ("term-start-line-column" function nil nil [106507 106736])
            ("term-current-column" function nil nil [106808 106916])
            ("term-move-to-column" function (:arguments ("column")) nil [106918 107347])
            ("term-move-columns" function (:arguments ("delta")) nil [107421 107521])
            ("term-insert-char" function (:arguments ("char" "count")) nil [107575 107738])
            ("term-current-row" function nil nil [107740 107960])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [107962 108099])
            ("term-terminal-pos" function nil nil [108101 108365])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [108461 110431])
            ("term-control-seq-regexp" variable
               (:documentation "Regexp matching control sequences handled by term.el."
                :constant-flag t
                :default-value (concat "\\(?:[
 	]\\|" "[^
]+?
\\|" "\\(?:[DM78c]\\|" "AnSiT[^
]+?
\\|" "\\[\\([0-?]*\\)[ -/]*[@-~]\\)\\)"))
                nil [110811 111400])
            ("term-control-seq-prefix-regexp" variable
               (:constant-flag t
                :default-value "[]")
                nil [111402 111456])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [111458 126825])
            ("defvar-local" code nil nil [126827 127014])
            ("term-set-goto-process-mark" function (:documentation "Sets `term-goto-process-mark'.

Always set to nil if `term-char-mode-point-at-process-mark' is nil.

Called as a buffer-local `pre-command-hook' function in
`term-char-mode' so that when point is equal to the process mark
at the pre-command stage, we know to restore point to the process
mark at the post-command stage.

See also `term-goto-process-mark-maybe'.") nil [127016 127566])
            ("term-goto-process-mark-maybe" function (:documentation "Move point to the term buffer's process mark upon keyboard input.

Called as a buffer-local `post-command-hook' function in
`term-char-mode' to prevent commands from putting the buffer into
an inconsistent state by unexpectedly moving point.

Mouse events are ignored so that mouse selection is unimpeded.

Only acts when the pre-command position of point was equal to the
process mark, and the `term-char-mode-point-at-process-mark'
option is enabled.  See `term-set-goto-process-mark'.") nil [127568 128217])
            ("term-process-mark" function (:documentation "The current `process-mark' for the term buffer process.") nil [128219 128362])
            ("term-handle-deferred-scroll" function nil nil [128364 128648])
            ("term-reset-terminal" function (:documentation "Reset the terminal, delete all the content and set the face to the default one.") nil [128650 129059])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [129195 132258])
            ("term-handle-ansi-escape" function (:arguments ("proc" "params" "char")) nil [132372 135756])
            ("term-set-scroll-region" function
               (:documentation "Set scrolling region.
TOP is the top-most line (inclusive) of the new scrolling region,
while BOTTOM is the line following the new scrolling region (e.g. exclusive).
The top-most line is line 0."
                :arguments ("top" "bottom"))
                nil [135758 136419])
            ("term-command-hook" function (:arguments ("string")) nil [137671 138409])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [138641 138748])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [138750 139311])
            ("term-goto-home" function nil nil [139534 139748])
            ("term-goto" function (:arguments ("row" "col")) nil [139750 140103])
            ("term-process-pager" function nil nil [140170 140751])
            ("term-pager-line" function (:arguments ("lines")) nil [140753 141069])
            ("term-pager-page" function
               (:documentation "Proceed past the **MORE** break, allowing the next page of output to appear."
                :user-visible-flag t
                :arguments ("arg"))
                nil [141071 141241])
            ("term-pager-bob" function nil nil [141295 141467])
            ("term-pager-eob" function nil nil [141515 141669])
            ("term-pager-back-line" function (:arguments ("lines")) nil [141671 141933])
            ("term-pager-back-page" function (:arguments ("arg")) nil [141935 142034])
            ("term-pager-discard" function nil nil [142036 142187])
            ("term-pager-disable" function nil nil [142288 142452])
            ("term-pager-enable" function nil nil [142482 142653])
            ("term-pager-toggle" function nil nil [142655 142768])
            ("term-pager-help" function
               (:documentation "Provide help on commands available in a terminal-emulator **MORE** break."
                :user-visible-flag t)
                nil [142770 143961])
            ("term-pager-continue" function (:arguments ("new-count")) nil [143963 144399])
            ("term-handle-scroll" function (:arguments ("down")) nil [144540 146135])
            ("term-down" function
               (:documentation "Move down DOWN screen lines vertically."
                :arguments ("down" "check-for-scroll"))
                nil [146137 147257])
            ("term-unwrap-line" function nil nil [147442 147519])
            ("term-erase-in-line" function (:arguments ("kind")) nil [147521 148776])
            ("term-erase-in-display" function
               (:documentation "Erase (that is blank out) part of the window.
If KIND is 0, erase from (point) to (point-max);
if KIND is 1, erase from home to point; else erase from home to point-max."
                :arguments ("kind"))
                nil [148778 149540])
            ("term-delete-chars" function (:arguments ("count")) nil [149542 149779])
            ("term-insert-spaces" function (:arguments ("count")) nil [149958 150681])
            ("term-delete-lines" function (:arguments ("lines")) nil [150683 151574])
            ("term-insert-lines" function (:arguments ("lines")) nil [151576 152851])
            ("term-start-output-log" function
               (:documentation "Record raw inferior process output in a buffer."
                :user-visible-flag t
                :arguments ("name"))
                nil [152854 153561])
            ("term-stop-output-log" function
               (:documentation "Discontinue raw inferior process logging."
                :user-visible-flag t)
                nil [153563 153686])
            ("term-show-maximum-output" function
               (:documentation "Put the end of the buffer at the bottom of the window."
                :user-visible-flag t)
                nil [153688 153840])
            ("term-load-hook" variable (:documentation "This hook is run when term is loaded in.
This is a good place to put keybindings.") nil [153879 153992])
            ("run-hooks" code nil nil [153994 154021])
            ("term-completion-autolist" variable (:documentation "If non-nil, automatically list possibilities on partial completion.
This mirrors the optional behavior of tcsh.") nil [154978 155166])
            ("term-completion-addsuffix" variable
               (:documentation "If non-nil, add a `/' to completed directories, ` ' to file names.
If a cons pair, it should be of the form (DIRSUFFIX . FILESUFFIX) where
DIRSUFFIX and FILESUFFIX are strings added on unambiguous or exact
completion.  This mirrors the optional behavior of tcsh."
                :default-value t)
                nil [155168 155654])
            ("term-completion-recexact" variable (:documentation "If non-nil, use shortest completion if characters cannot be added.
This mirrors the optional behavior of tcsh.

A non-nil value is useful if `term-completion-autolist' is non-nil too.") nil [155656 155916])
            ("term-completion-fignore" variable (:documentation "List of suffixes to be disregarded during file completion.
This mirrors the optional behavior of bash and tcsh.

Note that this applies to `term-dynamic-complete-filename' only.") nil [155918 156241])
            ("term-file-name-prefix" variable (:documentation "Prefix prepended to absolute file names taken from process input.
This is used by term's and shell's completion functions, and by shell's
directory tracking functions.") nil [156243 156448])
            ("term-directory" function (:arguments ("directory")) nil [156451 156680])
            ("term-word" function
               (:documentation "Return the word of WORD-CHARS at point, or nil if none is found.
Word constituents are considered to be those in WORD-CHARS, which is like the
inside of a \"[...]\" (see `skip-chars-forward')."
                :arguments ("word-chars"))
                nil [156683 157297])
            ("term-match-partial-filename" function (:documentation "Return the filename at point, or nil if none is found.
Environment variables are substituted.  See `term-word'.") nil [157300 157567])
            ("term-dynamic-complete" function
               (:documentation "Dynamically perform completion at point.
Calls the functions in `term-dynamic-complete-functions' to perform
completion until a function returns non-nil, at which point completion is
assumed to have occurred."
                :user-visible-flag t)
                nil [157570 157985])
            ("term-dynamic-complete-filename" function
               (:documentation "Dynamically complete the filename at point.
Completes if after a filename.  See `term-match-partial-filename' and
`term-dynamic-complete-as-filename'.
This function is similar to `term-replace-by-expanded-filename', except that
it won't change parts of the filename already entered in the buffer; it just
adds completion characters to the end of the filename.  A completions listing
may be shown in a help buffer if completion is ambiguous.

Completion is dependent on the value of `term-completion-addsuffix',
`term-completion-recexact' and `term-completion-fignore', and the timing of
completions listing is dependent on the value of `term-completion-autolist'.

Returns t if successful."
                :user-visible-flag t)
                nil [157988 158919])
            ("term-dynamic-complete-as-filename" function (:documentation "Dynamically complete at point as a filename.
See `term-dynamic-complete-filename'.  Returns t if successful.") nil [158921 161499])
            ("term-replace-by-expanded-filename" function
               (:documentation "Dynamically expand and complete the filename at point.
Replace the filename with an expanded, canonicalized and completed replacement.
\"Expanded\" means environment variables (e.g., $HOME) and `~'s are replaced
with the corresponding directories.  \"Canonicalized\" means `..'  and `.' are
removed, and the filename is made absolute instead of relative.  For expansion
see `expand-file-name' and `substitute-in-file-name'.  For completion see
`term-dynamic-complete-filename'."
                :user-visible-flag t)
                nil [161502 162150])
            ("term-dynamic-simple-complete" function
               (:documentation "Dynamically complete STUB from CANDIDATES list.
This function inserts completion characters at point by completing STUB from
the strings in CANDIDATES.  A completions listing may be shown in a help buffer
if completion is ambiguous.

Returns nil if no completion was inserted.
Returns `sole' if completed with the only completion match.
Returns `shortest' if completed with the shortest of the completion matches.
Returns `partial' if completed as far as possible with the completion matches.
Returns `listed' if a completion listing was shown.

See also `term-dynamic-complete-filename'."
                :arguments ("stub" "candidates"))
                nil [162153 164132])
            ("term-dynamic-list-filename-completions" function
               (:documentation "List in help buffer possible completions of the filename at point."
                :user-visible-flag t)
                nil [164134 164702])
            ("term-dynamic-list-completions" function
               (:documentation "List in help buffer sorted COMPLETIONS.
Typing SPC flushes the help buffer."
                :arguments ("completions"))
                nil [164705 165779])
            ("term-ansi-make-term" function
               (:documentation "Make a term process NAME in a buffer, running PROGRAM.
The name of the buffer is NAME.
If there is already a running process in that buffer, it is not restarted.
Optional third arg STARTFILE is the name of a file to send the contents of to
the process.  Any more args are arguments to PROGRAM."
                :arguments ("name" "program" "startfile" "switches"))
                nil [165837 166606])
            ("term-ansi-buffer-name" variable nil nil [166608 166642])
            ("term-ansi-default-program" variable nil nil [166643 166681])
            ("term-ansi-buffer-base-name" variable nil nil [166682 166721])
            ("ansi-term" function
               (:documentation "Start a terminal-emulator in a new buffer.
This is almost the same as `term' apart from always creating a new buffer,
and `C-x' being marked as a `term-escape-char'. "
                :user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [166738 168453])
            ("serial-port-is-file-p" function (:documentation "Guess whether serial ports are files on this system.
Return t if this is a Unix-based system, where serial ports are
files, such as /dev/ttyS0.
Return nil if this is Windows or DOS, where serial ports have
special identifiers such as COM1.") nil [168557 168888])
            ("serial-name-history" variable
               (:documentation "History of serial ports used by `serial-read-name'."
                :default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1")))
                nil [168890 169156])
            ("serial-speed-history" variable
               (:documentation "History of serial port speeds used by `serial-read-speed'."
                :default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200"))
                nil [169158 169469])
            ("serial-nice-speed-history" function (:documentation "Return `serial-speed-history' cleaned up for a mouse-menu.") nil [169471 169860])
            ("serial-no-speed" variable
               (:documentation "String for `serial-read-speed' for special serial ports.
If `serial-read-speed' reads this string from the user, it
returns nil, which is recognized by `serial-process-configure'
for special serial ports that cannot be configured."
                :constant-flag t
                :default-value "nil")
                nil [169862 170129])
            ("serial-supported-or-barf" function (:documentation "Signal an error if serial processes are not supported.") nil [170131 170331])
            ("serial-read-name" function (:documentation "Read a serial port name from the user.
Try to be nice by providing useful defaults and history.
On Windows, prepend \\.to the port name unless it already
contains a backslash.  This handles the legacy ports COM1-COM9 as
well as the newer ports COM10 and higher.") nil [170333 172423])
            ("serial-read-speed" function (:documentation "Read a serial port speed (in bits per second) from the user.
Try to be nice by providing useful defaults and history.") nil [172425 173398])
            ("serial-term" function
               (:documentation "Start a terminal-emulator for a serial port in a new buffer.
PORT is the path or name of the serial port.  For example, this
could be \"/dev/ttyS0\" on Unix.  On Windows, this could be
\"COM1\" or \"\\\\.\\COM10\".
SPEED is the speed of the serial port in bits per second.  9600
is a common value.  SPEED can be nil, see
`serial-process-configure' for details.
The buffer is in Term mode; see `term-mode' for the commands to
use in that buffer.
\\<term-raw-map>Type \\[switch-to-buffer] to switch to another buffer."
                :user-visible-flag t
                :arguments ("port" "speed"))
                nil [173415 174583])
            ("serial-mode-line-speed-menu" variable nil nil [174585 174625])
            ("serial-mode-line-config-menu" variable nil nil [174626 174667])
            ("serial-speed" function (:documentation "Return the speed of the serial port of the current buffer's process.
The return value may be nil for a special serial port.") nil [174669 174885])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [174887 175281])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [175283 175377])
            ("serial-update-speed-menu" function nil nil [175379 176376])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [176378 176818])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [176820 176916])
            ("serial-update-config-menu" function nil nil [176918 178262])
            ("term" package nil nil [181813 181828]))          
      :file "term.el.gz"
      :pointmax 181852
      :fsize 50481
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 12992 . 12993) (symbol 12957 . 12974) (open-paren 12956 . 12957) (close-paren 12954 . 12955) (symbol 12917 . 12934) (open-paren 12916 . 12917)))
    (semanticdb-table "semanticdb-table-16d0fd4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4149 4166])
            ("tar" customgroup
               (:documentation "Simple editing of tar files."
                :user-visible-flag t)
                nil [4169 4252])
            ("tar-anal-blocksize" variable
               (:documentation "The blocksize of tar files written by Emacs, or nil, meaning don't care.
The blocksize of a tar file is not really the size of the blocks; rather, it is
the number of blocks written with one system call.  When tarring to a tape,
this is the size of the *tape* blocks, but when writing to a file, it doesn't
matter much.  The only noticeable difference is that if a tar file does not
have a blocksize of 20, tar will tell you that; all this really controls is
how many null padding bytes go on the end of the tar file."
                :default-value 20)
                nil [4254 4861])
            ("tar-update-datestamp" variable (:documentation "Non-nil means Tar mode should play fast and loose with sub-file datestamps.
If this is true, then editing and saving a tar file entry back into its
tar file will update its datestamp.  If false, the datestamp is unchanged.
You may or may not want this - it is good in that you can tell when a file
in a tar archive has been changed, but it is bad for the same reason that
editing a file in the tar archive at all is bad - the changed version of
the file never exists on disk.") nil [4863 5410])
            ("tar-mode-show-date" variable (:documentation "Non-nil means Tar mode should show the date/time of each subfile.
This information is useful, but it takes screen space away from file names.") nil [5412 5623])
            ("tar-parse-info" variable nil nil [5625 5652])
            ("tar-superior-buffer" variable (:documentation "Buffer containing the tar archive from which a member was extracted.") nil [5653 5758])
            ("tar-superior-descriptor" variable (:documentation "Tar descriptor for a member extracted from an archive.") nil [5759 5854])
            ("tar-file-name-coding-system" variable nil nil [5855 5895])
            ("put" code nil nil [5897 5942])
            ("put" code nil nil [5943 5992])
            ("tar-data-buffer" variable (:documentation "Buffer that holds the actual raw tar bytes.") nil [6909 6983])
            ("make-variable-buffer-local" code nil nil [6984 7029])
            ("tar-data-swapped" variable (:documentation "If non-nil, `tar-data-buffer' indeed holds raw tar bytes.") nil [7031 7122])
            ("make-variable-buffer-local" code nil nil [7123 7169])
            ("tar-data-swapped-p" function (:documentation "Return non-nil if the tar-data is in `tar-data-buffer'.") nil [7171 7694])
            ("tar-swap-data" function (:documentation "Swap buffer contents between current buffer and `tar-data-buffer'.
Preserve the modified states of the buffers and set `buffer-swapped-with'.") nil [7696 8233])
            ("cl-defstruct" code nil nil [8259 8803])
            ("tar-name-offset" variable (:constant-flag t) nil [8805 8833])
            ("tar-mode-offset" variable
               (:constant-flag t
                :default-value (+ tar-name-offset 100))
                nil [8834 8884])
            ("tar-uid-offset" variable
               (:constant-flag t
                :default-value (+ tar-mode-offset 8))
                nil [8885 8933])
            ("tar-gid-offset" variable
               (:constant-flag t
                :default-value (+ tar-uid-offset 8))
                nil [8934 8981])
            ("tar-size-offset" variable
               (:constant-flag t
                :default-value (+ tar-gid-offset 8))
                nil [8982 9029])
            ("tar-time-offset" variable
               (:constant-flag t
                :default-value (+ tar-size-offset 12))
                nil [9030 9079])
            ("tar-chk-offset" variable
               (:constant-flag t
                :default-value (+ tar-time-offset 12))
                nil [9080 9129])
            ("tar-linkp-offset" variable
               (:constant-flag t
                :default-value (+ tar-chk-offset 8))
                nil [9130 9178])
            ("tar-link-offset" variable
               (:constant-flag t
                :default-value (+ tar-linkp-offset 1))
                nil [9179 9228])
            ("tar-magic-offset" variable
               (:constant-flag t
                :default-value (+ tar-link-offset 100))
                nil [9257 9308])
            ("tar-uname-offset" variable
               (:constant-flag t
                :default-value (+ tar-magic-offset 8))
                nil [9309 9359])
            ("tar-gname-offset" variable
               (:constant-flag t
                :default-value (+ tar-uname-offset 32))
                nil [9360 9411])
            ("tar-dmaj-offset" variable
               (:constant-flag t
                :default-value (+ tar-gname-offset 32))
                nil [9412 9462])
            ("tar-dmin-offset" variable
               (:constant-flag t
                :default-value (+ tar-dmaj-offset 8))
                nil [9463 9511])
            ("tar-prefix-offset" variable
               (:constant-flag t
                :default-value (+ tar-dmin-offset 8))
                nil [9512 9562])
            ("tar-end-offset" variable
               (:constant-flag t
                :default-value (+ tar-prefix-offset 155))
                nil [9563 9614])
            ("tar-roundup-512" function
               (:documentation "Round S up to the next multiple of 512."
                :arguments ("s"))
                nil [9616 9716])
            ("tar-header-block-tokenize" function
               (:documentation "Return a `tar-header' structure.
This is a list of name, mode, uid, gid, size,
write-date, checksum, link-type, and link-name."
                :arguments ("pos" "coding"))
                nil [9718 14651])
            ("tar-header-data-end" function (:arguments ("descriptor")) nil [14670 15044])
            ("tar-parse-octal-integer" function (:arguments ("string" "start" "end")) nil [15046 15392])
            ("tar-parse-octal-long-integer" function (:arguments ("string" "start" "end")) nil [15394 15837])
            ("tar-parse-octal-integer-safe" function (:arguments ("string")) nil [15839 16080])
            ("tar-new-regular-file-header" function
               (:documentation "Return a Tar header for a regular file.
The header will lack a proper checksum; use `tar-header-block-checksum'
to compute one, or request `tar-header-serialize' to do that.

Other tar-mode facilities may also require the data-start header
field to be set to a valid value.

If SIZE is not given or nil, it defaults to 0.
If TIME is not given or nil, assume now."
                :arguments ("filename" "size" "time"))
                nil [16082 16662])
            ("tar--pad-to" function (:arguments ("pos")) nil [16664 16739])
            ("tar--put-at" function (:arguments ("pos" "val" "fmt" "mask")) nil [16741 16905])
            ("tar-header-serialize" function
               (:documentation "Return the serialization of a Tar HEADER as a string.
This function calls `tar-header-block-check-checksum' to ensure the
checksum is correct.

If UPDATE-CHECKSUM is non-nil, update HEADER with the newly-computed
checksum before doing the check."
                :arguments ("header" "update-checksum"))
                nil [16907 18930])
            ("tar-header-block-checksum" function
               (:documentation "Compute and return a tar-acceptable checksum for this block."
                :arguments ("string"))
                nil [18933 19535])
            ("tar-header-block-check-checksum" function
               (:documentation "Beep and print a warning if the checksum doesn't match."
                :arguments ("hblock" "desired-checksum" "file-name"))
                nil [19537 19814])
            ("tar-clip-time-string" function (:arguments ("time")) nil [19816 19964])
            ("tar-grind-file-mode" function
               (:documentation "Construct a `rw-r--r--' string indicating MODE.
MODE should be an integer which is a file mode value."
                :arguments ("mode"))
                nil [19966 20719])
            ("tar-header-block-summarize" function
               (:documentation "Return a line similar to the output of `tar -vtf'."
                :arguments ("tar-hblock" "mod-p"))
                nil [20721 22291])
            ("tar-untar-buffer" function
               (:documentation "Extract all archive members in the tar-file into the current directory."
                :user-visible-flag t)
                nil [22293 23670])
            ("tar-summarize-buffer" function (:documentation "Parse the contents of the tar file in the current buffer.") nil [23672 25499])
            ("tar-mode-map" variable
               (:documentation "Local keymap for Tar mode listings."
                :default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map " " 'tar-next-line) (define-key map "C" 'tar-copy) (define-key map "d" 'tar-flag-deleted) (define-key map "" 'tar-flag-deleted) (define-key map "e" 'tar-extract) (define-key map "f" 'tar-extract) (define-key map "" 'tar-extract) (define-key map [mouse-2] 'tar-mouse-extract) (define-key map "g" 'revert-buffer) (define-key map "n" 'tar-next-line) (define-key map "" 'tar-next-line) (define-key map [down] 'tar-next-line) (define-key map "o" 'tar-extract-other-window) (define-key map "p" 'tar-previous-line) (define-key map "" 'tar-previous-line) (define-key map [up] 'tar-previous-line) (define-key map "I" 'tar-new-entry) (define-key map "R" 'tar-rename-entry) (define-key map "u" 'tar-unflag) (define-key map "v" 'tar-view) (define-key map "w" 'woman-tar-extract-file) (define-key map "x" 'tar-expunge) (define-key map "" 'tar-unflag-backwards) (define-key map "E" 'tar-extract-other-window) (define-key map "M" 'tar-chmod-entry) (define-key map "G" 'tar-chgrp-entry) (define-key map "O" 'tar-chown-entry) (define-key map [follow-link] 'mouse-face) (define-key map [menu-bar edit] 'undefined) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate woman] '("Read Man Page (WoMan)" . woman-tar-extract-file)) (define-key map [menu-bar immediate view] '("View This File" . tar-view)) (define-key map [menu-bar immediate display] '("Display in Other Window" . tar-display-other-window)) (define-key map [menu-bar immediate find-file-other-window] '("Find in Other Window" . tar-extract-other-window)) (define-key map [menu-bar immediate find-file] '("Find This File" . tar-extract)) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark unmark-all] '("Unmark All" . tar-clear-modification-flags)) (define-key map [menu-bar mark deletion] '("Flag" . tar-flag-deleted)) (define-key map [menu-bar mark unmark] '("Unflag" . tar-unflag)) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate chown] '("Change Owner..." . tar-chown-entry)) (define-key map [menu-bar operate chgrp] '("Change Group..." . tar-chgrp-entry)) (define-key map [menu-bar operate chmod] '("Change Mode..." . tar-chmod-entry)) (define-key map [menu-bar operate rename] '("Rename to..." . tar-rename-entry)) (define-key map [menu-bar operate copy] '("Copy to..." . tar-copy)) (define-key map [menu-bar operate expunge] '("Expunge Marked Files" . tar-expunge)) map))
                nil [25502 28594])
            ("put" code nil nil [28657 28693])
            ("put" code nil nil [28694 28738])
            ("tar-change-major-mode-hook" function nil nil [28740 28981])
            ("tar-mode-kill-buffer-hook" function nil nil [28983 29088])
            ("define-derived-mode" code nil nil [29105 31876])
            ("woman-tar-extract-file" function
               (:documentation "In tar mode, run the WoMan man-page browser on this file."
                :prototype-flag t
                :user-visible-flag t)
                nil [31878 31984])
            ("define-minor-mode" code nil nil [31986 32748])
            ("tar-mode-revert" function (:arguments ("no-auto-save" "no-confirm")) nil [32810 33334])
            ("tar-next-line" function
               (:documentation "Move cursor vertically down ARG lines and to the start of the filename."
                :user-visible-flag t
                :arguments ("arg"))
                nil [33337 33558])
            ("tar-previous-line" function
               (:documentation "Move cursor vertically up ARG lines and to the start of the filename."
                :user-visible-flag t
                :arguments ("arg"))
                nil [33560 33711])
            ("tar-current-position" function (:documentation "Return the `tar-parse-info' index for the current line.") nil [33713 33858])
            ("tar-current-descriptor" function
               (:documentation "Return the tar-descriptor of the current line, or signals an error."
                :arguments ("noerror"))
                nil [33860 34168])
            ("tar--describe-as-link" function (:arguments ("descriptor")) nil [34170 34729])
            ("tar--check-descriptor" function (:arguments ("descriptor")) nil [34731 34905])
            ("tar-get-descriptor" function nil nil [34907 35138])
            ("tar-get-file-descriptor" function (:arguments ("file")) nil [35140 35371])
            ("tar-mouse-extract" function
               (:documentation "Extract a file whose tar directory line you click on."
                :user-visible-flag t
                :arguments ("event"))
                nil [35373 35815])
            ("tar-file-name-handler" function
               (:documentation "Helper function for `tar-extract'."
                :arguments ("op" "args"))
                nil [35817 35992])
            ("tar--extract" function
               (:documentation "Extract this entry of the tar file into its own buffer."
                :arguments ("descriptor"))
                nil [35994 38028])
            ("tar-extract" function
               (:documentation "In Tar mode, extract this entry of the tar file into its own buffer."
                :user-visible-flag t
                :arguments ("other-window-p"))
                nil [38030 40293])
            ("tar-extract-other-window" function
               (:documentation "In Tar mode, find this entry of the tar file in another window."
                :user-visible-flag t)
                nil [40296 40433])
            ("tar-display-other-window" function
               (:documentation "In Tar mode, display this entry of the tar file in another window."
                :user-visible-flag t)
                nil [40435 40582])
            ("tar-view" function
               (:documentation "In Tar mode, view the tar file entry on this line."
                :user-visible-flag t)
                nil [40584 40696])
            ("tar-read-file-name" function
               (:documentation "Read a file name with this line's entry as the default."
                :arguments ("prompt"))
                nil [40699 41329])
            ("tar-copy" function
               (:documentation "In Tar mode, extract this entry of the tar file into a file on disk.
If TO-FILE is not supplied, it is prompted for, defaulting to the name of
the current tar-entry."
                :user-visible-flag t
                :arguments ("to-file"))
                nil [41332 42616])
            ("tar-new-entry" function
               (:documentation "Insert a new empty regular file before point."
                :user-visible-flag t
                :arguments ("filename" "index"))
                nil [42618 43725])
            ("tar-flag-deleted" function
               (:documentation "In Tar mode, mark this sub-file to be deleted from the tar file.
With a prefix argument, mark that many files."
                :user-visible-flag t
                :arguments ("p" "unflag"))
                nil [43727 44165])
            ("tar-unflag" function
               (:documentation "In Tar mode, un-mark this sub-file if it is marked to be deleted.
With a prefix argument, un-mark that many files forward."
                :user-visible-flag t
                :arguments ("p"))
                nil [44167 44361])
            ("tar-unflag-backwards" function
               (:documentation "In Tar mode, un-mark this sub-file if it is marked to be deleted.
With a prefix argument, un-mark that many files backward."
                :user-visible-flag t
                :arguments ("p"))
                nil [44363 44572])
            ("tar-expunge-internal" function (:documentation "Expunge the tar-entry specified by the current line.") nil [44575 45208])
            ("tar-expunge" function
               (:documentation "In Tar mode, delete all the archived files flagged for deletion.
This does not modify the disk image; you must save the tar file itself
for this to be permanent."
                :user-visible-flag t
                :arguments ("noconfirm"))
                nil [45211 45927])
            ("tar-clear-modification-flags" function
               (:documentation "Remove the stars at the beginning of each line."
                :user-visible-flag t)
                nil [45930 46215])
            ("tar-chown-entry" function
               (:documentation "Change the user-id associated with this entry in the tar file.
If this tar file was written by GNU tar, then you will be able to edit
the user id as a string; otherwise, you must edit it as a number.
You can force editing as a number by calling this with a prefix arg.
This does not modify the disk image; you must save the tar file itself
for this to be permanent."
                :user-visible-flag t
                :arguments ("new-uid"))
                nil [46218 47436])
            ("tar-chgrp-entry" function
               (:documentation "Change the group-id associated with this entry in the tar file.
If this tar file was written by GNU tar, then you will be able to edit
the group id as a string; otherwise, you must edit it as a number.
You can force editing as a number by calling this with a prefix arg.
This does not modify the disk image; you must save the tar file itself
for this to be permanent."
                :user-visible-flag t
                :arguments ("new-gid"))
                nil [47439 48659])
            ("tar-rename-entry" function
               (:documentation "Change the name associated with this entry in the tar file.
This does not modify the disk image; you must save the tar file itself
for this to be permanent."
                :user-visible-flag t
                :arguments ("new-name"))
                nil [48661 50132])
            ("tar-chmod-entry" function
               (:documentation "Change the protection bits associated with this entry in the tar file.
This does not modify the disk image; you must save the tar file itself
for this to be permanent."
                :user-visible-flag t
                :arguments ("new-mode"))
                nil [50135 50607])
            ("tar-alter-one-field" function (:arguments ("data-position" "new-data-string" "descriptor")) nil [50610 52150])
            ("tar-octal-time" function (:arguments ("timeval")) nil [52153 52484])
            ("tar-subfile-save-buffer" function
               (:documentation "In tar subfile mode, save this buffer into its parent tar-file buffer.
This doesn't write anything to disk; you must save the parent tar-file buffer
to make your changes permanent."
                :user-visible-flag t)
                nil [52486 55607])
            ("tar-pad-to-blocksize" function (:documentation "If we are being anal about tar file blocksizes, fix up the current buffer.
Leaves the region wide.") nil [55682 56665])
            ("tar-write-region-annotate" function (:arguments ("start" "_end")) nil [56745 57099])
            ("tar-mode" package nil nil [57101 57120]))          
      :file "tar-mode.el.gz"
      :pointmax 57148
      :fsize 15539
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 4166 . 4167) (symbol 4131 . 4148) (open-paren 4130 . 4131)))
    (semanticdb-table "semanticdb-table-16d1314"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [4647 4666])
            ("tree-widget" customgroup
               (:documentation "Customization support for the Tree Widget library."
                :user-visible-flag t)
                nil [4690 4807])
            ("tree-widget-image-enable" variable
               (:documentation "Non-nil means that tree-widget will try to use images."
                :default-value (if (fboundp 'display-images-p) (display-images-p)))
                nil [4809 5036])
            ("tree-widget-themes-load-path" variable
               (:documentation "List of locations in which to search for the themes sub-directory.
Each element is an expression that will be recursively evaluated until
it returns a single directory or a list of directories.
The default is to search in the `load-path' first, then in the
\"images\" sub directory in the data directory, then in the data
directory.
The data directory is the value of the variable `data-directory' on
Emacs, and what `(locate-data-directory \"tree-widget\")' returns on
XEmacs."
                :default-value '(load-path (let ((dir (if (fboundp 'locate-data-directory) (locate-data-directory "tree-widget") data-directory))) (and dir (list dir (expand-file-name "images" dir))))))
                nil [5038 5791])
            ("tree-widget-themes-directory" variable
               (:documentation "Name of the directory in which to look for an image theme.
When nil use the directory where the tree-widget library is located.
When it is a relative name, search in all occurrences of that sub
directory in the path specified by `tree-widget-themes-load-path'.
The default is to use the \"tree-widget\" relative name."
                :default-value "tree-widget")
                nil [5793 6355])
            ("tree-widget-theme" variable (:documentation "Name of the theme in which to look for images.
This is a sub directory of the themes directory specified by the
`tree-widget-themes-directory' option.
The default theme is \"default\".  When an image is not found in a
theme, it is searched in its parent theme.

A complete theme must at least contain images with these file names
with a supported extension (see also `tree-widget-image-formats'):

\"guide\"
  A vertical guide line.
\"no-guide\"
  An invisible vertical guide line.
\"end-guide\"
  End of a vertical guide line.
\"handle\"
  Horizontal guide line that joins the vertical guide line to an icon.
\"no-handle\"
  An invisible handle.

Plus images whose name is given by the :glyph-name property of the
icon widgets used to draw the tree.  By default these images are used:

\"open\"
  Icon associated to an expanded tree.
\"close\"
  Icon associated to a collapsed tree.
\"empty\"
  Icon associated to an expanded tree with no child.
\"leaf\"
  Icon associated to a leaf node.") nil [6357 7490])
            ("tree-widget-image-properties-emacs" variable
               (:documentation "Default properties of Emacs images."
                :default-value '(:ascent center :mask (heuristic t)))
                nil [7492 7655])
            ("tree-widget-image-properties-xemacs" variable (:documentation "Default properties of XEmacs images.") nil [7657 7788])
            ("tree-widget-space-width" variable
               (:documentation "Amount of space between an icon image and a node widget.
Must be a valid space :width display property.
See Info node `(elisp)Specified Space'."
                :default-value 0.5)
                nil [7790 8090])
            ("cond" code nil nil [8170 9795])
            ("tree-widget--theme" variable nil nil [9838 9869])
            ("tree-widget-theme-name" function (:documentation "Return the current theme name, or nil if no theme is active.") nil [9871 10033])
            ("tree-widget-set-parent-theme" function
               (:documentation "Set to NAME the parent theme of the current theme.
The default parent theme is the \"default\" theme."
                :arguments ("name"))
                nil [10035 10703])
            ("tree-widget-set-theme" function
               (:documentation "In the current buffer, set the theme to use for images.
The current buffer must be where the tree widget is drawn.
Optional argument NAME is the name of the theme to use.  It defaults
to the value of the variable `tree-widget-theme'.
Does nothing if NAME is already the current theme.

If there is a \"tree-widget-theme-setup\" library in the theme
directory, load it to setup a parent theme or the images properties.
Typically it should contain something like this:

  (tree-widget-set-parent-theme \"my-parent-theme\")
  (tree-widget-set-image-properties
   (if (featurep \\='xemacs)
       \\='(:ascent center)
     \\='(:ascent center :mask (heuristic t))
     ))"
                :arguments ("name"))
                nil [10705 11706])
            ("tree-widget--locate-sub-directory" function
               (:documentation "Locate all occurrences of the sub-directory NAME in PATH.
Return a list of absolute directory names in reverse order, or nil if
not found."
                :arguments ("name" "path" "found"))
                nil [11708 12430])
            ("tree-widget-themes-path" function (:documentation "Return the path where to search for a theme.
It is specified in variable `tree-widget-themes-directory'.
Return a list of absolute directory names, or nil when no directory
has been found accessible.") nil [12432 14035])
            ("tree-widget--cursors" variable
               (:constant-flag t
                :default-value '(("guide" . arrow) ("no-guide" . arrow) ("end-guide" . arrow) ("handle" . arrow) ("no-handle" . arrow)))
                nil [14037 14378])
            ("tree-widget-set-image-properties" function
               (:documentation "In current theme, set images properties to PROPS.
Does nothing if images properties have already been set for that
theme."
                :arguments ("props"))
                nil [14380 14632])
            ("tree-widget-image-properties" function
               (:documentation "Return the properties of image NAME in current theme.
Default global properties are provided for respectively Emacs and
XEmacs in the variables `tree-widget-image-properties-emacs', and
`tree-widget-image-properties-xemacs'."
                :arguments ("name"))
                nil [14634 15215])
            ("tree-widget-lookup-image" function
               (:documentation "Look up in current theme for an image with NAME.
Search first in current theme, then in parent themes (see also the
function `tree-widget-set-parent-theme').
Return the first image found having a supported format, or nil if not
found."
                :arguments ("name"))
                nil [15217 16084])
            ("tree-widget-find-image" function
               (:documentation "Find the image with NAME in current theme.
NAME is an image file name sans extension.
Return the image found, or nil if not found."
                :arguments ("name"))
                nil [16086 16799])
            ("tree-widget-button-click" function
               (:documentation "Move to the position clicked on, and if it is a button, invoke it.
EVENT is the mouse event received."
                :user-visible-flag t
                :arguments ("event"))
                nil [16817 17129])
            ("tree-widget-button-keymap" variable
               (:documentation "Keymap used inside node buttons.
Handle mouse button 1 click on buttons."
                :default-value (let ((km (make-sparse-keymap))) (if (boundp 'widget-button-keymap) (progn (set-keymap-parent km widget-button-keymap) (define-key km [button1] 'tree-widget-button-click)) (set-keymap-parent km widget-keymap) (define-key km [down-mouse-1] 'tree-widget-button-click)) km))
                nil [17131 17596])
            ("define-widget" code nil nil [17598 17964])
            ("define-widget" code nil nil [17966 18109])
            ("define-widget" code nil nil [18111 18270])
            ("define-widget" code nil nil [18272 18417])
            ("define-widget" code nil nil [18419 18578])
            ("define-widget" code nil nil [18580 18732])
            ("define-widget" code nil nil [18734 18906])
            ("define-widget" code nil nil [18908 19076])
            ("define-widget" code nil nil [19078 19276])
            ("define-widget" code nil nil [19278 19434])
            ("define-widget" code nil nil [19436 20180])
            ("tree-widget-p" function
               (:documentation "Return non-nil if WIDGET is a tree-widget."
                :arguments ("widget"))
                nil [20215 20465])
            ("tree-widget-node" function
               (:documentation "Return WIDGET's :node child widget.
If not found, setup an `item' widget as default.
Signal an error if the :node widget is a tree-widget.
WIDGET is, or derives from, a tree-widget."
                :arguments ("widget"))
                nil [20467 21168])
            ("tree-widget-keep" function
               (:documentation "Save in ARG the WIDGET's properties specified by :keep."
                :arguments ("arg" "widget"))
                nil [21170 21362])
            ("tree-widget-children-value-save" function
               (:documentation "Save WIDGET children values.
WIDGET is, or derives from, a tree-widget.
Children properties and values are saved in ARGS if non-nil, else in
WIDGET's :args property value.  Properties and values of the
WIDGET's :node sub-widget are saved in NODE if non-nil, else in
WIDGET's :node sub-widget."
                :arguments ("widget" "args" "node"))
                nil [21364 23070])
            ("tree-widget-before-create-icon-functions" variable (:documentation "Hooks run before to create a tree-widget icon.
Each function is passed the icon widget not yet created.
The value of the icon widget :node property is a tree :node widget or
a leaf node widget, not yet created.
This hook can be used to dynamically change properties of the icon and
associated node widgets.  For example, to dynamically change the look
and feel of the tree-widget by changing the values of the :tag
and :glyph-name properties of the icon widget.
This hook should be local in the buffer setup to display widgets.") nil [23096 23681])
            ("tree-widget-icon-create" function
               (:documentation "Create the ICON widget."
                :arguments ("icon"))
                nil [23683 24311])
            ("tree-widget-convert-widget" function
               (:documentation "Convert :args as widget types in WIDGET."
                :arguments ("widget"))
                nil [24313 24612])
            ("widget-glyph-enable" variable nil nil [24614 24642])
            ("tree-widget-value-create" function
               (:documentation "Create the TREE tree-widget."
                :arguments ("tree"))
                nil [24653 29680])
            ("tree-widget-leaf-node-icon-p" function
               (:documentation "Return non-nil if ICON is a leaf node icon.
That is, if its :node property value is a leaf node widget."
                :arguments ("icon"))
                nil [29707 29905])
            ("tree-widget-icon-action" function
               (:documentation "Handle the ICON widget :action.
If ICON :node is a leaf node it handles the :action.  The tree-widget
parent of ICON handles the :action otherwise.
Pass the received EVENT to :action."
                :arguments ("icon" "event"))
                nil [29907 30312])
            ("tree-widget-icon-help-echo" function
               (:documentation "Return the help-echo string of ICON.
If ICON :node is a leaf node it handles the :help-echo.  The tree-widget
parent of ICON handles the :help-echo otherwise."
                :arguments ("icon"))
                nil [30314 30775])
            ("tree-widget-after-toggle-functions" variable (:documentation "Hooks run after toggling a tree-widget expansion.
Each function is passed a tree-widget.  If the value of the :open
property is non-nil the tree has been expanded, else collapsed.
This hook should be local in the buffer setup to display widgets.") nil [30777 31074])
            ("tree-widget-action" function
               (:documentation "Handle the :action of the TREE tree-widget.
That is, toggle expansion of the TREE tree-widget.
Ignore the EVENT argument."
                :arguments ("tree" "_event"))
                nil [31076 31595])
            ("tree-widget-help-echo" function
               (:documentation "Return the help-echo string of the TREE tree-widget."
                :arguments ("tree"))
                nil [31597 31761])
            ("tree-widget-expander-p" function
               (:documentation "Return non-nil if the TREE tree-widget :expander has to be called.
That is, if TREE :args is nil."
                :arguments ("tree"))
                nil [31763 31935])
            ("tree-widget" package nil nil [31937 31959]))          
      :file "tree-widget.el.gz"
      :pointmax 31990
      :fsize 8130
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 9798 . 9799) (symbol 8115 . 8131) (open-paren 8114 . 8115)))
    (semanticdb-table "semanticdb-table-16d1334"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [2149 2165])
            ("cl-lib" include nil nil [2166 2183])
            ("thumbs" customgroup
               (:documentation "Thumbnails previewer."
                :user-visible-flag t)
                nil [2222 2308])
            ("thumbs-thumbsdir" variable
               (:documentation "Directory to store thumbnails."
                :default-value (locate-user-emacs-file "thumbs"))
                nil [2310 2443])
            ("thumbs-geometry" variable
               (:documentation "Size of thumbnails."
                :default-value "100x100")
                nil [2445 2539])
            ("thumbs-per-line" variable
               (:documentation "Number of thumbnails per line to show in directory."
                :default-value 4)
                nil [2541 2660])
            ("thumbs-max-image-number" variable
               (:documentation "Maximum number of images initially displayed in thumbs buffer."
                :default-value 16)
                nil [2662 2800])
            ("thumbs-thumbsdir-max-size" variable
               (:documentation "Maximum size for thumbnails directory.
When it reaches that size (in bytes), a warning is sent."
                :default-value 50000000)
                nil [2802 2982])
            ("thumbs-conversion-program" variable
               (:documentation "Name of conversion program for thumbnails generation.
It must be \"convert\"."
                :default-value (if (eq system-type 'windows-nt) "convert.exe" (or (executable-find "convert") "/usr/X11R6/bin/convert")))
                nil [3226 3497])
            ("thumbs-setroot-command" variable
               (:documentation "Command to set the root window."
                :default-value "xloadimage -onroot -fullscreen *")
                nil [3499 3639])
            ("thumbs-relief" variable
               (:documentation "Size of button-like border around thumbnails."
                :default-value 5)
                nil [3641 3752])
            ("thumbs-margin" variable
               (:documentation "Size of the margin around thumbnails.
This is where you see the cursor."
                :default-value 2)
                nil [3754 3891])
            ("thumbs-thumbsdir-auto-clean" variable
               (:documentation "If set, delete older file in the thumbnails directory.
Deletion is done at load time when the directory size is bigger
than `thumbs-thumbsdir-max-size'."
                :default-value t)
                nil [3893 4125])
            ("thumbs-image-resizing-step" variable
               (:documentation "Step by which to resize image as a percentage."
                :default-value 10)
                nil [4127 4253])
            ("thumbs-temp-dir" variable
               (:documentation "Temporary directory to use.
Defaults to `temporary-file-directory'.  Leaving it to
this value can let another user see some of your images."
                :default-value temporary-file-directory)
                nil [4255 4487])
            ("thumbs-temp-prefix" variable
               (:documentation "Prefix to add to temp files."
                :default-value "emacsthumbs")
                nil [4489 4599])
            ("thumbs-current-tmp-filename" variable (:documentation "Temporary filename of current image.") nil [4645 4726])
            ("make-variable-buffer-local" code nil nil [4727 4784])
            ("thumbs-current-image-filename" variable (:documentation "Filename of current image.") nil [4786 4859])
            ("make-variable-buffer-local" code nil nil [4860 4919])
            ("thumbs-extra-images" variable
               (:documentation "Counter for showing extra images in thumbs buffer."
                :default-value 1)
                nil [4921 5006])
            ("make-variable-buffer-local" code nil nil [5007 5056])
            ("put" code nil nil [5057 5102])
            ("thumbs-current-image-size" variable (:documentation "Size of current image.") nil [5104 5169])
            ("thumbs-image-num" variable (:documentation "Number of current image.") nil [5171 5229])
            ("make-variable-buffer-local" code nil nil [5230 5276])
            ("thumbs-buffer" variable (:documentation "Name of buffer containing thumbnails associated with image.") nil [5278 5368])
            ("make-variable-buffer-local" code nil nil [5369 5412])
            ("thumbs-current-dir" variable (:documentation "Current directory.") nil [5414 5468])
            ("thumbs-marked-list" variable (:documentation "List of marked files.") nil [5470 5527])
            ("make-variable-buffer-local" code nil nil [5528 5576])
            ("put" code nil nil [5577 5621])
            ("thumbs-temp-dir" function nil nil [5623 5714])
            ("thumbs-temp-file" function (:documentation "Return a unique temporary filename for an image.") nil [5716 5904])
            ("thumbs-thumbsdir" function (:documentation "Return the current thumbnails directory (from `thumbs-thumbsdir').
Create the thumbnails directory if it does not exist.") nil [5906 6335])
            ("thumbs-cleanup-thumbsdir" function (:documentation "Clean the thumbnails directory.
If the total size of all files in `thumbs-thumbsdir' is bigger than
`thumbs-thumbsdir-max-size', files are deleted until the max size is
reached.") nil [6337 7173])
            ("when" code nil nil [7240 7303])
            ("thumbs-call-convert" function
               (:documentation "Call the convert program.
FILEIN is the input file,
FILEOUT is the output file,
ACTION is the command to send to convert.
Optional arguments are:
ARG any arguments to the ACTION command,
OUTPUT-FORMAT is the file format to output (default is jpeg),
ACTION-PREFIX is the symbol to place before the ACTION command
              (defaults to `-' but can sometimes be `+')."
                :arguments ("filein" "fileout" "action" "arg" "output-format" "action-prefix"))
                nil [7305 7944])
            ("thumbs-new-image-size" function
               (:documentation "New image (a cons of width x height)."
                :arguments ("s" "increment"))
                nil [7946 8191])
            ("thumbs-resize-image-1" function
               (:documentation "Resize image in current buffer.
If SIZE is specified use it.  Otherwise make the image larger or
smaller according to whether INCREMENT is 1 or -1."
                :arguments ("increment" "size"))
                nil [8193 8857])
            ("thumbs-resize-image" function
               (:documentation "Resize image interactively to specified WIDTH and HEIGHT."
                :user-visible-flag t
                :arguments ("width" "height"))
                nil [8859 9051])
            ("thumbs-shrink-image" function
               (:documentation "Resize image (smaller)."
                :user-visible-flag t)
                nil [9053 9156])
            ("thumbs-enlarge-image" function
               (:documentation "Resize image (bigger)."
                :user-visible-flag t)
                nil [9158 9260])
            ("thumbs-thumbname" function
               (:documentation "Return a thumbnail name for the image IMG."
                :arguments ("img"))
                nil [9262 9653])
            ("thumbs-make-thumb" function
               (:documentation "Create the thumbnail for IMG."
                :arguments ("img"))
                nil [9655 10125])
            ("thumbs-image-type" function
               (:documentation "Return image type from filename IMG."
                :arguments ("img"))
                nil [10127 10541])
            ("declare-function" code nil nil [10543 10612])
            ("thumbs-file-size" function (:arguments ("img")) nil [10614 10830])
            ("thumbs-find-thumb" function
               (:documentation "Display the thumbnail for IMG."
                :user-visible-flag t
                :arguments ("img"))
                nil [10847 10971])
            ("thumbs-insert-image" function
               (:documentation "Insert image IMG at point.
TYPE and RELIEF will be used in constructing the image; see `image'
in the emacs-lisp manual for further documentation.
If MARKED is non-nil, the image is marked."
                :arguments ("img" "type" "relief" "marked"))
                nil [10973 11475])
            ("thumbs-insert-thumb" function
               (:documentation "Insert the thumbnail for IMG at point.
If MARKED is non-nil, the image is marked."
                :arguments ("img" "marked"))
                nil [11477 11851])
            ("thumbs-do-thumbs-insertion" function
               (:documentation "Insert all thumbnails into thumbs buffer."
                :arguments ("list"))
                nil [11853 12328])
            ("thumbs-show-thumbs-list" function (:arguments ("list" "dir" "same-window")) nil [12330 12953])
            ("thumbs-show-from-dir" function
               (:documentation "Make a preview buffer for all images in DIR.
Optional argument REG to select file matching a regexp,
and SAME-WINDOW to show thumbs in the same window."
                :user-visible-flag t
                :arguments ("dir" "reg" "same-window"))
                nil [12970 13319])
            ("thumbs-dired-show-marked" function
               (:documentation "In dired, make a thumbs buffer with marked files."
                :user-visible-flag t)
                nil [13336 13500])
            ("thumbs-dired-show" function
               (:documentation "In dired, make a thumbs buffer with all files in current directory."
                :user-visible-flag t)
                nil [13517 13682])
            ("defalias" code nil nil [13699 13739])
            ("thumbs-find-image" function (:arguments ("img" "num" "otherwin")) nil [13741 14376])
            ("thumbs-find-image-at-point" function
               (:documentation "Display image IMG for thumbnail at point.
Use another window if OTHERWIN is t."
                :user-visible-flag t
                :arguments ("img" "otherwin"))
                nil [14378 14626])
            ("thumbs-find-image-at-point-other-window" function
               (:documentation "Display image for thumbnail at point in the preview buffer.
Open another window."
                :user-visible-flag t)
                nil [14628 14816])
            ("thumbs-mouse-find-image" function
               (:documentation "Display image for thumbnail at mouse click EVENT."
                :user-visible-flag t
                :arguments ("event"))
                nil [14818 14988])
            ("thumbs-call-setroot-command" function
               (:documentation "Call the setroot program for IMG."
                :arguments ("img"))
                nil [14990 15290])
            ("thumbs-set-image-at-point-to-root-window" function
               (:documentation "Set the image at point as the desktop wallpaper."
                :user-visible-flag t)
                nil [15292 15470])
            ("thumbs-set-root" function
               (:documentation "Set the current image as root."
                :user-visible-flag t)
                nil [15472 15654])
            ("thumbs-file-alist" function (:documentation "Make an alist of elements (POS . FILENAME) for all images in thumb buffer.") nil [15656 16049])
            ("thumbs-file-list" function (:documentation "Make a list of file names for all images in thumb buffer.") nil [16051 16342])
            ("thumbs-delete-images" function
               (:documentation "Delete the image at point (and its thumbnail) (or marked files if any)."
                :user-visible-flag t)
                nil [16344 17083])
            ("thumbs-rename-images" function
               (:documentation "Rename the image at point (and its thumbnail) (or marked files if any)."
                :user-visible-flag t
                :arguments ("newfile"))
                nil [17085 18115])
            ("thumbs-kill-buffer" function
               (:documentation "Kill the current buffer."
                :user-visible-flag t)
                nil [18117 18227])
            ("thumbs-show-image-num" function
               (:documentation "Show the image with number NUM."
                :arguments ("num"))
                nil [18229 18779])
            ("thumbs-previous-image" function
               (:documentation "Show the previous image."
                :user-visible-flag t)
                nil [18781 19004])
            ("thumbs-next-image" function
               (:documentation "Show the next image."
                :user-visible-flag t)
                nil [19006 19215])
            ("thumbs-display-thumbs-buffer" function
               (:documentation "Display the associated thumbs buffer."
                :user-visible-flag t)
                nil [19217 19347])
            ("thumbs-redraw-buffer" function (:documentation "Redraw the current thumbs buffer.") nil [19349 19567])
            ("thumbs-mark" function
               (:documentation "Mark the image at point."
                :user-visible-flag t)
                nil [19569 19877])
            ("thumbs-unmark" function
               (:documentation "Unmark the image at point."
                :user-visible-flag t)
                nil [19879 20221])
            ("mapc" code nil nil [20253 20335])
            ("thumbs-modify-image" function
               (:documentation "Call convert to do ACTION on image with argument ARG.
ACTION and ARG should be a valid convert command."
                :user-visible-flag t
                :arguments ("action" "arg"))
                nil [20369 20885])
            ("thumbs-emboss-image" function
               (:documentation "Emboss the image with value EMBOSS."
                :user-visible-flag t
                :arguments ("emboss"))
                nil [20887 21175])
            ("thumbs-monochrome-image" function
               (:documentation "Turn the image to monochrome."
                :user-visible-flag t)
                nil [21177 21298])
            ("thumbs-negate-image" function
               (:documentation "Negate the image."
                :user-visible-flag t)
                nil [21300 21401])
            ("thumbs-rotate-left" function
               (:documentation "Rotate the image 90 degrees counter-clockwise."
                :user-visible-flag t)
                nil [21403 21538])
            ("thumbs-rotate-right" function
               (:documentation "Rotate the image 90 degrees clockwise."
                :user-visible-flag t)
                nil [21540 21667])
            ("thumbs-current-image" function (:documentation "Return the name of the image file name at point.") nil [21669 21801])
            ("thumbs-forward-char" function
               (:documentation "Move forward one image."
                :user-visible-flag t)
                nil [21803 21992])
            ("thumbs-backward-char" function
               (:documentation "Move backward one image."
                :user-visible-flag t)
                nil [21994 22191])
            ("thumbs-backward-line" function
               (:documentation "Move up one line."
                :user-visible-flag t)
                nil [22193 22303])
            ("thumbs-forward-line" function
               (:documentation "Move down one line."
                :user-visible-flag t)
                nil [22305 22415])
            ("thumbs-show-more-images" function
               (:documentation "Show more than `thumbs-max-image-number' images, if present."
                :user-visible-flag t
                :arguments ("arg"))
                nil [22417 22652])
            ("thumbs-show-name" function
               (:documentation "Show the name of the current file."
                :user-visible-flag t)
                nil [22654 22828])
            ("thumbs-save-current-image" function
               (:documentation "Save the current image."
                :user-visible-flag t)
                nil [22830 23104])
            ("thumbs-dired" function
               (:documentation "Use `dired' on the current thumbs directory."
                :user-visible-flag t)
                nil [23106 23223])
            ("thumbs-mode-map" variable
               (:documentation "Keymap for `thumbs-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [return] 'thumbs-find-image-at-point) (define-key map [mouse-2] 'thumbs-mouse-find-image) (define-key map [(meta return)] 'thumbs-find-image-at-point-other-window) (define-key map [(control return)] 'thumbs-set-image-at-point-to-root-window) (define-key map [delete] 'thumbs-delete-images) (define-key map [right] 'thumbs-forward-char) (define-key map [left] 'thumbs-backward-char) (define-key map [up] 'thumbs-backward-line) (define-key map [down] 'thumbs-forward-line) (define-key map "+" 'thumbs-show-more-images) (define-key map "d" 'thumbs-dired) (define-key map "m" 'thumbs-mark) (define-key map "u" 'thumbs-unmark) (define-key map "R" 'thumbs-rename-images) (define-key map "x" 'thumbs-delete-images) (define-key map "s" 'thumbs-show-name) (define-key map "q" 'thumbs-kill-buffer) map))
                nil [23241 24212])
            ("put" code nil nil [24214 24253])
            ("define-derived-mode" code nil nil [24254 24385])
            ("thumbs-view-image-mode-map" variable
               (:documentation "Keymap for `thumbs-view-image-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [prior] 'thumbs-previous-image) (define-key map [next] 'thumbs-next-image) (define-key map "^" 'thumbs-display-thumbs-buffer) (define-key map "-" 'thumbs-shrink-image) (define-key map "+" 'thumbs-enlarge-image) (define-key map "<" 'thumbs-rotate-left) (define-key map ">" 'thumbs-rotate-right) (define-key map "e" 'thumbs-emboss-image) (define-key map "r" 'thumbs-resize-image) (define-key map "s" 'thumbs-save-current-image) (define-key map "q" 'thumbs-kill-buffer) (define-key map "w" 'thumbs-set-root) map))
                nil [24387 25077])
            ("put" code nil nil [25105 25155])
            ("define-derived-mode" code nil nil [25156 25265])
            ("thumbs-dired-setroot" function
               (:documentation "In dired, call the setroot program on the image at point."
                :user-visible-flag t)
                nil [25282 25444])
            ("define-key" code nil nil [25473 25527])
            ("define-key" code nil nil [25528 25589])
            ("define-key" code nil nil [25590 25647])
            ("thumbs" package nil nil [25649 25666]))          
      :file "thumbs.el.gz"
      :pointmax 25692
      :fsize 7345
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d1354"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [959 976])
            ("backtrace" include nil nil [978 998])
            ("pcase" include nil nil [1018 1034])
            ("subr-x" include nil nil [1055 1072])
            ("thread-handle-event" function
               (:documentation "Handle thread events, propagated by `thread-signal'.
An EVENT has the format
  (thread-event THREAD ERROR-SYMBOL DATA)"
                :user-visible-flag t
                :arguments ("event"))
                nil [1090 1473])
            ("make-obsolete" code nil nil [1475 1528])
            ("thread-list-refresh-seconds" variable
               (:documentation "Seconds between automatic refreshes of the *Threads* buffer."
                :default-value 0.5)
                nil [1583 1747])
            ("thread-list-mode-map" variable
               (:documentation "Local keymap for `thread-list-mode' buffers."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "b" #'thread-list-pop-to-backtrace) (define-key map "s" nil) (define-key map "sq" #'thread-list-send-quit-signal) (define-key map "se" #'thread-list-send-error-signal) (easy-menu-define nil map "" '("Threads" ["Show backtrace" thread-list-pop-to-backtrace t] ["Send Quit Signal" thread-list-send-quit-signal t] ["Send Error Signal" thread-list-send-error-signal t])) map))
                nil [1749 2350])
            ("define-derived-mode" code nil nil [2352 2755])
            ("list-threads" function
               (:documentation "Display a list of threads."
                :user-visible-flag t)
                nil [2772 3383])
            ("thread-list--timer-func" function
               (:documentation "Revert BUFFER and set a timer to do it again."
                :arguments ("buffer"))
                nil [3605 3882])
            ("thread-list--get-entries" function (:documentation "Return tabulated list entries for the currently live threads.") nil [3884 4246])
            ("thread-list--get-status" function
               (:documentation "Describe the status of THREAD.
Return a list of two strings, one describing THREAD's status, the
other describing THREAD's blocker, if any."
                :arguments ("thread"))
                nil [4248 4669])
            ("thread-list-send-quit-signal" function
               (:documentation "Send a quit signal to the thread at point."
                :user-visible-flag t)
                nil [4671 4808])
            ("thread-list-send-error-signal" function
               (:documentation "Send an error signal to the thread at point."
                :user-visible-flag t)
                nil [4810 4951])
            ("thread-list--send-signal" function
               (:documentation "Send the specified SIGNAL to the thread at point.
Ask for user confirmation before signaling the thread."
                :arguments ("signal"))
                nil [4953 5442])
            ("defvar-local" code nil nil [5444 5555])
            ("thread-list-pop-to-backtrace" function
               (:documentation "Display the backtrace for the thread at point."
                :user-visible-flag t)
                nil [5557 6362])
            ("thread-list-backtrace--revert-hook-function" function nil nil [6364 6659])
            ("cl-defun" code nil nil [6661 6788])
            ("thread-list-backtrace--insert-header" function nil nil [6790 7261])
            ("thread-list--name" function (:arguments ("thread")) nil [7263 7399])
            ("thread" package nil nil [7401 7418]))          
      :file "thread.el.gz"
      :pointmax 7443
      :fsize 2553
      :lastmodtime '(23451 3115 0 0)
      :unmatched-syntax '((close-paren 1072 . 1073) (symbol 1037 . 1054) (open-paren 1036 . 1037) (close-paren 1034 . 1035) (symbol 1000 . 1017) (open-paren 999 . 1000) (close-paren 976 . 977) (symbol 941 . 958) (open-paren 940 . 941)))
    (semanticdb-table "semanticdb-table-16d1374"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable
               (:documentation "If non-nil, Emacs startup performs terminal-specific initialization.
It does this by: (load (concat term-file-prefix (getenv \"TERM\")))

You may set this variable to nil in your init file if you do not wish
the terminal-initialization file to be loaded."
                :default-value (purecopy "term/"))
                nil [902 1354])
            ("term-file-aliases" variable
               (:documentation "Alist of terminal type aliases.
Entries are of the form (TYPE . ALIAS), where both elements are strings.
This means to treat a terminal of type TYPE as if it were of type ALIAS."
                :default-value '(("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))
                nil [1356 1940])
            ("declare-function" code nil nil [1942 2014])
            ("help-xref-stack-item" variable nil nil [2016 2045])
            ("face-name-history" variable (:documentation "History list for some commands that read face names.
Maximum length of the history list is determined by the value
of `history-length', which see.") nil [2047 2228])
            ("font-selection" customgroup
               (:documentation "Influencing face font selection."
                :user-visible-flag t)
                nil [2399 2481])
            ("face-font-selection-order" variable
               (:documentation "A list specifying how face font selection chooses fonts.
Each of the four symbols `:width', `:height', `:weight', and `:slant'
must appear once in the list, and the list must not contain any other
elements.  Font selection first tries to find a best matching font
for those face attributes that appear before in the list.  For
example, if `:slant' appears before `:height', font selection first
tries to find a font with a suitable slant, even if this results in
a font height that isn't optimal."
                :default-value '(:width :height :weight :slant))
                nil [2484 3266])
            ("face-font-family-alternatives" variable
               (:documentation "Alist of alternative font family names.
Each element has the form (FAMILY ALTERNATIVE1 ALTERNATIVE2 ...).
If fonts of family FAMILY can't be loaded, try ALTERNATIVE1, then
ALTERNATIVE2 etc."
                :default-value (mapcar (lambda (arg) (mapcar 'purecopy arg)) '(("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))
                nil [3440 5433])
            ("face-font-registry-alternatives" variable
               (:documentation "Alist of alternative font registry names.
Each element has the form (REGISTRY ALTERNATIVE1 ALTERNATIVE2 ...).
If fonts of registry REGISTRY can be loaded, font selection
tries to find a best matching font among all fonts of registry
REGISTRY, ALTERNATIVE1, ALTERNATIVE2, and etc."
                :default-value (mapcar (lambda (arg) (mapcar 'purecopy arg)) (if (featurep 'w32) '(("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")) '(("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))
                nil [5479 6543])
            ("face-list" function (:documentation "Return a list of all defined faces.") nil [6718 6819])
            ("make-face" function
               (:documentation "Define a new face with name FACE, a symbol.
Do not call this directly from Lisp code; use `defface' instead.

If FACE is already known as a face, leave it unmodified.  Return FACE."
                :user-visible-flag t
                :arguments ("face"))
                nil [6821 7522])
            ("make-empty-face" function
               (:documentation "Define a new, empty face with name FACE.
Do not call this directly from Lisp code; use `defface' instead."
                :user-visible-flag t
                :arguments ("face"))
                nil [7524 7786])
            ("copy-face" function
               (:documentation "Define a face named NEW-FACE, which is a copy of OLD-FACE.
This function does not copy face customization data, so NEW-FACE
will not be made customizable.  Most Lisp code should not call
this function; use `defface' with :inherit instead.

If NEW-FACE already exists as a face, modify it to be like
OLD-FACE.  If NEW-FACE doesn't already exist, create it.

If the optional argument FRAME is a frame, change NEW-FACE on
FRAME only.  If FRAME is t, copy the frame-independent default
specification for OLD-FACE to NEW-FACE.  If FRAME is nil, copy
the defaults as well as the faces on each existing frame.

If the optional fourth argument NEW-FRAME is given, copy the
information from face OLD-FACE on frame FRAME to NEW-FACE on
frame NEW-FRAME.  In this case, FRAME must not be nil."
                :arguments ("old-face" "new-face" "frame" "new-frame"))
                nil [7788 9039])
            ("facep" function
               (:documentation "Return non-nil if FACE is a face name; nil otherwise.
A face name can be a string or a symbol."
                :arguments ("face"))
                nil [9219 9368])
            ("check-face" function
               (:documentation "Signal an error if FACE doesn't name a face.
Value is FACE."
                :arguments ("face"))
                nil [9371 9525])
            ("face-id" function
               (:documentation "Return the internal ID of face with name FACE.
If FACE is a face-alias, return the ID of the target face.
The optional argument FRAME is ignored, since the internal face ID
of a face name is the same for all frames."
                :arguments ("face" "_frame"))
                nil [9706 10048])
            ("face-equal" function
               (:documentation "Non-nil if faces FACE1 and FACE2 are equal.
Faces are considered equal if all their attributes are equal.
If the optional argument FRAME is given, report on FACE1 and FACE2 in that frame.
If FRAME is t, report on the defaults for FACE1 and FACE2 (for new frames).
If FRAME is omitted or nil, use the selected frame."
                :arguments ("face1" "face2" "frame"))
                nil [10050 10467])
            ("face-differs-from-default-p" function
               (:documentation "Return non-nil if FACE displays differently from the default face.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame."
                :arguments ("face" "frame"))
                nil [10470 11183])
            ("face-nontrivial-p" function
               (:documentation "True if face FACE has some non-nil attribute.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame."
                :arguments ("face" "frame"))
                nil [11186 11530])
            ("face-list-p" function
               (:documentation "True if FACE-OR-LIST is a list of faces.
Return nil if FACE-OR-LIST is a non-nil atom, or a cons cell whose car
is either `foreground-color', `background-color', or a keyword."
                :arguments ("face-or-list"))
                nil [11533 11962])
            ("face-x-resources" variable
               (:documentation "List of X resources and classes for face attributes.
Each element has the form (ATTRIBUTE ENTRY1 ENTRY2...) where ATTRIBUTE is
the name of a face attribute, and each ENTRY is a cons of the form
(RESOURCE . CLASS) with RESOURCE being the resource and CLASS being the
X resource class for the attribute."
                :default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) '((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))
                nil [12160 14052])
            ("declare-function" code nil nil [14055 14150])
            ("declare-function" code nil nil [14152 14266])
            ("set-face-attribute-from-resource" function
               (:documentation "Set FACE's ATTRIBUTE from X resource RESOURCE, class CLASS on FRAME.
Value is the attribute value specified by the resource, or nil
if not present.  This function displays a message if the resource
specifies an invalid attribute."
                :arguments ("face" "attribute" "resource" "class" "frame"))
                nil [14268 14977])
            ("set-face-attributes-from-resources" function
               (:documentation "Set attributes of FACE from X resources for FRAME."
                :arguments ("face" "frame"))
                nil [14980 15343])
            ("make-face-x-resource-internal" function
               (:documentation "Fill frame-local FACE on FRAME from X resources.
FRAME nil or not specified means do it for all frames.

If `inhibit-x-resources' is non-nil, this function does nothing."
                :arguments ("face" "frame"))
                nil [15346 15942])
            ("face-name" function
               (:documentation "Return the name of face FACE."
                :arguments ("face"))
                nil [16126 16218])
            ("face-all-attributes" function
               (:documentation "Return an alist stating the attributes of FACE.
Each element of the result has the form (ATTR-NAME . ATTR-VALUE).
If FRAME is omitted or nil the value describes the default attributes,
but if you specify FRAME, the value describes the attributes
of FACE on FRAME."
                :arguments ("face" "frame"))
                nil [16221 16687])
            ("face-attribute" function
               (:documentation "Return the value of FACE's ATTRIBUTE on FRAME.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.

If INHERIT is nil, only attributes directly defined by FACE are considered,
  so the return value may be `unspecified', or a relative value.
If INHERIT is non-nil, FACE's definition of ATTRIBUTE is merged with the
  faces specified by its `:inherit' attribute; however the return value
  may still be `unspecified' or relative.
If INHERIT is a face or a list of faces, then the result is further merged
  with that face (or faces), until it becomes specified and absolute.

To ensure that the return value is always specified and absolute, use a
value of `default' for INHERIT; this will resolve any unspecified or
relative values by merging with the `default' face (which is always
completely specified)."
                :arguments ("face" "attribute" "frame" "inherit"))
                nil [16689 18503])
            ("face-attribute-merged-with" function
               (:documentation "Merges ATTRIBUTE, initially VALUE, with faces from FACES until absolute.
FACES may be either a single face or a list of faces.
[This is an internal function.]"
                :arguments ("attribute" "value" "faces" "frame"))
                nil [18505 19093])
            ("face-attribute-specified-or" function
               (:documentation "Return VALUE, unless it's `unspecified', in which case evaluate BODY and return the result."
                :arguments ("value" "body"))
                nil [19096 19377])
            ("face-foreground" function
               (:documentation "Return the foreground color name of FACE, or nil if unspecified.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.

If INHERIT is nil, only a foreground color directly defined by FACE is
  considered, so the return value may be nil.
If INHERIT is t, and FACE doesn't define a foreground color, then any
  foreground color that FACE inherits through its `:inherit' attribute
  is considered as well; however the return value may still be nil.
If INHERIT is a face or a list of faces, then it is used to try to
  resolve an unspecified foreground color.

To ensure that a valid color is always returned, use a value of
`default' for INHERIT; this will resolve any unspecified values by
merging with the `default' face (which is always completely specified)."
                :arguments ("face" "frame" "inherit"))
                nil [19379 20435])
            ("face-background" function
               (:documentation "Return the background color name of FACE, or nil if unspecified.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.

If INHERIT is nil, only a background color directly defined by FACE is
  considered, so the return value may be nil.
If INHERIT is t, and FACE doesn't define a background color, then any
  background color that FACE inherits through its `:inherit' attribute
  is considered as well; however the return value may still be nil.
If INHERIT is a face or a list of faces, then it is used to try to
  resolve an unspecified background color.

To ensure that a valid color is always returned, use a value of
`default' for INHERIT; this will resolve any unspecified values by
merging with the `default' face (which is always completely specified)."
                :arguments ("face" "frame" "inherit"))
                nil [20437 21493])
            ("face-stipple" function
               (:documentation "Return the stipple pixmap name of FACE, or nil if unspecified.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.

If INHERIT is nil, only a stipple directly defined by FACE is
  considered, so the return value may be nil.
If INHERIT is t, and FACE doesn't define a stipple, then any stipple
  that FACE inherits through its `:inherit' attribute is considered as
  well; however the return value may still be nil.
If INHERIT is a face or a list of faces, then it is used to try to
  resolve an unspecified stipple.

To ensure that a valid stipple or nil is always returned, use a value of
`default' for INHERIT; this will resolve any unspecified values by merging
with the `default' face (which is always completely specified)."
                :arguments ("face" "frame" "inherit"))
                nil [21495 22515])
            ("defalias" code nil nil [22518 22566])
            ("face-underline-p" function
               (:documentation "Return non-nil if FACE specifies a non-nil underlining.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.
Optional argument INHERIT is passed to `face-attribute'."
                :arguments ("face" "frame" "inherit"))
                nil [22569 23022])
            ("face-inverse-video-p" function
               (:documentation "Return non-nil if FACE specifies a non-nil inverse-video.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.
Optional argument INHERIT is passed to `face-attribute'."
                :arguments ("face" "frame" "inherit"))
                nil [23025 23459])
            ("face-bold-p" function
               (:documentation "Return non-nil if the font of FACE is bold on FRAME.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.
Optional argument INHERIT is passed to `face-attribute'.
Use `face-attribute' for finer control."
                :arguments ("face" "frame" "inherit"))
                nil [23462 23981])
            ("face-italic-p" function
               (:documentation "Return non-nil if the font of FACE is italic on FRAME.
If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.
Optional argument INHERIT is passed to `face-attribute'.
Use `face-attribute' for finer control."
                :arguments ("face" "frame" "inherit"))
                nil [23984 24488])
            ("face-documentation" function
               (:documentation "Get the documentation string for FACE.
If FACE is a face-alias, get the documentation for the target face."
                :arguments ("face"))
                nil [24664 25086])
            ("set-face-documentation" function
               (:documentation "Set the documentation string for FACE to STRING."
                :arguments ("face" "string"))
                nil [25089 25277])
            ("defalias" code nil nil [25280 25327])
            ("defalias" code nil nil [25328 25383])
            ("set-face-attribute" function
               (:documentation "Set attributes of FACE on FRAME from ARGS.
This function overrides the face attributes specified by FACE's
face spec.  It is mostly intended for internal use only.

If FRAME is nil, set the attributes for all existing frames, as
well as the default for new frames.  If FRAME is t, change the
default for new frames only.

ARGS must come in pairs ATTRIBUTE VALUE.  ATTRIBUTE must be a
valid face attribute name.  All attributes can be set to
`unspecified'; this fact is not further mentioned below.

The following attributes are recognized:

`:family'

VALUE must be a string specifying the font family
(e.g. \"Monospace\").

`:foundry'

VALUE must be a string specifying the font foundry,
e.g., \"adobe\".  If a font foundry is specified, wild-cards `*'
and `?' are allowed.

`:width'

VALUE specifies the relative proportionate width of the font to use.
It must be one of the symbols `ultra-condensed', `extra-condensed',
`condensed', `semi-condensed', `normal', `semi-expanded', `expanded',
`extra-expanded', or `ultra-expanded'.

`:height'

VALUE specifies the relative or absolute height of the font.  An
absolute height is an integer, and specifies font height in units
of 1/10 pt.  A relative height is either a floating point number,
which specifies a scaling factor for the underlying face height;
or a function that takes a single argument (the underlying face
height) and returns the new height.  Note that for the `default'
face, you must specify an absolute height (since there is nothing
for it to be relative to).

`:weight'

VALUE specifies the weight of the font to use.  It must be one of the
symbols `ultra-bold', `extra-bold', `bold', `semi-bold', `normal',
`semi-light', `light', `extra-light', `ultra-light'.

`:slant'

VALUE specifies the slant of the font to use.  It must be one of the
symbols `italic', `oblique', `normal', `reverse-italic', or
`reverse-oblique'.

`:foreground', `:background'

VALUE must be a color name, a string.

`:underline'

VALUE specifies whether characters in FACE should be underlined.
If VALUE is t, underline with foreground color of the face.
If VALUE is a string, underline with that color.
If VALUE is nil, explicitly don't underline.

Otherwise, VALUE must be a property list of the form:

`(:color COLOR :style STYLE)'.

COLOR can be either a color name string or `foreground-color'.
STYLE can be either `line' or `wave'.
If a keyword/value pair is missing from the property list, a
default value will be used for the value.
The default value of COLOR is the foreground color of the face.
The default value of STYLE is `line'.

`:overline'

VALUE specifies whether characters in FACE should be overlined.  If
VALUE is t, overline with foreground color of the face.  If VALUE is a
string, overline with that color.  If VALUE is nil, explicitly don't
overline.

`:strike-through'

VALUE specifies whether characters in FACE should be drawn with a line
striking through them.  If VALUE is t, use the foreground color of the
face.  If VALUE is a string, strike-through with that color.  If VALUE
is nil, explicitly don't strike through.

`:box'

VALUE specifies whether characters in FACE should have a box drawn
around them.  If VALUE is nil, explicitly don't draw boxes.  If
VALUE is t, draw a box with lines of width 1 in the foreground color
of the face.  If VALUE is a string, the string must be a color name,
and the box is drawn in that color with a line width of 1.  Otherwise,
VALUE must be a property list of the form `(:line-width WIDTH
:color COLOR :style STYLE)'.  If a keyword/value pair is missing from
the property list, a default value will be used for the value, as
specified below.  WIDTH specifies the width of the lines to draw; it
defaults to 1.  If WIDTH is negative, the absolute value is the width
of the lines, and draw top/bottom lines inside the characters area,
not around it.  COLOR is the name of the color to draw in, default is
the foreground color of the face for simple boxes, and the background
color of the face for 3D boxes.  STYLE specifies whether a 3D box
should be draw.  If STYLE is `released-button', draw a box looking
like a released 3D button.  If STYLE is `pressed-button' draw a box
that appears like a pressed button.  If STYLE is nil, the default if
the property list doesn't contain a style specification, draw a 2D
box.

`:inverse-video'

VALUE specifies whether characters in FACE should be displayed in
inverse video.  VALUE must be one of t or nil.

`:stipple'

If VALUE is a string, it must be the name of a file of pixmap data.
The directories listed in the `x-bitmap-file-path' variable are
searched.  Alternatively, VALUE may be a list of the form (WIDTH
HEIGHT DATA) where WIDTH and HEIGHT are the size in pixels, and DATA
is a string containing the raw bits of the bitmap.  VALUE nil means
explicitly don't use a stipple pattern.

For convenience, attributes `:family', `:foundry', `:width',
`:height', `:weight', and `:slant' may also be set in one step
from an X font name:

`:font'

Set font-related face attributes from VALUE.
VALUE must be a valid font name or font object.  It can also
be a fontset name.  Setting this attribute will also set
the `:family', `:foundry', `:width', `:height', `:weight',
and `:slant' attributes.

`:inherit'

VALUE is the name of a face from which to inherit attributes, or
a list of face names.  Attributes from inherited faces are merged
into the face like an underlying face would be, with higher
priority than underlying faces.

For backward compatibility, the keywords `:bold' and `:italic'
can be used to specify weight and slant respectively.  This usage
is considered obsolete.  For these two keywords, the VALUE must
be either t or nil.  A value of t for `:bold' is equivalent to
setting `:weight' to `bold', and a value of t for `:italic' is
equivalent to setting `:slant' to `italic'.  But if `:weight' is
specified in the face spec, `:bold' is ignored, and if `:slant'
is specified, `:italic' is ignored."
                :arguments ("face" "frame" "args"))
                nil [25564 33275])
            ("make-face-bold" function
               (:documentation "Make the font of FACE be bold, if possible.
FRAME nil or not specified means change face on all frames.
Argument NOERROR is ignored and retained for compatibility.
Use `set-face-attribute' for finer control of the font weight."
                :user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33277 33728])
            ("make-face-unbold" function
               (:documentation "Make the font of FACE be non-bold, if possible.
FRAME nil or not specified means change face on all frames.
Argument NOERROR is ignored and retained for compatibility."
                :user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33731 34131])
            ("make-face-italic" function
               (:documentation "Make the font of FACE be italic, if possible.
FRAME nil or not specified means change face on all frames.
Argument NOERROR is ignored and retained for compatibility.
Use `set-face-attribute' for finer control of the font slant."
                :user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34134 34591])
            ("make-face-unitalic" function
               (:documentation "Make the font of FACE be non-italic, if possible.
FRAME nil or not specified means change face on all frames.
Argument NOERROR is ignored and retained for compatibility."
                :user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34594 34999])
            ("make-face-bold-italic" function
               (:documentation "Make the font of FACE be bold and italic, if possible.
FRAME nil or not specified means change face on all frames.
Argument NOERROR is ignored and retained for compatibility.
Use `set-face-attribute' for finer control of font weight and slant."
                :user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [35002 35499])
            ("set-face-font" function
               (:documentation "Change font-related attributes of FACE to those of FONT (a string).
FRAME nil or not specified means change face on all frames.
This sets the attributes `:family', `:foundry', `:width',
`:height', `:weight', and `:slant'.  When called interactively,
prompt for the face and font."
                :user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35502 35928])
            ("set-face-background" function
               (:documentation "Change the background color of face FACE to COLOR (a string).
FRAME nil or not specified means change face on all frames.
COLOR can be a system-defined color name (see `list-colors-display')
or a hex spec of the form #RRGGBB.
When called interactively, prompts for the face and color."
                :user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36134 36603])
            ("set-face-foreground" function
               (:documentation "Change the foreground color of face FACE to COLOR (a string).
FRAME nil or not specified means change face on all frames.
COLOR can be a system-defined color name (see `list-colors-display')
or a hex spec of the form #RRGGBB.
When called interactively, prompts for the face and color."
                :user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36606 37075])
            ("set-face-stipple" function
               (:documentation "Change the stipple pixmap of face FACE to STIPPLE.
FRAME nil or not specified means change face on all frames.
STIPPLE should be a string, the name of a file of pixmap data.
The directories listed in the `x-bitmap-file-path' variable are searched.

Alternatively, STIPPLE may be a list of the form (WIDTH HEIGHT DATA)
where WIDTH and HEIGHT are the size in pixels,
and DATA is a string, containing the raw bits of the bitmap."
                :user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [37078 37683])
            ("set-face-underline" function
               (:documentation "Specify whether face FACE is underlined.
UNDERLINE nil means FACE explicitly doesn't underline.
UNDERLINE t means FACE underlines with its foreground color.
If UNDERLINE is a string, underline with that color.

UNDERLINE may also be a list of the form (:color COLOR :style STYLE),
where COLOR is a string or `foreground-color', and STYLE is either
`line' or `wave'.  :color may be omitted, which means to use the
foreground color.  :style may be omitted, which means to use a line.

FRAME nil or not specified means change face on all frames.
Use `set-face-attribute' to \"unspecify\" underlining."
                :user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37686 38455])
            ("define-obsolete-function-alias" code nil nil [38457 38570])
            ("set-face-inverse-video" function
               (:documentation "Specify whether face FACE is in inverse video.
INVERSE-VIDEO-P non-nil means FACE displays explicitly in inverse video.
INVERSE-VIDEO-P nil means FACE explicitly is not in inverse video.
FRAME nil or not specified means change face on all frames.
Use `set-face-attribute' to \"unspecify\" the inverse video attribute."
                :user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38573 39146])
            ("define-obsolete-function-alias" code nil nil [39148 39269])
            ("set-face-bold" function
               (:documentation "Specify whether face FACE is bold.
BOLD-P non-nil means FACE should explicitly display bold.
BOLD-P nil means FACE should explicitly display non-bold.
FRAME nil or not specified means change face on all frames.
Use `set-face-attribute' or `modify-face' for finer control."
                :arguments ("face" "bold-p" "frame"))
                nil [39271 39687])
            ("define-obsolete-function-alias" code nil nil [39689 39760])
            ("set-face-italic" function
               (:documentation "Specify whether face FACE is italic.
ITALIC-P non-nil means FACE should explicitly display italic.
ITALIC-P nil means FACE should explicitly display non-italic.
FRAME nil or not specified means change face on all frames.
Use `set-face-attribute' or `modify-face' for finer control."
                :arguments ("face" "italic-p" "frame"))
                nil [39763 40199])
            ("define-obsolete-function-alias" code nil nil [40201 40276])
            ("defalias" code nil nil [40279 40335])
            ("invert-face" function
               (:documentation "Swap the foreground and background colors of FACE.
If FRAME is omitted or nil, it means change face on all frames.
If FACE specifies neither foreground nor background color,
set its foreground and background to the background and foreground
of the default face.  Value is FACE."
                :user-visible-flag t
                :arguments ("face" "frame"))
                nil [40338 41138])
            ("crm-separator" variable nil nil [41324 41346])
            ("read-face-name" function
               (:documentation "Read one or more face names, prompting with PROMPT.
PROMPT should not end in a space or a colon.

If DEFAULT is non-nil, it should be a face (a symbol) or a face
name (a string).  It can also be a list of faces or face names.

If MULTIPLE is non-nil, the return value from this function is a
list of faces.  Otherwise a single face is returned.

If the user enter the empty string at the prompt, DEFAULT is
returned after a possible transformation according to MULTIPLE.
That is, if DEFAULT is a list and MULTIPLE is nil, the first
element of DEFAULT is returned.  If DEFAULT isn't a list, but
MULTIPLE is non-nil, a one-element list containing DEFAULT is
returned.  Otherwise, DEFAULT is returned verbatim."
                :arguments ("prompt" "default" "multiple"))
                nil [41362 44220])
            ("x-bitmap-file-path" variable nil nil [44279 44306])
            ("face-valid-attribute-values" function
               (:documentation "Return valid values for face attribute ATTRIBUTE.
The optional argument FRAME is used to determine available fonts
and colors.  If it is nil or not specified, the selected frame is used.
Value is an alist of (NAME . VALUE) if ATTRIBUTE expects a value out
of a set of discrete values.  Value is `integerp' if ATTRIBUTE expects
an integer value."
                :arguments ("attribute" "frame"))
                nil [44308 46997])
            ("face-attribute-name-alist" variable
               (:documentation "An alist of descriptive names for face attributes.
Each element has the form (ATTRIBUTE-NAME . DESCRIPTION) where
ATTRIBUTE-NAME is a face attribute name (a keyword symbol), and
DESCRIPTION is a descriptive name for ATTRIBUTE-NAME."
                :constant-flag t
                :default-value '((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance")))
                nil [47000 47770])
            ("face-descriptive-attribute-name" function
               (:documentation "Return a descriptive name for ATTRIBUTE."
                :arguments ("attribute"))
                nil [47773 47920])
            ("face-read-string" function
               (:documentation "Interactively read a face attribute string value.
FACE is the face whose attribute is read.  If non-nil, DEFAULT is the
default string to return if no new value is entered.  NAME is a
descriptive name of the attribute for prompting.  COMPLETION-ALIST is an
alist of valid values, if non-nil.

Entering nothing accepts the default string DEFAULT.
Value is the new attribute value."
                :arguments ("face" "default" "name" "completion-alist"))
                nil [47923 48938])
            ("face-read-integer" function
               (:documentation "Interactively read an integer face attribute value.
FACE is the face whose attribute is read.  DEFAULT is the default
value to return if no new value is entered.  NAME is a descriptive
name of the attribute for prompting.  Value is the new attribute value."
                :arguments ("face" "default" "name"))
                nil [48941 49558])
            ("read-face-attribute" function
               (:documentation "Interactively read a new value for FACE's ATTRIBUTE.
Optional argument FRAME nil or unspecified means read an attribute value
of a global face.  Value is the new attribute value."
                :arguments ("face" "attribute" "frame"))
                nil [49719 52060])
            ("declare-function" code nil nil [52062 52108])
            ("declare-function" code nil nil [52109 52200])
            ("read-face-font" function
               (:documentation "Read the name of a font for FACE on FRAME.
If optional argument FRAME is nil or omitted, use the selected frame."
                :arguments ("face" "frame"))
                nil [52202 52574])
            ("read-all-face-attributes" function
               (:documentation "Interactively read all attributes for FACE.
If optional argument FRAME is nil or omitted, use the selected frame.
Value is a property list of attribute names and new values."
                :arguments ("face" "frame"))
                nil [52577 53005])
            ("modify-face" function
               (:documentation "Modify attributes of faces interactively.
If optional argument FRAME is nil or omitted, modify the face used
for newly created frame, i.e. the global face.
For non-interactive use, `set-face-attribute' is preferred.
When called from Lisp, if FACE is nil, all arguments but FRAME are ignored
and the face and its settings are obtained by querying the user."
                :user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [53007 53952])
            ("read-face-and-attribute" function
               (:documentation "Read face name and face attribute value.
ATTRIBUTE is the attribute whose new value is read.
FRAME nil or unspecified means read attribute value of global face.
Value is a list (FACE NEW-VALUE) where FACE is the face read
(a symbol), and NEW-VALUE is value read."
                :arguments ("attribute" "frame"))
                nil [53954 54743])
            ("list-faces-sample-text" variable
               (:documentation "Text string to display as the sample text for `list-faces-display'."
                :constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54914 55077])
            ("help-xref-stack" variable nil nil [55206 55230])
            ("list-faces-display" function
               (:documentation "List all faces, using the same sample text in each.
The sample text is a string that comes from the variable
`list-faces-sample-text'.

If REGEXP is non-nil, list only those faces with names matching
this regular expression.  When called interactively with a prefix
argument, prompt for a regular expression using `read-regexp'."
                :user-visible-flag t
                :arguments ("regexp"))
                nil [55231 58266])
            ("describe-face" function
               (:documentation "Display the properties of face FACE on FRAME.
Interactively, FACE defaults to the faces of the character after point
and FRAME defaults to the selected frame.

If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame."
                :user-visible-flag t
                :arguments ("face" "frame"))
                nil [58269 62402])
            ("face-attr-construct" function
               (:documentation "Return a `defface'-style attribute list for FACE.
Value is a property list of pairs ATTRIBUTE VALUE for all specified
face attributes of FACE where ATTRIBUTE is the attribute name and
VALUE is the specified value of that attribute.
Argument FRAME is ignored and retained for compatibility."
                :arguments ("face" "_frame"))
                nil [62680 63270])
            ("face-spec-set-match-display" function
               (:documentation "Non-nil if DISPLAY matches FRAME.
DISPLAY is part of a spec such as can be used in `defface'.
If FRAME is nil, the current FRAME is used."
                :arguments ("display" "frame"))
                nil [63273 65075])
            ("face-spec-choose" function
               (:documentation "Return the proper attributes for FRAME, out of SPEC.

Value is a plist of face attributes in the form of attribute-value pairs.
If no match is found or SPEC is nil, return nil, unless NO-MATCH-RETVAL
is given, in which case return its value instead."
                :arguments ("spec" "frame" "no-match-retval"))
                nil [65078 66573])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply 'append (mapcar (lambda (x) (list (car x) 'unspecified)) face-attribute-name-alist)))
                nil [66753 66912])
            ("face-spec-reset-face" function
               (:documentation "Reset all attributes of FACE on FRAME to unspecified."
                :arguments ("face" "frame"))
                nil [66914 67987])
            ("face-spec-set" function
               (:documentation "Set the FACE's spec SPEC, define FACE, and recalculate its attributes.
See `defface' for the format of SPEC.

The appearance of each face is controlled by its specs (set via
this function), and by the internal frame-specific face
attributes (set via `set-face-attribute').

This function also defines FACE as a valid face name if it is not
already one, and (re)calculates its attributes on existing
frames.

The optional argument SPEC-TYPE determines which spec to set:
  nil, omitted or `face-override-spec' means the override spec,
    which overrides all the other types of spec mentioned below
    (this is usually what you want if calling this function
    outside of Custom code);
  `customized-face' or `saved-face' means the customized spec or
    the saved custom spec;
  `face-defface-spec' means the default spec
    (usually set only via `defface');
  `reset' means to ignore SPEC, but clear the `customized-face'
    and `face-override-spec' specs;
Any other value means not to set any spec, but to run the
function for defining FACE and recalculating its attributes."
                :arguments ("face" "spec" "spec-type"))
                nil [67989 70092])
            ("face-spec-recalc" function
               (:documentation "Reset the face attributes of FACE on FRAME according to its specs.
The following sources are applied in this order:

  face reset to default values if it's the default face, otherwise set
  to unspecified (through `face-spec-reset-face')
   |
  (theme and user customization)
    or: if none of the above exist, and none match the current frame or
        inherited from the defface spec instead of overwriting it
        entirely, the following is applied instead:
  (defface default spec)
  (X resources (if applicable))
   |
  defface override spec"
                :arguments ("face" "frame"))
                nil [70094 71807])
            ("face-spec-set-2" function
               (:documentation "Set the face attributes of FACE on FRAME according to FACE-ATTRS.
FACE-ATTRS is a plist of face attributes in the form of attribute-value
pairs."
                :arguments ("face" "frame" "face-attrs"))
                nil [71809 72263])
            ("face-attr-match-p" function
               (:documentation "Return t if attributes of FACE match values in plist ATTRS.
Optional parameter FRAME is the frame whose definition of FACE
is used.  If nil or omitted, use the selected frame."
                :arguments ("face" "attrs" "frame"))
                nil [72265 73339])
            ("face-spec-match-p" function
               (:documentation "Return t if FACE, on FRAME, matches what SPEC says it should look like."
                :arguments ("face" "spec" "frame"))
                nil [73341 73536])
            ("face-default-spec" function
               (:documentation "Return the default face-spec for FACE, ignoring any user customization.
If there is no default for FACE, return nil."
                :arguments ("face"))
                nil [73538 73726])
            ("face-user-default-spec" function
               (:documentation "Return the user's customized face-spec for FACE, or the default if none.
If there is neither a user setting nor a default for FACE, return nil."
                :arguments ("face"))
                nil [73728 74011])
            ("defined-colors" function
               (:documentation "Return a list of colors supported for a particular frame.
The argument FRAME specifies which frame to try.
The value may be different for frames on different display types.
If FRAME doesn't support colors, the value is nil.
If FRAME is nil, that stands for the selected frame."
                :arguments ("frame"))
                nil [74269 74727])
            ("defalias" code nil nil [74728 74772])
            ("defined-colors-with-face-attributes" function
               (:documentation "Return a list of colors supported for a particular frame.
See `defined-colors' for arguments and return value. In contrast
to `define-colors' the elements of the returned list are color
strings with text properties, that make the color names render
with the color they represent as background color."
                :arguments ("frame"))
                nil [74774 75399])
            ("readable-foreground-color" function
               (:documentation "Return a readable foreground color for background COLOR."
                :arguments ("color"))
                nil [75401 75828])
            ("declare-function" code nil nil [75830 75900])
            ("color-defined-p" function
               (:documentation "Return non-nil if COLOR is supported on frame FRAME.
COLOR should be a string naming a color (e.g. \"white\"), or a
string specifying a color's RGB components (e.g. \"#ff12ec\"), or
the symbol `unspecified'.

This function returns nil if COLOR is the symbol `unspecified',
or one of the strings \"unspecified-fg\" or \"unspecified-bg\".

If FRAME is omitted or nil, use the selected frame."
                :arguments ("color" "frame"))
                nil [75902 76569])
            ("defalias" code nil nil [76570 76616])
            ("declare-function" code nil nil [76618 76685])
            ("color-values" function
               (:documentation "Return a description of the color named COLOR on frame FRAME.
COLOR should be a string naming a color (e.g. \"white\"), or a
string specifying a color's RGB components (e.g. \"#ff12ec\").

Return a list of three integers, (RED GREEN BLUE), each between 0
and either 65280 or 65535 (the maximum depends on the system).
Use `color-name-to-rgb' if you want RGB floating-point values
normalized to 1.0.

If FRAME is omitted or nil, use the selected frame.
If FRAME cannot display COLOR, the value is nil.

COLOR can also be the symbol `unspecified' or one of the strings
\"unspecified-fg\" or \"unspecified-bg\", in which case the
return value is nil."
                :arguments ("color" "frame"))
                nil [76687 77606])
            ("defalias" code nil nil [77608 77648])
            ("declare-function" code nil nil [77650 77717])
            ("display-color-p" function
               (:documentation "Return t if DISPLAY supports color.
The optional argument DISPLAY specifies which display to ask about.
DISPLAY should be either a frame or a display name (a string).
If omitted or nil, that stands for the selected frame's display."
                :arguments ("display"))
                nil [77719 78121])
            ("defalias" code nil nil [78122 78168])
            ("declare-function" code nil nil [78170 78240])
            ("display-grayscale-p" function
               (:documentation "Return non-nil if frames on DISPLAY can display shades of gray.
DISPLAY should be either a frame or a display name (a string).
If omitted or nil, that stands for the selected frame's display."
                :arguments ("display"))
                nil [78242 78675])
            ("read-color" function
               (:documentation "Read a color name or RGB triplet.
Completion is available for color names, but not for RGB triplets.

RGB triplets have the form \"#RRGGBB\".  Each of the R, G, and B
components can have one to four digits, but all three components
must have the same number of digits.  Each digit is a hex value
between 0 and F; either upper case or lower case for A through F
are acceptable.

In addition to standard color names and RGB hex values, the
following are available as color candidates.  In each case, the
corresponding color is used.

 * `foreground at point'   - foreground under the cursor
 * `background at point'   - background under the cursor

Optional arg PROMPT is the prompt; if nil, use a default prompt.

Interactively, or with optional arg CONVERT-TO-RGB-P non-nil,
convert an input color name to an RGB hex string.  Return the RGB
hex string.

If optional arg ALLOW-EMPTY-NAME is non-nil, the user is allowed
to enter an empty color name (the empty string).

Interactively, or with optional arg MSG non-nil, print the
resulting color name in the echo area."
                :user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [78677 81542])
            ("face-at-point" function
               (:documentation "Return the face of the character after point.
If it has more than one face, return the first one.
If THING is non-nil try first to get a face name from the buffer.
IF MULTIPLE is non-nil, return a list of all faces.
Return nil if there is no face."
                :arguments ("thing" "multiple"))
                nil [81544 82550])
            ("faces--attribute-at-point" function
               (:documentation "Return the face ATTRIBUTE at point.
ATTRIBUTE is a keyword.
If ATTRIBUTE-UNNAMED is non-nil, it is a symbol to look for in
unnamed faces (e.g, `foreground-color')."
                :arguments ("attribute" "attribute-unnamed"))
                nil [82552 84085])
            ("foreground-color-at-point" function (:documentation "Return the foreground color of the character after point.") nil [84087 84245])
            ("background-color-at-point" function (:documentation "Return the background color of the character after point.") nil [84247 84405])
            ("declare-function" code nil nil [84576 84621])
            ("declare-function" code nil nil [84622 84715])
            ("declare-function" code nil nil [84716 84810])
            ("declare-function" code nil nil [84811 84865])
            ("x-display-name" variable nil nil [84866 84889])
            ("x-handle-named-frame-geometry" function
               (:documentation "Add geometry parameters for a named frame to parameter list PARAMETERS.
Value is the new parameter list."
                :arguments ("parameters"))
                nil [84891 85786])
            ("x-handle-reverse-video" function
               (:documentation "Handle the reverse-video frame parameter and X resource.
`x-create-frame' does not handle this one."
                :arguments ("frame" "parameters"))
                nil [85789 86795])
            ("declare-function" code nil nil [86797 86847])
            ("declare-function" code nil nil [86848 86914])
            ("x-create-frame-with-faces" function
               (:documentation "Create and return a frame with frame parameters PARAMETERS.
If PARAMETERS specify a frame name, handle X geometry resources
for that name.  If PARAMETERS includes a `reverse' parameter, or
the X resource \"reverseVideo\" is present, handle that."
                :arguments ("parameters"))
                nil [86916 88117])
            ("face-set-after-frame-default" function
               (:documentation "Initialize the frame-local faces of FRAME.
Calculate the face definitions using the face specs, custom theme
settings, X resources, and `face-new-frame-defaults'.
Finally, apply any relevant face attributes found amongst the
frame parameters in PARAMETERS."
                :arguments ("frame" "parameters"))
                nil [88119 89516])
            ("tty-handle-reverse-video" function
               (:documentation "Handle the reverse-video frame parameter for terminal frames."
                :arguments ("frame" "parameters"))
                nil [89518 90194])
            ("tty-create-frame-with-faces" function
               (:documentation "Create and return a frame from optional frame parameters PARAMETERS.
If PARAMETERS contains a `reverse' parameter, handle that."
                :arguments ("parameters"))
                nil [90197 90956])
            ("tty-find-type" function
               (:documentation "Return the longest prefix of TYPE to which PRED returns non-nil.
TYPE should be a tty type name such as \"xterm-16color\".

The function tries only those prefixes that are followed by a
dash or underscore in the original type name, like \"xterm\" in
the above example."
                :arguments ("pred" "type"))
                nil [90958 91523])
            ("tty-setup-hook" variable (:documentation "Hook run after running the initialization function of a new text terminal.
Specifically, `tty-run-terminal-initialization' runs this.
This can be used to fine tune the `input-decode-map', for example.") nil [91525 91757])
            ("tty-run-terminal-initialization" function
               (:documentation "Run the special initialization code for the terminal type of FRAME.
The optional TYPE parameter may be used to override the autodetected
terminal type to a different value.

This consults `term-file-aliases' to map terminal types to their aliases.

If optional argument RUN-HOOK is non-nil, then as a final step,
this runs the hook `tty-setup-hook'.

If you set `term-file-prefix' to nil, this function does nothing."
                :arguments ("frame" "type" "run-hook"))
                nil [91759 93332])
            ("tty-set-up-initial-frame-faces" function nil nil [93438 93595])
            ("basic-faces" customgroup
               (:documentation "The standard faces of Emacs."
                :user-visible-flag t)
                nil [93766 93841])
            ("default" variable
               (:documentation "Basic default face."
                :default-value '((t nil))
                :type "face")
                nil [93843 93975])
            ("bold" variable
               (:documentation "Basic bold face."
                :default-value '((t :weight bold))
                :type "face")
                nil [93977 94056])
            ("italic" variable
               (:documentation "Basic italic face."
                :default-value '((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic))
                :type "face")
                nil [94058 94423])
            ("bold-italic" variable
               (:documentation "Basic bold-italic face."
                :default-value '((t :weight bold :slant italic))
                :type "face")
                nil [94425 94532])
            ("underline" variable
               (:documentation "Basic underlined face."
                :default-value '((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t))
                :type "face")
                nil [94534 94724])
            ("fixed-pitch" variable
               (:documentation "The basic fixed-pitch face."
                :default-value '((t :family "Monospace"))
                :type "face")
                nil [94726 94830])
            ("fixed-pitch-serif" variable
               (:documentation "The basic fixed-pitch face with serifs."
                :default-value '((t :family "Monospace Serif"))
                :type "face")
                nil [94832 94960])
            ("variable-pitch" variable
               (:documentation "The basic variable-pitch face."
                :default-value '((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif"))
                :type "face")
                nil [94962 95442])
            ("shadow" variable
               (:documentation "Basic face for shadowed text."
                :default-value '((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow"))
                :type "face")
                nil [95444 95882])
            ("link" variable
               (:documentation "Basic face for unvisited links."
                :default-value '((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline))
                :type "face")
                nil [95884 96351])
            ("link-visited" variable
               (:documentation "Basic face for visited links."
                :default-value '((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet"))
                :type "face")
                nil [96353 96603])
            ("highlight" variable
               (:documentation "Basic face for highlighting."
                :default-value '((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [96605 97147])
            ("region" variable
               (:documentation "Basic face for highlighting the region."
                :default-value '((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray"))
                :type "face")
                nil [97309 98235])
            ("secondary-selection" variable
               (:documentation "Basic face for displaying the secondary selection."
                :default-value '((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [98237 98785])
            ("trailing-whitespace" variable
               (:documentation "Basic face for highlighting trailing whitespace."
                :default-value '((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t))
                :type "face")
                nil [98787 99064])
            ("line-number" variable
               (:documentation "Face for displaying line numbers.
This face is used when `display-line-numbers' is non-nil.

If you customize the font of this face, make sure it is a
monospaced font, otherwise line numbers will not line up,
and text lines might move horizontally as you move through
the buffer."
                :default-value '((t :inherit (shadow default)))
                :type "face")
                nil [99102 99513])
            ("line-number-current-line" variable
               (:documentation "Face for displaying the current line number.
This face is used when `display-line-numbers' is non-nil.

If you customize the font of this face, make sure it is a
monospaced font, otherwise line numbers will not line up,
and text lines might move horizontally as you move through
the buffer.  Similarly, making this face's font different
from that of the `line-number' face could produce such
unwanted effects."
                :default-value '((t :inherit line-number))
                :type "face")
                nil [99515 100064])
            ("escape-glyph" variable
               (:documentation "Face for characters displayed as sequences using `^' or `\\'."
                :default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [100066 100496])
            ("homoglyph" variable
               (:documentation "Face for lookalike characters."
                :default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [100498 100706])
            ("nobreak-space" variable
               (:documentation "Face for displaying nobreak space."
                :default-value '((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t))
                :type "face")
                nil [100708 100968])
            ("nobreak-hyphen" variable
               (:documentation "Face for displaying nobreak hyphens."
                :default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [100970 101189])
            ("mode-line-faces" customgroup
               (:documentation "Faces used in the mode line."
                :user-visible-flag t)
                nil [101191 101308])
            ("mode-line" variable
               (:documentation "Basic mode line face for selected window."
                :default-value '((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [101310 101606])
            ("mode-line-inactive" variable
               (:documentation "Basic mode line face for non-selected windows."
                :default-value '((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30"))
                :type "face")
                nil [101608 102146])
            ("mode-line-highlight" variable
               (:documentation "Basic mode line face for highlighting."
                :default-value '((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight))
                :type "face")
                nil [102148 102422])
            ("mode-line-emphasis" variable
               (:documentation "Face used to emphasize certain mode line features.
Use the face `mode-line-highlight' for features that can be selected."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [102424 102667])
            ("mode-line-buffer-id" variable
               (:documentation "Face used for buffer identification parts of the mode line."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [102669 102852])
            ("header-line" variable
               (:documentation "Basic header-line face."
                :default-value '((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t))
                :type "face")
                nil [102854 104190])
            ("header-line-highlight" variable
               (:documentation "Basic header line face for highlighting."
                :default-value '((t :inherit highlight))
                :type "face")
                nil [104192 104334])
            ("vertical-border" variable
               (:documentation "Face used for vertical window dividers on ttys."
                :default-value '((((type tty)) :inherit mode-line-inactive))
                :type "face")
                nil [104336 104501])
            ("window-divider" variable
               (:documentation "Basic face for window dividers.
When a divider is less than 3 pixels wide, it is drawn solidly
with the foreground of this face.  For larger dividers this face
is used for the inner part while the first pixel line/column is
drawn with the `window-divider-first-pixel' face and the last
pixel line/column with the `window-divider-last-pixel' face."
                :default-value '((t :foreground "gray60"))
                :type "face")
                nil [104503 104971])
            ("window-divider-first-pixel" variable
               (:documentation "Basic face for first pixel line/column of window dividers.
When a divider is at least 3 pixels wide, its first pixel
line/column is drawn with the foreground of this face.  If you do
not want to accentuate the first pixel line/column, set this to
the same as `window-divider' face."
                :default-value '((t :foreground "gray80"))
                :type "face")
                nil [104973 105390])
            ("window-divider-last-pixel" variable
               (:documentation "Basic face for last pixel line/column of window dividers.
When a divider is at least 3 pixels wide, its last pixel
line/column is drawn with the foreground of this face.  If you do
not want to accentuate the last pixel line/column, set this to
the same as `window-divider' face."
                :default-value '((t :foreground "gray40"))
                :type "face")
                nil [105392 105805])
            ("internal-border" variable
               (:documentation "Basic face for the internal border."
                :default-value '((t nil))
                :type "face")
                nil [105807 105944])
            ("minibuffer-prompt" variable
               (:documentation "Face for minibuffer prompts.
By default, Emacs automatically adds this face to the value of
`minibuffer-prompt-properties', which is a list of text properties
used to display the prompt text."
                :default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue"))
                :type "face")
                nil [105946 106441])
            ("setq" code nil nil [106443 106554])
            ("fringe" variable
               (:documentation "Basic face for the fringes to the left and right of windows under X."
                :default-value '((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray"))
                :type "face")
                nil [106556 106868])
            ("scroll-bar" variable
               (:documentation "Basic face for the scroll bar colors under X."
                :default-value '((t nil))
                :type "face")
                nil [106870 107008])
            ("border" variable
               (:documentation "Basic face for the frame border under X."
                :default-value '((t nil))
                :type "face")
                nil [107010 107139])
            ("cursor" variable
               (:documentation "Basic face for the cursor color under X.
Currently, only the `:background' attribute is meaningful; all
other attributes are ignored.  The cursor foreground color is
taken from the background color of the underlying text.

Note: Other faces cannot inherit from the cursor face."
                :default-value '((((background light)) :background "black") (((background dark)) :background "white"))
                :type "face")
                nil [107141 107591])
            ("put" code nil nil [107593 107625])
            ("mouse" variable
               (:documentation "Basic face for the mouse color under X."
                :default-value '((t nil))
                :type "face")
                nil [107627 107753])
            ("tool-bar" variable
               (:documentation "Basic tool-bar face."
                :default-value '((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey"))
                :type "face")
                nil [107755 108045])
            ("menu" variable
               (:documentation "Basic face for the font and colors of the menu bar and popup menus."
                :default-value '((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t))
                :type "face")
                nil [108047 108291])
            ("help-argument-name" variable
               (:documentation "Face to highlight argument names in *Help* buffers."
                :default-value '((t :inherit italic))
                :type "face")
                nil [108293 108415])
            ("glyphless-char" variable
               (:documentation "Face for displaying non-graphic characters (e.g. U+202A (LRE)).
It is used for characters of no fonts too."
                :default-value '((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6))
                :type "face")
                nil [108417 108691])
            ("error" variable
               (:documentation "Basic face used to highlight errors and to denote failure."
                :default-value '((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t))
                :type "face")
                nil [108693 109223])
            ("warning" variable
               (:documentation "Basic face used to highlight warnings."
                :default-value '((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow"))
                :type "face")
                nil [109225 109459])
            ("success" variable
               (:documentation "Basic face used to indicate successful operation."
                :default-value '((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green"))
                :type "face")
                nil [109461 109880])
            ("read-multiple-choice-face" variable
               (:documentation "Face for the symbol name in `read-multiple-choice' output."
                :default-value '((t (:inherit underline :weight bold)))
                :type "face")
                nil [109882 110071])
            ("tty-menu-enabled-face" variable
               (:documentation "Face for displaying enabled items in TTY menus."
                :default-value '((t :foreground "yellow" :background "blue" :weight bold))
                :type "face")
                nil [110097 110269])
            ("tty-menu-disabled-face" variable
               (:documentation "Face for displaying disabled items in TTY menus."
                :default-value '((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue"))
                :type "face")
                nil [110271 110517])
            ("tty-menu-selected-face" variable
               (:documentation "Face for displaying the currently selected item in TTY menus."
                :default-value '((t :background "red"))
                :type "face")
                nil [110519 110666])
            ("paren-showing-faces" customgroup
               (:documentation "Faces used to highlight paren matches."
                :user-visible-flag t)
                nil [110668 110803])
            ("show-paren-match" variable
               (:documentation "Face used for a matching paren."
                :default-value '((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline))
                :type "face")
                nil [110805 111271])
            ("show-paren-match-expression" variable
               (:documentation "Face used for a matching paren when highlighting the whole expression.
This face is used by `show-paren-mode'."
                :default-value '((t :inherit show-paren-match))
                :type "face")
                nil [111273 111508])
            ("show-paren-mismatch" variable
               (:documentation "Face used for a mismatching paren."
                :default-value '((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t)))
                :type "face")
                nil [111510 111701])
            ("x-font-regexp" variable nil nil [112077 112103])
            ("x-font-regexp-head" variable nil nil [112104 112135])
            ("x-font-regexp-weight" variable nil nil [112136 112169])
            ("x-font-regexp-slant" variable nil nil [112170 112202])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [112204 112244])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [112245 112284])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [112285 112325])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [112326 112367])
            ("let" code nil nil [112450 113668])
            ("x-resolve-font-name" function
               (:documentation "Return a font name matching PATTERN.
All wildcards in PATTERN are instantiated.
If PATTERN is nil, return the name of the frame's base font, which never
contains wildcards.
Given optional arguments FACE and FRAME, return a font which is
also the same size as FACE on FRAME, or fail."
                :arguments ("pattern" "face" "frame"))
                nil [113671 114758])
            ("font-list-limit" variable
               (:documentation "This variable is obsolete and has no effect."
                :default-value 100)
                nil [114760 114875])
            ("make-obsolete-variable" code nil nil [114876 114928])
            ("faces" package nil nil [114930 114946]))          
      :file "faces.el.gz"
      :pointmax 114971
      :fsize 29146
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d1394"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-minor-mode" code nil nil [1739 2601])
            ("toggle-tool-bar-mode-from-frame" function
               (:documentation "Toggle tool bar on or off, based on the status of the current frame.
See `tool-bar-mode' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [2695 3043])
            ("tool-bar-map" variable
               (:documentation "Keymap for the tool bar.
Define this locally to override the global tool bar."
                :default-value (make-sparse-keymap))
                nil [3045 3169])
            ("global-set-key" code nil nil [3171 3279])
            ("declare-function" code nil nil [3281 3345])
            ("tool-bar-keymap-cache" variable
               (:constant-flag t
                :default-value (make-hash-table :weakness t :test 'equal))
                nil [3347 3422])
            ("tool-bar-make-keymap" function
               (:documentation "Generate an actual keymap from `tool-bar-map'.
Its main job is to figure out which images to use based on the display's
color capability and based on the available image libraries."
                :arguments ("_ignore"))
                nil [3424 3817])
            ("tool-bar-make-keymap-1" function (:documentation "Generate an actual keymap from `tool-bar-map', without caching.") nil [3819 4714])
            ("tool-bar-add-item" function
               (:documentation "Add an item to the tool bar.
ICON names the image, DEF is the key definition and KEY is a symbol
for the fake function key in the menu keymap.  Remaining arguments
PROPS are additional items to add to the menu item specification.  See
Info node `(elisp)Tool Bar'.  Items are added from left to right.

ICON is the base name of a file containing the image to use.  The
function will first try to use low-color/ICON.xpm if `display-color-cells'
is less or equal to 256, then ICON.xpm, then ICON.pbm, and finally
ICON.xbm, using `find-image'.

Use this function only to make bindings in the global value of `tool-bar-map'.
To define items in any other map, use `tool-bar-local-item'."
                :arguments ("icon" "def" "key" "props"))
                nil [4731 5531])
            ("tool-bar--image-expression" function
               (:documentation "Return an expression that evaluates to an image spec for ICON."
                :arguments ("icon"))
                nil [5533 6467])
            ("tool-bar-local-item" function
               (:documentation "Add an item to the tool bar in map MAP.
ICON names the image, DEF is the key definition and KEY is a symbol
for the fake function key in the menu keymap.  Remaining arguments
PROPS are additional items to add to the menu item specification.  See
Info node `(elisp)Tool Bar'.  Items are added from left to right.

ICON is the base name of a file containing the image to use.  The
function will first try to use low-color/ICON.xpm if `display-color-cells'
is less or equal to 256, then ICON.xpm, then ICON.pbm, and finally
ICON.xbm, using `find-image'."
                :arguments ("icon" "def" "key" "map" "props"))
                nil [6484 7292])
            ("tool-bar-add-item-from-menu" function
               (:documentation "Define tool bar binding for COMMAND in keymap MAP using the given ICON.
This makes a binding for COMMAND in `tool-bar-map', copying its
binding from the menu bar in MAP (which defaults to `global-map'), but
modifies the binding by adding an image specification for ICON.  It
finds ICON just like `tool-bar-add-item'.  PROPS are additional
properties to add to the binding.

MAP must contain appropriate binding for `[menu-bar]' which holds a keymap.

Use this function only to make bindings in the global value of `tool-bar-map'.
To define items in any other map, use `tool-bar-local-item-from-menu'."
                :arguments ("command" "icon" "map" "props"))
                nil [7309 8086])
            ("tool-bar-local-item-from-menu" function
               (:documentation "Define local tool bar binding for COMMAND using the given ICON.
This makes a binding for COMMAND in IN-MAP, copying its binding from
the menu bar in FROM-MAP (which defaults to `global-map'), but
modifies the binding by adding an image specification for ICON.  It
finds ICON just like `tool-bar-add-item'.  PROPS are additional
properties to add to the binding.

FROM-MAP must contain appropriate binding for `[menu-bar]' which
holds a keymap."
                :arguments ("command" "icon" "in-map" "from-map" "props"))
                nil [8103 10275])
            ("tool-bar-setup" function nil nil [10343 12108])
            ("if" code nil nil [12110 12758])
            ("tool-bar" package nil nil [12761 12780]))          
      :file "tool-bar.el.gz"
      :pointmax 12808
      :fsize 4229
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d13b4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [898 915])
            ("comint-prompt-regexp" variable nil nil [917 946])
            ("tooltip" customgroup
               (:documentation "Customization group for the `tooltip' package."
                :user-visible-flag t)
                nil [948 1119])
            ("define-minor-mode" code nil nil [1153 2110])
            ("tooltip-delay" variable
               (:documentation "Seconds to wait before displaying a tooltip the first time."
                :default-value 0.7)
                nil [2141 2268])
            ("tooltip-short-delay" variable
               (:documentation "Seconds to wait between subsequent tooltips on different items."
                :default-value 0.1)
                nil [2270 2407])
            ("tooltip-recent-seconds" variable
               (:documentation "Display tooltips if changing tip items within this many seconds.
Do so after `tooltip-short-delay'."
                :default-value 1)
                nil [2409 2583])
            ("tooltip-hide-delay" variable
               (:documentation "Hide tooltips automatically after this many seconds."
                :default-value 10)
                nil [2585 2709])
            ("tooltip-x-offset" variable
               (:documentation "X offset, in pixels, for the display of tooltips.
The offset is the distance between the X position of the mouse and
the left border of the tooltip window.  It must be chosen so that the
tooltip window doesn't contain the mouse when it pops up, or it may
interfere with clicking where you wish.

If `tooltip-frame-parameters' includes the `left' parameter,
the value of `tooltip-x-offset' is ignored."
                :default-value 5)
                nil [2711 3181])
            ("tooltip-y-offset" variable
               (:documentation "Y offset, in pixels, for the display of tooltips.
The offset is the distance between the Y position of the mouse and
the top border of the tooltip window.  It must be chosen so that the
tooltip window doesn't contain the mouse when it pops up, or it may
interfere with clicking where you wish.

If `tooltip-frame-parameters' includes the `top' parameter,
the value of `tooltip-y-offset' is ignored."
                :default-value 20)
                nil [3183 3653])
            ("tooltip-frame-parameters" variable
               (:documentation "Frame parameters used for tooltips.

If `left' or `top' parameters are included, they specify the absolute
position to pop up the tooltip.

Note that font and color parameters are ignored, and the attributes
of the `tooltip' face are used instead."
                :default-value '((name . "tooltip") (internal-border-width . 2) (border-width . 1) (no-special-glyphs . t)))
                nil [3655 4188])
            ("tooltip" variable
               (:documentation "Face for tooltips."
                :default-value '((((class color)) :background "lightyellow" :foreground "black" :inherit variable-pitch) (t :inherit variable-pitch))
                :type "face")
                nil [4190 4415])
            ("tooltip-use-echo-area" variable (:documentation "Use the echo area instead of tooltip frames for help and GUD tooltips.
This variable is obsolete; instead of setting it to t, disable
`tooltip-mode' (which has a similar effect).") nil [4417 4672])
            ("make-obsolete-variable" code nil nil [4674 4767])
            ("tooltip-resize-echo-area" variable (:documentation "If non-nil, using the echo area for tooltips will resize the echo area.
By default, when the echo area is used for displaying tooltips,
the tooltip text is truncated if it exceeds a single screen line.
When this variable is non-nil, the text is not truncated; instead,
the echo area is resized as needed to accommodate the full text
of the tooltip.
This variable has effect only on GUI frames.") nil [4769 5260])
            ("define-obsolete-variable-alias" code nil nil [5306 5378])
            ("tooltip-functions" variable (:documentation "Functions to call to display tooltips.
Each function is called with one argument EVENT which is a copy
of the last mouse movement event that occurred.  If one of these
functions displays the tooltip, it should return non-nil and the
rest are not called.") nil [5380 5668])
            ("tooltip-timeout-id" variable (:documentation "The id of the timeout started when Emacs becomes idle.") nil [5670 5760])
            ("tooltip-last-mouse-motion-event" variable (:documentation "A copy of the last mouse motion event seen.") nil [5762 5854])
            ("tooltip-hide-time" variable (:documentation "Time when the last tooltip was hidden.") nil [5856 5929])
            ("gud-tooltip-mode" variable nil nil [5931 5956])
            ("tooltip-event-buffer" function
               (:documentation "Return the buffer over which event EVENT occurred.
This might return nil if the event did not occur over a buffer."
                :arguments ("event"))
                nil [5999 6245])
            ("tooltip-delay" function (:documentation "Return the delay in seconds for the next tooltip.") nil [6282 6508])
            ("tooltip-cancel-delayed-tip" function (:documentation "Disable the tooltip timeout.") nil [6510 6683])
            ("tooltip-start-delayed-tip" function (:documentation "Add a one-shot timeout to call function `tooltip-timeout'.") nil [6685 6864])
            ("tooltip-timeout" function
               (:documentation "Function called when timer with id `tooltip-timeout-id' fires."
                :arguments ("_object"))
                nil [6866 7062])
            ("tooltip-set-param" function
               (:documentation "Change the value of KEY in alist ALIST to VALUE.
If there's no association for KEY in ALIST, add one, otherwise
change the existing association.  Value is the resulting alist."
                :arguments ("alist" "key" "value"))
                nil [7087 7424])
            ("declare-function" code nil nil [7426 7513])
            ("tooltip-show" function
               (:documentation "Show a tooltip window displaying TEXT.

Text larger than `x-max-tooltip-size' is clipped.

If the alist in `tooltip-frame-parameters' includes `left' and `top'
parameters, they determine the x and y position where the tooltip
is displayed.  Otherwise, the tooltip pops at offsets specified by
`tooltip-x-offset' and `tooltip-y-offset' from the current mouse
position.

Optional second arg USE-ECHO-AREA non-nil means to show tooltip
in echo area."
                :arguments ("text" "use-echo-area"))
                nil [7515 8748])
            ("declare-function" code nil nil [8750 8791])
            ("tooltip-hide" function
               (:documentation "Hide a tooltip, if one is displayed.
Value is non-nil if tooltip was open."
                :arguments ("_ignored-arg"))
                nil [8793 9012])
            ("tooltip-identifier-from-point" function
               (:documentation "Extract the identifier at POINT, if any.
Value is nil if no identifier exists at point.  Identifier extraction
is based on the current syntax table."
                :arguments ("point"))
                nil [9048 9548])
            ("tooltip-expr-to-print" function
               (:documentation "Return an expression that should be printed for EVENT.
If a region is active and the mouse is inside the region, print
the region.  Otherwise, figure out the identifier around the point
where the mouse is."
                :arguments ("event"))
                nil [9550 10092])
            ("tooltip-process-prompt-regexp" function
               (:documentation "Return regexp matching the prompt of PROCESS at the end of a string.
The prompt is taken from the value of `comint-prompt-regexp' in
the buffer of PROCESS."
                :arguments ("process"))
                nil [10094 10683])
            ("tooltip-strip-prompt" function
               (:documentation "Return OUTPUT with any prompt of PROCESS stripped from its end."
                :arguments ("process" "output"))
                nil [10685 10951])
            ("tooltip-help-message" variable (:documentation "The last help message received via `show-help-function'.
This is used by `tooltip-show-help' and
`tooltip-show-help-non-mode'.") nil [10974 11138])
            ("tooltip-previous-message" variable (:documentation "The previous content of the echo area.") nil [11140 11220])
            ("tooltip-show-help-non-mode" function
               (:documentation "Function installed as `show-help-function' when Tooltip mode is off.
It is also called if Tooltip mode is on, for text-only displays."
                :arguments ("help"))
                nil [11222 12342])
            ("tooltip-show-help" function
               (:documentation "Function installed as `show-help-function'.
MSG is either a help string to display, or nil to cancel the display."
                :arguments ("msg"))
                nil [12344 13178])
            ("tooltip-help-tips" function
               (:documentation "Hook function to display a help tooltip.
This is installed on the hook `tooltip-functions', which
is run when the timer with id `tooltip-timeout-id' fires.
Value is non-nil if this function handled the tip."
                :arguments ("_event"))
                nil [13180 13533])
            ("tooltip" package nil nil [13535 13553]))          
      :file "tooltip.el.gz"
      :pointmax 13580
      :fsize 4690
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d13d4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("time-stamp" customgroup
               (:documentation "Maintain last change time stamps in files edited by Emacs."
                :user-visible-flag t)
                nil [1414 1538])
            ("time-stamp-format" variable
               (:documentation "Format of the string inserted by \\[time-stamp].
This is a string, used verbatim except for character sequences beginning
with %, as follows.  The values of non-numeric formatted items depend
on the locale setting recorded in `system-time-locale' and
`locale-coding-system'.  The examples here are for the default
(`C') locale.

%:a  weekday name: `Monday'.		%#A gives uppercase: `MONDAY'
%3a  abbreviated weekday: `Mon'.	%3A gives uppercase: `MON'
%:b  month name: `January'.		%#B gives uppercase: `JANUARY'
%3b  abbreviated month: `Jan'.		%3B gives uppercase: `JAN'
%02d day of month
%02H 24-hour clock hour
%02I 12-hour clock hour
%02m month number
%02M minute
%#p  `am' or `pm'.			%P  gives uppercase: `AM' or `PM'
%02S seconds
%w   day number of week, Sunday is 0
%02y 2-digit year: `03'			%:y 4-digit year: `2003'
%z   time zone name: `est'.		%Z  gives uppercase: `EST'

Non-date items:
%%   a literal percent character: `%'
%f   file name without directory	%F  gives absolute pathname
%s   system name
%u   user's login name			%U  user's full name
%h   mail host name

Decimal digits between the % and the type character specify the
field width.  Strings are truncated on the right; years on the left.
A leading zero in the field width zero-fills a number.

For example, to get the format used by the `date' command,
use \"%3a %3b %2d %02H:%02M:%02S %Z %:y\".

In the future these formats will be aligned more with `format-time-string'.
Because of this transition, the default padding for numeric formats will
change in a future version.  Therefore either a padding width should be
specified, or the : modifier should be used to explicitly request the
historical default."
                :default-value "%:y-%02m-%02d %02H:%02M:%02S %u")
                nil [1540 3342])
            ("time-stamp-active" variable
               (:documentation "Non-nil to enable time-stamping of buffers by \\[time-stamp].
Can be toggled by \\[time-stamp-toggle-active].
See also the variable `time-stamp-warn-inactive'."
                :default-value t)
                nil [3413 3646])
            ("time-stamp-warn-inactive" variable
               (:documentation "Have \\[time-stamp] warn if a buffer did not get time-stamped.
If non-nil, a warning is displayed if `time-stamp-active' has
deactivated time stamping and the buffer contains a template that
otherwise would have been updated."
                :default-value t)
                nil [3648 3973])
            ("time-stamp-time-zone" variable (:documentation "The time zone to be used by \\[time-stamp].
Its format is that of the ZONE argument of the `format-time-string' function.") nil [3975 4402])
            ("time-stamp-line-limit" variable
               (:documentation "Lines of a file searched; positive counts from start, negative from end.
The patterns `time-stamp-start' and `time-stamp-end' must be found in
the first (last) `time-stamp-line-limit' lines of the file for the
file to be time-stamped by \\[time-stamp].  A value of 0 searches the
entire buffer (use with care).

This value can also be set with the variable `time-stamp-pattern'.

Do not change `time-stamp-line-limit', `time-stamp-start',
`time-stamp-end', or `time-stamp-pattern' for yourself or you will be
incompatible with other people's files!  If you must change them for some
application, do so in the local variables section of the time-stamped file
itself."
                :default-value 8)
                nil [4802 5524])
            ("time-stamp-start" variable
               (:documentation "Regexp after which the time stamp is written by \\[time-stamp].
See also the variables `time-stamp-end' and `time-stamp-line-limit'.

This value can also be set with the variable `time-stamp-pattern'.

Do not change `time-stamp-line-limit', `time-stamp-start',
`time-stamp-end', or `time-stamp-pattern' for yourself or you will be
incompatible with other people's files!  If you must change them for some
application, do so in the local variables section of the time-stamped file
itself."
                :default-value "Time-stamp:[ 	]+\\\\?[\"<]+")
                nil [5600 6167])
            ("time-stamp-end" variable
               (:documentation "Regexp marking the text after the time stamp.
\\[time-stamp] deletes the text between the first match of `time-stamp-start'
and the following match of `time-stamp-end', then writes the
time stamp specified by `time-stamp-format' between them.

This value can also be set with the variable `time-stamp-pattern'.

The end text normally starts on the same line as the start text ends,
but if there are any newlines in `time-stamp-format', the same number
of newlines must separate the start and end.  \\[time-stamp] tries
to not change the number of lines in the buffer.  `time-stamp-inserts-lines'
controls this behavior.

Do not change `time-stamp-start', `time-stamp-end', `time-stamp-pattern',
or `time-stamp-inserts-lines' for yourself or you will be incompatible
with other people's files!  If you must change them for some application,
do so in the local variables section of the time-stamped file itself."
                :default-value "\\\\?[\">]")
                nil [6237 7206])
            ("time-stamp-inserts-lines" variable (:documentation "Whether \\[time-stamp] can change the number of lines in a file.
If nil, \\[time-stamp] skips as many lines as there are newlines in
`time-stamp-format' before looking for the `time-stamp-end' pattern,
thus it tries not to change the number of lines in the buffer.
If non-nil, \\[time-stamp] starts looking for the end pattern
immediately after the start pattern.  This behavior can cause
unexpected changes in the buffer if used carelessly, but it is useful
for generating repeated time stamps.

Do not change `time-stamp-end' or `time-stamp-inserts-lines' for
yourself or you will be incompatible with other people's files!
If you must change them for some application, do so in the local
variables section of the time-stamped file itself.") nil [7275 8077])
            ("time-stamp-count" variable
               (:documentation "How many templates \\[time-stamp] will look for in a buffer.
The same time stamp will be written in each case.

Do not change `time-stamp-count' for yourself or you will be
incompatible with other people's files!  If you must change it for
some application, do so in the local variables section of the
time-stamped file itself."
                :default-value 1)
                nil [8156 8532])
            ("time-stamp-pattern" variable (:documentation "Convenience variable setting all `time-stamp' location and format values.
This string has four parts, each of which is optional.
These four parts set `time-stamp-line-limit', `time-stamp-start',
`time-stamp-format', and `time-stamp-end'.  See the documentation
for each of these variables for details.

The first part is a number followed by a slash; the number sets the number
of lines at the beginning (negative counts from end) of the file searched
for the time stamp.  The number and the slash may be omitted to use the
normal value.

The second part is a regexp identifying the pattern preceding the time stamp.
This part may be omitted to use the normal pattern.

The third part specifies the format of the time stamp inserted.  See
the documentation for `time-stamp-format' for details.  Specify this
part as \"%%\" to use the normal format.

The fourth part is a regexp identifying the pattern following the time stamp.
This part may be omitted to use the normal pattern.

Examples:
\"-10/\"
\"-9/^Last modified: %%$\"
\"@set Time-stamp: %:b %:d, %:y$\"
\"newcommand{\\\\\\\\timestamp}{%%}\"

Do not change `time-stamp-pattern' `time-stamp-line-limit',
`time-stamp-start', or `time-stamp-end' for yourself or you will be
incompatible with other people's files!  If you must change them for
some application, do so only in the local variables section of the
time-stamped file itself.") nil [8604 10047])
            ("time-stamp" function
               (:documentation "Update the time stamp string(s) in the buffer.
A template in a file can be automatically updated with a new time stamp
every time you save the file.  Add this line to your init file:
    (add-hook \\='before-save-hook \\='time-stamp)
or customize `before-save-hook' through Custom.
Normally the template must appear in the first 8 lines of a file and
look like one of the following:
      Time-stamp: <>
      Time-stamp: \" \"
The time stamp is written between the brackets or quotes:
      Time-stamp: <2001-02-18 10:20:51 gildea>
The time stamp is updated only if the variable `time-stamp-active' is non-nil.
The format of the time stamp is set by the variable `time-stamp-pattern' or
`time-stamp-format'.  The variables `time-stamp-pattern',
`time-stamp-line-limit', `time-stamp-start', `time-stamp-end',
`time-stamp-count', and `time-stamp-inserts-lines' control finding
the template."
                :user-visible-flag t)
                nil [10136 13445])
            ("time-stamp-once" function
               (:documentation "Update one time stamp.  Internal routine called by \\[time-stamp].
Returns the end point, which is where `time-stamp' begins the next search."
                :arguments ("start" "search-limit" "ts-start" "ts-end" "ts-format" "format-lines" "end-lines"))
                nil [13447 15618])
            ("time-stamp-toggle-active" function
               (:documentation "Toggle `time-stamp-active', setting whether \\[time-stamp] updates a buffer.
With ARG, turn time stamping on if and only if arg is positive."
                :user-visible-flag t
                :arguments ("arg"))
                nil [15636 16032])
            ("time-stamp--format" function (:arguments ("format" "time")) nil [16034 16130])
            ("time-stamp-string" function
               (:documentation "Generate the new string to be inserted by \\[time-stamp].
Optionally use format TS-FORMAT instead of `time-stamp-format' to
format the string."
                :arguments ("ts-format"))
                nil [16132 16465])
            ("time-stamp-no-file" variable
               (:documentation "String to use when the buffer is not associated with a file."
                :constant-flag t
                :default-value "(no file)")
                nil [16468 16574])
            ("time-stamp-string-preprocess" function
               (:documentation "Use a FORMAT to format date, time, file, and user information.
Optional second argument TIME is only for testing.
Implements non-time extensions to `format-time-string'
and all `time-stamp-format' compatibility."
                :arguments ("format" "time"))
                nil [17397 23391])
            ("time-stamp-do-number" function
               (:documentation "Handle compatible FORMAT-CHAR where only default width/padding will change.
ALT-FORM is whether `#' specified.  FIELD-WIDTH is the string
width specification or \"\".  TIME is the time to convert."
                :arguments ("format-char" "alt-form" "field-width" "time"))
                nil [23393 24027])
            ("time-stamp-conversion-warn" variable
               (:documentation "Warn about soon-to-be-unsupported forms in `time-stamp-format'.
If nil, these warnings are disabled, which would be a bad idea!
You really need to update your files instead.

The new formats will work with old versions of Emacs.
New formats are being recommended now to allow `time-stamp-format'
to change in the future to be compatible with `format-time-string'.
The new forms being recommended now will continue to work then."
                :default-value t)
                nil [24029 24498])
            ("time-stamp-conv-warn" function
               (:documentation "Display a warning about a soon-to-be-obsolete format.
Suggests replacing OLD-FORM with NEW-FORM."
                :arguments ("old-form" "new-form"))
                nil [24501 25193])
            ("time-stamp" package nil nil [25195 25216]))          
      :file "time-stamp.el.gz"
      :pointmax 25246
      :fsize 7539
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889614"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] '(menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit")) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] '(menu-item "Delete Frame" delete-frame :visible (fboundp 'delete-frame) :enable (delete-frame-enabled-p) :help "Delete currently selected frame")) (bindings--define-key menu [make-frame-on-display] '(menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp 'make-frame-on-display) :help "Open a new frame on another display")) (bindings--define-key menu [make-frame] '(menu-item "New Frame" make-frame-command :visible (fboundp 'make-frame-command) :help "Open a new frame")) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] '(menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame")) (bindings--define-key menu [new-window-on-right] '(menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one")) (bindings--define-key menu [new-window-below] '(menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one")) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] '(menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer")) (bindings--define-key menu [ps-print-buffer] '(menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer")) (bindings--define-key menu [ps-print-region-faces] '(menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer")) (bindings--define-key menu [ps-print-buffer-faces] '(menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer")) (bindings--define-key menu [print-region] '(menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position")) (bindings--define-key menu [print-buffer] '(menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings")) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] '(menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session")) (bindings--define-key menu [revert-buffer] '(menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function 'revert-buffer--default)) (not (eq revert-buffer-insert-file-contents-function 'revert-buffer-insert-file-contents--default-function)) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file")) (bindings--define-key menu [write-file] '(menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file")) (bindings--define-key menu [save-buffer] '(menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file")) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] '(menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer")) (bindings--define-key menu [insert-file] '(menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer")) (bindings--define-key menu [dired] '(menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files")) (bindings--define-key menu [open-file] '(menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer")) (bindings--define-key menu [new-file] '(menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file")) menu)) nil [1924 8904])
            ("menu-find-file-existing" function
               (:documentation "Edit the existing file FILENAME."
                :user-visible-flag t)
                nil [8906 9236])
            ("menu-bar-last-search-type" variable (:documentation "Type of last non-incremental search command called from the menu.") nil [9268 9376])
            ("nonincremental-repeat-search-forward" function
               (:documentation "Search forward for the previous search string or regexp."
                :user-visible-flag t)
                nil [9378 9771])
            ("nonincremental-repeat-search-backward" function
               (:documentation "Search backward for the previous search string or regexp."
                :user-visible-flag t)
                nil [9773 10170])
            ("nonincremental-search-forward" function
               (:documentation "Read a string and search for it nonincrementally."
                :user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:documentation "Read a string and search backward for it nonincrementally."
                :user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:documentation "Read a regular expression and search for it nonincrementally."
                :user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:documentation "Read a regular expression and search backward for it nonincrementally."
                :user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] '(menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it")) (bindings--define-key menu [isearch-forward-regexp] '(menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it")) (bindings--define-key menu [isearch-backward] '(menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it")) (bindings--define-key menu [isearch-forward] '(menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it")) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] `(menu-item "Incremental Search" ,menu-bar-i-search-menu)) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] '(menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation")) (bindings--define-key menu [tags-srch] '(menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files")) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] '(menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type 'string) search-ring) (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)) :help "Repeat last search backwards")) (bindings--define-key menu [repeat-search-fwd] '(menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type 'string) search-ring) (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)) :help "Repeat last search forward")) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] '(menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression")) (bindings--define-key menu [re-search-forward] '(menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression")) (bindings--define-key menu [search-backward] '(menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string")) (bindings--define-key menu [search-forward] '(menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string")) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] '(menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation")) (bindings--define-key menu [tags-repl] '(menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files")) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] '(menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence")) (bindings--define-key menu [query-replace] '(menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence")) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] '(menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use")) (bindings--define-key menu [separator-tag-file] '(menu-item "--" nil :visible (menu-bar-goto-uses-etags-p))) (bindings--define-key menu [xref-pop] '(menu-item "Back" xref-pop-marker-stack :visible (and (featurep 'xref) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search")) (bindings--define-key menu [xref-apropos] '(menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp")) (bindings--define-key menu [xref-find-otherw] '(menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window")) (bindings--define-key menu [xref-find-def] '(menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable")) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] '(menu-item "Goto End of Buffer" end-of-buffer)) (bindings--define-key menu [beg-of-buf] '(menu-item "Goto Beginning of Buffer" beginning-of-buffer)) (bindings--define-key menu [go-to-pos] '(menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N")) (bindings--define-key menu [go-to-line] '(menu-item "Goto Line..." goto-line :help "Read a line number and go to that line")) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] `(menu-item "Text Properties" facemenu-menu)) (if (featurep 'ns) (bindings--define-key menu [spell] `(menu-item "Spell" ispell-menu-map))) (bindings--define-key menu [fill] `(menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin")) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] `(menu-item "Bookmarks" menu-bar-bookmark-map)) (bindings--define-key menu [goto] `(menu-item "Go To" ,menu-bar-goto-menu)) (bindings--define-key menu [replace] `(menu-item "Replace" ,menu-bar-replace-menu)) (bindings--define-key menu [search] `(menu-item "Search" ,menu-bar-search-menu)) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] '(menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy")) (bindings--define-key menu [clear] '(menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position")) (bindings--define-key menu (if (featurep 'ns) [select-paste] [paste-from-menu]) `(menu-item ,(if (featurep 'ns) "Select and Paste" "Paste from Kill Menu") yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it")) (bindings--define-key menu [paste] `(menu-item "Paste" yank :enable (funcall ',(lambda nil (and (or (gui-backend-selection-exists-p 'CLIPBOARD) (if (featurep 'ns) (cdr yank-menu) kill-ring)) (not buffer-read-only)))) :help "Paste (yank) text most recently cut/copied")) (bindings--define-key menu [copy] `(menu-item "Copy" ,(if (featurep 'ns) 'ns-copy-including-secondary 'kill-ring-save) :enable mark-active :help "Copy text in region between mark and current position" :keys ,(if (featurep 'ns) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))) (bindings--define-key menu [cut] '(menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position")) (if (featurep 'ns) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] '(menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command 'undo) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation")) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function
               (:documentation "Insert the clipboard contents, or the last stretch of killed text."
                :user-visible-flag t)
                nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:documentation "Copy region to kill ring, and save in the GUI's clipboard.
If the optional argument REGION is non-nil, the function ignores
BEG and END, and saves the current region instead."
                :user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:documentation "Kill the region, and save it in the GUI's clipboard.
If the optional argument REGION is non-nil, the function ignores
BEG and END, and kills the current region instead."
                :user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function
               (:documentation "Make CUT, PASTE and COPY (keys and menu bar items) use the clipboard.
Do the same for the keys of the same name."
                :user-visible-flag t)
                nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] '(menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list")) (bindings--define-key menu [customize-apropos-options] '(menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list")) (bindings--define-key menu [customize-apropos] '(menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list")) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] '(menu-item "Specific Group..." customize-group :help "Customize settings of specific group")) (bindings--define-key menu [customize-face] '(menu-item "Specific Face..." customize-face :help "Customize attributes of specific face")) (bindings--define-key menu [customize-option] '(menu-item "Specific Option..." customize-option :help "Customize value of specific option")) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] '(menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions")) (bindings--define-key menu [customize-saved] '(menu-item "Saved Options" customize-saved :help "Customize previously saved options")) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] '(menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups")) (bindings--define-key menu [customize] '(menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'")) (bindings--define-key menu [customize-themes] '(menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme")) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function
               (:documentation "Make a menu-item for a global minor mode toggle.
FNAME is the minor mode's name (variable and function).
DOC is the text to use for the menu entry.
HELP is the text to use for the tooltip.
PROPS are additional properties."
                :arguments ("fname" "doc" "help" "props"))
                nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function
               (:documentation "Interactively select a font and make it the default on all frames.

The selected font will be the default on both the existing and future frames."
                :user-visible-flag t)
                nil [28438 28737])
            ("menu-bar-options-save" function
               (:documentation "Save current values of Options menu items using Custom."
                :user-visible-flag t)
                nil [28739 30908])
            ("menu-bar-window-divider-customize" function
               (:documentation "Show customization buffer for `window-divider' group."
                :user-visible-flag t)
                nil [31017 31171])
            ("menu-bar-bottom-and-right-window-divider" function
               (:documentation "Display dividers on the bottom and right of each window."
                :user-visible-flag t)
                nil [31173 31387])
            ("menu-bar-right-window-divider" function
               (:documentation "Display dividers only on the right of each window."
                :user-visible-flag t)
                nil [31389 31596])
            ("menu-bar-bottom-window-divider" function
               (:documentation "Display dividers only at the bottom of each window."
                :user-visible-flag t)
                nil [31598 31808])
            ("menu-bar-no-window-divider" function
               (:documentation "Do not display window dividers."
                :user-visible-flag t)
                nil [31810 31926])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] '(menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) '(x w32)))) (bindings--define-key menu [bottom-and-right] '(menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) '(x w32)) :button (:radio and (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters)))) (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters))))))) (bindings--define-key menu [right-only] '(menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) '(x w32)) :button (:radio and (not (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters))))) (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters))))))) (bindings--define-key menu [bottom-only] '(menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) '(x w32)) :button (:radio and (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters)))))))) (bindings--define-key menu [no-divider] '(menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) '(x w32)) :button (:radio and (not (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters)))))))) menu)) nil [32210 34652])
            ("menu-bar-showhide-fringe-ind-customize" function
               (:documentation "Show customization buffer for `indicate-buffer-boundaries'."
                :user-visible-flag t)
                nil [34654 34834])
            ("menu-bar-showhide-fringe-ind-mixed" function
               (:documentation "Display top and bottom indicators in opposite fringes, arrows in right."
                :user-visible-flag t)
                nil [34836 35061])
            ("menu-bar-showhide-fringe-ind-box" function
               (:documentation "Display top and bottom indicators in opposite fringes."
                :user-visible-flag t)
                nil [35063 35274])
            ("menu-bar-showhide-fringe-ind-right" function
               (:documentation "Display buffer boundaries and arrows in the right fringe."
                :user-visible-flag t)
                nil [35276 35461])
            ("menu-bar-showhide-fringe-ind-left" function
               (:documentation "Display buffer boundaries and arrows in the left fringe."
                :user-visible-flag t)
                nil [35463 35645])
            ("menu-bar-showhide-fringe-ind-none" function
               (:documentation "Do not display any buffer boundary indicators."
                :user-visible-flag t)
                nil [35647 35817])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] '(menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries '(nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) (bindings--define-key menu [mixed] '(menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries '((t . right) (top . left))))) (bindings--define-key menu [box] '(menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries '((top . left) (bottom . right))))) (bindings--define-key menu [right] '(menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries 'right))) (bindings--define-key menu [left] '(menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries 'left))) (bindings--define-key menu [none] '(menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil))) menu)) nil [35819 38231])
            ("menu-bar-showhide-fringe-menu-customize" function
               (:documentation "Show customization buffer for `fringe-mode'."
                :user-visible-flag t)
                nil [38233 38384])
            ("menu-bar-showhide-fringe-menu-customize-reset" function
               (:documentation "Reset the fringe mode: display fringes on both sides of a window."
                :user-visible-flag t)
                nil [38386 38572])
            ("menu-bar-showhide-fringe-menu-customize-right" function
               (:documentation "Display fringes only on the right of each window."
                :user-visible-flag t)
                nil [38574 38771])
            ("menu-bar-showhide-fringe-menu-customize-left" function
               (:documentation "Display fringes only on the left of each window."
                :user-visible-flag t)
                nil [38773 38968])
            ("menu-bar-showhide-fringe-menu-customize-disable" function
               (:documentation "Do not display window fringes."
                :user-visible-flag t)
                nil [38970 39141])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] `(menu-item "Buffer Boundaries" ,menu-bar-showhide-fringe-ind-menu :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe")) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] '(menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p))) (bindings--define-key menu [default] '(menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil))) (bindings--define-key menu [right] '(menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode '(0)))) (bindings--define-key menu [left] '(menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode '(nil . 0)))) (bindings--define-key menu [none] '(menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0))) menu)) nil [39143 41167])
            ("menu-bar-right-scroll-bar" function
               (:documentation "Display scroll bars on the right of each window."
                :user-visible-flag t)
                nil [41169 41325])
            ("menu-bar-left-scroll-bar" function
               (:documentation "Display scroll bars on the left of each window."
                :user-visible-flag t)
                nil [41327 41480])
            ("menu-bar-no-scroll-bar" function
               (:documentation "Turn off scroll bars."
                :user-visible-flag t)
                nil [41482 41605])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] '(menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil 'vertical-scroll-bars) 'right)))) (bindings--define-key menu [left] '(menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil 'vertical-scroll-bars) 'left)))) (bindings--define-key menu [none] '(menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil))) menu)) nil [41607 43159])
            ("menu-bar-frame-for-menubar" function (:documentation "Return the frame suitable for updating the menu bar.") nil [43161 43344])
            ("menu-bar-positive-p" function
               (:documentation "Return non-nil if VAL is a positive number."
                :arguments ("val"))
                nil [43346 43466])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43468 43616])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function
               (:documentation "Do not display tool bars."
                :user-visible-flag t)
                nil [43617 43769])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function
               (:documentation "Display tool bars on the left side."
                :user-visible-flag t)
                nil [43770 43931])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function
               (:documentation "Display tool bars on the right side."
                :user-visible-flag t)
                nil [43932 44096])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function
               (:documentation "Display tool bars on the top side."
                :user-visible-flag t)
                nil [44097 44255])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function
               (:documentation "Display tool bars on the bottom side."
                :user-visible-flag t)
                nil [44256 44423])
            ("when" code nil nil [44425 47199])
            ("display-line-numbers-type" variable nil nil [47201 47235])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47236 47438])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] `(menu-item "Visual Line Numbers" ,(lambda nil (interactive) (menu-bar-display-line-numbers-mode 'visual) (message "Visual line numbers enabled")) :help "Enable visual line numbers" :button (:radio eq display-line-numbers 'visual) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [relative] `(menu-item "Relative Line Numbers" ,(lambda nil (interactive) (menu-bar-display-line-numbers-mode 'relative) (message "Relative line numbers enabled")) :help "Enable relative line numbers" :button (:radio eq display-line-numbers 'relative) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [absolute] `(menu-item "Absolute Line Numbers" ,(lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled")) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [none] `(menu-item "No Line Numbers" ,(lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled")) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47440 49673])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] `(menu-item "Line Numbers for All Lines" ,menu-bar-showhide-line-numbers-menu)) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] '(menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp 'speedbar-frame) (frame-live-p (symbol-value 'speedbar-frame)) (frame-visible-p (symbol-value 'speedbar-frame))))) (bindings--define-key menu [showhide-window-divider] `(menu-item "Window Divider" ,menu-bar-showhide-window-divider-menu :visible (memq (window-system) '(x w32)))) (bindings--define-key menu [showhide-fringe] `(menu-item "Fringe" ,menu-bar-showhide-fringe-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-scroll-bar] `(menu-item "Scroll Bar" ,menu-bar-showhide-scroll-bar-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-tooltip-mode] '(menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp 'x-show-tip)) :button (:toggle . tooltip-mode))) (bindings--define-key menu [menu-bar-mode] '(menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) 'menu-bar-lines)))) (if (and (boundp 'menu-bar-showhide-tool-bar-menu) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] `(menu-item "Tool Bar" ,menu-bar-showhide-tool-bar-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-tool-bar] '(menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) 'tool-bar-lines))))) menu)) nil [49675 53686])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] `(menu-item "Word Wrap (Visual Line mode)" ,(lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled")) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [truncate] `(menu-item "Truncate Long Lines" ,(lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1)) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p)))) (bindings--define-key menu [window-wrap] `(menu-item "Wrap at Window Edge" ,(lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p)))) menu)) nil [53688 55785])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x '((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word"))) (bindings--define-key menu (vector (nth 0 x)) `(menu-item ,(nth 1 x) (lambda nil (interactive) (setq search-default-mode #',(nth 0 x)) (message ,(format "%s search enabled" (nth 2 x)))) :help ,(format "Enable %s search" (downcase (nth 2 x))) :button (:radio eq search-default-mode #',(nth 0 x))))) (bindings--define-key menu [regexp-search] '(menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t))) (bindings--define-key menu [regular-search] '(menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55787 57733])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] `(menu-item "Customize Emacs" ,menu-bar-custom-menu)) (bindings--define-key menu [package] '(menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages")) (bindings--define-key menu [save] '(menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above")) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] '(menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font")) (if (featurep 'system-font-setting) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] `(menu-item "Show/Hide" ,menu-bar-showhide-menu)) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] `(menu-item "Multilingual Environment" ,mule-menu-keymap)) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require 'saveplace) (set-default 'save-place (not (symbol-value 'save-place))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) 'post-forward-angle-brackets)))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp 'cua-enable-cua-keys)) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp 'cua-enable-cua-keys) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] `(menu-item "Default Search Options" ,menu-bar-search-options-menu)) (bindings--define-key menu [line-wrapping] `(menu-item "Line Wrapping in This Buffer" ,menu-bar-line-wrapping-menu)) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57735 62828])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] '(menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle")) (bindings--define-key menu [tetris] '(menu-item "Tetris" tetris :help "Falling blocks game")) (bindings--define-key menu [solitaire] '(menu-item "Solitaire" solitaire :help "Get rid of all the stones")) (bindings--define-key menu [snake] '(menu-item "Snake" snake :help "Move snake around avoiding collisions")) (bindings--define-key menu [pong] '(menu-item "Pong" pong :help "Bounce the ball to your opponent")) (bindings--define-key menu [mult] '(menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication")) (bindings--define-key menu [life] '(menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves")) (bindings--define-key menu [hanoi] '(menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs")) (bindings--define-key menu [gomoku] '(menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)")) (bindings--define-key menu [bubbles] '(menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves")) (bindings--define-key menu [black-box] '(menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays")) (bindings--define-key menu [adventure] '(menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs")) (bindings--define-key menu [5x5] '(menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board")) menu)) nil [62859 64798])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] '(menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point")) (bindings--define-key menu [export-keys] '(menu-item "Export Keys" epa-export-keys :help "Export public keys to a file")) (bindings--define-key menu [import-keys-region] '(menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region")) (bindings--define-key menu [import-keys] '(menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file")) (bindings--define-key menu [list-keys] '(menu-item "List Keys" epa-list-keys :help "Browse your public keyring")) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] '(menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region")) (bindings--define-key menu [verify-region] '(menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region")) (bindings--define-key menu [encrypt-region] '(menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region")) (bindings--define-key menu [decrypt-region] '(menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region")) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] '(menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file")) (bindings--define-key menu [verify-file] '(menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file")) (bindings--define-key menu [encrypt-file] '(menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file")) (bindings--define-key menu [decrypt-file] '(menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file")) menu)) nil [64800 67141])
            ("menu-bar-read-mail" function
               (:documentation "Read mail using `read-mail-command'."
                :user-visible-flag t)
                nil [67143 67270])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] `(menu-item "Games" ,menu-bar-games-menu)) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] `(menu-item "Encryption/Decryption" ,menu-bar-encryption-decryption-menu)) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] '(menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator")) (bindings--define-key menu [calc] '(menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator")) (bindings--define-key menu [calendar] '(menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar")) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] '(menu-item "Browse the Web..." browse-web)) (bindings--define-key menu [directory-search] '(menu-item "Directory Servers" eudc-tools-menu)) (bindings--define-key menu [compose-mail] '(menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent 'ignore))) :help "Start writing a new mail message")) (bindings--define-key menu [rmail] '(menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command 'ignore))) :help "Read your mail")) (bindings--define-key menu [gnus] '(menu-item "Read Net News" gnus :help "Read network news groups")) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] '(menu-item "Apply Patch" menu-bar-epatch-menu)) (bindings--define-key menu [ediff-merge] '(menu-item "Merge" menu-bar-ediff-merge-menu)) (bindings--define-key menu [compare] '(menu-item "Compare (Ediff)" menu-bar-ediff-menu)) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] '(menu-item "Spell Checking" ispell-menu-map)) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] '(menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode))) (bindings--define-key menu [ede] '(menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode))) (bindings--define-key menu [gdb] '(menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB")) (bindings--define-key menu [shell-on-region] '(menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command")) (bindings--define-key menu [shell] '(menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output")) (bindings--define-key menu [compile] '(menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors")) (bindings--define-key menu [grep] '(menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)")) menu)) nil [67272 71334])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] '(menu-item "Show All of Mule Status" mule-diag :help "Display multilingual environment settings")) (bindings--define-key menu [describe-coding-system-briefly] '(menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly)) (bindings--define-key menu [describe-coding-system] '(menu-item "Describe Coding System..." describe-coding-system)) (bindings--define-key menu [describe-input-method] '(menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for specific input method")) (bindings--define-key menu [describe-language-environment] `(menu-item "Describe Language Environment" ,describe-language-environment-map)) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] '(menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)")) (bindings--define-key menu [describe-current-display-table] '(menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table")) (bindings--define-key menu [describe-package] '(menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package")) (bindings--define-key menu [describe-face] '(menu-item "Describe Face..." describe-face :help "Display the properties of a face")) (bindings--define-key menu [describe-variable] '(menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option")) (bindings--define-key menu [describe-function] '(menu-item "Describe Function..." describe-function :help "Display documentation of function/command")) (bindings--define-key menu [describe-key-1] '(menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item")) (bindings--define-key menu [describe-mode] '(menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode")) menu)) nil [71363 73915])
            ("menu-bar-read-lispref" function
               (:documentation "Display the Emacs Lisp Reference manual in Info mode."
                :user-visible-flag t)
                nil [73917 74040])
            ("menu-bar-read-lispintro" function
               (:documentation "Display the Introduction to Emacs Lisp Programming in Info mode."
                :user-visible-flag t)
                nil [74042 74178])
            ("search-emacs-glossary" function
               (:documentation "Display the Glossary node of the Emacs manual in Info mode."
                :user-visible-flag t)
                nil [74180 74319])
            ("emacs-index-search" function
               (:documentation "Look up TOPIC in the indices of the Emacs User Manual."
                :user-visible-flag t
                :arguments ("topic"))
                nil [74321 74492])
            ("elisp-index-search" function
               (:documentation "Look up TOPIC in the indices of the Emacs Lisp Reference Manual."
                :user-visible-flag t
                :arguments ("topic"))
                nil [74494 74675])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] '(menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp")) (bindings--define-key menu [find-any-object-by-name] '(menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp")) (bindings--define-key menu [find-option-by-value] '(menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp")) (bindings--define-key menu [find-options-by-name] '(menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp")) (bindings--define-key menu [find-commands-by-name] '(menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp")) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] '(menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command")) (bindings--define-key menu [lookup-key-in-manual] '(menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key")) (bindings--define-key menu [lookup-subject-in-elisp-manual] '(menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual")) (bindings--define-key menu [lookup-subject-in-emacs-manual] '(menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual")) (bindings--define-key menu [emacs-terminology] '(menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual")) menu)) nil [74677 76898])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] '(menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries")) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] '(menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation")) (bindings--define-key menu [lookup-subject-in-all-manuals] '(menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals")) (bindings--define-key menu [other-manuals] '(menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals")) (bindings--define-key menu [emacs-lisp-reference] '(menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual")) (bindings--define-key menu [emacs-lisp-intro] '(menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming")) menu)) nil [76900 78174])
            ("help-with-tutorial-spec-language" function
               (:documentation "Use the Emacs tutorial, specifying which language you want."
                :user-visible-flag t)
                nil [78176 78324])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] '(menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux")) (bindings--define-key menu [about-emacs] '(menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help")) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] '(menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY")) (bindings--define-key menu [describe-copying] '(menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)")) (bindings--define-key menu [getting-new-versions] '(menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs")) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] '(menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs")) (bindings--define-key menu [find-emacs-packages] '(menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword")) (bindings--define-key menu [more-manuals] `(menu-item "More Manuals" ,menu-bar-manuals-menu)) (bindings--define-key menu [emacs-manual] '(menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features")) (bindings--define-key menu [describe] `(menu-item "Describe" ,menu-bar-describe-menu)) (bindings--define-key menu [search-documentation] `(menu-item "Search Documentation" ,menu-bar-search-documentation-menu)) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] '(menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better")) (bindings--define-key menu [send-emacs-bug-report] '(menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers")) (bindings--define-key menu [emacs-manual-bug] '(menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug")) (bindings--define-key menu [emacs-known-problems] '(menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs")) (bindings--define-key menu [emacs-news] '(menu-item "Emacs News" view-emacs-news :help "New features of this version")) (bindings--define-key menu [emacs-faq] '(menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs")) (bindings--define-key menu [emacs-tutorial-language-specific] '(menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)")) (bindings--define-key menu [emacs-tutorial] '(menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs")) (and (featurep 'ns) (not (eq system-type 'darwin)) (bindings--define-key menu [info-panel] '(menu-item "About Emacs..." ns-do-emacs-info-panel))) menu)) nil [78326 82074])
            ("bindings--define-key" code nil nil [82076 82163])
            ("bindings--define-key" code nil nil [82164 82258])
            ("bindings--define-key" code nil nil [82259 82352])
            ("bindings--define-key" code nil nil [82353 82437])
            ("bindings--define-key" code nil nil [82438 82522])
            ("bindings--define-key" code nil nil [82523 82623])
            ("menu-bar-menu-frame-live-and-visible-p" function (:documentation "Return non-nil if the menu frame is alive and visible.
The menu frame is the frame for which we are updating the menu.") nil [82625 82929])
            ("menu-bar-non-minibuffer-window-p" function (:documentation "Return non-nil if the menu frame's selected window is no minibuffer window.
Return nil if the menu frame is dead or its selected window is a
minibuffer window.  The menu frame is the frame for which we are
updating the menu.") nil [82931 83377])
            ("kill-this-buffer" function
               (:documentation "Kill the current buffer.
When called in the minibuffer, get out of the minibuffer
using `abort-recursive-edit'.

This command can be reliably invoked only from the menu bar,
otherwise it could decide to silently do nothing."
                :user-visible-flag t)
                nil [83379 83923])
            ("kill-this-buffer-enabled-p" function (:documentation "Return non-nil if the `kill-this-buffer' menu item should be enabled.") nil [83925 84393])
            ("put" code nil nil [84395 84456])
            ("delete-frame-enabled-p" function (:documentation "Return non-nil if `delete-frame' should be enabled in the menu bar.") nil [84531 84816])
            ("yank-menu-length" variable
               (:documentation "Maximum length to display in the yank-menu."
                :default-value 20)
                nil [84818 84929])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [84931 85922])
            ("put" code nil nil [85924 85970])
            ("menu-bar-select-yank" function
               (:documentation "Insert the stretch of previously-killed text selected from menu.
The menu shows all the killed text sequences stored in `kill-ring'."
                :user-visible-flag t)
                nil [85971 86203])
            ("buffers-menu-max-size" variable
               (:documentation "Maximum number of entries which may appear on the Buffers menu.
If this is 10, then only the ten most-recently-selected buffers are shown.
If this is nil, then all buffers are shown.
A large number or nil slows down menu responsiveness."
                :default-value 10)
                nil [86225 86569])
            ("buffers-menu-buffer-name-length" variable
               (:documentation "Maximum length of the buffer name on the Buffers menu.
If this is a number, then buffer names are truncated to this length.
If this is nil, then buffer names are shown in full.
A large number or nil makes the menu too wide."
                :default-value 30)
                nil [86571 86920])
            ("buffers-menu-show-directories" variable
               (:documentation "If non-nil, show directories in the Buffers menu for buffers that have them.
The special value `unless-uniquify' means that directories will be shown
unless `uniquify-buffer-name-style' is non-nil (in which case, buffer
names should include enough of a buffer's directory to distinguish it
from other buffers).

Setting this variable directly does not take effect until next time the
Buffers menu is regenerated."
                :default-value 'unless-uniquify)
                nil [86922 87666])
            ("buffers-menu-show-status" variable
               (:documentation "If non-nil, show modified/read-only status of buffers in the Buffers menu.
Setting this variable directly does not take effect until next time the
Buffers menu is regenerated."
                :default-value t)
                nil [87668 88041])
            ("list-buffers-directory" variable (:documentation "String to display in buffer listings for buffers not visiting a file.") nil [88043 88152])
            ("make-variable-buffer-local" code nil nil [88153 88205])
            ("menu-bar-select-buffer" function nil nil [88207 88296])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88298 88409])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88411 89281])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89350 89400])
            ("menu-bar-select-buffer-function" variable
               (:documentation "Function to select the buffer chosen from the `Buffers' menu-bar menu.
It must accept a buffer as its only required argument."
                :default-value 'switch-to-buffer)
                nil [89402 89590])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [89592 90020])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90022 93811])
            ("add-hook" code nil nil [93813 93870])
            ("menu-bar-update-buffers" code nil nil [93872 93897])
            ("dolist" code nil nil [94520 94816])
            ("let" code nil nil [94818 95307])
            ("let" code nil nil [95309 96378])
            ("define-minor-mode" code nil nil [96381 97576])
            ("put" code nil nil [98020 98061])
            ("toggle-menu-bar-mode-from-frame" function
               (:documentation "Toggle menu bar on or off, based on the status of the current frame.
See `menu-bar-mode' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [98063 98469])
            ("declare-function" code nil nil [98471 98536])
            ("declare-function" code nil nil [98537 98606])
            ("lookup-key-ignore-too-long" function
               (:documentation "Call `lookup-key' and convert numeric values to nil."
                :arguments ("map" "key"))
                nil [98608 98822])
            ("popup-menu" function
               (:documentation "Popup the given menu and call the selected option.
MENU can be a keymap, an easymenu-style menu or a list of keymaps as for
`x-popup-menu'.
The menu is shown at the place where POSITION specifies.
For the form of POSITION, see `popup-menu-normalize-position'.
PREFIX is the prefix argument (if any) to pass to the command.
FROM-MENU-BAR, if non-nil, means we are dropping one of menu-bar's menus."
                :arguments ("menu" "position" "prefix" "from-menu-bar"))
                nil [98824 101834])
            ("popup-menu-normalize-position" function
               (:documentation "Convert the POSITION to the form which `popup-menu' expects internally.
POSITION can be an event, a posn- value, a value having the
form ((XOFFSET YOFFSET) WINDOW), or nil.
If nil, the current mouse position is used, or nil if there is no mouse."
                :arguments ("position"))
                nil [101836 102584])
            ("tty-menu-open-use-tmm" variable (:documentation "If non-nil, \\[menu-bar-open] on a TTY will invoke `tmm-menubar'.

If nil, \\[menu-bar-open] will drop down the menu corresponding to the
first (leftmost) menu-bar item; you can select other items by typing
\\[forward-char], \\[backward-char], \\[right-char] and \\[left-char].") nil [102586 103047])
            ("tty-menu--initial-menu-x" variable
               (:documentation "X coordinate of the first menu-bar menu dropped by F10.

This is meant to be used only for debugging TTY menus."
                :default-value 1)
                nil [103049 103200])
            ("menu-bar-open" function
               (:documentation "Start key navigation of the menu bar in FRAME.

This function decides which method to use to access the menu
depending on FRAME's terminal device.  On X displays, it calls
`x-menu-bar-open'; on Windows, `w32-menu-bar-open'; otherwise it
calls either `popup-menu' or `tmm-menubar' depending on whether
`tty-menu-open-use-tmm' is nil or not.

If FRAME is nil or not given, use the selected frame."
                :user-visible-flag t
                :arguments ("frame"))
                nil [103202 104770])
            ("global-set-key" code nil nil [104772 104809])
            ("buffer-menu-open" function
               (:documentation "Start key navigation of the buffer menu.
This is the keyboard interface to \\[mouse-buffer-menu]."
                :user-visible-flag t)
                nil [104811 105036])
            ("global-set-key" code nil nil [105038 105080])
            ("mouse-buffer-menu-keymap" function nil nil [105082 105409])
            ("tty-menu-navigation-map" variable
               (:documentation "Keymap used while processing TTY menus."
                :default-value (let ((map (make-sparse-keymap))) (dolist (bind '((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] 'tty-menu-exit) (define-key map [18] 'tty-menu-select) (define-key map [10] 'tty-menu-select) (define-key map [return] 'tty-menu-select) (define-key map [linefeed] 'tty-menu-select) (define-key map [mouse-1] 'tty-menu-select) (define-key map [drag-mouse-1] 'tty-menu-select) (define-key map [mouse-2] 'tty-menu-select) (define-key map [drag-mouse-2] 'tty-menu-select) (define-key map [mouse-3] 'tty-menu-select) (define-key map [drag-mouse-3] 'tty-menu-select) (define-key map [wheel-down] 'tty-menu-next-item) (define-key map [wheel-up] 'tty-menu-prev-item) (define-key map [wheel-left] 'tty-menu-prev-menu) (define-key map [wheel-right] 'tty-menu-next-menu) (define-key map [S-mouse-1] 'tty-menu-next-item) (define-key map [S-drag-mouse-1] 'tty-menu-next-item) (define-key map [S-mouse-2] 'tty-menu-prev-item) (define-key map [S-drag-mouse-2] 'tty-menu-prev-item) (define-key map [S-mouse-3] 'tty-menu-prev-item) (define-key map [S-drag-mouse-3] 'tty-menu-prev-item) (define-key map [header-line mouse-1] 'tty-menu-select) (define-key map [header-line drag-mouse-1] 'tty-menu-select) (define-key map [mode-line down-mouse-1] 'tty-menu-ignore) (define-key map [mode-line down-mouse-2] 'tty-menu-ignore) (define-key map [mode-line down-mouse-3] 'tty-menu-ignore) (define-key map [mode-line C-down-mouse-1] 'tty-menu-ignore) (define-key map [mode-line C-down-mouse-2] 'tty-menu-ignore) (define-key map [mode-line C-down-mouse-3] 'tty-menu-ignore) (define-key map [down-mouse-1] 'tty-menu-ignore) (define-key map [C-down-mouse-1] 'tty-menu-ignore) (define-key map [C-down-mouse-2] 'tty-menu-ignore) (define-key map [C-down-mouse-3] 'tty-menu-ignore) (define-key map [mouse-movement] 'tty-menu-mouse-movement) map))
                nil [105411 108956])
            ("menu-bar" package nil nil [108958 108977]))          
      :file "menu-bar.el.gz"
      :pointmax 109005
      :fsize 23340
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889634"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1044 1060])
            ("cl-lib" include nil nil [1080 1097])
            ("scroll-bar-event-ratio" function
               (:documentation "Given a scroll bar event EVENT, return the scroll bar position as a ratio.
The value is a cons cell (PORTION . WHOLE) containing two integers
whose ratio gives the event's vertical position in the scroll bar, with 0
referring to the top and 1 to the bottom."
                :arguments ("event"))
                nil [1119 1435])
            ("scroll-bar-scale" function
               (:documentation "Given a pair (NUM . DENOM) and WHOLE, return (/ (* NUM WHOLE) DENOM).
This is handy for scaling a position on a scroll bar into real units,
like buffer positions.  If SCROLL-BAR-POS is the (PORTION . WHOLE) pair
from a scroll bar event, then (scroll-bar-scale SCROLL-BAR-POS
(buffer-size)) is the position in the current buffer corresponding to
that scroll bar position."
                :arguments ("num-denom" "whole"))
                nil [1437 2118])
            ("scroll-bar-columns" function
               (:documentation "Return the width, measured in columns, of the vertical scrollbar on SIDE.
SIDE must be the symbol `left' or `right'."
                :arguments ("side"))
                nil [2120 2795])
            ("scroll-bar-lines" function (:documentation "Return the height, measured in lines, of the horizontal scrollbar.") nil [2797 3325])
            ("scroll-bar-mode" variable nil nil [3393 3417])
            ("horizontal-scroll-bar-mode" variable nil nil [3418 3453])
            ("previous-scroll-bar-mode" variable nil nil [3454 3491])
            ("scroll-bar-mode-explicit" variable (:documentation "Non-nil means `set-scroll-bar-mode' should really do something.
This is nil while loading `scroll-bar.el', and t afterward.") nil [3493 3658])
            ("set-scroll-bar-mode" function
               (:documentation "Set the scroll bar mode to VALUE and put the new value into effect.
See the `scroll-bar-mode' variable for possible values to use."
                :arguments ("value"))
                nil [3660 4072])
            ("scroll-bar-mode" variable
               (:documentation "Specify whether to have vertical scroll bars, and on which side.
Possible values are nil (no scroll bars), `left' (scroll bars on left)
and `right' (scroll bars on right).
To set this variable in a Lisp program, use `set-scroll-bar-mode'
to make it take real effect.
Setting the variable with a customization buffer also takes effect."
                :default-value default-frame-scroll-bars)
                nil [4074 4764])
            ("setq" code nil nil [4865 4898])
            ("get-scroll-bar-mode" function nil nil [4900 4992])
            ("define-minor-mode" code nil nil [4994 5347])
            ("horizontal-scroll-bars-available-p" function (:documentation "Return non-nil when horizontal scroll bars are available on this system.") nil [5349 5567])
            ("define-minor-mode" code nil nil [5569 6375])
            ("toggle-scroll-bar" function
               (:documentation "Toggle whether or not the selected frame has vertical scroll bars.
With ARG, turn vertical scroll bars on if and only if ARG is positive.
The variable `scroll-bar-mode' controls which side the scroll bars are on
when they are turned on; if it is nil, they go on the left."
                :user-visible-flag t
                :arguments ("arg"))
                nil [6377 7002])
            ("toggle-horizontal-scroll-bar" function
               (:documentation "Toggle whether or not the selected frame has horizontal scroll bars.
With ARG, turn vertical scroll bars on if and only if ARG is positive."
                :user-visible-flag t
                :arguments ("arg"))
                nil [7004 7470])
            ("scroll-bar-set-window-start" function
               (:documentation "Set the window start according to where the scroll bar is dragged.
EVENT should be a scroll bar click or drag event."
                :user-visible-flag t
                :arguments ("event"))
                nil [7578 8108])
            ("scroll-bar-drag-position" function
               (:documentation "Calculate new window start for drag event."
                :arguments ("portion-whole"))
                nil [8110 8365])
            ("scroll-bar-maybe-set-window-start" function
               (:documentation "Set the window start according to where the scroll bar is dragged.
Only change window start if the new start is substantially different.
EVENT should be a scroll bar click or drag event."
                :user-visible-flag t
                :arguments ("event"))
                nil [8367 9377])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9434 10366])
            ("scroll-bar-drag" function
               (:documentation "Scroll the window by dragging the scroll bar slider.
If you click outside the slider, the window scrolls to bring the slider there."
                :user-visible-flag t
                :arguments ("event"))
                nil [10368 11379])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11436 11936])
            ("scroll-bar-horizontal-drag" function
               (:documentation "Scroll the window horizontally by dragging the scroll bar slider.
If you click outside the slider, the window scrolls to bring the slider there."
                :user-visible-flag t
                :arguments ("event"))
                nil [11938 12995])
            ("scroll-bar-scroll-down" function
               (:documentation "Scroll the window's top line down to the location of the scroll bar click.
EVENT should be a scroll bar click."
                :user-visible-flag t
                :arguments ("event"))
                nil [12997 13745])
            ("scroll-bar-scroll-up" function
               (:documentation "Scroll the line next to the scroll bar click to the top of the window.
EVENT should be a scroll bar click."
                :user-visible-flag t
                :arguments ("event"))
                nil [13747 14487])
            ("scroll-bar-toolkit-scroll" function
               (:documentation "Handle event EVENT on vertical scroll bar."
                :user-visible-flag t
                :arguments ("event"))
                nil [14516 15716])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:documentation "Handle event EVENT on horizontal scroll bar."
                :user-visible-flag t
                :arguments ("event"))
                nil [15718 17303])
            ("cond" code nil nil [17374 18084])
            ("scroll-bar" package nil nil [18088 18109]))          
      :file "scroll-bar.el.gz"
      :pointmax 18139
      :fsize 4505
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1097 . 1098) (symbol 1062 . 1079) (open-paren 1061 . 1062)))
    (semanticdb-table "semanticdb-table-1889654"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("timezone-world-timezones" variable
               (:documentation "Time differentials of timezone from GMT in +-HHMM form.
This list is obsolescent, and is present only for backwards compatibility,
because time zone names are ambiguous in practice.
Use `current-time-zone' instead."
                :default-value '(("PST" . -800) ("PDT" . -700) ("MST" . -700) ("MDT" . -600) ("CST" . -600) ("CDT" . -500) ("EST" . -500) ("EDT" . -400) ("AST" . -400) ("NST" . -330) ("UT" . 0) ("GMT" . 0) ("BST" . 100) ("MET" . 100) ("EET" . 200) ("JST" . 900) ("GMT+1" . 100) ("GMT+2" . 200) ("GMT+3" . 300) ("GMT+4" . 400) ("GMT+5" . 500) ("GMT+6" . 600) ("GMT+7" . 700) ("GMT+8" . 800) ("GMT+9" . 900) ("GMT+10" . 1000) ("GMT+11" . 1100) ("GMT+12" . 1200) ("GMT+13" . 1300) ("GMT-1" . -100) ("GMT-2" . -200) ("GMT-3" . -300) ("GMT-4" . -400) ("GMT-5" . -500) ("GMT-6" . -600) ("GMT-7" . -700) ("GMT-8" . -800) ("GMT-9" . -900) ("GMT-10" . -1000) ("GMT-11" . -1100) ("GMT-12" . -1200)))
                nil [923 2055])
            ("timezone-months-assoc" variable
               (:documentation "Alist of first three letters of a month and its numerical representation."
                :default-value '(("JAN" . 1) ("FEB" . 2) ("MAR" . 3) ("APR" . 4) ("MAY" . 5) ("JUN" . 6) ("JUL" . 7) ("AUG" . 8) ("SEP" . 9) ("OCT" . 10) ("NOV" . 11) ("DEC" . 12)))
                nil [2057 2330])
            ("timezone-make-date-arpa-standard" function
               (:documentation "Convert DATE to an arpanet standard date.
Optional 2nd argument LOCAL specifies the default local timezone of the DATE;
if nil, GMT is assumed.
Optional 3rd argument TIMEZONE specifies a time zone to be represented in;
if nil, the local time zone is assumed."
                :arguments ("date" "local" "timezone"))
                nil [2332 2902])
            ("timezone-make-date-sortable" function
               (:documentation "Convert DATE to a sortable date string.
Optional 2nd argument LOCAL specifies the default local timezone of the DATE;
if nil, GMT is assumed.
Optional 3rd argument TIMEZONE specifies a timezone to be represented in;
if nil, the local time zone is assumed."
                :arguments ("date" "local" "timezone"))
                nil [2904 3443])
            ("timezone-make-arpa-date" function
               (:documentation "Make arpanet standard date string from YEAR, MONTH, DAY, and TIME.
Optional argument TIMEZONE specifies a time zone."
                :arguments ("year" "month" "day" "time" "timezone"))
                nil [3499 4049])
            ("timezone-make-sortable-date" function
               (:documentation "Make sortable date string from YEAR, MONTH, DAY, and TIME."
                :arguments ("year" "month" "day" "time"))
                nil [4051 4221])
            ("timezone-make-time-string" function
               (:documentation "Make time string from HOUR, MINUTE, and SECOND."
                :arguments ("hour" "minute" "second"))
                nil [4223 4376])
            ("timezone-parse-date" function
               (:documentation "Parse DATE and return a vector [YEAR MONTH DAY TIME TIMEZONE].
Two-digit dates are `windowed'.  Those <69 have 2000 added; otherwise 1900
is added.  Three-digit dates have 1900 added.
TIMEZONE is nil for DATEs without a zone field.

Understands the following styles:
 (1) 14 Apr 89 03:20[:12] [GMT]
 (2) Fri, 17 Mar 89 4:01[:33] [GMT]
 (3) Mon Jan 16 16:12[:37] [GMT] 1989
 (4) 6 May 1992 1641-JST (Wednesday)
 (5) 22-AUG-1993 10:59:12.82
 (6) Thu, 11 Apr 16:17:12 91 [MET]
 (7) Mon, 6  Jul 16:47:20 T 1992 [MET]
 (8) 1996-06-24 21:13:12 [GMT]
 (9) 1996-06-24 21:13-ZONE
 (10) 19960624T211312"
                :arguments ("date"))
                nil [4378 10198])
            ("timezone-parse-time" function
               (:documentation "Parse TIME (HH:MM:SS) and return a vector [hour minute second].
Recognize HH:MM:SS, HH:MM, HHMMSS, HHMM."
                :arguments ("time"))
                nil [10200 11075])
            ("timezone-zone-to-minute" function
               (:documentation "Translate TIMEZONE to an integer minute offset from GMT.
TIMEZONE can be a cons cell containing the output of `current-time-zone',
or an integer of the form +-HHMM, or a time zone name."
                :arguments ("timezone"))
                nil [11097 11814])
            ("timezone-time-from-absolute" function
               (:documentation "Compute the UTC time equivalent to DATE at time SECONDS after midnight.
Return a list suitable as an argument to `current-time-zone',
or nil if the date cannot be thus represented.
DATE is the number of days elapsed since the (imaginary)
Gregorian date Sunday, December 31, 1 BC."
                :arguments ("date" "seconds"))
                nil [11816 12431])
            ("timezone-time-zone-from-absolute" function
               (:documentation "Compute the local time zone for DATE at time SECONDS after midnight.
Return a list in the same format as `current-time-zone's result,
or nil if the local time zone could not be computed.
DATE is the number of days elapsed since the (imaginary)
Gregorian date Sunday, December 31, 1 BC."
                :arguments ("date" "seconds"))
                nil [12433 12974])
            ("timezone-fix-time" function
               (:documentation "Convert DATE (default timezone LOCAL) to YYYY-MM-DD-HH-MM-SS-ZONE vector.
If LOCAL is nil, it is assumed to be GMT.
If TIMEZONE is nil, use the local time zone."
                :arguments ("date" "local" "timezone"))
                nil [12976 14829])
            ("timezone-last-day-of-month" function
               (:documentation "The last day in MONTH during YEAR."
                :arguments ("month" "year"))
                nil [14911 15119])
            ("timezone-leap-year-p" function
               (:documentation "Return t if YEAR is a Gregorian leap year."
                :arguments ("year"))
                nil [15121 15294])
            ("timezone-day-number" function
               (:documentation "Return the day number within the year of the date month/day/year."
                :arguments ("month" "day" "year"))
                nil [15296 15649])
            ("timezone-absolute-from-gregorian" function
               (:documentation "The number of days between the Gregorian date 12/31/1 BC and month/day/year.
The Gregorian date Sunday, December 31, 1 BC is imaginary."
                :arguments ("month" "day" "year"))
                nil [15651 16067])
            ("timezone" package nil nil [16094 16113]))          
      :file "timezone.el.gz"
      :pointmax 16141
      :fsize 4735
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889674"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1177 1198])
            ("add-hook" code nil nil [1269 1320])
            ("add-hook" code nil nil [1321 1372])
            ("help-window-point-marker" variable
               (:documentation "Marker to override default `window-point' in help windows."
                :default-value (make-marker))
                nil [1793 1903])
            ("help-window-old-frame" variable (:documentation "Frame selected at the time `with-help-window' is invoked.") nil [1905 2001])
            ("help-map" variable
               (:documentation "Keymap for characters following the Help key."
                :default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) 'help-for-help) (define-key map [help] 'help-for-help) (define-key map [f1] 'help-for-help) (define-key map "." 'display-local-help) (define-key map "?" 'help-for-help) (define-key map "" 'about-emacs) (define-key map "" 'describe-copying) (define-key map "" 'view-emacs-debugging) (define-key map "" 'view-external-packages) (define-key map "" 'view-emacs-FAQ) (define-key map "" 'view-order-manuals) (define-key map "" 'view-emacs-news) (define-key map "" 'describe-distribution) (define-key map "" 'view-emacs-problems) (define-key map "" 'search-forward-help-for-help) (define-key map "" 'view-emacs-todo) (define-key map "" 'describe-no-warranty) (define-key map "" 'describe-input-method) (define-key map "C" 'describe-coding-system) (define-key map "F" 'Info-goto-emacs-command-node) (define-key map "I" 'describe-input-method) (define-key map "K" 'Info-goto-emacs-key-command-node) (define-key map "L" 'describe-language-environment) (define-key map "S" 'info-lookup-symbol) (define-key map "a" 'apropos-command) (define-key map "b" 'describe-bindings) (define-key map "c" 'describe-key-briefly) (define-key map "d" 'apropos-documentation) (define-key map "e" 'view-echo-area-messages) (define-key map "f" 'describe-function) (define-key map "g" 'describe-gnu-project) (define-key map "h" 'view-hello-file) (define-key map "i" 'info) (define-key map "4i" 'info-other-window) (define-key map "k" 'describe-key) (define-key map "l" 'view-lossage) (define-key map "m" 'describe-mode) (define-key map "o" 'describe-symbol) (define-key map "n" 'view-emacs-news) (define-key map "p" 'finder-by-keyword) (define-key map "P" 'describe-package) (define-key map "r" 'info-emacs-manual) (define-key map "s" 'describe-syntax) (define-key map "t" 'help-with-tutorial) (define-key map "w" 'where-is) (define-key map "v" 'describe-variable) (define-key map "q" 'help-quit) map))
                nil [2003 4350])
            ("define-key" code nil nil [4352 4416])
            ("define-key" code nil nil [4417 4461])
            ("define-key" code nil nil [4462 4504])
            ("fset" code nil nil [4505 4534])
            ("help-button-cache" variable nil nil [4603 4633])
            ("help-quit" function
               (:documentation "Just exit from the Help command's command loop."
                :user-visible-flag t)
                nil [4637 4731])
            ("help-return-method" variable (:documentation "What to do to \"exit\" the help buffer.
This is a list
 (WINDOW . t)              delete the selected window (and possibly its frame,
                           see `quit-window'), go to WINDOW.
 (WINDOW . quit-window)    do quit-window, then select WINDOW.
 (WINDOW BUF START POINT)  display BUF at START, POINT, then select WINDOW.") nil [4733 5102])
            ("define-obsolete-function-alias" code nil nil [5104 5197])
            ("help-print-return-message" function
               (:documentation "Display or return message saying how to restore windows after help command.
This function assumes that `standard-output' is the help buffer.
It computes a message, and applies the optional argument FUNCTION to it.
If FUNCTION is nil, it applies `message', thus displaying the message.
In addition, this function sets up `help-return-method', which see, that
specifies what to do when the user exits the help buffer.

Do not call this in the scope of `with-help-window'."
                :arguments ("function"))
                nil [5198 7493])
            ("fset" code nil nil [7553 7614])
            ("defalias" code nil nil [7616 7656])
            ("defalias" code nil nil [7689 7738])
            ("make-help-screen" code nil nil [7784 10942])
            ("function-called-at-point" function (:documentation "Return a function around point or else called by the list containing point.
If that doesn't give a function, return nil.") nil [10947 12679])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12710 12865])
            ("describe-distribution" function
               (:documentation "Display info on how to obtain the latest version of GNU Emacs."
                :user-visible-flag t)
                nil [12867 13011])
            ("describe-copying" function
               (:documentation "Display info on how you may redistribute copies of GNU Emacs."
                :user-visible-flag t)
                nil [13013 13151])
            ("describe-gnu-project" function
               (:documentation "Browse online information on the GNU project."
                :user-visible-flag t)
                nil [13199 13356])
            ("describe-no-warranty" function
               (:documentation "Display info on all the kinds of warranty Emacs does NOT have."
                :user-visible-flag t)
                nil [13358 13604])
            ("describe-prefix-bindings" function
               (:documentation "Describe the bindings of the prefix used to reach this command.
The prefix described consists of all but the last event
of the key sequence that ran this command."
                :user-visible-flag t)
                nil [13606 14112])
            ("setq" code nil nil [14203 14255])
            ("view-emacs-news" function
               (:documentation "Display info on recent changes to Emacs.
With argument, display info only for the selected version."
                :user-visible-flag t
                :arguments ("version"))
                nil [14257 16667])
            ("view-emacs-todo" function
               (:documentation "Display the Emacs TODO list."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [16669 16788])
            ("view-echo-area-messages" function
               (:documentation "View the log of recent echo-area messages: the `*Messages*' buffer.
The number of messages retained in that buffer
is specified by the variable `message-log-max'."
                :user-visible-flag t)
                nil [16790 17115])
            ("view-order-manuals" function
               (:documentation "Display information on how to buy printed copies of Emacs manuals."
                :user-visible-flag t)
                nil [17117 17295])
            ("view-emacs-FAQ" function
               (:documentation "Display the Emacs Frequently Asked Questions (FAQ) file."
                :user-visible-flag t)
                nil [17297 17484])
            ("view-emacs-problems" function
               (:documentation "Display info on known problems with Emacs and possible workarounds."
                :user-visible-flag t)
                nil [17486 17634])
            ("view-emacs-debugging" function
               (:documentation "Display info on how to debug Emacs problems."
                :user-visible-flag t)
                nil [17636 17759])
            ("view-external-packages" function
               (:documentation "Display info on where to get more Emacs packages."
                :user-visible-flag t)
                nil [17828 17985])
            ("view-lossage" function
               (:documentation "Display last few input keystrokes and the commands run.
For convenience this uses the same format as
`edit-last-kbd-macro'.

To record all your input, use `open-dribble-file'."
                :user-visible-flag t)
                nil [17987 19026])
            ("describe-bindings" function
               (:documentation "Display a buffer showing a list of all defined keys, and their definitions.
The keys are displayed in order of precedence.

The optional argument PREFIX, if non-nil, should be a key sequence;
then we display only bindings that start with that prefix.
The optional argument BUFFER specifies which buffer's bindings
to display (default, the current buffer).  BUFFER can be a buffer
or a buffer name."
                :user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [19047 19883])
            ("describe-bindings-internal" function
               (:documentation "Show a list of all defined keys, and their definitions.
We put that list in a buffer, and display the buffer.

The optional argument MENUS, if non-nil, says to mention menu bindings.
(Ordinarily these are omitted from the output.)
The optional argument PREFIX, if non-nil, should be a key sequence;
then we display only bindings that start with that prefix."
                :arguments ("menus" "prefix"))
                nil [19926 20660])
            ("where-is" function
               (:documentation "Print message listing key sequences that invoke the command DEFINITION.
Argument is a command definition, usually a symbol with a function definition.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer."
                :user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20662 22824])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22826 23186])
            ("help--binding-undefined-p" function (:arguments ("defn")) nil [23188 23287])
            ("help--analyze-key" function
               (:documentation "Get information about KEY its corresponding UNTRANSLATED events.
Returns a list of the form (BRIEF-DESC DEFN EVENT MOUSE-MSG)."
                :arguments ("key" "untranslated"))
                nil [23289 25101])
            ("help--filter-info-list" function
               (:documentation "Drop the undefined keys."
                :arguments ("info-list" "i"))
                nil [25103 25430])
            ("describe-key-briefly" function
               (:documentation "Print the name of the functions KEY-LIST invokes.
KEY-LIST is a list of pairs (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.

While reading KEY-LIST interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them."
                :arguments ("key-list" "insert" "untranslated"))
                nil [25432 26767])
            ("help--key-binding-keymap" function
               (:documentation "Return a keymap holding a binding for KEY within current keymaps.
The effect of the arguments KEY, ACCEPT-DEFAULT, NO-REMAP and
POSITION is as documented in the function `key-binding'."
                :arguments ("key" "accept-default" "no-remap" "position"))
                nil [26769 27831])
            ("help--binding-locus" function
               (:documentation "Describe in which keymap KEY is defined.
Return a symbol pointing to that keymap if one exists ; otherwise
return nil.  The argument POSITION is as documented in the
function `key-binding'."
                :arguments ("key" "position"))
                nil [27833 29518])
            ("help--read-key-sequence" function
               (:documentation "Read a key sequence from the user.
Usually reads a single key sequence, except when that sequence might
hide another one (e.g. a down event, where the user is interested
in getting info about the up event, or a click event, where the user
wants to get info about the double click).
Return a list of elements of the form (SEQ . RAW-SEQ), where SEQ is a key
sequence, and RAW-SEQ is its untranslated form.
If NO-MOUSE-MOVEMENT is non-nil, ignore key sequences starting
with `mouse-movement' events."
                :arguments ("no-mouse-movement"))
                nil [29520 31917])
            ("describe-key" function
               (:documentation "Display documentation of the function invoked by KEY-LIST.
KEY-LIST can be any kind of a key sequence; it can include keyboard events,
mouse events, and/or menu events.  When calling from a program,
pass KEY-LIST as a list of elements (SEQ . RAW-SEQ) where SEQ is
a key-sequence and RAW-SEQ is its untranslated form.

While reading KEY-LIST interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them.

BUFFER is the buffer in which to lookup those keys; it defaults to the
current buffer."
                :arguments ("key-list" "buffer" "up-event"))
                nil [31919 35822])
            ("describe-mode" function
               (:documentation "Display documentation of current major mode and minor modes.
A brief summary of the minor modes comes first, followed by the
major mode description.  This is followed by detailed
descriptions of the minor modes, each on a separate page.

For this to work correctly for a minor mode, the mode's indicator
variable (listed in `minor-mode-alist') must also be a function
whose documentation describes the minor mode.

If called from Lisp with a non-nil BUFFER argument, display
documentation for the major and minor modes of that buffer."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [35825 39920])
            ("search-forward-help-for-help" function
               (:documentation "Search forward \"help window\"."
                :user-visible-flag t)
                nil [39922 40146])
            ("describe-minor-mode" function
               (:documentation "Display documentation of a minor mode given as MINOR-MODE.
MINOR-MODE can be a minor mode symbol or a minor mode indicator string
appeared on the mode-line."
                :user-visible-flag t
                :arguments ("minor-mode"))
                nil [40148 41035])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [41047 41261])
            ("describe-minor-mode-from-symbol" function
               (:documentation "Display documentation of a minor mode given as a symbol, SYMBOL"
                :user-visible-flag t
                :arguments ("symbol"))
                nil [41263 41607])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [41622 41939])
            ("describe-minor-mode-from-indicator" function
               (:documentation "Display documentation of a minor mode specified by INDICATOR.
If you call this function interactively, you can give indicator which
is currently activated with completion."
                :user-visible-flag t
                :arguments ("indicator"))
                nil [41941 42490])
            ("lookup-minor-mode-from-indicator" function
               (:documentation "Return a minor mode symbol from its indicator on the mode line."
                :arguments ("indicator"))
                nil [42492 43282])
            ("declare-function" code nil nil [43285 43356])
            ("declare-function" code nil nil [43357 43427])
            ("temp-buffer-max-height" variable
               (:documentation "Maximum height of a window displaying a temporary buffer.
This is effective only when Temp Buffer Resize mode is enabled.
The value is the maximum height (in lines) which
`resize-temp-buffer-window' will give to a window displaying a
temporary buffer.  It can also be a function to be called to
choose the height for such a buffer.  It gets one argument, the
buffer, and should return a positive integer.  At the time the
function is called, the window to be resized is selected."
                :default-value (lambda (_buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2))))
                nil [43474 44244])
            ("temp-buffer-max-width" variable
               (:documentation "Maximum width of a window displaying a temporary buffer.
This is effective only when Temp Buffer Resize mode is enabled.
The value is the maximum width (in columns) which
`resize-temp-buffer-window' will give to a window displaying a
temporary buffer.  It can also be a function to be called to
choose the width for such a buffer.  It gets one argument, the
buffer, and should return a positive integer.  At the time the
function is called, the window to be resized is selected."
                :default-value (lambda (_buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2))))
                nil [44246 45011])
            ("define-minor-mode" code nil nil [45013 46000])
            ("resize-temp-buffer-window" function
               (:documentation "Resize WINDOW to fit its contents.
WINDOW must be a live window and defaults to the selected one.
Do not resize if WINDOW was not created by `display-buffer'.

If WINDOW is part of a vertical combination, restrain its new
size by `temp-buffer-max-height' and do not resize if its minimum
accessible position is scrolled out of view.  If WINDOW is part
of a horizontal combination, restrain its new size by
`temp-buffer-max-width'.  In both cases, the value of the option
`fit-window-to-buffer-horizontally' can inhibit resizing.

If WINDOW is the root window of its frame, resize the frame
provided `fit-frame-to-buffer' is non-nil.

This function may call `preserve-window-size' to preserve the
size of WINDOW."
                :arguments ("window"))
                nil [46002 47759])
            ("help-window-select" variable (:documentation "Non-nil means select help window for viewing.
Choices are:

 never (nil) Select help window only if there is no other window
             on its frame.

 other       Select help window if and only if it appears on the
             previously selected frame, that frame contains at
             least two other windows and the help window is
             either new or showed a different buffer before.

 always (t)  Always select the help window.

If this option is non-nil and the help window appears on another
frame, then give that frame input focus too.  Note also that if
the help window appears on another frame, it may get selected and
its frame get input focus even if this option is nil.

This option has effect if and only if the help window was created
by `with-help-window'.") nil [47779 48747])
            ("help-enable-auto-load" variable
               (:documentation "Whether Help commands can perform autoloading.
If non-nil, whenever \\[describe-function] is called for an
autoloaded function whose docstring contains any key substitution
construct (see `substitute-command-keys'), the library is loaded,
so that the documentation can show the right key bindings."
                :default-value t)
                nil [48749 49136])
            ("help-window-display-message" function
               (:documentation "Display message telling how to quit and scroll help window.
QUIT-PART is a string telling how to quit the help window WINDOW.
Optional argument SCROLL non-nil means tell how to scroll WINDOW.
SCROLL equal `other' means tell how to scroll the \"other\"
window."
                :arguments ("quit-part" "window" "scroll"))
                nil [49138 50056])
            ("help-window-setup" function
               (:documentation "Set up help window WINDOW for `with-help-window'.
WINDOW is the window used for displaying the help buffer.
Return VALUE."
                :arguments ("window" "value"))
                nil [50058 52859])
            ("with-help-window" function
               (:documentation "Evaluate BODY, send output to BUFFER-OR-NAME and show in a help window.
This construct is like `with-temp-buffer-window' but unlike that
puts the buffer specified by BUFFER-OR-NAME in `help-mode' and
displays a message about how to delete the help window when it's no
longer needed.  The help window will be selected if
`help-window-select' is non-nil.
Most of this  is done by `help-window-setup', which see."
                :arguments ("buffer-or-name" "body"))
                nil [53431 54471])
            ("help-form-show" function (:documentation "Display the output of a non-nil `help-form'.") nil [54599 54789])
            ("help--docstring-quote" function
               (:documentation "Return a doc string that represents STRING.
The result, when formatted by `substitute-command-keys', should equal STRING."
                :arguments ("string"))
                nil [54793 55015])
            ("help-split-fundoc" function
               (:documentation "Split a function DOCSTRING into the actual doc and the usage info.
Return (USAGE . DOC) or nil if there's no usage info, where USAGE info
is a string describing the argument list of DEF, such as
\"(apply FUNCTION &rest ARGUMENTS)\".
DEF is the function whose usage we're looking for in DOCSTRING."
                :arguments ("docstring" "def"))
                nil [55240 56253])
            ("help-add-fundoc-usage" function
               (:documentation "Add the usage info to DOCSTRING.
If DOCSTRING already has a usage info, then just return it unchanged.
The usage info is built from ARGLIST.  DOCSTRING can be nil.
ARGLIST can also be t or a string of the form \"(FUN ARG1 ARG2 ...)\"."
                :arguments ("docstring" "arglist"))
                nil [56255 57105])
            ("help-function-arglist" function
               (:documentation "Return a formal argument list for the function DEF.
If PRESERVE-NAMES is non-nil, return a formal arglist that uses
the same names as used in the original source code, when possible."
                :arguments ("def" "preserve-names"))
                nil [57107 59496])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [59498 59936])
            ("define-obsolete-function-alias" code nil nil [59938 60012])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [60014 60169])
            ("help" package nil nil [60173 60188]))          
      :file "help.el.gz"
      :pointmax 60212
      :fsize 17643
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1198 . 1199) (symbol 1159 . 1176) (open-paren 1158 . 1159)))
    (semanticdb-table "semanticdb-table-1889694"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("talk-display-alist" variable (:documentation "Alist of displays on which Emacs talk is now running.
Each element has the form (DISPLAY FRAME BUFFER).") nil [1023 1162])
            ("talk-connect" function
               (:documentation "Connect to display DISPLAY for the Emacs talk group."
                :user-visible-flag t
                :arguments ("display"))
                nil [1179 1624])
            ("talk" function
               (:documentation "Connect to the Emacs talk group from the current X display or tty frame."
                :user-visible-flag t)
                nil [1641 1951])
            ("talk-add-display" function (:arguments ("display")) nil [1953 2525])
            ("talk-handle-delete-frame" function (:arguments ("frame")) nil [2527 2721])
            ("talk-disconnect" function
               (:documentation "Disconnect this display from the Emacs talk group."
                :user-visible-flag t)
                nil [2723 3087])
            ("talk-update-buffers" function (:documentation "Update all the talk frames so that each shows all the talk buffers.") nil [3089 3614])
            ("talk-split-up-frame" function
               (:documentation "Split FRAME into equal-sized windows displaying the buffers in BUFFERS.
Select the first of these windows, displaying the first of the buffers."
                :arguments ("frame" "buffers"))
                nil [3616 4267])
            ("talk" package nil nil [4269 4284]))          
      :file "talk.el.gz"
      :pointmax 4308
      :fsize 1646
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18896b4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [990 2023])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [2025 2322])
            ("save-selected-window" function
               (:documentation "Execute BODY, then select the previously selected window.
The value returned is the value of the last form in BODY.

This macro saves and restores the selected window, as well as the
selected window in each frame.  If the previously selected window
is no longer live, then whatever window is selected at the end of
BODY remains selected.  If the previously selected window of some
frame is no longer live at the end of BODY, that frame's selected
window is left alone.

This macro saves and restores the current buffer, since otherwise
its normal operation could make a different buffer current.  The
order of recently selected windows and the buffer list ordering
are not altered by this macro (unless they are altered in BODY)."
                :arguments ("body"))
                nil [2324 3362])
            ("temp-buffer-window-setup-hook" variable (:documentation "Normal hook run by `with-temp-buffer-window' before buffer display.
This hook is run by `with-temp-buffer-window' with the buffer to be
displayed current.") nil [3364 3565])
            ("temp-buffer-window-show-hook" variable (:documentation "Normal hook run by `with-temp-buffer-window' after buffer display.
This hook is run by `with-temp-buffer-window' with the buffer
displayed and current and its window selected.") nil [3567 3788])
            ("temp-buffer-window-setup" function
               (:documentation "Set up temporary buffer specified by BUFFER-OR-NAME.
Return the buffer."
                :arguments ("buffer-or-name"))
                nil [3790 4404])
            ("temp-buffer-window-show" function
               (:documentation "Show temporary buffer BUFFER in a window.
Return the window showing BUFFER.  Pass ACTION as action argument
to `display-buffer'."
                :arguments ("buffer" "action"))
                nil [4406 5650])
            ("with-temp-buffer-window" function
               (:documentation "Bind `standard-output' to BUFFER-OR-NAME, eval BODY, show the buffer.
BUFFER-OR-NAME must specify either a live buffer, or the name of
a buffer (if it does not exist, this macro creates it).

Make the buffer specified by BUFFER-OR-NAME empty before running
BODY and bind `standard-output' to that buffer, so that output
generated with `prin1' and similar functions in BODY goes into
that buffer.  Do not make that buffer current for running the
forms in BODY.  Use `with-current-buffer-window' instead if you
need to run BODY with that buffer current.

At the end of BODY, mark the specified buffer unmodified and
read-only, and display it in a window (but do not select it).
The display happens by calling `display-buffer' passing it the
ACTION argument.  If `temp-buffer-resize-mode' is enabled, the
corresponding window may be resized automatically.

Return the value returned by BODY, unless QUIT-FUNCTION specifies
a function.  In that case, run that function with two arguments -
the window showing the specified buffer and the value returned by
BODY - and return the value returned by that function.

If the buffer is displayed on a new frame, the window manager may
decide to select that frame.  In that case, it's usually a good
strategy if QUIT-FUNCTION selects the window showing the buffer
before reading any value from the minibuffer; for example, when
asking a `yes-or-no-p' question.

This runs the hook `temp-buffer-window-setup-hook' before BODY,
with the specified buffer temporarily current.  It runs the hook
`temp-buffer-window-show-hook' after displaying the buffer, with
that buffer temporarily current, and the window that was used to
display it temporarily selected.

This construct is similar to `with-output-to-temp-buffer' but,
neither runs `temp-buffer-setup-hook' which usually puts the
buffer in Help mode, nor `temp-buffer-show-function' (the ACTION
argument replaces this)."
                :arguments ("buffer-or-name" "action" "quit-function" "body"))
                nil [5652 8234])
            ("with-current-buffer-window" function
               (:documentation "Evaluate BODY with a buffer BUFFER-OR-NAME current and show that buffer.
This construct is like `with-temp-buffer-window' but unlike that
makes the buffer specified by BUFFER-OR-NAME current for running
BODY."
                :arguments ("buffer-or-name" "action" "quit-function" "body"))
                nil [8236 9125])
            ("with-displayed-buffer-window" function
               (:documentation "Show a buffer BUFFER-OR-NAME and evaluate BODY in that buffer.
This construct is like `with-current-buffer-window' but unlike that
displays the buffer specified by BUFFER-OR-NAME before running BODY."
                :arguments ("buffer-or-name" "action" "quit-function" "body"))
                nil [9127 11455])
            ("window-right" function
               (:documentation "Return WINDOW's right sibling.
Return nil if WINDOW is the root window of its frame.  WINDOW can
be any window."
                :arguments ("window"))
                nil [11762 11974])
            ("window-left" function
               (:documentation "Return WINDOW's left sibling.
Return nil if WINDOW is the root window of its frame.  WINDOW can
be any window."
                :arguments ("window"))
                nil [11976 12186])
            ("window-child" function
               (:documentation "Return WINDOW's first child window.
WINDOW can be any window."
                :arguments ("window"))
                nil [12188 12343])
            ("window-child-count" function
               (:documentation "Return number of WINDOW's child windows.
WINDOW can be any window."
                :arguments ("window"))
                nil [12345 12641])
            ("window-last-child" function
               (:documentation "Return last child window of WINDOW.
WINDOW can be any window."
                :arguments ("window"))
                nil [12643 12910])
            ("window-normalize-buffer" function
               (:documentation "Return buffer specified by BUFFER-OR-NAME.
BUFFER-OR-NAME must be a live buffer, a string naming a live
buffer or nil which means to return the current buffer.

This function is commonly used to process the (usually optional)
\"BUFFER-OR-NAME\" argument of window related functions where nil
stands for the current buffer."
                :arguments ("buffer-or-name"))
                nil [12912 13684])
            ("window-normalize-frame" function
               (:documentation "Return frame specified by FRAME.
FRAME must be a live frame or nil which means to return the
selected frame.

This function is commonly used to process the (usually optional)
\"FRAME\" argument of window and frame related functions where
nil stands for the selected frame."
                :arguments ("frame"))
                nil [13686 14116])
            ("window-normalize-window" function
               (:documentation "Return window specified by WINDOW.
If WINDOW is nil, return the selected window.  Otherwise, if
WINDOW is a live or an internal window, return WINDOW; if
LIVE-ONLY is non-nil, return WINDOW for a live window only.
Otherwise, signal an error.

This function is commonly used to process the (usually optional)
\"WINDOW\" argument of window related functions where nil stands
for the selected window."
                :arguments ("window" "live-only"))
                nil [14118 14825])
            ("frame-char-size" function
               (:documentation "Return the value of `frame-char-height' for WINDOW-OR-FRAME.
If WINDOW-OR-FRAME is a live frame, return the value of
`frame-char-height' for that frame.  If WINDOW-OR-FRAME is a
valid window, return the value of `frame-char-height' for that
window's frame.  In any other case, return the value of
`frame-char-height' for the selected frame.

Optional argument HORIZONTAL non-nil means to return the value of
`frame-char-width' for WINDOW-OR-FRAME."
                :arguments ("window-or-frame" "horizontal"))
                nil [14864 15636])
            ("ignore-window-parameters" variable (:documentation "If non-nil, standard functions ignore window parameters.
The functions currently affected by this are `split-window',
`delete-window', `delete-other-windows' and `other-window'.

An application may bind this to a non-nil value around calls to
these functions to inhibit processing of window parameters.") nil [15638 15982])
            ("window-safe-min-height" variable
               (:documentation "The absolute minimum number of lines of any window.
Anything less might crash Emacs."
                :constant-flag t
                :default-value 1)
                nil [16032 16156])
            ("window-safe-min-pixel-height" function
               (:documentation "Return the absolute minimum pixel height of WINDOW."
                :arguments ("window"))
                nil [16158 16354])
            ("window-min-height" variable
               (:documentation "The minimum total height, in lines, of any window.
The value has to accommodate one text line, a mode and header
line, a horizontal scroll bar and a bottom divider, if present.
A value less than `window-safe-min-height' is ignored.  The value
of this variable is honored when windows are resized or split.

Applications should never rebind this variable.  To resize a
window to a height less than the one specified here, an
application should instead call `window-resize' with a non-nil
IGNORE argument.  In order to have `split-window' make a window
shorter, explicitly specify the SIZE argument of that function."
                :default-value 4)
                nil [16356 17059])
            ("window-min-pixel-height" function
               (:documentation "Return the minimum pixel height of window WINDOW."
                :arguments ("window"))
                nil [17061 17248])
            ("window-safe-min-width" variable
               (:documentation "The absolute minimum number of columns of a window.
Anything less might crash Emacs."
                :constant-flag t
                :default-value 2)
                nil [17298 17421])
            ("window-safe-min-pixel-width" function
               (:documentation "Return the absolute minimum pixel width of WINDOW."
                :arguments ("window"))
                nil [17423 17618])
            ("window-min-width" variable
               (:documentation "The minimum total width, in columns, of any window.
The value has to accommodate two text columns as well as margins,
fringes, a scroll bar and a right divider, if present.  A value
less than `window-safe-min-width' is ignored.  The value of this
variable is honored when windows are resized or split.

Applications should never rebind this variable.  To resize a
window to a width less than the one specified here, an
application should instead call `window-resize' with a non-nil
IGNORE argument.  In order to have `split-window' make a window
narrower, explicitly specify the SIZE argument of that function."
                :default-value 10)
                nil [17620 18319])
            ("window-min-pixel-width" function
               (:documentation "Return the minimum pixel width of window WINDOW."
                :arguments ("window"))
                nil [18321 18506])
            ("window-safe-min-pixel-size" function
               (:documentation "Return the absolute minimum pixel height of WINDOW.
Optional argument HORIZONTAL non-nil means return the absolute
minimum pixel width of WINDOW."
                :arguments ("window" "horizontal"))
                nil [18508 18825])
            ("window-min-pixel-size" function
               (:documentation "Return the minimum pixel height of WINDOW.
Optional argument HORIZONTAL non-nil means return the minimum
pixel width of WINDOW."
                :arguments ("window" "horizontal"))
                nil [18827 19111])
            ("window-combined-p" function
               (:documentation "Return non-nil if WINDOW has siblings in a given direction.
WINDOW must be a valid window and defaults to the selected one.

HORIZONTAL determines a direction for the window combination.  If
HORIZONTAL is omitted or nil, return non-nil if WINDOW is part of
a vertical window combination.  If HORIZONTAL is non-nil, return
non-nil if WINDOW is part of a horizontal window combination."
                :arguments ("window" "horizontal"))
                nil [19113 19745])
            ("window-combination-p" function
               (:documentation "Return WINDOW's first child if WINDOW is a vertical combination.
WINDOW can be any window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return WINDOW's first
child if WINDOW is a horizontal combination."
                :arguments ("window" "horizontal"))
                nil [19747 20173])
            ("window-combinations" function
               (:documentation "Return largest number of windows vertically arranged within WINDOW.
WINDOW must be a valid window and defaults to the selected one.
If HORIZONTAL is non-nil, return the largest number of
windows horizontally arranged within WINDOW."
                :arguments ("window" "horizontal"))
                nil [20175 21282])
            ("walk-window-tree-1" function
               (:documentation "Helper function for `walk-window-tree' and `walk-window-subtree'."
                :arguments ("fun" "walk-window-tree-window" "any" "sub-only"))
                nil [21284 21996])
            ("walk-window-tree" function
               (:documentation "Run function FUN on each live window of FRAME.
FUN must be a function with one argument - a window.  FRAME must
be a live frame and defaults to the selected one.  ANY, if
non-nil, means to run FUN on all live and internal windows of
FRAME.

Optional argument MINIBUF t means run FUN on FRAME's minibuffer
window even if it isn't active.  MINIBUF nil or omitted means run
FUN on FRAME's minibuffer window only if it's active.  In both
cases the minibuffer window must be part of FRAME.  MINIBUF
neither nil nor t means never run FUN on the minibuffer window.

This function performs a pre-order, depth-first traversal of the
window tree.  If FUN changes the window tree, the result is
unpredictable."
                :arguments ("fun" "frame" "any" "minibuf"))
                nil [21998 23221])
            ("walk-window-subtree" function
               (:documentation "Run function FUN on the subtree of windows rooted at WINDOW.
WINDOW defaults to the selected window.  FUN must be a function
with one argument - a window.  By default, run FUN only on live
windows of the subtree.  If the optional argument ANY is non-nil,
run FUN on all live and internal windows of the subtree.  If
WINDOW is live, run FUN on WINDOW only.

This function performs a pre-order, depth-first traversal of the
subtree rooted at WINDOW.  If FUN changes that tree, the result
is unpredictable."
                :arguments ("fun" "window" "any"))
                nil [23223 23874])
            ("window-with-parameter" function
               (:documentation "Return first window on FRAME with PARAMETER non-nil.
FRAME defaults to the selected frame.  Optional argument VALUE
non-nil means only return a window whose window-parameter value
for PARAMETER equals VALUE (comparison is done with `equal').
Optional argument ANY non-nil means consider internal windows
too.

Optional argument MINIBUF t means consider FRAME's minibuffer
window even if it isn't active.  MINIBUF nil or omitted means
consider FRAME's minibuffer window only if it's active.  In both
cases the minibuffer window must be part of FRAME.  MINIBUF
neither nil nor t means never consider the minibuffer window."
                :arguments ("parameter" "value" "frame" "any" "minibuf"))
                nil [23876 24834])
            ("window-atom-root" function
               (:documentation "Return root of atomic window WINDOW is a part of.
WINDOW must be a valid window and defaults to the selected one.
Return nil if WINDOW is not part of an atomic window."
                :arguments ("window"))
                nil [24856 25276])
            ("window-make-atom" function
               (:documentation "Make WINDOW an atomic window.
WINDOW must be an internal window.  Return WINDOW."
                :arguments ("window"))
                nil [25278 25666])
            ("display-buffer-in-atom-window" function
               (:documentation "Display BUFFER in an atomic window.
This function displays BUFFER in a new window that will be
combined with an existing window to form an atomic window.  If
the existing window is already part of an atomic window, add the
new window to that atomic window.  Operations like `split-window'
or `delete-window', when applied to a constituent of an atomic
window, are applied atomically to the root of that atomic window.

ALIST is an association list of symbols and values.  The
following symbols can be used.

`window' specifies the existing window the new window shall be
  combined with.  Use `window-atom-root' to make the new window a
  sibling of an atomic window's root.  If an internal window is
  specified here, all children of that window become part of the
  atomic window too.  If no window is specified, the new window
  becomes a sibling of the selected window.  By default, the
  `window-atom' parameter of the existing window is set to `main'
  provided it is live and was not set before.

`side' denotes the side of the existing window where the new
  window shall be located.  Valid values are `below', `right',
  `above' and `left'.  The default is `below'.  By default, the
  `window-atom' parameter of the new window is set to this value.

The return value is the new window, nil when creating that window
failed."
                :arguments ("buffer" "alist"))
                nil [25668 28134])
            ("window--atom-check-1" function
               (:documentation "Subroutine of `window--atom-check'."
                :arguments ("window"))
                nil [28136 29024])
            ("window--atom-check" function
               (:documentation "Check atomicity of all windows on FRAME.
FRAME defaults to the selected frame.  If an atomic window is
wrongly configured, reset the atomicity of all its windows on
FRAME to nil.  An atomic window is wrongly configured if it has
no child windows or one of its child windows is not atomic."
                :arguments ("frame"))
                nil [29026 29414])
            ("window-sides-vertical" variable (:documentation "If non-nil, left and right side windows occupy full frame height.
If nil, top and bottom side windows occupy full frame width.") nil [29433 29729])
            ("window-sides-reversed" variable (:documentation "Whether top/bottom side windows appear in reverse order.
When this is nil, side windows on the top and bottom of a frame
are always drawn from left to right with increasing slot values.
When this is t, side windows on the top and bottom of a frame are
always drawn from right to left with increasing slot values.

When this is `bidi', the drawing order is like that for the value
t if the value of `bidi-paragraph-direction' is `right-to-left'
in the buffer most recently shown in the window selected within
the main window area of this frame.

The layout of side windows on the left or right of a frame is not
affected by the value of this variable.") nil [29731 30632])
            ("window-sides-slots" variable
               (:documentation "Number of available side window slots on each side of a frame.
The value is a list of four elements specifying the maximum
number of side windows that may be created on the left, top,
right and bottom side of any frame.

If an element is a number, `display-buffer-in-side-window' will
refrain from making a new side window if the number of windows on
that side is equal to or exceeds that number.  Rather, it will
reuse the window whose `window-slot' value is nearest to the slot
specified via its ALIST argument.  If an element is nil, this
means there's no bound on the number of windows on that side."
                :default-value '(nil nil nil nil))
                nil [30634 32283])
            ("defvar-local" code nil nil [32285 32734])
            ("window--sides-inhibit-check" variable (:documentation "Non-nil means inhibit any checks on side windows.") nil [32736 32830])
            ("window--sides-reverse-on-frame-p" function
               (:documentation "Return non-nil when side windows should appear reversed on FRAME.
This uses some heuristics to guess the user's intentions when the
selected window of FRAME is a side window ."
                :arguments ("frame"))
                nil [32832 34401])
            ("window-main-window" function
               (:documentation "Return the main window of specified FRAME.
The optional argument FRAME must be a live frame and defaults to
the selected one.

If FRAME has no side windows, return FRAME's root window.
Otherwise, return either an internal non-side window such that
all other non-side windows on FRAME descend from it, or the
single live non-side window of FRAME."
                :arguments ("frame"))
                nil [34403 35391])
            ("window--make-major-side-window-next-to" function
               (:documentation "Return window to split for making a major side window.
SIDE must be one of the symbols `left', `top', `right' or
`bottom'.

This is an auxiliary function of `window--make-major-side-window'
and must not be called when a window on SIDE exists already."
                :arguments ("side"))
                nil [35393 37234])
            ("window--make-major-side-window" function
               (:documentation "Display BUFFER in a new major side window on the selected frame.
SIDE must be one of `left', `top', `right' or `bottom'.  SLOT
specifies the slot to use.  ALIST is an association list of
symbols and values as passed to `display-buffer-in-side-window'.
Return the new window, nil if its creation failed.

This is an auxiliary function of `display-buffer-in-side-window'
and may be called only if no window on SIDE exists yet."
                :arguments ("buffer" "side" "slot" "alist"))
                nil [37236 39444])
            ("display-buffer-in-side-window" function
               (:documentation "Display BUFFER in a side window of the selected frame.
ALIST is an association list of symbols and values.  The
following special symbols can be used in ALIST.

`side' denotes the side of the frame where the new window shall
  be located.  Valid values are `bottom', `right', `top' and
  `left'.  The default is `bottom'.

`slot' if non-nil, specifies the window slot where to display
  BUFFER.  A value of zero or nil means use the middle slot on
  the specified side.  A negative value means use a slot
  preceding (that is, above or on the left of) the middle slot.
  A positive value means use a slot following (that is, below or
  on the right of) the middle slot.  The default is zero.

If the current frame size or the settings of `window-sides-slots'
do not permit making a new window, a suitable existing window may
be reused and have its `window-slot' parameter value accordingly
modified.

Unless `display-buffer-mark-dedicated' is non-nil, dedicate the
side window used to BUFFER so that it does not get reused by
other `display-buffer' action functions.  Return the window used
for displaying BUFFER, nil if no suitable window can be found.

This function installs the `window-side' and `window-slot'
parameters and makes them persistent.  It neither modifies ALIST
nor installs any other window parameters unless they have been
explicitly provided via a `window-parameters' entry in ALIST."
                :arguments ("buffer" "alist"))
                nil [39446 45933])
            ("window-toggle-side-windows" function
               (:documentation "Toggle display of side windows on specified FRAME.
FRAME must be a live frame and defaults to the selected one.

If FRAME has at least one side window, delete all side
windows on FRAME after saving FRAME's state in the
FRAME's `window-state' frame parameter.  Otherwise,
restore any side windows recorded in FRAME's `window-state'
parameter, leaving FRAME's main window alone.  Signal an
error if FRAME has no side windows and no saved state for
it is found."
                :user-visible-flag t
                :arguments ("frame"))
                nil [45935 47445])
            ("window--sides-reverse-all" function (:documentation "Maybe reverse side windows on all frames.") nil [47447 47644])
            ("window--sides-reverse-frame" function
               (:documentation "Maybe reverse side windows on FRAME."
                :arguments ("frame"))
                nil [47646 48103])
            ("window--sides-reverse-side" function
               (:documentation "Maybe reverse windows on SIDE of FRAME."
                :arguments ("frame" "side"))
                nil [48105 49037])
            ("window--sides-reverse" function
               (:documentation "Helper function for customizing `window-sides-reversed'."
                :arguments ("symbol" "value"))
                nil [49039 49620])
            ("window--sides-verticalize-frame" function
               (:documentation "Maybe change side windows layout on specified FRAME."
                :arguments ("frame"))
                nil [49622 50952])
            ("window--sides-verticalize" function
               (:documentation "Helper function for customizing `window-sides-vertical'."
                :arguments ("symbol" "value"))
                nil [50954 51168])
            ("window--sides-check-failed" function
               (:documentation "Helper function for `window--sides-check'."
                :arguments ("frame"))
                nil [51170 52872])
            ("window--sides-check" function
               (:documentation "Check side windows configuration of FRAME.
In a valid side windows configuration there can be at most one
internal side window on each side and all its children must be
live and have the same `window-side' parameter and no other
window with the same `window-side' parameter exists on FRAME.  If
there is no such internal window, there may be at most one window
with this side's `window-side' parameter on FRAME.

If the configuration is invalid, reset the `window-side'
parameters of all windows on FRAME."
                :arguments ("frame"))
                nil [52874 53810])
            ("window--check" function
               (:documentation "Check atomic and side windows on FRAME.
FRAME defaults to the selected frame."
                :arguments ("frame"))
                nil [53812 53992])
            ("window--dump-window" function
               (:documentation "Dump WINDOW to buffer *window-frame-dump*.
WINDOW must be a valid window and defaults to the selected one.
Optional argument ERASE non-nil means erase *window-frame-dump*
before writing to it."
                :arguments ("window" "erase"))
                nil [54028 55872])
            ("window--dump-frame" function
               (:documentation "Dump WINDOW-OR-FRAME to buffer *window-frame-dump*.
WINDOW-OR-FRAME can be a frame or a window and defaults to the
selected frame.  When WINDOW-OR-FRAME is a window, dump that
window's frame.  The buffer *window-frame-dump* is erased before
dumping to it."
                :arguments ("window-or-frame"))
                nil [55874 57495])
            ("window-total-size" function
               (:documentation "Return the total height or width of WINDOW.
WINDOW must be a valid window and defaults to the selected one.

If HORIZONTAL is omitted or nil, return the total height of
WINDOW, in lines.  If WINDOW is live, its total height includes,
in addition to the height of WINDOW's text, the heights of
WINDOW's mode and header line and a bottom divider, if any.

If HORIZONTAL is non-nil, return the total width of WINDOW, in
columns.  If WINDOW is live, its total width includes, in
addition to the width of WINDOW's text, the widths of WINDOW's
fringes, margins, scroll bars and its right divider, if any.

If WINDOW is internal, return the respective size of the screen
areas spanned by its children.

Optional argument ROUND is handled as for `window-total-height'
and `window-total-width'."
                :arguments ("window" "horizontal" "round"))
                nil [57515 58463])
            ("window-size" function
               (:documentation "Return the height or width of WINDOW.
WINDOW must be a valid window and defaults to the selected one.

If HORIZONTAL is omitted or nil, return the total height of
WINDOW, in lines, like `window-total-height'.  Otherwise return
the total width, in columns, like `window-total-width'.

Optional argument PIXELWISE means return the pixel size of WINDOW
like `window-pixel-height' and `window-pixel-width'.

Optional argument ROUND is ignored if PIXELWISE is non-nil and
handled as for `window-total-height' and `window-total-width'
otherwise."
                :arguments ("window" "horizontal" "pixelwise" "round"))
                nil [58465 59269])
            ("window-size-fixed" variable (:documentation "Non-nil in a buffer means windows displaying the buffer are fixed-size.
If the value is `height', then only the window's height is fixed.
If the value is `width', then only the window's width is fixed.
Any other non-nil value fixes both the width and the height.

Emacs won't change the size of any window displaying that buffer,
unless it has no other choice (like when deleting a neighboring
window).") nil [59271 59708])
            ("make-variable-buffer-local" code nil nil [59709 59756])
            ("window--preservable-size" function
               (:documentation "Return height of WINDOW as `window-preserve-size' would preserve it.
Optional argument HORIZONTAL non-nil means to return the width of
WINDOW as `window-preserve-size' would preserve it."
                :arguments ("window" "horizontal"))
                nil [59758 60184])
            ("window-preserve-size" function
               (:documentation "Preserve height of window WINDOW.
WINDOW must be a live window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means preserve the width of
WINDOW.

PRESERVE t means to preserve the current height/width of WINDOW's
body in frame and window resizing operations whenever possible.
The height/width of WINDOW will change only if Emacs has no other
choice.  Resizing a window whose height/width is preserved never
throws an error.

PRESERVE nil means to stop preserving the height/width of WINDOW,
lifting the respective restraint induced by a previous call of
`window-preserve-size' for WINDOW.  Calling `enlarge-window',
`shrink-window', `split-window' or `fit-window-to-buffer' with
WINDOW as argument also removes the respective restraint.

Other values of PRESERVE are reserved for future use."
                :arguments ("window" "horizontal" "preserve"))
                nil [60186 61590])
            ("window-preserved-size" function
               (:documentation "Return preserved height of window WINDOW.
WINDOW must be a live window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means to return preserved
width of WINDOW."
                :arguments ("window" "horizontal"))
                nil [61592 62130])
            ("window--preserve-size" function
               (:documentation "Return non-nil when the height of WINDOW shall be preserved.
Optional argument HORIZONTAL non-nil means to return non-nil when
the width of WINDOW shall be preserved."
                :arguments ("window" "horizontal"))
                nil [62132 62492])
            ("window-safe-min-size" function
               (:documentation "Return safe minimum size of WINDOW.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return the minimum
number of columns of WINDOW; otherwise return the minimum number
of WINDOW's lines.

Optional argument PIXELWISE non-nil means return the minimum pixel-size
of WINDOW."
                :arguments ("window" "horizontal" "pixelwise"))
                nil [62494 63199])
            ("window-min-size" function
               (:documentation "Return the minimum size of WINDOW.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return the minimum
number of columns of WINDOW; otherwise return the minimum number
of WINDOW's lines.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument PIXELWISE non-nil means
return the minimum pixel-size of WINDOW."
                :arguments ("window" "horizontal" "ignore" "pixelwise"))
                nil [63201 63769])
            ("window--min-size-ignore-p" function
               (:documentation "Return non-nil if IGNORE says to ignore size restrictions for WINDOW."
                :arguments ("window" "ignore"))
                nil [63771 63991])
            ("window--min-size-1" function
               (:documentation "Internal function of `window-min-size'."
                :arguments ("window" "horizontal" "ignore" "pixelwise"))
                nil [63993 67784])
            ("window-sizable" function
               (:documentation "Return DELTA if DELTA lines can be added to WINDOW.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return DELTA if DELTA
columns can be added to WINDOW.  A return value of zero means
that no lines (or columns) can be added to WINDOW.

This function looks only at WINDOW and, recursively, its child
windows.  The function `window-resizable' looks at other windows
as well.

DELTA positive means WINDOW shall be enlarged by DELTA lines or
columns.  If WINDOW cannot be enlarged by DELTA lines or columns
return the maximum value in the range 0..DELTA by which WINDOW
can be enlarged.

DELTA negative means WINDOW shall be shrunk by -DELTA lines or
columns.  If WINDOW cannot be shrunk by -DELTA lines or columns,
return the minimum value in the range DELTA..0 by which WINDOW
can be shrunk.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument PIXELWISE non-nil means
interpret DELTA as pixels."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [67786 69156])
            ("window-sizable-p" function
               (:documentation "Return t if WINDOW can be resized by DELTA lines.
WINDOW must be a valid window and defaults to the selected one.
For the meaning of the arguments of this function see the
doc-string of `window-sizable'."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [69158 69663])
            ("window--size-fixed-1" function
               (:documentation "Internal function for `window-size-fixed-p'."
                :arguments ("window" "horizontal" "ignore"))
                nil [69665 70990])
            ("window-size-fixed-p" function
               (:documentation "Return non-nil if WINDOW's height is fixed.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return non-nil if
WINDOW's width is fixed.  The optional argument IGNORE has the
same meaning as for `window-resizable'.

If this function returns nil, this does not necessarily mean that
WINDOW can be resized in the desired direction.  The function
`window-resizable' can tell that."
                :arguments ("window" "horizontal" "ignore"))
                nil [70992 71640])
            ("window--min-delta-1" function
               (:documentation "Internal function for `window-min-delta'."
                :arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise"))
                nil [71642 72984])
            ("window-min-delta" function
               (:documentation "Return number of lines by which WINDOW can be shrunk.
WINDOW must be a valid window and defaults to the selected one.
Return zero if WINDOW cannot be shrunk.

Optional argument HORIZONTAL non-nil means return number of
columns by which WINDOW can be shrunk.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument TRAIL restricts the
windows that can be enlarged.  If its value is `before', only
windows to the left of or above WINDOW can be enlarged.  If it is
`after', only windows to the right of or below WINDOW can be
enlarged.

Optional argument NOUP non-nil means don't go up in the window
tree, but try to enlarge windows within WINDOW's combination
only.  Optional argument NODOWN non-nil means don't check whether
WINDOW itself (and its child windows) can be shrunk; check only
whether at least one other window can be enlarged appropriately.

Optional argument PIXELWISE non-nil means return number of pixels
by which WINDOW can be shrunk."
                :arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise"))
                nil [72986 74769])
            ("frame-windows-min-size" function
               (:documentation "Return minimum number of lines of FRAME's windows.
HORIZONTAL non-nil means return number of columns of FRAME's
windows.  The optional argument IGNORE has the same meaning as
for `window-resizable'.  PIXELWISE non-nil means return sizes in
pixels."
                :arguments ("frame" "horizontal" "ignore" "pixelwise"))
                nil [74771 75380])
            ("window--max-delta-1" function
               (:documentation "Internal function of `window-max-delta'."
                :arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise"))
                nil [75382 76682])
            ("window-max-delta" function
               (:documentation "Return maximum number of lines by which WINDOW can be enlarged.
WINDOW must be a valid window and defaults to the selected one.
The return value is zero if WINDOW cannot be enlarged.

Optional argument HORIZONTAL non-nil means return maximum number
of columns by which WINDOW can be enlarged.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument TRAIL restricts the
windows that can be enlarged.  If its value is `before', only
windows to the left of or above WINDOW can be enlarged.  If it is
`after', only windows to the right of or below WINDOW can be
enlarged.

Optional argument NOUP non-nil means don't go up in the window
tree but try to obtain the entire space from windows within
WINDOW's combination.  Optional argument NODOWN non-nil means do
not check whether WINDOW itself (and its child windows) can be
enlarged; check only whether other windows can be shrunk
appropriately.

Optional argument PIXELWISE non-nil means return number of
pixels by which WINDOW can be enlarged."
                :arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise"))
                nil [76684 78130])
            ("window--resizable" function
               (:documentation "Return DELTA if WINDOW can be resized vertically by DELTA lines.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return DELTA if WINDOW
can be resized horizontally by DELTA columns.  A return value of
zero means that WINDOW is not resizable.

DELTA positive means WINDOW shall be enlarged by DELTA lines or
columns.  If WINDOW cannot be enlarged by DELTA lines or columns,
return the maximum value in the range 0..DELTA by which WINDOW
can be enlarged.

DELTA negative means WINDOW shall be shrunk by -DELTA lines or
columns.  If WINDOW cannot be shrunk by -DELTA lines or columns,
return the minimum value in the range DELTA..0 that can be used
for shrinking WINDOW.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument TRAIL `before' means only
windows to the left of or below WINDOW can be shrunk.  Optional
argument TRAIL `after' means only windows to the right of or
above WINDOW can be shrunk.

Optional argument NOUP non-nil means don't go up in the window
tree but check only whether space can be obtained from (or given
to) WINDOW's siblings.  Optional argument NODOWN non-nil means
don't go down in the window tree.  This means do not check
whether resizing would violate size restrictions of WINDOW or its
child windows.

Optional argument PIXELWISE non-nil means interpret DELTA as
number of pixels."
                :arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise"))
                nil [78178 79987])
            ("window--resizable-p" function
               (:documentation "Return t if WINDOW can be resized vertically by DELTA lines.
WINDOW must be a valid window and defaults to the selected one.
For the meaning of the arguments of this function see the
doc-string of `window--resizable'.

Optional argument PIXELWISE non-nil means interpret DELTA as
pixels."
                :arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise"))
                nil [79989 80647])
            ("window-resizable" function
               (:documentation "Return DELTA if WINDOW can be resized vertically by DELTA lines.
WINDOW must be a valid window and defaults to the selected one.
Optional argument HORIZONTAL non-nil means return DELTA if WINDOW
can be resized horizontally by DELTA columns.  A return value of
zero means that WINDOW is not resizable.

DELTA positive means WINDOW shall be enlarged by DELTA lines or
columns.  If WINDOW cannot be enlarged by DELTA lines or columns
return the maximum value in the range 0..DELTA by which WINDOW
can be enlarged.

DELTA negative means WINDOW shall be shrunk by -DELTA lines or
columns.  If WINDOW cannot be shrunk by -DELTA lines or columns,
return the minimum value in the range DELTA..0 that can be used
for shrinking WINDOW.

Optional argument IGNORE, if non-nil, means to ignore restraints
induced by fixed size windows or the values of the variables
`window-min-height' and `window-min-width'.  The following values
have special meanings: `safe' means that in addition live windows
are allowed to get as small as `window-safe-min-height' lines and
`window-safe-min-width' columns.  `preserved' means to ignore
only restrictions induced by `window-preserve-size'.  If IGNORE
is a window, then ignore restrictions for that window only.

Optional argument PIXELWISE non-nil means interpret DELTA as
pixels."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [80649 82161])
            ("window-resizable-p" function
               (:documentation "Return t if WINDOW can be resized vertically by DELTA lines.
WINDOW must be a valid window and defaults to the selected one.
For the meaning of the arguments of this function see the
doc-string of `window-resizable'."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [82163 82719])
            ("defalias" code nil nil [82766 82812])
            ("defalias" code nil nil [82813 82856])
            ("window-full-height-p" function
               (:documentation "Return t if WINDOW is as high as its containing frame.
More precisely, return t if and only if the total height of
WINDOW equals the total height of the root window of WINDOW's
frame.  WINDOW must be a valid window and defaults to the
selected one."
                :arguments ("window"))
                nil [82858 83396])
            ("window-full-width-p" function
               (:documentation "Return t if WINDOW is as wide as its containing frame.
More precisely, return t if and only if the total width of WINDOW
equals the total width of the root window of WINDOW's frame.
WINDOW must be a valid window and defaults to the selected one."
                :arguments ("window"))
                nil [83398 83830])
            ("window-body-size" function
               (:documentation "Return the height or width of WINDOW's text area.
WINDOW must be a live window and defaults to the selected one.

If HORIZONTAL is omitted or nil, return the height of the text
area, like `window-body-height'.  Otherwise, return the width of
the text area, like `window-body-width'.  In either case, the
optional argument PIXELWISE is passed to the functions."
                :arguments ("window" "horizontal" "pixelwise"))
                nil [83832 84363])
            ("declare-function" code nil nil [84365 84425])
            ("window-font-width" function
               (:documentation "Return average character width for the font of FACE used in WINDOW.
WINDOW must be a live window and defaults to the selected one.

If FACE is nil or omitted, the default face is used.  If FACE is
remapped (see `face-remapping-alist'), the function returns the
information for the remapped face."
                :arguments ("window" "face"))
                nil [84427 85057])
            ("window-font-height" function
               (:documentation "Return character height for the font of FACE used in WINDOW.
WINDOW must be a live window and defaults to the selected one.

If FACE is nil or omitted, the default face is used.  If FACE is
remapped (see `face-remapping-alist'), the function returns the
information for the remapped face."
                :arguments ("window" "face"))
                nil [85059 85622])
            ("overflow-newline-into-fringe" variable nil nil [85624 85661])
            ("window-max-chars-per-line" function
               (:documentation "Return the number of characters that can be displayed on one line in WINDOW.
WINDOW must be a live window and defaults to the selected one.

The character width of FACE is used for the calculation.  If FACE
is nil or omitted, the default face is used.  If FACE is
remapped (see `face-remapping-alist'), the function uses the
remapped face.

This function is different from `window-body-width' in two
ways.  First, it accounts for the portions of the line reserved
for the continuation glyph.  Second, it accounts for the size of
the font."
                :arguments ("window" "face"))
                nil [85663 87177])
            ("window-current-scroll-bars" function
               (:documentation "Return the current scroll bar types for WINDOW.
WINDOW must be a live window and defaults to the selected one.

The return value is a cons cell (VERTICAL . HORIZONTAL) where
VERTICAL specifies the current location of the vertical scroll
bar (`left', `right' or nil), and HORIZONTAL specifies the
current location of the horizontal scroll bar (`bottom' or nil).

Unlike `window-scroll-bars', this function reports the scroll bar
type actually used, once frame defaults and `scroll-bar-mode' are
taken into account."
                :arguments ("window"))
                nil [87179 88150])
            ("walk-windows" function
               (:documentation "Cycle through all live windows, calling FUN for each one.
FUN must specify a function with a window as its sole argument.
The optional arguments MINIBUF and ALL-FRAMES specify the set of
windows to include in the walk.

MINIBUF t means include the minibuffer window even if the
minibuffer is not active.  MINIBUF nil or omitted means include
the minibuffer window only if the minibuffer is active.  Any
other value means do not include the minibuffer window even if
the minibuffer is active.

ALL-FRAMES nil or omitted means consider all windows on the
selected frame, plus the minibuffer window if specified by the
MINIBUF argument.  If the minibuffer counts, consider all windows
on all frames that share that minibuffer too.  The following
non-nil values of ALL-FRAMES have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Anything else means consider all windows on the selected frame
and no others.

This function changes neither the order of recently selected
windows nor the buffer list."
                :arguments ("fun" "minibuf" "all-frames"))
                nil [88152 90034])
            ("window-at-side-p" function
               (:documentation "Return t if WINDOW is at SIDE of its containing frame.
WINDOW must be a valid window and defaults to the selected one.
SIDE can be any of the symbols `left', `top', `right' or
`bottom'.  The default value nil is handled like `bottom'."
                :arguments ("window" "side"))
                nil [90036 90613])
            ("window-at-side-list" function
               (:documentation "Return list of all windows on SIDE of FRAME.
FRAME must be a live frame and defaults to the selected frame.
SIDE can be any of the symbols `left', `top', `right' or
`bottom'.  The default value nil is handled like `bottom'."
                :arguments ("frame" "side"))
                nil [90615 91133])
            ("window--in-direction-2" function
               (:documentation "Support function for `window-in-direction'."
                :arguments ("window" "posn" "horizontal"))
                nil [91135 91525])
            ("window-in-direction" function
               (:documentation "Return window in DIRECTION as seen from WINDOW.
More precisely, return the nearest window in direction DIRECTION
as seen from the position of `window-point' in window WINDOW.
DIRECTION must be one of `above', `below', `left' or `right'.
WINDOW must be a live window and defaults to the selected one.

Do not return a window whose `no-other-window' parameter is
non-nil.  If the nearest window's `no-other-window' parameter is
non-nil, try to find another window in the indicated direction.
If, however, the optional argument IGNORE is non-nil, return that
window even if its `no-other-window' parameter is non-nil.

Optional argument SIGN a negative number means to use the right
or bottom edge of WINDOW as reference position instead of
`window-point'.  SIGN a positive number means to use the left or
top edge of WINDOW as reference position.

Optional argument WRAP non-nil means to wrap DIRECTION around
frame borders.  This means to return for WINDOW at the top of the
frame and DIRECTION `above' the minibuffer window if the frame
has one, and a window at the bottom of the frame otherwise.

Optional argument MINI nil means to return the minibuffer window
if and only if it is currently active.  MINI non-nil means to
return the minibuffer window even when it's not active.  However,
if WRAP is non-nil, always act as if MINI were nil.

Return nil if no suitable window can be found."
                :arguments ("direction" "window" "ignore" "sign" "wrap" "mini"))
                nil [91820 97318])
            ("get-window-with-predicate" function
               (:documentation "Return a live window satisfying PREDICATE.
More precisely, cycle through all windows calling the function
PREDICATE on each one of them with the window as its sole
argument.  Return the first window for which PREDICATE returns
non-nil.  Windows are scanned starting with the window following
the selected window.  If no window satisfies PREDICATE, return
DEFAULT.

MINIBUF t means include the minibuffer window even if the
minibuffer is not active.  MINIBUF nil or omitted means include
the minibuffer window only if the minibuffer is active.  Any
other value means do not include the minibuffer window even if
the minibuffer is active.

ALL-FRAMES nil or omitted means consider all windows on the selected
frame, plus the minibuffer window if specified by the MINIBUF
argument.  If the minibuffer counts, consider all windows on all
frames that share that minibuffer too.  The following non-nil
values of ALL-FRAMES have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Anything else means consider all windows on the selected frame
and no others."
                :arguments ("predicate" "minibuf" "all-frames" "default"))
                nil [97320 98941])
            ("defalias" code nil nil [98943 98993])
            ("get-lru-window" function
               (:documentation "Return the least recently used window on frames specified by ALL-FRAMES.
Return a full-width window if possible.  A minibuffer window is
never a candidate.  A dedicated window is never a candidate
unless DEDICATED is non-nil, so if all windows are dedicated, the
value is nil.  Avoid returning the selected window if possible.
Optional argument NOT-SELECTED non-nil means never return the
selected window.

The following non-nil values of the optional argument ALL-FRAMES
have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Any other value of ALL-FRAMES means consider all windows on the
selected frame and no others."
                :arguments ("all-frames" "dedicated" "not-selected"))
                nil [98995 100646])
            ("get-mru-window" function
               (:documentation "Return the most recently used window on frames specified by ALL-FRAMES.
A minibuffer window is never a candidate.  A dedicated window is
never a candidate unless DEDICATED is non-nil, so if all windows
are dedicated, the value is nil.  Optional argument NOT-SELECTED
non-nil means never return the selected window.

The following non-nil values of the optional argument ALL-FRAMES
have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Any other value of ALL-FRAMES means consider all windows on the
selected frame and no others."
                :arguments ("all-frames" "dedicated" "not-selected"))
                nil [100648 101918])
            ("get-largest-window" function
               (:documentation "Return the largest window on frames specified by ALL-FRAMES.
A minibuffer window is never a candidate.  A dedicated window is
never a candidate unless DEDICATED is non-nil, so if all windows
are dedicated, the value is nil.  Optional argument NOT-SELECTED
non-nil means never return the selected window.

The following non-nil values of the optional argument ALL-FRAMES
have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Any other value of ALL-FRAMES means consider all windows on the
selected frame and no others."
                :arguments ("all-frames" "dedicated" "not-selected"))
                nil [101920 103213])
            ("get-buffer-window-list" function
               (:documentation "Return list of all windows displaying BUFFER-OR-NAME, or nil if none.
BUFFER-OR-NAME may be a buffer or the name of an existing buffer
and defaults to the current buffer.  If the selected window displays
BUFFER-OR-NAME, it will be the first in the resulting list.

MINIBUF t means include the minibuffer window even if the
minibuffer is not active.  MINIBUF nil or omitted means include
the minibuffer window only if the minibuffer is active.  Any
other value means do not include the minibuffer window even if
the minibuffer is active.

ALL-FRAMES nil or omitted means consider all windows on the
selected frame, plus the minibuffer window if specified by the
MINIBUF argument.  If the minibuffer counts, consider all windows
on all frames that share that minibuffer too.  The following
non-nil values of ALL-FRAMES have special meanings:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Anything else means consider all windows on the selected frame
and no others."
                :arguments ("buffer-or-name" "minibuf" "all-frames"))
                nil [103215 104783])
            ("minibuffer-window-active-p" function
               (:documentation "Return t if WINDOW is the currently active minibuffer window."
                :arguments ("window"))
                nil [104785 104964])
            ("count-windows" function
               (:documentation "Return the number of live windows on the selected frame.
The optional argument MINIBUF specifies whether the minibuffer
window shall be counted.  See `walk-windows' for the precise
meaning of this argument."
                :arguments ("minibuf"))
                nil [104966 105259])
            ("window--size-to-pixel" function
               (:documentation "For WINDOW convert SIZE lines to pixels.
SIZE is supposed to specify a height of WINDOW in terms of text
lines.  The return value is the number of pixels specifying that
height.

WINDOW must be a valid window.  Optional argument HORIZONTAL
non-nil means convert SIZE columns to pixels.

Optional argument PIXELWISE non-nil means SIZE already specifies
pixels but may have to be adjusted to a multiple of the character
size of WINDOW's frame.  Optional argument ROUND-MAYBE non-nil
means round to the nearest multiple of the character size of
WINDOW's frame if the option `window-resize-pixelwise' is nil."
                :arguments ("window" "size" "horizontal" "pixelwise" "round-maybe"))
                nil [105284 106234])
            ("window--pixel-to-total-1" function
               (:documentation "Subroutine of `window--pixel-to-total'."
                :arguments ("window" "horizontal" "char-size"))
                nil [106236 107860])
            ("window--pixel-to-total" function
               (:documentation "On FRAME assign new total window heights from pixel heights.
FRAME must be a live frame and defaults to the selected frame.

Optional argument HORIZONTAL non-nil means assign new total
window widths from pixel widths."
                :arguments ("frame" "horizontal"))
                nil [107862 109777])
            ("window--resize-reset" function
               (:documentation "Reset resize values for all windows on FRAME.
FRAME defaults to the selected frame.

This function stores the current value of `window-size' applied
with argument HORIZONTAL in the new total size of all windows on
FRAME.  It also resets the new normal size of each of these
windows."
                :arguments ("frame" "horizontal"))
                nil [109779 110215])
            ("window--resize-reset-1" function
               (:documentation "Internal function of `window--resize-reset'."
                :arguments ("window" "horizontal"))
                nil [110217 110739])
            ("window--resize-mini-window" function
               (:documentation "Resize minibuffer window WINDOW by DELTA pixels.
If WINDOW cannot be resized by DELTA pixels make it as large (or
as small) as possible, but don't signal an error."
                :arguments ("window" "delta"))
                nil [110741 111965])
            ("window--resize-apply-p" function
               (:documentation "Return t when a window on FRAME shall be resized vertically.
Optional argument HORIZONTAL non-nil means return t when a window
shall be resized horizontally."
                :arguments ("frame" "horizontal"))
                nil [111967 112373])
            ("window-resize" function
               (:documentation "Resize WINDOW vertically by DELTA lines.
WINDOW can be an arbitrary window and defaults to the selected
one.  An attempt to resize the root window of a frame will raise
an error though.

DELTA a positive number means WINDOW shall be enlarged by DELTA
lines.  DELTA negative means WINDOW shall be shrunk by -DELTA
lines.

Optional argument HORIZONTAL non-nil means resize WINDOW
horizontally by DELTA columns.  In this case a positive DELTA
means enlarge WINDOW by DELTA columns.  DELTA negative means
WINDOW shall be shrunk by -DELTA columns.

Optional argument IGNORE, if non-nil, means to ignore restraints
induced by fixed size windows or the values of the variables
`window-min-height' and `window-min-width'.  The following values
have special meanings: `safe' means that in addition live windows
are allowed to get as small as `window-safe-min-height' lines and
`window-safe-min-width' columns.  `preserved' means to ignore
only restrictions induced by `window-preserve-size'.  If IGNORE
is a window, then ignore restrictions for that window only.

Optional argument PIXELWISE non-nil means resize WINDOW by DELTA
pixels.

This function resizes other windows proportionally and never
deletes any windows.  If you want to move only the low (right)
edge of WINDOW consider using `adjust-window-trailing-edge'
instead."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [112375 116283])
            ("window-resize-no-error" function
               (:documentation "Resize WINDOW vertically if it is resizable by DELTA lines.
This function is like `window-resize' but does not signal an
error when WINDOW cannot be resized.  For the meaning of the
optional arguments see the documentation of `window-resize'."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [116285 116762])
            ("window--resize-child-windows-skip-p" function
               (:documentation "Return non-nil if WINDOW shall be skipped by resizing routines."
                :arguments ("window"))
                nil [116764 116941])
            ("window--resize-child-windows-normal" function
               (:documentation "Recursively set new normal height of child windows of window PARENT.
HORIZONTAL non-nil means set the new normal width of these
windows.  WINDOW specifies a child window of PARENT that has been
resized by THIS-DELTA lines (columns).

Optional argument TRAIL either `before' or `after' means set values
only for windows before or after WINDOW.  Optional argument
OTHER-DELTA, a number, specifies that this many lines (columns)
have been obtained from (or returned to) an ancestor window of
PARENT in order to resize WINDOW."
                :arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta"))
                nil [116943 120461])
            ("window--resize-child-windows" function
               (:documentation "Resize child windows of window PARENT vertically by DELTA pixels.
PARENT must be a vertically combined internal window.

Optional argument HORIZONTAL non-nil means resize child windows
of PARENT horizontally by DELTA pixels.  In this case PARENT must
be a horizontally combined internal window.

WINDOW, if specified, must denote a child window of PARENT that
is resized by DELTA pixels.

The optional argument IGNORE has the same meaning as for
`window-resizable'.

Optional arguments TRAIL and EDGE, when non-nil, restrict the set
of windows that shall be resized.  If TRAIL equals `before',
resize only windows on the left or above EDGE.  If TRAIL equals
`after', resize only windows on the right or below EDGE.  Also,
preferably only resize windows adjacent to EDGE.

If the optional argument CHAR-SIZE is a positive integer, it specifies
the number of pixels by which windows are incrementally resized.
If CHAR-SIZE is nil, this means to use the value of
`frame-char-height' or `frame-char-width' of WINDOW's frame.

Return the symbol `normalized' if new normal sizes have been
already set by this routine."
                :arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size"))
                nil [120463 127104])
            ("window--resize-siblings" function
               (:documentation "Resize other windows when WINDOW is resized vertically by DELTA pixels.
Optional argument HORIZONTAL non-nil means resize other windows
when WINDOW is resized horizontally by DELTA pixels.  WINDOW
itself is not resized by this function.

The optional argument IGNORE has the same meaning as for
`window-resizable'.

Optional arguments TRAIL and EDGE, when non-nil, refine the set
of windows that shall be resized.  If TRAIL equals `before',
resize only windows on the left or above EDGE.  If TRAIL equals
`after', resize only windows on the right or below EDGE.  Also,
preferably only resize windows adjacent to EDGE."
                :arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size"))
                nil [127106 130902])
            ("window--resize-this-window" function
               (:documentation "Resize WINDOW vertically by DELTA pixels.
Optional argument HORIZONTAL non-nil means resize WINDOW
horizontally by DELTA pixels.

The optional argument IGNORE has the same meaning as for
`window-resizable'.  Optional argument ADD non-nil means add
DELTA to the new total size of WINDOW.

Optional arguments TRAIL and EDGE, when non-nil, refine the set
of windows that shall be resized.  If TRAIL equals `before',
resize only windows on the left or above EDGE.  If TRAIL equals
`after', resize only windows on the right or below EDGE.  Also,
preferably only resize windows adjacent to EDGE.

If the optional argument CHAR-SIZE is a positive integer, it specifies
the number of pixels by which windows are incrementally resized.
If CHAR-SIZE is nil, this means to use the value of
`frame-char-height' or `frame-char-width' of WINDOW's frame.

This function recursively resizes WINDOW's child windows to fit the
new size.  Make sure that WINDOW is `window--resizable' before
calling this function.  Note that this function does not resize
siblings of WINDOW or WINDOW's parent window.  You have to
eventually call `window-resize-apply' in order to make resizing
actually take effect."
                :arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size"))
                nil [130904 132807])
            ("window--resize-root-window" function
               (:documentation "Resize root window WINDOW vertically by DELTA lines.
HORIZONTAL non-nil means resize root window WINDOW horizontally
by DELTA columns.

IGNORE non-nil means ignore any restrictions imposed by fixed
size windows, `window-min-height' or `window-min-width' settings.

This function is only called by the frame resizing routines.  It
resizes windows proportionally and never deletes any windows."
                :arguments ("window" "delta" "horizontal" "ignore" "pixelwise"))
                nil [132809 133642])
            ("window--resize-root-window-vertically" function
               (:documentation "Resize root window WINDOW vertically by DELTA lines.
If DELTA is less than zero and we can't shrink WINDOW by DELTA
lines, shrink it as much as possible.  If DELTA is greater than
zero, this function can resize fixed-size windows in order to
recover the necessary lines.  Return the number of lines that
were recovered.

Third argument PIXELWISE non-nil means to interpret DELTA as
pixels and return the number of pixels that were recovered.

This function is called by the minibuffer window resizing
routines."
                :arguments ("window" "delta" "pixelwise"))
                nil [133644 135565])
            ("window--sanitize-window-sizes" function
               (:documentation "Assert that all windows on selected frame are large enough.
If necessary and possible, make sure that every window on frame
FRAME has its minimum height.  Optional argument HORIZONTAL
non-nil means to make sure that every window on frame FRAME has
its minimum width.  The minimum height/width of a window is the
respective value returned by `window-min-size' for that window.

Return t if all windows were resized appropriately.  Return nil
if at least one window could not be resized as requested, which
may happen when the FRAME is not large enough to accommodate it."
                :arguments ("horizontal"))
                nil [135567 136532])
            ("adjust-window-trailing-edge" function
               (:documentation "Move WINDOW's bottom edge by DELTA lines.
Optional argument HORIZONTAL non-nil means move WINDOW's right
edge by DELTA columns.  WINDOW must be a valid window and
defaults to the selected one.

Optional argument PIXELWISE non-nil means interpret DELTA as
number of pixels.

If DELTA is greater than zero, move the edge downwards or to the
right.  If DELTA is less than zero, move the edge upwards or to
the left.  If the edge can't be moved by DELTA lines or columns,
move it as far as possible in the desired direction."
                :arguments ("window" "delta" "horizontal" "pixelwise"))
                nil [136534 143791])
            ("enlarge-window" function
               (:documentation "Make the selected window DELTA lines taller.
Interactively, if no argument is given, make the selected window
one line taller.  If optional argument HORIZONTAL is non-nil,
make selected window wider by DELTA columns.  If DELTA is
negative, shrink selected window by -DELTA lines or columns."
                :user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [143793 145627])
            ("shrink-window" function
               (:documentation "Make the selected window DELTA lines smaller.
Interactively, if no argument is given, make the selected window
one line smaller.  If optional argument HORIZONTAL is non-nil,
make selected window narrower by DELTA columns.  If DELTA is
negative, enlarge selected window by -DELTA lines or columns."
                :user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [145629 147480])
            ("maximize-window" function
               (:documentation "Maximize WINDOW.
Make WINDOW as large as possible without deleting any windows.
WINDOW must be a valid window and defaults to the selected one.

If the option `window-resize-pixelwise' is non-nil maximize
WINDOW pixelwise."
                :user-visible-flag t
                :arguments ("window"))
                nil [147482 148078])
            ("minimize-window" function
               (:documentation "Minimize WINDOW.
Make WINDOW as small as possible without deleting any windows.
WINDOW must be a valid window and defaults to the selected one.

If the option `window-resize-pixelwise' is non-nil minimize
WINDOW pixelwise."
                :user-visible-flag t
                :arguments ("window"))
                nil [148080 148690])
            ("window-edges" function
               (:documentation "Return a list of the edge distances of WINDOW.
WINDOW must be a valid window and defaults to the selected one.
The list returned has the form (LEFT TOP RIGHT BOTTOM).

If the optional argument BODY is nil, this means to return the
edges corresponding to the total size of WINDOW.  BODY non-nil
means to return the edges of WINDOW's body (aka text area).  If
BODY is non-nil, WINDOW must specify a live window.

Optional argument ABSOLUTE nil means to return edges relative to
the position of WINDOW's native frame.  ABSOLUTE non-nil means to
return coordinates relative to the origin - the position (0, 0) -
of FRAME's display.  On non-graphical systems this argument has
no effect.

Optional argument PIXELWISE nil means to return the coordinates
in terms of the canonical character width and height of WINDOW's
frame, rounded if necessary.  PIXELWISE non-nil means to return
the coordinates in pixels where the values for RIGHT and BOTTOM
are one more than the actual value of these edges.  Note that if
ABSOLUTE is non-nil, PIXELWISE is implicitly non-nil too."
                :arguments ("window" "body" "absolute" "pixelwise"))
                nil [148710 151762])
            ("window-body-edges" function
               (:documentation "Return a list of the edge coordinates of WINDOW's body.
The return value is that of `window-edges' called with argument
BODY non-nil."
                :arguments ("window"))
                nil [151764 151972])
            ("defalias" code nil nil [151973 152023])
            ("window-pixel-edges" function
               (:documentation "Return a list of the edge pixel coordinates of WINDOW.
The return value is that of `window-edges' called with argument
PIXELWISE non-nil."
                :arguments ("window"))
                nil [152025 152246])
            ("window-body-pixel-edges" function
               (:documentation "Return a list of the edge pixel coordinates of WINDOW's body.
The return value is that of `window-edges' called with arguments
BODY and PIXELWISE non-nil."
                :arguments ("window"))
                nil [152248 152489])
            ("defalias" code nil nil [152490 152552])
            ("window-absolute-pixel-edges" function
               (:documentation "Return a list of the edge pixel coordinates of WINDOW.
The return value is that of `window-edges' called with argument
ABSOLUTE non-nil."
                :arguments ("window"))
                nil [152554 152781])
            ("window-absolute-body-pixel-edges" function
               (:documentation "Return a list of the edge pixel coordinates of WINDOW's text area.
The return value is that of `window-edges' called with arguments
BODY and ABSOLUTE non-nil."
                :arguments ("window"))
                nil [152783 153035])
            ("defalias" code nil nil [153036 153116])
            ("window-absolute-pixel-position" function
               (:documentation "Return display coordinates of POSITION in WINDOW.
If the buffer position POSITION is visible in window WINDOW,
return the display coordinates of the upper/left corner of the
glyph at POSITION.  The return value is a cons of the X- and
Y-coordinates of that corner, relative to an origin at (0, 0) of
WINDOW's display.  Return nil if POSITION is not visible in
WINDOW.

WINDOW must be a live window and defaults to the selected window.
POSITION defaults to the value of `window-point' of WINDOW."
                :arguments ("position" "window"))
                nil [153118 154018])
            ("frame-root-window-p" function
               (:documentation "Return non-nil if WINDOW is the root window of its frame."
                :arguments ("window"))
                nil [154021 154160])
            ("window--subtree" function
               (:documentation "Return window subtree rooted at WINDOW.
Optional argument NEXT non-nil means include WINDOW's right
siblings in the return value.

See the documentation of `window-tree' for a description of the
return value."
                :arguments ("window" "next"))
                nil [154162 154885])
            ("window-tree" function
               (:documentation "Return the window tree of frame FRAME.
FRAME must be a live frame and defaults to the selected frame.
The return value is a list of the form (ROOT MINI), where ROOT
represents the window tree of the frame's root window, and MINI
is the frame's minibuffer window.

If the root window is not split, ROOT is the root window itself.
Otherwise, ROOT is a list (DIR EDGES W1 W2 ...) where DIR is nil
for a horizontal split, and t for a vertical split.  EDGES gives
the combined size and position of the child windows in the split,
and the rest of the elements are the child windows in the split.
Each of the child windows may again be a window or a list
representing a window split, and so on.  EDGES is a list (LEFT
TOP RIGHT BOTTOM) as returned by `window-edges'."
                :arguments ("frame"))
                nil [154887 155782])
            ("other-window" function
               (:documentation "Select another window in cyclic ordering of windows.
COUNT specifies the number of windows to skip, starting with the
selected window, before making the selection.  If COUNT is
positive, skip COUNT windows forwards.  If COUNT is negative,
skip -COUNT windows backwards.  COUNT zero means do not skip any
window, so select the selected window.  In an interactive call,
COUNT is the numeric prefix argument.  Return nil.

If the `other-window' parameter of the selected window is a
function and `ignore-window-parameters' is nil, call that
function with the arguments COUNT and ALL-FRAMES.

This function does not select a window whose `no-other-window'
window parameter is non-nil.

This function uses `next-window' for finding the window to
select.  The argument ALL-FRAMES has the same meaning as in
`next-window', but the MINIBUF argument of `next-window' is
always effectively nil."
                :user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [155785 158416])
            ("one-window-p" function
               (:documentation "Return non-nil if the selected window is the only window.
Optional arg NOMINI non-nil means don't count the minibuffer
even if it is active.  Otherwise, the minibuffer is counted
when it is active.

Optional argument ALL-FRAMES specifies the set of frames to
consider, see also `next-window'.  ALL-FRAMES nil or omitted
means consider windows on the selected frame only, plus the
minibuffer window if specified by the NOMINI argument.  If the
minibuffer counts, consider all windows on all frames that share
that minibuffer too.  The remaining non-nil values of ALL-FRAMES
with a special meaning are:

- t means consider all windows on all existing frames.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Anything else means consider all windows on the selected frame
and no others."
                :arguments ("nomini" "all-frames"))
                nil [158552 159825])
            ("window-deletable-p" function
               (:documentation "Return t if WINDOW can be safely deleted from its frame.
WINDOW must be a valid window and defaults to the selected one.

Return `frame' if WINDOW is the root window of its frame and that
frame can be safely deleted."
                :arguments ("window"))
                nil [159850 161426])
            ("window--in-subtree-p" function
               (:documentation "Return t if WINDOW is either ROOT or a member of ROOT's subtree."
                :arguments ("window" "root"))
                nil [161428 161731])
            ("delete-window" function
               (:documentation "Delete WINDOW.
WINDOW must be a valid window and defaults to the selected one.
Return nil.

If the variable `ignore-window-parameters' is non-nil or the
`delete-window' parameter of WINDOW equals t, do not process any
parameters of WINDOW.  Otherwise, if the `delete-window'
parameter of WINDOW specifies a function, call that function with
WINDOW as its sole argument and return the value returned by that
function.

Otherwise, if WINDOW is part of an atomic window, call
`delete-window' with the root of the atomic window as its
argument.  Signal an error if WINDOW is either the only window on
its frame, the last non-side window, or part of an atomic window
that is its frame's root window."
                :user-visible-flag t
                :arguments ("window"))
                nil [161733 165277])
            ("delete-other-windows" function
               (:documentation "Make WINDOW fill its frame.
WINDOW must be a valid window and defaults to the selected one.
Return nil.

If the variable `ignore-window-parameters' is non-nil or the
`delete-other-windows' parameter of WINDOW equals t, do not pay
attention to any other parameters of WINDOW.  Otherwise, if the
`delete-other-windows' parameter of WINDOW specifies a function,
call that function with WINDOW as its sole argument and return
the value returned by that function.

Else, if WINDOW is part of an atomic window, call this function
with the root of the atomic window as its argument.  Signal an
error if that root window is the root window of WINDOW's frame.
Also signal an error if WINDOW is a side window.  Do not delete
any window whose `no-delete-other-windows' parameter is non-nil."
                :user-visible-flag t
                :arguments ("window"))
                nil [165279 169054])
            ("delete-other-windows-vertically" function
               (:documentation "Delete the windows in the same column with WINDOW, but not WINDOW itself.
This may be a useful alternative binding for \\[delete-other-windows]
 if you often split windows horizontally."
                :user-visible-flag t
                :arguments ("window"))
                nil [169056 169682])
            ("record-window-buffer" function
               (:documentation "Record WINDOW's buffer.
WINDOW must be a live window and defaults to the selected one."
                :arguments ("window"))
                nil [171418 172837])
            ("unrecord-window-buffer" function
               (:documentation "Unrecord BUFFER in WINDOW.
WINDOW must be a live window and defaults to the selected one.
BUFFER must be a live buffer and defaults to the buffer of
WINDOW."
                :arguments ("window" "buffer"))
                nil [172839 173338])
            ("set-window-buffer-start-and-point" function
               (:documentation "Set WINDOW's buffer to BUFFER.
WINDOW must be a live window and defaults to the selected one.
Optional argument START non-nil means set WINDOW's start position
to START.  Optional argument POINT non-nil means set WINDOW's
point to POINT.  If WINDOW is selected this also sets BUFFER's
`point' to POINT.  If WINDOW is selected and the buffer it showed
before was current this also makes BUFFER the current buffer."
                :arguments ("window" "buffer" "start" "point"))
                nil [173340 174267])
            ("switch-to-visible-buffer" variable
               (:documentation "If non-nil, allow switching to an already visible buffer.
If this variable is non-nil, `switch-to-prev-buffer' and
`switch-to-next-buffer' may switch to an already visible buffer.
If this variable is nil, `switch-to-prev-buffer' and
`switch-to-next-buffer' always try to avoid switching to a buffer
that is already visible in another window on the same frame."
                :default-value t)
                nil [174269 174724])
            ("switch-to-prev-buffer" function
               (:documentation "In WINDOW switch to previous buffer.
WINDOW must be a live window and defaults to the selected one.
Return the buffer switched to, nil if no suitable buffer could be
found.

Optional argument BURY-OR-KILL non-nil means the buffer currently
shown in WINDOW is about to be buried or killed and consequently
shall not be switched to in future invocations of this command.

As a special case, if BURY-OR-KILL equals `append', this means to
move the buffer to the end of WINDOW's previous buffers list so a
future invocation of `switch-to-prev-buffer' less likely switches
to it."
                :user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [174726 180574])
            ("switch-to-next-buffer" function
               (:documentation "In WINDOW switch to next buffer.
WINDOW must be a live window and defaults to the selected one.
Return the buffer switched to, nil if no suitable buffer could be
found."
                :user-visible-flag t
                :arguments ("window"))
                nil [180576 184401])
            ("get-next-valid-buffer" function
               (:documentation "Search LIST for a valid buffer to display in FRAME.
Return nil when all buffers in LIST are undesirable for display,
otherwise return the first suitable buffer in LIST.

Buffers not visible in windows are preferred to visible buffers,
unless VISIBLE-OK is non-nil.
If the optional argument FRAME is nil, it defaults to the selected frame.
If BUFFER is non-nil, ignore occurrences of that buffer in LIST."
                :arguments ("list" "buffer" "visible-ok" "frame"))
                nil [184403 185399])
            ("last-buffer" function
               (:documentation "Return the last buffer in FRAME's buffer list.
If BUFFER is the last buffer, return the preceding buffer
instead.  Buffers not visible in windows are preferred to visible
buffers, unless optional argument VISIBLE-OK is non-nil.
Optional third argument FRAME nil or omitted means use the
selected frame's buffer list.  If no such buffer exists, return
the buffer `*scratch*', creating it if necessary."
                :arguments ("buffer" "visible-ok" "frame"))
                nil [185401 186128])
            ("frame-auto-hide-function" variable
               (:documentation "Function called to automatically hide frames.
The function is called with one argument - a frame.

Functions affected by this option are those that bury a buffer
shown in a separate frame like `quit-window' and `bury-buffer'."
                :default-value nil)
                nil [186130 186716])
            ("window--delete" function
               (:documentation "Delete WINDOW if possible.
WINDOW must be a live window and defaults to the selected one.
Optional argument DEDICATED-ONLY non-nil means to delete WINDOW
only if it's dedicated to its buffer.  Optional argument KILL
means the buffer shown in window will be killed.  Return non-nil
if WINDOW gets deleted or its frame is auto-hidden."
                :arguments ("window" "dedicated-only" "kill"))
                nil [186718 187700])
            ("bury-buffer" function
               (:documentation "Put BUFFER-OR-NAME at the end of the list of all buffers.
There it is the least likely candidate for `other-buffer' to
return; thus, the least likely buffer for \\[switch-to-buffer] to
select by default.

You can specify a buffer name as BUFFER-OR-NAME, or an actual
buffer object.  If BUFFER-OR-NAME is nil or omitted, bury the
current buffer.  Also, if BUFFER-OR-NAME is nil or omitted,
remove the current buffer from the selected window if it is
displayed there."
                :user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [187702 188835])
            ("unbury-buffer" function
               (:documentation "Switch to the last buffer in the buffer list."
                :user-visible-flag t)
                nil [188837 188962])
            ("next-buffer" function
               (:documentation "In selected window switch to next buffer."
                :user-visible-flag t)
                nil [188964 189266])
            ("previous-buffer" function
               (:documentation "In selected window switch to previous buffer."
                :user-visible-flag t)
                nil [189268 189578])
            ("delete-windows-on" function
               (:documentation "Delete all windows showing BUFFER-OR-NAME.
BUFFER-OR-NAME may be a buffer or the name of an existing buffer
and defaults to the current buffer.

The following non-nil values of the optional argument FRAME
have special meanings:

- t means consider all windows on the selected frame only.

- `visible' means consider all windows on all visible frames on
  the current terminal.

- 0 (the number zero) means consider all windows on all visible
  and iconified frames on the current terminal.

- A frame means consider all windows on that frame only.

Any other value of FRAME means consider all windows on all
frames.

When a window showing BUFFER-OR-NAME is dedicated and the only
window of its frame, that frame is deleted when there are other
frames left."
                :user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [189580 191334])
            ("replace-buffer-in-windows" function
               (:documentation "Replace BUFFER-OR-NAME with some other buffer in all windows showing it.
BUFFER-OR-NAME may be a buffer or the name of an existing buffer
and defaults to the current buffer.

When a window showing BUFFER-OR-NAME is dedicated, that window is
deleted.  If that window is the only window on its frame, the
frame is deleted too when there are other frames left.  If there
are no other frames left, some other buffer is displayed in that
window.

This function removes the buffer denoted by BUFFER-OR-NAME from
all window-local buffer lists."
                :user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [191336 192368])
            ("quit-restore-window" function
               (:documentation "Quit WINDOW and deal with its buffer.
WINDOW must be a live window and defaults to the selected one.

According to information stored in WINDOW's `quit-restore' window
parameter either (1) delete WINDOW and its frame, (2) delete
WINDOW, (3) restore the buffer previously displayed in WINDOW,
or (4) make WINDOW display some other buffer than the present
one.  If non-nil, reset `quit-restore' parameter to nil.

Optional second argument BURY-OR-KILL tells how to proceed with
the buffer of WINDOW.  The following values are handled:

nil means to not handle the buffer in a particular way.  This
  means that if WINDOW is not deleted by this function, invoking
  `switch-to-prev-buffer' will usually show the buffer again.

`append' means that if WINDOW is not deleted, move its buffer to
  the end of WINDOW's previous buffers so it's less likely that a
  future invocation of `switch-to-prev-buffer' will switch to it.
  Also, move the buffer to the end of the frame's buffer list.

`bury' means that if WINDOW is not deleted, remove its buffer
  from WINDOW'S list of previous buffers.  Also, move the buffer
  to the end of the frame's buffer list.  This value provides the
  most reliable remedy to not have `switch-to-prev-buffer' switch
  to this buffer again without killing the buffer.

`kill' means to kill WINDOW's buffer."
                :arguments ("window" "bury-or-kill"))
                nil [192370 197213])
            ("quit-window" function
               (:documentation "Quit WINDOW and bury its buffer.
WINDOW must be a live window and defaults to the selected one.
With prefix argument KILL non-nil, kill the buffer instead of
burying it.

According to information stored in WINDOW's `quit-restore' window
parameter either (1) delete WINDOW and its frame, (2) delete
WINDOW, (3) restore the buffer previously displayed in WINDOW,
or (4) make WINDOW display some other buffer than the present
one.  If non-nil, reset `quit-restore' parameter to nil."
                :user-visible-flag t
                :arguments ("kill" "window"))
                nil [197215 197815])
            ("quit-windows-on" function
               (:documentation "Quit all windows showing BUFFER-OR-NAME.
BUFFER-OR-NAME may be a buffer or the name of an existing buffer
and defaults to the current buffer.  Optional argument KILL
non-nil means to kill BUFFER-OR-NAME.  KILL nil means to bury
BUFFER-OR-NAME.  Optional argument FRAME is handled as by
`delete-windows-on'.

This function calls `quit-window' on all candidate windows
showing BUFFER-OR-NAME."
                :user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [197817 198781])
            ("split-window" function
               (:documentation "Make a new window adjacent to WINDOW.
WINDOW must be a valid window and defaults to the selected one.
Return the new window which is always a live window.

Optional argument SIZE a positive number means make WINDOW SIZE
lines or columns tall.  If SIZE is negative, make the new window
-SIZE lines or columns tall.  If and only if SIZE is non-nil, its
absolute value can be less than `window-min-height' or
`window-min-width'; so this command can make a new window as
small as one line or two columns.  SIZE defaults to half of
WINDOW's size.

Optional third argument SIDE nil (or `below') specifies that the
new window shall be located below WINDOW.  SIDE `above' means the
new window shall be located above WINDOW.  In both cases SIZE
specifies the new number of lines for WINDOW (or the new window
if SIZE is negative) including space reserved for the mode and/or
header line.

SIDE t (or `right') specifies that the new window shall be
located on the right side of WINDOW.  SIDE `left' means the new
window shall be located on the left of WINDOW.  In both cases
SIZE specifies the new number of columns for WINDOW (or the new
window provided SIZE is negative) including space reserved for
fringes and the scrollbar or a divider column.  Any other non-nil
value for SIDE is currently handled like t (or `right').

PIXELWISE, if non-nil, means to interpret SIZE pixelwise.

If the variable `ignore-window-parameters' is non-nil or the
`split-window' parameter of WINDOW equals t, do not process any
parameters of WINDOW.  Otherwise, if the `split-window' parameter
of WINDOW specifies a function, call that function with all three
arguments and return the value returned by that function.

Otherwise, if WINDOW is part of an atomic window, \"split\" the
root of that atomic window.  The new window does not become a
member of that atomic window.

If WINDOW is live, properties of the new window like margins and
scrollbars are inherited from WINDOW.  If WINDOW is an internal
window, these properties as well as the buffer displayed in the
new window are inherited from the window selected on WINDOW's
frame.  The selected window is not changed by this function."
                :arguments ("window" "size" "side" "pixelwise"))
                nil [198784 210575])
            ("split-window-no-error" function
               (:documentation "Make a new window adjacent to WINDOW.
This function is like `split-window' but does not signal an error
when WINDOW cannot be split.

For the meaning of all arguments see the documentation of
`split-window'."
                :arguments ("window" "size" "side" "pixelwise"))
                nil [210577 210944])
            ("split-window-keep-point" variable
               (:documentation "If non-nil, \\[split-window-below] preserves point in the new window.
If nil, adjust point in the two windows to minimize redisplay.
This option applies only to `split-window-below' and functions
that call it.  The low-level `split-window' function always keeps
the original point in both windows."
                :default-value t)
                nil [211021 211395])
            ("split-window-below" function
               (:documentation "Split the selected window into two windows, one above the other.
The selected window is above.  The newly split-off window is
below and displays the same buffer.  Return the new window.

If optional argument SIZE is omitted or nil, both windows get the
same height, or close to it.  If SIZE is positive, the upper
(selected) window gets SIZE lines.  If SIZE is negative, the
lower (new) window gets -SIZE lines.

If the variable `split-window-keep-point' is non-nil, both
windows get the same value of point as the selected window.
Otherwise, the window starts are chosen so as to minimize the
amount of redisplay; this is convenient on slow terminals."
                :user-visible-flag t
                :arguments ("size"))
                nil [211397 213651])
            ("defalias" code nil nil [213653 213708])
            ("split-window-right" function
               (:documentation "Split the selected window into two side-by-side windows.
The selected window is on the left.  The newly split-off window
is on the right and displays the same buffer.  Return the new
window.

If optional argument SIZE is omitted or nil, both windows get the
same width, or close to it.  If SIZE is positive, the left-hand
(selected) window gets SIZE columns.  If SIZE is negative, the
right-hand (new) window gets -SIZE columns.  Here, SIZE includes
the width of the window's scroll bar; if there are no scroll
bars, it includes the width of the divider column to the window's
right, if any."
                :user-visible-flag t
                :arguments ("size"))
                nil [213710 214918])
            ("defalias" code nil nil [214920 214977])
            ("balance-windows-2" function
               (:documentation "Subroutine of `balance-windows-1'.
WINDOW must be a vertical combination (horizontal if HORIZONTAL
is non-nil)."
                :arguments ("window" "horizontal"))
                nil [215480 218248])
            ("balance-windows-1" function
               (:documentation "Subroutine of `balance-windows'."
                :arguments ("window" "horizontal"))
                nil [218250 218676])
            ("balance-windows" function
               (:documentation "Balance the sizes of windows of WINDOW-OR-FRAME.
WINDOW-OR-FRAME is optional and defaults to the selected frame.
If WINDOW-OR-FRAME denotes a frame, balance the sizes of all
windows of that frame.  If WINDOW-OR-FRAME denotes a window,
recursively balance the sizes of all child windows of that
window."
                :user-visible-flag t
                :arguments ("window-or-frame"))
                nil [218678 219935])
            ("window-fixed-size-p" function
               (:documentation "Return t if WINDOW cannot be resized in DIRECTION.
WINDOW defaults to the selected window.  DIRECTION can be
nil (i.e. any), `height' or `width'."
                :arguments ("window" "direction"))
                nil [219937 220367])
            ("window-area-factor" variable
               (:documentation "Factor by which the window area should be over-estimated.
This is used by `balance-windows-area'.
Changing this globally has no effect."
                :default-value 1)
                nil [220414 220583])
            ("make-variable-buffer-local" code nil nil [220584 220632])
            ("balance-windows-area-adjust" function
               (:documentation "Wrapper around `window-resize' with error checking.
Arguments WINDOW, DELTA and HORIZONTAL are passed on to that function."
                :arguments ("window" "delta" "horizontal" "pixelwise"))
                nil [220634 221288])
            ("balance-windows-area" function
               (:documentation "Make all visible windows the same area (approximately).
See also `window-area-factor' to change the relative size of
specific buffers."
                :user-visible-flag t)
                nil [221290 225646])
            ("window--state-get-1" function
               (:documentation "Helper function for `window-state-get'."
                :arguments ("window" "writable"))
                nil [225716 228748])
            ("window-state-get" function
               (:documentation "Return state of WINDOW as a Lisp object.
WINDOW can be any window and defaults to the root window of the
selected frame.

Optional argument WRITABLE non-nil means do not use markers for
sampling `window-point' and `window-start'.  Together, WRITABLE
and the variable `window-persistent-parameters' specify which
window parameters are saved by this function.  WRITABLE should be
non-nil when the return value shall be written to a file and read
back in another session.  Otherwise, an application may run into
an `invalid-read-syntax' error while attempting to read back the
value from file.

The return value can be used as argument for `window-state-put'
to put the state recorded here into an arbitrary window.  The
value can be also stored on disk and read back in a new session."
                :arguments ("window" "writable"))
                nil [228750 230839])
            ("window-state-put-list" variable (:documentation "Helper variable for `window-state-put'.") nil [230841 230919])
            ("window-state-put-stale-windows" variable (:documentation "Helper variable for `window-state-put'.") nil [230921 231008])
            ("window--state-put-1" function
               (:documentation "Helper function for `window-state-put'."
                :arguments ("state" "window" "ignore" "totals" "pixelwise"))
                nil [231010 233728])
            ("window--state-put-2" function
               (:documentation "Helper function for `window-state-put'."
                :arguments ("ignore" "pixelwise"))
                nil [233730 237770])
            ("window-state-put" function
               (:documentation "Put window state STATE into WINDOW.
STATE should be the state of a window returned by an earlier
invocation of `window-state-get'.  Optional argument WINDOW must
specify a valid window and defaults to the selected one.  If
WINDOW is not live, replace WINDOW by a live one before putting
STATE into it.

Optional argument IGNORE non-nil means ignore minimum window
sizes and fixed size restrictions.  IGNORE equal `safe' means
windows can get as small as `window-safe-min-height' and
`window-safe-min-width'."
                :arguments ("state" "window" "ignore"))
                nil [237772 241956])
            ("window-swap-states" function
               (:documentation "Swap the states of live windows WINDOW-1 and WINDOW-2.
WINDOW-1 must specify a live window and defaults to the selected
one.  WINDOW-2 must specify a live window and defaults to the
window following WINDOW-1 in the cyclic ordering of windows,
excluding minibuffer windows and including live windows on all
visible frames.

Optional argument SIZE non-nil means to try swapping the sizes of
WINDOW-1 and WINDOW-2 as well.  A value of `height' means to swap
heights only, a value of `width' means to swap widths only, while
t means to swap both widths and heights, if possible.  Frames are
not resized by this function."
                :user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [241958 245373])
            ("display-buffer-record-window" function
               (:documentation "Record information for window used by `display-buffer'.
TYPE specifies the type of the calling operation and must be one
of the symbols `reuse' (when WINDOW existed already and was
reused for displaying BUFFER), `window' (when WINDOW was created
on an already existing frame), or `frame' (when WINDOW was
created on a new frame).  WINDOW is the window used for or created
by the `display-buffer' routines.  BUFFER is the buffer that
shall be displayed.

This function installs or updates the quit-restore parameter of
WINDOW.  The quit-restore parameter is a list of four elements:
The first element is one of the symbols `window', `frame', `same' or
`other'.  The second element is either one of the symbols `window'
or `frame' or a list whose elements are the buffer previously
shown in the window, that buffer's window start and window point,
and the window's height.  The third element is the window
selected at the time the parameter was created.  The fourth
element is BUFFER."
                :arguments ("type" "window" "buffer"))
                nil [245376 247893])
            ("display-buffer-function" variable (:documentation "If non-nil, function to call to handle `display-buffer'.
It will receive two args, the buffer and a flag which if non-nil
means that the currently selected window is not acceptable.  It
should choose or create a window, display the specified buffer in
it, and return the window.

The specified function should call `display-buffer-record-window'
with corresponding arguments to set up the quit-restore parameter
of the window used.") nil [247895 248451])
            ("make-obsolete-variable" code nil nil [248453 248534])
            ("pop-up-frame-alist" variable (:documentation "Alist of parameters for automatically generated new frames.
If non-nil, the value you specify here is used by the default
`pop-up-frame-function' for the creation of new frames.

Since `pop-up-frame-function' is used by `display-buffer' for
making new frames, any value specified here by default affects
the automatic generation of new frames via `display-buffer' and
all functions based on it.  The behavior of `make-frame' is not
affected by this variable.") nil [248715 249331])
            ("pop-up-frame-function" variable
               (:documentation "Function used by `display-buffer' for creating a new frame.
This function is called with no arguments and should return a new
frame.  The default value calls `make-frame' with the argument
`pop-up-frame-alist'."
                :default-value (lambda nil (make-frame pop-up-frame-alist)))
                nil [249333 249662])
            ("special-display-buffer-names" variable (:documentation "List of names of buffers that should be displayed specially.
Displaying a buffer with `display-buffer' or `pop-to-buffer', if
its name is in this list, displays the buffer in a way specified
by `special-display-function'.  `special-display-popup-frame'
(the default for `special-display-function') usually displays
the buffer in a separate frame made with the parameters specified
by `special-display-frame-alist'.  If `special-display-function'
has been set to some other function, that function is called with
the buffer as first, and nil as second argument.

Alternatively, an element of this list can be specified as
(BUFFER-NAME FRAME-PARAMETERS), where BUFFER-NAME is a buffer
name and FRAME-PARAMETERS an alist of (PARAMETER . VALUE) pairs.
`special-display-popup-frame' will interpret such pairs as frame
parameters when it creates a special frame, overriding the
corresponding values from `special-display-frame-alist'.

As a special case, if FRAME-PARAMETERS contains (same-window . t)
`special-display-popup-frame' displays that buffer in the
selected window.  If FRAME-PARAMETERS contains (same-frame . t),
it displays that buffer in a window on the selected frame.

If `special-display-function' specifies some other function than
`special-display-popup-frame', that function is called with the
buffer named BUFFER-NAME as first, and FRAME-PARAMETERS as second
argument.

Finally, an element of this list can be also specified as
(BUFFER-NAME FUNCTION OTHER-ARGS).  In that case,
`special-display-popup-frame' will call FUNCTION with the buffer
named BUFFER-NAME as first argument, and OTHER-ARGS as the
second.

Any alternative function specified here is responsible for
setting up the quit-restore parameter of the window used.

If this variable appears \"not to work\", because you added a
name to it but the corresponding buffer is displayed in the
selected window, look at the values of `same-window-buffer-names'
and `same-window-regexps'.  Those variables take precedence over
this one.

See also `special-display-regexps'.") nil [249664 252254])
            ("make-obsolete-variable" code nil nil [252255 252338])
            ("put" code nil nil [252339 252398])
            ("special-display-regexps" variable (:documentation "List of regexps saying which buffers should be displayed specially.
Displaying a buffer with `display-buffer' or `pop-to-buffer', if
any regexp in this list matches its name, displays it specially
using `special-display-function'.  `special-display-popup-frame'
(the default for `special-display-function') usually displays
the buffer in a separate frame made with the parameters specified
by `special-display-frame-alist'.  If `special-display-function'
has been set to some other function, that function is called with
the buffer as first, and nil as second argument.

Alternatively, an element of this list can be specified as
(REGEXP FRAME-PARAMETERS), where REGEXP is a regexp as above and
FRAME-PARAMETERS an alist of (PARAMETER . VALUE) pairs.
`special-display-popup-frame' will then interpret these pairs as
frame parameters when creating a special frame for a buffer whose
name matches REGEXP, overriding the corresponding values from
`special-display-frame-alist'.

As a special case, if FRAME-PARAMETERS contains (same-window . t)
`special-display-popup-frame' displays buffers matching REGEXP in
the selected window.  (same-frame . t) in FRAME-PARAMETERS means
to display such buffers in a window on the selected frame.

If `special-display-function' specifies some other function than
`special-display-popup-frame', that function is called with the
buffer whose name matched REGEXP as first, and FRAME-PARAMETERS
as second argument.

Finally, an element of this list can be also specified as
(REGEXP FUNCTION OTHER-ARGS).  `special-display-popup-frame'
will then call FUNCTION with the buffer whose name matched
REGEXP as first, and OTHER-ARGS as second argument.

Any alternative function specified here is responsible for
setting up the quit-restore parameter of the window used.

If this variable appears \"not to work\", because you added a
name to it but the corresponding buffer is displayed in the
selected window, look at the values of `same-window-buffer-names'
and `same-window-regexps'.  Those variables take precedence over
this one.

See also `special-display-buffer-names'.") nil [252400 255042])
            ("make-obsolete-variable" code nil nil [255043 255121])
            ("put" code nil nil [255122 255176])
            ("special-display-p" function
               (:documentation "Return non-nil if a buffer named BUFFER-NAME gets a special frame.
More precisely, return t if `special-display-buffer-names' or
`special-display-regexps' contain a string entry equaling or
matching BUFFER-NAME.  If `special-display-buffer-names' or
`special-display-regexps' contain a list entry whose car equals
or matches BUFFER-NAME, the return value is the cdr of that
entry."
                :arguments ("buffer-name"))
                nil [255178 256073])
            ("special-display-frame-alist" variable
               (:documentation "Alist of parameters for special frames.
Special frames are used for buffers whose names are listed in
`special-display-buffer-names' and for buffers whose names match
one of the regular expressions in `special-display-regexps'.

This variable can be set in your init file, like this:

  (setq special-display-frame-alist \\='((width . 80) (height . 20)))

These supersede the values given in `default-frame-alist'."
                :default-value '((height . 14) (width . 80) (unsplittable . t)))
                nil [256075 256693])
            ("make-obsolete-variable" code nil nil [256694 256776])
            ("special-display-popup-frame" function
               (:documentation "Pop up a frame displaying BUFFER and return its window.
If BUFFER is already displayed in a visible or iconified frame,
raise that frame.  Otherwise, display BUFFER in a new frame.

Optional argument ARGS is a list specifying additional
information.

If ARGS is an alist, use it as a list of frame parameters.  If
these parameters contain (same-window . t), display BUFFER in
the selected window.  If they contain (same-frame . t), display
BUFFER in a window of the selected frame.

If ARGS is a list whose car is a symbol, use (car ARGS) as a
function to do the work.  Pass it BUFFER as first argument, and
pass the elements of (cdr ARGS) as the remaining arguments."
                :arguments ("buffer" "args"))
                nil [256778 258798])
            ("special-display-function" variable
               (:documentation "Function to call for displaying special buffers.
This function is called with two arguments - the buffer and,
optionally, a list - and should return a window displaying that
buffer.  The default value usually makes a separate frame for the
buffer using `special-display-frame-alist' to specify the frame
parameters.  See the definition of `special-display-popup-frame'
for how to specify such a function.

A buffer is special when its name is either listed in
`special-display-buffer-names' or matches a regexp in
`special-display-regexps'.

The specified function should call `display-buffer-record-window'
with corresponding arguments to set up the quit-restore parameter
of the window used."
                :default-value 'special-display-popup-frame)
                nil [258800 259598])
            ("make-obsolete-variable" code nil nil [259599 259678])
            ("same-window-buffer-names" variable (:documentation "List of names of buffers that should appear in the \"same\" window.
`display-buffer' and `pop-to-buffer' show a buffer whose name is
on this list in the selected rather than some other window.

An element of this list can be a cons cell instead of just a
string.  In that case, the cell's car must be a string specifying
the buffer name.  This is for compatibility with
`special-display-buffer-names'; the cdr of the cons cell is
ignored.

See also `same-window-regexps'.") nil [259680 260252])
            ("same-window-regexps" variable (:documentation "List of regexps saying which buffers should appear in the \"same\" window.
`display-buffer' and `pop-to-buffer' show a buffer whose name
matches a regexp on this list in the selected rather than some
other window.

An element of this list can be a cons cell instead of just a
string.  In that case, the cell's car must be a regexp matching
the buffer name.  This is for compatibility with
`special-display-regexps'; the cdr of the cons cell is ignored.

See also `same-window-buffer-names'.") nil [260254 260842])
            ("same-window-p" function
               (:documentation "Return non-nil if a buffer named BUFFER-NAME would be shown in the \"same\" window.
This function returns non-nil if `display-buffer' or
`pop-to-buffer' would show a buffer named BUFFER-NAME in the
selected rather than (as usual) some other window.  See
`same-window-buffer-names' and `same-window-regexps'."
                :arguments ("buffer-name"))
                nil [260844 261815])
            ("pop-up-frames" variable (:documentation "Whether `display-buffer' should make a separate frame.
If nil, never make a separate frame.
If the value is `graphic-only', make a separate frame
on graphic displays only.
Any other non-nil value means always make a separate frame.") nil [261817 262229])
            ("display-buffer-reuse-frames" variable (:documentation "Non-nil means `display-buffer' should reuse frames.
If the buffer in question is already displayed in a frame, raise
that frame.") nil [262231 262460])
            ("make-obsolete-variable" code nil nil [262462 262590])
            ("pop-up-windows" variable
               (:documentation "Non-nil means `display-buffer' should make a new window."
                :default-value t)
                nil [262592 262716])
            ("split-window-preferred-function" variable
               (:documentation "Function called by `display-buffer' routines to split a window.
This function is called with a window as single argument and is
supposed to split that window and return the new window.  If the
window can (or shall) not be split, it is supposed to return nil.
The default is to call the function `split-window-sensibly' which
tries to split the window in a way which seems most suitable.
You can customize the options `split-height-threshold' and/or
`split-width-threshold' in order to have `split-window-sensibly'
prefer either vertical or horizontal splitting.

If you set this to any other function, bear in mind that the
`display-buffer' routines may call this function two times.  The
argument of the first call is the largest window on its frame.
If that call fails to return a live window, the function is
called again with the least recently used window as argument.  If
that call fails too, `display-buffer' will use an existing window
to display its buffer.

The window selected at the time `display-buffer' was invoked is
still selected when this function is called.  Hence you can
compare the window argument with the value of `selected-window'
if you intend to split the selected window instead or if you do
not want to split the selected window."
                :default-value 'split-window-sensibly)
                nil [262718 264101])
            ("split-height-threshold" variable
               (:documentation "Minimum height for splitting windows sensibly.
If this is an integer, `split-window-sensibly' may split a window
vertically only if it has at least this many lines.  If this is
nil, `split-window-sensibly' is not allowed to split a window
vertically.  If, however, a window is the only window on its
frame, or all the other ones are dedicated,
`split-window-sensibly' may split it vertically disregarding the
value of this variable."
                :default-value 80)
                nil [264103 264666])
            ("split-width-threshold" variable
               (:documentation "Minimum width for splitting windows sensibly.
If this is an integer, `split-window-sensibly' may split a window
horizontally only if it has at least this many columns.  If this
is nil, `split-window-sensibly' is not allowed to split a window
horizontally."
                :default-value 160)
                nil [264668 265056])
            ("window-splittable-p" function
               (:documentation "Return non-nil if `split-window-sensibly' may split WINDOW.
Optional argument HORIZONTAL nil or omitted means check whether
`split-window-sensibly' may split WINDOW vertically.  HORIZONTAL
non-nil means check whether WINDOW may be split horizontally.

WINDOW may be split vertically when the following conditions
hold:
- `window-size-fixed' is either nil or equals `width' for the
  buffer of WINDOW.
- `split-height-threshold' is an integer and WINDOW is at least as
  high as `split-height-threshold'.
- When WINDOW is split evenly, the emanating windows are at least
  `window-min-height' lines tall and can accommodate at least one
  line plus - if WINDOW has one - a mode line.

WINDOW may be split horizontally when the following conditions
hold:
- `window-size-fixed' is either nil or equals `height' for the
  buffer of WINDOW.
- `split-width-threshold' is an integer and WINDOW is at least as
  wide as `split-width-threshold'.
- When WINDOW is split evenly, the emanating windows are at least
  `window-min-width' or two (whichever is larger) columns wide."
                :arguments ("window" "horizontal"))
                nil [265058 267399])
            ("split-window-sensibly" function
               (:documentation "Split WINDOW in a way suitable for `display-buffer'.
WINDOW defaults to the currently selected window.
If `split-height-threshold' specifies an integer, WINDOW is at
least `split-height-threshold' lines tall and can be split
vertically, split WINDOW into two windows one above the other and
return the lower window.  Otherwise, if `split-width-threshold'
specifies an integer, WINDOW is at least `split-width-threshold'
columns wide and can be split horizontally, split WINDOW into two
windows side by side and return the window on the right.  If this
can't be done either and WINDOW is the only window on its frame,
try to split WINDOW vertically disregarding any value specified
by `split-height-threshold'.  If that succeeds, return the lower
window.  Return nil otherwise.

By default `display-buffer' routines call this function to split
the largest or least recently used window.  To change the default
customize the option `split-window-preferred-function'.

You can enforce this function to not split WINDOW horizontally,
by setting (or binding) the variable `split-width-threshold' to
nil.  If, in addition, you set `split-height-threshold' to zero,
chances increase that this function does split WINDOW vertically.

In order to not split WINDOW vertically, set (or bind) the
variable `split-height-threshold' to nil.  Additionally, you can
set `split-width-threshold' to zero to make a horizontal split
more likely to occur.

Have a look at the function `window-splittable-p' if you want to
know how `split-window-sensibly' determines whether WINDOW can be
split."
                :arguments ("window"))
                nil [267401 270272])
            ("window--try-to-split-window" function
               (:documentation "Try to split WINDOW.
Return value returned by `split-window-preferred-function' if it
represents a live window, nil otherwise."
                :arguments ("window" "alist"))
                nil [270274 271384])
            ("window--frame-usable-p" function
               (:documentation "Return FRAME if it can be used to display a buffer."
                :arguments ("frame"))
                nil [271386 272328])
            ("defvaralias" code nil nil [272330 272383])
            ("even-window-sizes" variable
               (:documentation "If non-nil `display-buffer' will try to even window sizes.
Otherwise `display-buffer' will leave the window configuration
alone.  Special values are `height-only' to even heights only and
`width-only' to even widths only.  Any other value means to even
any of them."
                :default-value t)
                nil [272384 272907])
            ("window--even-window-sizes" function
               (:documentation "Even sizes of WINDOW and selected window.
Even only if these windows are the only children of their parent,
`even-window-sizes' has the appropriate value and the selected
window is larger than WINDOW."
                :arguments ("window"))
                nil [272909 273914])
            ("window--display-buffer" function
               (:documentation "Display BUFFER in WINDOW.
TYPE must be one of the symbols `reuse', `window' or `frame' and
is passed unaltered to `display-buffer-record-window'.  ALIST is
the alist argument of `display-buffer'.  Set `window-dedicated-p'
to DEDICATED if non-nil.  Return WINDOW if BUFFER and WINDOW are
live."
                :arguments ("buffer" "window" "type" "alist" "dedicated"))
                nil [273916 277082])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [277084 277664])
            ("display-buffer-mark-dedicated" variable (:documentation "If non-nil, `display-buffer' marks the windows it creates as dedicated.
The actual non-nil value of this variable will be copied to the
`window-dedicated-p' flag.") nil [278003 278212])
            ("display-buffer--action-function-custom-type" variable
               (:documentation "Custom type for `display-buffer' action functions."
                :constant-flag t
                :default-value '(choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function")))
                nil [278214 278853])
            ("display-buffer--action-custom-type" variable
               (:documentation "Custom type for `display-buffer' actions."
                :constant-flag t
                :default-value `(cons :tag "Action" (choice :tag "Action functions" ,display-buffer--action-function-custom-type (repeat :tag "List of functions" ,display-buffer--action-function-custom-type)) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value"))))
                nil [278855 279230])
            ("display-buffer-overriding-action" variable
               (:documentation "Overriding action to perform to display a buffer.
It should be a cons cell (FUNCTION . ALIST), where FUNCTION is a
function or a list of functions.  Each function should accept two
arguments: a buffer to display and an alist similar to ALIST.
See `display-buffer' for details."
                :default-value '(nil))
                nil [279232 279567])
            ("put" code nil nil [279568 279631])
            ("display-buffer-alist" variable (:documentation "Alist of conditional actions for `display-buffer'.
This is a list of elements (CONDITION . ACTION), where:

 CONDITION is either a regexp matching buffer names, or a
  function that takes two arguments - a buffer name and the
  ACTION argument of `display-buffer' - and returns a boolean.

 ACTION is a cons cell (FUNCTION . ALIST), where FUNCTION is a
  function or a list of functions.  Each such function should
  accept two arguments: a buffer to display and an alist of the
  same form as ALIST.  See `display-buffer' for details.

`display-buffer' scans this alist until it either finds a
matching regular expression or the function specified by a
condition returns non-nil.  In any of these cases, it adds the
associated action to the list of actions it will try.") nil [279633 280644])
            ("display-buffer-base-action" variable
               (:documentation "User-specified default action for `display-buffer'.
It should be a cons cell (FUNCTION . ALIST), where FUNCTION is a
function or a list of functions.  Each function should accept two
arguments: a buffer to display and an alist similar to ALIST.
See `display-buffer' for details."
                :default-value '(nil))
                nil [280646 281070])
            ("display-buffer-fallback-action" variable
               (:documentation "Default fallback action for `display-buffer'.
This is the action used by `display-buffer' if no other actions
specified, e.g. by the user options `display-buffer-alist' or
`display-buffer-base-action'.  See `display-buffer'."
                :constant-flag t
                :default-value '((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame)))
                nil [281072 281656])
            ("put" code nil nil [281657 281718])
            ("display-buffer-assq-regexp" function
               (:documentation "Retrieve ALIST entry corresponding to BUFFER-NAME.
ACTION is the action argument passed to `display-buffer'."
                :arguments ("buffer-name" "alist" "action"))
                nil [281720 282143])
            ("display-buffer--same-window-action" variable
               (:documentation "A `display-buffer' action for displaying in the same window."
                :default-value '(display-buffer-same-window (inhibit-same-window)))
                nil [282145 282317])
            ("put" code nil nil [282318 282383])
            ("display-buffer--other-frame-action" variable
               (:documentation "A `display-buffer' action for displaying in another frame."
                :default-value '((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))
                nil [282385 282615])
            ("put" code nil nil [282616 282681])
            ("display-buffer" function
               (:documentation "Display BUFFER-OR-NAME in some window, without selecting it.
BUFFER-OR-NAME must be a buffer or the name of an existing
buffer.  Return the window chosen for displaying BUFFER-OR-NAME,
or nil if no such window is found.

Optional argument ACTION, if non-nil, should specify a display
action.  Its form is described below.

Optional argument FRAME, if non-nil, acts like an additional
ALIST entry (reusable-frames . FRAME) to the action list of ACTION,
specifying the frame(s) to search for a window that is already
displaying the buffer.  See `display-buffer-reuse-window'.

If ACTION is non-nil, it should have the form (FUNCTION . ALIST),
where FUNCTION is either a function or a list of functions, and
ALIST is an arbitrary association list (alist).

Each such FUNCTION should accept two arguments: the buffer to
display and an alist.  Based on those arguments, it should
display the buffer and return the window.  If the caller is
prepared to handle the case of not displaying the buffer
and returning nil from `display-buffer' it should pass
(allow-no-window . t) as an element of the ALIST.

The `display-buffer' function builds a function list and an alist
by combining the functions and alists specified in
`display-buffer-overriding-action', `display-buffer-alist', the
ACTION argument, `display-buffer-base-action', and
`display-buffer-fallback-action' (in order).  Then it calls each
function in the combined function list in turn, passing the
buffer as the first argument and the combined alist as the second
argument, until one of the functions returns non-nil.

If ACTION is nil, the function list and the alist are built using
only the other variables mentioned above.

Available action functions include:
 `display-buffer-same-window'
 `display-buffer-reuse-window'
 `display-buffer-pop-up-frame'
 `display-buffer-in-child-frame'
 `display-buffer-pop-up-window'
 `display-buffer-in-previous-window'
 `display-buffer-use-some-window'
 `display-buffer-use-some-frame'

Recognized alist entries include:

 `inhibit-same-window' -- A non-nil value prevents the same
                          window from being used for display.

 `inhibit-switch-frame' -- A non-nil value prevents any other
                           frame from being raised or selected,
                           even if the window is displayed there.

 `reusable-frames' -- Value specifies frame(s) to search for a
                      window that already displays the buffer.
                      See `display-buffer-reuse-window'.

 `pop-up-frame-parameters' -- Value specifies an alist of frame
                              parameters to give a new frame, if
                              one is created.

 `window-height' -- Value specifies either an integer (the number
    of lines of a new window), a floating point number (the
    fraction of a new window with respect to the height of the
    frame's root window) or a function to be called with one
    argument - a new window.  The function is supposed to adjust
    the height of the window; its return value is ignored.
    Suitable functions are `shrink-window-if-larger-than-buffer'
    and `fit-window-to-buffer'.

 `window-width' -- Value specifies either an integer (the number
    of columns of a new window), a floating point number (the
    fraction of a new window with respect to the width of the
    frame's root window) or a function to be called with one
    argument - a new window.  The function is supposed to adjust
    the width of the window; its return value is ignored.

 `allow-no-window' -- A non-nil value indicates readiness for the case
    of not displaying the buffer and FUNCTION can safely return
    a non-window value to suppress displaying.

 `preserve-size' -- Value should be either (t . nil) to
    preserve the width of the window, (nil . t) to preserve its
    height or (t . t) to preserve both.

 `window-parameters' -- Value specifies an alist of window
                        parameters to give the chosen window.

The ACTION argument to `display-buffer' can also have a non-nil
and non-list value.  This means to display the buffer in a window
other than the selected one, even if it is already displayed in
the selected window.  If called interactively with a prefix
argument, ACTION is t."
                :user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [282683 288786])
            ("display-buffer-other-frame" function
               (:documentation "Display buffer BUFFER preferably in another frame.
This uses the function `display-buffer' as a subroutine; see
its documentation for additional customization information."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [288788 289121])
            ("display-buffer-use-some-frame" function
               (:documentation "Display BUFFER in an existing frame that meets a predicate
(by default any frame other than the current frame).  If
successful, return the window used; otherwise return nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, avoid
raising the frame.

If ALIST has a non-nil `frame-predicate' entry, its value is a
function taking one argument (a frame), returning non-nil if the
frame is a candidate; this function replaces the default
predicate.

If ALIST has a non-nil `inhibit-same-window' entry, avoid using
the currently selected window (only useful with a frame-predicate
that allows the selected frame)."
                :arguments ("buffer" "alist"))
                nil [289163 290658])
            ("display-buffer-same-window" function
               (:documentation "Display BUFFER in the selected window.
This fails if ALIST has a non-nil `inhibit-same-window' entry, or
if the selected window is a minibuffer window or is dedicated to
another buffer; in that case, return nil.  Otherwise, return the
selected window."
                :arguments ("buffer" "alist"))
                nil [290660 291145])
            ("display-buffer--maybe-same-window" function
               (:documentation "Conditionally display BUFFER in the selected window.
If `same-window-p' returns non-nil for BUFFER's name, call
`display-buffer-same-window' and return its value.  Otherwise,
return nil."
                :arguments ("buffer" "alist"))
                nil [291147 291488])
            ("display-buffer-reuse-window" function
               (:documentation "Return a window that is already displaying BUFFER.
Return nil if no usable window is found.

If ALIST has a non-nil `inhibit-same-window' entry, the selected
window is not eligible for reuse.

If ALIST contains a `reusable-frames' entry, its value determines
which frames to search for a reusable window:
  nil -- the selected frame (actually the last non-minibuffer frame)
  A frame   -- just that frame
  `visible' -- all visible frames
  0   -- all frames on the current terminal
  t   -- all frames.

If ALIST contains no `reusable-frames' entry, search just the
selected frame if `display-buffer-reuse-frames' and
`pop-up-frames' are both nil; search all frames on the current
terminal if either of those variables is non-nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, then in the
event that a window on another frame is chosen, avoid raising
that frame."
                :arguments ("buffer" "alist"))
                nil [291490 293136])
            ("display-buffer-reuse-mode-window" function
               (:documentation "Return a window based on the mode of the buffer it displays.
Display BUFFER in the returned window.  Return nil if no usable
window is found.

If ALIST contains a `mode' entry, its value is a major mode (a
symbol) or a list of modes.  A window is a candidate if it
displays a buffer that derives from one of the given modes.  When
ALIST contains no `mode' entry, the current major mode of BUFFER
is used.

The behavior is also controlled by entries for
`inhibit-same-window', `reusable-frames' and
`inhibit-switch-frame' as is done in the function
`display-buffer-reuse-window'."
                :arguments ("buffer" "alist"))
                nil [293138 295987])
            ("display-buffer--special-action" function
               (:documentation "Return special display action for BUFFER, if any.
If `special-display-p' returns non-nil for BUFFER, return an
appropriate display action involving `special-display-function'.
See `display-buffer' for the format of display actions."
                :arguments ("buffer"))
                nil [295989 296735])
            ("display-buffer-pop-up-frame" function
               (:documentation "Display BUFFER in a new frame.
This works by calling `pop-up-frame-function'.  If successful,
return the window used; otherwise return nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, avoid
raising the new frame.

If ALIST has a non-nil `pop-up-frame-parameters' entry, the
corresponding value is an alist of frame parameters to give the
new frame."
                :arguments ("buffer" "alist"))
                nil [296737 297757])
            ("display-buffer-pop-up-window" function
               (:documentation "Display BUFFER by popping up a new window.
The new window is created on the selected frame, or in
`last-nonminibuffer-frame' if no windows can be created there.
If successful, return the new window; otherwise return nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, then in the
event that the new window is created on another frame, avoid
raising the frame."
                :arguments ("buffer" "alist"))
                nil [297759 299074])
            ("display-buffer--maybe-pop-up-frame-or-window" function
               (:documentation "Try displaying BUFFER based on `pop-up-frames' or `pop-up-windows'.
If `pop-up-frames' is non-nil (and not `graphic-only' on a
text-only terminal), try with `display-buffer-pop-up-frame'.

If that cannot be done, and `pop-up-windows' is non-nil, try
again with `display-buffer-pop-up-window'."
                :arguments ("buffer" "alist"))
                nil [299076 299554])
            ("display-buffer--maybe-pop-up-frame" function
               (:documentation "Try displaying BUFFER based on `pop-up-frames'.
If `pop-up-frames' is non-nil (and not `graphic-only' on a
text-only terminal), try with `display-buffer-pop-up-frame'."
                :arguments ("buffer" "alist"))
                nil [299556 299921])
            ("display-buffer--maybe-pop-up-window" function
               (:documentation "Try displaying BUFFER based on `pop-up-windows'.
If `pop-up-windows' is non-nil, try with `display-buffer-pop-up-window'."
                :arguments ("buffer" "alist"))
                nil [299923 300181])
            ("display-buffer-in-child-frame" function
               (:documentation "Display BUFFER in a child frame.
By default, this either reuses a child frame of the selected
frame or makes a new child frame of the selected frame.  If
successful, return the window used; otherwise return nil.

If ALIST has a non-nil 'child-frame-parameters' entry, the
corresponding value is an alist of frame parameters to give the
new frame.  A 'parent-frame' parameter specifying the selected
frame is provided by default.  If the child frame should be or
become the child of any other frame, a corresponding entry must
be added to ALIST."
                :arguments ("buffer" "alist"))
                nil [300183 301865])
            ("display-buffer-below-selected" function
               (:documentation "Try displaying BUFFER in a window below the selected window.
If there is a window below the selected one and that window
already displays BUFFER, use that window.  Otherwise, try to
create a new window below the selected one and show BUFFER there.
If that attempt fails as well and there is a non-dedicated window
below the selected one, use that window."
                :arguments ("buffer" "alist"))
                nil [301867 302955])
            ("display-buffer--maybe-at-bottom" function (:arguments ("buffer" "alist")) nil [302957 303538])
            ("display-buffer-at-bottom" function
               (:documentation "Try displaying BUFFER in a window at the bottom of the selected frame.
This either reuses such a window provided it shows BUFFER
already, splits a window at the bottom of the frame or the
frame's root window, or reuses some window at the bottom of the
selected frame."
                :arguments ("buffer" "alist"))
                nil [303540 305019])
            ("display-buffer-in-previous-window" function
               (:documentation "Display BUFFER in a window previously showing it.
If ALIST has a non-nil `inhibit-same-window' entry, the selected
window is not eligible for reuse.

If ALIST contains a `reusable-frames' entry, its value determines
which frames to search for a reusable window:
  nil -- the selected frame (actually the last non-minibuffer frame)
  A frame   -- just that frame
  `visible' -- all visible frames
  0   -- all frames on the current terminal
  t   -- all frames.

If ALIST contains no `reusable-frames' entry, search just the
selected frame if `display-buffer-reuse-frames' and
`pop-up-frames' are both nil; search all frames on the current
terminal if either of those variables is non-nil.

If ALIST has a `previous-window' entry, the window specified by
that entry will override any other window found by the methods
above, even if that window never showed BUFFER before."
                :arguments ("buffer" "alist"))
                nil [305021 307308])
            ("display-buffer-use-some-window" function
               (:documentation "Display BUFFER in an existing window.
Search for a usable window, set that window to the buffer, and
return the window.  If no suitable window is found, return nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, then in the
event that a window in another frame is chosen, avoid raising
that frame."
                :arguments ("buffer" "alist"))
                nil [307310 309051])
            ("display-buffer-no-window" function
               (:documentation "Display BUFFER in no window.
If ALIST has a non-nil `allow-no-window' entry, then don't display
a window at all.  This makes possible to override the default action
and avoid displaying the buffer.  It is assumed that when the caller
specifies a non-nil `allow-no-window' then it can handle a nil value
returned from `display-buffer' in this case."
                :arguments ("_buffer" "alist"))
                nil [309053 309508])
            ("pop-to-buffer" function
               (:documentation "Display buffer specified by BUFFER-OR-NAME and select its window.
BUFFER-OR-NAME may be a buffer, a string (a buffer name), or nil.
If it is a string not naming an existent buffer, create a buffer
with that name.  If BUFFER-OR-NAME is nil, choose some other
buffer.  In either case, make that buffer current and return it.

This uses `display-buffer' as a subroutine.  The optional ACTION
argument is passed to `display-buffer' as its ACTION argument.
See `display-buffer' for more information.  ACTION is t if called
interactively with a prefix argument, which means to pop to a
window other than the selected one even if the buffer is already
displayed in the selected window.

If a suitable window is found, select that window.  If it is not
on the selected frame, raise that window's frame and give it
input focus.

Optional third arg NORECORD non-nil means do not put this buffer
at the front of the list of recently selected ones."
                :user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [309544 311421])
            ("pop-to-buffer-same-window" function
               (:documentation "Select buffer BUFFER in some window, preferably the same one.
BUFFER may be a buffer, a string (a buffer name), or nil.  If it
is a string not naming an existent buffer, create a buffer with
that name.  If BUFFER is nil, choose some other buffer.  Return
the buffer.

Optional argument NORECORD, if non-nil means do not put this
buffer at the front of the list of recently selected ones.

Unlike `pop-to-buffer', this function prefers using the selected
window over popping up a new window or frame."
                :arguments ("buffer" "norecord"))
                nil [311423 312057])
            ("read-buffer-to-switch" function
               (:documentation "Read the name of a buffer to switch to, prompting with PROMPT.
Return the name of the buffer as a string.

This function is intended for the `switch-to-buffer' family of
commands since these need to omit the name of the current buffer
from the list of completions and default values."
                :arguments ("prompt"))
                nil [312059 313203])
            ("window-normalize-buffer-to-switch-to" function
               (:documentation "Normalize BUFFER-OR-NAME argument of buffer switching functions.
If BUFFER-OR-NAME is nil, return the buffer returned by
`other-buffer'.  Else, if a buffer specified by BUFFER-OR-NAME
exists, return that buffer.  If no such buffer exists, create a
buffer with the name BUFFER-OR-NAME and return that buffer."
                :arguments ("buffer-or-name"))
                nil [313205 313761])
            ("switch-to-buffer-preserve-window-point" variable
               (:documentation "If non-nil, `switch-to-buffer' tries to preserve `window-point'.
If this is nil, `switch-to-buffer' displays the buffer at that
buffer's `point'.  If this is `already-displayed', it tries to
display the buffer at its previous position in the selected
window, provided the buffer is currently displayed in some other
window on any visible or iconified frame.  If this is t, it
unconditionally tries to display the buffer at its previous
position in the selected window.

This variable is ignored if the buffer is already displayed in
the selected window or never appeared in it before, or if
`switch-to-buffer' calls `pop-to-buffer' to display the buffer."
                :default-value t)
                nil [313763 314650])
            ("switch-to-buffer-in-dedicated-window" variable (:documentation "Allow switching to buffer in strongly dedicated windows.
If non-nil, allow `switch-to-buffer' to proceed when called
interactively and the selected window is strongly dedicated to
its buffer.

The following values are recognized:

nil - disallow switching; signal an error

prompt - prompt user whether to allow switching

pop - perform `pop-to-buffer' instead

t - undedicate selected window and switch

When called non-interactively, `switch-to-buffer' always signals
an error when the selected window is dedicated to its buffer and
FORCE-SAME-WINDOW is non-nil.") nil [314652 315442])
            ("switch-to-buffer" function
               (:documentation "Display buffer BUFFER-OR-NAME in the selected window.

WARNING: This is NOT the way to work on another buffer temporarily
within a Lisp program!  Use `set-buffer' instead.  That avoids
messing with the window-buffer correspondences.

If the selected window cannot display the specified buffer
because it is a minibuffer window or strongly dedicated to
another buffer, call `pop-to-buffer' to select the buffer in
another window.  In interactive use, if the selected window is
strongly dedicated to its buffer, the value of the option
`switch-to-buffer-in-dedicated-window' specifies how to proceed.

If called interactively, read the buffer name using `read-buffer'.
The variable `confirm-nonexistent-file-or-buffer' determines
whether to request confirmation before creating a new buffer.
See `read-buffer' for features related to input and completion
of buffer names.

BUFFER-OR-NAME may be a buffer, a string (a buffer name), or nil.
If BUFFER-OR-NAME is a string that does not identify an existing
buffer, create a buffer with that name.  If BUFFER-OR-NAME is
nil, switch to the buffer returned by `other-buffer'.

If optional argument NORECORD is non-nil, do not put the buffer
at the front of the buffer list, and do not make the window
displaying it the most recently selected one.

If optional argument FORCE-SAME-WINDOW is non-nil, the buffer
must be displayed in the selected window when called
non-interactively; if that is impossible, signal an error rather
than calling `pop-to-buffer'.

The option `switch-to-buffer-preserve-window-point' can be used
to make the buffer appear at its last position in the selected
window.

Return the buffer switched to."
                :user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [315444 319265])
            ("switch-to-buffer-other-window" function
               (:documentation "Select the buffer specified by BUFFER-OR-NAME in another window.
BUFFER-OR-NAME may be a buffer, a string (a buffer name), or
nil.  Return the buffer switched to.

If called interactively, read the buffer name using `read-buffer'.
The variable `confirm-nonexistent-file-or-buffer' determines
whether to request confirmation before creating a new buffer.
See `read-buffer' for features related to input and completion
of buffer names.

If BUFFER-OR-NAME is a string and does not identify an existing
buffer, create a new buffer with that name.  If BUFFER-OR-NAME is
nil, switch to the buffer returned by `other-buffer'.

Optional second argument NORECORD non-nil means do not put this
buffer at the front of the list of recently selected ones.

This uses the function `display-buffer' as a subroutine; see its
documentation for additional customization information."
                :user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [319267 320371])
            ("switch-to-buffer-other-frame" function
               (:documentation "Switch to buffer BUFFER-OR-NAME in another frame.
BUFFER-OR-NAME may be a buffer, a string (a buffer name), or
nil.  Return the buffer switched to.

If called interactively, read the buffer name using `read-buffer'.
The variable `confirm-nonexistent-file-or-buffer' determines
whether to request confirmation before creating a new buffer.
See `read-buffer' for features related to input and completion
of buffer names.

If BUFFER-OR-NAME is a string and does not identify an existing
buffer, create a new buffer with that name.  If BUFFER-OR-NAME is
nil, switch to the buffer returned by `other-buffer'.

Optional second arg NORECORD non-nil means do not put this
buffer at the front of the list of recently selected ones.

This uses the function `display-buffer' as a subroutine; see its
documentation for additional customization information."
                :user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [320373 321457])
            ("set-window-text-height" function
               (:documentation "Set the height in lines of the text display area of WINDOW to HEIGHT.
WINDOW must be a live window and defaults to the selected one.
HEIGHT doesn't include the mode line or header line, if any, or
any partial-height lines in the text display area.

Note that the current implementation of this function cannot
always set the height exactly, but attempts to be conservative,
by allocating more lines than are actually needed in the case
where some error may be present."
                :arguments ("window" "height"))
                nil [321460 322433])
            ("enlarge-window-horizontally" function
               (:documentation "Make selected window DELTA columns wider.
Interactively, if no argument is given, make selected window one
column wider."
                :user-visible-flag t
                :arguments ("delta"))
                nil [322435 322650])
            ("shrink-window-horizontally" function
               (:documentation "Make selected window DELTA columns narrower.
Interactively, if no argument is given, make selected window one
column narrower."
                :user-visible-flag t
                :arguments ("delta"))
                nil [322652 322871])
            ("count-screen-lines" function
               (:documentation "Return the number of screen lines in the region.
The number of screen lines may be different from the number of actual lines,
due to line breaking, display table, etc.

Optional arguments BEG and END default to `point-min' and `point-max'
respectively.

If region ends with a newline, ignore it unless optional third argument
COUNT-FINAL-NEWLINE is non-nil.

The optional fourth argument WINDOW specifies the window used for obtaining
parameters such as width, horizontal scrolling, and so on.  The default is
to use the selected window's parameters.

Like `vertical-motion', `count-screen-lines' always uses the current buffer,
regardless of which buffer is displayed in WINDOW.  This makes possible to use
`count-screen-lines' in any buffer, whether or not it is currently displayed
in some window."
                :arguments ("beg" "end" "count-final-newline" "window"))
                nil [322873 324274])
            ("window-buffer-height" function
               (:documentation "Return the height (in screen lines) of the buffer that WINDOW is displaying.
WINDOW must be a live window and defaults to the selected one."
                :arguments ("window"))
                nil [324276 324754])
            ("fit-window-to-buffer-horizontally" variable (:documentation "Non-nil means `fit-window-to-buffer' can resize windows horizontally.
If this is nil, `fit-window-to-buffer' never resizes windows
horizontally.  If this is `only', it can resize windows
horizontally only.  Any other value means `fit-window-to-buffer'
can resize windows in both dimensions.") nil [324819 325213])
            ("fit-frame-to-buffer" variable (:documentation "Non-nil means `fit-window-to-buffer' can fit a frame to its buffer.
A frame is fit if and only if its root window is a live window
and this option is non-nil.  If this is `horizontally', frames
are resized horizontally only.  If this is `vertically', frames
are resized vertically only.  Any other non-nil value means
frames can be resized in both dimensions.") nil [325327 325776])
            ("fit-frame-to-buffer-margins" variable
               (:documentation "Margins around frame for `fit-frame-to-buffer'.
This specifies the numbers of pixels to be left free on the left,
above, on the right, and below a frame fitted to its buffer.  Set
this to avoid obscuring other desktop objects like the taskbar.
The default is nil for each side, which means to not add margins.

The value specified here can be overridden for a specific frame
by that frame's `fit-frame-to-buffer-margins' parameter, if
present.  See also `fit-frame-to-buffer-sizes'."
                :default-value '(nil nil nil nil))
                nil [325778 326992])
            ("fit-frame-to-buffer-sizes" variable
               (:documentation "Size boundaries of frame for `fit-frame-to-buffer'.
This list specifies the total maximum and minimum lines and
maximum and minimum columns of the root window of any frame that
shall be fit to its buffer.  If any of these values is non-nil,
it overrides the corresponding argument of `fit-frame-to-buffer'.

On window systems where the menubar can wrap, fitting a frame to
its buffer may swallow the last line(s).  Specifying an
appropriate minimum width value here can avoid such wrapping.

See also `fit-frame-to-buffer-margins'."
                :default-value '(nil nil nil nil))
                nil [326994 328283])
            ("declare-function" code nil nil [328285 328356])
            ("window--sanitize-margin" function
               (:documentation "Return MARGIN if it's a number between LEFT and RIGHT.
Return 0 otherwise."
                :arguments ("margin" "left" "right"))
                nil [328358 328593])
            ("declare-function" code nil nil [328595 328667])
            ("fit-frame-to-buffer" function
               (:documentation "Adjust size of FRAME to display the contents of its buffer exactly.
FRAME can be any live frame and defaults to the selected one.
Fit only if FRAME's root window is live.  MAX-HEIGHT, MIN-HEIGHT,
MAX-WIDTH and MIN-WIDTH specify bounds on the new total size of
FRAME's root window.  MIN-HEIGHT and MIN-WIDTH default to the values of
`window-min-height' and `window-min-width' respectively.

If the optional argument ONLY is `vertically', resize the frame
vertically only.  If ONLY is `horizontally', resize the frame
horizontally only.

The new position and size of FRAME can be additionally determined
by customizing the options `fit-frame-to-buffer-sizes' and
`fit-frame-to-buffer-margins' or setting the corresponding
parameters of FRAME."
                :user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [328669 338596])
            ("fit-window-to-buffer" function
               (:documentation "Adjust size of WINDOW to display its buffer's contents exactly.
WINDOW must be a live window and defaults to the selected one.

If WINDOW is part of a vertical combination, adjust WINDOW's
height.  The new height is calculated from the actual height of
the accessible portion of its buffer.  The optional argument
MAX-HEIGHT specifies a maximum height and defaults to the height
of WINDOW's frame.  The optional argument MIN-HEIGHT specifies a
minimum height and defaults to `window-min-height'.  Both
MAX-HEIGHT and MIN-HEIGHT are specified in lines and include mode
and header line and a bottom divider, if any.

If WINDOW is part of a horizontal combination and the value of
the option `fit-window-to-buffer-horizontally' is non-nil, adjust
WINDOW's width.  The new width of WINDOW is calculated from the
maximum length of its buffer's lines that follow the current
start position of WINDOW.  The optional argument MAX-WIDTH
specifies a maximum width and defaults to the width of WINDOW's
frame.  The optional argument MIN-WIDTH specifies a minimum width
and defaults to `window-min-width'.  Both MAX-WIDTH and MIN-WIDTH
are specified in columns and include fringes, margins, a
scrollbar and a vertical divider, if any.

If the optional argument `preserve-size' is non-nil, preserve the
size of WINDOW (see `window-preserve-size').

Fit pixelwise if the option `window-resize-pixelwise' is non-nil.
If WINDOW is its frame's root window and the option
`fit-frame-to-buffer' is non-nil, call `fit-frame-to-buffer' to
adjust the frame's size.

Note that even if this function makes WINDOW large enough to show
_all_ parts of its buffer you might not see the first part when
WINDOW was scrolled.  If WINDOW is resized horizontally, you will
not see the top of its buffer unless WINDOW starts at its minimum
accessible position."
                :user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [338598 345077])
            ("window-safely-shrinkable-p" function
               (:documentation "Return t if WINDOW can be shrunk without shrinking other windows.
WINDOW defaults to the selected window."
                :arguments ("window"))
                nil [345079 345460])
            ("shrink-window-if-larger-than-buffer" function
               (:documentation "Shrink height of WINDOW if its buffer doesn't need so many lines.
More precisely, shrink WINDOW vertically to be as small as
possible, while still showing the full contents of its buffer.
WINDOW must be a live window and defaults to the selected one.

Do not shrink WINDOW to less than `window-min-height' lines.  Do
nothing if the buffer contains more lines than the present window
height, or if some of the window's contents are scrolled out of
view, or if shrinking this window would also shrink another
window, or if the window is the only window of its frame.

Return non-nil if the window was shrunk, nil otherwise."
                :user-visible-flag t
                :arguments ("window"))
                nil [345462 346570])
            ("window-largest-empty-rectangle--maximums-1" function
               (:documentation "Support function for `window-largest-empty-rectangle'."
                :arguments ("quad" "maximums"))
                nil [346572 346905])
            ("window-largest-empty-rectangle--maximums" function
               (:documentation "Support function for `window-largest-empty-rectangle'."
                :arguments ("quad" "maximums" "count"))
                nil [346907 347187])
            ("window-largest-empty-rectangle--disjoint-maximums" function
               (:documentation "Support function for `window-largest-empty-rectangle'."
                :arguments ("maximums" "count"))
                nil [347189 347958])
            ("window-largest-empty-rectangle" function
               (:documentation "Return dimensions of largest empty rectangle in WINDOW.
WINDOW must be a live window and defaults to the selected one.

The return value is a triple of the width and the start and end
Y-coordinates of the largest rectangle that can be inscribed into
the empty space (the space not displaying any text) of WINDOW's
text area.  The return value is nil if the current glyph matrix
of WINDOW is not up-to-date.

Optional argument COUNT, if non-nil, specifies the maximum number
of rectangles to return.  This means that the return value is a
list of triples specifying rectangles with the largest rectangle
first.  COUNT can be also a cons cell whose car specifies the
number of rectangles to return and whose cdr, if non-nil, states
that all rectangles returned must be disjoint.

Note that the right edge of any rectangle returned by this
function is the right edge of WINDOW (the left edge if its buffer
displays RTL text).

Optional arguments MIN-WIDTH and MIN-HEIGHT, if non-nil, specify
the minimum width and height of any rectangle returned.

Optional argument POSITIONS, if non-nil, is a cons cell whose car
specifies the uppermost and whose cdr specifies the lowermost
pixel position that must be covered by any rectangle returned.
Note that positions are counted from the start of the text area
of WINDOW.

Optional argument LEFT, if non-nil, means to return values suitable for
buffers displaying right to left text."
                :arguments ("window" "count" "min-width" "min-height" "positions" "left"))
                nil [347960 352721])
            ("kill-buffer-and-window" function
               (:documentation "Kill the current buffer and delete the selected window."
                :user-visible-flag t)
                nil [352724 353546])
            ("window-group-start-function" variable nil nil [353966 354006])
            ("make-variable-buffer-local" code nil nil [354007 354064])
            ("put" code nil nil [354065 354118])
            ("window-group-start" function
               (:documentation "Return position at which display currently starts in the group of
windows containing WINDOW.  When a grouping mode (such as Follow Mode)
is not active, this function is identical to `window-start'.

WINDOW must be a live window and defaults to the selected one.
This is updated by redisplay or by calling `set-window*-start'."
                :arguments ("window"))
                nil [354119 354618])
            ("window-group-end-function" variable nil nil [354620 354658])
            ("make-variable-buffer-local" code nil nil [354659 354714])
            ("put" code nil nil [354715 354766])
            ("window-group-end" function
               (:documentation "Return position at which display currently ends in the group of
windows containing WINDOW.  When a grouping mode (such as Follow Mode)
is not active, this function is identical to `window-end'.

WINDOW must be a live window and defaults to the selected one.
This is updated by redisplay, when it runs to completion.
Simply changing the buffer text or setting `window-group-start'
does not update this value.
Return nil if there is no recorded value.  (This can happen if the
last redisplay of WINDOW was preempted, and did not finish.)
If UPDATE is non-nil, compute the up-to-date position
if it isn't already recorded."
                :arguments ("window" "update"))
                nil [354767 355573])
            ("set-window-group-start-function" variable nil nil [355575 355619])
            ("make-variable-buffer-local" code nil nil [355620 355681])
            ("put" code nil nil [355682 355739])
            ("set-window-group-start" function
               (:documentation "Make display in the group of windows containing WINDOW start at
position POS in WINDOW's buffer.  When a grouping mode (such as Follow
Mode) is not active, this function is identical to `set-window-start'.

WINDOW must be a live window and defaults to the selected one.  Return
POS.  Optional third arg NOFORCE non-nil inhibits next redisplay from
overriding motion of point in order to display at this exact start."
                :arguments ("window" "pos" "noforce"))
                nil [355740 356381])
            ("recenter-window-group-function" variable nil nil [356383 356426])
            ("make-variable-buffer-local" code nil nil [356427 356487])
            ("put" code nil nil [356488 356544])
            ("recenter-window-group" function
               (:documentation "Center point in the group of windows containing the selected window
and maybe redisplay frame.  When a grouping mode (such as Follow Mode)
is not active, this function is identical to `recenter'.

With a numeric prefix argument ARG, recenter putting point on screen line ARG
relative to the first window in the selected window group.  If ARG is
negative, it counts up from the bottom of the last window in the
group.  (ARG should be less than the total height of the window group.)

If ARG is omitted or nil, then recenter with point on the middle line of
the selected window group; if the variable `recenter-redisplay' is
non-nil, also erase the entire frame and redraw it (when
`auto-resize-tool-bars' is set to `grow-only', this resets the
tool-bar's height to the minimum height needed); if
`recenter-redisplay' has the special value `tty', then only tty frames
are redrawn.

Just C-u as prefix means put point in the center of the window
and redisplay normally--don't erase and redraw the frame."
                :arguments ("arg"))
                nil [356545 357715])
            ("pos-visible-in-window-group-p-function" variable nil nil [357717 357768])
            ("make-variable-buffer-local" code nil nil [357769 357837])
            ("put" code nil nil [357838 357902])
            ("pos-visible-in-window-group-p" function
               (:documentation "Return non-nil if position POS is currently on the frame in the
window group containing WINDOW.  When a grouping mode (such as Follow
Mode) is not active, this function is identical to
`pos-visible-in-window-p'.

WINDOW must be a live window and defaults to the selected one.

Return nil if that position is scrolled vertically out of view.  If a
character is only partially visible, nil is returned, unless the
optional argument PARTIALLY is non-nil.  If POS is only out of view
because of horizontal scrolling, return non-nil.  If POS is t, it
specifies the position of the last visible glyph in the window group.
POS defaults to point in WINDOW; WINDOW defaults to the selected
window.

If POS is visible, return t if PARTIALLY is nil; if PARTIALLY is non-nil,
the return value is a list of 2 or 6 elements (X Y [RTOP RBOT ROWH VPOS]),
where X and Y are the pixel coordinates relative to the top left corner
of the window.  The remaining elements are omitted if the character after
POS is fully visible; otherwise, RTOP and RBOT are the number of pixels
off-window at the top and bottom of the screen line (\"row\") containing
POS, ROWH is the visible height of that row, and VPOS is the row number
(zero-based)."
                :arguments ("pos" "window" "partially"))
                nil [357903 359379])
            ("selected-window-group-function" variable nil nil [359381 359424])
            ("make-variable-buffer-local" code nil nil [359425 359485])
            ("put" code nil nil [359486 359542])
            ("selected-window-group" function (:documentation "Return the list of windows in the group containing the selected window.
When a grouping mode (such as Follow Mode) is not active, the
result is a list containing only the selected window.") nil [359543 359893])
            ("move-to-window-group-line-function" variable nil nil [359895 359942])
            ("make-variable-buffer-local" code nil nil [359943 360007])
            ("put" code nil nil [360008 360068])
            ("move-to-window-group-line" function
               (:documentation "Position point relative to the current group of windows.
When a grouping mode (such as Follow Mode) is not active, this
function is identical to `move-to-window-line'.

ARG nil means position point at center of the window group.
Else, ARG specifies the vertical position within the window
group; zero means top of first window in the group, negative
means relative to the bottom of the last window in the group."
                :arguments ("arg"))
                nil [360069 360663])
            ("recenter-last-op" variable (:documentation "Indicates the last recenter operation performed.
Possible values: `top', `middle', `bottom', integer or float numbers.
It can also be nil, which means the first value in `recenter-positions'.") nil [360667 360892])
            ("recenter-positions" variable
               (:documentation "Cycling order for `recenter-top-bottom'.
A list of elements with possible values `top', `middle', `bottom',
integer or float numbers that define the cycling order for
the command `recenter-top-bottom'.

Top and bottom destinations are `scroll-margin' lines from the true
window top and bottom.  Middle redraws the frame and centers point
vertically within the window.  Integer number moves current line to
the specified absolute window-line.  Float number between 0.0 and 1.0
means the percentage of the screen space from the top.  The default
cycling order is middle -> top -> bottom."
                :default-value '(middle top bottom))
                nil [360894 361754])
            ("recenter-top-bottom" function
               (:documentation "Move current buffer line to the specified window line.
With no prefix argument, successive calls place point according
to the cycling order defined by `recenter-positions'.

A prefix argument is handled like `recenter':
 With numeric prefix ARG, move current line to window-line ARG.
 With plain `C-u', move current line to window center."
                :user-visible-flag t
                :arguments ("arg"))
                nil [361756 362933])
            ("define-key" code nil nil [362935 362987])
            ("move-to-window-line-top-bottom" function
               (:documentation "Position point relative to window.

With a prefix argument ARG, acts like `move-to-window-line'.

With no argument, positions point at center of window.
Successive calls position point at positions defined
by `recenter-positions'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [362989 364123])
            ("define-key" code nil nil [364125 364188])
            ("scroll-error-top-bottom" variable (:documentation "Move point to top/bottom of buffer before signaling a scrolling error.
A value of nil means just signal an error if no more scrolling possible.
A value of t means point moves to the beginning or the end of the buffer
(depending on scrolling direction) when no more scrolling possible.
When point is already on that position, then signal an error.") nil [364358 364802])
            ("scroll-up-command" function
               (:documentation "Scroll text of selected window upward ARG lines; or near full screen if no ARG.
If `scroll-error-top-bottom' is non-nil and `scroll-up' cannot
scroll window further, move cursor to the bottom line.
When point is already on that position, then signal an error.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative ARG means scroll downward.
If ARG is the atom `-', scroll downward by nearly full screen."
                :user-visible-flag t
                :arguments ("arg"))
                nil [364804 365867])
            ("put" code nil nil [365869 365911])
            ("scroll-down-command" function
               (:documentation "Scroll text of selected window down ARG lines; or near full screen if no ARG.
If `scroll-error-top-bottom' is non-nil and `scroll-down' cannot
scroll window further, move cursor to the top line.
When point is already on that position, then signal an error.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative ARG means scroll upward.
If ARG is the atom `-', scroll upward by nearly full screen."
                :user-visible-flag t
                :arguments ("arg"))
                nil [365913 366980])
            ("put" code nil nil [366982 367026])
            ("scroll-up-line" function
               (:documentation "Scroll text of selected window upward ARG lines; or one line if no ARG.
If ARG is omitted or nil, scroll upward by one line.
This is different from `scroll-up-command' that scrolls a full screen."
                :user-visible-flag t
                :arguments ("arg"))
                nil [367096 367379])
            ("put" code nil nil [367381 367420])
            ("scroll-down-line" function
               (:documentation "Scroll text of selected window down ARG lines; or one line if no ARG.
If ARG is omitted or nil, scroll down by one line.
This is different from `scroll-down-command' that scrolls a full screen."
                :user-visible-flag t
                :arguments ("arg"))
                nil [367422 367707])
            ("put" code nil nil [367709 367750])
            ("beginning-of-buffer-other-window" function
               (:documentation "Move point to the beginning of the buffer in the other window.
Leave mark at previous position.
With arg N, put point N/10 of the way from the true beginning."
                :user-visible-flag t
                :arguments ("arg"))
                nil [367754 368193])
            ("end-of-buffer-other-window" function
               (:documentation "Move point to the end of the buffer in the other window.
Leave mark at previous position.
With arg N, put point N/10 of the way from the true end."
                :user-visible-flag t
                :arguments ("arg"))
                nil [368195 368585])
            ("mouse-autoselect-window-timer" variable (:documentation "Timer used by delayed window autoselection.") nil [368588 368678])
            ("mouse-autoselect-window-position-1" variable (:documentation "First mouse position recorded by delayed window autoselection.") nil [368680 368794])
            ("mouse-autoselect-window-position" variable (:documentation "Last mouse position recorded by delayed window autoselection.") nil [368796 368907])
            ("mouse-autoselect-window-window" variable (:documentation "Last window recorded by delayed window autoselection.") nil [368909 369010])
            ("mouse-autoselect-window-state" variable (:documentation "When non-nil, special state of delayed window autoselection.
Possible values are `suspend' (suspend autoselection after a menu or
scrollbar interaction) and `select' (the next invocation of
`handle-select-window' shall select the window immediately).") nil [369012 369309])
            ("mouse-autoselect-window-cancel" function
               (:documentation "Cancel delayed window autoselection.
Optional argument FORCE means cancel unconditionally."
                :arguments ("force"))
                nil [369311 370082])
            ("mouse-autoselect-window-start" function
               (:documentation "Start delayed window autoselection.
MOUSE-POSITION is the last position where the mouse was seen as returned
by `mouse-position'.  Optional argument WINDOW non-nil denotes the
window where the mouse was seen.  Optional argument SUSPEND non-nil
means suspend autoselection."
                :arguments ("mouse-position" "window" "suspend"))
                nil [370084 370912])
            ("mouse-autoselect-window-select" function (:documentation "Select window with delayed window autoselection.
If the mouse position has stabilized in a non-selected window, select
that window.  The minibuffer window is selected only if the minibuffer
is active.  This function is run by `mouse-autoselect-window-timer'.") nil [370914 374914])
            ("handle-select-window" function
               (:documentation "Handle select-window events."
                :user-visible-flag t
                :arguments ("event"))
                nil [374916 377426])
            ("truncated-partial-width-window-p" function
               (:documentation "Return non-nil if lines in WINDOW are specifically truncated due to its width.
WINDOW must be a live window and defaults to the selected one.
Return nil if WINDOW is not a partial-width window
 (regardless of the value of `truncate-lines').
Otherwise, consult the value of `truncate-partial-width-windows'
 for the buffer shown in WINDOW."
                :arguments ("window"))
                nil [377428 378113])
            ("window-adjust-process-window-size-function" variable
               (:documentation "Control how Emacs chooses inferior process window sizes.
Emacs uses this function to tell processes the space they have
available for displaying their output.  After each window
configuration change, Emacs calls the value of
`window-adjust-process-window-size-function' for each process
with a buffer being displayed in at least one window.
This function is responsible for combining the sizes of the
displayed windows and returning a cons (WIDTH . HEIGHT)
describing the width and height with which Emacs will call
`set-process-window-size' for that process.  If the function
returns nil, Emacs does not call `set-process-window-size'.

This function is called with the process buffer as the current
buffer and with two arguments: the process and a list of windows
displaying process.  Modes can make this variable buffer-local;
additionally, the `adjust-window-size-function' process property
overrides the global or buffer-local value of
`window-adjust-process-window-size-function'."
                :default-value 'window-adjust-process-window-size-smallest)
                nil [378182 379624])
            ("window-adjust-process-window-size" function
               (:documentation "Adjust the window sizes of a process.
WINDOWS is a list of windows associated with that process.  REDUCER is
a two-argument function used to combine the widths and heights of
the given windows."
                :arguments ("reducer" "windows"))
                nil [379626 380235])
            ("window-adjust-process-window-size-smallest" function
               (:documentation "Adjust the process window size of PROCESS.
WINDOWS is a list of windows associated with PROCESS.  Choose the
smallest area available for displaying PROCESS's output."
                :arguments ("_process" "windows"))
                nil [380237 380528])
            ("window-adjust-process-window-size-largest" function
               (:documentation "Adjust the process window size of PROCESS.
WINDOWS is a list of windows associated with PROCESS.  Choose the
largest area available for displaying PROCESS's output."
                :arguments ("_process" "windows"))
                nil [380530 380819])
            ("window--process-window-list" function (:documentation "Return an alist mapping processes to associated windows.
A window is associated with a process if that window is
displaying that processes's buffer.") nil [380821 382034])
            ("window--adjust-process-windows" function (:documentation "Update process window sizes to match the current window configuration.") nil [382036 382732])
            ("add-hook" code nil nil [382734 382810])
            ("define-key" code nil nil [382901 382942])
            ("define-key" code nil nil [382943 382991])
            ("define-key" code nil nil [382992 383038])
            ("define-key" code nil nil [383039 383085])
            ("define-key" code nil nil [383086 383126])
            ("define-key" code nil nil [383127 383169])
            ("define-key" code nil nil [383170 383225])
            ("define-key" code nil nil [383226 383280])
            ("define-key" code nil nil [383281 383344])
            ("define-key" code nil nil [383345 383388])
            ("define-key" code nil nil [383389 383441]))          
      :file "window.el.gz"
      :pointmax 383467
      :fsize 84147
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18896d4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [2132 2152])
            ("forward-thing" function
               (:documentation "Move forward to the end of the Nth next THING.
THING should be a symbol specifying a type of syntactic entity.
Possibilities include `symbol', `list', `sexp', `defun',
`filename', `url', `email', `uuid', `word', `sentence', `whitespace',
`line', and `page'."
                :arguments ("thing" "n"))
                nil [2188 2711])
            ("bounds-of-thing-at-point" function
               (:documentation "Determine the start and end buffer locations for the THING at point.
THING should be a symbol specifying a type of syntactic entity.
Possibilities include `symbol', `list', `sexp', `defun',
`filename', `url', `email', `uuid', `word', `sentence', `whitespace',
`line', and `page'.

See the file `thingatpt.el' for documentation on how to define a
valid THING.

Return a cons cell (START . END) giving the start and end
positions of the thing found."
                :arguments ("thing"))
                nil [2749 4791])
            ("thing-at-point" function
               (:documentation "Return the THING at point.
THING should be a symbol specifying a type of syntactic entity.
Possibilities include `symbol', `list', `sexp', `defun',
`filename', `url', `email', `uuid', `word', `sentence', `whitespace',
`line', `number', and `page'.

When the optional argument NO-PROPERTIES is non-nil,
strip text properties from the return value.

See the file `thingatpt.el' for documentation on how to define
a symbol as a valid THING."
                :arguments ("thing" "no-properties"))
                nil [4808 5677])
            ("beginning-of-thing" function
               (:documentation "Move point to the beginning of THING.
The bounds of THING are determined by `bounds-of-thing-at-point'."
                :arguments ("thing"))
                nil [5703 5969])
            ("end-of-thing" function
               (:documentation "Move point to the end of THING.
The bounds of THING are determined by `bounds-of-thing-at-point'."
                :arguments ("thing"))
                nil [5971 6225])
            ("put" code nil nil [6358 6450])
            ("in-string-p" function (:documentation "Return non-nil if point is in a string.") nil [6463 6717])
            ("thing-at-point--end-of-sexp" function (:documentation "Move point to the end of the current sexp.") nil [6719 6981])
            ("define-obsolete-function-alias" code nil nil [6983 7133])
            ("put" code nil nil [7135 7183])
            ("thing-at-point--beginning-of-sexp" function (:documentation "Move point to the beginning of the current sexp.") nil [7185 7466])
            ("define-obsolete-function-alias" code nil nil [7468 7630])
            ("put" code nil nil [7632 7692])
            ("put" code nil nil [7705 7782])
            ("thing-at-point-bounds-of-list-at-point" function (:documentation "Return the bounds of the list at point.
Prefer the enclosing list with fallback on sexp at point.
[Internal function used by `bounds-of-thing-at-point'.]") nil [7784 8247])
            ("put" code nil nil [8260 8306])
            ("put" code nil nil [8307 8347])
            ("put" code nil nil [8348 8388])
            ("define-thing-chars" function
               (:documentation "Define THING as a sequence of CHARS.
E.g.:
(define-thing-chars twitter-screen-name \"[:alnum:]_\")"
                :arguments ("thing" "chars"))
                nil [8431 8883])
            ("thing-at-point-file-name-chars" variable
               (:documentation "Characters allowable in filenames."
                :default-value "-~/[:alnum:]_.${}#%,:")
                nil [8900 9002])
            ("define-thing-chars" code nil nil [9004 9064])
            ("thing-at-point-beginning-of-url-regexp" variable (:documentation "Regexp matching the beginning of a well-formed URI.
If nil, construct the regexp from `thing-at-point-uri-schemes'.") nil [9076 9247])
            ("thing-at-point-url-path-regexp" variable
               (:documentation "Regexp matching the host and filename or e-mail part of a URL."
                :default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+")
                nil [9249 9403])
            ("thing-at-point-short-url-regexp" variable
               (:documentation "Regexp matching a URI without a scheme component."
                :default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp))
                nil [9405 9574])
            ("thing-at-point-uri-schemes" variable
               (:documentation "List of URI schemes recognized by `thing-at-point-url-at-point'.
Each string in this list should correspond to the start of a
URI's scheme component, up to and including the trailing // if
the scheme calls for that to be present."
                :default-value '("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))
                nil [9576 10930])
            ("thing-at-point-markedup-url-regexp" variable
               (:documentation "Regexp matching a URL marked up per RFC1738.
This kind of markup was formerly recommended as a way to indicate
URIs, but as of RFC 3986 it is no longer recommended.
Subexpression 1 should contain the delimited URL."
                :default-value "<URL:\\([^<>
]+\\)>")
                nil [10932 11217])
            ("thing-at-point-newsgroup-regexp" variable
               (:documentation "Regexp matching a newsgroup name."
                :default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'")
                nil [11219 11342])
            ("thing-at-point-newsgroup-heads" variable
               (:documentation "Used by `thing-at-point-newsgroup-p' if gnus is not running."
                :default-value '("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))
                nil [11344 11505])
            ("thing-at-point-default-mail-uri-scheme" variable
               (:documentation "Default scheme for ill-formed URIs that look like <foo@example.com>.
If nil, do not give such URIs a scheme."
                :default-value "mailto")
                nil [11507 11676])
            ("put" code nil nil [11678 11753])
            ("thing-at-point-bounds-of-url-at-point" function
               (:documentation "Return a cons cell containing the start and end of the URI at point.
Try to find a URI using `thing-at-point-markedup-url-regexp'.
If that fails, try with `thing-at-point-beginning-of-url-regexp'.
If that also fails, and optional argument LAX is non-nil, return
the bounds of a possible ill-formed URI (one lacking a scheme)."
                :arguments ("lax"))
                nil [11755 12956])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12958 13467])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [13469 14923])
            ("put" code nil nil [14925 14980])
            ("thing-at-point-url-at-point" function
               (:documentation "Return the URL around or before point.
If no URL is found, return nil.

If optional argument LAX is non-nil, look for URLs that are not
well-formed, such as foo@bar or <nobody>.

If optional arguments BOUNDS are non-nil, it should be a cons
cell of the form (START . END), containing the beginning and end
positions of the URI.  Otherwise, these positions are detected
automatically from the text around point.

If the scheme component is absent, either because a URI delimited
with <url:...> lacks one, or because an ill-formed URI was found
with LAX or BEG and END, try to add a scheme in the returned URI.
The scheme is chosen heuristically: \"mailto:\" if the address
looks like an email address, \"ftp://\" if it starts with
\"ftp\", etc."
                :arguments ("lax" "bounds"))
                nil [14982 17416])
            ("thing-at-point-newsgroup-p" function
               (:documentation "Return STRING if it looks like a newsgroup name, else nil."
                :arguments ("string"))
                nil [17418 18311])
            ("put" code nil nil [18313 18363])
            ("put" code nil nil [18365 18427])
            ("thing-at-point-looking-at" function
               (:documentation "Return non-nil if point is in or just after a match for REGEXP.
Set the match data from the earliest such match ending at or after
point.

Optional argument DISTANCE limits search for REGEXP forward and
back from point."
                :arguments ("regexp" "distance"))
                nil [18832 20353])
            ("thing-at-point-email-regexp" variable
               (:documentation "A regular expression probably matching an email address.
This does not match the real name portion, only the address, optionally
with angle brackets."
                :default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?")
                nil [20376 20621])
            ("put" code nil nil [20864 21157])
            ("put" code nil nil [21159 21397])
            ("put" code nil nil [21411 21468])
            ("put" code nil nil [21469 21532])
            ("thing-at-point-uuid-regexp" variable
               (:documentation "A regular expression matching a UUID.
See RFC 4122 for the description of the format."
                :constant-flag t
                :default-value (rx bow (repeat 8 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 12 hex-digit) eow))
                nil [21543 21843])
            ("put" code nil nil [21845 22021])
            ("word-at-point" function (:documentation "Return the word at point.  See `thing-at-point'.") nil [22036 22138])
            ("sentence-at-point" function (:documentation "Return the sentence at point.  See `thing-at-point'.") nil [22140 22254])
            ("thing-at-point--read-from-whole-string" function
               (:documentation "Read a Lisp expression from STR.
Signal an error if the entire string was not used."
                :arguments ("str"))
                nil [22256 22725])
            ("define-obsolete-function-alias" code nil nil [22727 22899])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [22901 23203])
            ("sexp-at-point" function (:documentation "Return the sexp at point, or nil if none is found.") nil [23220 23323])
            ("symbol-at-point" function (:documentation "Return the symbol at point, or nil if none is found.") nil [23339 23495])
            ("number-at-point" function (:documentation "Return the number at point, or nil if none is found.") nil [23511 23737])
            ("put" code nil nil [23739 23785])
            ("list-at-point" function
               (:documentation "Return the Lisp list at point, or nil if none is found.
If IGNORE-COMMENT-OR-STRING is non-nil comments and strings are
treated as white space."
                :arguments ("ignore-comment-or-string"))
                nil [23801 24169]))          
      :file "thingatpt.el.gz"
      :pointmax 24198
      :fsize 7802
      :lastmodtime '(23454 65441 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889a14"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable (:documentation "Non-nil once command line has been processed.") nil [1170 1255])
            ("initialization" customgroup
               (:documentation "Emacs start-up procedure."
                :user-visible-flag t)
                nil [1257 1338])
            ("initial-buffer-choice" variable (:documentation "Buffer to show after starting Emacs.
If the value is nil and `inhibit-startup-screen' is nil, show the
startup screen.  If the value is a string, switch to a buffer
visiting the file or directory that the string specifies.  If the
value is a function, call it with no arguments and switch to the buffer
that it returns.  If t, open the `*scratch*' buffer.

When `initial-buffer-choice' is non-nil, the startup screen is
inhibited.

If you use `emacsclient' with no target file, then it obeys any
string or function value that this variable has.") nil [1340 2311])
            ("defvaralias" code nil nil [2313 2373])
            ("defvaralias" code nil nil [2374 2436])
            ("inhibit-startup-screen" variable (:documentation "Non-nil inhibits the startup screen.

This is for use in your personal init file (but NOT site-start.el),
once you are familiar with the contents of the startup screen.") nil [2438 2691])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2693 2743])
            ("inhibit-startup-echo-area-message" variable (:documentation "Non-nil inhibits the initial startup echo area message.

The startup message is in the echo area as it provides information
about GNU Emacs and the GNU system in general, which we want all
users to see.  As this is the least intrusive startup message,
this variable gets specialized treatment to prevent the message
from being disabled site-wide by systems administrators, while
still allowing individual users to do so.

Setting this variable takes effect only if you do it with the
customization buffer or if your init file contains a line of this
form:
 (setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\")
If your init file is byte-compiled, use the following form
instead:
 (eval \\='(setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\"))
Thus, someone else using a copy of your init file will see the
startup message unless he personally acts to inhibit it.") nil [3043 4097])
            ("inhibit-default-init" variable (:documentation "Non-nil inhibits loading the `default' library.") nil [4099 4229])
            ("inhibit-startup-buffer-menu" variable (:documentation "Non-nil inhibits display of buffer list when more than 2 files are loaded.") nil [4231 4395])
            ("command-switch-alist" variable (:documentation "Alist of command-line switches.
Elements look like (SWITCH-STRING . HANDLER-FUNCTION).
HANDLER-FUNCTION receives the switch string as its sole argument;
the remaining command-line args are in the variable `command-line-args-left'.") nil [4397 4665])
            ("with-no-warnings" code nil nil [4667 4924])
            ("internal-make-var-non-special" code nil nil [4925 4962])
            ("command-line-args-left" variable (:documentation "List of command-line args not yet processed.") nil [4964 5048])
            ("with-no-warnings" code nil nil [5050 5125])
            ("internal-make-var-non-special" code nil nil [5126 5163])
            ("command-line-functions" variable (:documentation "List of functions to process unrecognized command-line arguments.
Each function should access the dynamically bound variables
`argi' (the current argument) and `command-line-args-left' (the remaining
arguments).  The function should return non-nil only if it recognizes and
processes `argi'.  If it does so, it may consume successive arguments by
altering `command-line-args-left' to remove them.") nil [5165 5619])
            ("command-line-default-directory" variable (:documentation "Default directory to use for command line arguments.
This is normally copied from `default-directory' when Emacs starts.") nil [5621 5789])
            ("command-line-x-option-alist" variable
               (:documentation "Alist of X Windows options.
Each element has the form
  (NAME NUMARGS HANDLER FRAME-PARAM VALUE)
where NAME is the option name string, NUMARGS is the number of arguments
that the option accepts, HANDLER is a function to call to handle the option.
FRAME-PARAM (optional) is the frame parameter this option specifies,
and VALUE is the value which is given to that frame parameter
(most options use the argument for this, so VALUE is not present)."
                :constant-flag t
                :default-value '(("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id)))
                nil [5897 9081])
            ("command-line-ns-option-alist" variable
               (:documentation "Alist of NS options.
Each element has the form
  (NAME NUMARGS HANDLER FRAME-PARAM VALUE)
where NAME is the option name string, NUMARGS is the number of arguments
that the option accepts, HANDLER is a function to call to handle the option.
FRAME-PARAM (optional) is the frame parameter this option specifies,
and VALUE is the value which is given to that frame parameter
(most options use the argument for this, so VALUE is not present)."
                :constant-flag t
                :default-value '(("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width)))
                nil [9083 12035])
            ("before-init-hook" variable (:documentation "Normal hook run after handling urgent options but before loading init files.") nil [12038 12148])
            ("after-init-hook" variable (:documentation "Normal hook run after initializing the Emacs session.
It is run after Emacs loads the init file, `default' library, the
abbrevs file, and additional Lisp packages (if any), and setting
the value of `after-init-time'.

There is no `condition-case' around the running of this hook;
therefore, if `debug-on-error' is non-nil, an error in one of
these functions will invoke the debugger.") nil [12150 12566])
            ("emacs-startup-hook" variable (:documentation "Normal hook run after loading init files and handling the command line.") nil [12568 12675])
            ("term-setup-hook" variable (:documentation "Normal hook run immediately after `emacs-startup-hook'.
In new code, there is no reason to use this instead of `emacs-startup-hook'.
If you want to execute terminal-specific Lisp code, for example
to override the definitions made by the terminal-specific file,
see `tty-setup-hook'.") nil [12677 12992])
            ("make-obsolete-variable" code nil nil [12994 13110])
            ("inhibit-startup-hooks" variable (:documentation "Non-nil means don't run some startup hooks, because we already did.
Currently this applies to: `emacs-startup-hook', `term-setup-hook',
and `window-setup-hook'.") nil [13112 13311])
            ("early-init-file" variable (:documentation "File name, including directory, of user's early init file.
See `user-init-file'.  The only difference is that
`early-init-file' is not set during the course of evaluating the
early init file.") nil [13313 13537])
            ("keyboard-type" variable (:documentation "The brand of keyboard you are using.
This variable is used to define the proper function and keypad
keys for use under X.  It is used in a fashion analogous to the
environment variable TERM.") nil [13539 13760])
            ("window-setup-hook" variable (:documentation "Normal hook run after loading init files and handling the command line.
This is very similar to `emacs-startup-hook'.  The only difference
is that this hook runs after frame parameters have been set up in
response to any settings from your init file.  Unless this matters
to you, use `emacs-startup-hook' instead.  (The name of this hook
is due to historical reasons, and does not reflect its purpose very well.)") nil [13762 14209])
            ("initial-major-mode" variable
               (:documentation "Major mode command symbol to use for the initial `*scratch*' buffer."
                :default-value 'lisp-interaction-mode)
                nil [14211 14380])
            ("init-file-user" variable (:documentation "Identity of user whose init file is or was read.
The value is nil if `-q' or `--no-init-file' was specified,
meaning do not load any init file.

Otherwise, the value may be an empty string, meaning
use the init file for the user who originally logged in,
or it may be a string containing a user's name meaning
use that person's init file.

In either of the latter cases, `(concat \"~\" init-file-user \"/\")'
evaluates to the name of the directory where the init file was
looked for.

Setting `init-file-user' does not prevent Emacs from loading
`site-start.el'.  The only way to do that is to use `--no-site-file'.") nil [14382 15029])
            ("site-run-file" variable
               (:documentation "File containing site-wide run-time initializations.
This file is loaded at run-time before `~/.emacs'.  It contains inits
that need to be in place for the entire site, but which, due to their
higher incidence of change, don't make sense to load into Emacs's
dumped image.  Thus, the run-time load order is: 1. file described in
this variable, if non-nil; 2. `~/.emacs'; 3. `default.el'.

Don't use the `site-start.el' file for things some users may not like.
Put them in `default.el' instead, so that users can more easily
override them.  Users can prevent loading `default.el' with the `-q'
option or by setting `inhibit-default-init' in their own init files,
but inhibiting `site-start.el' requires `--no-site-file', which
is less convenient.

This variable is defined for customization so as to make
it visible in the relevant context.  However, actually customizing it
is not allowed, since it would not work anyway.  The only way to set
this variable usefully is to set it while building and dumping Emacs."
                :default-value (purecopy "site-start"))
                nil [15031 16302])
            ("make-obsolete-variable" code nil nil [16304 16376])
            ("mail-host-address" variable (:documentation "The name of this machine, for use in constructing email addresses.
If this is nil, Emacs uses `system-name'.") nil [16378 16576])
            ("user-mail-address" variable
               (:documentation "The email address of the current user.
This defaults to either: the value of EMAIL environment variable; or
user@host, using `user-login-name' and `mail-host-address' (or `system-name')."
                :default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))))
                nil [16578 17000])
            ("auto-save-list-file-prefix" variable
               (:documentation "Prefix for generating `auto-save-list-file-name'.
This is used after reading your init file to initialize
`auto-save-list-file-name', by appending Emacs's pid and the system name,
if you have not already set `auto-save-list-file-name' yourself.
Directories in the prefix will be created if necessary.
Set this to nil if you want to prevent `auto-save-list-file-name'
from being initialized."
                :default-value (cond ((eq system-type 'ms-dos) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-"))))
                nil [17002 17755])
            ("emacs-basic-display" variable nil nil [17757 17789])
            ("init-file-debug" variable nil nil [17791 17819])
            ("init-file-had-error" variable (:documentation "Non-nil if there was an error loading the user's init file.") nil [17821 17917])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17919 17971])
            ("no-blinking-cursor" variable nil nil [17973 18004])
            ("pure-space-overflow" variable (:documentation "Non-nil if building Emacs overflowed pure space.") nil [18006 18091])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [18093 18269])
            ("tutorial-directory" variable
               (:documentation "Directory containing the Emacs TUTORIAL files."
                :default-value (file-name-as-directory (expand-file-name "tutorials" data-directory)))
                nil [18271 18507])
            ("normal-top-level-add-subdirs-to-load-path" function (:documentation "Recursively add all subdirectories of `default-directory' to `load-path'.
More precisely, this uses only the subdirectories whose names
start with letters or digits; it excludes any subdirectory named `RCS'
or `CVS', and any subdirectory that contains a file named `.nosearch'.") nil [18509 20261])
            ("normal-top-level-add-to-load-path" function
               (:documentation "This function is called from a subdirs.el file.
It assumes that `default-directory' is the directory in which the
subdirs.el file exists, and it adds to `load-path' the subdirs of
that directory as specified in DIRS.  Normally the elements of
DIRS are relative."
                :arguments ("dirs"))
                nil [20263 21032])
            ("normal-top-level" function (:documentation "Emacs calls this function when it first starts up.
It sets `command-line-processed', processes the command-line,
reads the initialization files, etc.
It is the default value of the variable `top-level'.") nil [21034 31392])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value '(("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color")))
                nil [31500 31726])
            ("tool-bar-images-pixel-height" variable
               (:documentation "Height in pixels of images in the tool-bar."
                :constant-flag t
                :default-value 24)
                nil [31728 31818])
            ("cl-defgeneric" code nil nil [31820 32161])
            ("cl-defmethod" code nil nil [32162 32258])
            ("cl-defgeneric" code nil nil [32260 32598])
            ("tty-handle-args" function
               (:documentation "Handle the X-like command-line arguments \"-fg\", \"-bg\", \"-name\", etc."
                :arguments ("args"))
                nil [32600 35361])
            ("declare-function" code nil nil [35363 35457])
            ("declare-function" code nil nil [35458 35517])
            ("declare-function" code nil nil [35518 35562])
            ("server-name" variable nil nil [35564 35584])
            ("server-process" variable nil nil [35585 35608])
            ("startup--setup-quote-display" function
               (:documentation "If needed, display ASCII approximations to curved quotes.
Do this by modifying `standard-display-table'.  Optional STYLE
specifies the desired quoting style, as in `text-quoting-style'.
If STYLE is nil, display appropriately for the terminal."
                :arguments ("style"))
                nil [35610 38585])
            ("load-user-init-file" function
               (:documentation "Load a user init-file.
FILENAME-FUNCTION is called with no arguments and should return
the name of the init-file to load.  If this file cannot be
loaded, and ALTERNATE-FILENAME-FUNCTION is non-nil, then it is
called with no arguments and should return the name of an
alternate init-file to load.  If LOAD-DEFAULTS is non-nil, then
load default.el after the init-file.

This function sets `user-init-file' to the name of the loaded
init-file, or to a default value if loading is not possible."
                :arguments ("filename-function" "alternate-filename-function" "load-defaults"))
                nil [38587 42395])
            ("command-line" function (:documentation "A subroutine of `normal-top-level'.
Amongst another things, it parses the command-line arguments.") nil [42397 61321])
            ("x-apply-session-resources" function (:documentation "Apply X resources which specify initial values for Emacs variables.
This is called from a window-system initialization function, such
as `x-initialize-window-system' for X, either at startup (prior
to reading the init file), or afterwards when the user first
opens a graphical frame.

This can set the values of `menu-bar-mode', `tool-bar-mode', and
`no-blinking-cursor', as well as the `cursor' face.  Changed
settings will be marked as \"CHANGED outside of Customize\".") nil [61323 62402])
            ("initial-scratch-message" variable
               (:documentation "Initial documentation displayed in *scratch* buffer at startup.
If this is nil, no message will be displayed."
                :default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

"))
                nil [62404 62812])
            ("fancy-startup-text" variable
               (:documentation "A list of texts to show in the middle part of splash screens.
Each element in the list should be a list of strings or pairs
`:face FACE', like `fancy-splash-insert' accepts them."
                :constant-flag t
                :default-value `((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" ,(lambda (_button) (browse-url "https://www.gnu.org/software/emacs/")) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link ,(lambda nil (if (eq system-type 'gnu/linux) `("GNU/Linux" ,(lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html")) "Browse https://www.gnu.org/gnu/linux-and-gnu.html") `("GNU" ,(lambda (_button) (browse-url "https://www.gnu.org/gnu/thegnuproject.html")) "Browse https://www.gnu.org/gnu/thegnuproject.html"))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" ,(lambda (_button) (help-with-tutorial))) "	Learn basic keystroke commands" ,(lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment 'tutorial) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")")))) "
" :link ("Emacs Guided Tour" ,(lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/")) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" ,(lambda (_button) (info-emacs-manual))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" ,(lambda (_button) (describe-no-warranty))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" ,(lambda (_button) (describe-copying))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" ,(lambda (_button) (view-order-manuals))) "	Purchasing printed copies of manuals
" "
")))
                nil [62987 65771])
            ("fancy-about-text" variable
               (:documentation "A list of texts to show in the middle part of the About screen.
Each element in the list should be a list of strings or pairs
`:face FACE', like `fancy-splash-insert' accepts them."
                :constant-flag t
                :default-value `((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" ,(lambda (_button) (browse-url "https://www.gnu.org/software/emacs/")) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link ,(lambda nil (if (eq system-type 'gnu/linux) `("GNU/Linux" ,(lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html")) "Browse https://www.gnu.org/gnu/linux-and-gnu.html") `("GNU" ,(lambda (_button) (describe-gnu-project)) "Display info on the GNU project."))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" ,(lambda nil (emacs-version)) "
" :face (variable-pitch (:height 0.8)) ,(lambda nil emacs-copyright) "

" :face variable-pitch :link ("Authors" ,(lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min)))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" ,(lambda (_button) (info "(emacs)Contributing"))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" ,(lambda (_button) (describe-gnu-project))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" ,(lambda (_button) (describe-no-warranty))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" ,(lambda (_button) (describe-copying))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" ,(lambda (_button) (describe-distribution))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" ,(lambda (_button) (view-order-manuals))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" ,(lambda (_button) (help-with-tutorial))) "	Learn basic Emacs keystroke commands" ,(lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment 'tutorial) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")")))) "
" :link ("Emacs Guided Tour" ,(lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/")) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org")))
                nil [65773 68931])
            ("fancy-splash-screen" customgroup
               (:documentation "Fancy splash screen when Emacs starts."
                :user-visible-flag t)
                nil [68934 69053])
            ("fancy-splash-image" variable (:documentation "The image to show in the splash screens, or nil for defaults.") nil [69055 69252])
            ("splash-screen-keymap" variable
               (:documentation "Keymap for splash screen buffer."
                :default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" 'scroll-down-command) (define-key map [33554464] 'scroll-down-command) (define-key map " " 'scroll-up-command) (define-key map "q" 'exit-splash-screen) map))
                nil [69255 69627])
            ("fancy-splash-insert" function
               (:documentation "Insert text into the current buffer, with faces.
Arguments from ARGS should be either strings; functions called
with no args that return a string; pairs `:face FACE', where FACE
is a face specification usable with `put-text-property'; or pairs
`:link LINK' where LINK is a list of arguments to pass to
`insert-button', of the form (LABEL ACTION [HELP-ECHO]), which
specifies the button's label, `action' property and help-echo string.
FACE and LINK can also be functions, which are evaluated to obtain
a face or button specification."
                :arguments ("args"))
                nil [69698 71094])
            ("declare-function" code nil nil [71096 71165])
            ("fancy-splash-image-file" function nil nil [71167 71646])
            ("fancy-splash-head" function (:documentation "Insert the head part of the splash screen into the current buffer.") nil [71648 72666])
            ("fancy-startup-tail" function
               (:documentation "Insert the tail part of the splash screen into the current buffer."
                :arguments ("concise"))
                nil [72668 75807])
            ("exit-splash-screen" function
               (:documentation "Stop displaying the splash screen buffer."
                :user-visible-flag t)
                nil [75809 75918])
            ("fancy-startup-screen" function
               (:documentation "Display fancy startup screen.
If CONCISE is non-nil, display a concise version of the
splash screen in another window."
                :arguments ("concise"))
                nil [75920 77351])
            ("fancy-about-screen" function (:documentation "Display fancy About screen.") nil [77353 78111])
            ("fancy-splash-frame" function (:documentation "Return the frame to use for the fancy splash screen.
Returning non-nil does not mean we should necessarily
use the fancy splash screen, but if we do use it,
we put it on this frame.") nil [78113 78796])
            ("use-fancy-splash-screens-p" function (:documentation "Return t if fancy splash screens should be used.") nil [78798 79613])
            ("normal-splash-screen" function
               (:documentation "Display non-graphic splash screen.
If optional argument STARTUP is non-nil, display the startup screen
after Emacs starts.  If STARTUP is nil, display the About screen.
If CONCISE is non-nil, display a concise version of the
splash screen in another window."
                :arguments ("startup" "concise"))
                nil [79616 82122])
            ("normal-mouse-startup-screen" function nil nil [82124 83930])
            ("normal-no-mouse-startup-screen" function (:documentation "Show a splash screen suitable for displays without mouse support.") nil [83932 88061])
            ("normal-about-screen" function nil nil [88063 89524])
            ("startup-echo-area-message" function nil nil [89526 89723])
            ("display-startup-echo-area-message" function nil nil [89725 90989])
            ("display-startup-screen" function
               (:documentation "Display startup screen according to display.
A fancy display is used on graphic displays, normal otherwise.

If CONCISE is non-nil, display a concise version of the startup
screen."
                :arguments ("concise"))
                nil [90991 91443])
            ("display-about-screen" function
               (:documentation "Display the *About GNU Emacs* buffer.
A fancy display is used on graphic displays, normal otherwise."
                :user-visible-flag t)
                nil [91445 91691])
            ("defalias" code nil nil [91693 91738])
            ("defalias" code nil nil [91739 91796])
            ("command-line-1" function
               (:documentation "A subroutine of `command-line'."
                :arguments ("args-left"))
                nil [91798 109293])
            ("command-line-normalize-file-name" function
               (:documentation "Collapse multiple slashes to one, to handle non-Emacs file names."
                :arguments ("file"))
                nil [109295 110027]))          
      :file "startup.el.gz"
      :pointmax 110054
      :fsize 29656
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889a34"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("electric" include nil nil [1023 1042])
            ("tmm" customgroup
               (:documentation "Text mode access to menu-bar."
                :user-visible-flag t)
                nil [1044 1128])
            ("tmm-short-cuts" variable nil nil [1202 1225])
            ("tmm-old-mb-map" variable nil nil [1226 1253])
            ("tmm-c-prompt" variable nil nil [1254 1279])
            ("tmm-km-list" variable nil nil [1280 1300])
            ("tmm-next-shortcut-digit" variable nil nil [1301 1333])
            ("tmm-table-undef" variable nil nil [1334 1358])
            ("tmm-menubar" function
               (:documentation "Text-mode emulation of looking and choosing from a menubar.
See the documentation for `tmm-prompt'.
X-POSITION, if non-nil, specifies a horizontal position within the menu bar;
we make that menu bar item (the one at that position) the default choice.

Note that \\[menu-bar-open] by default drops down TTY menus; if you want it
to invoke `tmm-menubar' instead, customize the variable
`tty-menu-open-use-tmm' to a non-nil value."
                :user-visible-flag t
                :arguments ("x-position"))
                nil [1512 3462])
            ("tmm-menubar-mouse" function
               (:documentation "Text-mode emulation of looking and choosing from a menubar.
This command is used when you click the mouse in the menubar
on a console which has no window system but does have a mouse.
See the documentation for `tmm-prompt'."
                :user-visible-flag t
                :arguments ("event"))
                nil [3479 3813])
            ("tmm-mid-prompt" variable
               (:documentation "String to insert between shortcut and menu item.
If nil, there will be no shortcuts.  It should not consist only of spaces,
or else the correct item might not be found in the `*Completions*' buffer."
                :default-value "==>")
                nil [3815 4080])
            ("tmm-mb-map" variable (:documentation "A place to store minibuffer map.") nil [4082 4142])
            ("tmm-completion-prompt" variable
               (:documentation "Help text to insert on the top of the completion buffer.
To save space, you can set this to nil,
in which case the standard introduction text is deleted too."
                :default-value "Press PageUp key to reach this buffer from the minibuffer.
Alternatively, you can use Up/Down keys (or your History keys) to change
the item in the minibuffer, and press RET when you are done, or press the
marked letters to pick up your choice.  Type C-g or ESC ESC ESC to cancel.
")
                nil [4144 4676])
            ("tmm-shortcut-style" variable
               (:documentation "What letters to use as menu shortcuts.
Must be either one of the symbols `downcase' or `upcase',
or else a list of the two in the order you prefer."
                :default-value '(downcase upcase))
                nil [4678 4999])
            ("tmm-shortcut-words" variable
               (:documentation "How many successive words to try for shortcuts, nil means all.
If you use only one of `downcase' or `upcase' for `tmm-shortcut-style',
specify nil for this variable."
                :default-value 2)
                nil [5001 5255])
            ("tmm-inactive" variable
               (:documentation "Face used for inactive menu items."
                :default-value '((t :inherit shadow))
                :type "face")
                nil [5257 5357])
            ("tmm--completion-table" function (:arguments ("items")) nil [5359 5561])
            ("tmm--history" variable nil nil [5563 5588])
            ("tmm-prompt" function
               (:documentation "Text-mode emulation of calling the bindings in keymap.
Creates a text-mode menu of possible choices.  You can access the elements
in the menu in two ways:
   *)  via history mechanism from minibuffer;
   *)  Or via completion-buffer that is automatically shown.
The last alternative is currently a hack, you cannot use mouse reliably.

MENU is like the MENU argument to `x-popup-menu': either a
keymap or an alist of alists.
DEFAULT-ITEM, if non-nil, specifies an initial default choice.
Its value should be an event that has a binding in MENU."
                :arguments ("menu" "in-popup" "default-item"))
                nil [5605 11356])
            ("tmm-add-shortcuts" function
               (:documentation "Add shortcuts to cars of elements of the list.
Takes a list of lists with a string as car, returns list with
shortcuts added to these cars.
Stores a list of all the shortcuts in the free variable `tmm-short-cuts'."
                :arguments ("list"))
                nil [11358 11697])
            ("tmm-add-one-shortcut" function (:arguments ("elt")) nil [11699 13689])
            ("tmm-define-keys" function (:arguments ("minibuffer")) nil [13720 14601])
            ("tmm-completion-delete-prompt" function nil nil [14603 14783])
            ("tmm-remove-inactive-mouse-face" function (:documentation "Remove the mouse-face property from inactive menu items.") nil [14785 15404])
            ("tmm-add-prompt" function nil nil [15406 16278])
            ("tmm-shortcut" function
               (:documentation "Choose the shortcut that the user typed."
                :user-visible-flag t)
                nil [16280 17147])
            ("tmm-goto-completions" function
               (:documentation "Jump to the completions buffer."
                :user-visible-flag t)
                nil [17149 17522])
            ("tmm-get-keymap" function
               (:documentation "Prepend (DOCSTRING EVENT BINDING) to free variable `tmm-km-list'.
The values are deduced from the argument ELT, that should be an
element of keymap, an `x-popup-menu' argument, or an element of
`x-popup-menu' argument (when IN-X-MENU is not-nil).
This function adds the element only if it is not already present.
It uses the free variable `tmm-table-undef' to keep undefined keys."
                :arguments ("elt" "in-x-menu"))
                nil [17524 21225])
            ("tmm-get-keybind" function
               (:documentation "Return the current binding of KEYSEQ, merging prefix definitions.
If KEYSEQ is a prefix key that has local and global bindings,
we merge them into a single keymap which shows the proper order of the menu.
However, for the menu bar itself, the value does not take account
of `menu-bar-final-items'."
                :arguments ("keyseq"))
                nil [21227 21631])
            ("tmm" package nil nil [21633 21647]))          
      :file "tmm.el.gz"
      :pointmax 21670
      :fsize 6842
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889a54"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [7440 7459])
            ("cl-lib" include nil nil [7479 7496])
            ("follow" customgroup
               (:documentation "Synchronize windows showing the same buffer."
                :user-visible-flag t)
                nil [7514 7624])
            ("follow-mode-hook" variable (:documentation "Normal hook run by `follow-mode'.") nil [7626 7727])
            ("follow-mode-prefix" variable
               (:documentation "Prefix key to use for follow commands in Follow mode.
The value of this variable is checked as part of loading Follow mode.
After that, changing the prefix key requires manipulating keymaps."
                :default-value ".")
                nil [8119 8385])
            ("follow-mode-map" variable
               (:documentation "Minor mode keymap for Follow mode."
                :default-value (let ((mainmap (make-sparse-keymap)) (map (make-sparse-keymap))) (define-key map "" 'follow-scroll-up) (define-key map "\366" 'follow-scroll-down) (define-key map "v" 'follow-scroll-down) (define-key map "1" 'follow-delete-other-windows-and-split) (define-key map "b" 'follow-switch-to-buffer) (define-key map "" 'follow-switch-to-buffer-all) (define-key map "" 'follow-recenter) (define-key map "<" 'follow-first-window) (define-key map ">" 'follow-last-window) (define-key map "n" 'follow-next-window) (define-key map "p" 'follow-previous-window) (define-key mainmap follow-mode-prefix map) (define-key mainmap [remap end-of-buffer] 'follow-end-of-buffer) (define-key mainmap [remap scroll-bar-toolkit-scroll] 'follow-scroll-bar-toolkit-scroll) (define-key mainmap [remap scroll-bar-drag] 'follow-scroll-bar-drag) (define-key mainmap [remap scroll-bar-scroll-up] 'follow-scroll-bar-scroll-up) (define-key mainmap [remap scroll-bar-scroll-down] 'follow-scroll-bar-scroll-down) (define-key mainmap [remap mwheel-scroll] 'follow-mwheel-scroll) mainmap))
                nil [8387 9930])
            ("follow-menu-filter" function (:arguments ("menu")) nil [10017 10177])
            ("easy-menu-add-item" code nil nil [10179 10960])
            ("follow-mode-line-text" variable
               (:documentation "Text shown in the mode line when Follow mode is active.
Defaults to \" Follow\".  Examples of other values
are \" Fw\", or simply \"\"."
                :default-value " Follow")
                nil [10962 11178])
            ("follow-auto" variable (:documentation "Non-nil activates Follow mode whenever a file is loaded.") nil [11180 11490])
            ("follow-cache-command-list" variable
               (:documentation "List of commands that don't require recalculation.

In order to be able to use the cache, a command should not change the
contents of the buffer, nor should it change selected window or current
buffer.

The commands in this list are checked at load time.

To mark other commands as suitable for caching, set the symbol
property `follow-mode-use-cache' to non-nil."
                :default-value '(next-line previous-line forward-char backward-char right-char left-char))
                nil [11492 11971])
            ("follow-debug" variable (:documentation "If non-nil, emit Follow mode debugging messages.") nil [11973 12088])
            ("follow-internal-force-redisplay" variable (:documentation "True when Follow mode should redisplay the windows.") nil [12114 12214])
            ("follow-active-menu" variable (:documentation "The menu visible when Follow mode is active.") nil [12216 12296])
            ("follow-inactive-menu" variable (:documentation "The menu visible when Follow mode is inactive.") nil [12298 12382])
            ("follow-inside-post-command-hook-call" variable (:documentation "Non-nil when inside Follow modes `post-command-hook'.
Used by `follow-window-size-change'.") nil [12384 12528])
            ("follow-windows-start-end-cache" variable (:documentation "Cache used by `follow-window-start-end'.") nil [12530 12618])
            ("follow-fixed-window" variable (:documentation "If non-nil, the current window must not be scrolled.
This is typically set by explicit scrolling commands.") nil [12620 12763])
            ("follow-debug-message" function
               (:documentation "Like `message', but only active when `follow-debug' is non-nil."
                :arguments ("args"))
                nil [12924 13113])
            ("dolist" code nil nil [13126 13203])
            ("turn-on-follow-mode" function (:documentation "Turn on Follow mode.  Please see the function `follow-mode'.") nil [13234 13347])
            ("turn-off-follow-mode" function (:documentation "Turn off Follow mode.  Please see the function `follow-mode'.") nil [13365 13481])
            ("put" code nil nil [13483 13520])
            ("define-minor-mode" code nil nil [13536 17204])
            ("follow-find-file-hook" function (:documentation "Find-file hook for Follow mode.  See the variable `follow-auto'.") nil [17206 17342])
            ("follow-get-scrolled-point" function
               (:documentation "Calculate the correct value for point after a scrolling operation.

DEST is our default position, typically where point was before the scroll.
If `scroll-preserve-screen-position' is non-nil and active, DEST will be
in the same screen position as before the scroll.  WINDOWS is the list of
windows in the follow chain.

This function attempts to duplicate the point placing from
`window_scroll_line_based' in the Emacs core source window.c.

Return the new position."
                :arguments ("dest" "windows"))
                nil [17376 18869])
            ("follow-scroll-up-arg" function
               (:documentation "Scroll the text in a follow mode window chain up by ARG lines.
If ARG is nil, scroll the size of the current window.

This is an internal function for `follow-scroll-up' and
`follow-scroll-up-window'."
                :arguments ("arg"))
                nil [19614 20430])
            ("follow-scroll-down-arg" function
               (:documentation "Scroll the text in a follow mode window chain down by ARG lines.
If ARG is nil, scroll the size of the current window.

This is an internal function for `follow-scroll-down' and
`follow-scroll-down-window'."
                :arguments ("arg"))
                nil [20432 20889])
            ("follow-scroll-up-window" function
               (:documentation "Scroll text in a Follow mode window up by that window's size.
The other windows in the window chain will scroll synchronously.

If called with no ARG, the `next-screen-context-lines' last lines of
the window will be visible after the scroll.

If called with an argument, scroll ARG lines up.
Negative ARG means scroll downward.

Works like `scroll-up' when not in Follow mode."
                :user-visible-flag t
                :arguments ("arg"))
                nil [20906 21478])
            ("put" code nil nil [21479 21527])
            ("follow-scroll-down-window" function
               (:documentation "Scroll text in a Follow mode window down by that window's size.
The other windows in the window chain will scroll synchronously.

If called with no ARG, the `next-screen-context-lines' top lines of
the window in the chain will be visible after the scroll.

If called with an argument, scroll ARG lines down.
Negative ARG means scroll upward.

Works like `scroll-down' when not in Follow mode."
                :user-visible-flag t
                :arguments ("arg"))
                nil [21544 22136])
            ("put" code nil nil [22137 22187])
            ("follow-scroll-up" function
               (:documentation "Scroll text in a Follow mode window chain up.

If called with no ARG, the `next-screen-context-lines' last lines of
the bottom window in the chain will be visible in the top window.

If called with an argument, scroll ARG lines up.
Negative ARG means scroll downward.

Works like `scroll-up' when not in Follow mode."
                :user-visible-flag t
                :arguments ("arg"))
                nil [22204 23044])
            ("put" code nil nil [23045 23086])
            ("follow-scroll-down" function
               (:documentation "Scroll text in a Follow mode window chain down.

If called with no ARG, the `next-screen-context-lines' top lines of
the top window in the chain will be visible in the bottom window.

If called with an argument, scroll ARG lines down.
Negative ARG means scroll upward.

Works like `scroll-down' when not in Follow mode."
                :user-visible-flag t
                :arguments ("arg"))
                nil [23103 24111])
            ("put" code nil nil [24112 24155])
            ("declare-function" code nil nil [24157 24213])
            ("comint-scroll-show-maximum-output" variable nil nil [24214 24256])
            ("follow-comint-scroll-to-bottom" function
               (:documentation "Scroll the bottom-most window in the current Follow chain.
This is to be called by `comint-postoutput-scroll-to-bottom'."
                :arguments ("_window"))
                nil [24258 24986])
            ("follow-align-compilation-windows" function (:documentation "Align the windows of the current Follow mode buffer.
This is to be called from `compilation-filter-hook'.") nil [24988 25599])
            ("follow-delete-other-windows-and-split" function
               (:documentation "Create two side by side windows and enter Follow mode.

Execute this command to display as much as possible of the text
in the selected window.  All other windows, in the current
frame, are deleted and the selected window is split in two
side-by-side windows.  Follow mode is activated, hence the
two windows always will display two successive pages.
(If one window is moved, the other one will follow.)

If ARG is positive, the leftmost window is selected.  If negative,
the rightmost is selected.  If ARG is nil, the leftmost window is
selected if the original window is the first one in the frame."
                :user-visible-flag t
                :arguments ("arg"))
                nil [25628 26694])
            ("follow-switch-to-buffer" function
               (:documentation "Show BUFFER in all windows in the current Follow mode window chain."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [26696 27077])
            ("follow-switch-to-buffer-all" function
               (:documentation "Show BUFFER in all windows on this frame.
Defaults to current buffer."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [27080 27539])
            ("follow-switch-to-current-buffer-all" function
               (:documentation "Show current buffer in all windows on this frame, and enter Follow mode."
                :user-visible-flag t)
                nil [27542 27756])
            ("follow-next-window" function
               (:documentation "Select the next window showing the same buffer."
                :user-visible-flag t)
                nil [27899 28146])
            ("follow-previous-window" function
               (:documentation "Select the previous window showing the same buffer."
                :user-visible-flag t)
                nil [28149 28404])
            ("follow-first-window" function
               (:documentation "Select the first window in the frame showing the same buffer."
                :user-visible-flag t)
                nil [28407 28566])
            ("follow-last-window" function
               (:documentation "Select the last window in the frame showing the same buffer."
                :user-visible-flag t)
                nil [28569 28736])
            ("follow-recenter" function
               (:documentation "Recenter the middle window around point.
Rearrange all other windows around the middle window.

With a positive argument, place the current line ARG lines
from the top.  With a negative argument, place it -ARG lines
from the bottom."
                :user-visible-flag t
                :arguments ("arg"))
                nil [28750 29696])
            ("follow-redraw" function
               (:documentation "Arrange windows displaying the same buffer in successor order.
This function can be called even if the buffer is not in Follow mode.

Hopefully, there should be no reason to call this function when in
Follow mode since the windows should always be aligned."
                :user-visible-flag t)
                nil [29699 30035])
            ("follow-end-of-buffer" function
               (:documentation "Move point to the end of the buffer, Follow mode style.

If the end is not visible, it will be displayed in the last possible
window in the Follow mode window chain.

The mark is left at the previous position.  With arg N, put point N/10
of the way from the true end."
                :user-visible-flag t
                :arguments ("arg"))
                nil [30056 30715])
            ("follow--window-sorter" function
               (:documentation "Sorting function for W1 and W2 based on their positions.
Return non-nil if W1 is above W2; if their top-lines
are at the same position, return non-nil if W1 is to the
left of W2."
                :arguments ("w1" "w2"))
                nil [30730 31139])
            ("follow-all-followers" function
               (:documentation "Return all windows displaying the same buffer as the WIN.
The list is sorted with topmost and leftmost windows first, and
contains only windows in the same frame as WIN.  If WIN is nil,
it defaults to the selected window."
                :arguments ("win"))
                nil [31141 31632])
            ("follow-split-followers" function
               (:documentation "Split WINDOWS into two sets: predecessors and successors.
Return `(PRED . SUCC)' where `PRED' and `SUCC' are ordered starting
from the selected window."
                :arguments ("windows" "win"))
                nil [31634 32061])
            ("follow-calc-win-end" function
               (:documentation "Calculate the end position for window WIN.
Return (END-POS END-OF-BUFFER).

Actually, the position returned is the start of the line after
the last fully-visible line in WIN.  END-OF-BUFFER is t when EOB
is fully-visible in WIN.  If WIN is nil, the selected window is
used."
                :arguments ("win"))
                nil [32063 32742])
            ("follow-calc-win-start" function
               (:documentation "Determine the start of window WIN in a Follow mode window chain.
WINDOWS is a list of chained windows, and POS is the starting
position for the first window in the list.  If WIN is nil, return
the point below all windows."
                :arguments ("windows" "pos" "win"))
                nil [32744 33404])
            ("follow-cache-valid-p" function
               (:documentation "Test if the cached value of `follow-windows-start-end' can be used.
Note that this handles the case when the cache has been set to nil."
                :arguments ("windows"))
                nil [33535 34051])
            ("follow-windows-start-end" function
               (:documentation "Return a list of (WIN START END BUFFER-END-P) for window list WINDOWS."
                :arguments ("windows"))
                nil [34053 34551])
            ("follow-pos-visible" function
               (:documentation "Non-nil when POS is visible in WIN."
                :arguments ("pos" "win" "win-start-end"))
                nil [34553 34818])
            ("follow-windows-aligned-p" function
               (:documentation "Non-nil if the follower windows are aligned.
The argument, WIN-START-END, should be a list of the form
returned by `follow-windows-start-end'."
                :arguments ("win-start-end"))
                nil [35000 35432])
            ("follow-point-visible-all-windows-p" function
               (:documentation "Non-nil when the `window-point' is visible in all windows."
                :arguments ("win-start-end"))
                nil [35520 35885])
            ("follow-update-window-start" function
               (:documentation "Make sure that the start of WIN starts at a full screen line."
                :arguments ("win"))
                nil [36403 36726])
            ("follow-select-if-visible" function
               (:documentation "Select and return a window, if DEST is visible in it.
Return the selected window."
                :arguments ("dest" "win-start-end"))
                nil [36728 37283])
            ("follow-select-if-end-visible" function
               (:documentation "Select and return a window, if end is visible in it."
                :arguments ("win-start-end"))
                nil [37680 38403])
            ("follow-select-if-visible-from-first" function
               (:documentation "Try to select one of WINDOWS without repositioning the topmost window.
If one of the windows in WINDOWS contains DEST, select it, call
`follow-redisplay', move point to DEST, and return that window.
Otherwise, return nil."
                :arguments ("dest" "windows"))
                nil [38649 39815])
            ("follow-start-end-invalid" variable
               (:documentation "When non-nil, indicates `follow-windows-start-end-cache' is invalid."
                :default-value t)
                nil [40101 40209])
            ("make-variable-buffer-local" code nil nil [40210 40264])
            ("follow-redisplay" function
               (:documentation "Reposition the WINDOWS around WIN.
Should point be too close to the roof we redisplay everything
from the top.  WINDOWS should contain a list of windows to
redisplay; it is assumed that WIN is a member of the list.
Should WINDOWS be nil, the windows displaying the
same buffer as WIN, in the current frame, are used.
Should WIN be nil, the selected window is used.
If PRESERVE-WIN is non-nil, keep WIN itself unchanged while
repositioning the other windows."
                :arguments ("windows" "win" "preserve-win"))
                nil [40266 41784])
            ("follow-estimate-first-window-start" function
               (:documentation "Estimate the position of the first window.
The estimate is computed by assuming that the window WIN, which
should be a member of WINDOWS, starts at position START."
                :arguments ("windows" "win" "start"))
                nil [41786 42257])
            ("follow-calculate-first-window-start-from-above" function (:arguments ("windows" "guess" "win" "start")) nil [42378 42926])
            ("follow-calculate-first-window-start-from-below" function (:arguments ("windows" "guess" "win" "start")) nil [43048 44177])
            ("follow-avoid-tail-recenter" function
               (:documentation "Make sure windows displaying the end of a buffer aren't recentered.
This is done by reading and rewriting the start position of
non-first windows in Follow mode."
                :arguments ("_rest"))
                nil [44467 45471])
            ("follow-post-command-hook" function (:documentation "Ensure that the windows in Follow mode are adjacent after each command.") nil [45948 46449])
            ("follow-adjust-window" function (:arguments ("win")) nil [46451 52224])
            ("follow-maximize-region" function
               (:documentation "Make a highlighted region stretching multiple windows look good."
                :arguments ("win" "windows" "win-start-end"))
                nil [52493 53011])
            ("declare-function" code nil nil [53182 53247])
            ("declare-function" code nil nil [53248 53303])
            ("declare-function" code nil nil [53304 53364])
            ("declare-function" code nil nil [53365 53427])
            ("declare-function" code nil nil [53428 53477])
            ("follow-scroll-bar-toolkit-scroll" function (:arguments ("event")) nil [53479 53619])
            ("follow-scroll-bar-drag" function (:arguments ("event")) nil [53621 53741])
            ("follow-scroll-bar-scroll-up" function (:arguments ("event")) nil [53743 53873])
            ("follow-scroll-bar-scroll-down" function (:arguments ("event")) nil [53875 54009])
            ("follow-mwheel-scroll" function (:arguments ("event")) nil [54011 54127])
            ("follow-redraw-after-event" function
               (:documentation "Re-align the Follow mode windows affected by EVENT."
                :arguments ("event"))
                nil [54129 54697])
            ("follow-window-size-change" function
               (:documentation "Redraw all windows in FRAME, when in Follow mode."
                :arguments ("frame"))
                nil [55358 56692])
            ("add-hook" code nil nil [56694 56759])
            ("follow-after-change" function
               (:documentation "After change function: set `follow-start-end-invalid'."
                :arguments ("_beg" "_end" "_old-len"))
                nil [57085 57228])
            ("follow-window-start" function
               (:documentation "Return position at which display currently starts in the
Follow Mode group of windows which includes WINDOW.

WINDOW must be a live window and defaults to the selected one.
This is updated by redisplay or by calling
`follow-set-window-start'."
                :arguments ("window"))
                nil [57230 57606])
            ("follow-window-end" function
               (:documentation "Return position at which display currently ends in the Follow
  Mode group of windows which includes WINDOW.

  WINDOW must be a live window and defaults to the selected one.
  This is updated by redisplay, when it runs to completion.
  Simply changing the buffer text or setting `window-start' does
  not update this value.

  Return nil if there is no recorded value.  (This can happen if
  the last redisplay of WINDOW was preempted, and did not
  finish.)  If UPDATE is non-nil, compute the up-to-date position
  if it isn't already recorded."
                :arguments ("window" "update"))
                nil [57608 58423])
            ("follow-set-window-start" function
               (:documentation "Make display in the Follow Mode group of windows which includes
WINDOW start at position POS in WINDOW's buffer.

WINDOW must be a live window and defaults to the selected one.  Return
POS.  Optional third arg NOFORCE non-nil inhibits next redisplay from
overriding motion of point in order to display at this exact start."
                :arguments ("window" "pos" "noforce"))
                nil [58425 58951])
            ("follow-pos-visible-in-window-p" function
               (:documentation "Return non-nil if position POS is currently on the frame in one of
  the windows in the Follow Mode group which includes WINDOW.

WINDOW must be a live window and defaults to the selected one.

Return nil if that position is scrolled vertically out of view.  If a
character is only partially visible, nil is returned, unless the
optional argument PARTIALLY is non-nil.  If POS is only out of view
because of horizontal scrolling, return non-nil.  If POS is t, it
specifies the position of the last visible glyph in WINDOW.  POS
defaults to point in WINDOW; WINDOW defaults to the selected window.

If POS is visible, return t if PARTIALLY is nil; if PARTIALLY is non-nil,
the return value is a list of 2 or 6 elements (X Y [RTOP RBOT ROWH VPOS]),
where X and Y are the pixel coordinates relative to the top left corner
of the actual window containing it.  The remaining elements are
omitted if the character after POS is fully visible; otherwise, RTOP
and RBOT are the number of pixels off-window at the top and bottom of
the screen line (\"row\") containing POS, ROWH is the visible height
of that row, and VPOS is the row number (zero-based)."
                :arguments ("pos" "window" "partially"))
                nil [58953 60906])
            ("follow-move-to-window-line" function
               (:documentation "Position point relative to the Follow mode group containing the selected window.
ARG nil means position point at center of the window group.
Else, ARG specifies vertical position within the window group;
zero means top of the first window in the group, negative means
  relative to bottom of the last window in the group."
                :arguments ("arg"))
                nil [60908 63063])
            ("follow" package nil nil [63875 63892]))          
      :file "follow.el.gz"
      :pointmax 64543
      :fsize 17384
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 7496 . 7497) (symbol 7461 . 7478) (open-paren 7460 . 7461)))
    (semanticdb-table "semanticdb-table-1889a74"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tabulated-list" include nil nil [1117 1142])
            ("Buffer-menu" customgroup
               (:documentation "Show a menu of all buffers in a buffer."
                :user-visible-flag t)
                nil [1144 1252])
            ("Buffer-menu-marker-char" variable
               (:documentation "The mark character for marked buffers."
                :default-value 62)
                nil [1254 1332])
            ("Buffer-menu-del-char" variable
               (:documentation "Character used to flag buffers for deletion."
                :default-value 68)
                nil [1334 1415])
            ("Buffer-menu-use-header-line" variable
               (:documentation "If non-nil, use the header line to display Buffer Menu column titles."
                :default-value t)
                nil [1417 1571])
            ("buffer-menu-buffer" variable
               (:documentation "Face for buffer names in the Buffer Menu."
                :default-value '((t (:weight bold)))
                :type "face")
                nil [1573 1693])
            ("put" code nil nil [1694 1751])
            ("Buffer-menu-buffer+size-width" variable (:documentation "Combined width of buffer name and size columns in Buffer Menu.
If nil, use `Buffer-menu-name-width' and `Buffer-menu-size-width'.

If non-nil, the value of `Buffer-menu-name-width' is overridden;
the name column is assigned width `Buffer-menu-buffer+size-width'
minus `Buffer-menu-size-width'.  This use is deprecated.") nil [1753 2198])
            ("make-obsolete-variable" code nil nil [2200 2337])
            ("Buffer-menu-name-width" variable
               (:documentation "Width of buffer name column in the Buffer Menu."
                :default-value 19)
                nil [2339 2484])
            ("Buffer-menu-size-width" variable
               (:documentation "Width of buffer size column in the Buffer Menu."
                :default-value 7)
                nil [2486 2630])
            ("Buffer-menu-mode-width" variable
               (:documentation "Width of mode name column in the Buffer Menu."
                :default-value 16)
                nil [2632 2757])
            ("Buffer-menu-use-frame-buffer-list" variable
               (:documentation "If non-nil, the Buffer Menu uses the selected frame's buffer list.
Buffers that were never selected in that frame are listed at the end.
If the value is nil, the Buffer Menu uses the global buffer list.
This variable matters if the Buffer Menu is sorted by visited order,
as it is by default."
                :default-value t)
                nil [2759 3160])
            ("Buffer-menu-files-only" variable (:documentation "Non-nil if the current Buffer Menu lists only file buffers.
This is set by the prefix argument to `buffer-menu' and related
commands.") nil [3162 3335])
            ("make-variable-buffer-local" code nil nil [3336 3388])
            ("Buffer-menu-mode-map" variable
               (:documentation "Local keymap for `Buffer-menu-mode' buffers."
                :default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "v" 'Buffer-menu-select) (define-key map "2" 'Buffer-menu-2-window) (define-key map "1" 'Buffer-menu-1-window) (define-key map "f" 'Buffer-menu-this-window) (define-key map "e" 'Buffer-menu-this-window) (define-key map "" 'Buffer-menu-this-window) (define-key map "o" 'Buffer-menu-other-window) (define-key map "" 'Buffer-menu-switch-other-window) (define-key map "s" 'Buffer-menu-save) (define-key map "d" 'Buffer-menu-delete) (define-key map "k" 'Buffer-menu-delete) (define-key map "" 'Buffer-menu-delete) (define-key map "" 'Buffer-menu-delete-backwards) (define-key map "x" 'Buffer-menu-execute) (define-key map " " 'next-line) (define-key map "" 'Buffer-menu-backup-unmark) (define-key map "~" 'Buffer-menu-not-modified) (define-key map "u" 'Buffer-menu-unmark) (define-key map "\377" 'Buffer-menu-unmark-all-buffers) (define-key map "U" 'Buffer-menu-unmark-all) (define-key map "m" 'Buffer-menu-mark) (define-key map "t" 'Buffer-menu-visit-tags-table) (define-key map "%" 'Buffer-menu-toggle-read-only) (define-key map "b" 'Buffer-menu-bury) (define-key map "V" 'Buffer-menu-view) (define-key map "T" 'Buffer-menu-toggle-files-only) (define-key map (kbd "M-s a C-s") 'Buffer-menu-isearch-buffers) (define-key map (kbd "M-s a M-C-s") 'Buffer-menu-isearch-buffers-regexp) (define-key map (kbd "M-s a C-o") 'Buffer-menu-multi-occur) (define-key map [mouse-2] 'Buffer-menu-mouse-select) (define-key map [follow-link] 'mouse-face) (define-key map [menu-bar Buffer-menu-mode] (cons (purecopy "Buffer-Menu") menu-map)) (bindings--define-key menu-map [quit] '(menu-item "Quit" quit-window :help "Remove the buffer menu from the display")) (bindings--define-key menu-map [rev] '(menu-item "Refresh" revert-buffer :help "Refresh the *Buffer List* buffer contents")) (bindings--define-key menu-map [s0] menu-bar-separator) (bindings--define-key menu-map [tf] '(menu-item "Show Only File Buffers" Buffer-menu-toggle-files-only :button (:toggle . Buffer-menu-files-only) :help "Toggle whether the current buffer-menu displays only file buffers")) (bindings--define-key menu-map [s1] menu-bar-separator) (bindings--define-key menu-map [sel] '(menu-item "Select Marked" Buffer-menu-select :help "Select this line's buffer; also display buffers marked with `>'")) (bindings--define-key menu-map [bm2] '(menu-item "Select Two" Buffer-menu-2-window :help "Select this line's buffer, with previous buffer in second window")) (bindings--define-key menu-map [bm1] '(menu-item "Select Current" Buffer-menu-1-window :help "Select this line's buffer, alone, in full frame")) (bindings--define-key menu-map [ow] '(menu-item "Select in Other Window" Buffer-menu-other-window :help "Select this line's buffer in other window, leaving buffer menu visible")) (bindings--define-key menu-map [tw] '(menu-item "Select in Current Window" Buffer-menu-this-window :help "Select this line's buffer in this window")) (bindings--define-key menu-map [s2] menu-bar-separator) (bindings--define-key menu-map [is] '(menu-item "Regexp Isearch Marked Buffers..." Buffer-menu-isearch-buffers-regexp :help "Search for a regexp through all marked buffers using Isearch")) (bindings--define-key menu-map [ir] '(menu-item "Isearch Marked Buffers..." Buffer-menu-isearch-buffers :help "Search for a string through all marked buffers using Isearch")) (bindings--define-key menu-map [mo] '(menu-item "Multi Occur Marked Buffers..." Buffer-menu-multi-occur :help "Show lines matching a regexp in marked buffers using Occur")) (bindings--define-key menu-map [s3] menu-bar-separator) (bindings--define-key menu-map [by] '(menu-item "Bury" Buffer-menu-bury :help "Bury the buffer listed on this line")) (bindings--define-key menu-map [vt] '(menu-item "Set Unmodified" Buffer-menu-not-modified :help "Mark buffer on this line as unmodified (no changes to save)")) (bindings--define-key menu-map [ex] '(menu-item "Execute" Buffer-menu-execute :help "Save and/or delete buffers marked with s or k commands")) (bindings--define-key menu-map [s4] menu-bar-separator) (bindings--define-key menu-map [delb] '(menu-item "Mark for Delete and Move Backwards" Buffer-menu-delete-backwards :help "Mark buffer on this line to be deleted by x command and move up one line")) (bindings--define-key menu-map [del] '(menu-item "Mark for Delete" Buffer-menu-delete :help "Mark buffer on this line to be deleted by x command")) (bindings--define-key menu-map [sv] '(menu-item "Mark for Save" Buffer-menu-save :help "Mark buffer on this line to be saved by x command")) (bindings--define-key menu-map [umk] '(menu-item "Unmark" Buffer-menu-unmark :help "Cancel all requested operations on buffer on this line and move down")) (bindings--define-key menu-map [umkab] '(menu-item "Remove marks..." Buffer-menu-unmark-all-buffers :help "Cancel a requested operation on all buffers")) (bindings--define-key menu-map [umka] '(menu-item "Unmark all" Buffer-menu-unmark-all :help "Cancel all requested operations on buffers")) (bindings--define-key menu-map [mk] '(menu-item "Mark" Buffer-menu-mark :help "Mark buffer on this line for being displayed by v command")) map))
                nil [3390 9249])
            ("define-obsolete-variable-alias" code nil nil [9251 9338])
            ("define-derived-mode" code nil nil [9340 12012])
            ("buffer-menu" function
               (:documentation "Switch to the Buffer Menu.
By default, the Buffer Menu lists all buffers except those whose
names start with a space (which are for internal use).  With
prefix argument ARG, show only buffers that are visiting files.

In the Buffer Menu, the first column (denoted \"C\") shows \".\"
for the buffer from which you came, \">\" for buffers you mark to
be displayed, and \"D\" for those you mark for deletion.

The \"R\" column has a \"%\" if the buffer is read-only.
The \"M\" column has a \"*\" if it is modified, or \"S\" if you
have marked it for saving.

The remaining columns show the buffer name, the buffer size in
characters, its major mode, and the visited file name (if any).

See `Buffer-menu-mode' for the keybindings available the Buffer
Menu."
                :user-visible-flag t
                :arguments ("arg"))
                nil [12014 12963])
            ("buffer-menu-other-window" function
               (:documentation "Display the Buffer Menu in another window.
See `buffer-menu' for a description of the Buffer Menu.

By default, all buffers are listed except those whose names start
with a space (which are for internal use).  With prefix argument
ARG, show only buffers that are visiting files."
                :user-visible-flag t
                :arguments ("arg"))
                nil [12965 13465])
            ("list-buffers" function
               (:documentation "Display a list of existing buffers.
The list is displayed in a buffer named \"*Buffer List*\".
See `buffer-menu' for a description of the Buffer Menu.

By default, all buffers are listed except those whose names start
with a space (which are for internal use).  With prefix argument
ARG, show only buffers that are visiting files."
                :user-visible-flag t
                :arguments ("arg"))
                nil [13482 13920])
            ("Buffer-menu-toggle-files-only" function
               (:documentation "Toggle whether the current buffer-menu displays only file buffers.
With a positive ARG, display only file buffers.  With zero or
negative ARG, display other buffers as well."
                :user-visible-flag t
                :arguments ("arg"))
                nil [13922 14434])
            ("defalias" code nil nil [14436 14485])
            ("Buffer-menu-buffer" function
               (:documentation "Return the buffer described by the current Buffer Menu line.
If there is no buffer here, return nil if ERROR-IF-NON-EXISTENT-P
is nil or omitted, and signal an error otherwise."
                :arguments ("error-if-non-existent-p"))
                nil [14489 15003])
            ("Buffer-menu-no-header" function nil nil [15005 15198])
            ("Buffer-menu-beginning" function nil nil [15200 15316])
            ("Buffer-menu-mark" function
               (:documentation "Mark the Buffer menu entry at point for later display.
It will be displayed by the \\<Buffer-menu-mode-map>\\[Buffer-menu-select] command."
                :user-visible-flag t)
                nil [15369 15644])
            ("Buffer-menu-unmark" function
               (:documentation "Cancel all requested operations on buffer on this line and move down.
Optional prefix arg means move up."
                :user-visible-flag t
                :arguments ("backup"))
                nil [15646 15878])
            ("Buffer-menu-unmark-all-buffers" function
               (:documentation "Cancel a requested operation on all buffers.
MARK is the character to flag the operation on the buffers.
When called interactively prompt for MARK;  RET remove all marks."
                :user-visible-flag t
                :arguments ("mark"))
                nil [15880 16566])
            ("Buffer-menu-unmark-all" function
               (:documentation "Cancel all requested operations on buffers."
                :user-visible-flag t)
                nil [16568 16704])
            ("Buffer-menu-backup-unmark" function
               (:documentation "Move up and cancel all requested operations on buffer on line above."
                :user-visible-flag t)
                nil [16706 16875])
            ("Buffer-menu--unmark" function nil nil [16877 17113])
            ("Buffer-menu-delete" function
               (:documentation "Mark the buffer on this Buffer Menu buffer line for deletion.
A subsequent \\<Buffer-menu-mode-map>`\\[Buffer-menu-execute]' command
will delete it.

If prefix argument ARG is non-nil, it specifies the number of
buffers to delete; a negative ARG means to delete backwards."
                :user-visible-flag t
                :arguments ("arg"))
                nil [17115 17847])
            ("Buffer-menu-delete-backwards" function
               (:documentation "Mark the buffer on this Buffer Menu line for deletion, and move up.
A subsequent \\<Buffer-menu-mode-map>`\\[Buffer-menu-execute]'
command will delete the marked buffer.  Prefix ARG means move
that many lines."
                :user-visible-flag t
                :arguments ("arg"))
                nil [17849 18173])
            ("Buffer-menu-save" function
               (:documentation "Mark the buffer on this Buffer Menu line for saving.
A subsequent \\<Buffer-menu-mode-map>`\\[Buffer-menu-execute]' command
will save it."
                :user-visible-flag t)
                nil [18175 18448])
            ("Buffer-menu-not-modified" function
               (:documentation "Mark the buffer on this line as unmodified (no changes to save).
If ARG is non-nil (interactively, with a prefix argument), mark
it as modified."
                :user-visible-flag t
                :arguments ("arg"))
                nil [18450 18794])
            ("Buffer-menu-execute" function
               (:documentation "Save and/or delete marked buffers in the Buffer Menu.
Buffers marked with \\<Buffer-menu-mode-map>`\\[Buffer-menu-save]' are saved.
Buffers marked with \\<Buffer-menu-mode-map>`\\[Buffer-menu-delete]' are deleted."
                :user-visible-flag t)
                nil [18796 19769])
            ("Buffer-menu-select" function
               (:documentation "Select this line's buffer; also, display buffers marked with `>'.
You can mark buffers with the \\<Buffer-menu-mode-map>`\\[Buffer-menu-mark]' command.
This command deletes and replaces all the previously existing windows
in the selected frame."
                :user-visible-flag t)
                nil [19771 20566])
            ("Buffer-menu-marked-buffers" function
               (:documentation "Return the list of buffers marked with `Buffer-menu-mark'.
If UNMARK is non-nil, unmark them."
                :arguments ("unmark"))
                nil [20568 20995])
            ("Buffer-menu-isearch-buffers" function
               (:documentation "Search for a string through all marked buffers using Isearch."
                :user-visible-flag t)
                nil [20997 21172])
            ("Buffer-menu-isearch-buffers-regexp" function
               (:documentation "Search for a regexp through all marked buffers using Isearch."
                :user-visible-flag t)
                nil [21174 21363])
            ("Buffer-menu-multi-occur" function
               (:documentation "Show all lines in marked buffers containing a match for a regexp."
                :user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [21365 21593])
            ("Buffer-menu-visit-tags-table" function
               (:documentation "Visit the tags table in the buffer on this line.  See `visit-tags-table'."
                :user-visible-flag t)
                nil [21597 21873])
            ("Buffer-menu-1-window" function
               (:documentation "Select this line's buffer, alone, in full frame."
                :user-visible-flag t)
                nil [21875 22075])
            ("Buffer-menu-this-window" function
               (:documentation "Select this line's buffer in this window."
                :user-visible-flag t)
                nil [22077 22217])
            ("Buffer-menu-other-window" function
               (:documentation "Select this line's buffer in other window, leaving buffer menu visible."
                :user-visible-flag t)
                nil [22219 22403])
            ("Buffer-menu-switch-other-window" function
               (:documentation "Make the other window select this line's buffer.
The current window remains selected."
                :user-visible-flag t)
                nil [22405 22597])
            ("Buffer-menu-2-window" function
               (:documentation "Select this line's buffer, with previous buffer in second window."
                :user-visible-flag t)
                nil [22599 22910])
            ("Buffer-menu-toggle-read-only" function
               (:documentation "Toggle read-only status of buffer on this line.
This behaves like invoking \\[read-only-mode] in that buffer."
                :user-visible-flag t)
                nil [22912 23277])
            ("Buffer-menu-bury" function
               (:documentation "Bury the buffer listed on this line."
                :user-visible-flag t)
                nil [23279 23761])
            ("Buffer-menu-view" function
               (:documentation "View this line's buffer in View mode."
                :user-visible-flag t)
                nil [23763 23887])
            ("Buffer-menu-view-other-window" function
               (:documentation "View this line's buffer in View mode in another window."
                :user-visible-flag t)
                nil [23889 24057])
            ("list-buffers-noselect" function
               (:documentation "Create and return a Buffer Menu buffer.
This is called by `buffer-menu' and others as a subroutine.

If FILES-ONLY is non-nil, show only file-visiting buffers.
If BUFFER-LIST is non-nil, it should be a list of buffers; it
means list those buffers and no others."
                :arguments ("files-only" "buffer-list"))
                nil [24122 24788])
            ("Buffer-menu-mouse-select" function
               (:documentation "Select the buffer whose line you click on."
                :user-visible-flag t
                :arguments ("event"))
                nil [24790 25212])
            ("list-buffers--refresh" function (:arguments ("buffer-list" "old-buffer")) nil [25214 27023])
            ("tabulated-list-entry-size->" function (:arguments ("entry1" "entry2")) nil [27025 27171])
            ("Buffer-menu--pretty-name" function (:arguments ("name")) nil [27173 27305])
            ("Buffer-menu--pretty-file-name" function (:arguments ("file")) nil [27307 27450]))          
      :file "buff-menu.el.gz"
      :pointmax 27479
      :fsize 7036
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889a94"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1197 1239])
            ("mouse" customgroup
               (:documentation "Input from the mouse."
                :user-visible-flag t)
                nil [1241 1348])
            ("mouse-yank-at-point" variable (:documentation "If non-nil, mouse yank commands yank at point instead of at click.") nil [1350 1473])
            ("mouse-drag-copy-region" variable (:documentation "If non-nil, copy to kill-ring upon mouse adjustments of the region.

This affects `mouse-save-then-kill' (\\[mouse-save-then-kill]) in
addition to mouse drags.") nil [1475 1712])
            ("mouse-1-click-follows-link" variable
               (:documentation "Non-nil means that clicking Mouse-1 on a link follows the link.

With the default setting, an ordinary Mouse-1 click on a link
performs the same action as Mouse-2 on that link, while a longer
Mouse-1 click (hold down the Mouse-1 button for more than 450
milliseconds) performs the original Mouse-1 binding (which
typically sets point where you click the mouse).

If value is an integer, the time elapsed between pressing and
releasing the mouse button determines whether to follow the link
or perform the normal Mouse-1 action (typically set point).
The absolute numeric value specifies the maximum duration of a
\"short click\" in milliseconds.  A positive value means that a
short click follows the link, and a longer click performs the
normal action.  A negative value gives the opposite behavior.

If value is `double', a double click follows the link.

Otherwise, a single Mouse-1 click unconditionally follows the link.

Note that dragging the mouse never follows the link.

This feature only works in modes that specifically identify
clickable text as links, so it may not work with some external
packages.  See `mouse-on-link-p' for details."
                :default-value 450)
                nil [1714 3127])
            ("mouse-1-click-in-non-selected-windows" variable
               (:documentation "If non-nil, a Mouse-1 click also follows links in non-selected windows.

If nil, a Mouse-1 click on a link in a non-selected window performs
the normal mouse-1 binding, typically selects the window and sets
point at the click position."
                :default-value t)
                nil [3129 3455])
            ("mouse--last-down" variable nil nil [3457 3486])
            ("mouse--down-1-maybe-follows-link" function (:arguments ("_prompt")) nil [3488 3666])
            ("mouse--click-1-maybe-follows-link" function
               (:documentation "Turn `mouse-1' events into `mouse-2' events if follows-link.
Expects to be bound to `(double-)mouse-1' in `key-translation-map'."
                :arguments ("_prompt"))
                nil [3668 5814])
            ("define-key" code nil nil [5816 5900])
            ("define-key" code nil nil [5901 5992])
            ("define-key" code nil nil [5993 6073])
            ("define-key" code nil nil [6074 6161])
            ("minor-mode-menu-from-indicator" function
               (:documentation "Show menu for minor mode specified by INDICATOR.
Interactively, INDICATOR is read using completion.
If there is no menu defined for the minor mode, then create one with
items `Turn Off' and `Help'."
                :user-visible-flag t
                :arguments ("indicator"))
                nil [6217 7470])
            ("mouse-minor-mode-menu" function
               (:documentation "Show minor-mode menu for EVENT on minor modes area of the mode line."
                :user-visible-flag t
                :arguments ("event"))
                nil [7472 7704])
            ("mouse-menu-major-mode-map" function nil nil [7706 8298])
            ("mouse-menu-non-singleton" function
               (:documentation "Return menu keybar MENUBAR, or a lone submenu inside it.
If MENUBAR defines exactly one submenu, return just that submenu.
Otherwise, return MENUBAR."
                :arguments ("menubar"))
                nil [8300 8755])
            ("mouse-menu-bar-map" function (:documentation "Return a keymap equivalent to the menu bar.
The contents are the items that would be in the menu bar whether or
not it is actually displayed.") nil [8757 10969])
            ("mouse-major-mode-menu" function
               (:documentation "Pop up a mode-specific menu of mouse commands.
Default to the Edit menu if the major mode doesn't define a menu."
                :arguments ("event" "prefix"))
                nil [10971 11337])
            ("mouse-popup-menubar" function
               (:documentation "Pop up a menu equivalent to the menu bar for keyboard EVENT with PREFIX.
The contents are the items that would be in the menu bar whether or
not it is actually displayed."
                :arguments ("event" "prefix"))
                nil [11339 11764])
            ("mouse-popup-menubar-stuff" function
               (:documentation "Popup a menu like either `mouse-major-mode-menu' or `mouse-popup-menubar'.
Use the former if the menu bar is showing, otherwise the latter."
                :arguments ("event" "prefix"))
                nil [11766 12228])
            ("mouse-minibuffer-check" function (:arguments ("event")) nil [12269 12580])
            ("mouse-delete-window" function
               (:documentation "Delete the window you click on.
Do nothing if the frame has just one window.
This command must be bound to a mouse click."
                :user-visible-flag t
                :arguments ("click"))
                nil [12582 12880])
            ("mouse-select-window" function
               (:documentation "Select the window clicked on; don't move point."
                :user-visible-flag t
                :arguments ("click"))
                nil [12882 13306])
            ("define-obsolete-function-alias" code nil nil [13308 13387])
            ("tear-off-window" function
               (:documentation "Delete the selected window, and create a new frame displaying its buffer."
                :user-visible-flag t
                :arguments ("click"))
                nil [13388 13773])
            ("mouse-delete-other-windows" function
               (:documentation "Delete all windows except the one you click on."
                :user-visible-flag t)
                nil [13775 13909])
            ("mouse-split-window-vertically" function
               (:documentation "Select Emacs window mouse is on, then split it vertically in half.
The window is split at the line clicked on.
This command must be bound to a mouse click."
                :user-visible-flag t
                :arguments ("click"))
                nil [13911 14741])
            ("mouse-split-window-horizontally" function
               (:documentation "Select Emacs window mouse is on, then split it horizontally in half.
The window is split at the column clicked on.
This command must be bound to a mouse click."
                :user-visible-flag t
                :arguments ("click"))
                nil [14743 15566])
            ("mouse-drag-line" function
               (:documentation "Drag a mode line, header line, or vertical line with the mouse.
START-EVENT is the starting mouse event of the drag action.  LINE
must be one of the symbols `header', `mode', or `vertical'."
                :arguments ("start-event" "line"))
                nil [15568 21583])
            ("mouse-drag-mode-line" function
               (:documentation "Change the height of a window by dragging on its mode line.
START-EVENT is the starting mouse event of the drag action.

If the drag happens in a mode line on the bottom of a frame and
that frame's `drag-with-mode-line' parameter is non-nil, drag the
frame instead."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [21585 23026])
            ("mouse-drag-header-line" function
               (:documentation "Change the height of a window by dragging on its header line.
START-EVENT is the starting mouse event of the drag action.

If the drag happens in a header line on the top of a frame and
that frame's `drag-with-header-line' parameter is non-nil, drag
the frame instead."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [23028 23728])
            ("mouse-drag-vertical-line" function
               (:documentation "Change the width of a window by dragging on a vertical line.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [23730 23963])
            ("mouse-resize-frame" function
               (:documentation "Helper function for `mouse-drag-frame'."
                :arguments ("frame" "x-diff" "y-diff" "x-move" "y-move"))
                nil [23966 25420])
            ("mouse-drag-frame" function
               (:documentation "Drag a frame or one of its edges with the mouse.
START-EVENT is the starting mouse event of the drag action.  Its
position window denotes the frame that will be dragged.

PART specifies the part that has been dragged and must be one of
the symbols 'left', 'top', 'right', 'bottom', 'top-left',
'top-right', 'bottom-left', 'bottom-right' to drag an internal
border or edge.  If PART equals 'move', this means to move the
frame with the mouse."
                :arguments ("start-event" "part"))
                nil [25422 38848])
            ("mouse-drag-left-edge" function
               (:documentation "Drag left edge of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [38850 39057])
            ("mouse-drag-top-left-corner" function
               (:documentation "Drag top left corner of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [39059 39282])
            ("mouse-drag-top-edge" function
               (:documentation "Drag top edge of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [39284 39488])
            ("mouse-drag-top-right-corner" function
               (:documentation "Drag top right corner of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [39490 39716])
            ("mouse-drag-right-edge" function
               (:documentation "Drag right edge of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [39718 39928])
            ("mouse-drag-bottom-right-corner" function
               (:documentation "Drag bottom right corner of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [39930 40165])
            ("mouse-drag-bottom-edge" function
               (:documentation "Drag bottom edge of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [40167 40380])
            ("mouse-drag-bottom-left-corner" function
               (:documentation "Drag bottom left corner of a frame with the mouse.
START-EVENT is the starting mouse event of the drag action."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [40382 40614])
            ("mouse-select-region-move-to-beginning" variable (:documentation "Effect of selecting a region extending backward from double click.
Nil means keep point at the position clicked (region end);
non-nil means move point to beginning of region.") nil [40616 40974])
            ("mouse-set-point" function
               (:documentation "Move point to the position clicked on with the mouse.
This should be bound to a mouse click event type.
If PROMOTE-TO-REGION is non-nil and event is a multiple-click, select
the corresponding element around point, with the resulting position of
point determined by `mouse-select-region-move-to-beginning'."
                :user-visible-flag t
                :arguments ("event" "promote-to-region"))
                nil [40976 41845])
            ("mouse-last-region-beg" variable nil nil [41847 41881])
            ("mouse-last-region-end" variable nil nil [41882 41916])
            ("mouse-last-region-tick" variable nil nil [41917 41952])
            ("mouse-region-match" function (:documentation "Return non-nil if there's an active region that was set with the mouse.") nil [41954 42246])
            ("mouse--drag-start-event" variable nil nil [42248 42284])
            ("mouse-set-region" function
               (:documentation "Set the region to the text dragged over, and copy to kill ring.
This should be bound to a mouse drag event.
See the `mouse-drag-copy-region' variable to control whether this
command alters the kill ring or not."
                :user-visible-flag t
                :arguments ("click"))
                nil [42286 44808])
            ("mouse-set-region-1" function nil nil [44810 45264])
            ("mouse-scroll-delay" variable
               (:documentation "The pause between scroll steps caused by mouse drags, in seconds.
If you drag the mouse beyond the edge of a window, Emacs scrolls the
window to bring the text beyond that edge into view, with a delay of
this many seconds between scroll steps.  Scrolling stops when you move
the mouse back into the window, or release the button.
This variable's value may be non-integral.
Setting this to zero causes Emacs to scroll as fast as it can."
                :default-value 0.25)
                nil [45266 45757])
            ("mouse-scroll-min-lines" variable
               (:documentation "The minimum number of lines scrolled by dragging mouse out of window.
Moving the mouse out the top or bottom edge of the window begins
scrolling repeatedly.  The number of lines scrolled per repetition
is normally equal to the number of lines beyond the window edge that
the mouse has moved.  However, it always scrolls at least the number
of lines specified by this variable."
                :default-value 1)
                nil [45759 46193])
            ("mouse-scroll-subr" function
               (:documentation "Scroll the window WINDOW, JUMP lines at a time, until new input arrives.
If OVERLAY is an overlay, let it stretch from START to the far edge of
the newly visible text.
Upon exit, point is at the far edge of the newly visible text."
                :arguments ("window" "jump" "overlay" "start"))
                nil [46195 47627])
            ("mouse-selection-click-count" variable nil nil [47629 47667])
            ("mouse-selection-click-count-buffer" variable nil nil [47669 47716])
            ("mouse-drag-region" function
               (:documentation "Set the region to the text that the mouse is dragged over.
Highlight the drag area as you move the mouse.
This must be bound to a button-down mouse event.
In Transient Mark mode, the highlighting remains as long as the mark
remains active.  Otherwise, it remains until the next input event.

When the region already exists and `mouse-drag-and-drop-region'
is non-nil, this moves the entire region of text to where mouse
is dragged over to."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [47718 48595])
            ("mouse-posn-property" function
               (:documentation "Look for a property at click position.
POS may be either a buffer position or a click position like
those returned from `event-start'.  If the click position is on
a string, the text property PROPERTY is examined.
If this is nil or the click is not on a string, then
the corresponding buffer position is searched for PROPERTY.
If PROPERTY is encountered in one of those places,
its value is returned."
                :arguments ("pos" "property"))
                nil [48597 49640])
            ("mouse-on-link-p" function
               (:documentation "Return non-nil if POS is on a link in the current buffer.
POS must specify a buffer position in the current buffer, as a list
of the form returned by the `event-start' and `event-end' functions,
or a mouse event location in the selected window (see `event-start').
However, if `mouse-1-click-in-non-selected-windows' is non-nil,
POS may be a mouse event location in any window.

A clickable link is identified by one of the following methods:

- If the character at POS has a non-nil `follow-link' text or
overlay property, the value of that property determines what to do.

- If there is a local key-binding or a keybinding at position POS
for the `follow-link' event, the binding of that event determines
what to do.

The resulting value determine whether POS is inside a link:

- If the value is `mouse-face', POS is inside a link if there
is a non-nil `mouse-face' property at POS.  Return t in this case.

- If the value is a function, FUNC, POS is inside a link if
the call (FUNC POS) returns non-nil.  Return the return value
from that call.  Arg is (posn-point POS) if POS is a mouse event.

- Otherwise, return the value itself.

The return value is interpreted as follows:

- If it is an array, the mouse-1 event is translated into the
first element of that array, i.e. the action of the mouse-1
click is the local or global binding of that event.

- Otherwise, the mouse-1 event is translated into a mouse-2 event
at the same position."
                :arguments ("pos"))
                nil [49642 51922])
            ("mouse-fixup-help-message" function
               (:documentation "Fix help message MSG for `mouse-1-click-follows-link'."
                :arguments ("msg"))
                nil [51924 52713])
            ("mouse-drag-track" function
               (:documentation "Track mouse drags by highlighting area between point and cursor.
The region will be defined with mark and point."
                :arguments ("start-event"))
                nil [52715 56695])
            ("mouse--drag-set-mark-and-point" function (:arguments ("start" "click" "click-count")) nil [56697 57063])
            ("mouse-skip-word" function
               (:documentation "Skip over word, over whitespace, or over identical punctuation.
If DIR is positive skip forward; if negative, skip backward."
                :arguments ("dir"))
                nil [57116 58218])
            ("mouse-start-end" function
               (:documentation "Return a list of region bounds based on START and END according to MODE.
If MODE is 0 then set point to (min START END), mark to (max START END).
If MODE is 1 then set point to start of word at (min START END),
mark to end of word at (max START END).
If MODE is 2 then do the same for lines."
                :arguments ("start" "end" "mode"))
                nil [58220 60917])
            ("mouse-set-mark-fast" function (:arguments ("click")) nil [61001 61217])
            ("mouse-undouble-last-event" function (:arguments ("events")) nil [61219 61892])
            ("mouse-set-mark" function
               (:documentation "Set mark at the position clicked on with the mouse.
Display cursor at that position for a second.
This must be bound to a mouse click."
                :user-visible-flag t
                :arguments ("click"))
                nil [61967 62464])
            ("mouse-kill" function
               (:documentation "Kill the region between point and the mouse click.
The text is saved in the kill ring, as with \\[kill-region]."
                :user-visible-flag t
                :arguments ("click"))
                nil [62466 62873])
            ("mouse-yank-at-click" function
               (:documentation "Insert the last stretch of killed text at the position clicked on.
Also move point to one end of the text thus inserted (normally the end),
and set mark at the beginning.
Prefix arguments are interpreted as with \\[yank].
If `mouse-yank-at-point' is non-nil, insert at point
regardless of where you click."
                :user-visible-flag t
                :arguments ("click" "arg"))
                nil [62875 63643])
            ("mouse-yank-primary" function
               (:documentation "Insert the primary selection at the position clicked on.
Move point to the end of the inserted text, and set mark at
beginning.  If `mouse-yank-at-point' is non-nil, insert at point
regardless of where you click."
                :user-visible-flag t
                :arguments ("click"))
                nil [63645 64358])
            ("mouse-kill-ring-save" function
               (:documentation "Copy the region between point and the mouse click in the kill ring.
This does not delete the region; it acts like \\[kill-ring-save]."
                :user-visible-flag t
                :arguments ("click"))
                nil [64360 64658])
            ("mouse-save-then-kill-posn" variable nil nil [64893 64931])
            ("mouse-save-then-kill-delete-region" function (:arguments ("beg" "end")) nil [64933 66414])
            ("mouse-save-then-kill" function
               (:documentation "Set the region according to CLICK; the second time, kill it.
CLICK should be a mouse click event.

If the region is inactive, activate it temporarily.  Set mark at
the original point, and move point to the position of CLICK.

If the region is already active, adjust it.  Normally, do this by
moving point or mark, whichever is closer, to CLICK.  But if you
have selected whole words or lines, move point or mark to the
word or line boundary closest to CLICK instead.

If `mouse-drag-copy-region' is non-nil, this command also saves the
new region to the kill ring (replacing the previous kill if the
previous region was just saved to the kill ring).

If this command is called a second consecutive time with the same
CLICK position, kill the region (or delete it
if `mouse-drag-copy-region' is non-nil)"
                :user-visible-flag t
                :arguments ("click"))
                nil [66416 69861])
            ("global-set-key" code nil nil [69865 69916])
            ("global-set-key" code nil nil [69917 69971])
            ("global-set-key" code nil nil [69972 70027])
            ("global-set-key" code nil nil [70028 70088])
            ("global-set-key" code nil nil [70089 70139])
            ("mouse-secondary-overlay" variable
               (:documentation "An overlay which records the current secondary selection.
It is deleted when there is no secondary selection."
                :constant-flag t
                :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol 'face 'secondary-selection) ol))
                nil [70141 70422])
            ("mouse-secondary-click-count" variable nil nil [70424 70462])
            ("mouse-secondary-start" variable nil nil [70556 70590])
            ("mouse-start-secondary" function
               (:documentation "Set one end of the secondary selection to the position clicked on.
Use \\[mouse-secondary-save-then-kill] to set the other end
and complete the secondary selection."
                :user-visible-flag t
                :arguments ("click"))
                nil [70592 71235])
            ("mouse-set-secondary" function
               (:documentation "Set the secondary selection to the text that the mouse is dragged over.
This must be bound to a mouse drag event."
                :user-visible-flag t
                :arguments ("click"))
                nil [71237 71860])
            ("mouse-drag-secondary" function
               (:documentation "Set the secondary selection to the text that the mouse is dragged over.
Highlight the drag area as you move the mouse.
This must be bound to a button-down mouse event.
The function returns a non-nil value if it creates a secondary selection."
                :user-visible-flag t
                :arguments ("start-event"))
                nil [71862 75091])
            ("mouse-yank-secondary" function
               (:documentation "Insert the secondary selection at the position clicked on.
Move point to the end of the inserted text.
If `mouse-yank-at-point' is non-nil, insert at point
regardless of where you click."
                :user-visible-flag t
                :arguments ("click"))
                nil [75093 75641])
            ("mouse-kill-secondary" function
               (:documentation "Kill the text in the secondary selection.
This is intended more as a keyboard command than as a mouse command
but it can work as either one.

The current buffer (in case of keyboard use), or the buffer clicked on,
must be the one that the secondary selection is in.  This requirement
is to prevent accidents."
                :user-visible-flag t)
                nil [75643 76546])
            ("mouse-secondary-save-then-kill" function
               (:documentation "Set the secondary selection and save it to the kill ring.
The second time, kill it.  CLICK should be a mouse click event.

If you have not called `mouse-start-secondary' in the clicked
buffer, activate the secondary selection and set it between point
and the click position CLICK.

Otherwise, adjust the bounds of the secondary selection.
Normally, do this by moving its beginning or end, whichever is
closer, to CLICK.  But if you have selected whole words or lines,
adjust to the word or line boundary closest to CLICK instead.

If this command is called a second consecutive time with the same
CLICK position, kill the secondary selection."
                :user-visible-flag t
                :arguments ("click"))
                nil [76548 80456])
            ("secondary-selection-exist-p" function (:documentation "Return non-nil if the secondary selection exists in the current buffer.") nil [80458 80643])
            ("secondary-selection-to-region" function (:documentation "Set beginning and end of the region to those of the secondary selection.
This puts mark and point at the beginning and the end of the
secondary selection, respectively.  This works when the secondary
selection exists and the region does not exist in current buffer;
the secondary selection will be deleted afterward.
If the region is active, or the secondary selection doesn't exist,
this function does nothing.") nil [80645 81445])
            ("secondary-selection-from-region" function (:documentation "Set beginning and end of the secondary selection to those of the region.
When there is no region, this function does nothing.") nil [81447 81877])
            ("mouse-buffer-menu-maxlen" variable
               (:documentation "Number of buffers in one pane (submenu) of the buffer menu.
If we have lots of buffers, divide them into groups of
`mouse-buffer-menu-maxlen' and make a pane (or submenu) for each one."
                :default-value 20)
                nil [81881 82126])
            ("mouse-buffer-menu-mode-mult" variable
               (:documentation "Group the buffers by the major mode groups on \\[mouse-buffer-menu]?
This number which determines (in a hairy way) whether \\[mouse-buffer-menu]
will split the buffer menu by the major modes (see
`mouse-buffer-menu-mode-groups') or just by menu length.
Set to 1 (or even 0!) if you want to group by major mode always, and to
a large number if you prefer a mixed multitude.  The default is 4."
                :default-value 4)
                nil [82128 82600])
            ("mouse-buffer-menu-mode-groups" variable
               (:documentation "How to group various major modes together in \\[mouse-buffer-menu].
Each element has the form (REGEXP . GROUPNAME).
If the major mode's name string matches REGEXP, use GROUPNAME instead."
                :default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) '(("Info\\|Help\\|Apropos\\|Man" . "Help") ("\\bVM\\b\\|\\bMH\\b\\|Message\\|Mail\\|Group\\|Score\\|Summary\\|Article" . "Mail/News") ("\\<C\\>" . "C") ("ObjC" . "C") ("Text" . "Text") ("Outline" . "Text") ("\\(HT\\|SG\\|X\\|XHT\\)ML" . "SGML") ("log\\|diff\\|vc\\|cvs\\|Annotate" . "Version Control") ("Threads\\|Memory\\|Disassembly\\|Breakpoints\\|Frames\\|Locals\\|Registers\\|Inferior I/O\\|Debugger" . "GDB") ("Lisp" . "Lisp"))))
                nil [82602 83412])
            ("mouse-buffer-menu" function
               (:documentation "Pop up a menu of buffers for selection with the mouse.
This switches buffers in the window that you clicked on,
and selects that window."
                :user-visible-flag t
                :arguments ("event"))
                nil [83414 83894])
            ("mouse-buffer-menu-map" function nil nil [83896 87043])
            ("mouse-buffer-menu-alist" function (:arguments ("buffers")) nil [87045 88089])
            ("mouse-buffer-menu-split" function (:arguments ("title" "alist")) nil [88091 88844])
            ("define-obsolete-function-alias" code nil nil [88847 88932])
            ("font-menu-add-default" function nil nil [88954 89262])
            ("x-fixed-font-alist" variable
               (:documentation "X fonts suitable for use in Emacs."
                :default-value (list (purecopy "Font Menu") (cons (purecopy "Misc") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) '(("fixed" "fixed") ("6x10" "-misc-fixed-medium-r-normal--10-*-*-*-c-60-iso8859-1" "6x10") ("6x12" "-misc-fixed-medium-r-semicondensed--12-*-*-*-c-60-iso8859-1" "6x12") ("6x13" "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" "6x13") ("7x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1" "7x13") ("7x14" "-misc-fixed-medium-r-normal--14-*-*-*-c-70-iso8859-1" "7x14") ("8x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-80-iso8859-1" "8x13") ("9x15" "-misc-fixed-medium-r-normal--15-*-*-*-c-90-iso8859-1" "9x15") ("10x20" "-misc-fixed-medium-r-normal--20-*-*-*-c-100-iso8859-1" "10x20") ("11x18" "-misc-fixed-medium-r-normal--18-*-*-*-c-110-iso8859-1" "11x18") ("12x24" "-misc-fixed-medium-r-normal--24-*-*-*-c-120-iso8859-1" "12x24") ("") ("clean 5x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-50-iso8859-1") ("clean 6x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-60-iso8859-1") ("clean 8x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-80-iso8859-1") ("clean 8x10" "-schumacher-clean-medium-r-normal--10-*-*-*-c-80-iso8859-1") ("clean 8x14" "-schumacher-clean-medium-r-normal--14-*-*-*-c-80-iso8859-1") ("clean 8x16" "-schumacher-clean-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("") ("sony 8x16" "-sony-fixed-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("lucidasanstypewriter-12" "-b&h-lucidatypewriter-medium-r-normal-sans-*-120-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-14" "-b&h-lucidatypewriter-bold-r-normal-sans-*-140-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-24" "-b&h-lucidatypewriter-bold-r-normal-sans-*-240-*-*-*-*-iso8859-1")))) (cons (purecopy "Courier") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) '(("8" "-adobe-courier-medium-r-normal--*-80-*-*-m-*-iso8859-1") ("10" "-adobe-courier-medium-r-normal--*-100-*-*-m-*-iso8859-1") ("12" "-adobe-courier-medium-r-normal--*-120-*-*-m-*-iso8859-1") ("14" "-adobe-courier-medium-r-normal--*-140-*-*-m-*-iso8859-1") ("18" "-adobe-courier-medium-r-normal--*-180-*-*-m-*-iso8859-1") ("24" "-adobe-courier-medium-r-normal--*-240-*-*-m-*-iso8859-1") ("8 bold" "-adobe-courier-bold-r-normal--*-80-*-*-m-*-iso8859-1") ("10 bold" "-adobe-courier-bold-r-normal--*-100-*-*-m-*-iso8859-1") ("12 bold" "-adobe-courier-bold-r-normal--*-120-*-*-m-*-iso8859-1") ("14 bold" "-adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1") ("18 bold" "-adobe-courier-bold-r-normal--*-180-*-*-m-*-iso8859-1") ("24 bold" "-adobe-courier-bold-r-normal--*-240-*-*-m-*-iso8859-1") ("8 slant" "-adobe-courier-medium-o-normal--*-80-*-*-m-*-iso8859-1") ("10 slant" "-adobe-courier-medium-o-normal--*-100-*-*-m-*-iso8859-1") ("12 slant" "-adobe-courier-medium-o-normal--*-120-*-*-m-*-iso8859-1") ("14 slant" "-adobe-courier-medium-o-normal--*-140-*-*-m-*-iso8859-1") ("18 slant" "-adobe-courier-medium-o-normal--*-180-*-*-m-*-iso8859-1") ("24 slant" "-adobe-courier-medium-o-normal--*-240-*-*-m-*-iso8859-1") ("8 bold slant" "-adobe-courier-bold-o-normal--*-80-*-*-m-*-iso8859-1") ("10 bold slant" "-adobe-courier-bold-o-normal--*-100-*-*-m-*-iso8859-1") ("12 bold slant" "-adobe-courier-bold-o-normal--*-120-*-*-m-*-iso8859-1") ("14 bold slant" "-adobe-courier-bold-o-normal--*-140-*-*-m-*-iso8859-1") ("18 bold slant" "-adobe-courier-bold-o-normal--*-180-*-*-m-*-iso8859-1") ("24 bold slant" "-adobe-courier-bold-o-normal--*-240-*-*-m-*-iso8859-1"))))))
                nil [89264 93544])
            ("declare-function" code nil nil [93546 93599])
            ("mouse-select-font" function
               (:documentation "Prompt for a font name, using `x-popup-menu', and return it."
                :user-visible-flag t)
                nil [93601 93982])
            ("declare-function" code nil nil [93984 94031])
            ("mouse-set-font" function
               (:documentation "Set the default font for the selected frame.
The argument FONTS is a list of font names; the first valid font
in this list is used.

When called interactively, pop up a menu and allow the user to
choose a font."
                :user-visible-flag t
                :arguments ("fonts"))
                nil [94033 94880])
            ("mouse-appearance-menu-map" variable nil nil [94882 94920])
            ("declare-function" code nil nil [94921 94988])
            ("declare-function" code nil nil [94999 95105])
            ("declare-function" code nil nil [95106 95177])
            ("w32-use-w32-font-dialog" variable nil nil [95178 95210])
            ("w32-fixed-font-alist" variable nil nil [95211 95240])
            ("mouse-appearance-menu" function
               (:documentation "Show a menu for changing the default face in the current buffer."
                :user-visible-flag t
                :arguments ("event"))
                nil [95242 98020])
            ("mouse-drag-and-drop-region" variable (:documentation "If non-nil, dragging the mouse drags the region, if it exists.
If the value is a modifier, such as `control' or `shift' or
`meta', then if that modifier key is pressed when dropping the
region, text is copied instead of being cut.") nil [98050 98736])
            ("mouse-drag-and-drop-region-cut-when-buffers-differ" variable (:documentation "If non-nil, cut text also when source and destination buffers differ.
If this option is nil, `mouse-drag-and-drop-region' will leave
the text in the source buffer alone when dropping it in a
different buffer.  If this is non-nil, it will cut the text just
as it does when dropping text in the source buffer.") nil [98738 99151])
            ("mouse-drag-and-drop-region-show-tooltip" variable
               (:documentation "If non-nil, text is shown by a tooltip in a graphic display.
If this option is nil, `mouse-drag-and-drop-region' does not show
tooltips.  If this is t, it shows the entire text dragged in a
tooltip.  If this is an integer (as with the default value of
256), it will show that many characters of the dragged text in
a tooltip."
                :default-value 256)
                nil [99153 99573])
            ("mouse-drag-and-drop-region-show-cursor" variable
               (:documentation "If non-nil, move point with mouse cursor during dragging.
If this is nil, `mouse-drag-and-drop-region' leaves point alone.
Otherwise, it will move point together with the mouse cursor and,
in addition, temporarily highlight the original region with the
`mouse-drag-and-drop-region' face."
                :default-value t)
                nil [99575 99954])
            ("mouse-drag-and-drop-region" variable
               (:documentation "Face to highlight original text during dragging.
This face is used by `mouse-drag-and-drop-region' to temporarily
highlight the original region when
`mouse-drag-and-drop-region-show-cursor' is non-nil."
                :default-value '((t :inherit region))
                :type "face")
                nil [99956 100239])
            ("mouse-drag-and-drop-region" function
               (:documentation "Move text in the region to point where mouse is dragged to.
The transportation of text is also referred as `drag and drop'.
When text is dragged over to a different buffer, or if a
modifier key was pressed when dropping, and the value of the
variable `mouse-drag-and-drop-region' is that modifier, the text
is copied instead of being cut."
                :user-visible-flag t
                :arguments ("event"))
                nil [100241 111534])
            ("global-set-key" code nil nil [111572 111622])
            ("global-set-key" code nil nil [111623 111666])
            ("global-set-key" code nil nil [111667 111716])
            ("mouse--strip-first-event" function (:arguments ("_prompt")) nil [111718 111807])
            ("define-key" code nil nil [111809 111886])
            ("define-key" code nil nil [111887 111965])
            ("global-set-key" code nil nil [111967 112013])
            ("define-key" code nil nil [112086 112164])
            ("define-key" code nil nil [112165 112242])
            ("global-set-key" code nil nil [112243 112291])
            ("define-key" code nil nil [112292 112370])
            ("define-key" code nil nil [112371 112448])
            ("global-set-key" code nil nil [112573 112625])
            ("if" code nil nil [112626 112722])
            ("global-set-key" code nil nil [112766 113024])
            ("global-set-key" code nil nil [113244 113311])
            ("global-set-key" code nil nil [113312 113371])
            ("global-set-key" code nil nil [113438 113501])
            ("global-set-key" code nil nil [113502 113559])
            ("global-set-key" code nil nil [113560 113624])
            ("global-set-key" code nil nil [113625 113682])
            ("global-set-key" code nil nil [113683 113754])
            ("global-set-key" code nil nil [113755 113834])
            ("global-set-key" code nil nil [113835 113918])
            ("global-set-key" code nil nil [113919 113990])
            ("global-set-key" code nil nil [113991 114052])
            ("global-set-key" code nil nil [114053 114126])
            ("global-set-key" code nil nil [114127 114198])
            ("global-set-key" code nil nil [114199 114247])
            ("global-set-key" code nil nil [114248 114321])
            ("global-set-key" code nil nil [114322 114390])
            ("global-set-key" code nil nil [114391 114440])
            ("global-set-key" code nil nil [114441 114517])
            ("global-set-key" code nil nil [114518 114581])
            ("global-set-key" code nil nil [114582 114626])
            ("global-set-key" code nil nil [114627 114702])
            ("global-set-key" code nil nil [114703 114753])
            ("global-set-key" code nil nil [114754 114815])
            ("global-set-key" code nil nil [114816 114859])
            ("global-set-key" code nil nil [114860 114937])
            ("global-set-key" code nil nil [114938 114989])
            ("global-set-key" code nil nil [114990 115055])
            ("global-set-key" code nil nil [115056 115101])
            ("global-set-key" code nil nil [115102 115185])
            ("global-set-key" code nil nil [115186 115240])
            ("global-set-key" code nil nil [115241 115308])
            ("global-set-key" code nil nil [115309 115355])
            ("global-set-key" code nil nil [115356 115437])
            ("global-set-key" code nil nil [115438 115491])
            ("mouse" package nil nil [115493 115509]))          
      :file "mouse.el.gz"
      :pointmax 115534
      :fsize 27450
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889ab4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable (:documentation "Defaults for Font Lock mode specified by the major mode.
Defaults should be of the form:

 (KEYWORDS [KEYWORDS-ONLY [CASE-FOLD [SYNTAX-ALIST ...]]])

KEYWORDS may be a symbol (a variable or function whose value is the keywords
to use for fontification) or a list of symbols (specifying different levels
of fontification).

If KEYWORDS-ONLY is non-nil, syntactic fontification (strings and
comments) is not performed.

If CASE-FOLD is non-nil, the case of the keywords is ignored when fontifying.

If SYNTAX-ALIST is non-nil, it should be a list of cons pairs of the form
(CHAR-OR-STRING . STRING) used to set the local Font Lock syntax table, for
keyword and syntactic fontification (see `modify-syntax-entry').

These item elements are used by Font Lock mode to set the variables
`font-lock-keywords', `font-lock-keywords-only',
`font-lock-keywords-case-fold-search', `font-lock-syntax-table'.

Further item elements are alists of the form (VARIABLE . VALUE) and are in no
particular order.  Each VARIABLE is made buffer-local before set to VALUE.

Currently, appropriate variables include `font-lock-mark-block-function'.
If this is non-nil, it should be a function with no args used to mark any
enclosing block of text, for fontification via \\[font-lock-fontify-block].
Typical values are `mark-defun' for programming modes or `mark-paragraph' for
textual modes (i.e., the mode-dependent function is known to put point and mark
around a text block relevant to that mode).

Other variables include that for syntactic keyword fontification,
`font-lock-syntactic-keywords' and those for buffer-specialized fontification
functions, `font-lock-fontify-buffer-function',
`font-lock-unfontify-buffer-function', `font-lock-fontify-region-function',
`font-lock-unfontify-region-function', and `font-lock-inhibit-thing-lock'.") nil [1098 2954])
            ("put" code nil nil [2970 3019])
            ("make-variable-buffer-local" code nil nil [3020 3068])
            ("font-lock-function" variable
               (:documentation "A function which is called when `font-lock-mode' is toggled.
It will be passed one argument, which is the current value of
`font-lock-mode'."
                :default-value 'font-lock-default-function)
                nil [3070 3270])
            ("font-lock-major-mode" variable nil nil [3337 3366])
            ("define-minor-mode" code nil nil [3368 6086])
            ("font-lock-change-mode" function nil nil [6181 6235])
            ("font-lock-defontify" function (:documentation "Clear out all `font-lock-face' properties in current buffer.
A major mode that uses `font-lock-face' properties might want to put
this function onto `change-major-mode-hook'.") nil [6237 6671])
            ("font-lock-set-defaults" variable nil nil [6673 6704])
            ("font-lock-default-function" function (:arguments ("mode")) nil [6705 7785])
            ("turn-on-font-lock" function (:documentation "Turn on Font Lock mode (only if the terminal can display it).") nil [7787 7928])
            ("font-lock-global-modes" variable
               (:documentation "Modes for which Font Lock mode is automagically turned on.
Global Font Lock mode is controlled by the command `global-font-lock-mode'.
If nil, means no modes have Font Lock mode automatically turned on.
If t, all modes that support Font Lock mode have it automatically turned on.
If a list, it should be a list of `major-mode' symbol names for which Font Lock
mode should be automatically turned on.  The sense of the list is negated if it
begins with `not'.  For example:
 (c-mode c++-mode)
means that Font Lock mode is turned on for buffers in C and C++ modes only."
                :default-value t)
                nil [10853 11698])
            ("turn-on-font-lock-if-desired" function nil nil [11700 12014])
            ("define-globalized-minor-mode" code nil nil [12016 12327])
            ("font-core" package nil nil [12364 12384]))          
      :file "font-core.el.gz"
      :pointmax 12413
      :fsize 4606
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1889ad4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [5772 5788])
            ("format-spec" include nil nil [5789 5811])
            ("image-mode" include nil nil [5812 5833])
            ("widget" include nil nil [5834 5851])
            ("wid-edit" include nil nil [5894 5913])
            ("cl-lib" include nil nil [5874 5891])
            ("image-dired" customgroup
               (:documentation "Use dired to browse your images as thumbnails, and more."
                :user-visible-flag t)
                nil [5916 6092])
            ("image-dired-dir" variable
               (:documentation "Directory where thumbnail images are stored."
                :default-value (locate-user-emacs-file "image-dired/"))
                nil [6094 6251])
            ("image-dired-thumbnail-storage" variable
               (:documentation "How to store image-dired's thumbnail files.
Image-Dired can store thumbnail files in one of two ways and this is
controlled by this variable.  \"Use image-dired dir\" means that the
thumbnails are stored in a central directory.  \"Per directory\"
means that each thumbnail is stored in a subdirectory called
\".image-dired\" in the same directory where the image file is.
\"Thumbnail Managing Standard\" means that the thumbnails are
stored and generated according to the Thumbnail Managing Standard
that allows sharing of thumbnails across different programs."
                :default-value 'use-image-dired-dir)
                nil [6253 7265])
            ("image-dired-db-file" variable
               (:documentation "Database file where file names and their associated tags are stored."
                :default-value (expand-file-name ".image-dired_db" image-dired-dir))
                nil [7267 7462])
            ("image-dired-temp-image-file" variable
               (:documentation "Name of temporary image file used by various commands."
                :default-value (expand-file-name ".image-dired_temp" image-dired-dir))
                nil [7464 7655])
            ("image-dired-gallery-dir" variable
               (:documentation "Directory to store generated gallery html pages.
This path needs to be \"shared\" to the public so that it can access
the index.html page that image-dired creates."
                :default-value (expand-file-name ".image-dired_gallery" image-dired-dir))
                nil [7657 7961])
            ("image-dired-gallery-image-root-url" variable
               (:documentation "URL where the full size images are to be found.
Note that this path has to be configured in your web server.  Image-Dired
expects to find pictures in this directory."
                :default-value "http://your.own.server/image-diredpics")
                nil [7963 8258])
            ("image-dired-gallery-thumb-image-root-url" variable
               (:documentation "URL where the thumbnail images are to be found.
Note that this path has to be configured in your web server.  Image-Dired
expects to find pictures in this directory."
                :default-value "http://your.own.server/image-diredthumbs")
                nil [8260 8563])
            ("image-dired-cmd-create-thumbnail-program" variable
               (:documentation "Executable used to create thumbnail.
Used together with `image-dired-cmd-create-thumbnail-options'."
                :default-value "convert")
                nil [8565 8769])
            ("image-dired-cmd-create-thumbnail-options" variable
               (:documentation "Options of command used to create thumbnail image.
Used with `image-dired-cmd-create-thumbnail-program'.
Available format specifiers are: %w which is replaced by
`image-dired-thumb-width', %h which is replaced by `image-dired-thumb-height',
%f which is replaced by the file name of the original image and %t
which is replaced by the file name of the thumbnail file."
                :default-value '("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))
                nil [8771 9343])
            ("image-dired-cmd-create-temp-image-program" variable
               (:documentation "Executable used to create temporary image.
Used together with `image-dired-cmd-create-temp-image-options'."
                :default-value "convert")
                nil [9345 9555])
            ("image-dired-cmd-create-temp-image-options" variable
               (:documentation "Options of command used to create temporary image for display window.
Used together with `image-dired-cmd-create-temp-image-program',
Available format specifiers are: %w and %h which are replaced by
the calculated max size for width and height in the image display window,
%f which is replaced by the file name of the original image and %t which
is replaced by the file name of the temporary file."
                :default-value '("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))
                nil [9557 10162])
            ("image-dired-cmd-pngnq-program" variable
               (:documentation "The file name of the `pngnq' program.
It quantizes colors of PNG images down to 256 colors or fewer
using the NeuQuant algorithm."
                :default-value (or (executable-find "pngnq") (executable-find "pngnq-s9")))
                nil [10164 10497])
            ("image-dired-cmd-pngnq-options" variable
               (:documentation "Arguments to pass `image-dired-cmd-pngnq-program'.
Available format specifiers are the same as in
`image-dired-cmd-create-thumbnail-options'."
                :default-value '("-f" "%t"))
                nil [10499 10784])
            ("image-dired-cmd-pngcrush-program" variable
               (:documentation "The file name of the `pngcrush' program.
It optimizes the compression of PNG images.  Also it adds PNG textual chunks
with the information required by the Thumbnail Managing Standard."
                :default-value (executable-find "pngcrush"))
                nil [10786 11119])
            ("image-dired-cmd-pngcrush-options" variable
               (:documentation "Arguments for `image-dired-cmd-pngcrush-program'.
Available format specifiers are the same as in
`image-dired-cmd-create-thumbnail-options', with %q for a
temporary file name (typically generated by pnqnq)"
                :default-value `("-q" "-text" "b" "Description" "Thumbnail of file://%f" "-text" "b" "Software" ,(emacs-version) "-text" "b" "Thumb::MTime" "%m" "-text" "b" "Thumb::URI" "file://%f" "%q" "%t"))
                nil [11121 11855])
            ("image-dired-cmd-optipng-program" variable
               (:documentation "The file name of the `optipng' program."
                :default-value (executable-find "optipng"))
                nil [11857 12062])
            ("image-dired-cmd-optipng-options" variable
               (:documentation "Arguments passed to `image-dired-optipng-program'.
Available format specifiers are described in
`image-dired-cmd-create-thumbnail-options'."
                :default-value '("-o5" "%t"))
                nil [12064 12385])
            ("image-dired-cmd-create-standard-thumbnail-options" variable
               (:documentation "Options for creating thumbnails according to the Thumbnail Managing Standard.
Available format specifiers are the same as in
`image-dired-cmd-create-thumbnail-options', with %m for file modification time."
                :default-value (append '("-size" "%wx%h" "%f[0]") (unless (or image-dired-cmd-pngcrush-program image-dired-cmd-pngnq-program) (list "-set" "Thumb::MTime" "%m" "-set" "Thumb::URI" "file://%f" "-set" "Description" "Thumbnail of file://%f" "-set" "Software" (emacs-version))) '("-thumbnail" "%wx%h>" "png:%t")))
                nil [12387 13141])
            ("image-dired-cmd-rotate-thumbnail-program" variable
               (:documentation "Executable used to rotate thumbnail.
Used together with `image-dired-cmd-rotate-thumbnail-options'."
                :default-value "mogrify")
                nil [13143 13347])
            ("image-dired-cmd-rotate-thumbnail-options" variable
               (:documentation "Arguments of command used to rotate thumbnail image.
Used with `image-dired-cmd-rotate-thumbnail-program'.
Available format specifiers are: %d which is replaced by the
number of (positive) degrees to rotate the image, normally 90 or 270
(for 90 degrees right and left), %t which is replaced by the file name
of the thumbnail file."
                :default-value '("-rotate" "%d" "%t"))
                nil [13349 13845])
            ("image-dired-cmd-rotate-original-program" variable
               (:documentation "Executable used to rotate original image.
Used together with `image-dired-cmd-rotate-original-options'."
                :default-value "jpegtran")
                nil [13847 14055])
            ("image-dired-cmd-rotate-original-options" variable
               (:documentation "Arguments of command used to rotate original image.
Used with `image-dired-cmd-rotate-original-program'.
Available format specifiers are: %d which is replaced by the
number of (positive) degrees to rotate the image, normally 90 or
270 (for 90 degrees right and left), %o which is replaced by the
original image file name and %t which is replaced by
`image-dired-temp-image-file'."
                :default-value '("-rotate" "%d" "-copy" "all" "-outfile" "%t" "%o"))
                nil [14057 14631])
            ("image-dired-temp-rotate-image-file" variable
               (:documentation "Temporary file for rotate operations."
                :default-value (expand-file-name ".image-dired_rotate_temp" image-dired-dir))
                nil [14633 14821])
            ("image-dired-rotate-original-ask-before-overwrite" variable
               (:documentation "Confirm overwrite of original file after rotate operation.
If non-nil, ask user for confirmation before overwriting the
original file with `image-dired-temp-rotate-image-file'."
                :default-value t)
                nil [14823 15105])
            ("image-dired-cmd-write-exif-data-program" variable
               (:documentation "Program used to write EXIF data to image.
Used together with `image-dired-cmd-write-exif-data-options'."
                :default-value "exiftool")
                nil [15107 15315])
            ("image-dired-cmd-write-exif-data-options" variable
               (:documentation "Arguments of command used to write EXIF data.
Used with `image-dired-cmd-write-exif-data-program'.
Available format specifiers are: %f which is replaced by
the image file name, %t which is replaced by the tag name and %v
which is replaced by the tag value."
                :default-value '("-%t=%v" "%f"))
                nil [15317 15731])
            ("image-dired-cmd-read-exif-data-program" variable
               (:documentation "Program used to read EXIF data to image.
Used together with `image-dired-cmd-read-exif-data-options'."
                :default-value "exiftool")
                nil [15733 15938])
            ("image-dired-cmd-read-exif-data-options" variable
               (:documentation "Arguments of command used to read EXIF data.
Used with `image-dired-cmd-read-exif-data-program'.
Available format specifiers are: %f which is replaced
by the image file name and %t which is replaced by the tag name."
                :default-value '("-s" "-s" "-s" "-%t" "%f"))
                nil [15940 16324])
            ("image-dired-gallery-hidden-tags" variable
               (:documentation "List of \"hidden\" tags.
Used by `image-dired-gallery-generate' to leave out \"hidden\" images."
                :default-value (list "private" "hidden" "pending"))
                nil [16326 16554])
            ("image-dired-thumb-size" variable
               (:documentation "Size of thumbnails, in pixels.
This is the default size for both `image-dired-thumb-width'
and `image-dired-thumb-height'."
                :default-value (cond ((eq 'standard image-dired-thumbnail-storage) 128) ((eq 'standard-large image-dired-thumbnail-storage) 256) (t 100)))
                nil [16556 16890])
            ("image-dired-thumb-width" variable
               (:documentation "Width of thumbnails, in pixels."
                :default-value image-dired-thumb-size)
                nil [16892 17025])
            ("image-dired-thumb-height" variable
               (:documentation "Height of thumbnails, in pixels."
                :default-value image-dired-thumb-size)
                nil [17027 17162])
            ("image-dired-thumb-relief" variable
               (:documentation "Size of button-like border around thumbnails."
                :default-value 2)
                nil [17164 17291])
            ("image-dired-thumb-margin" variable
               (:documentation "Size of the margin around thumbnails.
This is where you see the cursor."
                :default-value 2)
                nil [17293 17446])
            ("image-dired-line-up-method" variable
               (:documentation "Default method for line-up of thumbnails in thumbnail buffer.
Used by `image-dired-display-thumbs' and other functions that needs
to line-up thumbnails.  Dynamic means to use the available width of
the window containing the thumbnail buffer, Fixed means to use
`image-dired-thumbs-per-row', Interactive is for asking the user,
and No line-up means that no automatic line-up will be done."
                :default-value 'dynamic)
                nil [17448 18125])
            ("image-dired-thumbs-per-row" variable
               (:documentation "Number of thumbnails to display per row in thumb buffer."
                :default-value 3)
                nil [18127 18267])
            ("image-dired-display-window-width-correction" variable
               (:documentation "Number to be used to correct image display window width.
Change if the default (1) does not work (i.e. if the image does not
completely fit)."
                :default-value 1)
                nil [18269 18511])
            ("image-dired-display-window-height-correction" variable (:documentation "Number to be used to correct image display window height.
Change if the default (0) does not work (i.e. if the image does not
completely fit).") nil [18513 18757])
            ("image-dired-track-movement" variable
               (:documentation "The current state of the tracking and mirroring.
For more information, see the documentation for
`image-dired-toggle-movement-tracking'."
                :default-value t)
                nil [18759 18979])
            ("image-dired-append-when-browsing" variable (:documentation "Append thumbnails in thumbnail buffer when browsing.
If non-nil, using `image-dired-next-line-and-display' and
`image-dired-previous-line-and-display' will leave a trail of thumbnail
images in the thumbnail buffer.  If you enable this and want to clean
the thumbnail buffer because it is filled with too many thumbnails,
just call `image-dired-display-thumb' to display only the image at point.
This value can be toggled using `image-dired-toggle-append-browsing'.") nil [18981 19537])
            ("image-dired-dired-disp-props" variable
               (:documentation "If non-nil, display properties for dired file when browsing.
Used by `image-dired-next-line-and-display',
`image-dired-previous-line-and-display' and `image-dired-mark-and-display-next'.
If the database file is large, this can slow down image browsing in
dired and you might want to turn it off."
                :default-value t)
                nil [19539 19920])
            ("image-dired-display-properties-format" variable
               (:documentation "Display format for thumbnail properties.
%b is replaced with associated dired buffer name, %f with file name
(without path) of original image file, %t with the list of tags and %c
with the comment."
                :default-value "%b: %f (%t): %c")
                nil [19922 20230])
            ("image-dired-external-viewer" variable
               (:documentation "Name of external viewer.
Including parameters.  Used when displaying original image from
`image-dired-thumbnail-mode'."
                :default-value (cond ((executable-find "display")) ((executable-find "xli")) ((executable-find "qiv") "qiv -t")))
                nil [20232 20636])
            ("image-dired-main-image-directory" variable
               (:documentation "Name of main image directory, if any.
Used by `image-dired-copy-with-exif-file-name'."
                :default-value "~/pics/")
                nil [20638 20820])
            ("image-dired-show-all-from-dir-max-files" variable
               (:documentation "Maximum number of files to show using `image-dired-show-all-from-dir'
before warning the user."
                :default-value 50)
                nil [20822 21014])
            ("image-dired--with-db-file" function
               (:documentation "Run BODY in a temp buffer containing `image-dired-db-file'.
Return the last form in BODY."
                :arguments ("body"))
                nil [21016 21317])
            ("image-dired-dir" function (:documentation "Return the current thumbnails directory (from variable `image-dired-dir').
Create the thumbnails directory if it does not exist.") nil [21319 21743])
            ("image-dired-insert-image" function
               (:documentation "Insert image FILE of image TYPE, using RELIEF and MARGIN, at point."
                :arguments ("file" "type" "relief" "margin"))
                nil [21745 22032])
            ("image-dired-get-thumbnail-image" function
               (:documentation "Return the image descriptor for a thumbnail of image file FILE."
                :arguments ("file"))
                nil [22034 22679])
            ("image-dired-insert-thumbnail" function
               (:documentation "Insert thumbnail image FILE.
Add text properties ORIGINAL-FILE-NAME and ASSOCIATED-DIRED-BUFFER."
                :arguments ("file" "original-file-name" "associated-dired-buffer"))
                nil [22681 23688])
            ("image-dired-thumb-name" function
               (:documentation "Return thumbnail file name for FILE.
Depending on the value of `image-dired-thumbnail-storage', the file
name will vary.  For central thumbnail file storage, make a
MD5-hash of the image file's directory name and add that to make
the thumbnail file name unique.  For per-directory storage, just
add a subdirectory.  For standard storage, produce the file name
according to the Thumbnail Managing Standard."
                :arguments ("file"))
                nil [23690 25677])
            ("image-dired--check-executable-exists" function (:arguments ("executable")) nil [25679 25840])
            ("image-dired-thumb-size" function
               (:documentation "Return thumb size depending on `image-dired-thumbnail-storage'.
DIMENSION should be either the symbol 'width or 'height."
                :arguments ("dimension"))
                nil [25842 26242])
            ("image-dired-queue" variable (:documentation "List of items in the queue.
Each item has the form (ORIGINAL-FILE TARGET-FILE).") nil [26244 26358])
            ("image-dired-queue-active-jobs" variable (:documentation "Number of active jobs in `image-dired-queue'.") nil [26360 26450])
            ("image-dired-queue-active-limit" variable
               (:documentation "Maximum number of concurrent jobs permitted for generating images.
Increase at own risk."
                :default-value 2)
                nil [26452 26586])
            ("image-dired-pngnq-thumb" function
               (:documentation "Quantize thumbnail described by format SPEC with pngnq(1)."
                :arguments ("spec"))
                nil [26588 27722])
            ("image-dired-pngcrush-thumb" function
               (:documentation "Optimize thumbnail described by format SPEC with pngcrush(1)."
                :arguments ("spec"))
                nil [27724 28919])
            ("image-dired-optipng-thumb" function
               (:documentation "Optimize thumbnail described by format SPEC with optipng(1)."
                :arguments ("spec"))
                nil [28921 29615])
            ("image-dired-create-thumb-1" function
               (:documentation "For ORIGINAL-FILE, create thumbnail image named THUMBNAIL-FILE."
                :arguments ("original-file" "thumbnail-file"))
                nil [29617 32771])
            ("image-dired-thumb-queue-run" function (:documentation "Run a queued job if one exists and not too many jobs are running.
Queued items live in `image-dired-queue'.") nil [32773 33162])
            ("image-dired-create-thumb" function
               (:documentation "Add a job for generating thumbnail to `image-dired-queue'."
                :arguments ("original-file" "thumbnail-file"))
                nil [33164 33461])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:documentation "Toggle thumbnails in front of file names in the dired buffer.
If no marked file could be found, insert or hide thumbnails on the
current line.  ARG, if non-nil, specifies the files to use instead
of the marked files.  If ARG is an integer, use the next ARG (or
previous -ARG, if ARG<0) files."
                :user-visible-flag t
                :arguments ("arg"))
                nil [33478 34971])
            ("image-dired-dired-after-readin-hook" function (:documentation "Relocate existing thumbnail overlays in dired buffer after reverting.
Move them to their corresponding files if they still exist.
Otherwise, delete overlays.") nil [34973 35564])
            ("image-dired-next-line-and-display" function
               (:documentation "Move to next dired line and display thumbnail image."
                :user-visible-flag t)
                nil [35566 35866])
            ("image-dired-previous-line-and-display" function
               (:documentation "Move to previous dired line and display thumbnail image."
                :user-visible-flag t)
                nil [35868 36180])
            ("image-dired-toggle-append-browsing" function
               (:documentation "Toggle `image-dired-append-when-browsing'."
                :user-visible-flag t)
                nil [36182 36501])
            ("image-dired-mark-and-display-next" function
               (:documentation "Mark current file in dired and display next thumbnail image."
                :user-visible-flag t)
                nil [36503 36806])
            ("image-dired-toggle-dired-display-properties" function
               (:documentation "Toggle `image-dired-dired-disp-props'."
                :user-visible-flag t)
                nil [36808 37129])
            ("image-dired-thumbnail-buffer" variable
               (:documentation "Image-Dired's thumbnail buffer."
                :default-value "*image-dired*")
                nil [37131 37220])
            ("image-dired-create-thumbnail-buffer" function (:documentation "Create thumb buffer and set `image-dired-thumbnail-mode'.") nil [37222 37565])
            ("image-dired-display-image-buffer" variable
               (:documentation "Where larger versions of the images are display."
                :default-value "*image-dired-display-image*")
                nil [37567 37691])
            ("image-dired-create-display-image-buffer" function (:documentation "Create image display buffer and set `image-dired-display-image-mode'.") nil [37693 38064])
            ("image-dired-saved-window-configuration" variable (:documentation "Saved window configuration.") nil [38066 38149])
            ("image-dired-dired-with-window-configuration" function
               (:documentation "Open directory DIR and create a default window configuration.

Convenience command that:

 - Opens dired in folder DIR
 - Splits windows in most useful (?) way
 - Set `truncate-lines' to t

After the command has finished, you would typically mark some
image files in dired and type
\\[image-dired-display-thumbs] (`image-dired-display-thumbs').

If called with prefix argument ARG, skip splitting of windows.

The current window configuration is saved and can be restored by
calling `image-dired-restore-window-configuration'."
                :user-visible-flag t
                :arguments ("dir" "arg"))
                nil [38166 39325])
            ("image-dired-restore-window-configuration" function
               (:documentation "Restore window configuration.
Restore any changes to the window configuration made by calling
`image-dired-dired-with-window-configuration'."
                :user-visible-flag t)
                nil [39327 39703])
            ("image-dired-display-thumbs" function
               (:documentation "Display thumbnails of all marked files, in `image-dired-thumbnail-buffer'.
If a thumbnail image does not exist for a file, it is created on the
fly.  With prefix argument ARG, display only thumbnail for file at
point (this is useful if you have marked some files but want to show
another one).

Recommended usage is to split the current frame horizontally so that
you have the dired buffer in the left window and the
`image-dired-thumbnail-buffer' buffer in the right window.

With optional argument APPEND, append thumbnail to thumbnail buffer
instead of erasing it first.

Optional argument DO-NOT-POP controls if `pop-to-buffer' should be
used or not.  If non-nil, use `display-buffer' instead of
`pop-to-buffer'.  This is used from functions like
`image-dired-next-line-and-display' and
`image-dired-previous-line-and-display' where we do not want the
thumbnail buffer to be selected."
                :user-visible-flag t
                :arguments ("arg" "append" "do-not-pop"))
                nil [39720 41869])
            ("image-dired-show-all-from-dir" function
               (:documentation "Make a preview buffer for all images in DIR and display it.
If the number of files in DIR matching `image-file-name-regexp'
exceeds `image-dired-show-all-from-dir-max-files', a warning will be
displayed."
                :user-visible-flag t
                :arguments ("dir"))
                nil [41886 42760])
            ("defalias" code nil nil [42777 42831])
            ("define-obsolete-function-alias" code nil nil [42848 42907])
            ("image-dired-sane-db-file" function (:documentation "Check if `image-dired-db-file' exists.
If not, try to create it (including any parent directories).
Signal error if there are problems creating it.") nil [42909 43619])
            ("image-dired-write-tags" function
               (:documentation "Write file tags to database.
Write each file and tag in FILE-TAGS to the database.
FILE-TAGS is an alist in the following form:
 ((FILE . TAG) ... )"
                :arguments ("file-tags"))
                nil [43621 44390])
            ("image-dired-remove-tag" function
               (:documentation "For all FILES, remove TAG from the image database."
                :arguments ("files" "tag"))
                nil [44392 45415])
            ("image-dired-list-tags" function
               (:documentation "Read all tags for image FILE from the image database."
                :arguments ("file"))
                nil [45417 45979])
            ("image-dired-tag-files" function
               (:documentation "Tag marked file(s) in dired.  With prefix ARG, tag file at point."
                :user-visible-flag t
                :arguments ("arg"))
                nil [45996 46415])
            ("image-dired-tag-thumbnail" function
               (:documentation "Tag current thumbnail."
                :user-visible-flag t)
                nil [46417 46753])
            ("image-dired-delete-tag" function
               (:documentation "Remove tag for selected file(s).
With prefix argument ARG, remove tag from file at point."
                :user-visible-flag t
                :arguments ("arg"))
                nil [46770 47127])
            ("image-dired-tag-thumbnail-remove" function
               (:documentation "Remove tag from thumbnail."
                :user-visible-flag t)
                nil [47129 47431])
            ("image-dired-original-file-name" function (:documentation "Get original file name for thumbnail or display image at point.") nil [47433 47592])
            ("image-dired-file-name-at-point" function (:documentation "Get abbreviated file name for thumbnail or display image at point.") nil [47594 47797])
            ("image-dired-associated-dired-buffer" function (:documentation "Get associated dired buffer at point.") nil [47799 47942])
            ("image-dired-get-buffer-window" function
               (:documentation "Return window where buffer BUF is."
                :arguments ("buf"))
                nil [47944 48126])
            ("image-dired-track-original-file" function
               (:documentation "Track the original file in the associated dired buffer.
See documentation for `image-dired-toggle-movement-tracking'.
Interactive use only useful if `image-dired-track-movement' is nil."
                :user-visible-flag t)
                nil [48128 48795])
            ("image-dired-toggle-movement-tracking" function
               (:documentation "Turn on and off `image-dired-track-movement'.
Tracking of the movements between thumbnail and dired buffer so that
they are \"mirrored\" in the dired buffer.  When this is on, moving
around in the thumbnail or dired buffer will find the matching
position in the other buffer."
                :user-visible-flag t)
                nil [48797 49278])
            ("image-dired-track-thumbnail" function (:documentation "Track current dired file's thumb in `image-dired-thumbnail-buffer'.
This is almost the same as what `image-dired-track-original-file' does,
but the other way around.") nil [49280 50183])
            ("image-dired-dired-next-line" function
               (:documentation "Call `dired-next-line', then track thumbnail.
This can safely replace `dired-next-line'.
With prefix argument, move ARG lines."
                :user-visible-flag t
                :arguments ("arg"))
                nil [50185 50488])
            ("image-dired-dired-previous-line" function
               (:documentation "Call `dired-previous-line', then track thumbnail.
This can safely replace `dired-previous-line'.
With prefix argument, move ARG lines."
                :user-visible-flag t
                :arguments ("arg"))
                nil [50490 50809])
            ("image-dired-forward-image" function
               (:documentation "Move to next image and display properties.
Optional prefix ARG says how many images to move; default is one
image."
                :user-visible-flag t
                :arguments ("arg"))
                nil [50811 51551])
            ("image-dired-backward-image" function
               (:documentation "Move to previous image and display properties.
Optional prefix ARG says how many images to move; default is one
image."
                :user-visible-flag t
                :arguments ("arg"))
                nil [51553 52301])
            ("image-dired-next-line" function
               (:documentation "Move to next line and display properties."
                :user-visible-flag t)
                nil [52303 52753])
            ("image-dired-previous-line" function
               (:documentation "Move to previous line and display properties."
                :user-visible-flag t)
                nil [52756 53384])
            ("image-dired-format-properties-string" function
               (:documentation "Format display properties.
BUF is the associated dired buffer, FILE is the original image file
name, PROPS is a stringified list of tags and COMMENT is the image file's
comment."
                :arguments ("buf" "file" "props" "comment"))
                nil [53386 53807])
            ("image-dired-display-thumb-properties" function (:documentation "Display thumbnail properties in the echo area.") nil [53809 54455])
            ("image-dired-dired-file-marked-p" function (:documentation "Check whether file on current line is marked or not.") nil [54457 54630])
            ("image-dired-modify-mark-on-thumb-original-file" function
               (:documentation "Modify mark in dired buffer.
COMMAND is one of `mark' for marking file in dired, `unmark' for
unmarking file in dired or `flag' for flagging file for delete in
dired."
                :arguments ("command"))
                nil [54632 55561])
            ("image-dired-mark-thumb-original-file" function
               (:documentation "Mark original image file in associated dired buffer."
                :user-visible-flag t)
                nil [55563 55770])
            ("image-dired-unmark-thumb-original-file" function
               (:documentation "Unmark original image file in associated dired buffer."
                :user-visible-flag t)
                nil [55772 55985])
            ("image-dired-flag-thumb-original-file" function
               (:documentation "Flag original image file for deletion in associated dired buffer."
                :user-visible-flag t)
                nil [55987 56207])
            ("image-dired-toggle-mark-thumb-original-file" function
               (:documentation "Toggle mark on original image file in associated dired buffer."
                :user-visible-flag t)
                nil [56209 56405])
            ("image-dired-jump-original-dired-buffer" function
               (:documentation "Jump to the dired buffer associated with the current image file.
You probably want to use this together with
`image-dired-track-original-file'."
                :user-visible-flag t)
                nil [56407 57000])
            ("image-dired-jump-thumbnail-buffer" function
               (:documentation "Jump to thumbnail buffer."
                :user-visible-flag t)
                nil [57017 57415])
            ("image-dired-thumbnail-mode-line-up-map" variable
               (:documentation "Keymap for line-up commands in `image-dired-thumbnail-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "g" 'image-dired-line-up-dynamic) (define-key map "f" 'image-dired-line-up) (define-key map "i" 'image-dired-line-up-interactive) map))
                nil [57417 57873])
            ("image-dired-thumbnail-mode-tag-map" variable
               (:documentation "Keymap for tag commands in `image-dired-thumbnail-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "t" 'image-dired-tag-thumbnail) (define-key map "r" 'image-dired-tag-thumbnail-remove) map))
                nil [57875 58223])
            ("image-dired-thumbnail-mode-map" variable
               (:documentation "Keymap for `image-dired-thumbnail-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [right] 'image-dired-forward-image) (define-key map [left] 'image-dired-backward-image) (define-key map [up] 'image-dired-previous-line) (define-key map [down] 'image-dired-next-line) (define-key map "" 'image-dired-forward-image) (define-key map "" 'image-dired-backward-image) (define-key map "" 'image-dired-previous-line) (define-key map "" 'image-dired-next-line) (define-key map "d" 'image-dired-flag-thumb-original-file) (define-key map [delete] 'image-dired-flag-thumb-original-file) (define-key map "m" 'image-dired-mark-thumb-original-file) (define-key map "u" 'image-dired-unmark-thumb-original-file) (define-key map "." 'image-dired-track-original-file) (define-key map [tab] 'image-dired-jump-original-dired-buffer) (define-key map "g" image-dired-thumbnail-mode-line-up-map) (define-key map "t" image-dired-thumbnail-mode-tag-map) (define-key map "" 'image-dired-display-thumbnail-original-image) (define-key map [C-return] 'image-dired-thumbnail-display-external) (define-key map "l" 'image-dired-rotate-thumbnail-left) (define-key map "r" 'image-dired-rotate-thumbnail-right) (define-key map "L" 'image-dired-rotate-original-left) (define-key map "R" 'image-dired-rotate-original-right) (define-key map "D" 'image-dired-thumbnail-set-image-description) (define-key map "" 'image-dired-delete-char) (define-key map " " 'image-dired-display-next-thumbnail-original) (define-key map (kbd "DEL") 'image-dired-display-previous-thumbnail-original) (define-key map "c" 'image-dired-comment-thumbnail) (define-key map [mouse-2] 'image-dired-mouse-display-image) (define-key map [mouse-1] 'image-dired-mouse-select-thumbnail) (define-key map [C-down-mouse-1] 'undefined) (define-key map [C-mouse-1] 'image-dired-mouse-toggle-mark) (easy-menu-define nil map "Menu for `image-dired-thumbnail-mode'." '("Image-Dired" ["Quit" quit-window] ["Delete thumbnail from buffer" image-dired-delete-char] ["Remove tag from thumbnail" image-dired-tag-thumbnail-remove] ["Tag thumbnail" image-dired-tag-thumbnail] ["Comment thumbnail" image-dired-comment-thumbnail] ["Refresh thumb" image-dired-refresh-thumb] ["Dynamic line up" image-dired-line-up-dynamic] ["Line up thumbnails" image-dired-line-up] ["Rotate thumbnail left" image-dired-rotate-thumbnail-left] ["Rotate thumbnail right" image-dired-rotate-thumbnail-right] ["Rotate original left" image-dired-rotate-original-left] ["Rotate original right" image-dired-rotate-original-right] ["Toggle movement tracking on/off" image-dired-toggle-movement-tracking] ["Jump to dired buffer" image-dired-jump-original-dired-buffer] ["Track original" image-dired-track-original-file] ["Flag original for deletion" image-dired-flag-thumb-original-file] ["Unmark original" image-dired-unmark-thumb-original-file] ["Mark original" image-dired-mark-thumb-original-file] ["Display in external viewer" image-dired-thumbnail-display-external] ["Display image" image-dired-display-thumbnail-original-image])) map))
                nil [58225 62045])
            ("image-dired-display-image-mode-map" variable
               (:documentation "Keymap for `image-dired-display-image-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "f" 'image-dired-display-current-image-full) (define-key map "s" 'image-dired-display-current-image-sized) (define-key map "g" nil) (define-key map [remap forward-char] 'image-forward-hscroll) (define-key map [remap backward-char] 'image-backward-hscroll) (define-key map [remap right-char] 'image-forward-hscroll) (define-key map [remap left-char] 'image-backward-hscroll) (define-key map [remap previous-line] 'image-previous-line) (define-key map [remap next-line] 'image-next-line) (define-key map [remap scroll-up] 'image-scroll-up) (define-key map [remap scroll-down] 'image-scroll-down) (define-key map [remap scroll-up-command] 'image-scroll-up) (define-key map [remap scroll-down-command] 'image-scroll-down) (define-key map [remap scroll-left] 'image-scroll-left) (define-key map [remap scroll-right] 'image-scroll-right) (define-key map [remap move-beginning-of-line] 'image-bol) (define-key map [remap move-end-of-line] 'image-eol) (define-key map [remap beginning-of-buffer] 'image-bob) (define-key map [remap end-of-buffer] 'image-eob) (easy-menu-define nil map "Menu for `image-dired-display-image-mode-map'." '("Image-Dired" ["Quit" quit-window] ["Display original, sized to fit" image-dired-display-current-image-sized] ["Display original, full size" image-dired-display-current-image-full])) map))
                nil [62047 63794])
            ("image-dired-display-current-image-full" function
               (:documentation "Display current image in full size."
                :user-visible-flag t)
                nil [63796 64121])
            ("image-dired-display-current-image-sized" function
               (:documentation "Display current image in sized to fit window dimensions."
                :user-visible-flag t)
                nil [64123 64465])
            ("define-derived-mode" code nil nil [64467 64787])
            ("define-derived-mode" code nil nil [64789 65148])
            ("image-dired-minor-mode-map" variable
               (:documentation "Keymap for `image-dired-minor-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "p" 'image-dired-dired-previous-line) (define-key map "n" 'image-dired-dired-next-line) (define-key map [up] 'image-dired-dired-previous-line) (define-key map [down] 'image-dired-dired-next-line) (define-key map (kbd "C-S-n") 'image-dired-next-line-and-display) (define-key map (kbd "C-S-p") 'image-dired-previous-line-and-display) (define-key map (kbd "C-S-m") 'image-dired-mark-and-display-next) (define-key map "d" 'image-dired-display-thumbs) (define-key map [tab] 'image-dired-jump-thumbnail-buffer) (define-key map "i" 'image-dired-dired-display-image) (define-key map "x" 'image-dired-dired-display-external) (define-key map "a" 'image-dired-display-thumbs-append) (define-key map "." 'image-dired-display-thumb) (define-key map "c" 'image-dired-dired-comment-files) (define-key map "f" 'image-dired-mark-tagged-files) (easy-menu-define nil map "Menu for `image-dired-minor-mode'." '("Image-dired" ["Copy with EXIF file name" image-dired-copy-with-exif-file-name] ["Comment files" image-dired-dired-comment-files] ["Mark tagged files" image-dired-mark-tagged-files] ["Jump to thumbnail buffer" image-dired-jump-thumbnail-buffer] ["Toggle movement tracking" image-dired-toggle-movement-tracking] ["Toggle append browsing" image-dired-toggle-append-browsing] ["Toggle display properties" image-dired-toggle-dired-display-properties] ["Display in external viewer" image-dired-dired-display-external] ["Display image" image-dired-dired-display-image] ["Display this thumbnail" image-dired-display-thumb] ["Display thumbnails append" image-dired-display-thumbs-append] ["Create thumbnails for marked files" image-dired-create-thumbs] ["Mark and display next" image-dired-mark-and-display-next] ["Display thumb for previous file" image-dired-previous-line-and-display] ["Display thumb for next file" image-dired-next-line-and-display])) map))
                nil [65150 67507])
            ("define-minor-mode" code nil nil [67524 67773])
            ("define-obsolete-function-alias" code nil nil [67790 67892])
            ("declare-function" code nil nil [67894 67959])
            ("image-dired-create-thumbs" function
               (:documentation "Create thumbnail images for all marked files in dired.
With prefix argument ARG, create thumbnails even if they already exist
(i.e. use this to refresh your thumbnails)."
                :user-visible-flag t
                :arguments ("arg"))
                nil [67961 68715])
            ("image-dired-slideshow-timer" variable (:documentation "Slideshow timer.") nil [68717 68778])
            ("image-dired-slideshow-count" variable (:documentation "Keeping track on number of images in slideshow.") nil [68780 68870])
            ("image-dired-slideshow-times" variable (:documentation "Number of pictures to display in slideshow.") nil [68872 68958])
            ("image-dired-slideshow-step" function (:documentation "Step to next file, if `image-dired-slideshow-times' has not been reached.") nil [68960 69365])
            ("image-dired-slideshow-start" function
               (:documentation "Start slideshow.
Ask user for number of images to show and the delay in between."
                :user-visible-flag t)
                nil [69367 69890])
            ("image-dired-slideshow-stop" function
               (:documentation "Cancel slideshow."
                :user-visible-flag t)
                nil [69892 70012])
            ("image-dired-delete-char" function
               (:documentation "Remove current thumbnail from thumbnail buffer and line up."
                :user-visible-flag t)
                nil [70014 70238])
            ("image-dired-display-thumbs-append" function
               (:documentation "Append thumbnails to `image-dired-thumbnail-buffer'."
                :user-visible-flag t)
                nil [70255 70411])
            ("image-dired-display-thumb" function
               (:documentation "Shorthand for `image-dired-display-thumbs' with prefix argument."
                :user-visible-flag t)
                nil [70428 70588])
            ("image-dired-line-up" function
               (:documentation "Line up thumbnails according to `image-dired-thumbs-per-row'.
See also `image-dired-line-up-dynamic'."
                :user-visible-flag t)
                nil [70590 71489])
            ("image-dired-line-up-dynamic" function
               (:documentation "Line up thumbnails images dynamically.
Calculate how many thumbnails fit."
                :user-visible-flag t)
                nil [71491 71995])
            ("image-dired-line-up-interactive" function
               (:documentation "Line up thumbnails interactively.
Ask user how many thumbnails should be displayed per row."
                :user-visible-flag t)
                nil [71997 72386])
            ("image-dired-thumbnail-display-external" function
               (:documentation "Display original image for thumbnail at point using external viewer."
                :user-visible-flag t)
                nil [72388 72849])
            ("image-dired-dired-display-external" function
               (:documentation "Display file at point using an external viewer."
                :user-visible-flag t)
                nil [72866 73116])
            ("image-dired-window-width-pixels" function
               (:documentation "Calculate WINDOW width in pixels."
                :arguments ("window"))
                nil [73118 73253])
            ("image-dired-window-height-pixels" function
               (:documentation "Calculate WINDOW height in pixels."
                :arguments ("window"))
                nil [73255 73443])
            ("image-dired-display-window" function (:documentation "Return window where `image-dired-display-image-buffer' is visible.") nil [73445 73696])
            ("image-dired-thumbnail-window" function (:documentation "Return window where `image-dired-thumbnail-buffer' is visible.") nil [73698 73943])
            ("image-dired-associated-dired-buffer-window" function (:documentation "Return window where associated dired buffer is visible.") nil [73945 74346])
            ("image-dired-display-window-width" function
               (:documentation "Return width, in pixels, of WINDOW."
                :arguments ("window"))
                nil [74348 74533])
            ("image-dired-display-window-height" function
               (:documentation "Return height, in pixels, of WINDOW."
                :arguments ("window"))
                nil [74535 74724])
            ("image-dired-display-image" function
               (:documentation "Display image FILE in image buffer.
Use this when you want to display the image, semi sized, in a new
window.  The image is sized to fit the display window (using a
temporary file, don't worry).  Because of this, it will not be as
quick as opening it directly, but on most modern systems it
should feel snappy enough.

If optional argument ORIGINAL-SIZE is non-nil, display image in its
original size."
                :arguments ("file" "original-size"))
                nil [74726 76688])
            ("image-dired-display-thumbnail-original-image" function
               (:documentation "Display current thumbnail's original image in display buffer.
See documentation for `image-dired-display-image' for more information.
With prefix argument ARG, display image in its original size."
                :user-visible-flag t
                :arguments ("arg"))
                nil [76690 77472])
            ("image-dired-dired-display-image" function
               (:documentation "Display current image file.
See documentation for `image-dired-display-image' for more information.
With prefix argument ARG, display image in its original size."
                :user-visible-flag t
                :arguments ("arg"))
                nil [77490 77882])
            ("image-dired-image-at-point-p" function (:documentation "Return true if there is an image-dired thumbnail at point.") nil [77884 78039])
            ("image-dired-rotate-thumbnail" function
               (:documentation "Rotate thumbnail DEGREES degrees."
                :arguments ("degrees"))
                nil [78041 78711])
            ("image-dired-rotate-thumbnail-left" function
               (:documentation "Rotate thumbnail left (counter clockwise) 90 degrees.
The result of the rotation is displayed in the image display area
and a confirmation is needed before the original image files is
overwritten.  This confirmation can be turned off using
`image-dired-rotate-original-ask-before-overwrite'."
                :user-visible-flag t)
                nil [78713 79108])
            ("image-dired-rotate-thumbnail-right" function
               (:documentation "Rotate thumbnail counter right (clockwise) 90 degrees.
The result of the rotation is displayed in the image display area
and a confirmation is needed before the original image files is
overwritten.  This confirmation can be turned off using
`image-dired-rotate-original-ask-before-overwrite'."
                :user-visible-flag t)
                nil [79110 79506])
            ("image-dired-refresh-thumb" function
               (:documentation "Force creation of new image for current thumbnail."
                :user-visible-flag t)
                nil [79508 79823])
            ("image-dired-rotate-original" function
               (:documentation "Rotate original image DEGREES degrees."
                :arguments ("degrees"))
                nil [79825 81198])
            ("image-dired-rotate-original-left" function
               (:documentation "Rotate original image left (counter clockwise) 90 degrees."
                :user-visible-flag t)
                nil [81200 81360])
            ("image-dired-rotate-original-right" function
               (:documentation "Rotate original image right (clockwise) 90 degrees."
                :user-visible-flag t)
                nil [81362 81515])
            ("image-dired-get-exif-file-name" function
               (:documentation "Use the image's EXIF information to return a unique file name.
The file name should be unique as long as you do not take more than
one picture per second.  The original file name is suffixed at the end
for traceability.  The format of the returned file name is
YYYY_MM_DD_HH_MM_DD_ORIG_FILE_NAME.jpg.  Used from
`image-dired-copy-with-exif-file-name'."
                :arguments ("file"))
                nil [81517 82622])
            ("image-dired-thumbnail-set-image-description" function
               (:documentation "Set the ImageDescription EXIF tag for the original image.
If the image already has a value for this tag, it is used as the
default value at the prompt."
                :user-visible-flag t)
                nil [82624 83359])
            ("image-dired-set-exif-data" function
               (:documentation "In FILE, set EXIF tag TAG-NAME to value TAG-VALUE."
                :arguments ("file" "tag-name" "tag-value"))
                nil [83361 83892])
            ("image-dired-get-exif-data" function
               (:documentation "From FILE, return EXIF tag TAG-NAME."
                :arguments ("file" "tag-name"))
                nil [83894 84934])
            ("image-dired-copy-with-exif-file-name" function
               (:documentation "Copy file with unique name to main image directory.
Copy current or all marked files in dired to a new file in your
main image directory, using a file name generated by
`image-dired-get-exif-file-name'.  A typical usage for this if when
copying images from a digital camera into the image directory.

 Typically, you would open up the folder with the incoming
digital images, mark the files to be copied, and execute this
function.  The result is a couple of new files in
`image-dired-main-image-directory' called
2005_05_08_12_52_00_dscn0319.jpg,
2005_05_08_14_27_45_dscn0320.jpg etc."
                :user-visible-flag t)
                nil [84936 86027])
            ("image-dired-display-next-thumbnail-original" function
               (:documentation "In thumbnail buffer, move to next thumbnail and display the image."
                :user-visible-flag t)
                nil [86029 86249])
            ("image-dired-display-previous-thumbnail-original" function
               (:documentation "Move to previous thumbnail and display image."
                :user-visible-flag t)
                nil [86251 86455])
            ("image-dired-write-comments" function
               (:documentation "Write file comments to database.
Write file comments to one or more files.
FILE-COMMENTS is an alist on the following form:
 ((FILE . COMMENT) ... )"
                :arguments ("file-comments"))
                nil [86457 87787])
            ("image-dired-update-property" function
               (:documentation "Update text property PROP with value VALUE at point."
                :arguments ("prop" "value"))
                nil [87789 87997])
            ("image-dired-dired-comment-files" function
               (:documentation "Add comment to current or marked files in dired."
                :user-visible-flag t)
                nil [88014 88310])
            ("image-dired-comment-thumbnail" function
               (:documentation "Add comment to current thumbnail in thumbnail buffer."
                :user-visible-flag t)
                nil [88312 88680])
            ("image-dired-read-comment" function
               (:documentation "Read comment for an image.
Optionally use old comment from FILE as initial value."
                :arguments ("file"))
                nil [88682 88945])
            ("image-dired-get-comment" function
               (:documentation "Get comment for file FILE."
                :arguments ("file"))
                nil [88947 89540])
            ("image-dired-mark-tagged-files" function
               (:documentation "Use regexp to mark files with matching tag.
A `tag' is a keyword, a piece of meta data, associated with an
image file and stored in image-dired's database file.  This command
lets you input a regexp and this will be matched against all tags
on all image files in the database file.  The files that have a
matching tag will be marked in the dired buffer."
                :user-visible-flag t)
                nil [89557 90900])
            ("image-dired-mouse-display-image" function
               (:documentation "Use mouse EVENT, call `image-dired-display-image' to display image.
Track this in associated dired buffer if `image-dired-track-movement' is
non-nil."
                :user-visible-flag t
                :arguments ("event"))
                nil [90902 91478])
            ("image-dired-mouse-select-thumbnail" function
               (:documentation "Use mouse EVENT to select thumbnail image.
Track this in associated dired buffer if `image-dired-track-movement' is
non-nil."
                :user-visible-flag t
                :arguments ("event"))
                nil [91480 91865])
            ("image-dired-mouse-toggle-mark" function
               (:documentation "Use mouse EVENT to toggle dired mark for thumbnail.
Track this in associated dired buffer if `image-dired-track-movement' is
non-nil."
                :user-visible-flag t
                :arguments ("event"))
                nil [91867 92263])
            ("image-dired-dired-display-properties" function
               (:documentation "Display properties for dired file in the echo area."
                :user-visible-flag t)
                nil [92265 92845])
            ("image-dired-tag-file-list" variable (:documentation "List to store tag-file structure.") nil [92847 92923])
            ("image-dired-file-tag-list" variable (:documentation "List to store file-tag structure.") nil [92925 93001])
            ("image-dired-file-comment-list" variable (:documentation "List to store file comments.") nil [93003 93078])
            ("image-dired-add-to-tag-file-list" function
               (:documentation "Add relation between TAG and FILE."
                :arguments ("tag" "file"))
                nil [93080 93558])
            ("image-dired-add-to-tag-file-lists" function
               (:documentation "Helper function used from `image-dired-create-gallery-lists'.

Add TAG to FILE in one list and FILE to TAG in the other.

Lisp structures look like the following:

image-dired-file-tag-list:

  ((\"filename1\" \"tag1\" \"tag2\" \"tag3\" ...)
   (\"filename2\" \"tag1\" \"tag2\" \"tag3\" ...)
   ...)

image-dired-tag-file-list:

 ((\"tag1\" \"filename1\" \"filename2\" \"filename3\" ...)
  (\"tag2\" \"filename1\" \"filename2\" \"filename3\" ...)
  ...)"
                :arguments ("tag" "file"))
                nil [93560 94839])
            ("image-dired-add-to-file-comment-list" function
               (:documentation "Helper function used from `image-dired-create-gallery-lists'.

For FILE, add COMMENT to list.

Lisp structure looks like the following:

image-dired-file-comment-list:

  ((\"filename1\" .  \"comment1\")
   (\"filename2\" .  \"comment2\")
   ...)"
                :arguments ("file" "comment"))
                nil [94841 95470])
            ("image-dired-create-gallery-lists" function (:documentation "Create temporary lists used by `image-dired-gallery-generate'.") nil [95472 96574])
            ("image-dired-hidden-p" function
               (:documentation "Return t if image FILE has a \"hidden\" tag."
                :arguments ("file"))
                nil [96576 96796])
            ("image-dired-gallery-generate" function
               (:documentation "Generate gallery pages.
First we create a couple of Lisp structures from the database to make
it easier to generate, then HTML-files are created in
`image-dired-gallery-dir'."
                :user-visible-flag t)
                nil [96798 100400])
            ("image-dired-widget-list" variable (:documentation "List to keep track of meta data in edit buffer.") nil [100402 100490])
            ("declare-function" code nil nil [100492 100542])
            ("image-dired-dired-edit-comment-and-tags" function
               (:documentation "Edit comment and tags of current or marked image files.
Edit comment and tags for all marked image files in an
easy-to-use form."
                :user-visible-flag t)
                nil [100559 103376])
            ("image-dired-save-information-from-widgets" function (:documentation "Save information found in `image-dired-widget-list'.
Use the information in `image-dired-widget-list' to save comments and
tags to their respective image file.  Internal function used by
`image-dired-dired-edit-comment-and-tags'.") nil [103378 104244])
            ("image-dired" package nil nil [106135 106157]))          
      :file "image-dired.el.gz"
      :pointmax 106188
      :fsize 24006
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 5913 . 5914) (symbol 5854 . 5871) (open-paren 5853 . 5854)))
    (semanticdb-table "semanticdb-table-122be14"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:documentation "Alist of symbols vs integer codes of glyph reference points.
A glyph reference point symbol is to be used to specify a composition
rule in COMPONENTS argument to such functions as `compose-region'.

The meaning of glyph reference point codes is as follows:

    0----1----2 <---- ascent	0:tl or top-left
    |         |			1:tc or top-center
    |         |			2:tr or top-right
    |         |			3:Bl or base-left     9:cl or center-left
    9   10   11 <---- center	4:Bc or base-center  10:cc or center-center
    |         |			5:Br or base-right   11:cr or center-right
  --3----4----5-- <-- baseline	6:bl or bottom-left
    |         |			7:bc or bottom-center
    6----7----8 <---- descent	8:br or bottom-right

Glyph reference point symbols are to be used to specify a composition
rule of the form (GLOBAL-REF-POINT . NEW-REF-POINT), where
GLOBAL-REF-POINT is a reference point in the overall glyphs already
composed, and NEW-REF-POINT is a reference point in the new glyph to
be added.

For instance, if GLOBAL-REF-POINT is `br' (bottom-right) and
NEW-REF-POINT is `tc' (top-center), the overall glyph is updated as
follows (the point `*' corresponds to both reference points):

    +-------+--+ <--- new ascent
    |       |  |
    | global|  |
    | glyph |  |
 -- |       |  |-- <--- baseline (doesn't change)
    +----+--*--+
    |    | new |
    |    |glyph|
    +----+-----+ <--- new descent

A composition rule may have the form (GLOBAL-REF-POINT
NEW-REF-POINT XOFF YOFF), where XOFF and YOFF specify how much
to shift NEW-REF-POINT from GLOBAL-REF-POINT.  In this case, XOFF
and YOFF are integers in the range -100..100 representing the
shifting percentage against the font size."
                :constant-flag t
                :default-value '((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5)))
                nil [1167 3375])
            ("encode-composition-rule" function
               (:documentation "Encode composition rule RULE into an integer value.
RULE is a cons of global and new reference point symbols
(see `reference-point-alist')."
                :arguments ("rule"))
                nil [3393 4588])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4795 5461])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5796 6268])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6725 7035])
            ("compose-region" function
               (:documentation "Compose characters in the current region.

Characters are composed relatively, i.e. composed by overstriking
or stacking depending on ascent, descent and other metrics of
glyphs.

For instance, if the region has three characters \"XYZ\", X is
regarded as BASE glyph, and Y is displayed:
  (1) above BASE if Y's descent value is not positive
  (2) below BASE if Y's ascent value is not positive
  (3) on BASE (i.e. at the BASE position) otherwise
and Z is displayed with the same rule while regarding the whole
XY glyphs as BASE.

When called from a program, expects these four arguments.

First two arguments START and END are positions (integers or markers)
specifying the region.

Optional 3rd argument COMPONENTS, if non-nil, is a character, a string
or a vector or list of integers and rules.

If it is a character, it is an alternate character to display instead
of the text in the region.

If it is a string, the elements are alternate characters.  In
this case, TAB element has a special meaning.  If the first
character is TAB, the glyphs are displayed with left padding space
so that no pixel overlaps with the previous column.  If the last
character is TAB, the glyphs are displayed with right padding
space so that no pixel overlaps with the following column.

If it is a vector or list, it is a sequence of alternate characters and
composition rules, where (2N)th elements are characters and (2N+1)th
elements are composition rules to specify how to compose (2N+2)th
elements with previously composed N glyphs.

A composition rule is a cons of global and new glyph reference point
symbols.  See the documentation of `reference-point-alist' for more
details.

Optional 4th argument MODIFICATION-FUNC is a function to call to
adjust the composition when it gets invalid because of a change of
text in the composition."
                :user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7037 9256])
            ("decompose-region" function
               (:documentation "Decompose text in the current region.

When called from a program, expects two arguments,
positions (integers or markers) specifying the region."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [9258 9630])
            ("compose-string" function
               (:documentation "Compose characters in string STRING.

The return value is STRING with the `composition' property put on all
the characters in it.

Optional 2nd and 3rd arguments START and END specify the range of
STRING to be composed.  They default to the beginning and the end of
STRING respectively.

Optional 4th argument COMPONENTS, if non-nil, is a character or a
sequence (vector, list, or string) of integers.  See the function
`compose-region' for more detail.

Optional 5th argument MODIFICATION-FUNC is a function to call to
adjust the composition when it gets invalid because of a change of
text in the composition."
                :arguments ("string" "start" "end" "components" "modification-func"))
                nil [9632 10596])
            ("decompose-string" function
               (:documentation "Return STRING where `composition' property is removed."
                :arguments ("string"))
                nil [10598 10770])
            ("compose-chars" function
               (:documentation "Return a string from arguments in which all characters are composed.
For relative composition, arguments are characters.
For rule-based composition, Mth (where M is odd) arguments are
characters, and Nth (where N is even) arguments are composition rules.
A composition rule is a cons of glyph reference points of the form
(GLOBAL-REF-POINT . NEW-REF-POINT).  See the documentation of
`reference-point-alist' for more detail."
                :arguments ("args"))
                nil [10772 11648])
            ("find-composition" function
               (:documentation "Return information about a composition at or near buffer position POS.

If the character at POS has `composition' property, the value is a list
(FROM TO VALID-P).

FROM and TO specify the range of text that has the same `composition'
property, VALID-P is t if this composition is valid, and nil if not.

If there's no composition at POS, and the optional 2nd argument LIMIT
is non-nil, search for a composition toward the position given by LIMIT.

If no composition is found, return nil.

Optional 3rd argument STRING, if non-nil, is a string to look for a
composition in; nil means the current buffer.

If a valid composition is found and the optional 4th argument DETAIL-P
is non-nil, the return value is a list of the form

   (FROM TO COMPONENTS RELATIVE-P MOD-FUNC WIDTH)

COMPONENTS is a vector of integers, the meaning depends on RELATIVE-P.

RELATIVE-P is t if the composition method is relative, else nil.

If RELATIVE-P is t, COMPONENTS is a vector of characters to be
composed.  If RELATIVE-P is nil, COMPONENTS is a vector of characters
and composition rules as described in `compose-region'.

MOD-FUNC is a modification function of the composition.

WIDTH is a number of columns the composition occupies on the screen.

When Automatic Composition mode is on, this function also finds a
chunk of text that is automatically composed.  If such a chunk is
found closer to POS than the position that has `composition'
property, the value is a list of FROM, TO, and a glyph-string
that specifies how the chunk is to be composed; DETAIL-P is
ignored in this case.  See the function `composition-get-gstring'
for the format of the glyph-string."
                :arguments ("pos" "limit" "string" "detail-p"))
                nil [11650 13632])
            ("compose-chars-after" function
               (:documentation "Compose characters in current buffer after position POS.

It looks up the char-table `composition-function-table' (which
see) by a character at POS, and compose characters after POS
according to the contents of `composition-function-table'.

Optional 2nd arg LIMIT, if non-nil, limits characters to compose.

Optional 3rd arg OBJECT, if non-nil, is a string that contains the
text to compose.  In that case, POS and LIMIT index into the string.

This function is the default value of `compose-chars-after-function'."
                :arguments ("pos" "limit" "object"))
                nil [13636 15080])
            ("compose-last-chars" function
               (:documentation "Compose last characters.
The argument is a parameterized event of the form
	(compose-last-chars N COMPONENTS),
where N is the number of characters before point to compose,
COMPONENTS, if non-nil, is the same as the argument to `compose-region'
(which see).  If it is nil, `compose-chars-after' is called,
and that function finds a proper rule to compose the target characters.
This function is intended to be used from input methods.
The global keymap binds special event `compose-last-chars' to this
function.  Input method may generate an event (compose-last-chars N COMPONENTS)
after a sequence of character events."
                :user-visible-flag t
                :arguments ("args"))
                nil [15082 15993])
            ("global-set-key" code nil nil [15995 16052])
            ("lgstring-header" function (:arguments ("gstring")) nil [16173 16226])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16227 16298])
            ("lgstring-font" function (:arguments ("gstring")) nil [16299 16368])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16369 16445])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16446 16524])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16525 16580])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16581 16640])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16641 16701])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16702 16764])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16765 16841])
            ("lglyph-from" function (:arguments ("glyph")) nil [16843 16888])
            ("lglyph-to" function (:arguments ("glyph")) nil [16889 16932])
            ("lglyph-char" function (:arguments ("glyph")) nil [16933 16978])
            ("lglyph-code" function (:arguments ("glyph")) nil [16979 17024])
            ("lglyph-width" function (:arguments ("glyph")) nil [17025 17071])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17072 17121])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17122 17171])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17172 17219])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17220 17268])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17269 17320])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17322 17415])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17416 17475])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17476 17535])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17536 17598])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17599 17732])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17771 17823])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17870 18369])
            ("lgstring-remove-glyph" function (:arguments ("gstring" "idx")) nil [18408 18723])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18725 19298])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [19300 20514])
            ("compose-gstring-for-graphic" function
               (:documentation "Compose glyph-string GSTRING for graphic display.
Combining characters are composed with the preceding base
character.  If the preceding character is not a base character,
each combining character is composed as a spacing character by
a padding space before and/or after the character.

All non-spacing characters have this function in
`composition-function-table' unless overwritten."
                :arguments ("gstring"))
                nil [20516 26437])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [26439 28230])
            ("when" code nil nil [28277 28722])
            ("compose-gstring-for-terminal" function
               (:documentation "Compose glyph-string GSTRING for terminal display.
Non-spacing characters are composed with the preceding base
character.  If the preceding character is not a base character,
each non-spacing character is composed as a spacing character by
prepending a space before it."
                :arguments ("gstring"))
                nil [28724 30667])
            ("auto-compose-chars" function
               (:documentation "Compose the characters at FROM by FUNC.
FUNC is called with one argument GSTRING which is built for characters
in the region FROM (inclusive) and TO (exclusive).

If the character are composed on a graphic display, FONT-OBJECT
is a font to use.  Otherwise, FONT-OBJECT is nil, and the function
`compose-gstring-for-terminal' is used instead of FUNC.

If STRING is non-nil, it is a string, and FROM and TO are indices
into the string.  In that case, compose characters in the string.

The value is a gstring containing information for shaping the characters.

This function is the default value of `auto-composition-function' (which see)."
                :arguments ("func" "from" "to" "font-object" "string"))
                nil [30670 31609])
            ("put" code nil nil [31611 31658])
            ("make-variable-buffer-local" code nil nil [31660 31715])
            ("setq-default" code nil nil [31716 31776])
            ("define-minor-mode" code nil nil [31793 32227])
            ("make-variable-buffer-local" code nil nil [32279 32330])
            ("define-minor-mode" code nil nil [32347 32585])
            ("defalias" code nil nil [32587 32645])
            ("composite" package nil nil [32647 32667]))          
      :file "composite.el.gz"
      :pointmax 32699
      :fsize 9137
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122be34"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rot13-display-table" variable
               (:documentation "Char table for ROT13 display."
                :default-value (let ((table (make-display-table)) (i 0)) (while (< i 26) (aset table (+ i 97) (vector (+ (% (+ i 13) 26) 97))) (aset table (+ i 65) (vector (+ (% (+ i 13) 26) 65))) (setq i (1+ i))) table))
                nil [1466 1747])
            ("rot13-translate-table" variable
               (:documentation "String table for ROT13 translation."
                :default-value (let ((str (make-string 127 0)) (i 0)) (while (< i 127) (aset str i i) (setq i (1+ i))) (setq i 0) (while (< i 26) (aset str (+ i 97) (+ (% (+ i 13) 26) 97)) (aset str (+ i 65) (+ (% (+ i 13) 26) 65)) (setq i (1+ i))) str))
                nil [1749 2091])
            ("rot13" function
               (:documentation "ROT13 encrypt OBJECT, a buffer or string.
If OBJECT is a buffer, encrypt the region between START and END.
If OBJECT is a string, encrypt it in its entirety, ignoring START
and END, and return the encrypted string."
                :arguments ("object" "start" "end"))
                nil [2108 2480])
            ("rot13-string" function
               (:documentation "Return ROT13 encryption of STRING."
                :arguments ("string"))
                nil [2497 2669])
            ("rot13-region" function
               (:documentation "ROT13 encrypt the region between START and END in current buffer."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [2686 2861])
            ("rot13-other-window" function
               (:documentation "Display current buffer in ROT13 in another window.
The text itself is not modified, only the way it is displayed is affected.

To terminate the ROT13 display, delete that window.  As long as that window
is not deleted, any buffer displayed in it will become instantly encoded
in ROT13.

See also `toggle-rot13-mode'."
                :user-visible-flag t)
                nil [2878 3347])
            ("toggle-rot13-mode" function
               (:documentation "Toggle the use of ROT13 encoding for the current window."
                :user-visible-flag t)
                nil [3364 3684])
            ("rot13" package nil nil [3686 3702]))          
      :file "rot13.el.gz"
      :pointmax 3727
      :fsize 1537
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122be54"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4783 4800])
            ("timer" include nil nil [4802 4818])
            ("filenotify" include nil nil [4819 4840])
            ("auto-revert" customgroup
               (:documentation "Revert individual buffers when files on disk change.
Auto-Revert Mode enables auto-revert in individual buffers.
Global Auto-Revert Mode does so in all buffers."
                :user-visible-flag t)
                nil [4956 5185])
            ("auto-revert-mode" variable (:documentation "Non-nil when Auto-Revert Mode is active.
Never set this variable directly, use the command `auto-revert-mode' instead.") nil [5319 5471])
            ("put" code nil nil [5472 5514])
            ("auto-revert-tail-mode" variable (:documentation "Non-nil when Auto-Revert Tail Mode is active.
Never set this variable directly, use the command
`auto-revert-tail-mode' instead.") nil [5516 5683])
            ("put" code nil nil [5684 5731])
            ("auto-revert-timer" variable (:documentation "Timer used by Auto-Revert Mode.") nil [5733 5799])
            ("auto-revert-interval" variable
               (:documentation "Time, in seconds, between Auto-Revert Mode file checks.
The value may be an integer or floating point number.

If a timer is already active, there are two ways to make sure
that the new value will take effect immediately.  You can set
this variable through Custom or you can call the command
`auto-revert-set-timer' after setting the variable.  Otherwise,
the new value will take effect the first time Auto-Revert Mode
calls `auto-revert-set-timer' for internal reasons or in your
next editing session."
                :default-value 5)
                nil [5801 6536])
            ("auto-revert-stop-on-user-input" variable
               (:documentation "When non-nil, user input temporarily interrupts Auto-Revert Mode.
With this setting, Auto-Revert Mode checks for user input after
handling each buffer and does not process any further buffers
(until the next run of the timer) if user input is available.
When nil, Auto-Revert Mode checks files and reverts buffers,
with quitting disabled, without paying attention to user input.
Thus, with this setting, Emacs might be non-responsive at times."
                :default-value t)
                nil [6538 7070])
            ("auto-revert-verbose" variable
               (:documentation "When nil, Auto-Revert Mode does not generate any messages.
When non-nil, a message is generated whenever a buffer is reverted."
                :default-value t)
                nil [7072 7275])
            ("auto-revert-mode-text" variable
               (:documentation "String to display in the mode line when Auto-Revert Mode is active.

(When the string is not empty, make sure that it has a leading space.)"
                :default-value " ARev")
                nil [7277 7568])
            ("auto-revert-tail-mode-text" variable
               (:documentation "String to display in the mode line when Auto-Revert Tail Mode is active.

(When the string is not empty, make sure that it has a leading space.)"
                :default-value " Tail")
                nil [7570 7822])
            ("auto-revert-mode-hook" variable (:documentation "Functions to run when Auto-Revert Mode is activated.") nil [7824 8021])
            ("global-auto-revert-mode-text" variable (:documentation "String to display when Global Auto-Revert Mode is active.

The default is nothing since when this mode is active this text doesn't
vary over time, or between buffers.  Hence mode line text
would only waste precious space.") nil [8023 8330])
            ("global-auto-revert-mode-hook" variable (:documentation "Hook called when Global Auto-Revert Mode is activated.") nil [8332 8471])
            ("global-auto-revert-non-file-buffers" variable (:documentation "When nil, Global Auto-Revert Mode operates only on file-visiting buffers.

When non-nil, both file buffers and buffers with a custom
`revert-buffer-function' and a `buffer-stale-function' are
reverted by Global Auto-Revert Mode.  These include the Buffer
List buffer displayed by `buffer-menu', and Dired buffers showing
complete local directories.  The Buffer List buffer reverts every
`auto-revert-interval' seconds; Dired buffers when the file list of
the main directory changes.  Dired buffers do not auto-revert as
a result of changes in subdirectories, or in the contents, size,
modes, etc., of files.  You may still sometimes want to revert
them manually.

Use this option with care since it could lead to excessive auto-reverts.
For more information, see Info node `(emacs)Autorevert'.") nil [8473 9402])
            ("global-auto-revert-ignore-modes" variable (:documentation "List of major modes Global Auto-Revert Mode should not check.") nil [9404 9561])
            ("auto-revert-load-hook" variable (:documentation "Functions to run when Auto-Revert Mode is first loaded.") nil [9563 9715])
            ("auto-revert-check-vc-info" variable (:documentation "If non-nil Auto-Revert Mode reliably updates version control info.
Auto-Revert Mode updates version control info whenever the buffer
needs reverting, regardless of the value of this variable.
However, the version control state can change without changes to
the work file.  If the change is made from the current Emacs
session, all info is updated.  But if, for instance, a new
version is checked in from outside the current Emacs session, the
version control number in the mode line, as well as other version
control related information, may not be properly updated.  If you
are worried about this, set this variable to a non-nil value.

This currently works by automatically updating the version
control info every `auto-revert-interval' seconds.  Nevertheless,
it should not cause excessive CPU usage on a reasonably fast
machine, if it does not apply to too many version controlled
buffers.  CPU usage depends on the version control system.") nil [9717 10763])
            ("defvar-local" code nil nil [10765 10947])
            ("auto-revert-remote-files" variable (:documentation "If non-nil remote files are also reverted.") nil [10949 11093])
            ("auto-revert-use-notify" variable
               (:documentation "If non-nil Auto-Revert Mode uses file notification functions.
You should set this variable through Custom."
                :default-value t)
                nil [11095 11604])
            ("auto-revert-notify-exclude-dir-regexp" variable
               (:documentation "Regular expression of directories to be excluded from file notifications."
                :default-value (concat "^" (regexp-opt '("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/")) (unless auto-revert-remote-files "\\|^/[^/|:][^/|]+:")))
                nil [11606 11980])
            ("auto-revert-buffer-list" variable (:documentation "List of buffers in Auto-Revert Mode.

Note that only Auto-Revert Mode, never Global Auto-Revert Mode, adds
buffers to this list.

The timer function `auto-revert-buffers' is responsible for purging
the list of old buffers.") nil [12006 12268])
            ("auto-revert-remaining-buffers" variable (:documentation "Buffers not checked when user input stopped execution.") nil [12270 12370])
            ("auto-revert-tail-pos" variable (:documentation "Position of last known end of file.") nil [12372 12443])
            ("auto-revert-find-file-function" function nil nil [12445 12579])
            ("add-hook" code nil nil [12581 12643])
            ("auto-revert-notify-watch-descriptor-hash-list" variable
               (:documentation "A hash table collecting all file watch descriptors.
Hash key is a watch descriptor, hash value is a list of buffers
which are related to files being watched and carrying the same
default directory."
                :default-value (make-hash-table :test 'equal))
                nil [12645 12934])
            ("defvar-local" code nil nil [12936 13051])
            ("put" code nil nil [13052 13113])
            ("defvar-local" code nil nil [13115 13276])
            ("auto-revert-remove-current-buffer" function (:documentation "Remove dead buffer from `auto-revert-buffer-list'.") nil [13293 13481])
            ("define-minor-mode" code nil nil [13498 14601])
            ("turn-on-auto-revert-mode" function (:documentation "Turn on Auto-Revert Mode.

This function is designed to be added to hooks, for example:
  (add-hook \\='c-mode-hook #\\='turn-on-auto-revert-mode)") nil [14619 14828])
            ("define-minor-mode" code nil nil [14846 17488])
            ("turn-on-auto-revert-tail-mode" function (:documentation "Turn on Auto-Revert Tail Mode.

This function is designed to be added to hooks, for example:
  (add-hook \\='my-logfile-mode-hook #\\='turn-on-auto-revert-tail-mode)") nil [17506 17744])
            ("define-minor-mode" code nil nil [17762 18884])
            ("auto-revert-set-timer" function
               (:documentation "Restart or cancel the timer used by Auto-Revert Mode.
If such a timer is active, cancel it.  Start a new timer if
Global Auto-Revert Mode is active or if Auto-Revert Mode is active
in some buffer.  Restarting the timer ensures that Auto-Revert Mode
will use an up-to-date value of `auto-revert-interval'"
                :user-visible-flag t)
                nil [18886 19500])
            ("auto-revert-notify-rm-watch" function (:documentation "Disable file notification for current buffer's associated file.") nil [19502 20237])
            ("auto-revert-notify-add-watch" function (:documentation "Enable file notification for current buffer's associated file.") nil [20239 21453])
            ("auto-revert-buffers-counter" variable
               (:documentation "Incremented each time `auto-revert-buffers' is called"
                :default-value 1)
                nil [21985 22081])
            ("defvar-local" code nil nil [22082 22601])
            ("auto-revert-notify-handler" function
               (:documentation "Handle an EVENT returned from file notification."
                :arguments ("event"))
                nil [22603 25638])
            ("auto-revert-active-p" function (:documentation "Check if auto-revert is active (in current buffer or globally).") nil [25640 25944])
            ("auto-revert-handler" function (:documentation "Revert current buffer, if appropriate.
This is an internal function used by Auto-Revert Mode.") nil [25946 28900])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [28902 29563])
            ("auto-revert-buffers" function (:documentation "Revert buffers as specified by Auto-Revert and Global Auto-Revert Mode.

Should `global-auto-revert-mode' be active all file buffers are checked.

Should `auto-revert-mode' be active in some buffers, those buffers
are checked.

Non-file buffers that have a custom `revert-buffer-function' and
`buffer-stale-function' are reverted either when Auto-Revert
Mode is active in that buffer, or when the variable
`global-auto-revert-non-file-buffers' is non-nil and Global
Auto-Revert Mode is active.

This function stops whenever there is user input.  The buffers not
checked are stored in the variable `auto-revert-remaining-buffers'.

To avoid starvation, the buffers in `auto-revert-remaining-buffers'
are checked first the next time this function is called.

This function is also responsible for removing buffers no longer in
Auto-Revert Mode from `auto-revert-buffer-list', and for canceling
the timer when no buffers need to be checked.") nil [29565 32582])
            ("autorevert" package nil nil [32597 32618])
            ("run-hooks" code nil nil [32620 32654]))          
      :file "autorevert.el.gz"
      :pointmax 32684
      :fsize 9100
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 4800 . 4801) (symbol 4765 . 4782) (open-paren 4764 . 4765)))
    (semanticdb-table "semanticdb-table-122be74"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image-file" include nil nil [1302 1323])
            ("iimage" customgroup
               (:documentation "Support for inline images."
                :user-visible-flag t)
                nil [1326 1412])
            ("iimage-mode-image-search-path" variable (:documentation "List of directories to search for image files for iimage-mode.") nil [1414 1592])
            ("iimage-mode-image-filename-regex" variable (:default-value (concat "[-+./_0-9a-zA-Z]+\\." (regexp-opt (nconc (mapcar #'upcase image-file-name-extensions) image-file-name-extensions) t))) nil [1594 1792])
            ("iimage-mode-image-regex-alist" variable
               (:documentation "Alist of filename REGEXP vs NUM.
Each element looks like (REGEXP . NUM).
NUM specifies which parenthesized expression in the regexp.

Examples of image filename patterns to match:
    file://foo.png
    \\=`file://foo.png\\='
    \\[\\[foo.gif]]
    <foo.png>
     foo.JPG
"
                :default-value `((,(concat "\\(`?file://\\|\\[\\[\\|<\\|`\\)?" "\\(" iimage-mode-image-filename-regex "\\)" "\\(\\]\\]\\|>\\|'\\)?") . 2)))
                nil [1794 2324])
            ("iimage-mode-map" variable
               (:documentation "Keymap used in `iimage-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "" 'iimage-recenter) map))
                nil [2326 2474])
            ("iimage-recenter" function
               (:documentation "Re-draw images and recenter."
                :user-visible-flag t
                :arguments ("arg"))
                nil [2476 2637])
            ("define-obsolete-function-alias" code nil nil [2654 2727])
            ("turn-off-iimage-mode" function
               (:documentation "Unconditionally turn off iimage mode."
                :user-visible-flag t)
                nil [2729 2836])
            ("iimage-modification-hook" function
               (:documentation "Remove display property if a display region is modified."
                :arguments ("beg" "end"))
                nil [2838 3534])
            ("iimage-mode-buffer" function
               (:documentation "Display images if ARG is non-nil, undisplay them otherwise."
                :arguments ("arg"))
                nil [3536 4689])
            ("define-minor-mode" code nil nil [4706 4834])
            ("iimage" package nil nil [4836 4853]))          
      :file "iimage.el.gz"
      :pointmax 4879
      :fsize 1992
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1323 . 1324) (symbol 1282 . 1299) (open-paren 1281 . 1282)))
    (semanticdb-table "semanticdb-table-122be94"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1546 1592])
            ("gpm-mouse-enable" function (:documentation "Try to enable gpm mouse support on the current terminal.") nil [1594 2153])
            ("gpm-mouse-disable" function (:documentation "Try to disable gpm mouse support on the current terminal.") nil [2155 2354])
            ("define-obsolete-function-alias" code nil nil [2371 2440])
            ("define-minor-mode" code nil nil [2456 3370])
            ("t-mouse" package nil nil [3372 3390]))          
      :file "t-mouse.el.gz"
      :pointmax 3417
      :fsize 1558
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122beb4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("untabify" function
               (:documentation "Convert all tabs in region to multiple spaces, preserving columns.
If called interactively with prefix ARG, convert for the entire
buffer.

Called non-interactively, the region is specified by arguments
START and END, rather than by the position of point and mark.
The variable `tab-width' controls the spacing of tab stops."
                :user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [1042 2079])
            ("tabify-regexp" variable
               (:documentation "Regexp matching whitespace that tabify should consider.
Usually this will be \" [ \\t]+\" to match a space followed by whitespace.
\"^\\t* [ \\t]+\" is also useful, for tabifying only initial whitespace."
                :default-value " [ 	]+")
                nil [2081 2321])
            ("tabify" function
               (:documentation "Convert multiple spaces in region to tabs when possible.
A group of spaces is partially replaced by tabs
when this can be done without changing the column they end at.
If called interactively with prefix ARG, convert for the entire
buffer.

Called non-interactively, the region is specified by arguments
START and END, rather than by the position of point and mark.
The variable `tab-width' controls the spacing of tab stops."
                :user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [2338 4172])
            ("tabify" package nil nil [4174 4191]))          
      :file "tabify.el.gz"
      :pointmax 4217
      :fsize 1620
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122bed4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6710 6729])
            ("highlight-changes" customgroup
               (:documentation "Highlight Changes mode."
                :user-visible-flag t)
                nil [6795 6889])
            ("highlight-changes" variable
               (:documentation "Face used for highlighting changes."
                :default-value '((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t)))
                :type "face")
                nil [7284 7509])
            ("highlight-changes-delete" variable
               (:documentation "Face used for highlighting deletions."
                :default-value '((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t)))
                :type "face")
                nil [7588 7847])
            ("highlight-changes-colors" variable
               (:documentation "Colors used by `highlight-changes-rotate-faces'.
The newest rotated change will be displayed in the first element of this list,
the next older will be in the second element etc.

This list is used if `highlight-changes-face-list' is nil, otherwise that
variable overrides this list.  If you only care about foreground
colors then use this, if you want fancier faces then set
`highlight-changes-face-list'."
                :default-value (if (eq (frame-parameter nil 'background-mode) 'light) '("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue") '("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))
                nil [7912 8695])
            ("define-obsolete-variable-alias" code nil nil [8796 8914])
            ("highlight-changes-visibility-initial-state" variable
               (:documentation "Controls whether changes are initially visible in Highlight Changes mode.

This controls the initial value of `highlight-changes-visible-mode'.
When a buffer is in Highlight Changes mode the function
`highlight-changes-visible-mode' is used to toggle the mode on or off."
                :default-value t)
                nil [8916 9292])
            ("define-obsolete-variable-alias" code nil nil [9428 9536])
            ("highlight-changes-visible-string" variable
               (:documentation "The string used when in Highlight Changes mode and changes are visible.
This should be set to nil if no indication is desired, or to
a string with a leading space."
                :default-value " +Chg")
                nil [9538 9839])
            ("define-obsolete-variable-alias" code nil nil [9841 9952])
            ("highlight-changes-invisible-string" variable
               (:documentation "The string used when in Highlight Changes mode and changes are hidden.
This should be set to nil if no indication is desired, or to
a string with a leading space."
                :default-value " -Chg")
                nil [9954 10256])
            ("highlight-changes-global-modes" variable
               (:documentation "Determine whether a buffer is suitable for global Highlight Changes mode.

A function means call that function to decide: if it returns non-nil,
the buffer is suitable.

A list means the elements are major modes suitable for Highlight
Changes mode, or a list whose first element is `not' followed by major
modes which are not suitable.

A value of t means the buffer is suitable if it is visiting a file and
its name does not begin with ` ' or `*'.

A value of nil means no buffers are suitable for `global-highlight-changes-mode'
(effectively disabling the mode).

Example:
	(c-mode c++-mode)
means that Highlight Changes mode is turned on for buffers in C and C++
modes only."
                :default-value t)
                nil [10258 11375])
            ("highlight-changes-global-changes-existing-buffers" variable (:documentation "If non-nil, toggling global Highlight Changes mode affects existing buffers.
Normally, `global-highlight-changes-mode' affects only new buffers (to be
created).  However, if `highlight-changes-global-changes-existing-buffers'
is non-nil, then turning on `global-highlight-changes-mode' will turn on
Highlight Changes mode in suitable buffers, and turning the mode off will
remove it from existing buffers.") nil [11377 11897])
            ("hilit-chg-list" variable nil nil [11931 11958])
            ("hilit-chg-string" variable (:default-value " ??") nil [11959 11990])
            ("make-variable-buffer-local" code nil nil [11992 12038])
            ("define-minor-mode" code nil nil [12075 13685])
            ("define-minor-mode" code nil nil [13703 14211])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14214 15825])
            ("highlight-changes-face-list" variable (:documentation "A list of faces used when rotating changes.
Normally the variable is initialized to nil and the list is created from
`highlight-changes-colors' when needed.  However, you can set this variable
to any list of faces.  You will have to do this if you want faces which
don't just differ from the `highlight-changes' face by the foreground color.
Otherwise, this list will be constructed when needed from
`highlight-changes-colors'.") nil [15828 16487])
            ("hilit-chg-map-changes" function
               (:documentation "Call function FUNC for each region used by Highlight Changes mode.
If START-POSITION is nil, (point-min) is used.
If END-POSITION is nil, (point-max) is used.
FUNC is called with three params: PROPERTY START STOP."
                :arguments ("func" "start-position" "end-position"))
                nil [16490 17128])
            ("hilit-chg-display-changes" function
               (:documentation "Display face information for Highlight Changes mode.

An overlay from BEG to END containing a change face is added
from the information in the text property of type `hilit-chg'.

This is the opposite of `hilit-chg-hide-changes'."
                :arguments ("beg" "end"))
                nil [17131 17470])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [17473 18308])
            ("hilit-chg-hide-changes" function
               (:documentation "Remove face information for Highlight Changes mode.

The overlay containing the face is removed, but the text property
containing the change information is retained.

This is the opposite of `hilit-chg-display-changes'."
                :arguments ("beg" "end"))
                nil [18310 18808])
            ("hilit-chg-fixup" function
               (:documentation "Fix change overlays in region between BEG and END.

Ensure the overlays agree with the changes as determined from
the text properties of type `hilit-chg'."
                :arguments ("beg" "end"))
                nil [18811 19131])
            ("highlight-changes-remove-highlight" function
               (:documentation "Remove the change face from the region between BEG and END.
This allows you to manually remove highlighting from uninteresting changes."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [19148 19474])
            ("hilit-chg-set-face-on-change" function
               (:documentation "Record changes and optionally display them in a distinctive face.
`hilit-chg-set' adds this function to the `after-change-functions' hook."
                :arguments ("beg" "end" "leng-before" "no-property-change"))
                nil [19476 22198])
            ("hilit-chg-update" function (:documentation "Update a buffer's highlight changes when visibility changed.") nil [22200 22631])
            ("hilit-chg-set" function (:documentation "Turn on Highlight Changes mode for this buffer.") nil [22633 23043])
            ("hilit-chg-clear" function (:documentation "Remove Highlight Changes mode for this buffer.
This removes all saved change information.") nil [23045 23752])
            ("highlight-changes-next-change" function
               (:documentation "Move to the beginning of the next change, if in Highlight Changes mode."
                :user-visible-flag t)
                nil [23770 24333])
            ("highlight-changes-previous-change" function
               (:documentation "Move to the beginning of the previous change, if in Highlight Changes mode."
                :user-visible-flag t)
                nil [24351 25180])
            ("hilit-chg-make-list" function
               (:documentation "Construct `hilit-chg-list' and `highlight-changes-face-list'."
                :arguments ("force"))
                nil [25259 26577])
            ("hilit-chg-bump-change" function
               (:documentation "Increment (age) the Highlight Changes mode text property."
                :arguments ("prop" "start" "end"))
                nil [26579 26980])
            ("highlight-changes-rotate-faces" function
               (:documentation "Rotate the faces if in Highlight Changes mode and the changes are visible.

Current changes are displayed in the face described by the first element
of `highlight-changes-face-list', one level older changes are shown in
face described by the second element, and so on.  Very old changes remain
shown in the last face in the list.

You can automatically rotate colors when the buffer is saved by adding
this function to `write-file-functions' as a buffer-local value.  To do
this, eval the following in the buffer to be saved:

  (add-hook \\='write-file-functions \\='highlight-changes-rotate-faces nil t)"
                :user-visible-flag t)
                nil [26997 29129])
            ("highlight-markup-buffers" function
               (:documentation "Get differences between two buffers and set highlight changes.
Both buffers are done unless optional parameter MARKUP-A-ONLY
is non-nil."
                :arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only"))
                nil [29279 31671])
            ("highlight-compare-buffers" function
               (:documentation "Compare two buffers and highlight the differences.

The default is the current buffer and the one in the next window.

If either buffer is modified and is visiting a file, you are prompted
to save the file.

Unless the buffer is unmodified and visiting a file, the buffer is
written to a temporary file for comparison.

If a buffer is read-only, differences will be highlighted but no property
changes are made, so \\[highlight-changes-next-change] and
\\[highlight-changes-previous-change] will not work."
                :user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [31688 32556])
            ("highlight-compare-with-file" function
               (:documentation "Compare this buffer with a file, and highlight differences.

If the buffer has a backup filename, it is used as the default when
this function is called interactively.

If the current buffer is visiting the file being compared against, it
also will have its differences highlighted.  Otherwise, the file is
read in temporarily but the buffer is deleted.

If the buffer is read-only, differences will be highlighted but no property
changes are made, so \\[highlight-changes-next-change] and
\\[highlight-changes-previous-change] will not work."
                :user-visible-flag t
                :arguments ("file-b"))
                nil [32573 33958])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [33961 34384])
            ("hilit-chg-get-diff-list-hk" function nil nil [34387 35850])
            ("define-globalized-minor-mode" code nil nil [35940 36056])
            ("define-obsolete-function-alias" code nil nil [36058 36157])
            ("highlight-changes-mode-turn-on" function (:documentation "See if Highlight Changes mode should be turned on for this buffer.
This is called when `global-highlight-changes-mode' is turned on.") nil [36159 36924])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37024 37177])
            ("add-to-list" code nil nil [37179 37288])
            ("add-to-list" code nil nil [37290 37351])
            ("hilit-chg-unload-function" function (:documentation "Unload the Highlight Changes library.") nil [37733 37877])
            ("hilit-chg" package nil nil [37879 37899]))          
      :file "hilit-chg.el.gz"
      :pointmax 37928
      :fsize 10956
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122c214"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2861 2959])
            ("defvar-local" code nil nil [2961 3073])
            ("global-hl-line-overlays" variable (:documentation "Overlays used by Global-Hl-Line mode in various buffers.
Global-Hl-Line keeps displaying one overlay in each buffer
when `global-hl-line-sticky-flag' is non-nil.") nil [3075 3277])
            ("hl-line" customgroup
               (:documentation "Highlight the current line."
                :user-visible-flag t)
                nil [3279 3373])
            ("hl-line" variable
               (:documentation "Default face for highlighting the current line in Hl-Line mode."
                :default-value '((t :inherit highlight))
                :type "face")
                nil [3375 3524])
            ("hl-line-face" variable
               (:documentation "Face with which to highlight the current line in Hl-Line mode."
                :default-value 'hl-line)
                nil [3526 3955])
            ("hl-line-sticky-flag" variable
               (:documentation "Non-nil means the HL-Line mode highlight appears in all windows.
Otherwise Hl-Line mode will highlight only in the selected
window.  Setting this variable takes effect the next time you use
the command `hl-line-mode' to turn Hl-Line mode on.

This variable has no effect in Global Highlight Line mode.
For that, use `global-hl-line-sticky-flag'."
                :default-value t)
                nil [3957 4393])
            ("global-hl-line-sticky-flag" variable (:documentation "Non-nil means the Global HL-Line mode highlight appears in all windows.
Otherwise Global Hl-Line mode will highlight only in the selected
window.  Setting this variable takes effect the next time you use
the command `global-hl-line-mode' to turn Global Hl-Line mode on.") nil [4395 4764])
            ("hl-line-range-function" variable (:documentation "If non-nil, function to call to return highlight range.
The function of no args should return a cons cell; its car value
is the beginning position of highlight and its cdr value is the
end position of highlight in the buffer.
It should return nil if there's no region to be highlighted.

This variable is expected to be made buffer-local by modes.") nil [4766 5153])
            ("hl-line-overlay-buffer" variable (:documentation "Most recently visited buffer in which Hl-Line mode is enabled.") nil [5155 5257])
            ("define-minor-mode" code nil nil [5274 6542])
            ("hl-line-make-overlay" function nil nil [6544 6726])
            ("hl-line-highlight" function (:documentation "Activate the Hl-Line overlay on the current line.") nil [6728 7166])
            ("hl-line-unhighlight" function (:documentation "Deactivate the Hl-Line overlay on the current line.") nil [7168 7316])
            ("hl-line-maybe-unhighlight" function (:documentation "Maybe deactivate the Hl-Line overlay on the current line.
Specifically, when `hl-line-sticky-flag' is nil deactivate all
such overlays in all buffers except the current one.") nil [7318 8023])
            ("define-minor-mode" code nil nil [8040 9029])
            ("global-hl-line-highlight" function (:documentation "Highlight the current line in the current window.") nil [9031 9631])
            ("global-hl-line-highlight-all" function (:documentation "Highlight the current line in all live windows.") nil [9633 9881])
            ("global-hl-line-unhighlight" function (:documentation "Deactivate the Global-Hl-Line overlay on the current line.") nil [9883 10059])
            ("global-hl-line-maybe-unhighlight" function (:documentation "Maybe deactivate the Global-Hl-Line overlay on the current line.
Specifically, when `global-hl-line-sticky-flag' is nil deactivate
all such overlays in all buffers except the current one.") nil [10061 10728])
            ("global-hl-line-unhighlight-all" function (:documentation "Deactivate all Global-Hl-Line overlays.") nil [10730 11024])
            ("hl-line-move" function
               (:documentation "Move the Hl-Line overlay.
If `hl-line-range-function' is non-nil, move the OVERLAY to the position
where the function returns.  If `hl-line-range-function' is nil, fill
the line including the point by OVERLAY."
                :arguments ("overlay"))
                nil [11026 11568])
            ("hl-line-unload-function" function (:documentation "Unload the Hl-Line library.") nil [11570 11832])
            ("hl-line" package nil nil [11834 11852]))          
      :file "hl-line.el.gz"
      :pointmax 11879
      :fsize 3362
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-122c234"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lpr-windows-system" variable
               (:documentation "Non-nil if running on MS-DOS or MS Windows."
                :default-value (memq system-type '(ms-dos windows-nt)))
                nil [1129 1246])
            ("lpr-lp-system" variable
               (:documentation "Non-nil if running on a system type that uses the \"lp\" command."
                :default-value (memq system-type '(usg-unix-v hpux)))
                nil [1263 1395])
            ("lpr" customgroup
               (:documentation "Print Emacs buffer on line printer."
                :user-visible-flag t)
                nil [1398 1471])
            ("printer-name" variable
               (:documentation "The name of a local printer to which data is sent for printing.
(Note that PostScript files are sent to `ps-printer-name', which see.)

On Unix-like systems, a string value should be a name understood by
lpr's -P option; otherwise the value should be nil.

On MS-DOS and MS-Windows systems, a string value is taken as the name of
a printer device or port, provided `lpr-command' is set to \"\".
Typical non-default settings would be \"LPT1\" to \"LPT3\" for parallel
printers, or \"COM1\" to \"COM4\" or \"AUX\" for serial printers, or
\"//hostname/printer\" for a shared network printer.  You can also set
it to the name of a file, in which case the output gets appended to that
file.  If you want to discard the printed output, set this to \"NUL\"."
                :default-value (and (eq system-type 'ms-dos) "PRN"))
                nil [1489 2502])
            ("lpr-switches" variable (:documentation "List of strings to pass as extra options for the printer program.
It is recommended to set `printer-name' instead of including an explicit
switch on this list.
See `lpr-command'.") nil [2519 2787])
            ("lpr-add-switches" variable
               (:documentation "Non-nil means construct `-T' and `-J' options for the printer program.
These are made assuming that the program is `lpr';
if you are using some other incompatible printer program,
this variable should be nil."
                :default-value (memq system-type '(berkeley-unix gnu/linux)))
                nil [2789 3107])
            ("lpr-printer-switch" variable
               (:documentation "Printer switch, that is, something like \"-P\", \"-d \", \"/D:\", etc.
This switch is used in conjunction with `printer-name'."
                :default-value (if lpr-lp-system "-d " "-P"))
                nil [3109 3467])
            ("lpr-command" variable
               (:documentation "Name of program for printing a file.

On MS-DOS and MS-Windows systems, if the value is an empty string then
Emacs will write directly to the printer port named by `printer-name'.
The programs `print' and `nprint' (the standard print programs on
Windows NT and Novell Netware respectively) are handled specially, using
`printer-name' as the destination for output; any other program is
treated like `lpr' except that an explicit filename is given as the last
argument."
                :default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr"))))
                nil [3484 4107])
            ("lpr-headers-switches" variable (:documentation "List of strings of options to request page headings in the printer program.
If nil, we run `lpr-page-header-program' to make page headings
and print the result.") nil [4240 4583])
            ("print-region-function" variable
               (:documentation "Function to call to print the region on a printer.
See definition of `print-region-1' for calling conventions."
                :default-value (if (memq system-type '(ms-dos windows-nt)) #'w32-direct-print-region-function #'call-process-region))
                nil [4585 4879])
            ("lpr-page-header-program" variable
               (:documentation "Name of program for adding page headers to a file."
                :default-value "pr")
                nil [4881 5006])
            ("lpr-page-header-switches" variable
               (:documentation "List of strings to use as options for the page-header-generating program.
If `%s' appears in any of the strings, it is substituted by the page title.
Note that for correct quoting, `%s' should normally be a separate element.
The variable `lpr-page-header-program' specifies the program to use."
                :default-value '("-h" "%s" "-F"))
                nil [5120 5511])
            ("lpr-buffer" function
               (:documentation "Print buffer contents without pagination or page headers.
See the variables `lpr-switches' and `lpr-command'
for customization of the printer command."
                :user-visible-flag t)
                nil [5528 5870])
            ("print-buffer" function
               (:documentation "Paginate and print buffer contents.

The variable `lpr-headers-switches' controls how to paginate.
If it is nil (the default), we run the `pr' program (or whatever program
`lpr-page-header-program' specifies) to paginate.
`lpr-page-header-switches' specifies the switches for that program.

Otherwise, the switches in `lpr-headers-switches' are used
in the print command itself; we expect them to request pagination.

See the variables `lpr-switches' and `lpr-command'
for further customization of the printer command."
                :user-visible-flag t)
                nil [5887 6597])
            ("lpr-region" function
               (:documentation "Print region contents without pagination or page headers.
See the variables `lpr-switches' and `lpr-command'
for customization of the printer command."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [6614 6992])
            ("print-region" function
               (:documentation "Paginate and print the region contents.

The variable `lpr-headers-switches' controls how to paginate.
If it is nil (the default), we run the `pr' program (or whatever program
`lpr-page-header-program' specifies) to paginate.
`lpr-page-header-switches' specifies the switches for that program.

Otherwise, the switches in `lpr-headers-switches' are used
in the print command itself; we expect them to request pagination.

See the variables `lpr-switches' and `lpr-command'
for further customization of the printer command."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [7009 7759])
            ("print-region-1" function (:arguments ("start" "end" "switches" "page-headers")) nil [7761 9608])
            ("lpr-print-region" function (:arguments ("start" "end" "switches" "name")) nil [9610 11346])
            ("print-region-new-buffer" function (:arguments ("ostart" "oend")) nil [11539 11872])
            ("printify-region" function
               (:documentation "Replace nonprinting characters in region with printable representations.
The printable representations use ^ (for ASCII control characters) or hex.
The characters tab, linefeed, space, return and formfeed are not affected."
                :user-visible-flag t
                :arguments ("begin" "end"))
                nil [11874 12481])
            ("lpr-eval-switch" function (:arguments ("arg")) nil [12627 12806])
            ("lpr-flatten-list" function (:arguments ("list")) nil [13097 13162])
            ("lpr-flatten-list-1" function (:arguments ("list")) nil [13164 13346])
            ("lpr" package nil nil [13348 13362]))          
      :file "lpr.el.gz"
      :pointmax 13385
      :fsize 4340
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-14dd1b8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1442 1479])
            ("read-envvar-name" function
               (:documentation "Read environment variable name, prompting with PROMPT.
Optional second arg MUSTMATCH, if non-nil, means require existing envvar name.
If it is also not t, RET does not exit if it does non-null completion."
                :arguments ("prompt" "mustmatch"))
                nil [1481 2283])
            ("setenv-history" variable nil nil [2331 2358])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2360 2462])
            ("substitute-env-vars" function
               (:documentation "Substitute environment variables referred to in STRING.
`$FOO' where FOO is an environment variable name means to substitute
the value of that variable.  The variable name should be terminated
with a character not a letter, digit or underscore; otherwise, enclose
the entire variable name in braces.  For instance, in `ab$cd-x',
`$cd' is treated as an environment variable.

If WHEN-DEFINED is nil, references to undefined environment variables
are replaced by the empty string; if it is a function, the function is called
with the variable name as argument and should return the text with which
to replace it or nil to leave it unchanged.
If it is non-nil and not a function, references to undefined variables are
left unchanged.

Use `$$' to insert a single dollar sign."
                :arguments ("string" "when-undefined"))
                nil [2464 4018])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4020 4402])
            ("setenv-internal" function
               (:documentation "Set VARIABLE to VALUE in ENV, adding empty entries if KEEP-EMPTY.
Changes ENV by side-effect, and returns its new value."
                :arguments ("env" "variable" "value" "keep-empty"))
                nil [4404 5414])
            ("setenv" function
               (:documentation "Set the value of the environment variable named VARIABLE to VALUE.
VARIABLE should be a string.  VALUE is optional; if not provided or
nil, the environment variable VARIABLE will be removed.

Interactively, a prefix argument means to unset the variable, and
otherwise the current value (if any) of the variable appears at
the front of the history list when you type in the new value.
This function always replaces environment variables in the new
value when called interactively.

SUBSTITUTE-ENV-VARS, if non-nil, means to substitute environment
variables in VALUE with `substitute-env-vars', which see.
This is normally used only for interactive calls.

The return value is the new value of VARIABLE, or nil if
it was removed from the environment.

This function works by modifying `process-environment'.

As a special case, setting variable `TZ' calls `set-time-zone-rule' as
a side-effect."
                :user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5484 7889])
            ("getenv" function
               (:documentation "Get the value of environment variable VARIABLE.
VARIABLE should be a string.  Value is nil if VARIABLE is undefined in
the environment.  Otherwise, value is a string.

If optional parameter FRAME is non-nil, then it should be a
frame.  This function will look up VARIABLE in its `environment'
parameter.

Otherwise, this function searches `process-environment' for
VARIABLE.  If it is not found there, then it continues the search
in the environment list of the selected frame."
                :user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7891 8941])
            ("env" package nil nil [8943 8957]))          
      :file "env.el.gz"
      :pointmax 8980
      :fsize 3300
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
