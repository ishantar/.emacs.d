;; Object semanticdb-project-database-file-1878510
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1878510"
  :tables
  (list
    (semanticdb-table "semanticdb-table-176c664"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1426 1443])
            ("net-utils" include nil nil [1444 1464])
            ("cider" include nil nil [1465 1481])
            ("s" include nil nil [1482 1494])
            ("simple-httpd" include nil nil [1495 1518])
            ("clomacs-verify-nrepl-on-call" variable (:default-value t) nil [1520 1559])
            ("clomacs-autoload-nrepl-on-call" variable (:default-value t) nil [1560 1601])
            ("clomacs-httpd-default-port" variable
               (:documentation "Http port to listen for requests from Clojure side."
                :default-value 8080)
                nil [1603 1737])
            ("clomacs-httpd-port-scan-limit" variable
               (:documentation "Available Http ports scan range limit."
                :default-value 100)
                nil [1739 1862])
            ("clomacs-print-length" variable
               (:documentation "Value for *print-length* set during `clomacs-defun' macros evaluation.
Restricts list length passed from Clojure to Emacs lisp.
Set `nil' for unlimited list length."
                :default-value 100000)
                nil [1864 2107])
            ("clomacs-restore-print-length" variable (:documentation "When t restore *print-length* acording to `cider-repl-print-length' value.
After any `clomacs-defun' wraped funtion call, restore *print-length*.
Can be useful for debugging purpose to run `clomacs-defun' functions and
Clojure code directly in the same REPL.") nil [2109 2451])
            ("cloamcs-get-dir" function (:arguments ("repl-info")) nil [2453 2578])
            ("clomacs-search-connection" function
               (:documentation "Search nREPL connection buffer.
E.g. if you want to find \"*cider-repl clomacs-20160419.258*\" you shold pass
REPL-BUFFER-PROJECT-NAME \"clomacs\"."
                :arguments ("project-name"))
                nil [2580 3249])
            ("clomacs-get-connection" function
               (:documentation "Return buffer with nREPL process related to LIBRARY.
If LIBRARY is nil, attempts to use \"clomacs\", \"localhost\" or
any current connection.
If can't find any nREPL process return nil."
                :arguments ("library"))
                nil [3251 3672])
            ("clomacs-get-session" function
               (:documentation "Return current session for this CONNECTION."
                :arguments ("connection"))
                nil [3674 3864])
            ("clomacs-launch-nrepl" function (:arguments ("library" "sync")) nil [3866 4973])
            ("clomacs-return-stringp" function (:arguments ("raw-string")) nil [4975 5188])
            ("clomacs-strip-string" function (:arguments ("raw-string")) nil [5190 5345])
            ("clomacs-clean-result-string" function (:arguments ("return-string")) nil [5347 5717])
            ("clomacs-format-result" function
               (:documentation "Format Elisp representation of Clojure evaluation result."
                :arguments ("raw-string" "return-type"))
                nil [5719 6427])
            ("declare" code nil nil [6429 6457])
            ("clomacs-alist-p" function
               (:documentation "Return t if OBJECT is a alist, otherwise, return nil."
                :arguments ("object"))
                nil [6459 6691])
            ("clomacs-alist-to-map" function
               (:documentation "Build string representation of Clojure map from Elisp alist LST."
                :arguments ("lst"))
                nil [6693 7091])
            ("clomacs-format-arg" function
               (:documentation "Format Clojure representation of Elisp argument."
                :arguments ("a"))
                nil [7093 7585])
            ("clomacs-possible-return-types" variable (:default-value (list :string :int :number :list :char :vector)) nil [7587 7715])
            ("clomacs-highlight-initialize" function nil nil [7717 7904])
            ("clomacs-force-symbol-name" function
               (:documentation "Return lisp symbol SOME-SYMBOL as a string at all costs!"
                :arguments ("some-symbol"))
                nil [7906 8103])
            ("eval-after-load" code nil nil [8105 8422])
            ("clomacs-get-doc" function
               (:documentation "Form the emacs-lisp side entity docstring.
DOC - user-defined docsting.
CL-ENTITY-NAME - clojure side entity name.
CL-ENTITY-TYPE - \"value\" or \"function\""
                :arguments ("doc" "cl-entity-name"))
                nil [8424 8934])
            ("clomacs-ensure-nrepl-run" function
               (:documentation "Ensure nrepl is running."
                :arguments ("lib-name"))
                nil [8936 9301])
            ("clomacs-get-result" function
               (:documentation "Parse result of clojure code evaluation from CIDER.
Handle errors. Handle difference between CIDER versions."
                :arguments ("result" "value" "type" "namespace"))
                nil [9303 10091])
            ("clomacs-add-quotes" function (:arguments ("str")) nil [10093 10232])
            ("cl-defun" code nil nil [10234 11572])
            ("cl-defmacro" code nil nil [11589 12871])
            ("cl-defmacro" code nil nil [12888 16601])
            ("clomacs-load-file" function
               (:documentation "Sync and straightforward load clojure file."
                :arguments ("file-path"))
                nil [16603 16937])
            ("clomacs-eval-elisp" function
               (:documentation "Evaluate elisp code stored in a STRING."
                :arguments ("string"))
                nil [17013 17133])
            ("defservlet*" code nil nil [17135 17275])
            ("clomacs-get-httpd-port" function (:documentation "Search available port for httpd process.") nil [17277 17910])
            ("cl-defmacro" code nil nil [17912 19140])
            ("cl-defmacro" code nil nil [19142 20257])
            ("clomacs-defun" code nil nil [20259 20326])
            ("clomacs-defun" code nil nil [20328 20416])
            ("clomacs-defun" code nil nil [20418 20506])
            ("clomacs-defun" code nil nil [20508 20600])
            ("clomacs-httpd-start" function (:documentation "Start Emacs http server and set host and port on Clojure side.") nil [20602 20855])
            ("clomacs-httpd-stop" function (:documentation "Stop Emacs http server and reset host and port on Clojure side.") nil [20857 21034])
            ("clomacs" package nil nil [21036 21054]))          
      :file "clomacs.el"
      :pointmax 21081
      :fsize 21080
      :lastmodtime '(23440 14721 677765 246000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!clomacs-20180901.1941!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
