;; Object semanticdb-project-database-file-1afb0e0
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1afb0e0"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1af5954"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [762 781])
            ("emacs-module.h" include nil nil [783 808])
            ("stdarg.h" include (:system-flag t) nil [810 829])
            ("stddef.h" include (:system-flag t) nil [830 849])
            ("stdint.h" include (:system-flag t) nil [850 869])
            ("stdio.h" include (:system-flag t) nil [870 888])
            ("lisp.h" include nil nil [890 907])
            ("dynlib.h" include nil nil [908 927])
            ("coding.h" include nil nil [928 947])
            ("keyboard.h" include nil nil [948 969])
            ("syssignal.h" include nil nil [970 992])
            ("thread.h" include nil nil [993 1012])
            ("intprops.h" include (:system-flag t) nil [1014 1035])
            ("verify.h" include (:system-flag t) nil [1036 1055])
            ("" type
               (:members 
                  ( ("plain_values" variable
                       (:constant-flag t
                        :default-value (2329 2460)
                        :type "int")
                        (reparse-symbol enumsubparts) [2308 2460]))                  
                :type "enum")
                nil [2295 2465])
            ("emacs_init_function" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_runtime" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2559 2582]))                  
                :type "int")
                nil [2531 2583])
            ("emacs_finalizer_function" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [2902 2909]))                  
                :type "void")
                nil [2868 2910])
            ("emacs_env_private" type
               (:members 
                  ( ("pending_non_local_exit" variable (:type ("emacs_funcall_exit" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [3166 3213])
                    ("non_local_exit_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3371 3426])
                    ("non_local_exit_data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3371 3426])
                    ("values" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3583 3602]))                  
                :type "struct")
                nil [3137 3605])
            ("emacs_runtime_private" type
               (:members 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3730 3745]))                  
                :type "struct")
                nil [3697 3748])
            ("value_to_lisp" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3816 3828]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3782 3829])
            ("lisp_to_value" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3864 3876])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3877 3889]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [3830 3890])
            ("module_non_local_exit_check" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3951 3963]))                  
                :type ("emacs_funcall_exit" type (:type "enum") nil nil))
                nil [3891 3964])
            ("module_assert_thread" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3999 4004]))                  
                :type "void")
                nil [3965 4005])
            ("module_assert_runtime" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_runtime" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4041 4064]))                  
                :type "void")
                nil [4006 4065])
            ("module_assert_env" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4097 4109]))                  
                :type "void")
                nil [4066 4110])
            ("ATTRIBUTE_FORMAT_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [4174 4204])
            ("initialize_environment" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4247 4259])
                    ("" variable
                       (:pointer 1
                        :type ("emacs_env_private" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4267 4294]))                  
                :type ("emacs_env" type (:type "class") nil nil))
                nil [4205 4295])
            ("finalize_environment" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4330 4342]))                  
                :type "void")
                nil [4296 4343])
            ("finalize_environment_unwind" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [4385 4392]))                  
                :type "void")
                nil [4344 4393])
            ("finalize_runtime_unwind" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [4431 4438]))                  
                :type "void")
                nil [4394 4439])
            ("module_handle_signal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4474 4486])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4487 4499]))                  
                :type "void")
                nil [4440 4500])
            ("module_handle_throw" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4534 4546])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4547 4559]))                  
                :type "void")
                nil [4501 4560])
            ("module_non_local_exit_signal_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4605 4617])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4627 4639])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4640 4652]))                  
                :type "void")
                nil [4561 4653])
            ("module_non_local_exit_throw_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4697 4709])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4718 4730])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4731 4743]))                  
                :type "void")
                nil [4654 4744])
            ("module_out_of_memory" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4779 4791]))                  
                :type "void")
                nil [4745 4792])
            ("module_reset_handlerlist" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 2
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4831 4849]))                  
                :type "void")
                nil [4793 4850])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5104 5116]))                  
                :type "int")
                nil [5096 5117])
            ("module_nil" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("emacs_value" type (:type "class") nil nil))
                nil [5118 5158])
            ("module_assertions" variable
               (:typemodifiers ("static")
                :default-value "false"
                :type "bool")
                nil [5160 5198])
            ("global_env" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("emacs_env" type (:type "class") nil nil))
                nil [5199 5228])
            ("global_env_private" variable
               (:typemodifiers ("static")
                :type ("emacs_env_private" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [5229 5280])
            ("MODULE_HANDLE_NONLOCAL_EXIT" variable (:constant-flag t) nil [6396 6423])
            ("MODULE_SETJMP" variable (:constant-flag t) nil [6588 6601])
            ("MODULE_SETJMP_1" variable (:constant-flag t) nil [7478 7493])
            ("MODULE_FUNCTION_BEGIN_NO_CATCH" variable (:constant-flag t) nil [9904 9934])
            ("MODULE_FUNCTION_BEGIN" variable (:constant-flag t) nil [10540 10561])
            ("CHECK_USER_PTR" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10708 10724]))                  
                :type "void")
                nil [10680 10777])
            ("module_get_environment" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("ert" variable
                       (:pointer 1
                        :type ("emacs_runtime" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [10991 11017]))                  
                :type ("emacs_env" type (:type "class") nil nil))
                nil [10948 11115])
            ("module_make_global_ref" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11283 11298])
                    ("ref" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11299 11315]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [11240 11972])
            ("module_free_global_ref" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12010 12025])
                    ("ref" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12026 12042]))                  
                :type "void")
                nil [11974 13377])
            ("module_non_local_exit_check" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13439 13454]))                  
                :type ("emacs_funcall_exit" type (:type "enum") nil nil))
                nil [13379 13567])
            ("module_non_local_exit_clear" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13610 13625]))                  
                :type "void")
                nil [13569 13759])
            ("module_non_local_exit_get" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13819 13834])
                    ("sym" variable
                       (:pointer 1
                        :type ("emacs_value" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13835 13852])
                    ("data" variable
                       (:pointer 1
                        :type ("emacs_value" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13853 13871]))                  
                :type ("emacs_funcall_exit" type (:type "enum") nil nil))
                nil [13761 14268])
            ("module_non_local_exit_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14359 14374])
                    ("sym" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14375 14391])
                    ("data" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14392 14409]))                  
                :type "void")
                nil [14317 14630])
            ("module_non_local_exit_throw" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14673 14688])
                    ("tag" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14689 14705])
                    ("value" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14706 14724]))                  
                :type "void")
                nil [14632 14944])
            ("allocate_module_function" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15009 15014]))                  
                :type ("Lisp_Module_Function" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [14946 15145])
            ("XSET_MODULE_FUNCTION" variable (:constant-flag t) nil [15155 15175])
            ("module_make_function" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15393 15408])
                    ("min_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15409 15429])
                    ("max_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15430 15450])
                    ("subr" variable (:type ("emacs_subr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15459 15475])
                    ("documentation" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15476 15502])
                    ("data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [15511 15522]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [15352 16364])
            ("module_funcall" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16401 16416])
                    ("fun" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16417 16433])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16434 16450])
                    ("args" variable
                       (:dereference 1
                        :type ("emacs_value" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16453 16472]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [16366 17040])
            ("module_intern" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17076 17091])
                    ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17092 17109]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [17042 17196])
            ("module_type_of" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17233 17248])
                    ("value" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17249 17267]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [17198 17373])
            ("module_is_not_nil" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17406 17421])
                    ("value" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17422 17440]))                  
                :type "bool")
                nil [17375 17527])
            ("module_eq" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17552 17567])
                    ("a" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17568 17582])
                    ("b" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17583 17597]))                  
                :type "bool")
                nil [17529 17695])
            ("module_extract_integer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17737 17752])
                    ("n" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17753 17767]))                  
                :type ("intmax_t" type (:type "class") nil nil))
                nil [17697 18039])
            ("module_make_integer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18081 18096])
                    ("n" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18097 18108]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [18041 18403])
            ("module_extract_float" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18441 18456])
                    ("f" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18457 18471]))                  
                :type "double")
                nil [18405 18618])
            ("module_make_float" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18658 18673])
                    ("d" variable (:type "double") (reparse-symbol arg-sub-list) [18674 18683]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [18620 18771])
            ("module_copy_string_contents" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18814 18829])
                    ("value" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18830 18848])
                    ("buffer" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [18849 18862])
                    ("length" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18871 18889]))                  
                :type "bool")
                nil [18773 19463])
            ("module_make_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19504 19519])
                    ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19520 19536])
                    ("length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19537 19554]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [19465 19942])
            ("module_make_user_ptr" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19985 20000])
                    ("fin" variable (:type ("emacs_finalizer_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20001 20030])
                    ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [20031 20041]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [19944 20139])
            ("module_get_user_ptr" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20176 20191])
                    ("uptr" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20192 20209]))                  
                :type "void")
                nil [20141 20343])
            ("module_set_user_ptr" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20378 20393])
                    ("uptr" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20394 20411])
                    ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [20412 20422]))                  
                :type "void")
                nil [20345 20551])
            ("module_get_user_finalizer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20612 20627])
                    ("uptr" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20628 20645]))                  
                :type ("emacs_finalizer_function" type (:type "class") nil nil))
                nil [20553 20787])
            ("module_set_user_finalizer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20828 20843])
                    ("uptr" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20844 20861])
                    ("fin" variable (:type ("emacs_finalizer_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20868 20897]))                  
                :type "void")
                nil [20789 21034])
            ("check_vec_index" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("lvec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21065 21082])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21083 21095]))                  
                :type "void")
                nil [21036 21265])
            ("module_vec_set" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21295 21310])
                    ("vec" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21311 21327])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21328 21340])
                    ("val" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21341 21357]))                  
                :type "void")
                nil [21267 21499])
            ("module_vec_get" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21536 21551])
                    ("vec" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21552 21568])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21569 21581]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [21501 21740])
            ("module_vec_size" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21776 21791])
                    ("vec" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21792 21808]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21742 21929])
            ("module_should_quit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [22051 22066]))                  
                :type "bool")
                nil [22019 22187])
            ("module_signal_or_throw" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env_private" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22248 22278]))                  
                :type "void")
                nil [22212 22629])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmodule_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22653 22666])
                    ("" variable (:type ("Smodule_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22667 22680])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22697 22701]))                  
                :type "int")
                nil [22631 22748])
            ("funcall_module" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24514 24535])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24536 24552])
                    ("arglist" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24553 24574]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [24486 25884])
            ("module_function_arity" function
               (:arguments 
                  ( ("function" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("Lisp_Module_Function" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25921 25971]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [25886 26152])
            ("module_assert_thread" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [26216 26221]))                  
                :type "void")
                nil [26182 26488])
            ("module_assert_runtime" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ert" variable
                       (:pointer 1
                        :type ("emacs_runtime" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26525 26551]))                  
                :type "void")
                nil [26490 26866])
            ("module_assert_env" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26899 26914]))                  
                :type "void")
                nil [26868 27262])
            ("module_non_local_exit_signal_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27308 27323])
                    ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27324 27340])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27345 27362]))                  
                :type "void")
                nil [27264 27630])
            ("module_non_local_exit_throw_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27675 27690])
                    ("tag" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27691 27707])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27718 27736]))                  
                :type "void")
                nil [27632 28004])
            ("module_out_of_memory" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28096 28111]))                  
                :type "void")
                nil [28062 28312])
            ("ltv_mark" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29031 29059])
            ("value_to_lisp_bits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("v" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29213 29227]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29174 30104])
            ("value_to_lisp" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("v" variable (:type ("emacs_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30254 30268]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30220 31369])
            ("lisp_to_value_bits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("o" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31607 31621]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [31568 32002])
            ("lisp_to_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [32178 32193])
                    ("o" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32194 32208]))                  
                :type ("emacs_value" type (:type "class") nil nil))
                nil [32144 33165])
            ("initialize_environment" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33611 33626])
                    ("priv" variable
                       (:pointer 1
                        :type ("emacs_env_private" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33627 33658]))                  
                :type ("emacs_env" type (:type "class") nil nil))
                nil [33568 35266])
            ("finalize_environment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [35379 35394]))                  
                :type "void")
                nil [35345 35645])
            ("finalize_environment_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [35688 35698]))                  
                :type "void")
                nil [35647 35732])
            ("finalize_runtime_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("raw_ert" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [35771 35785]))                  
                :type "void")
                nil [35734 35986])
            ("mark_modules" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [36007 36012]))                  
                :type "void")
                nil [35988 36360])
            ("module_reset_handlerlist" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("phandlerlist" variable
                       (:pointer 2
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36761 36791]))                  
                :type "void")
                nil [36723 36872])
            ("module_handle_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37046 37061])
                    ("err" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37062 37078]))                  
                :type "void")
                nil [37012 37146])
            ("module_handle_throw" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("env" variable
                       (:pointer 1
                        :type ("emacs_env" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37320 37335])
                    ("tag_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37336 37356]))                  
                :type "void")
                nil [37287 37431])
            ("init_module_assertions" function
               (:arguments 
                  ( ("enable" variable (:type "bool") (reparse-symbol arg-sub-list) [37495 37507]))                  
                :type "void")
                nil [37466 37753])
            ("module_abort" function
               (:arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [37821 37840])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [37841 37845]))                  
                :type "int")
                nil [37807 38048])
            ("syms_of_module" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [38102 38107]))                  
                :type "void")
                nil [38081 41333]))          
      :file "emacs-module.c"
      :pointmax 41334
      :fsize 41006
      :lastmodtime '(23443 29219 999866 517000)
      :unmatched-syntax '((semantic-list 37800 . 37806) (symbol 37777 . 37800) (number 37804 . 37805) (number 37801 . 37802) (VOID 37772 . 37776) (number 37804 . 37805) (number 37801 . 37802) (STATIC 37755 . 37761) (number 37804 . 37805) (number 37801 . 37802) (semantic-list 22749 . 24484) (punctuation 22700 . 22701) (number 22687 . 22688) (number 22684 . 22685) (number 22681 . 22682) (string 22638 . 22651) (string 6836 . 6903) (symbol 6830 . 6835) (punctuation 6829 . 6830) (number 4201 . 4202) (number 4198 . 4199) (semantic-list 4146 . 4171) (symbol 4133 . 4145) (VOID 4128 . 4132) (STATIC 4111 . 4117) (TYPEDEF 2860 . 2867) (TYPEDEF 2523 . 2530))
      :lexical-table 
        '(("MODULE_FUNCTION_BEGIN_NO_CATCH" (spp-arg-list ("error_retval") 9934 . 9948) . 
              ((DO "do" 9972 . 9974) (semantic-list "{                                                                  \\
    module_assert_thread ();                                            \\
    module_assert_env (env);                                            \\
    if (module_non_local_exit_check (env) != emacs_funcall_exit_return) \\
      return error_retval;                                              \\
  }" 9975 . 10343) (WHILE "while" 10344 . 10349) (semantic-list "(false)" 10350 . 10357)))
          ("MODULE_HANDLE_NONLOCAL_EXIT" (spp-arg-list ("retval") 6423 . 6431) . 
              ((symbol "MODULE_SETJMP" 6456 . 6469) (semantic-list "(CONDITION_CASE, module_handle_signal, retval)" 6470 . 6516) (punctuation ";" 6516 . 6517) (symbol "MODULE_SETJMP" 6522 . 6535) (semantic-list "(CATCHER_ALL, module_handle_throw, retval)" 6536 . 6578)))
          ("MODULE_FUNCTION_BEGIN" (spp-arg-list ("error_retval") 10561 . 10575) . 
              ((symbol "MODULE_FUNCTION_BEGIN_NO_CATCH" 10585 . 10615) (semantic-list "(error_retval)" 10616 . 10630) (punctuation ";" 10630 . 10631) (symbol "MODULE_HANDLE_NONLOCAL_EXIT" 10636 . 10663) (semantic-list "(error_retval)" 10664 . 10678)))
          ("XSET_MODULE_FUNCTION" (spp-arg-list ("var" "ptr") 15175 . 15185) . ((symbol "XSETPSEUDOVECTOR" 15190 . 15206) (semantic-list "(var, ptr, PVEC_MODULE_FUNCTION)" 15207 . 15239)))
          ("MODULE_SETJMP" (spp-arg-list ("handlertype" "handlerfunc" "retval") 6601 . 6635) . ((symbol "MODULE_SETJMP_1" 6649 . 6664) (semantic-list "(handlertype, handlerfunc, retval,			       \\
		   internal_handler_##handlertype,			       \\
		   internal_cleanup_##handlertype)" 6665 . 6795)))
          ("MODULE_SETJMP_1" (spp-arg-list ("handlertype" "handlerfunc" "retval" "c0" "c") 7493 . 7534) . 
              ((IF "if" 7539 . 7541) (semantic-list "(module_non_local_exit_check (env) != emacs_funcall_exit_return)" 7542 . 7606) (RETURN "return" 7613 . 7619) (symbol "retval" 7620 . 7626) (punctuation ";" 7626 . 7627) (STRUCT "struct" 7638 . 7644) (symbol "handler" 7645 . 7652) (punctuation "*" 7653 . 7654) (symbol "c0" 7654 . 7656) (punctuation "=" 7657 . 7658) (symbol "push_handler_nosignal" 7659 . 7680) (semantic-list "(Qt, handlertype)" 7681 . 7698) (punctuation ";" 7698 . 7699) (IF "if" 7705 . 7707) (semantic-list "(!c0)" 7708 . 7713) (semantic-list "{									\\
      module_out_of_memory (env);					\\
      return retval;							\\
    }" 7727 . 7813) (STRUCT "struct" 7826 . 7832) (symbol "handler" 7833 . 7840) (punctuation "*" 7841 . 7842) (symbol "c" 7842 . 7843) (symbol "__attribute__" 7844 . 7857) (semantic-list "((cleanup (module_reset_handlerlist)))" 7858 . 7896) (punctuation "=" 7903 . 7904) (symbol "c0" 7905 . 7907) (punctuation ";" 7907 . 7908) (IF "if" 7920 . 7922) (semantic-list "(sys_setjmp (c->jmp))" 7923 . 7944) (semantic-list "{									\\
      (handlerfunc) (env, c->val);					\\
      return retval;							\\
    }" 7956 . 8043) (DO "do" 8056 . 8058) (semantic-list "{ }" 8059 . 8062) (WHILE "while" 8063 . 8068) (semantic-list "(false)" 8069 . 8076)))
          )
)


    (semanticdb-table "semanticdb-table-1af59b4"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [832 844])
            ("alloca.h" include (:system-flag t) nil [846 865])
            ("setjmp.h" include (:system-flag t) nil [866 885])
            ("stdalign.h" include (:system-flag t) nil [886 907])
            ("stdarg.h" include (:system-flag t) nil [908 927])
            ("stddef.h" include (:system-flag t) nil [928 947])
            ("string.h" include (:system-flag t) nil [948 967])
            ("float.h" include (:system-flag t) nil [968 986])
            ("inttypes.h" include (:system-flag t) nil [987 1008])
            ("limits.h" include (:system-flag t) nil [1009 1028])
            ("intprops.h" include (:system-flag t) nil [1030 1051])
            ("verify.h" include (:system-flag t) nil [1052 1071])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1493 1508])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1698 1721])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1775 1796])
            ("max" variable (:constant-flag t) nil [1884 1887])
            ("min" variable (:constant-flag t) nil [1926 1929])
            ("ARRAYELTS" variable (:constant-flag t) nil [2008 2017])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2151 2161])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2608 2630])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2631 2663])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2689 2698)
                        :type "int")
                        (reparse-symbol enumsubparts) [2671 2698])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2719 2729)
                        :type "int")
                        (reparse-symbol enumsubparts) [2700 2729]))                  
                :type "enum")
                nil [2664 2732])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2743 2756])
            ("pI" variable (:constant-flag t) nil [2775 2777])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2838 2865])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2866 2899])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2925 2935)
                        :type "int")
                        (reparse-symbol enumsubparts) [2907 2935])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2956 2967)
                        :type "int")
                        (reparse-symbol enumsubparts) [2937 2967]))                  
                :type "enum")
                nil [2900 2970])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2981 2994])
            ("pI" variable (:constant-flag t) nil [3014 3016])
            ("EMACS_INT" variable (:type "long int") nil [3065 3084])
            ("EMACS_UINT" variable (:type "long int") nil [3107 3127])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3153 3164)
                        :type "int")
                        (reparse-symbol enumsubparts) [3135 3164])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3185 3197)
                        :type "int")
                        (reparse-symbol enumsubparts) [3166 3197]))                  
                :type "enum")
                nil [3128 3200])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3211 3224])
            ("pI" variable (:constant-flag t) nil [3785 3787])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4009 4036]))                  
                :type "enum")
                nil [4001 4109])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4395 4420])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [4430 4443])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (4481 4491)
                        :type "int")
                        (reparse-symbol enumsubparts) [4460 4491]))                  
                :type "enum")
                nil [4453 4494])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4669 4684]))                  
                :type "int")
                nil [4661 4717])
            ("printmax_t" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [5143 5172])
            ("uprintmax_t" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [5173 5204])
            ("pMd" variable (:constant-flag t) nil [5214 5217])
            ("pMu" variable (:constant-flag t) nil [5233 5236])
            ("pD" variable (:constant-flag t) nil [5619 5621])
            ("pD" variable (:constant-flag t) nil [5664 5666])
            ("pD" variable (:constant-flag t) nil [5711 5713])
            ("eassert" variable (:constant-flag t) nil [7017 7024])
            ("eassume" variable (:constant-flag t) nil [7095 7102])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8566 8594)
                        :type "int")
                        (reparse-symbol enumsubparts) [8556 8594])
                    ("INTTYPEBITS" variable
                       (:constant-flag t
                        :default-value (8663 8677)
                        :type "int")
                        (reparse-symbol enumsubparts) [8649 8677])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8770 8781)
                        :type "int")
                        (reparse-symbol enumsubparts) [8756 8781]))                  
                :type "enum")
                nil [8461 8786])
            ("VAL_MAX" variable (:constant-flag t) nil [9049 9056])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9499 9510])
            ("VALMASK" variable (:constant-flag t) nil [9703 9710])
            ("GCALIGNMENT" variable (:constant-flag t) nil [10406 10417])
            ("GCALIGNED_UNION_MEMBER" variable (:constant-flag t) nil [11523 11545])
            ("GCALIGNED_STRUCT_MEMBER" variable (:constant-flag t) nil [11732 11755])
            ("GCALIGNED_STRUCT" variable (:constant-flag t) nil [11788 11804])
            ("GCALIGNED" variable (:constant-flag t) nil [11820 11829])
            ("LISP_WORDS_ARE_POINTERS" variable (:constant-flag t) nil [12124 12147])
            ("Lisp_Word" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [12245 12273])
            ("lisp_h_XLI" variable (:constant-flag t) nil [13821 13831])
            ("lisp_h_XIL" variable (:constant-flag t) nil [13849 13859])
            ("lisp_h_XLP" variable (:constant-flag t) nil [13877 13887])
            ("lisp_h_XPL" variable (:constant-flag t) nil [13928 13938])
            ("lisp_h_CHECK_FIXNUM" variable (:constant-flag t) nil [14417 14436])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [14486 14505])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [14555 14572])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [14659 14671])
            ("lisp_h_EQ" variable (:constant-flag t) nil [14706 14715])
            ("lisp_h_FIXNUMP" variable (:constant-flag t) nil [14751 14765])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [14926 14939])
            ("lisp_h_NILP" variable (:constant-flag t) nil [14975 14986])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [15011 15032])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [15139 15163])
            ("lisp_h_SYMBOL_TRAPPED_WRITE_P" variable (:constant-flag t) nil [15235 15264])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [15313 15330])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [15422 15436])
            ("lisp_h_TAGGEDP" variable (:constant-flag t) nil [15473 15487])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [15626 15644])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [15685 15696])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [15727 15738])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [15771 15783])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [15863 15875])
            ("lisp_h_check_cons_list" variable (:constant-flag t) nil [15928 15950])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [17021 17045])
            ("INTMASK" variable (:constant-flag t) nil [18799 18806])
            ("case_Lisp_Int" variable (:constant-flag t) nil [18852 18865])
            ("ENUM_BF" variable (:constant-flag t) nil [19182 19189])
            ("Lisp_Object" type
               (:typedef ("Lisp_Word" type (:type "class") nil nil)
                :type "typedef")
                nil [23198 23228])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [23238 23252])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [24136 24160])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [24902 24925])
            ("VALBITS" variable (:type "int") nil [24969 24977])
            ("XUNTAG" variable (:constant-flag t) nil [25413 25419])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("gcmarkbit" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [25939 25961])
                                ("redirect" variable
                                   (:suffix ":3"
                                    :type ("symbol_redirect" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [26270 26309])
                                ("trapped_write" variable
                                   (:suffix ":2"
                                    :type ("symbol_trapped_write" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [26464 26513])
                                ("interned" variable
                                   (:suffix ":2"
                                    :type "unsigned int")
                                    (reparse-symbol classsubparts) [26616 26638])
                                ("declared_special" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [26783 26812])
                                ("pinned" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [26892 26911])
                                ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26969 26986])
                                ("val" variable (:type ("" type
                                     (:members 
                                        ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27141 27159])
                                          ("alias" variable
                                             (:pointer 1
                                              :type ("Lisp_Symbol" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [27161 27187])
                                          ("blv" variable
                                             (:pointer 1
                                              :type ("Lisp_Buffer_Local_Value" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [27189 27225])
                                          ("fwd" variable
                                             (:pointer 1
                                              :type ("Lisp_Fwd" type (:type "union") nil nil))
                                              (reparse-symbol classsubparts) [27227 27247]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [27132 27260])
                                ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27334 27355])
                                ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27404 27422])
                                ("next" variable
                                   (:pointer 1
                                    :type ("Lisp_Symbol" type
                                         (:prototype t
                                          :type "struct")
                                          nil nil))
                                    (reparse-symbol classsubparts) [27501 27526]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [25920 27535])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [27540 27562]))                    
                  :type "union")
                  nil nil)) nil [25906 27569])
            ("EXFUN" variable (:constant-flag t) nil [27869 27874])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [28063 28078])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [28115 28135])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [28158 28170])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [28186 28198])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [28221 28233])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [28269 28281])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [28330 28342])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [28404 28416])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [28497 28509])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [28603 28615])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [28722 28734])
            ("untagged_ptr" type
               (:typedef ("uintptr_t" type (:type "class") nil nil)
                :type "typedef")
                nil [29488 29519])
            ("Lisp_Word_tag" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [29520 29553])
            ("LISP_WORD_TAG" variable (:constant-flag t) nil [29634 29647])
            ("TAG_PTR" variable (:constant-flag t) nil [29795 29802])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [30039 30056])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [30484 30502])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [30724 30736])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [31073 31103])
            ("globals.h" include nil nil [31117 31137])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [32917 32932])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [32988 33007])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol, struct Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [33177 33245])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [33248 33279])
            ("p" variable (:type "int") nil [33495 33497])
            ("symoffset" variable
               (:pointer 1
                :default-value "(char *) ((char *) sym - (char *) lispsym)"
                :type "char")
                nil [34163 34224])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Symbol, symoffset)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34234 34283])
            ("a" variable (:type "int") nil [34325 34327])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34412 34426]))                  
                :type "int")
                nil [34393 34428])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [34479 34503])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [34650 34665])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [34893 34910])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [37246 37266])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [37306 37326])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [37998 38025])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38209 38211]))                  
                :type "int")
                nil [38204 38212])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [38307 38329])
            ("INTTYPEBITS" variable (:type "int") nil [38429 38441])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [38664 38691])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [38767 38784])
            ("n" variable (:type "int") nil [38794 38796])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [38924 38947])
            ("XUFIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [39219 39236])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [39425 39452])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39499 39502]))                  
                :type "int")
                nil [39494 39522])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [39744 39761])
            ("upper" variable (:type "int") nil [39985 39991])
            ("a" variable
               (:default-value "TAG_PTR (type, ptr)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [40123 40159])
            ("a" variable (:type "int") nil [40233 40235])
            ("XSETINT" variable (:constant-flag t) nil [40319 40326])
            ("XSETFASTINT" variable (:constant-flag t) nil [40365 40376])
            ("XSETCONS" variable (:constant-flag t) nil [40421 40429])
            ("XSETVECTOR" variable (:constant-flag t) nil [40481 40491])
            ("XSETSTRING" variable (:constant-flag t) nil [40549 40559])
            ("XSETSYMBOL" variable (:constant-flag t) nil [40613 40623])
            ("XSETFLOAT" variable (:constant-flag t) nil [40667 40676])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [40758 40770])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [40874 40890])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [41170 41186])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [41349 41371])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [41559 41583])
            ("XSETPROCESS" variable (:constant-flag t) nil [41655 41666])
            ("XSETWINDOW" variable (:constant-flag t) nil [41721 41731])
            ("XSETTERMINAL" variable (:constant-flag t) nil [41785 41797])
            ("XSETSUBR" variable (:constant-flag t) nil [41853 41861])
            ("XSETCOMPILED" variable (:constant-flag t) nil [41913 41925])
            ("XSETBUFFER" variable (:constant-flag t) nil [41981 41991])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [42045 42059])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [42117 42132])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [42191 42209])
            ("XSETTHREAD" variable (:constant-flag t) nil [42271 42281])
            ("XSETMUTEX" variable (:constant-flag t) nil [42335 42344])
            ("XSETCONDVAR" variable (:constant-flag t) nil [42397 42408])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Int0, p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [42876 42915])
            ("a" variable (:type "int") nil [42925 42927])
            ("a" variable
               (:default-value "make_pointer_integer_unsafe (p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [42985 43033])
            ("a" variable (:type "int") nil [43091 43093])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [43136 43170])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [43262 43278])
                                ("u" variable (:type ("" type
                                     (:members 
                                        ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [43332 43348])
                                          ("chain" variable
                                             (:pointer 1
                                              :type ("Lisp_Cons" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [43396 43420]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [43286 43431]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [43207 43440])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [43445 43467]))                    
                  :type "union")
                  nil nil)) nil [43193 43474])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [43564 43580])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Cons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [43631 43648])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43707 43716])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43718 43725])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43726 43728]))                  
                :type "int")
                nil [43695 43729])
            ("car" variable (:type "int") nil [44346 44350])
            ("cdr" variable (:type "int") nil [44429 44433])
            ("car" variable (:type "int") nil [44526 44542])
            ("cdr" variable (:type "int") nil [44599 44615])
            ("n" variable (:type "int") nil [44859 44861])
            ("n" variable (:type "int") nil [44936 44938])
            ("XCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45082 45084]))                  
                :type "int")
                nil [45076 45085])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45128 45135])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45136 45138]))                  
                :type "int")
                nil [45107 45139])
            ("Qnil" variable (:type "int") nil [45149 45154])
            ("XCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45232 45234]))                  
                :type "int")
                nil [45226 45235])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45278 45285])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45286 45288]))                  
                :type "int")
                nil [45257 45289])
            ("Qnil" variable (:type "int") nil [45299 45304])
            ("Qnil" variable (:type "int") nil [45451 45456])
            ("Qnil" variable (:type "int") nil [45537 45542])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45678 45693])
                                ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45700 45720])
                                ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45727 45746])
                                ("data" variable
                                   (:pointer 1
                                    :type "unsigned char")
                                    (reparse-symbol classsubparts) [45792 45812]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [45659 45821])
                      ("next" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [45826 45851])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [45856 45878]))                    
                  :type "union")
                  nil nil)) nil [45645 45885])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45987 45989])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45990 46002]))                  
                :type "int")
                nil [45978 46003])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46064 46075])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46077 46086])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46087 46089]))                  
                :type "int")
                nil [46052 46090])
            ("size_byte" variable (:type "int") nil [46354 46364])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [47103 47121])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [47247 47265])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [47562 47582])
            ("data" variable (:type "int") nil [47934 47939])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48053 48060]))                  
                :type "int")
                nil [48046 48061])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48146 48153]))                  
                :type "int")
                nil [48139 48160])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48249 48256]))                  
                :type "int")
                nil [48242 48263])
            ("nchars" variable
               (:default-value "XSTRING (string)->u.s.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [48322 48368])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [48371 48393])
            ("nchars" variable (:type "int") nil [48403 48410])
            ("size_byte" variable (:type "int") nil [48699 48709])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [48719 48741])
            ("nbytes" variable (:type "int") nil [48751 48758])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48832 48848]))                  
                :type "int")
                nil [48818 48850])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [49174 49189])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [49293 49324])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [49329 49373])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [49450 49473])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [49668 49714])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [49717 49737])
            ("size" variable (:type "int") nil [49747 49752])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [49819 49844])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50009 50020])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50022 50031])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50032 50034]))                  
                :type "int")
                nil [49997 50035])
            ("size" variable
               (:default-value "v->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [50184 50216])
            ("false" variable (:type "int") nil [50854 50860])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [51292 51323])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [51365 51380])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [51598 51636])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [52591 52663])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [52707 52726])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [52786 52858])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [52909 52935])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53007 53009])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53010 53027]))                  
                :type "int")
                nil [52992 53028])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53094 53111])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53113 53128])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53129 53131]))                  
                :type "int")
                nil [53082 53132])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [53351 53391])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [53394 53414])
            ("size" variable (:type "int") nil [53424 53429])
            ("data" variable (:type "int") nil [53514 53519])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53632 53634]))                  
                :type "int")
                nil [53614 53635])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [53739 53784])
            ("Qnil" variable (:type "int") nil [54016 54021])
            ("addr" variable
               (:pointer 1
                :type "unsigned char")
                nil [54124 54144])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [54148 54193])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54228 54230]))                  
                :type "int")
                nil [54204 54261])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [54527 54541])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [54641 54655])
            ("PTRDIFF_MIN" variable (:type "int") nil [54816 54832])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [54971 54991])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [55276 55296])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55918 55930]))                  
                :type "int")
                nil [55910 55931])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55988 55990])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55994 56001]))                  
                :type "int")
                nil [55980 56002])
            ("VECSIZE" variable (:constant-flag t) nil [56150 56157])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [56435 56448])
            ("UNSIGNED_CMP" variable (:constant-flag t) nil [56927 56939])
            ("ASCII_CHAR_P" variable (:constant-flag t) nil [57181 57193])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [58371 58402])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [58520 58539])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [58722 58741])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [58840 58860])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59006 59024])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [59030 59079])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [59141 59183])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59274 59276])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59277 59293]))                  
                :type "int")
                nil [59259 59294])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [59625 59656])
            ("depth" variable (:type "int") nil [60047 60057])
            ("min_char" variable (:type "int") nil [60123 60136])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [60198 60242])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60337 60339])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60340 60360]))                  
                :type "int")
                nil [60322 60361])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [60614 60649])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60652 60668])
            ("val" variable (:type "int") nil [60960 60964])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61558 61574])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61576 61582])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61583 61587])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61588 61592]))                  
                :type "int")
                nil [61529 61593])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61621 61624])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61625 61629])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61630 61634]))                  
                :type "int")
                nil [61605 61635])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [61802 61833])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [61871 61876]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61852 61877])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61903 61915]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61884 61916])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61942 61954])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61955 61967]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61923 61968])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61994 62006])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62007 62019])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62020 62032]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61975 62033])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62059 62071])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62072 62084])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62085 62097])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62098 62110]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62040 62111])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62137 62149])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62150 62162])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62163 62175])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62176 62188])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62189 62201]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62118 62202])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62228 62240])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62241 62253])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62254 62266])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62267 62279])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62280 62292])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62293 62305]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62209 62306])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62332 62344])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62345 62357])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62358 62370])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62371 62383])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62384 62396])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62397 62409])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62410 62422]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62313 62423])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62449 62461])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62462 62474])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62475 62487])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62488 62500])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62501 62513])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62514 62526])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62527 62539])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62540 62552]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62430 62553])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62587 62604]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62560 62605])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62634 62644])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [62645 62659]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [62612 62660]))                    
                  :type "union")
                  nil nil)) nil [61838 62676])
            ("min_args" variable (:type "short") nil [62681 62706])
            ("max_args" variable (:type "short") nil [62681 62706])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [62711 62735])
            ("intspec" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [62740 62760])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [62765 62779])
            ("gcaligned" variable (:type "int") nil [62784 62807])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62930 62932])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62933 62943]))                  
                :type "int")
                nil [62915 62944])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [64644 64672])
            ("sys_setjmp" variable (:constant-flag t) nil [64682 64692])
            ("sys_longjmp" variable (:constant-flag t) nil [64716 64727])
            ("thread.h" include nil nil [64757 64776])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [65145 65214])
            ("alias" variable (:type "int") nil [65237 65243])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [65327 65395])
            ("blv" variable (:type "int") nil [65418 65422])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [65490 65558])
            ("fwd" variable (:type "int") nil [65581 65585])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [65780 65832])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [65848 65858])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [65953 66006])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [66022 66030])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [66109 66162])
            ("fwd" variable
               (:default-value "v"
                :type "int")
                nil [66178 66186])
            ("name" variable (:type "int") nil [66269 66274])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [66420 66438])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [66612 66647])
            ("DEFSYM" variable (:constant-flag t) nil [67354 67360])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67678 67695])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67745 67776])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67836 67866])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [67926 67952])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67953 67965])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67966 67978]))                  
                :type "bool")
                nil [67911 67979])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [68047 68073])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68074 68086]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [68025 68087])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [68188 68219])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68321 68338])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68440 68457])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68705 68722])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68969 68987])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [69239 69255])
            ("next_free" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [69323 69343])
            ("pure" variable (:type "bool") nil [69439 69449])
            ("rehash_threshold" variable (:type "float") nil [69539 69562])
            ("rehash_size" variable (:type "float") nil [69898 69916])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70099 70125])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [70173 70201])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [70316 70350])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70546 70548])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70549 70565]))                  
                :type "int")
                nil [70531 70566])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [70735 70750])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70963 70965])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70966 70980])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70985 70989]))                  
                :type "int")
                nil [70957 70990])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71145 71147])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71148 71162])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71167 71172]))                  
                :type "int")
                nil [71139 71176])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71339 71341])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71342 71347])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71348 71352]))                  
                :type "int")
                nil [71333 71353])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71478 71480])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71481 71486]))                  
                :type "int")
                nil [71471 71487])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8125"
                :type "float")
                nil [71766 71819])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5 - 1"
                :type "float")
                nil [71900 71949])
            ("y" variable (:type "int") nil [72166 72168])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [72369 72400])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72967 72989])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [73161 73189])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [73302 73329])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73791 73816])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [73879 73897])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [74137 74155])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [74792 74823])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74828 74846])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74851 74867])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74872 74890])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [74895 74921])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [74974 75005])
            ("pointer" variable
               (:pointer 1
                :type "void")
                nil [75010 75024])
            ("val" variable
               (:default-value "TAG_PTR (Lisp_Int0, a)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [75994 76035])
            ("make_misc_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76107 76109]))                  
                :type "int")
                nil [76092 76110])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76193 76195])
                    ("" variable (:type ("PVEC_MISC_PTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76196 76210]))                  
                :type "int")
                nil [76178 76211])
            ("XFIXNUMPTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76330 76332]))                  
                :type "int")
                nil [76318 76333])
            ("pointer" variable (:type "int") nil [76394 76402])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [76611 76642])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [76851 76872])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76934 76962])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76967 76995])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77084 77086])
                    ("" variable (:type ("PVEC_FINALIZER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77087 77102]))                  
                :type "int")
                nil [77069 77103])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77321 77323])
                    ("" variable (:type ("PVEC_MARKER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77324 77336]))                  
                :type "int")
                nil [77306 77337])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77544 77546])
                    ("" variable (:type ("PVEC_OVERLAY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77547 77560]))                  
                :type "int")
                nil [77529 77561])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78032 78034])
                    ("" variable (:type ("PVEC_BIGNUM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78035 78047]))                  
                :type "int")
                nil [78017 78048])
            ("BIGNUMP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78124 78126]))                  
                :type "int")
                nil [78115 78127])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78292 78294]))                  
                :type "int")
                nil [78279 78295])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78408 78410]))                  
                :type "int")
                nil [78395 78411])
            ("INT_TO_INTEGER" variable (:constant-flag t) nil [78494 78508])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [78795 78819])
            ("intvar" variable
               (:pointer 1
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [78845 78863])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [79090 79114])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [79141 79155])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [79380 79404])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79430 79450])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [79619 79643])
            ("offset" variable (:type "int") nil [79676 79687])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [79767 79789])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [81019 81044])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [81162 81180])
            ("fwd" variable
               (:pointer 1
                :type ("Lisp_Fwd" type (:type "union") nil nil))
                nil [81264 81284])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81398 81416])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81524 81544])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [81825 81845])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [81970 81994])
            ("offset" variable (:type "int") nil [82027 82038])
            ("u_intfwd" variable (:type ("Lisp_Intfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [82068 82096])
            ("u_boolfwd" variable (:type ("Lisp_Boolfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [82101 82131])
            ("u_objfwd" variable (:type ("Lisp_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [82136 82164])
            ("u_buffer_objfwd" variable (:type ("Lisp_Buffer_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [82169 82211])
            ("u_kboard_objfwd" variable (:type ("Lisp_Kboard_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [82216 82258])
            ("type" variable (:type "int") nil [82343 82348])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [82426 82446])
            ("u_buffer_objfwd" variable (:type "int") nil [82567 82583])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [82665 82677])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [82684 82709]))                    
                  :type "union")
                  nil nil)) nil [82647 82718])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [82790 82808])
            ("data" variable (:type "int") nil [83010 83015])
            ("IEEE_FLOATING_POINT" variable (:constant-flag t) nil [83471 83490])
            ("_UCHAR_T" variable (:constant-flag t) nil [83793 83801])
            ("UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [83802 83830])
            ("XFIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84862 84864]))                  
                :type "int")
                nil [84853 84865])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84939 84941]))                  
                :type "int")
                nil [84931 84942])
            ("hi" variable (:type "int") nil [85077 85080])
            ("TYPE_RANGED_FIXNUMP" variable (:constant-flag t) nil [85092 85111])
            ("EQ" variable (:type "int") nil [85336 85363])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85490 85492])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85493 85519]))                  
                :type "int")
                nil [85475 85520])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85588 85590])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85591 85605]))                  
                :type "int")
                nil [85573 85606])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85671 85673])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85674 85685]))                  
                :type "int")
                nil [85656 85686])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85752 85754])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85755 85767]))                  
                :type "int")
                nil [85737 85768])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("RECORDP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85829 85840])
                    ("" variable (:type ("Qrecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85842 85851])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85852 85854]))                  
                :type "int")
                nil [85817 85855])
            ("EQ" variable (:type "int") nil [85953 85977])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86112 86114]))                  
                :type "int")
                nil [86097 86115])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86175 86184])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86188 86196])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86198 86205])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86206 86208]))                  
                :type "int")
                nil [86163 86209])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86287 86295])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86297 86304])
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86305 86307]))                  
                :type "int")
                nil [86275 86308])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qfixnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [86359 86383])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86448 86466])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86468 86477])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86478 86486]))                  
                :type "int")
                nil [86436 86488])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86655 86657]))                  
                :type "int")
                nil [86648 86658])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86697 86699]))                  
                :type "int")
                nil [86689 86700])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86724 86732])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86733 86735]))                  
                :type "int")
                nil [86703 86736])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86818 86828])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86830 86840])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86841 86843]))                  
                :type "int")
                nil [86806 86844])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNATP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86904 86915])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86917 86928])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86929 86931]))                  
                :type "int")
                nil [86892 86932])
            ("CHECK_RANGED_INTEGER" variable (:constant-flag t) nil [86944 86964])
            ("CHECK_TYPE_RANGED_INTEGER" variable (:constant-flag t) nil [87333 87358])
            ("CHECK_FIXNUM_COERCE_MARKER" variable (:constant-flag t) nil [87603 87629])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88033 88044])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88046 88055])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88056 88058]))                  
                :type "int")
                nil [88021 88059])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88121 88133])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88135 88144])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88145 88147]))                  
                :type "int")
                nil [88109 88148])
            ("CHECK_NUMBER_COERCE_MARKER" variable (:constant-flag t) nil [88160 88186])
            ("CHECK_INTEGER_COERCE_MARKER" variable (:constant-flag t) nil [88396 88423])
            ("tmp" variable
               (:default-value "XCAR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [88815 88842])
            ("CHECK_FIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88859 88863]))                  
                :type "int")
                nil [88845 88864])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88876 88878])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88879 88883]))                  
                :type "int")
                nil [88867 88884])
            ("tmp" variable
               (:default-value "XCDR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [88937 88964])
            ("CHECK_FIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88981 88985]))                  
                :type "int")
                nil [88967 88986])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88998 89000])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89001 89005]))                  
                :type "int")
                nil [88989 89006])
            ("DEFUN" variable (:constant-flag t) nil [90487 90492])
            ("CALLMANY" variable (:constant-flag t) nil [91035 91043])
            ("CALLN" variable (:constant-flag t) nil [91388 91393])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [92593 92604])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [92765 92782])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [92947 92958])
            ("DEFVAR_INT" variable (:constant-flag t) nil [93120 93130])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [93291 93304])
            ("CHAR_BIT" variable (:type "int") nil [95300 95309])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95359 95368])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95389 95401]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [95375 95402])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95409 95425]))                    
                  :type "struct")
                  nil nil)) nil [95314 95439])
            ("unwind_array" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95489 95498])
                      ("nelts" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95505 95521])
                      ("array" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95528 95547]))                    
                  :type "struct")
                  nil nil)) nil [95444 95567])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95617 95626])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [95647 95654]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [95633 95655])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [95662 95672]))                    
                  :type "struct")
                  nil nil)) nil [95572 95690])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95740 95749])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [95770 95774]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [95756 95775])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [95782 95790]))                    
                  :type "struct")
                  nil nil)) nil [95695 95808])
            ("unwind_excursion" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95858 95867])
                      ("marker" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95874 95901])
                      ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95874 95901]))                    
                  :type "struct")
                  nil nil)) nil [95813 95925])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95975 95984])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [96005 96010]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [95991 96011]))                    
                  :type "struct")
                  nil nil)) nil [95930 96030])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [96080 96089])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96157 96194])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96157 96194])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96157 96194])
                      ("saved_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96315 96339]))                    
                  :type "struct")
                  nil nil)) nil [96035 96350])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [96400 96409])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [96416 96442])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96449 96470])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [96477 96495])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [96502 96518]))                    
                  :type "struct")
                  nil nil)) nil [96355 96528])
            ("specpdl" variable (:type "int") nil [96772 96780])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [97988 98010])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [98013 98035])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [98038 98054])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [98057 98078])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [98081 98106])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [98439 98465])
            ("bytecode_dest" variable (:type "int") nil [98468 98486])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [98631 98647])
            ("f_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [98650 98678])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [98681 98700])
            ("poll_suppress_count" variable (:type "int") nil [98703 98727])
            ("interrupt_input_blocked" variable (:type "int") nil [98730 98758])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [98763 98801])
            ("QUITP" variable (:constant-flag t) nil [98878 98883])
            ("maybe_quit" function
               (:prototype-flag t
                :type "int")
                nil [99169 99183])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99188 99229])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99230 99268])
            ("window" type
               (:prototype t
                :type "struct")
                nil [99413 99427])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [99428 99441])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99694 99705])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99707 99717])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99718 99725])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99726 99731])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99732 99746])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99748 99753]))                  
                :type "int")
                nil [99686 99754])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99902 99904])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99905 99919])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99924 99928])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99929 99933]))                  
                :type "int")
                nil [99893 99934])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100043 100045])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100046 100060])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100065 100070])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100074 100078]))                  
                :type "int")
                nil [100034 100079])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [100268 100288])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100381 100395])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [100494 100506])
            ("trapped_write" variable
               (:default-value "SYMBOL_NOWRITE"
                :type "int")
                nil [100584 100615])
            ("found" variable (:type "int") nil [100802 100808])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [100944 100958])
            ("intervals" variable (:type "int") nil [101073 101083])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [101208 101222])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [101428 101441])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [101541 101555])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101800 101818])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [101993 102013])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [102138 102158])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [104069 104084])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [106026 106041])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [106255 106271])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [106895 106973])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [106895 106973])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [106895 106973])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111248 111282])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [111364 111404])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [113745 113787])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113788 113819])
            ("consing_since_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [113820 113854])
            ("gc_relative_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [113855 113894])
            ("memory_full_cons_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [113895 113939])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114517 114532])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114534 114549]))                  
                :type "int")
                nil [114510 114551])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114639 114654])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114656 114671])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114673 114688]))                  
                :type "int")
                nil [114632 114690])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114791 114806])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114808 114823])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114827 114842])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114844 114859]))                  
                :type "int")
                nil [114784 114861])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115420 115424])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115425 115437]))                  
                :type "int")
                nil [115399 115439])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116186 116190])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116191 116203]))                  
                :type "int")
                nil [116166 116205])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116377 116381])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116382 116394]))                  
                :type "int")
                nil [116364 116396])
            ("v" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [116933 116947])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [116950 116972])
            ("p" variable
               (:default-value "allocate_vector (size)"
                :type "int")
                nil [116976 117003])
            ("v" variable (:type "int") nil [117034 117036])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [117169 117225])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117228 117271])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [117347 117361])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [117385 117405])
            ("v" variable (:type "int") nil [117415 117417])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [117664 117685])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [118000 118028])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [118193 118220])
            ("__malloc_extra_blocks" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [118922 118958])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120190 120233])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [120272 120291])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [120345 120368])
            ("Lisp_Object" function (:type "int") nil [120539 120568])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [120592 120615])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [121679 121730])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122270 122274])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122275 122287]))                  
                :type "int")
                nil [122260 122289])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122376 122380])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122381 122393]))                  
                :type "int")
                nil [122357 122395])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [122425 122460])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [122461 122491])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [122492 122531])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [122532 122569])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122986 122994]))                  
                :type "int")
                nil [122972 123042])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123165 123178])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123179 123184]))                  
                :type "int")
                nil [123156 123185])
            ("Lisp_Object" function (:type "int") nil [124680 124709])
            ("Lisp_Object" function (:type "int") nil [124858 124880])
            ("Lisp_Object" function (:type "int") nil [124895 124924])
            ("Lisp_Object" function (:type "int") nil [124973 125002])
            ("Lisp_Object" function (:type "int") nil [125030 125059])
            ("Lisp_Object" function (:type "int") nil [125108 125150])
            ("Lisp_Object" function (:type "int") nil [125191 125220])
            ("Lisp_Object" function (:type "int") nil [125273 125315])
            ("Lisp_Object" function (:type "int") nil [125361 125416])
            ("Lisp_Object" function (:type "int") nil [125458 125482])
            ("Lisp_Object" function (:type "int") nil [125492 125521])
            ("emacs-module.h" include nil nil [127752 127777])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [128239 128270])
            ("documentation" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [128327 128353])
            ("min_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [128388 128419])
            ("max_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [128388 128419])
            ("subr" variable (:type ("emacs_subr" type (:type "class") nil nil)) nil [128422 128438])
            ("data" variable
               (:pointer 1
                :type "void")
                nil [128441 128452])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128545 128547])
                    ("" variable (:type ("PVEC_MODULE_FUNCTION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128548 128569]))                  
                :type "int")
                nil [128530 128570])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132866 132873])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132874 132881])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132882 132887]))                  
                :type "int")
                nil [132838 132888])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133019 133026])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133027 133034])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133035 133054]))                  
                :type "int")
                nil [132991 133055])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [133907 133943])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [133944 133983])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134421 134460])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [134461 134495])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [134531 134557])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134858 134894])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [136104 136131])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [136132 136156])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [136310 136374])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [136310 136374])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [136948 136975])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137040 137065])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137127 137153])
            ("daemon_type" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [137238 137261])
            ("IS_DAEMON" variable (:constant-flag t) nil [137270 137279])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [137307 137321])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137561 137597])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137667 137701])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137760 137792])
            ("Lisp_Process" type
               (:prototype t
                :type "struct")
                nil [137823 137843])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [138354 138370])
            ("CHILD_SETUP_TYPE" variable (:constant-flag t) nil [138857 138873])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [140729 140753])
            ("false" variable (:type "int") nil [140939 140945])
            ("NO_INLINE" variable (:type "int") nil [141781 141791])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [143188 143220])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [144209 144264])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [144265 144322])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [145286 145322])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [145581 145611])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [146102 146119])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [146159 146176])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [146442 146474])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146485 146490])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146491 146505])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146507 146512]))                  
                :type "int")
                nil [146477 146516])
            ("len" variable (:type "int") nil [146533 146537])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146774 146778])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146779 146791]))                  
                :type "int")
                nil [146756 146793])
            ("eabs" variable (:constant-flag t) nil [147154 147158])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [147459 147474])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [147565 147577])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [147676 147687])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [147994 148006])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [148441 148459])
            ("SAFE_FREE" variable (:constant-flag t) nil [148681 148690])
            ("SAFE_FREE_UNBIND_TO" variable (:constant-flag t) nil [149406 149425])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149633 149639])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149640 149644]))                  
                :type "int")
                nil [149622 149645])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [149772 149794])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [150457 150473])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [151272 151294])
            ("STACK_CONS" variable (:constant-flag t) nil [152127 152137])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [152218 152232])
            ("AUTO_CONS" variable (:constant-flag t) nil [152581 152590])
            ("AUTO_LIST1" variable (:constant-flag t) nil [152652 152662])
            ("AUTO_LIST2" variable (:constant-flag t) nil [152760 152770])
            ("AUTO_LIST3" variable (:constant-flag t) nil [152915 152925])
            ("AUTO_LIST4" variable (:constant-flag t) nil [153090 153100])
            ("AUTO_STRING" variable (:constant-flag t) nil [153657 153668])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [154109 154129])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [154956 154969])
            ("FOR_EACH_TAIL_SAFE" variable (:constant-flag t) nil [155176 155194])
            ("tortoise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [155370 155391])
            ("n" variable (:type "int") nil [155408 155410])
            ("q" variable (:type "unsigned short int") nil [155413 155434])
            ("FOR_EACH_TAIL_INTERNAL" variable (:constant-flag t) nil [156134 156156])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [156614 156634]))          
      :file "lisp.h"
      :pointmax 157165
      :fsize 157174
      :lastmodtime '(23451 3115 766382 340000)
      :unmatched-syntax '((symbol 157120 . 157137) (close-paren 157117 . 157118) (punctuation 157115 . 157116) (close-paren 157114 . 157115) (open-paren 157113 . 157114) (symbol 157096 . 157112) (close-paren 157090 . 157091) (semantic-list 157016 . 157090) (punctuation 157014 . 157015) (punctuation 157013 . 157014) (semantic-list 156917 . 157006) (open-paren 156916 . 156917) (IF 156913 . 156915) (open-paren 156909 . 156910) (close-paren 156907 . 156908) (VOID 156903 . 156907) (open-paren 156902 . 156903) (symbol 156893 . 156901) (VOID 156888 . 156892) (symbol 156881 . 156887) (punctuation 155436 . 155437) (close-paren 155435 . 155436) (semantic-list #("((a) > (b) ? (a) : (b))" 0 1 (macros (("b") ("a")))) 155403 . 155407) (symbol 155394 . 155402) (open-paren 155366 . 155367) (symbol 155343 . 155365) (STRUCT 155336 . 155342) (punctuation 154563 . 154564) (close-paren 154562 . 154563) (number 154558 . 154561) (punctuation 154556 . 154557) (symbol 154537 . 154555) (open-paren 154535 . 154536) (ENUM 154530 . 154534) (punctuation 151918 . 151919) (close-paren 151917 . 151918) (close-paren 151913 . 151914) (symbol 151884 . 151913) (punctuation 151883 . 151884) (punctuation 151881 . 151882) (punctuation 151880 . 151881) (symbol 151862 . 151876) (open-paren 151861 . 151862) (punctuation 151859 . 151860) (symbol 151842 . 151858) (punctuation 151836 . 151837) (symbol "false" 151814 . 151836) (punctuation 151812 . 151813) (symbol 151797 . 151811) (open-paren 151791 . 151792) (ENUM 151784 . 151788) (punctuation 151512 . 151513) (close-paren 151511 . 151512) (symbol 151505 . 151510) (punctuation 151503 . 151504) (symbol 151473 . 151502) (open-paren 151471 . 151472) (ENUM 151466 . 151470) (close-paren 151183 . 151184) (close-paren 151182 . 151183) (number 151181 . 151182) (punctuation 151179 . 151180) (number 151178 . 151179) (punctuation 151176 . 151177) (number 151175 . 151176) (open-paren 151174 . 151175) (symbol 151162 . 151173) (punctuation 151160 . 151161) (punctuation 151158 . 151159) (punctuation 151157 . 151158) (symbol 151147 . 151156) (symbol 151139 . 151146) (punctuation 151138 . 151139) (punctuation 151136 . 151137) (punctuation 151135 . 151136) (symbol "8" 151126 . 151134) (symbol 151118 . 151125) (punctuation 151116 . 151117) (punctuation 151115 . 151116) (close-paren 149646 . 149647) (RETURN 149615 . 149621) (punctuation 149611 . 149612) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "count" 149593 . 149598)))) 149584 . 149611) (open-paren 149580 . 149581) (close-paren 149578 . 149579) (symbol 149575 . 149578) (symbol 149563 . 149574) (punctuation 149561 . 149562) (symbol 149553 . 149561) (symbol 149543 . 149552) (punctuation 149541 . 149542) (symbol 149536 . 149541) (symbol 149526 . 149535) (open-paren 149525 . 149526) (symbol 149505 . 149524) (symbol 149493 . 149504) (symbol 149486 . 149492) (close-paren 149103 . 149104) (semantic-list 148808 . 149102) (semantic-list 148768 . 148803) (WHILE 148762 . 148767) (open-paren 148758 . 148759) (close-paren 148756 . 148757) (symbol 148748 . 148756) (symbol 148738 . 148747) (open-paren 148737 . 148738) (symbol 148727 . 148736) (VOID 148722 . 148726) (symbol 148715 . 148721) (punctuation 147448 . 147449) (close-paren 147447 . 147448) (semantic-list 147444 . 147447) (open-paren 147443 . 147444) (symbol 147422 . 147442) (close-paren 147420 . 147421) (symbol 147414 . 147420) (open-paren 147413 . 147414) (symbol 147398 . 147412) (punctuation 147397 . 147398) (VOID 147392 . 147396) (EXTERN 147385 . 147391) (punctuation 147382 . 147383) (close-paren 147381 . 147382) (number 147376 . 147380) (punctuation 147374 . 147375) (number 147371 . 147373) (punctuation 147369 . 147370) (symbol 147358 . 147368) (open-paren 147356 . 147357) (symbol 147345 . 147355) (ENUM 147340 . 147344) (punctuation 146888 . 146889) (close-paren 146887 . 146888) (VOID 146883 . 146887) (open-paren 146882 . 146883) (symbol 146865 . 146881) (VOID 146860 . 146864) (EXTERN 146853 . 146859) (close-paren 146794 . 146795) (semantic-list 146786 . 146791) (RETURN 146749 . 146755) (open-paren 146676 . 146677) (close-paren 146674 . 146675) (symbol 146671 . 146674) (punctuation 146670 . 146671) (CHAR 146665 . 146669) (CONST 146659 . 146664) (open-paren 146658 . 146659) (symbol 146650 . 146657) (punctuation 146648 . 146649) (CHAR 146643 . 146647) (symbol 146636 . 146642) (punctuation 146633 . 146634) (close-paren 146632 . 146633) (symbol 146623 . 146632) (punctuation 146621 . 146622) (punctuation 146620 . 146621) (CHAR 146615 . 146619) (CONST 146609 . 146614) (open-paren 146608 . 146609) (symbol 146591 . 146607) (punctuation 146590 . 146591) (CHAR 146585 . 146589) (EXTERN 146578 . 146584) (punctuation 146575 . 146576) (close-paren 146574 . 146575) (punctuation 146573 . 146574) (CHAR 146568 . 146572) (CONST 146562 . 146567) (open-paren 146561 . 146562) (symbol 146553 . 146560) (VOID 146548 . 146552) (EXTERN 146541 . 146547) (close-paren 146538 . 146539) (punctuation 146531 . 146532) (symbol 146526 . 146530) (RETURN 146519 . 146525) (number 146513 . 146514) (punctuation 146511 . 146512) (semantic-list 146497 . 146505) (open-paren 146438 . 146439) (close-paren 146436 . 146437) (symbol 146430 . 146436) (symbol 146418 . 146429) (punctuation 146416 . 146417) (symbol 146412 . 146416) (punctuation 146411 . 146412) (CHAR 146406 . 146410) (open-paren 146405 . 146406) (symbol 146394 . 146404) (punctuation 146392 . 146393) (CHAR 146387 . 146391) (symbol 146380 . 146386) (punctuation 146222 . 146223) (close-paren 146221 . 146222) (punctuation 146220 . 146221) (CONST 146214 . 146219) (CHAR 146209 . 146213) (punctuation 146207 . 146208) (punctuation 146206 . 146207) (punctuation 146205 . 146206) (CHAR 146200 . 146204) (open-paren 146199 . 146200) (symbol 146189 . 146198) (VOID 146184 . 146188) (EXTERN 146177 . 146183) (close-paren 146157 . 146158) (symbol 146146 . 146157) (open-paren 146145 . 146146) (symbol 146133 . 146144) (punctuation 146132 . 146133) (CHAR 146127 . 146131) (EXTERN 146120 . 146126) (close-paren 146100 . 146101) (punctuation 146099 . 146100) (CHAR 146094 . 146098) (CONST 146088 . 146093) (open-paren 146087 . 146088) (symbol 146079 . 146086) (punctuation 146078 . 146079) (CHAR 146073 . 146077) (EXTERN 146066 . 146072) (punctuation 146063 . 146064) (close-paren 146062 . 146063) (symbol 146053 . 146062) (punctuation 146051 . 146052) (symbol 146042 . 146051) (punctuation 146040 . 146041) (symbol 146031 . 146040) (punctuation 146029 . 146030) (punctuation 146028 . 146029) (symbol 146018 . 146027) (punctuation 146016 . 146017) (punctuation 146015 . 146016) (VOID 146010 . 146014) (open-paren 146009 . 146010) (symbol 146001 . 146008) (punctuation 146000 . 146001) (VOID 145995 . 145999) (EXTERN 145988 . 145994) (punctuation 145986 . 145987) (close-paren 145985 . 145986) (semantic-list 145980 . 145985) (open-paren 145979 . 145980) (symbol 145958 . 145978) (close-paren 145954 . 145955) (symbol 145945 . 145954) (punctuation 145943 . 145944) (symbol 145934 . 145943) (punctuation 145932 . 145933) (punctuation 145931 . 145932) (VOID 145926 . 145930) (open-paren 145925 . 145926) (symbol 145915 . 145924) (punctuation 145914 . 145915) (VOID 145909 . 145913) (EXTERN 145902 . 145908) (punctuation 145900 . 145901) (close-paren 145899 . 145900) (semantic-list 145894 . 145899) (open-paren 145893 . 145894) (symbol 145871 . 145892) (close-paren 145869 . 145870) (symbol 145860 . 145869) (punctuation 145858 . 145859) (symbol 145849 . 145858) (open-paren 145848 . 145849) (symbol 145839 . 145847) (punctuation 145838 . 145839) (VOID 145833 . 145837) (EXTERN 145826 . 145832) (punctuation 145824 . 145825) (close-paren 145823 . 145824) (punctuation 145822 . 145823) (VOID 145817 . 145821) (open-paren 145816 . 145817) (symbol 145810 . 145815) (VOID 145805 . 145809) (EXTERN 145798 . 145804) (punctuation 145796 . 145797) (close-paren 145795 . 145796) (semantic-list 145792 . 145795) (open-paren 145791 . 145792) (symbol 145770 . 145790) (close-paren 145768 . 145769) (symbol 145762 . 145768) (punctuation 145760 . 145761) (punctuation 145759 . 145760) (VOID 145754 . 145758) (open-paren 145753 . 145754) (symbol 145744 . 145752) (punctuation 145743 . 145744) (VOID 145738 . 145742) (EXTERN 145731 . 145737) (punctuation 145729 . 145730) (close-paren 145728 . 145729) (semantic-list 145725 . 145728) (open-paren 145724 . 145725) (symbol 145702 . 145723) (close-paren 145700 . 145701) (symbol 145694 . 145700) (open-paren 145693 . 145694) (symbol 145685 . 145692) (punctuation 145684 . 145685) (VOID 145679 . 145683) (EXTERN 145672 . 145678) (punctuation 145670 . 145671) (close-paren 145669 . 145670) (semantic-list 145666 . 145669) (open-paren 145665 . 145666) (symbol 145643 . 145664) (close-paren 145641 . 145642) (symbol 145635 . 145641) (open-paren 145634 . 145635) (symbol 145626 . 145633) (punctuation 145625 . 145626) (VOID 145620 . 145624) (EXTERN 145613 . 145619) (punctuation 145579 . 145580) (close-paren 145578 . 145579) (open-paren 145577 . 145578) (symbol 145568 . 145577) (CHAR 145563 . 145567) (EXTERN 145556 . 145562) (punctuation 145554 . 145555) (close-paren 145553 . 145554) (open-paren 145552 . 145553) (symbol 145544 . 145552) (CHAR 145539 . 145543) (EXTERN 145532 . 145538) (punctuation 145393 . 145394) (close-paren 145392 . 145393) (VOID 145388 . 145392) (open-paren 145387 . 145388) (symbol 145370 . 145386) (VOID 145365 . 145369) (EXTERN 145358 . 145364) (punctuation 145356 . 145357) (close-paren 145355 . 145356) (symbol 145349 . 145355) (open-paren 145348 . 145349) (symbol 145335 . 145347) (VOID 145330 . 145334) (EXTERN 145323 . 145329) (punctuation 144892 . 144893) (close-paren 144891 . 144892) (VOID 144887 . 144891) (open-paren 144886 . 144887) (symbol 144874 . 144885) (VOID 144869 . 144873) (EXTERN 144862 . 144868) (punctuation 144356 . 144357) (close-paren 144355 . 144356) (VOID 144351 . 144355) (open-paren 144350 . 144351) (symbol 144335 . 144349) (VOID 144330 . 144334) (EXTERN 144323 . 144329) (punctuation 143497 . 143498) (close-paren 143496 . 143497) (VOID 143492 . 143496) (open-paren 143491 . 143492) (symbol 143481 . 143490) (VOID 143476 . 143480) (EXTERN 143469 . 143475) (punctuation 143467 . 143468) (close-paren 143466 . 143467) (VOID 143462 . 143466) (open-paren 143461 . 143462) (symbol 143448 . 143460) (VOID 143443 . 143447) (EXTERN 143436 . 143442) (punctuation 143407 . 143408) (close-paren 143406 . 143407) (VOID 143402 . 143406) (open-paren 143401 . 143402) (symbol 143384 . 143400) (VOID 143379 . 143383) (EXTERN 143372 . 143378) (punctuation 143339 . 143340) (close-paren 143338 . 143339) (number 143337 . 143338) (punctuation 143335 . 143336) (number 143334 . 143335) (open-paren 143333 . 143334) (symbol 143309 . 143332) (close-paren 143305 . 143306) (punctuation 143304 . 143305) (punctuation 143303 . 143304) (punctuation 143302 . 143303) (punctuation 143300 . 143301) (symbol 143295 . 143300) (punctuation 143294 . 143295) (CHAR 143289 . 143293) (CONST 143283 . 143288) (open-paren 143282 . 143283) (symbol 143276 . 143281) (VOID 143271 . 143275) (EXTERN 143254 . 143260) (punctuation 143252 . 143253) (close-paren 143251 . 143252) (VOID 143247 . 143251) (open-paren 143246 . 143247) (symbol 143233 . 143245) (VOID 143228 . 143232) (EXTERN 143221 . 143227) (punctuation 143159 . 143160) (close-paren 143158 . 143159) (symbol 143147 . 143158) (punctuation 143145 . 143146) (BOOL 143141 . 143145) (punctuation 143094 . 143095) (symbol 143083 . 143094) (punctuation 143081 . 143082) (symbol 143070 . 143081) (punctuation 143023 . 143024) (symbol 143012 . 143023) (punctuation 143010 . 143011) (symbol 142999 . 143010) (open-paren 142998 . 142999) (symbol 142973 . 142997) (symbol 142961 . 142972) (EXTERN 142954 . 142960) (punctuation 142952 . 142953) (close-paren 142951 . 142952) (VOID 142947 . 142951) (open-paren 142946 . 142947) (symbol 142932 . 142945) (VOID 142927 . 142931) (EXTERN 142920 . 142926) (punctuation 142890 . 142891) (close-paren 142889 . 142890) (VOID 142885 . 142889) (open-paren 142884 . 142885) (symbol 142872 . 142883) (VOID 142867 . 142871) (EXTERN 142860 . 142866) (punctuation 142832 . 142833) (close-paren 142831 . 142832) (VOID 142827 . 142831) (open-paren 142826 . 142827) (symbol 142809 . 142825) (VOID 142804 . 142808) (EXTERN 142797 . 142803) (punctuation 142795 . 142796) (close-paren 142794 . 142795) (INT 142791 . 142794) (open-paren 142790 . 142791) (symbol 142772 . 142789) (symbol 142760 . 142771) (EXTERN 142753 . 142759) (punctuation 142751 . 142752) (close-paren 142750 . 142751) (VOID 142746 . 142750) (open-paren 142745 . 142746) (symbol 142726 . 142744) (VOID 142721 . 142725) (EXTERN 142714 . 142720) (punctuation 142681 . 142682) (close-paren 142680 . 142681) (VOID 142676 . 142680) (open-paren 142675 . 142676) (symbol 142661 . 142674) (VOID 142656 . 142660) (EXTERN 142649 . 142655) (punctuation 142619 . 142620) (close-paren 142618 . 142619) (VOID 142614 . 142618) (open-paren 142613 . 142614) (symbol 142596 . 142612) (VOID 142591 . 142595) (EXTERN 142584 . 142590) (punctuation 142582 . 142583) (close-paren 142581 . 142582) (punctuation 142580 . 142581) (symbol 142573 . 142579) (STRUCT 142566 . 142572) (open-paren 142565 . 142566) (symbol 142551 . 142564) (VOID 142546 . 142550) (EXTERN 142539 . 142545) (punctuation 142537 . 142538) (close-paren 142536 . 142537) (VOID 142532 . 142536) (open-paren 142531 . 142532) (symbol 142514 . 142530) (VOID 142509 . 142513) (EXTERN 142502 . 142508) (punctuation 142500 . 142501) (close-paren 142499 . 142500) (symbol 142488 . 142499) (open-paren 142487 . 142488) (symbol 142475 . 142486) (VOID 142470 . 142474) (EXTERN 142463 . 142469) (punctuation 142461 . 142462) (close-paren 142460 . 142461) (symbol 142449 . 142460) (open-paren 142448 . 142449) (symbol 142438 . 142447) (VOID 142433 . 142437) (EXTERN 142426 . 142432) (punctuation 142393 . 142394) (close-paren 142392 . 142393) (symbol 142381 . 142392) (punctuation 142379 . 142380) (symbol 142368 . 142379) (punctuation 142366 . 142367) (symbol 142355 . 142366) (punctuation 142353 . 142354) (symbol 142342 . 142353) (open-paren 142341 . 142342) (symbol 142329 . 142340) (INT 142325 . 142328) (EXTERN 142318 . 142324) (punctuation 142316 . 142317) (close-paren 142315 . 142316) (punctuation 142314 . 142315) (CONST 142308 . 142313) (CHAR 142303 . 142307) (punctuation 142301 . 142302) (INT 142298 . 142301) (punctuation 142296 . 142297) (punctuation 142295 . 142296) (CONST 142289 . 142294) (CHAR 142284 . 142288) (punctuation 142282 . 142283) (INT 142279 . 142282) (open-paren 142278 . 142279) (symbol 142259 . 142277) (INT 142255 . 142258) (EXTERN 142248 . 142254) (punctuation 142246 . 142247) (close-paren 142245 . 142246) (punctuation 142244 . 142245) (CONST 142238 . 142243) (CHAR 142233 . 142237) (open-paren 142232 . 142233) (symbol 142219 . 142231) (VOID 142214 . 142218) (EXTERN 142207 . 142213) (punctuation 142205 . 142206) (close-paren 142204 . 142205) (symbol 142195 . 142204) (punctuation 142193 . 142194) (punctuation 142192 . 142193) (CONST 142186 . 142191) (VOID 142181 . 142185) (punctuation 142179 . 142180) (INT 142176 . 142179) (open-paren 142175 . 142176) (symbol 142158 . 142174) (symbol 142148 . 142157) (EXTERN 142141 . 142147) (punctuation 142139 . 142140) (close-paren 142138 . 142139) (symbol 142129 . 142138) (punctuation 142127 . 142128) (punctuation 142126 . 142127) (CONST 142120 . 142125) (VOID 142115 . 142119) (punctuation 142113 . 142114) (INT 142110 . 142113) (open-paren 142109 . 142110) (symbol 142093 . 142108) (symbol 142083 . 142092) (EXTERN 142076 . 142082) (punctuation 142074 . 142075) (close-paren 142073 . 142074) (symbol 142064 . 142073) (punctuation 142062 . 142063) (punctuation 142061 . 142062) (CONST 142055 . 142060) (VOID 142050 . 142054) (punctuation 142048 . 142049) (INT 142045 . 142048) (open-paren 142044 . 142045) (symbol 142032 . 142043) (symbol 142022 . 142031) (EXTERN 142015 . 142021) (punctuation 142013 . 142014) (close-paren 142012 . 142013) (symbol 142003 . 142012) (punctuation 142001 . 142002) (punctuation 142000 . 142001) (VOID 141995 . 141999) (punctuation 141993 . 141994) (INT 141990 . 141993) (open-paren 141989 . 141990) (symbol 141973 . 141988) (symbol 141963 . 141972) (EXTERN 141956 . 141962) (punctuation 141954 . 141955) (close-paren 141953 . 141954) (symbol 141944 . 141953) (punctuation 141942 . 141943) (punctuation 141941 . 141942) (VOID 141936 . 141940) (punctuation 141934 . 141935) (INT 141931 . 141934) (open-paren 141930 . 141931) (symbol 141919 . 141929) (symbol 141909 . 141918) (EXTERN 141902 . 141908) (punctuation 141900 . 141901) (close-paren 141899 . 141900) (INT 141896 . 141899) (open-paren 141895 . 141896) (symbol 141883 . 141894) (INT 141879 . 141882) (EXTERN 141872 . 141878) (punctuation 141870 . 141871) (close-paren 141869 . 141870) (semantic-list 141866 . 141869) (INT 141863 . 141866) (open-paren 141862 . 141863) (symbol 141851 . 141861) (INT 141847 . 141850) (EXTERN 141840 . 141846) (punctuation 141838 . 141839) (close-paren 141837 . 141838) (INT 141834 . 141837) (punctuation 141832 . 141833) (INT 141829 . 141832) (punctuation 141827 . 141828) (punctuation 141826 . 141827) (CHAR 141821 . 141825) (CONST 141815 . 141820) (open-paren 141814 . 141815) (symbol 141803 . 141813) (INT 141799 . 141802) (EXTERN 141792 . 141798) (close-paren 141779 . 141780) (VOID 141775 . 141779) (open-paren 141774 . 141775) (symbol 141762 . 141773) (VOID 141757 . 141761) (EXTERN 141740 . 141746) (punctuation 141738 . 141739) (close-paren 141737 . 141738) (INT 141734 . 141737) (open-paren 141733 . 141734) (symbol 141717 . 141732) (VOID 141712 . 141716) (EXTERN 141705 . 141711) (punctuation 141703 . 141704) (close-paren 141702 . 141703) (VOID 141698 . 141702) (open-paren 141697 . 141698) (symbol 141685 . 141696) (VOID 141680 . 141684) (EXTERN 141673 . 141679) (punctuation 141671 . 141672) (close-paren 141670 . 141671) (symbol 141661 . 141670) (punctuation 141659 . 141660) (punctuation 141658 . 141659) (VOID 141653 . 141657) (open-paren 141652 . 141653) (symbol 141640 . 141651) (VOID 141635 . 141639) (EXTERN 141628 . 141634) (punctuation 141626 . 141627) (close-paren 141625 . 141626) (VOID 141621 . 141625) (open-paren 141620 . 141621) (symbol 141609 . 141619) (symbol 141599 . 141608) (EXTERN 141592 . 141598) (punctuation 141590 . 141591) (close-paren 141589 . 141590) (INT 141586 . 141589) (punctuation 141584 . 141585) (INT 141581 . 141584) (punctuation 141579 . 141580) (INT 141576 . 141579) (open-paren 141575 . 141576) (symbol 141559 . 141574) (INT 141555 . 141558) (EXTERN 141548 . 141554) (punctuation 141546 . 141547) (close-paren 141545 . 141546) (INT 141542 . 141545) (open-paren 141541 . 141542) (symbol 141531 . 141540) (VOID 141526 . 141530) (EXTERN 141519 . 141525) (punctuation 141517 . 141518) (close-paren 141516 . 141517) (INT 141513 . 141516) (open-paren 141512 . 141513) (symbol 141496 . 141511) (VOID 141491 . 141495) (EXTERN 141484 . 141490) (punctuation 141482 . 141483) (close-paren 141481 . 141482) (VOID 141477 . 141481) (open-paren 141476 . 141477) (symbol 141456 . 141475) (VOID 141451 . 141455) (EXTERN 141444 . 141450) (punctuation 141442 . 141443) (close-paren 141441 . 141442) (VOID 141437 . 141441) (open-paren 141436 . 141437) (symbol 141417 . 141435) (VOID 141412 . 141416) (EXTERN 141405 . 141411) (punctuation 141403 . 141404) (close-paren 141402 . 141403) (punctuation 141401 . 141402) (symbol 141384 . 141400) (STRUCT 141377 . 141383) (open-paren 141376 . 141377) (symbol 141360 . 141375) (VOID 141355 . 141359) (EXTERN 141348 . 141354) (punctuation 141346 . 141347) (close-paren 141345 . 141346) (punctuation 141344 . 141345) (symbol 141327 . 141343) (STRUCT 141320 . 141326) (open-paren 141319 . 141320) (symbol 141304 . 141318) (VOID 141299 . 141303) (EXTERN 141292 . 141298) (punctuation 141290 . 141291) (close-paren 141289 . 141290) (VOID 141285 . 141289) (open-paren 141284 . 141285) (symbol 141266 . 141283) (VOID 141261 . 141265) (EXTERN 141254 . 141260) (punctuation 141252 . 141253) (close-paren 141251 . 141252) (VOID 141247 . 141251) (open-paren 141246 . 141247) (symbol 141234 . 141245) (VOID 141229 . 141233) (EXTERN 141222 . 141228) (punctuation 141220 . 141221) (close-paren 141219 . 141220) (VOID 141215 . 141219) (open-paren 141214 . 141215) (symbol 141201 . 141213) (VOID 141196 . 141200) (EXTERN 141189 . 141195) (punctuation 141187 . 141188) (close-paren 141186 . 141187) (VOID 141182 . 141186) (open-paren 141181 . 141182) (symbol 141159 . 141180) (VOID 141154 . 141158) (EXTERN 141147 . 141153) (punctuation 141145 . 141146) (close-paren 141144 . 141145) (symbol 141143 . 141144) (CHAR 141138 . 141142) (open-paren 141137 . 141138) (symbol 141126 . 141136) (VOID 141121 . 141125) (EXTERN 141114 . 141120) (punctuation 141112 . 141113) (close-paren 141111 . 141112) (VOID 141107 . 141111) (open-paren 141106 . 141107) (symbol 141079 . 141105) (punctuation 141078 . 141079) (CHAR 141073 . 141077) (EXTERN 141066 . 141072) (punctuation 141064 . 141065) (close-paren 141063 . 141064) (VOID 141059 . 141063) (open-paren 141058 . 141059) (symbol 141040 . 141057) (VOID 141035 . 141039) (EXTERN 141028 . 141034) (punctuation 141026 . 141027) (close-paren 141025 . 141026) (punctuation 141024 . 141025) (CONST 141018 . 141023) (punctuation 141017 . 141018) (CHAR 141012 . 141016) (punctuation 141010 . 141011) (punctuation 141009 . 141010) (CONST 141003 . 141008) (punctuation 141002 . 141003) (CHAR 140997 . 141001) (punctuation 140995 . 140996) (punctuation 140994 . 140995) (CONST 140988 . 140993) (CHAR 140983 . 140987) (open-paren 140982 . 140983) (symbol 140966 . 140981) (INT 140962 . 140965) (EXTERN 140955 . 140961) (close-paren 140946 . 140947) (RETURN 140932 . 140938) (open-paren 140930 . 140931) (close-paren 140928 . 140929) (VOID 140924 . 140928) (open-paren 140923 . 140924) (symbol 140893 . 140922) (BOOL 140888 . 140892) (symbol 140881 . 140887) (punctuation 140696 . 140697) (close-paren 140695 . 140696) (VOID 140691 . 140695) (open-paren 140690 . 140691) (symbol 140676 . 140689) (VOID 140671 . 140675) (EXTERN 140664 . 140670) (punctuation 140634 . 140635) (close-paren 140633 . 140634) (VOID 140629 . 140633) (open-paren 140628 . 140629) (symbol 140615 . 140627) (VOID 140610 . 140614) (EXTERN 140603 . 140609) (punctuation 140574 . 140575) (close-paren 140573 . 140574) (symbol 140562 . 140573) (punctuation 140560 . 140561) (symbol 140549 . 140560) (open-paren 140548 . 140549) (symbol 140519 . 140547) (VOID 140514 . 140518) (EXTERN 140507 . 140513) (punctuation 140474 . 140475) (close-paren 140473 . 140474) (VOID 140469 . 140473) (open-paren 140468 . 140469) (symbol 140455 . 140467) (VOID 140450 . 140454) (EXTERN 140443 . 140449) (punctuation 140441 . 140442) (close-paren 140440 . 140441) (symbol 140429 . 140440) (punctuation 140391 . 140392) (symbol 140380 . 140391) (punctuation 140378 . 140379) (symbol 140367 . 140378) (punctuation 140357 . 140358) (symbol 140348 . 140357) (punctuation 140346 . 140347) (symbol 140337 . 140346) (open-paren 140336 . 140337) (symbol 140313 . 140335) (VOID 140308 . 140312) (EXTERN 140301 . 140307) (punctuation 140299 . 140300) (close-paren 140298 . 140299) (symbol 140289 . 140298) (punctuation 140287 . 140288) (symbol 140278 . 140287) (open-paren 140277 . 140278) (symbol 140263 . 140276) (VOID 140258 . 140262) (EXTERN 140251 . 140257) (punctuation 140249 . 140250) (close-paren 140248 . 140249) (VOID 140244 . 140248) (open-paren 140243 . 140244) (symbol 140223 . 140242) (VOID 140218 . 140222) (EXTERN 140211 . 140217) (punctuation 140209 . 140210) (close-paren 140208 . 140209) (BOOL 140204 . 140208) (punctuation 140202 . 140203) (symbol 140191 . 140202) (punctuation 140189 . 140190) (symbol 140180 . 140189) (open-paren 140179 . 140180) (symbol 140165 . 140178) (VOID 140160 . 140164) (EXTERN 140153 . 140159) (punctuation 140151 . 140152) (close-paren 140150 . 140151) (symbol 140141 . 140150) (punctuation 140139 . 140140) (symbol 140130 . 140139) (open-paren 140129 . 140130) (symbol 140115 . 140128) (VOID 140110 . 140114) (EXTERN 140103 . 140109) (punctuation 140101 . 140102) (close-paren 140100 . 140101) (punctuation 140099 . 140100) (symbol 140092 . 140098) (STRUCT 140085 . 140091) (open-paren 140084 . 140085) (symbol 140065 . 140083) (VOID 140060 . 140064) (EXTERN 140053 . 140059) (punctuation 140024 . 140025) (close-paren 140023 . 140024) (VOID 140019 . 140023) (open-paren 140018 . 140019) (symbol 140003 . 140017) (VOID 139998 . 140002) (EXTERN 139991 . 139997) (punctuation 139989 . 139990) (close-paren 139988 . 139989) (VOID 139984 . 139988) (open-paren 139983 . 139984) (symbol 139971 . 139982) (VOID 139966 . 139970) (EXTERN 139959 . 139965) (punctuation 139928 . 139929) (close-paren 139927 . 139928) (symbol 139916 . 139927) (open-paren 139915 . 139916) (symbol 139895 . 139914) (symbol 139883 . 139894) (EXTERN 139876 . 139882) (punctuation 139874 . 139875) (close-paren 139873 . 139874) (punctuation 139872 . 139873) (symbol 139860 . 139871) (punctuation 139858 . 139859) (symbol 139849 . 139858) (punctuation 139847 . 139848) (symbol 139836 . 139847) (punctuation 139827 . 139828) (symbol 139816 . 139827) (punctuation 139814 . 139815) (symbol 139803 . 139814) (punctuation 139801 . 139802) (symbol 139790 . 139801) (open-paren 139789 . 139790) (symbol 139774 . 139788) (symbol 139762 . 139773) (EXTERN 139755 . 139761) (punctuation 139753 . 139754) (close-paren 139752 . 139753) (VOID 139748 . 139752) (open-paren 139747 . 139748) (symbol 139730 . 139746) (VOID 139725 . 139729) (EXTERN 139718 . 139724) (punctuation 139685 . 139686) (close-paren 139684 . 139685) (BOOL 139680 . 139684) (open-paren 139679 . 139680) (symbol 139660 . 139678) (INT 139656 . 139659) (EXTERN 139649 . 139655) (punctuation 139647 . 139648) (close-paren 139646 . 139647) (VOID 139642 . 139646) (open-paren 139641 . 139642) (symbol 139629 . 139640) (VOID 139624 . 139628) (EXTERN 139617 . 139623) (punctuation 139615 . 139616) (close-paren 139614 . 139615) (BOOL 139610 . 139614) (punctuation 139608 . 139609) (BOOL 139604 . 139608) (punctuation 139602 . 139603) (symbol 139591 . 139602) (open-paren 139590 . 139591) (symbol 139575 . 139589) (symbol 139563 . 139574) (EXTERN 139556 . 139562) (punctuation 139554 . 139555) (close-paren 139553 . 139554) (symbol 139542 . 139553) (open-paren 139541 . 139542) (symbol 139525 . 139540) (symbol 139513 . 139524) (EXTERN 139506 . 139512) (punctuation 139504 . 139505) (close-paren 139503 . 139504) (VOID 139499 . 139503) (open-paren 139498 . 139499) (symbol 139479 . 139497) (symbol 139460 . 139478) (ENUM 139455 . 139459) (EXTERN 139448 . 139454) (punctuation 139446 . 139447) (close-paren 139445 . 139446) (symbol 139420 . 139442) (punctuation 139373 . 139374) (symbol 139354 . 139373) (punctuation 139290 . 139291) (symbol 139271 . 139290) (open-paren 139216 . 139217) (symbol 139195 . 139213) (ENUM 139190 . 139194) (punctuation 139162 . 139163) (close-paren 139161 . 139162) (VOID 139157 . 139161) (open-paren 139156 . 139157) (symbol 139139 . 139155) (VOID 139134 . 139138) (EXTERN 139127 . 139133) (punctuation 139125 . 139126) (close-paren 139124 . 139125) (VOID 139120 . 139124) (open-paren 139119 . 139120) (symbol 139095 . 139118) (VOID 139090 . 139094) (EXTERN 139083 . 139089) (punctuation 139081 . 139082) (close-paren 139080 . 139081) (VOID 139076 . 139080) (open-paren 139075 . 139076) (symbol 139061 . 139074) (VOID 139056 . 139060) (EXTERN 139049 . 139055) (punctuation 139047 . 139048) (close-paren 139046 . 139047) (VOID 139042 . 139046) (open-paren 139041 . 139042) (symbol 139025 . 139040) (VOID 139020 . 139024) (EXTERN 139013 . 139019) (punctuation 139011 . 139012) (close-paren 139010 . 139011) (symbol 138999 . 139010) (punctuation 138997 . 138998) (BOOL 138993 . 138997) (punctuation 138991 . 138992) (punctuation 138990 . 138991) (punctuation 138989 . 138990) (CHAR 138984 . 138988) (punctuation 138982 . 138983) (INT 138979 . 138982) (punctuation 138977 . 138978) (INT 138974 . 138977) (punctuation 138972 . 138973) (INT 138969 . 138972) (open-paren 138968 . 138969) (symbol 138956 . 138967) (VOID "void" 138939 . 138955) (EXTERN 138932 . 138938) (punctuation 138800 . 138801) (close-paren 138799 . 138800) (symbol 138788 . 138799) (open-paren 138787 . 138788) (symbol 138758 . 138786) (VOID 138753 . 138757) (EXTERN 138746 . 138752) (punctuation 138744 . 138745) (close-paren 138743 . 138744) (VOID 138739 . 138743) (open-paren 138738 . 138739) (symbol 138722 . 138737) (VOID 138717 . 138721) (EXTERN 138710 . 138716) (punctuation 138708 . 138709) (close-paren 138707 . 138708) (INT 138704 . 138707) (open-paren 138703 . 138704) (symbol 138684 . 138702) (VOID 138679 . 138683) (EXTERN 138672 . 138678) (punctuation 138558 . 138559) (close-paren 138557 . 138558) (INT 138554 . 138557) (open-paren 138553 . 138554) (symbol 138521 . 138552) (VOID 138516 . 138520) (EXTERN 138509 . 138515) (punctuation 138507 . 138508) (close-paren 138506 . 138507) (INT 138503 . 138506) (open-paren 138502 . 138503) (symbol 138473 . 138501) (VOID 138468 . 138472) (EXTERN 138461 . 138467) (punctuation 138004 . 138005) (close-paren 138003 . 138004) (INT 138000 . 138003) (punctuation 137998 . 137999) (punctuation 137997 . 137998) (symbol 137984 . 137996) (STRUCT 137977 . 137983) (punctuation 137970 . 137971) (symbol 137959 . 137970) (punctuation 137957 . 137958) (BOOL 137953 . 137957) (punctuation 137951 . 137952) (INT 137948 . 137951) (punctuation 137946 . 137947) (INT 137943 . 137946) (punctuation 137941 . 137942) (symbol 137933 . 137941) (open-paren 137932 . 137933) (symbol 137904 . 137931) (INT 137900 . 137903) (EXTERN 137893 . 137899) (punctuation 137891 . 137892) (close-paren 137890 . 137891) (symbol 137879 . 137890) (open-paren 137878 . 137879) (symbol 137856 . 137877) (VOID 137851 . 137855) (EXTERN 137844 . 137850) (punctuation 136868 . 136869) (close-paren 136867 . 136868) (symbol 136856 . 136867) (punctuation 136854 . 136855) (INT 136851 . 136854) (open-paren 136850 . 136851) (symbol 136834 . 136849) (VOID 136829 . 136833) (EXTERN 136822 . 136828) (punctuation 136820 . 136821) (close-paren 136819 . 136820) (INT 136816 . 136819) (open-paren 136815 . 136816) (symbol 136800 . 136814) (punctuation 136799 . 136800) (CHAR 136794 . 136798) (EXTERN 136787 . 136793) (close-paren 136778 . 136779) (open-paren 136777 . 136778) (close-paren 136775 . 136776) (VOID 136771 . 136775) (open-paren 136770 . 136771) (symbol 136739 . 136769) (VOID 136734 . 136738) (symbol 136727 . 136733) (close-paren 136725 . 136726) (open-paren 136724 . 136725) (close-paren 136722 . 136723) (VOID 136718 . 136722) (open-paren 136717 . 136718) (symbol 136682 . 136716) (VOID 136677 . 136681) (symbol 136670 . 136676) (close-paren 136668 . 136669) (open-paren 136667 . 136668) (close-paren 136665 . 136666) (VOID 136661 . 136665) (open-paren 136660 . 136661) (symbol 136647 . 136659) (VOID 136642 . 136646) (symbol 136635 . 136641) (punctuation 136431 . 136432) (close-paren 136430 . 136431) (INT 136427 . 136430) (punctuation 136425 . 136426) (INT 136422 . 136425) (open-paren 136421 . 136422) (symbol 136397 . 136420) (VOID 136392 . 136396) (EXTERN 136375 . 136381) (punctuation 136308 . 136309) (close-paren 136307 . 136308) (BOOL 136303 . 136307) (punctuation 136301 . 136302) (punctuation 136300 . 136301) (CHAR 136295 . 136299) (CONST 136289 . 136294) (punctuation 136287 . 136288) (punctuation 136286 . 136287) (CHAR 136281 . 136285) (CONST 136275 . 136280) (open-paren 136274 . 136275) (symbol 136258 . 136273) (symbol 136246 . 136257) (EXTERN 136239 . 136245) (punctuation 136074 . 136075) (close-paren 136073 . 136074) (VOID 136069 . 136073) (open-paren 136068 . 136069) (symbol 136054 . 136067) (VOID 136049 . 136053) (EXTERN 136042 . 136048) (punctuation 136040 . 136041) (close-paren 136039 . 136040) (symbol 136028 . 136039) (open-paren 136027 . 136028) (symbol 136005 . 136026) (VOID 136000 . 136004) (EXTERN 135993 . 135999) (punctuation 135991 . 135992) (close-paren 135990 . 135991) (symbol 135979 . 135990) (punctuation 135977 . 135978) (punctuation 135976 . 135977) (symbol 135970 . 135975) (STRUCT 135963 . 135969) (open-paren 135962 . 135963) (symbol 135946 . 135961) (symbol 135934 . 135945) (EXTERN 135927 . 135933) (punctuation 135925 . 135926) (close-paren 135924 . 135925) (symbol 135913 . 135924) (punctuation 135911 . 135912) (INT 135908 . 135911) (punctuation 135906 . 135907) (INT 135903 . 135906) (punctuation 135901 . 135902) (symbol 135890 . 135901) (open-paren 135889 . 135890) (symbol 135873 . 135888) (symbol 135861 . 135872) (EXTERN 135854 . 135860) (punctuation 135852 . 135853) (close-paren 135851 . 135852) (symbol 135840 . 135851) (punctuation 135838 . 135839) (symbol 135827 . 135838) (punctuation 135825 . 135826) (punctuation 135824 . 135825) (symbol 135812 . 135823) (open-paren 135811 . 135812) (symbol 135796 . 135810) (VOID 135791 . 135795) (EXTERN 135784 . 135790) (punctuation 135782 . 135783) (close-paren 135781 . 135782) (symbol 135770 . 135781) (punctuation 135768 . 135769) (symbol 135757 . 135768) (punctuation 135755 . 135756) (punctuation 135754 . 135755) (symbol 135748 . 135753) (STRUCT 135741 . 135747) (open-paren 135740 . 135741) (symbol 135722 . 135739) (VOID 135717 . 135721) (EXTERN 135710 . 135716) (punctuation 135680 . 135681) (close-paren 135679 . 135680) (VOID 135675 . 135679) (open-paren 135674 . 135675) (symbol 135659 . 135673) (VOID 135654 . 135658) (EXTERN 135647 . 135653) (punctuation 135645 . 135646) (close-paren 135644 . 135645) (symbol 135635 . 135644) (punctuation 135633 . 135634) (symbol 135624 . 135633) (punctuation 135622 . 135623) (symbol 135613 . 135622) (open-paren 135612 . 135613) (symbol 135594 . 135611) (BOOL 135589 . 135593) (EXTERN 135582 . 135588) (punctuation 135580 . 135581) (close-paren 135579 . 135580) (VOID 135575 . 135579) (open-paren 135574 . 135575) (symbol 135548 . 135573) (VOID 135543 . 135547) (EXTERN 135536 . 135542) (punctuation 135534 . 135535) (close-paren 135533 . 135534) (VOID 135529 . 135533) (open-paren 135528 . 135529) (symbol 135513 . 135527) (symbol 135503 . 135512) (EXTERN 135496 . 135502) (punctuation 135465 . 135466) (close-paren 135464 . 135465) (VOID 135460 . 135464) (open-paren 135459 . 135460) (symbol 135442 . 135458) (VOID 135437 . 135441) (EXTERN 135430 . 135436) (punctuation 135428 . 135429) (close-paren 135427 . 135428) (VOID 135423 . 135427) (open-paren 135422 . 135423) (symbol 135405 . 135421) (VOID 135400 . 135404) (EXTERN 135393 . 135399) (punctuation 135391 . 135392) (close-paren 135390 . 135391) (VOID 135386 . 135390) (open-paren 135385 . 135386) (symbol 135371 . 135384) (VOID 135366 . 135370) (EXTERN 135359 . 135365) (punctuation 135357 . 135358) (close-paren 135356 . 135357) (VOID 135352 . 135356) (open-paren 135351 . 135352) (symbol 135330 . 135350) (VOID 135325 . 135329) (EXTERN 135318 . 135324) (punctuation 135316 . 135317) (close-paren 135315 . 135316) (VOID 135311 . 135315) (open-paren 135310 . 135311) (symbol 135293 . 135309) (VOID 135288 . 135292) (EXTERN 135281 . 135287) (punctuation 135279 . 135280) (close-paren 135278 . 135279) (VOID 135274 . 135278) (open-paren 135273 . 135274) (symbol 135256 . 135272) (symbol 135244 . 135255) (EXTERN 135237 . 135243) (punctuation 135235 . 135236) (close-paren 135234 . 135235) (VOID 135230 . 135234) (open-paren 135229 . 135230) (symbol 135211 . 135228) (symbol 135199 . 135210) (EXTERN 135192 . 135198) (punctuation 135190 . 135191) (close-paren 135189 . 135190) (VOID 135185 . 135189) (open-paren 135184 . 135185) (symbol 135169 . 135183) (symbol 135157 . 135168) (EXTERN 135150 . 135156) (punctuation 135148 . 135149) (close-paren 135147 . 135148) (punctuation 135146 . 135147) (CHAR 135141 . 135145) (CONST 135135 . 135140) (punctuation 135133 . 135134) (symbol 135122 . 135133) (open-paren 135121 . 135122) (symbol 135102 . 135120) (VOID 135097 . 135101) (EXTERN 135090 . 135096) (punctuation 135088 . 135089) (close-paren 135087 . 135088) (symbol 135076 . 135087) (open-paren 135075 . 135076) (symbol 135060 . 135074) (VOID 135055 . 135059) (EXTERN 135048 . 135054) (punctuation 135046 . 135047) (close-paren 135045 . 135046) (BOOL 135041 . 135045) (open-paren 135040 . 135041) (symbol 135008 . 135039) (BOOL 135003 . 135007) (EXTERN 134996 . 135002) (punctuation 134994 . 134995) (close-paren 134993 . 134994) (VOID 134989 . 134993) (open-paren 134988 . 134989) (symbol 134948 . 134987) (BOOL 134943 . 134947) (EXTERN 134936 . 134942) (punctuation 134934 . 134935) (close-paren 134933 . 134934) (VOID 134929 . 134933) (open-paren 134928 . 134929) (symbol 134907 . 134927) (BOOL 134902 . 134906) (EXTERN 134895 . 134901) (punctuation 134787 . 134788) (close-paren 134786 . 134787) (VOID 134782 . 134786) (open-paren 134781 . 134782) (symbol 134760 . 134780) (VOID 134755 . 134759) (EXTERN 134748 . 134754) (punctuation 134746 . 134747) (close-paren 134745 . 134746) (punctuation 134744 . 134745) (INT 134740 . 134743) (punctuation 134738 . 134739) (symbol 134727 . 134738) (open-paren 134726 . 134727) (symbol 134711 . 134725) (symbol 134699 . 134710) (EXTERN 134692 . 134698) (punctuation 134690 . 134691) (close-paren 134689 . 134690) (symbol 134678 . 134689) (open-paren 134677 . 134678) (symbol 134662 . 134676) (symbol 134650 . 134661) (EXTERN 134643 . 134649) (punctuation 134529 . 134530) (close-paren 134528 . 134529) (VOID 134524 . 134528) (open-paren 134523 . 134524) (symbol 134508 . 134522) (VOID 134503 . 134507) (EXTERN 134496 . 134502) (punctuation 134387 . 134388) (close-paren 134386 . 134387) (VOID 134382 . 134386) (open-paren 134381 . 134382) (symbol 134365 . 134380) (VOID 134360 . 134364) (EXTERN 134353 . 134359) (punctuation 134351 . 134352) (close-paren 134350 . 134351) (VOID 134346 . 134350) (open-paren 134345 . 134346) (symbol 134327 . 134344) (VOID 134322 . 134326) (EXTERN 134315 . 134321) (punctuation 134282 . 134283) (close-paren 134281 . 134282) (VOID 134277 . 134281) (open-paren 134276 . 134277) (symbol 134257 . 134275) (VOID 134252 . 134256) (EXTERN 134245 . 134251) (punctuation 134243 . 134244) (close-paren 134242 . 134243) (VOID 134238 . 134242) (open-paren 134237 . 134238) (symbol 134218 . 134236) (VOID 134213 . 134217) (EXTERN 134206 . 134212) (punctuation 134170 . 134171) (close-paren 134169 . 134170) (VOID 134165 . 134169) (open-paren 134164 . 134165) (symbol 134148 . 134163) (VOID 134143 . 134147) (EXTERN 134136 . 134142) (punctuation 134103 . 134104) (close-paren 134102 . 134103) (VOID 134098 . 134102) (open-paren 134097 . 134098) (symbol 134081 . 134096) (VOID 134076 . 134080) (EXTERN 134069 . 134075) (punctuation 134067 . 134068) (close-paren 134066 . 134067) (VOID 134062 . 134066) (open-paren 134061 . 134062) (symbol 134043 . 134060) (VOID 134038 . 134042) (EXTERN 134031 . 134037) (punctuation 134029 . 134030) (close-paren 134028 . 134029) (symbol 134019 . 134028) (open-paren 134018 . 134019) (symbol 134003 . 134017) (symbol 133991 . 134002) (EXTERN 133984 . 133990) (punctuation 133874 . 133875) (close-paren 133873 . 133874) (VOID 133869 . 133873) (open-paren 133868 . 133869) (symbol 133849 . 133867) (VOID 133844 . 133848) (EXTERN 133837 . 133843) (punctuation 133835 . 133836) (close-paren 133834 . 133835) (VOID 133830 . 133834) (open-paren 133829 . 133830) (symbol 133814 . 133828) (VOID 133809 . 133813) (EXTERN 133802 . 133808) (punctuation 133800 . 133801) (close-paren 133799 . 133800) (punctuation 133798 . 133799) (symbol 133788 . 133797) (punctuation 133786 . 133787) (symbol 133777 . 133786) (punctuation 133767 . 133768) (symbol 133758 . 133767) (punctuation 133756 . 133757) (symbol 133747 . 133756) (open-paren 133746 . 133747) (symbol 133721 . 133745) (symbol 133711 . 133720) (EXTERN 133704 . 133710) (punctuation 133702 . 133703) (close-paren 133701 . 133702) (punctuation 133700 . 133701) (symbol 133690 . 133699) (punctuation 133688 . 133689) (symbol 133679 . 133688) (punctuation 133666 . 133667) (symbol 133657 . 133666) (punctuation 133655 . 133656) (symbol 133646 . 133655) (open-paren 133645 . 133646) (symbol 133624 . 133644) (symbol 133614 . 133623) (EXTERN 133607 . 133613) (punctuation 133605 . 133606) (close-paren 133604 . 133605) (punctuation 133603 . 133604) (symbol 133593 . 133602) (punctuation 133591 . 133592) (punctuation 133590 . 133591) (symbol 133580 . 133589) (punctuation 133578 . 133579) (symbol 133569 . 133578) (open-paren 133568 . 133569) (symbol 133544 . 133567) (symbol 133534 . 133543) (EXTERN 133527 . 133533) (punctuation 133525 . 133526) (close-paren 133524 . 133525) (BOOL 133520 . 133524) (punctuation 133518 . 133519) (symbol 133509 . 133518) (punctuation 133497 . 133498) (symbol 133488 . 133497) (punctuation 133486 . 133487) (symbol 133477 . 133486) (punctuation 133475 . 133476) (symbol 133466 . 133475) (punctuation 133464 . 133465) (symbol 133455 . 133464) (open-paren 133454 . 133455) (symbol 133441 . 133453) (symbol 133431 . 133440) (EXTERN 133424 . 133430) (punctuation 133422 . 133423) (close-paren 133421 . 133422) (BOOL 133417 . 133421) (punctuation 133415 . 133416) (punctuation 133414 . 133415) (symbol 133404 . 133413) (punctuation 133402 . 133403) (punctuation 133401 . 133402) (symbol 133391 . 133400) (punctuation 133389 . 133390) (symbol 133380 . 133389) (punctuation 133368 . 133369) (symbol 133359 . 133368) (punctuation 133357 . 133358) (symbol 133348 . 133357) (punctuation 133346 . 133347) (symbol 133337 . 133346) (punctuation 133335 . 133336) (symbol 133326 . 133335) (open-paren 133325 . 133326) (symbol 133312 . 133324) (symbol 133302 . 133311) (EXTERN 133295 . 133301) (punctuation 133293 . 133294) (close-paren 133292 . 133293) (symbol 133281 . 133292) (punctuation 133279 . 133280) (symbol 133270 . 133279) (punctuation 133268 . 133269) (symbol 133259 . 133268) (punctuation 133223 . 133224) (symbol 133214 . 133223) (punctuation 133212 . 133213) (symbol 133203 . 133212) (punctuation 133201 . 133202) (symbol 133190 . 133201) (open-paren 133189 . 133190) (symbol 133173 . 133188) (symbol 133163 . 133172) (EXTERN 133156 . 133162) (punctuation 133154 . 133155) (close-paren 133153 . 133154) (symbol 133144 . 133153) (punctuation 133134 . 133135) (punctuation 133133 . 133134) (CHAR 133128 . 133132) (CONST 133122 . 133127) (punctuation 133120 . 133121) (symbol 133109 . 133120) (open-paren 133108 . 133109) (symbol 133076 . 133107) (symbol 133066 . 133075) (EXTERN 133059 . 133065) (close-paren 133056 . 133057) (RETURN 132984 . 132990) (open-paren 132980 . 132981) (close-paren 132978 . 132979) (symbol 132972 . 132978) (symbol 132960 . 132971) (punctuation 132958 . 132959) (symbol 132952 . 132958) (symbol 132940 . 132951) (open-paren 132939 . 132940) (symbol 132909 . 132938) (symbol 132899 . 132908) (symbol 132892 . 132898) (close-paren 132889 . 132890) (RETURN 132831 . 132837) (open-paren 132827 . 132828) (close-paren 132825 . 132826) (symbol 132819 . 132825) (symbol 132807 . 132818) (punctuation 132805 . 132806) (symbol 132799 . 132805) (symbol 132787 . 132798) (open-paren 132786 . 132787) (symbol 132768 . 132785) (symbol 132758 . 132767) (symbol 132751 . 132757) (punctuation 132748 . 132749) (close-paren 132747 . 132748) (symbol 132736 . 132747) (punctuation 132724 . 132725) (symbol 132713 . 132724) (punctuation 132711 . 132712) (symbol 132700 . 132711) (open-paren 132699 . 132700) (symbol 132672 . 132698) (symbol 132662 . 132671) (EXTERN 132655 . 132661) (punctuation 132653 . 132654) (close-paren 132652 . 132653) (VOID 132648 . 132652) (open-paren 132647 . 132648) (symbol 132617 . 132646) (VOID 132612 . 132616) (EXTERN 132605 . 132611) (punctuation 132603 . 132604) (close-paren 132602 . 132603) (symbol 132596 . 132602) (symbol 132586 . 132595) (punctuation 132584 . 132585) (symbol 132578 . 132584) (symbol 132568 . 132577) (punctuation 132534 . 132535) (symbol 132526 . 132534) (symbol 132516 . 132525) (open-paren 132515 . 132516) (symbol 132496 . 132514) (VOID 132491 . 132495) (EXTERN 132484 . 132490) (punctuation 132482 . 132483) (close-paren 132481 . 132482) (VOID 132477 . 132481) (open-paren 132476 . 132477) (symbol 132456 . 132475) (VOID 132451 . 132455) (EXTERN 132444 . 132450) (punctuation 132442 . 132443) (close-paren 132441 . 132442) (VOID 132437 . 132441) (open-paren 132436 . 132437) (symbol 132416 . 132435) (VOID 132411 . 132415) (EXTERN 132404 . 132410) (punctuation 132373 . 132374) (close-paren 132372 . 132373) (VOID 132368 . 132372) (open-paren 132367 . 132368) (symbol 132352 . 132366) (VOID 132347 . 132351) (EXTERN 132340 . 132346) (punctuation 132338 . 132339) (close-paren 132337 . 132338) (VOID 132333 . 132337) (open-paren 132332 . 132333) (symbol 132320 . 132331) (VOID 132315 . 132319) (EXTERN 132308 . 132314) (punctuation 132306 . 132307) (close-paren 132305 . 132306) (symbol 132294 . 132305) (open-paren 132293 . 132294) (symbol 132265 . 132292) (BOOL 132260 . 132264) (EXTERN 132253 . 132259) (punctuation 132251 . 132252) (close-paren 132250 . 132251) (symbol 132239 . 132250) (open-paren 132238 . 132239) (symbol 132221 . 132237) (BOOL 132216 . 132220) (EXTERN 132209 . 132215) (punctuation 132207 . 132208) (close-paren 132206 . 132207) (punctuation 132205 . 132206) (CHAR 132200 . 132204) (CONST 132194 . 132199) (punctuation 132192 . 132193) (INT 132189 . 132192) (open-paren 132188 . 132189) (symbol 132171 . 132187) (symbol 132159 . 132170) (EXTERN 132152 . 132158) (punctuation 132150 . 132151) (close-paren 132149 . 132150) (symbol 132138 . 132149) (open-paren 132137 . 132138) (symbol 132116 . 132136) (BOOL 132111 . 132115) (EXTERN 132104 . 132110) (punctuation 132102 . 132103) (close-paren 132101 . 132102) (symbol 132090 . 132101) (punctuation 132088 . 132089) (punctuation 132087 . 132088) (CHAR 132082 . 132086) (CONST 132076 . 132081) (open-paren 132075 . 132076) (symbol 132050 . 132074) (VOID 132045 . 132049) (EXTERN 132028 . 132034) (punctuation 132026 . 132027) (close-paren 132025 . 132026) (symbol 132014 . 132025) (punctuation 132012 . 132013) (punctuation 132011 . 132012) (CHAR 132006 . 132010) (CONST 132000 . 132005) (open-paren 131999 . 132000) (symbol 131981 . 131998) (VOID 131976 . 131980) (EXTERN 131959 . 131965) (punctuation 131957 . 131958) (close-paren 131956 . 131957) (INT 131953 . 131956) (punctuation 131951 . 131952) (symbol 131940 . 131951) (punctuation 131938 . 131939) (punctuation 131937 . 131938) (CHAR 131932 . 131936) (CONST 131926 . 131931) (open-paren 131925 . 131926) (symbol 131907 . 131924) (VOID 131902 . 131906) (EXTERN 131885 . 131891) (punctuation 131883 . 131884) (close-paren 131882 . 131883) (INT 131879 . 131882) (punctuation 131877 . 131878) (symbol 131866 . 131877) (punctuation 131864 . 131865) (punctuation 131863 . 131864) (CHAR 131858 . 131862) (CONST 131852 . 131857) (open-paren 131851 . 131852) (symbol 131831 . 131850) (symbol 131819 . 131830) (EXTERN 131812 . 131818) (punctuation 131810 . 131811) (close-paren 131809 . 131810) (symbol 131798 . 131809) (open-paren 131797 . 131798) (symbol 131776 . 131796) (VOID 131771 . 131775) (EXTERN 131764 . 131770) (punctuation 131762 . 131763) (close-paren 131761 . 131762) (punctuation 131760 . 131761) (VOID 131755 . 131759) (open-paren 131754 . 131755) (symbol 131740 . 131753) (VOID 131735 . 131739) (EXTERN 131728 . 131734) (punctuation 131726 . 131727) (close-paren 131725 . 131726) (INT 131722 . 131725) (open-paren 131721 . 131722) (symbol 131703 . 131720) (VOID 131698 . 131702) (EXTERN 131691 . 131697) (punctuation 131689 . 131690) (close-paren 131688 . 131689) (INT 131685 . 131688) (punctuation 131683 . 131684) (symbol 131672 . 131683) (punctuation 131665 . 131666) (symbol 131654 . 131665) (punctuation 131652 . 131653) (symbol 131641 . 131652) (punctuation 131639 . 131640) (symbol 131628 . 131639) (punctuation 131621 . 131622) (symbol 131610 . 131621) (punctuation 131608 . 131609) (symbol 131597 . 131608) (punctuation 131595 . 131596) (symbol 131584 . 131595) (open-paren 131583 . 131584) (symbol 131570 . 131582) (symbol 131558 . 131569) (EXTERN 131551 . 131557) (punctuation 131549 . 131550) (close-paren 131548 . 131549) (symbol 131537 . 131548) (open-paren 131536 . 131537) (symbol 131513 . 131535) (symbol 131501 . 131512) (EXTERN 131494 . 131500) (punctuation 131462 . 131463) (close-paren 131461 . 131462) (VOID 131457 . 131461) (open-paren 131456 . 131457) (symbol 131441 . 131455) (VOID 131436 . 131440) (EXTERN 131429 . 131435) (punctuation 131427 . 131428) (close-paren 131426 . 131427) (symbol 131417 . 131426) (punctuation 131415 . 131416) (symbol 131406 . 131415) (punctuation 131404 . 131405) (punctuation 131403 . 131404) (symbol 131396 . 131402) (STRUCT 131389 . 131395) (open-paren 131388 . 131389) (symbol 131375 . 131387) (symbol 131363 . 131374) (EXTERN 131356 . 131362) (punctuation 131354 . 131355) (close-paren 131353 . 131354) (symbol 131344 . 131353) (punctuation 131342 . 131343) (symbol 131333 . 131342) (punctuation 131284 . 131285) (symbol 131273 . 131284) (punctuation 131271 . 131272) (symbol 131260 . 131271) (open-paren 131259 . 131260) (symbol 131232 . 131258) (symbol 131220 . 131231) (EXTERN 131213 . 131219) (punctuation 131211 . 131212) (close-paren 131210 . 131211) (symbol 131201 . 131210) (punctuation 131199 . 131200) (symbol 131190 . 131199) (punctuation 131188 . 131189) (symbol 131177 . 131188) (punctuation 131175 . 131176) (symbol 131164 . 131175) (open-paren 131163 . 131164) (symbol 131147 . 131162) (symbol 131135 . 131146) (EXTERN 131128 . 131134) (punctuation 131126 . 131127) (close-paren 131125 . 131126) (symbol 131114 . 131125) (punctuation 131112 . 131113) (symbol 131101 . 131112) (punctuation 131099 . 131100) (symbol 131088 . 131099) (open-paren 131087 . 131088) (symbol 131065 . 131086) (symbol 131053 . 131064) (EXTERN 131046 . 131052) (punctuation 131044 . 131045) (close-paren 131043 . 131044) (punctuation 131042 . 131043) (symbol 131030 . 131041) (STRUCT 131023 . 131029) (open-paren 131022 . 131023) (symbol 131007 . 131021) (VOID 131002 . 131006) (EXTERN 130995 . 131001) (punctuation 130993 . 130994) (close-paren 130992 . 130993) (symbol 130981 . 130992) (open-paren 130980 . 130981) (symbol 130966 . 130979) (VOID 130961 . 130965) (EXTERN 130954 . 130960) (punctuation 130952 . 130953) (close-paren 130951 . 130952) (symbol 130942 . 130951) (punctuation 130940 . 130941) (punctuation 130939 . 130940) (symbol 130932 . 130938) (STRUCT 130925 . 130931) (open-paren 130924 . 130925) (symbol 130901 . 130923) (symbol 130891 . 130900) (EXTERN 130884 . 130890) (punctuation 130882 . 130883) (close-paren 130881 . 130882) (symbol 130872 . 130881) (punctuation 130870 . 130871) (punctuation 130869 . 130870) (symbol 130862 . 130868) (STRUCT 130855 . 130861) (open-paren 130854 . 130855) (symbol 130831 . 130853) (symbol 130821 . 130830) (EXTERN 130814 . 130820) (punctuation 130812 . 130813) (close-paren 130811 . 130812) (punctuation 130810 . 130811) (symbol 130803 . 130809) (STRUCT 130796 . 130802) (open-paren 130795 . 130796) (symbol 130775 . 130794) (VOID 130770 . 130774) (EXTERN 130763 . 130769) (punctuation 130761 . 130762) (close-paren 130760 . 130761) (symbol 130749 . 130760) (open-paren 130748 . 130749) (symbol 130727 . 130747) (symbol 130717 . 130726) (EXTERN 130710 . 130716) (punctuation 130708 . 130709) (close-paren 130707 . 130708) (symbol 130696 . 130707) (open-paren 130695 . 130696) (symbol 130679 . 130694) (symbol 130669 . 130678) (EXTERN 130662 . 130668) (punctuation 130630 . 130631) (close-paren 130629 . 130630) (VOID 130625 . 130629) (open-paren 130624 . 130625) (symbol 130609 . 130623) (VOID 130604 . 130608) (EXTERN 130597 . 130603) (punctuation 130595 . 130596) (close-paren 130594 . 130595) (VOID 130590 . 130594) (open-paren 130589 . 130590) (symbol 130574 . 130588) (VOID 130569 . 130573) (EXTERN 130562 . 130568) (punctuation 130560 . 130561) (close-paren 130559 . 130560) (INT 130556 . 130559) (open-paren 130555 . 130556) (symbol 130543 . 130554) (VOID 130538 . 130542) (EXTERN 130531 . 130537) (punctuation 130529 . 130530) (close-paren 130528 . 130529) (VOID 130524 . 130528) (open-paren 130523 . 130524) (symbol 130506 . 130522) (VOID 130501 . 130505) (EXTERN 130494 . 130500) (punctuation 130492 . 130493) (close-paren 130491 . 130492) (symbol 130480 . 130491) (open-paren 130479 . 130480) (symbol 130459 . 130478) (symbol 130447 . 130458) (EXTERN 130440 . 130446) (punctuation 130438 . 130439) (close-paren 130437 . 130438) (symbol 130426 . 130437) (open-paren 130425 . 130426) (symbol 130405 . 130424) (symbol 130393 . 130404) (EXTERN 130386 . 130392) (punctuation 130384 . 130385) (close-paren 130383 . 130384) (symbol 130374 . 130383) (open-paren 130373 . 130374) (symbol 130355 . 130372) (BOOL 130350 . 130354) (EXTERN 130343 . 130349) (punctuation 130341 . 130342) (close-paren 130340 . 130341) (symbol 130329 . 130340) (punctuation 130327 . 130328) (symbol 130316 . 130327) (punctuation 130314 . 130315) (symbol 130303 . 130314) (punctuation 130260 . 130261) (BOOL 130256 . 130260) (punctuation 130254 . 130255) (symbol 130243 . 130254) (punctuation 130241 . 130242) (symbol 130230 . 130241) (open-paren 130229 . 130230) (symbol 130201 . 130228) (VOID 130196 . 130200) (EXTERN 130189 . 130195) (punctuation 130187 . 130188) (close-paren 130186 . 130187) (symbol 130177 . 130186) (punctuation 130175 . 130176) (symbol 130166 . 130175) (open-paren 130165 . 130166) (symbol 130139 . 130164) (VOID 130134 . 130138) (EXTERN 130127 . 130133) (punctuation 130125 . 130126) (close-paren 130124 . 130125) (symbol 130115 . 130124) (punctuation 130113 . 130114) (symbol 130104 . 130113) (open-paren 130103 . 130104) (symbol 130076 . 130102) (VOID 130071 . 130075) (EXTERN 130064 . 130070) (punctuation 130062 . 130063) (close-paren 130061 . 130062) (symbol 130052 . 130061) (punctuation 130050 . 130051) (symbol 130041 . 130050) (open-paren 130040 . 130041) (symbol 130013 . 130039) (VOID 130008 . 130012) (EXTERN 130001 . 130007) (punctuation 129999 . 130000) (close-paren 129998 . 129999) (symbol 129987 . 129998) (open-paren 129986 . 129987) (symbol 129977 . 129985) (VOID 129972 . 129976) (EXTERN 129955 . 129961) (punctuation 129953 . 129954) (close-paren 129952 . 129953) (VOID 129948 . 129952) (open-paren 129947 . 129948) (symbol 129911 . 129946) (symbol 129899 . 129910) (EXTERN 129892 . 129898) (punctuation 129890 . 129891) (close-paren 129889 . 129890) (symbol 129878 . 129889) (open-paren 129877 . 129878) (symbol 129849 . 129876) (BOOL 129844 . 129848) (EXTERN 129837 . 129843) (punctuation 129806 . 129807) (close-paren 129805 . 129806) (VOID 129801 . 129805) (open-paren 129800 . 129801) (symbol 129784 . 129799) (VOID 129779 . 129783) (EXTERN 129772 . 129778) (punctuation 129770 . 129771) (close-paren 129769 . 129770) (BOOL 129765 . 129769) (open-paren 129764 . 129765) (symbol 129751 . 129763) (VOID 129746 . 129750) (EXTERN 129739 . 129745) (punctuation 129737 . 129738) (close-paren 129736 . 129737) (BOOL 129732 . 129736) (punctuation 129730 . 129731) (symbol 129721 . 129730) (punctuation 129710 . 129711) (symbol 129701 . 129710) (punctuation 129699 . 129700) (symbol 129690 . 129699) (punctuation 129688 . 129689) (symbol 129679 . 129688) (open-paren 129678 . 129679) (symbol 129654 . 129677) (symbol 129642 . 129653) (EXTERN 129635 . 129641) (punctuation 129633 . 129634) (close-paren 129632 . 129633) (BOOL 129628 . 129632) (punctuation 129626 . 129627) (symbol 129617 . 129626) (punctuation 129615 . 129616) (symbol 129606 . 129615) (open-paren 129605 . 129606) (symbol 129586 . 129604) (symbol 129574 . 129585) (EXTERN 129567 . 129573) (punctuation 129565 . 129566) (close-paren 129564 . 129565) (VOID 129560 . 129564) (open-paren 129559 . 129560) (symbol 129545 . 129558) (VOID 129540 . 129544) (EXTERN 129523 . 129529) (punctuation 129521 . 129522) (close-paren 129520 . 129521) (symbol 129509 . 129520) (open-paren 129508 . 129509) (symbol 129483 . 129507) (VOID 129478 . 129482) (EXTERN 129471 . 129477) (punctuation 129469 . 129470) (close-paren 129468 . 129469) (VOID 129464 . 129468) (open-paren 129463 . 129464) (symbol 129441 . 129462) (symbol 129429 . 129440) (EXTERN 129422 . 129428) (punctuation 129420 . 129421) (close-paren 129419 . 129420) (symbol 129408 . 129419) (punctuation 129406 . 129407) (symbol 129395 . 129406) (open-paren 129394 . 129395) (symbol 129371 . 129393) (VOID 129366 . 129370) (EXTERN 129359 . 129365) (punctuation 129357 . 129358) (close-paren 129356 . 129357) (punctuation 129355 . 129356) (symbol 129343 . 129354) (UNION 129337 . 129342) (open-paren 129336 . 129337) (symbol 129316 . 129335) (VOID 129311 . 129315) (EXTERN 129304 . 129310) (punctuation 129302 . 129303) (close-paren 129301 . 129302) (symbol 129290 . 129301) (open-paren 129289 . 129290) (symbol 129281 . 129288) (VOID 129276 . 129280) (EXTERN 129269 . 129275) (punctuation 129237 . 129238) (close-paren 129236 . 129237) (VOID 129232 . 129236) (open-paren 129231 . 129232) (symbol 129218 . 129230) (VOID 129213 . 129217) (EXTERN 129206 . 129212) (close-paren 128747 . 128748) (punctuation 128745 . 128746) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 128717 . 128723) ("type" symbol "Lisp_Vectorlike" 128700 . 128715) ("a" symbol "o" 128697 . 128698)))) 128689 . 128745) (RETURN 128682 . 128688) (punctuation 128678 . 128679) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MODULE_FUNCTIONP" 128657 . 128673)))) 128648 . 128678) (open-paren 128644 . 128645) (close-paren 128642 . 128643) (symbol 128641 . 128642) (symbol 128629 . 128640) (open-paren 128628 . 128629) (symbol 128611 . 128627) (punctuation 128609 . 128610) (symbol 128588 . 128608) (STRUCT 128581 . 128587) (symbol 128574 . 128580) (close-paren 128571 . 128572) (RETURN 128523 . 128529) (open-paren 128519 . 128520) (close-paren 128517 . 128518) (symbol 128516 . 128517) (symbol 128504 . 128515) (open-paren 128503 . 128504) (symbol 128486 . 128502) (BOOL 128481 . 128485) (symbol 128474 . 128480) (punctuation 128471 . 128472) (close-paren 128453 . 128454) (open-paren 128235 . 128236) (symbol 128214 . 128234) (STRUCT 128207 . 128213) (punctuation 127925 . 127926) (close-paren 127924 . 127925) (punctuation 127923 . 127924) (VOID 127918 . 127922) (punctuation 127916 . 127917) (semantic-list 127914 . 127916) (symbol 127902 . 127913) (punctuation 127893 . 127894) (symbol 127884 . 127893) (punctuation 127882 . 127883) (punctuation 127881 . 127882) (symbol 127871 . 127880) (open-paren 127870 . 127871) (close-paren 127868 . 127869) (symbol 127858 . 127868) (punctuation 127857 . 127858) (open-paren 127856 . 127857) (symbol 127844 . 127855) (TYPEDEF 127836 . 127843) (punctuation 127503 . 127504) (close-paren 127502 . 127503) (symbol 127496 . 127502) (punctuation 127495 . 127496) (symbol 127483 . 127494) (STRUCT 127476 . 127482) (open-paren 127475 . 127476) (symbol 127446 . 127474) (BOOL 127441 . 127445) (EXTERN 127434 . 127440) (punctuation 127432 . 127433) (close-paren 127431 . 127432) (VOID 127427 . 127431) (open-paren 127426 . 127427) (symbol 127403 . 127425) (symbol 127391 . 127402) (punctuation 127389 . 127390) (close-paren 127388 . 127389) (symbol 127383 . 127388) (symbol 127371 . 127382) (open-paren 127370 . 127371) (symbol 127356 . 127369) (VOID 127351 . 127355) (EXTERN 127344 . 127350) (punctuation 127342 . 127343) (close-paren 127341 . 127342) (symbol 127338 . 127341) (punctuation 127337 . 127338) (symbol 127325 . 127336) (UNION 127319 . 127324) (punctuation 127317 . 127318) (symbol 127312 . 127317) (punctuation 127311 . 127312) (symbol 127299 . 127310) (UNION 127293 . 127298) (open-paren 127292 . 127293) (symbol 127279 . 127291) (VOID 127274 . 127278) (EXTERN 127267 . 127273) (punctuation 127265 . 127266) (close-paren 127264 . 127265) (symbol 127255 . 127264) (punctuation 127253 . 127254) (punctuation 127252 . 127253) (symbol 127240 . 127251) (punctuation 127238 . 127239) (symbol 127227 . 127238) (open-paren 127226 . 127227) (symbol 127206 . 127225) (symbol 127196 . 127205) (EXTERN 127189 . 127195) (punctuation 127187 . 127188) (close-paren 127186 . 127187) (symbol 127175 . 127186) (open-paren 127174 . 127175) (symbol 127162 . 127173) (VOID 127157 . 127161) (EXTERN 127150 . 127156) (punctuation 127148 . 127149) (close-paren 127147 . 127148) (VOID 127143 . 127147) (open-paren 127142 . 127143) (symbol 127129 . 127141) (VOID 127124 . 127128) (EXTERN 127117 . 127123) (punctuation 127115 . 127116) (close-paren 127114 . 127115) (VOID 127110 . 127114) (open-paren 127109 . 127110) (symbol 127099 . 127108) (VOID 127094 . 127098) (EXTERN 127087 . 127093) (punctuation 127085 . 127086) (close-paren 127084 . 127085) (symbol 127073 . 127084) (punctuation 127071 . 127072) (symbol 127060 . 127071) (punctuation 127058 . 127059) (symbol 127047 . 127058) (open-paren 127046 . 127047) (symbol 127035 . 127045) (symbol 127023 . 127034) (EXTERN 127016 . 127022) (punctuation 127014 . 127015) (close-paren 127013 . 127014) (symbol 127002 . 127013) (punctuation 127000 . 127001) (symbol 126989 . 127000) (open-paren 126988 . 126989) (symbol 126977 . 126987) (symbol 126965 . 126976) (EXTERN 126958 . 126964) (punctuation 126956 . 126957) (close-paren 126955 . 126956) (punctuation 126954 . 126955) (punctuation 126953 . 126954) (punctuation 126952 . 126953) (punctuation 126950 . 126951) (symbol 126939 . 126950) (punctuation 126937 . 126938) (symbol 126928 . 126937) (open-paren 126927 . 126928) (symbol 126917 . 126926) (symbol 126905 . 126916) (EXTERN 126898 . 126904) (punctuation 126896 . 126897) (close-paren 126895 . 126896) (VOID 126891 . 126895) (open-paren 126890 . 126891) (symbol 126875 . 126889) (VOID 126870 . 126874) (EXTERN 126863 . 126869) (punctuation 126861 . 126862) (close-paren 126860 . 126861) (symbol 126857 . 126860) (symbol 126845 . 126856) (open-paren 126844 . 126845) (symbol 126830 . 126843) (symbol 126818 . 126829) (EXTERN 126811 . 126817) (punctuation 126809 . 126810) (close-paren 126808 . 126809) (symbol 126797 . 126808) (open-paren 126796 . 126797) (symbol 126784 . 126795) (VOID 126779 . 126783) (EXTERN 126772 . 126778) (punctuation 126770 . 126771) (close-paren 126769 . 126770) (number 126768 . 126769) (punctuation 126766 . 126767) (number 126765 . 126766) (open-paren 126764 . 126765) (symbol 126740 . 126763) (close-paren 126736 . 126737) (symbol 126729 . 126736) (punctuation 126727 . 126728) (punctuation 126726 . 126727) (CHAR 126721 . 126725) (CONST 126715 . 126720) (open-paren 126714 . 126715) (symbol 126699 . 126713) (symbol 126687 . 126698) (EXTERN 126680 . 126686) (punctuation 126678 . 126679) (close-paren 126677 . 126678) (number 126676 . 126677) (punctuation 126674 . 126675) (number 126673 . 126674) (open-paren 126672 . 126673) (symbol 126648 . 126671) (close-paren 126644 . 126645) (symbol 126637 . 126644) (punctuation 126635 . 126636) (punctuation 126634 . 126635) (CHAR 126629 . 126633) (CONST 126623 . 126628) (open-paren 126622 . 126623) (symbol 126615 . 126621) (VOID 126610 . 126614) (EXTERN 126593 . 126599) (punctuation 126591 . 126592) (close-paren 126590 . 126591) (number 126589 . 126590) (punctuation 126587 . 126588) (number 126586 . 126587) (open-paren 126585 . 126586) (symbol 126561 . 126584) (close-paren 126559 . 126560) (punctuation 126558 . 126559) (punctuation 126557 . 126558) (punctuation 126556 . 126557) (punctuation 126554 . 126555) (punctuation 126553 . 126554) (CHAR 126548 . 126552) (CONST 126542 . 126547) (open-paren 126541 . 126542) (symbol 126535 . 126540) (VOID 126530 . 126534) (EXTERN 126513 . 126519) (punctuation 126511 . 126512) (close-paren 126510 . 126511) (punctuation 126509 . 126510) (symbol 126496 . 126508) (STRUCT 126489 . 126495) (open-paren 126488 . 126489) (symbol 126463 . 126487) (VOID 126458 . 126462) (EXTERN 126451 . 126457) (punctuation 126449 . 126450) (close-paren 126448 . 126449) (VOID 126444 . 126448) (open-paren 126443 . 126444) (symbol 126418 . 126442) (VOID 126413 . 126417) (EXTERN 126406 . 126412) (punctuation 126404 . 126405) (close-paren 126403 . 126404) (symbol 126392 . 126403) (punctuation 126390 . 126391) (symbol 126381 . 126390) (open-paren 126380 . 126381) (symbol 126370 . 126379) (symbol 126358 . 126369) (EXTERN 126351 . 126357) (punctuation 126349 . 126350) (close-paren 126348 . 126349) (punctuation 126347 . 126348) (VOID 126342 . 126346) (punctuation 126340 . 126341) (semantic-list 126332 . 126340) (semantic-list 126328 . 126331) (VOID 126323 . 126327) (punctuation 126321 . 126322) (symbol 126312 . 126321) (open-paren 126311 . 126312) (symbol 126288 . 126310) (VOID 126283 . 126287) (EXTERN 126276 . 126282) (punctuation 126274 . 126275) (close-paren 126273 . 126274) (symbol 126262 . 126273) (punctuation 126260 . 126261) (semantic-list 126247 . 126260) (semantic-list 126243 . 126246) (VOID 126238 . 126242) (punctuation 126236 . 126237) (symbol 126227 . 126236) (open-paren 126226 . 126227) (symbol 126207 . 126225) (VOID 126202 . 126206) (EXTERN 126195 . 126201) (punctuation 126193 . 126194) (close-paren 126192 . 126193) (symbol 126183 . 126192) (open-paren 126182 . 126183) (symbol 126161 . 126181) (VOID 126156 . 126160) (EXTERN 126149 . 126155) (punctuation 126147 . 126148) (close-paren 126146 . 126147) (VOID 126142 . 126146) (open-paren 126141 . 126142) (symbol 126111 . 126140) (VOID 126106 . 126110) (EXTERN 126099 . 126105) (punctuation 126097 . 126098) (close-paren 126096 . 126097) (VOID 126092 . 126096) (open-paren 126091 . 126092) (symbol 126059 . 126090) (VOID 126054 . 126058) (EXTERN 126047 . 126053) (punctuation 126045 . 126046) (close-paren 126044 . 126045) (semantic-list 126038 . 126044) (semantic-list 126034 . 126037) (VOID 126029 . 126033) (open-paren 126028 . 126029) (symbol 126001 . 126027) (VOID 125996 . 126000) (EXTERN 125989 . 125995) (punctuation 125987 . 125988) (close-paren 125986 . 125987) (INT 125983 . 125986) (punctuation 125981 . 125982) (semantic-list 125976 . 125981) (semantic-list 125972 . 125975) (VOID 125967 . 125971) (open-paren 125966 . 125967) (symbol 125940 . 125965) (VOID 125935 . 125939) (EXTERN 125928 . 125934) (punctuation 125926 . 125927) (close-paren 125925 . 125926) (punctuation 125924 . 125925) (VOID 125919 . 125923) (punctuation 125917 . 125918) (semantic-list 125909 . 125917) (semantic-list 125905 . 125908) (VOID 125900 . 125904) (open-paren 125899 . 125900) (symbol 125873 . 125898) (VOID 125868 . 125872) (EXTERN 125861 . 125867) (punctuation 125859 . 125860) (close-paren 125858 . 125859) (symbol 125849 . 125858) (punctuation 125847 . 125848) (punctuation 125846 . 125847) (symbol 125834 . 125845) (open-paren 125833 . 125834) (symbol 125805 . 125832) (VOID 125800 . 125804) (EXTERN 125793 . 125799) (punctuation 125791 . 125792) (close-paren 125790 . 125791) (symbol 125779 . 125790) (punctuation 125777 . 125778) (semantic-list 125764 . 125777) (semantic-list 125760 . 125763) (VOID 125755 . 125759) (open-paren 125754 . 125755) (symbol 125732 . 125753) (VOID 125727 . 125731) (EXTERN 125720 . 125726) (punctuation 125718 . 125719) (close-paren 125717 . 125718) (symbol 125706 . 125717) (punctuation 125704 . 125705) (symbol 125693 . 125704) (open-paren 125692 . 125693) (symbol 125683 . 125691) (VOID 125678 . 125682) (EXTERN 125671 . 125677) (punctuation 125669 . 125670) (close-paren 125668 . 125669) (symbol 125657 . 125668) (ENUM 125652 . 125656) (punctuation 125650 . 125651) (symbol 125639 . 125650) (open-paren 125638 . 125639) (symbol 125616 . 125637) (punctuation 125615 . 125616) (symbol 125607 . 125614) (STRUCT 125600 . 125606) (EXTERN 125593 . 125599) (punctuation 125591 . 125592) (close-paren 125590 . 125591) (symbol 125579 . 125590) (ENUM 125574 . 125578) (punctuation 125572 . 125573) (symbol 125561 . 125572) (open-paren 125560 . 125561) (symbol 125547 . 125559) (punctuation 125546 . 125547) (symbol 125538 . 125545) (STRUCT 125531 . 125537) (EXTERN 125524 . 125530) (punctuation 125522 . 125523) (close-paren 125521 . 125522) (punctuation 125505 . 125506) (punctuation 125490 . 125491) (punctuation 125489 . 125490) (VOID 125484 . 125488) (punctuation 125482 . 125483) (punctuation 125471 . 125472) (open-paren 125457 . 125458) (symbol 125438 . 125456) (symbol 125426 . 125437) (EXTERN 125419 . 125425) (punctuation 125417 . 125418) (close-paren 125416 . 125417) (punctuation 125374 . 125375) (punctuation 125359 . 125360) (symbol 125348 . 125359) (punctuation 125341 . 125342) (punctuation 125340 . 125341) (symbol 125328 . 125339) (punctuation 125326 . 125327) (symbol 125317 . 125326) (punctuation 125315 . 125316) (punctuation 125286 . 125287) (open-paren 125272 . 125273) (symbol 125242 . 125267) (symbol 125230 . 125241) (EXTERN 125223 . 125229) (punctuation 125221 . 125222) (close-paren 125220 . 125221) (punctuation 125204 . 125205) (punctuation 125189 . 125190) (symbol 125178 . 125189) (punctuation 125176 . 125177) (symbol 125165 . 125176) (punctuation 125163 . 125164) (symbol 125152 . 125163) (punctuation 125150 . 125151) (punctuation 125121 . 125122) (open-paren 125107 . 125108) (symbol 125081 . 125106) (symbol 125069 . 125080) (EXTERN 125062 . 125068) (punctuation 125060 . 125061) (close-paren 125059 . 125060) (punctuation 125043 . 125044) (punctuation 125028 . 125029) (symbol 125017 . 125028) (punctuation 125015 . 125016) (symbol 125004 . 125015) (punctuation 125002 . 125003) (punctuation 124986 . 124987) (open-paren 124972 . 124973) (symbol 124946 . 124971) (symbol 124934 . 124945) (EXTERN 124927 . 124933) (punctuation 124925 . 124926) (close-paren 124924 . 124925) (punctuation 124908 . 124909) (punctuation 124893 . 124894) (symbol 124882 . 124893) (punctuation 124880 . 124881) (punctuation 124871 . 124872) (open-paren 124857 . 124858) (symbol 124833 . 124856) (symbol 124821 . 124832) (EXTERN 124814 . 124820) (punctuation 124812 . 124813) (close-paren 124811 . 124812) (symbol 124800 . 124811) (punctuation 124798 . 124799) (symbol 124787 . 124798) (punctuation 124785 . 124786) (symbol 124774 . 124785) (open-paren 124773 . 124774) (symbol 124744 . 124772) (symbol 124732 . 124743) (EXTERN 124725 . 124731) (punctuation 124723 . 124724) (close-paren 124722 . 124723) (symbol 124711 . 124722) (punctuation 124709 . 124710) (punctuation 124693 . 124694) (punctuation 124678 . 124679) (symbol 124667 . 124678) (open-paren 124666 . 124667) (symbol 124651 . 124665) (symbol 124639 . 124650) (EXTERN 124632 . 124638) (punctuation 124630 . 124631) (close-paren 124629 . 124630) (symbol 124618 . 124629) (punctuation 124616 . 124617) (symbol 124605 . 124616) (punctuation 124603 . 124604) (symbol 124592 . 124603) (punctuation 124590 . 124591) (symbol 124579 . 124590) (punctuation 124577 . 124578) (symbol 124566 . 124577) (punctuation 124564 . 124565) (symbol 124553 . 124564) (punctuation 124551 . 124552) (symbol 124540 . 124551) (punctuation 124538 . 124539) (symbol 124527 . 124538) (punctuation 124525 . 124526) (symbol 124514 . 124525) (open-paren 124513 . 124514) (symbol 124507 . 124512) (symbol 124495 . 124506) (EXTERN 124488 . 124494) (punctuation 124486 . 124487) (close-paren 124485 . 124486) (symbol 124474 . 124485) (punctuation 124472 . 124473) (symbol 124461 . 124472) (punctuation 124459 . 124460) (symbol 124448 . 124459) (punctuation 124446 . 124447) (symbol 124435 . 124446) (punctuation 124433 . 124434) (symbol 124422 . 124433) (punctuation 124420 . 124421) (symbol 124409 . 124420) (punctuation 124407 . 124408) (symbol 124396 . 124407) (punctuation 124394 . 124395) (symbol 124383 . 124394) (open-paren 124382 . 124383) (symbol 124376 . 124381) (symbol 124364 . 124375) (EXTERN 124357 . 124363) (punctuation 124355 . 124356) (close-paren 124354 . 124355) (symbol 124343 . 124354) (punctuation 124341 . 124342) (symbol 124330 . 124341) (punctuation 124328 . 124329) (symbol 124317 . 124328) (punctuation 124315 . 124316) (symbol 124304 . 124315) (punctuation 124302 . 124303) (symbol 124291 . 124302) (punctuation 124289 . 124290) (symbol 124278 . 124289) (punctuation 124276 . 124277) (symbol 124265 . 124276) (open-paren 124264 . 124265) (symbol 124258 . 124263) (symbol 124246 . 124257) (EXTERN 124239 . 124245) (punctuation 124237 . 124238) (close-paren 124236 . 124237) (symbol 124225 . 124236) (punctuation 124223 . 124224) (symbol 124212 . 124223) (punctuation 124210 . 124211) (symbol 124199 . 124210) (punctuation 124197 . 124198) (symbol 124186 . 124197) (punctuation 124184 . 124185) (symbol 124173 . 124184) (punctuation 124171 . 124172) (symbol 124160 . 124171) (open-paren 124159 . 124160) (symbol 124153 . 124158) (symbol 124141 . 124152) (EXTERN 124134 . 124140) (punctuation 124132 . 124133) (close-paren 124131 . 124132) (symbol 124120 . 124131) (punctuation 124118 . 124119) (symbol 124107 . 124118) (punctuation 124105 . 124106) (symbol 124094 . 124105) (punctuation 124092 . 124093) (symbol 124081 . 124092) (punctuation 124079 . 124080) (symbol 124068 . 124079) (open-paren 124067 . 124068) (symbol 124061 . 124066) (symbol 124049 . 124060) (EXTERN 124042 . 124048) (punctuation 124040 . 124041) (close-paren 124039 . 124040) (symbol 124028 . 124039) (punctuation 124026 . 124027) (symbol 124015 . 124026) (punctuation 124013 . 124014) (symbol 124002 . 124013) (punctuation 124000 . 124001) (symbol 123989 . 124000) (open-paren 123988 . 123989) (symbol 123982 . 123987) (symbol 123970 . 123981) (EXTERN 123963 . 123969) (punctuation 123961 . 123962) (close-paren 123960 . 123961) (symbol 123949 . 123960) (punctuation 123947 . 123948) (symbol 123936 . 123947) (punctuation 123934 . 123935) (symbol 123923 . 123934) (open-paren 123922 . 123923) (symbol 123916 . 123921) (symbol 123904 . 123915) (EXTERN 123897 . 123903) (punctuation 123895 . 123896) (close-paren 123894 . 123895) (symbol 123883 . 123894) (punctuation 123881 . 123882) (symbol 123870 . 123881) (open-paren 123869 . 123870) (symbol 123863 . 123868) (symbol 123851 . 123862) (EXTERN 123844 . 123850) (punctuation 123842 . 123843) (close-paren 123841 . 123842) (symbol 123830 . 123841) (open-paren 123829 . 123830) (symbol 123823 . 123828) (symbol 123811 . 123822) (EXTERN 123804 . 123810) (punctuation 123802 . 123803) (close-paren 123801 . 123802) (symbol 123790 . 123801) (punctuation 123788 . 123789) (symbol 123777 . 123788) (open-paren 123776 . 123777) (symbol 123769 . 123775) (symbol 123757 . 123768) (EXTERN 123750 . 123756) (punctuation 123748 . 123749) (close-paren 123747 . 123748) (symbol 123743 . 123747) (symbol 123731 . 123742) (open-paren 123730 . 123731) (symbol 123721 . 123729) (symbol 123709 . 123720) (EXTERN 123702 . 123708) (punctuation 123700 . 123701) (close-paren 123699 . 123700) (symbol 123689 . 123699) (punctuation 123688 . 123689) (symbol 123676 . 123687) (punctuation 123674 . 123675) (symbol 123667 . 123674) (symbol 123657 . 123666) (punctuation 123655 . 123656) (symbol 123651 . 123655) (punctuation 123650 . 123651) (symbol 123640 . 123649) (STRUCT 123633 . 123639) (open-paren 123632 . 123633) (symbol 123619 . 123631) (symbol 123607 . 123618) (EXTERN 123600 . 123606) (punctuation 123598 . 123599) (close-paren 123597 . 123598) (symbol 123586 . 123597) (open-paren 123585 . 123586) (symbol 123575 . 123584) (BOOL 123570 . 123574) (EXTERN 123563 . 123569) (punctuation 123561 . 123562) (close-paren 123560 . 123561) (VOID 123556 . 123560) (open-paren 123555 . 123556) (symbol 123540 . 123554) (VOID 123535 . 123539) (EXTERN 123518 . 123524) (punctuation 123516 . 123517) (close-paren 123515 . 123516) (symbol 123504 . 123515) (punctuation 123502 . 123503) (punctuation 123501 . 123502) (CHAR 123496 . 123500) (CONST 123490 . 123495) (open-paren 123489 . 123490) (symbol 123476 . 123488) (VOID 123471 . 123475) (EXTERN 123454 . 123460) (punctuation 123452 . 123453) (close-paren 123451 . 123452) (symbol 123440 . 123451) (punctuation 123434 . 123435) (symbol 123423 . 123434) (punctuation 123421 . 123422) (symbol 123410 . 123421) (punctuation 123408 . 123409) (symbol 123397 . 123408) (open-paren 123396 . 123397) (symbol 123387 . 123395) (VOID 123382 . 123386) (EXTERN 123365 . 123371) (punctuation 123363 . 123364) (close-paren 123362 . 123363) (symbol 123351 . 123362) (punctuation 123349 . 123350) (symbol 123338 . 123349) (punctuation 123336 . 123337) (symbol 123325 . 123336) (open-paren 123324 . 123325) (symbol 123315 . 123323) (VOID 123310 . 123314) (EXTERN 123293 . 123299) (punctuation 123291 . 123292) (close-paren 123290 . 123291) (symbol 123279 . 123290) (punctuation 123277 . 123278) (symbol 123266 . 123277) (open-paren 123265 . 123266) (symbol 123256 . 123264) (VOID 123251 . 123255) (EXTERN 123234 . 123240) (punctuation 123232 . 123233) (close-paren 123231 . 123232) (symbol 123220 . 123231) (open-paren 123219 . 123220) (symbol 123210 . 123218) (VOID 123205 . 123209) (EXTERN 123188 . 123194) (close-paren 123186 . 123187) (open-paren 123152 . 123153) (close-paren 123150 . 123151) (symbol 123146 . 123150) (symbol 123134 . 123145) (punctuation 123132 . 123133) (symbol 123120 . 123132) (symbol 123108 . 123119) (open-paren 123107 . 123108) (symbol 123099 . 123106) (VOID 123094 . 123098) (symbol 123077 . 123083) (punctuation 123075 . 123076) (close-paren 123074 . 123075) (VOID 123070 . 123074) (open-paren 123069 . 123070) (symbol 123064 . 123068) (symbol 123052 . 123063) (EXTERN 123045 . 123051) (punctuation 123043 . 123044) (close-paren 123042 . 123043) (punctuation 122985 . 122986) (punctuation 122959 . 122960) (symbol 122955 . 122959) (punctuation 122954 . 122955) (symbol 122942 . 122953) (punctuation 122940 . 122941) (symbol 122935 . 122940) (symbol 122925 . 122934) (open-paren 122924 . 122925) (symbol 122905 . 122923) (symbol 122893 . 122904) (EXTERN 122886 . 122892) (punctuation 122884 . 122885) (close-paren 122883 . 122884) (symbol 122872 . 122883) (punctuation 122870 . 122871) (symbol 122859 . 122870) (punctuation 122857 . 122858) (symbol 122846 . 122857) (open-paren 122845 . 122846) (symbol 122824 . 122844) (VOID 122819 . 122823) (EXTERN 122812 . 122818) (punctuation 122810 . 122811) (close-paren 122809 . 122810) (symbol 122798 . 122809) (open-paren 122797 . 122798) (symbol 122788 . 122796) (VOID 122783 . 122787) (EXTERN 122776 . 122782) (close-paren 122396 . 122397) (semantic-list 122388 . 122393) (RETURN 122350 . 122356) (open-paren 122346 . 122347) (close-paren 122344 . 122345) (symbol 122341 . 122344) (punctuation 122340 . 122341) (CHAR 122335 . 122339) (CONST 122329 . 122334) (open-paren 122328 . 122329) (symbol 122312 . 122327) (symbol 122300 . 122311) (symbol 122293 . 122299) (close-paren 122290 . 122291) (semantic-list 122282 . 122287) (RETURN 122253 . 122259) (open-paren 122249 . 122250) (close-paren 122247 . 122248) (symbol 122244 . 122247) (punctuation 122243 . 122244) (CHAR 122238 . 122242) (CONST 122232 . 122237) (open-paren 122231 . 122232) (symbol 122224 . 122230) (symbol 122212 . 122223) (symbol 122205 . 122211) (punctuation 122202 . 122203) (close-paren 122201 . 122202) (VOID 122197 . 122201) (open-paren 122196 . 122197) (symbol 122182 . 122195) (VOID 122177 . 122181) (EXTERN 122170 . 122176) (punctuation 122168 . 122169) (close-paren 122167 . 122168) (VOID 122163 . 122167) (open-paren 122162 . 122163) (symbol 122151 . 122161) (VOID 122146 . 122150) (EXTERN 122139 . 122145) (punctuation 122137 . 122138) (close-paren 122136 . 122137) (VOID 122132 . 122136) (open-paren 122131 . 122132) (symbol 122118 . 122130) (VOID 122113 . 122117) (EXTERN 122106 . 122112) (punctuation 122104 . 122105) (close-paren 122103 . 122104) (symbol 122092 . 122103) (punctuation 122090 . 122091) (punctuation 122089 . 122090) (CHAR 122084 . 122088) (CONST 122078 . 122083) (open-paren 122077 . 122078) (symbol 122065 . 122076) (VOID 122060 . 122064) (EXTERN 122053 . 122059) (punctuation 122051 . 122052) (close-paren 122050 . 122051) (symbol 122039 . 122050) (punctuation 122012 . 122013) (semantic-list 121986 . 122012) (semantic-list 121982 . 121985) (VOID 121977 . 121981) (punctuation 121975 . 121976) (symbol 121964 . 121975) (open-paren 121963 . 121964) (symbol 121951 . 121962) (VOID 121946 . 121950) (EXTERN 121939 . 121945) (punctuation 121937 . 121938) (close-paren 121936 . 121937) (INT 121933 . 121936) (punctuation 121931 . 121932) (INT 121928 . 121931) (punctuation 121926 . 121927) (punctuation 121925 . 121926) (CONST 121919 . 121924) (CHAR 121914 . 121918) (open-paren 121913 . 121914) (symbol 121896 . 121912) (symbol 121884 . 121895) (EXTERN 121877 . 121883) (punctuation 121875 . 121876) (close-paren 121874 . 121875) (number 121872 . 121873) (punctuation 121870 . 121871) (symbol 121850 . 121869) (open-paren 121848 . 121849) (ENUM 121843 . 121847) (punctuation 121841 . 121842) (close-paren 121840 . 121841) (BOOL 121836 . 121840) (punctuation 121834 . 121835) (symbol 121823 . 121834) (punctuation 121821 . 121822) (punctuation 121820 . 121821) (symbol 121808 . 121819) (punctuation 121788 . 121789) (symbol 121777 . 121788) (punctuation 121775 . 121776) (symbol 121764 . 121775) (punctuation 121762 . 121763) (symbol 121751 . 121762) (open-paren 121750 . 121751) (symbol 121744 . 121749) (INT 121740 . 121743) (EXTERN 121733 . 121739) (close-paren 121731 . 121732) (semantic-list 121661 . 121674) (IF 121658 . 121660) (open-paren 121654 . 121655) (close-paren 121652 . 121653) (symbol 121651 . 121652) (symbol 121639 . 121650) (open-paren 121638 . 121639) (symbol 121622 . 121637) (VOID 121617 . 121621) (symbol 121610 . 121616) (punctuation 121608 . 121609) (close-paren 121607 . 121608) (symbol 121598 . 121607) (punctuation 121596 . 121597) (symbol 121587 . 121596) (punctuation 121585 . 121586) (punctuation 121584 . 121585) (CHAR 121579 . 121583) (CONST 121573 . 121578) (punctuation 121571 . 121572) (symbol 121560 . 121571) (open-paren 121559 . 121560) (symbol 121550 . 121558) (symbol 121538 . 121549) (EXTERN 121531 . 121537) (punctuation 121529 . 121530) (close-paren 121528 . 121529) (symbol 121517 . 121528) (punctuation 121515 . 121516) (symbol 121504 . 121515) (open-paren 121503 . 121504) (symbol 121491 . 121502) (VOID 121486 . 121490) (EXTERN 121479 . 121485) (punctuation 121477 . 121478) (close-paren 121476 . 121477) (symbol 121465 . 121476) (punctuation 121463 . 121464) (symbol 121452 . 121463) (punctuation 121450 . 121451) (symbol 121439 . 121450) (open-paren 121438 . 121439) (symbol 121424 . 121437) (symbol 121412 . 121423) (EXTERN 121405 . 121411) (punctuation 121403 . 121404) (close-paren 121402 . 121403) (symbol 121393 . 121402) (punctuation 121391 . 121392) (punctuation 121390 . 121391) (CHAR 121385 . 121389) (CONST 121379 . 121384) (open-paren 121378 . 121379) (symbol 121360 . 121377) (symbol 121348 . 121359) (EXTERN 121341 . 121347) (punctuation 121339 . 121340) (close-paren 121338 . 121339) (symbol 121329 . 121338) (punctuation 121327 . 121328) (punctuation 121326 . 121327) (CHAR 121321 . 121325) (CONST 121315 . 121320) (open-paren 121314 . 121315) (symbol 121305 . 121313) (symbol 121293 . 121304) (EXTERN 121286 . 121292) (punctuation 121284 . 121285) (close-paren 121283 . 121284) (symbol 121272 . 121283) (open-paren 121271 . 121272) (symbol 121257 . 121270) (symbol 121245 . 121256) (EXTERN 121238 . 121244) (punctuation 121208 . 121209) (close-paren 121207 . 121208) (number 121206 . 121207) (punctuation 121204 . 121205) (number 121203 . 121204) (open-paren 121202 . 121203) (symbol 121178 . 121201) (close-paren 121174 . 121175) (symbol 121167 . 121174) (punctuation 121165 . 121166) (punctuation 121164 . 121165) (CONST 121158 . 121163) (CHAR 121153 . 121157) (punctuation 121144 . 121145) (symbol 121135 . 121144) (punctuation 121133 . 121134) (punctuation 121132 . 121133) (CONST 121126 . 121131) (CHAR 121121 . 121125) (punctuation 121119 . 121120) (punctuation 121118 . 121119) (symbol 121108 . 121117) (punctuation 121106 . 121107) (punctuation 121105 . 121106) (punctuation 121104 . 121105) (CHAR 121099 . 121103) (open-paren 121098 . 121099) (symbol 121088 . 121097) (symbol 121078 . 121087) (EXTERN 121071 . 121077) (punctuation 121069 . 121070) (close-paren 121068 . 121069) (number 121067 . 121068) (punctuation 121065 . 121066) (number 121064 . 121065) (open-paren 121063 . 121064) (symbol 121039 . 121062) (close-paren 121035 . 121036) (punctuation 121034 . 121035) (punctuation 121033 . 121034) (punctuation 121032 . 121033) (punctuation 121030 . 121031) (punctuation 121029 . 121030) (CONST 121023 . 121028) (CHAR 121018 . 121022) (punctuation 121010 . 121011) (symbol 121001 . 121010) (punctuation 120999 . 121000) (punctuation 120998 . 120999) (CONST 120992 . 120997) (CHAR 120987 . 120991) (punctuation 120985 . 120986) (punctuation 120984 . 120985) (symbol 120974 . 120983) (punctuation 120972 . 120973) (punctuation 120971 . 120972) (punctuation 120970 . 120971) (CHAR 120965 . 120969) (open-paren 120964 . 120965) (symbol 120955 . 120963) (symbol 120945 . 120954) (EXTERN 120938 . 120944) (punctuation 120936 . 120937) (close-paren 120935 . 120936) (number 120934 . 120935) (punctuation 120932 . 120933) (number 120931 . 120932) (open-paren 120930 . 120931) (symbol 120906 . 120929) (close-paren 120902 . 120903) (punctuation 120901 . 120902) (punctuation 120900 . 120901) (punctuation 120899 . 120900) (punctuation 120897 . 120898) (punctuation 120896 . 120897) (CONST 120890 . 120895) (CHAR 120885 . 120889) (punctuation 120883 . 120884) (punctuation 120882 . 120883) (CHAR 120877 . 120881) (open-paren 120876 . 120877) (symbol 120867 . 120875) (symbol 120857 . 120866) (EXTERN 120850 . 120856) (punctuation 120848 . 120849) (close-paren 120847 . 120848) (symbol 120840 . 120847) (punctuation 120834 . 120835) (punctuation 120833 . 120834) (CHAR 120828 . 120832) (CONST 120822 . 120827) (punctuation 120820 . 120821) (punctuation 120819 . 120820) (CHAR 120814 . 120818) (CONST 120808 . 120813) (punctuation 120806 . 120807) (symbol 120797 . 120806) (punctuation 120795 . 120796) (punctuation 120794 . 120795) (CHAR 120789 . 120793) (open-paren 120788 . 120789) (symbol 120781 . 120787) (symbol 120771 . 120780) (EXTERN 120764 . 120770) (punctuation 120733 . 120734) (close-paren 120732 . 120733) (VOID 120728 . 120732) (open-paren 120727 . 120728) (symbol 120713 . 120726) (VOID 120708 . 120712) (EXTERN 120701 . 120707) (punctuation 120699 . 120700) (close-paren 120698 . 120699) (VOID 120694 . 120698) (open-paren 120693 . 120694) (symbol 120677 . 120692) (VOID 120672 . 120676) (EXTERN 120665 . 120671) (punctuation 120663 . 120664) (close-paren 120662 . 120663) (DOUBLE 120656 . 120662) (punctuation 120654 . 120655) (punctuation 120653 . 120654) (CHAR 120648 . 120652) (open-paren 120647 . 120648) (symbol 120631 . 120646) (INT 120627 . 120630) (EXTERN 120620 . 120626) (punctuation 120582 . 120583) (close-paren 120581 . 120582) (symbol 120570 . 120581) (punctuation 120568 . 120569) (punctuation 120552 . 120553) (punctuation 120537 . 120538) (punctuation 120536 . 120537) (CHAR 120531 . 120535) (CONST 120525 . 120530) (open-paren 120524 . 120525) (symbol 120480 . 120515) (symbol 120468 . 120479) (EXTERN 120461 . 120467) (punctuation 120459 . 120460) (close-paren 120458 . 120459) (symbol 120447 . 120458) (punctuation 120440 . 120441) (punctuation 120439 . 120440) (CHAR 120434 . 120438) (CONST 120428 . 120433) (punctuation 120426 . 120427) (symbol 120415 . 120426) (punctuation 120413 . 120414) (symbol 120402 . 120413) (open-paren 120401 . 120402) (symbol 120381 . 120400) (VOID 120376 . 120380) (EXTERN 120369 . 120375) (punctuation 120343 . 120344) (close-paren 120342 . 120343) (punctuation 120341 . 120342) (CHAR 120336 . 120340) (CONST 120330 . 120335) (open-paren 120329 . 120330) (symbol 120304 . 120328) (VOID 120299 . 120303) (EXTERN 120292 . 120298) (close-paren 120270 . 120271) (symbol 120259 . 120270) (open-paren 120258 . 120259) (symbol 120246 . 120257) (VOID 120241 . 120245) (EXTERN 120234 . 120240) (punctuation 120160 . 120161) (close-paren 120159 . 120160) (VOID 120155 . 120159) (open-paren 120154 . 120155) (symbol 120138 . 120153) (VOID 120133 . 120137) (EXTERN 120126 . 120132) (punctuation 120124 . 120125) (close-paren 120123 . 120124) (symbol 120112 . 120123) (open-paren 120111 . 120112) (symbol 120097 . 120110) (symbol 120085 . 120096) (EXTERN 120078 . 120084) (punctuation 120076 . 120077) (close-paren 120075 . 120076) (UNSIGNED 120067 . 120075) (punctuation 120065 . 120066) (UNSIGNED 120057 . 120065) (punctuation 120050 . 120051) (punctuation 120049 . 120050) (symbol 120041 . 120048) (STRUCT 120034 . 120040) (punctuation 120032 . 120033) (symbol 120021 . 120032) (punctuation 120014 . 120015) (symbol 120003 . 120014) (punctuation 120001 . 120002) (symbol 119990 . 120001) (punctuation 119983 . 119984) (semantic-list 119957 . 119983) (semantic-list 119943 . 119956) (VOID 119938 . 119942) (open-paren 119937 . 119938) (symbol 119910 . 119936) (VOID 119905 . 119909) (EXTERN 119898 . 119904) (punctuation 119896 . 119897) (close-paren 119895 . 119896) (symbol 119884 . 119895) (punctuation 119882 . 119883) (symbol 119871 . 119882) (punctuation 119869 . 119870) (symbol 119858 . 119869) (punctuation 119828 . 119829) (semantic-list 119761 . 119828) (semantic-list 119757 . 119760) (VOID 119752 . 119756) (open-paren 119751 . 119752) (symbol 119736 . 119750) (VOID 119731 . 119735) (EXTERN 119724 . 119730) (punctuation 119722 . 119723) (close-paren 119721 . 119722) (symbol 119710 . 119721) (punctuation 119708 . 119709) (INT 119705 . 119708) (punctuation 119703 . 119704) (INT 119700 . 119703) (punctuation 119698 . 119699) (symbol 119687 . 119698) (open-paren 119686 . 119687) (symbol 119665 . 119685) (VOID 119660 . 119664) (EXTERN 119653 . 119659) (punctuation 119651 . 119652) (close-paren 119650 . 119651) (punctuation 119649 . 119650) (INT 119645 . 119648) (punctuation 119643 . 119644) (punctuation 119642 . 119643) (INT 119638 . 119641) (punctuation 119591 . 119592) (INT 119588 . 119591) (punctuation 119586 . 119587) (symbol 119575 . 119586) (open-paren 119574 . 119575) (symbol 119549 . 119573) (symbol 119537 . 119548) (EXTERN 119530 . 119536) (punctuation 119528 . 119529) (close-paren 119527 . 119528) (symbol 119516 . 119527) (open-paren 119515 . 119516) (symbol 119499 . 119514) (symbol 119487 . 119498) (EXTERN 119480 . 119486) (punctuation 119114 . 119115) (close-paren 119113 . 119114) (VOID 119109 . 119113) (open-paren 119108 . 119109) (symbol 119087 . 119107) (VOID 119082 . 119086) (EXTERN 119075 . 119081) (punctuation 119066 . 119067) (close-paren 119065 . 119066) (semantic-list 119062 . 119065) (open-paren 119061 . 119062) (symbol 119039 . 119060) (close-paren 119037 . 119038) (symbol 119031 . 119037) (punctuation 119029 . 119030) (symbol 119023 . 119029) (open-paren 119022 . 119023) (symbol 119008 . 119021) (punctuation 119007 . 119008) (VOID 119002 . 119006) (EXTERN 118995 . 119001) (close-paren 118802 . 118803) (punctuation 118800 . 118801) (semantic-list 118798 . 118800) (semantic-list "((void) 0)" 118775 . 118797) (spp-arg-list nil 118775 . 118797) (open-paren 118773 . 118774) (close-paren 118771 . 118772) (VOID 118767 . 118771) (open-paren 118766 . 118767) (close-paren 118764 . 118765) (symbol 118749 . 118764) (open-paren 118748 . 118749) (VOID 118743 . 118747) (symbol 118736 . 118742) (punctuation 118666 . 118667) (close-paren 118665 . 118666) (symbol 118654 . 118665) (open-paren 118653 . 118654) (symbol 118633 . 118652) (INT 118629 . 118632) (EXTERN 118622 . 118628) (punctuation 118620 . 118621) (close-paren 118619 . 118620) (VOID 118615 . 118619) (open-paren 118614 . 118615) (symbol 118598 . 118613) (punctuation 118596 . 118597) (symbol 118589 . 118595) (STRUCT 118582 . 118588) (EXTERN 118575 . 118581) (punctuation 118573 . 118574) (close-paren 118572 . 118573) (VOID 118568 . 118572) (open-paren 118567 . 118568) (symbol 118553 . 118566) (VOID 118548 . 118552) (EXTERN 118541 . 118547) (punctuation 118539 . 118540) (close-paren 118538 . 118539) (VOID 118534 . 118538) (open-paren 118533 . 118534) (symbol 118522 . 118532) (VOID 118517 . 118521) (EXTERN 118510 . 118516) (punctuation 118508 . 118509) (close-paren 118507 . 118508) (VOID 118503 . 118507) (open-paren 118502 . 118503) (symbol 118486 . 118501) (VOID 118481 . 118485) (EXTERN 118474 . 118480) (punctuation 118472 . 118473) (close-paren 118471 . 118472) (punctuation 118470 . 118471) (symbol 118460 . 118469) (STRUCT 118453 . 118459) (open-paren 118452 . 118453) (symbol 118442 . 118451) (VOID 118437 . 118441) (EXTERN 118430 . 118436) (punctuation 118428 . 118429) (close-paren 118427 . 118428) (symbol 118416 . 118427) (punctuation 118414 . 118415) (symbol 118403 . 118414) (punctuation 118401 . 118402) (symbol 118390 . 118401) (open-paren 118389 . 118390) (symbol 118375 . 118388) (symbol 118363 . 118374) (EXTERN 118356 . 118362) (punctuation 118354 . 118355) (close-paren 118353 . 118354) (VOID 118349 . 118353) (open-paren 118348 . 118349) (symbol 118321 . 118347) (symbol 118311 . 118320) (EXTERN 118304 . 118310) (punctuation 118302 . 118303) (close-paren 118301 . 118302) (VOID 118297 . 118301) (open-paren 118296 . 118297) (symbol 118273 . 118295) (VOID 118268 . 118272) (EXTERN 118261 . 118267) (punctuation 118259 . 118260) (close-paren 118258 . 118259) (DOUBLE 118252 . 118258) (open-paren 118251 . 118252) (symbol 118240 . 118250) (symbol 118228 . 118239) (EXTERN 118221 . 118227) (punctuation 117509 . 117510) (close-paren 117508 . 117509) (symbol 117499 . 117508) (ENUM 117494 . 117498) (punctuation 117484 . 117485) (INT 117481 . 117484) (punctuation 117479 . 117480) (INT 117476 . 117479) (punctuation 117474 . 117475) (INT 117471 . 117474) (open-paren 117470 . 117471) (symbol 117448 . 117469) (punctuation 117447 . 117448) (symbol 117435 . 117446) (STRUCT 117428 . 117434) (EXTERN 117421 . 117427) (close-paren 117418 . 117419) (RETURN 117408 . 117414) (punctuation 117384 . 117385) (punctuation 117383 . 117384) (semantic-list 117380 . 117383) (symbol 117364 . 117379) (punctuation 117346 . 117347) (punctuation 117345 . 117346) (semantic-list 117342 . 117345) (symbol 117326 . 117341) (punctuation 117322 . 117323) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 117297 . 117300) ("v" symbol "XVECTOR" 117289 . 117296)))) 117275 . 117322) (open-paren 117165 . 117166) (close-paren 117163 . 117164) (symbol 117155 . 117163) (INT 117151 . 117154) (punctuation 117149 . 117150) (symbol 117144 . 117149) (INT 117140 . 117143) (open-paren 117139 . 117140) (symbol 117112 . 117138) (symbol 117100 . 117111) (symbol 117093 . 117099) (close-paren 117037 . 117038) (RETURN 117027 . 117033) (punctuation 117023 . 117024) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 117021 . 117022) ("a" symbol "v" 117018 . 117019)))) 117006 . 117023) (open-paren 116929 . 116930) (close-paren 116927 . 116928) (symbol 116923 . 116927) (symbol 116913 . 116922) (open-paren 116912 . 116913) (symbol 116893 . 116911) (symbol 116881 . 116892) (symbol 116874 . 116880) (punctuation 116562 . 116563) (close-paren 116561 . 116562) (symbol 116552 . 116561) (open-paren 116551 . 116552) (symbol 116535 . 116550) (punctuation 116534 . 116535) (symbol 116522 . 116533) (STRUCT 116515 . 116521) (EXTERN 116508 . 116514) (punctuation 116506 . 116507) (close-paren 116505 . 116506) (punctuation 116504 . 116505) (symbol 116492 . 116503) (STRUCT 116485 . 116491) (open-paren 116484 . 116485) (symbol 116469 . 116483) (VOID 116464 . 116468) (EXTERN 116457 . 116463) (punctuation 116455 . 116456) (close-paren 116454 . 116455) (symbol 116443 . 116454) (punctuation 116441 . 116442) (symbol 116430 . 116441) (open-paren 116429 . 116430) (symbol 116419 . 116428) (symbol 116407 . 116418) (EXTERN 116400 . 116406) (close-paren 116397 . 116398) (semantic-list 116389 . 116394) (RETURN 116357 . 116363) (open-paren 116353 . 116354) (close-paren 116351 . 116352) (symbol 116348 . 116351) (punctuation 116347 . 116348) (CHAR 116342 . 116346) (CONST 116336 . 116341) (open-paren 116335 . 116336) (symbol 116322 . 116334) (symbol 116310 . 116321) (symbol 116303 . 116309) (close-paren 116206 . 116207) (semantic-list 116198 . 116203) (RETURN 116159 . 116165) (open-paren 116155 . 116156) (close-paren 116153 . 116154) (symbol 116150 . 116153) (punctuation 116149 . 116150) (CHAR 116144 . 116148) (CONST 116138 . 116143) (open-paren 116137 . 116138) (symbol 116117 . 116136) (symbol 116105 . 116116) (symbol 116098 . 116104) (punctuation 116024 . 116025) (close-paren 116023 . 116024) (symbol 116014 . 116023) (punctuation 116012 . 116013) (punctuation 116011 . 116012) (CHAR 116006 . 116010) (CONST 116000 . 116005) (open-paren 115999 . 116000) (symbol 115980 . 115998) (symbol 115968 . 115979) (EXTERN 115961 . 115967) (punctuation 115959 . 115960) (close-paren 115958 . 115959) (BOOL 115954 . 115958) (punctuation 115952 . 115953) (symbol 115943 . 115952) (punctuation 115941 . 115942) (symbol 115932 . 115941) (punctuation 115930 . 115931) (punctuation 115929 . 115930) (CHAR 115924 . 115928) (CONST 115918 . 115923) (open-paren 115917 . 115918) (symbol 115900 . 115916) (symbol 115888 . 115899) (EXTERN 115881 . 115887) (punctuation 115879 . 115880) (close-paren 115878 . 115879) (BOOL 115874 . 115878) (punctuation 115872 . 115873) (symbol 115863 . 115872) (punctuation 115861 . 115862) (symbol 115852 . 115861) (punctuation 115843 . 115844) (punctuation 115842 . 115843) (CHAR 115837 . 115841) (CONST 115831 . 115836) (open-paren 115830 . 115831) (symbol 115808 . 115829) (symbol 115796 . 115807) (EXTERN 115789 . 115795) (punctuation 115787 . 115788) (close-paren 115786 . 115787) (symbol 115777 . 115786) (punctuation 115775 . 115776) (symbol 115766 . 115775) (punctuation 115764 . 115765) (punctuation 115763 . 115764) (CHAR 115758 . 115762) (CONST 115752 . 115757) (open-paren 115751 . 115752) (symbol 115728 . 115750) (symbol 115716 . 115727) (EXTERN 115709 . 115715) (punctuation 115707 . 115708) (close-paren 115706 . 115707) (symbol 115697 . 115706) (punctuation 115695 . 115696) (symbol 115686 . 115695) (open-paren 115685 . 115686) (symbol 115656 . 115684) (symbol 115644 . 115655) (EXTERN 115637 . 115643) (punctuation 115635 . 115636) (close-paren 115634 . 115635) (symbol 115625 . 115634) (open-paren 115624 . 115625) (symbol 115605 . 115623) (symbol 115593 . 115604) (EXTERN 115586 . 115592) (punctuation 115584 . 115585) (close-paren 115583 . 115584) (punctuation 115582 . 115583) (symbol 115570 . 115581) (punctuation 115568 . 115569) (symbol 115559 . 115568) (open-paren 115558 . 115559) (symbol 115541 . 115557) (symbol 115529 . 115540) (EXTERN 115522 . 115528) (punctuation 115520 . 115521) (close-paren 115519 . 115520) (symbol 115510 . 115519) (punctuation 115508 . 115509) (symbol 115499 . 115508) (punctuation 115497 . 115498) (punctuation 115496 . 115497) (CHAR 115491 . 115495) (CONST 115485 . 115490) (open-paren 115484 . 115485) (symbol 115462 . 115483) (symbol 115450 . 115461) (EXTERN 115443 . 115449) (close-paren 115440 . 115441) (semantic-list 115432 . 115437) (RETURN 115392 . 115398) (open-paren 115388 . 115389) (close-paren 115386 . 115387) (symbol 115383 . 115386) (punctuation 115382 . 115383) (CHAR 115377 . 115381) (CONST 115371 . 115376) (open-paren 115370 . 115371) (symbol 115349 . 115369) (symbol 115337 . 115348) (symbol 115330 . 115336) (punctuation 115256 . 115257) (close-paren 115255 . 115256) (symbol 115246 . 115255) (punctuation 115244 . 115245) (punctuation 115243 . 115244) (CHAR 115238 . 115242) (CONST 115232 . 115237) (open-paren 115231 . 115232) (symbol 115211 . 115230) (symbol 115199 . 115210) (EXTERN 115192 . 115198) (punctuation 115190 . 115191) (close-paren 115189 . 115190) (number 115188 . 115189) (punctuation 115186 . 115187) (number 115185 . 115186) (open-paren 115184 . 115185) (symbol 115160 . 115183) (close-paren 115156 . 115157) (punctuation 115155 . 115156) (punctuation 115154 . 115155) (punctuation 115153 . 115154) (punctuation 115151 . 115152) (punctuation 115150 . 115151) (CHAR 115145 . 115149) (CONST 115139 . 115144) (punctuation 115137 . 115138) (punctuation 115136 . 115137) (CHAR 115131 . 115135) (open-paren 115130 . 115131) (symbol 115108 . 115129) (symbol 115096 . 115107) (EXTERN 115089 . 115095) (punctuation 115087 . 115088) (close-paren 115086 . 115087) (symbol 115077 . 115086) (punctuation 115075 . 115076) (punctuation 115074 . 115075) (CHAR 115069 . 115073) (CONST 115063 . 115068) (open-paren 115062 . 115063) (symbol 115050 . 115061) (symbol 115038 . 115049) (EXTERN 115031 . 115037) (punctuation 115029 . 115030) (close-paren 115028 . 115029) (VOID 115024 . 115028) (open-paren 115023 . 115024) (symbol 115007 . 115022) (VOID 115002 . 115006) (EXTERN 114985 . 114991) (punctuation 114983 . 114984) (close-paren 114982 . 114983) (symbol 114971 . 114982) (punctuation 114969 . 114970) (symbol 114958 . 114969) (open-paren 114957 . 114958) (symbol 114940 . 114956) (symbol 114928 . 114939) (EXTERN 114921 . 114927) (punctuation 114919 . 114920) (close-paren 114918 . 114919) (symbol 114909 . 114918) (open-paren 114908 . 114909) (symbol 114884 . 114907) (symbol 114872 . 114883) (EXTERN 114865 . 114871) (close-paren 114862 . 114863) (semantic-list 114856 . 114859) (semantic-list 114839 . 114842) (semantic-list 114820 . 114823) (semantic-list 114803 . 114806) (RETURN 114777 . 114783) (open-paren 114773 . 114774) (close-paren 114771 . 114772) (symbol 114770 . 114771) (symbol 114760 . 114769) (punctuation 114758 . 114759) (symbol 114757 . 114758) (symbol 114747 . 114756) (punctuation 114745 . 114746) (symbol 114744 . 114745) (symbol 114734 . 114743) (punctuation 114732 . 114733) (symbol 114731 . 114732) (symbol 114721 . 114730) (open-paren 114720 . 114721) (symbol 114713 . 114719) (symbol 114701 . 114712) (symbol 114694 . 114700) (close-paren 114691 . 114692) (semantic-list 114685 . 114688) (semantic-list 114668 . 114671) (semantic-list 114651 . 114654) (RETURN 114625 . 114631) (open-paren 114621 . 114622) (close-paren 114619 . 114620) (symbol 114618 . 114619) (symbol 114608 . 114617) (punctuation 114606 . 114607) (symbol 114605 . 114606) (symbol 114595 . 114604) (punctuation 114593 . 114594) (symbol 114592 . 114593) (symbol 114582 . 114591) (open-paren 114581 . 114582) (symbol 114574 . 114580) (symbol 114562 . 114573) (symbol 114555 . 114561) (close-paren 114552 . 114553) (semantic-list 114546 . 114549) (semantic-list 114529 . 114532) (RETURN 114503 . 114509) (open-paren 114499 . 114500) (close-paren 114497 . 114498) (symbol 114496 . 114497) (symbol 114486 . 114495) (punctuation 114484 . 114485) (symbol 114483 . 114484) (symbol 114473 . 114482) (open-paren 114472 . 114473) (symbol 114465 . 114471) (symbol 114453 . 114464) (symbol 114446 . 114452) (punctuation 114390 . 114391) (close-paren 114389 . 114390) (punctuation 114388 . 114389) (punctuation 114387 . 114388) (punctuation 114386 . 114387) (punctuation 114384 . 114385) (symbol 114373 . 114384) (punctuation 114371 . 114372) (symbol 114362 . 114371) (punctuation 114360 . 114361) (symbol 114352 . 114360) (ENUM 114347 . 114351) (open-paren 114346 . 114347) (symbol 114340 . 114345) (symbol 114328 . 114339) (EXTERN 114321 . 114327) (punctuation 114319 . 114320) (close-paren 114318 . 114319) (symbol 114305 . 114318) (punctuation 114303 . 114304) (symbol 114290 . 114303) (open-paren 114289 . 114290) (symbol 114280 . 114288) (ENUM 114275 . 114279) (punctuation 114273 . 114274) (close-paren 114272 . 114273) (symbol 114261 . 114272) (punctuation 114254 . 114255) (symbol 114243 . 114254) (punctuation 114241 . 114242) (symbol 114230 . 114241) (punctuation 114228 . 114229) (symbol 114217 . 114228) (punctuation 114215 . 114216) (symbol 114204 . 114215) (open-paren 114203 . 114204) (symbol 114197 . 114202) (symbol 114185 . 114196) (EXTERN 114178 . 114184) (punctuation 114176 . 114177) (close-paren 114175 . 114176) (symbol 114164 . 114175) (punctuation 114162 . 114163) (symbol 114151 . 114162) (punctuation 114149 . 114150) (symbol 114138 . 114149) (punctuation 114136 . 114137) (symbol 114125 . 114136) (open-paren 114124 . 114125) (symbol 114118 . 114123) (symbol 114106 . 114117) (EXTERN 114099 . 114105) (punctuation 114097 . 114098) (close-paren 114096 . 114097) (symbol 114085 . 114096) (punctuation 114083 . 114084) (symbol 114072 . 114083) (punctuation 114070 . 114071) (symbol 114059 . 114070) (open-paren 114058 . 114059) (symbol 114052 . 114057) (symbol 114040 . 114051) (EXTERN 114033 . 114039) (punctuation 114031 . 114032) (close-paren 114030 . 114031) (symbol 114019 . 114030) (punctuation 114017 . 114018) (symbol 114006 . 114017) (open-paren 114005 . 114006) (symbol 113999 . 114004) (symbol 113987 . 113998) (EXTERN 113980 . 113986) (punctuation 113978 . 113979) (close-paren 113977 . 113978) (symbol 113966 . 113977) (open-paren 113965 . 113966) (symbol 113959 . 113964) (symbol 113947 . 113958) (EXTERN 113940 . 113946) (punctuation 113743 . 113744) (close-paren 113742 . 113743) (symbol 113739 . 113742) (punctuation 113738 . 113739) (VOID 113733 . 113737) (punctuation 113731 . 113732) (semantic-list 113720 . 113731) (semantic-list 113712 . 113719) (VOID 113707 . 113711) (open-paren 113706 . 113707) (symbol 113684 . 113705) (VOID 113679 . 113683) (EXTERN 113672 . 113678) (punctuation 113670 . 113671) (close-paren 113669 . 113670) (punctuation 113668 . 113669) (CHAR 113663 . 113667) (punctuation 113661 . 113662) (punctuation 113660 . 113661) (CHAR 113655 . 113659) (open-paren 113654 . 113655) (symbol 113643 . 113653) (VOID 113638 . 113642) (EXTERN 113631 . 113637) (punctuation 113629 . 113630) (close-paren 113628 . 113629) (symbol 113619 . 113628) (punctuation 113617 . 113618) (punctuation 113616 . 113617) (symbol 113604 . 113615) (open-paren 113603 . 113604) (symbol 113584 . 113602) (VOID 113579 . 113583) (EXTERN 113572 . 113578) (punctuation 113570 . 113571) (close-paren 113569 . 113570) (VOID 113565 . 113569) (open-paren 113564 . 113565) (symbol 113546 . 113563) (VOID 113541 . 113545) (EXTERN 113534 . 113540) (punctuation 113532 . 113533) (close-paren 113531 . 113532) (VOID 113527 . 113531) (open-paren 113526 . 113527) (symbol 113509 . 113525) (VOID 113504 . 113508) (EXTERN 113497 . 113503) (punctuation 113372 . 113373) (close-paren 113371 . 113372) (symbol 113360 . 113371) (open-paren 113359 . 113360) (symbol 113347 . 113358) (VOID 113342 . 113346) (EXTERN 113335 . 113341) (punctuation 113333 . 113334) (close-paren 113332 . 113333) (symbol 113321 . 113332) (open-paren 113320 . 113321) (symbol 113306 . 113319) (BOOL 113301 . 113305) (EXTERN 113294 . 113300) (punctuation 113292 . 113293) (close-paren 113291 . 113292) (symbol 113282 . 113291) (open-paren 113281 . 113282) (symbol 113262 . 113280) (VOID 113257 . 113261) (EXTERN 113240 . 113246) (punctuation 113238 . 113239) (close-paren 113237 . 113238) (symbol 113231 . 113237) (open-paren 113230 . 113231) (symbol 113218 . 113229) (VOID 113213 . 113217) (EXTERN 113196 . 113202) (punctuation 113194 . 113195) (close-paren 113193 . 113194) (punctuation 113192 . 113193) (CHAR 113187 . 113191) (CONST 113181 . 113186) (open-paren 113180 . 113181) (symbol 113165 . 113179) (VOID 113160 . 113164) (EXTERN 113153 . 113159) (punctuation 113151 . 113152) (close-paren 113150 . 113151) (symbol 113141 . 113150) (punctuation 113139 . 113140) (symbol 113130 . 113139) (punctuation 113128 . 113129) (punctuation 113127 . 113128) (symbol 113115 . 113126) (STRUCT 113108 . 113114) (open-paren 113107 . 113108) (symbol 113086 . 113106) (VOID 113081 . 113085) (EXTERN 113074 . 113080) (punctuation 113072 . 113073) (close-paren 113071 . 113072) (VOID 113067 . 113071) (open-paren 113066 . 113067) (symbol 113050 . 113065) (VOID 113045 . 113049) (EXTERN 113038 . 113044) (punctuation 113036 . 113037) (close-paren 113035 . 113036) (VOID 113031 . 113035) (open-paren 113030 . 113031) (symbol 113016 . 113029) (punctuation 113015 . 113016) (VOID 113010 . 113014) (EXTERN 113003 . 113009) (punctuation 112973 . 112974) (close-paren 112972 . 112973) (punctuation 112971 . 112972) (symbol 112961 . 112970) (punctuation 112959 . 112960) (punctuation 112958 . 112959) (symbol 112948 . 112957) (punctuation 112938 . 112939) (symbol 112929 . 112938) (punctuation 112927 . 112928) (punctuation 112926 . 112927) (CHAR 112921 . 112925) (UNSIGNED 112912 . 112920) (CONST 112906 . 112911) (open-paren 112905 . 112906) (symbol 112882 . 112904) (VOID 112877 . 112881) (EXTERN 112870 . 112876) (punctuation 112836 . 112837) (close-paren 112835 . 112836) (semantic-list 112821 . 112835) (semantic-list 112810 . 112820) (VOID 112805 . 112809) (punctuation 112803 . 112804) (punctuation 112802 . 112803) (VOID 112797 . 112801) (open-paren 112796 . 112797) (symbol 112780 . 112795) (VOID 112775 . 112779) (EXTERN 112768 . 112774) (punctuation 112735 . 112736) (close-paren 112734 . 112735) (VOID 112730 . 112734) (open-paren 112729 . 112730) (symbol 112711 . 112728) (VOID 112706 . 112710) (EXTERN 112699 . 112705) (punctuation 112665 . 112666) (close-paren 112664 . 112665) (punctuation 112663 . 112664) (INT 112659 . 112662) (punctuation 112657 . 112658) (punctuation 112656 . 112657) (INT 112652 . 112655) (punctuation 112650 . 112651) (punctuation 112649 . 112650) (INT 112645 . 112648) (punctuation 112643 . 112644) (punctuation 112642 . 112643) (INT 112638 . 112641) (punctuation 112636 . 112637) (punctuation 112635 . 112636) (INT 112631 . 112634) (punctuation 112623 . 112624) (punctuation 112622 . 112623) (INT 112618 . 112621) (punctuation 112616 . 112617) (symbol 112607 . 112616) (punctuation 112605 . 112606) (punctuation 112604 . 112605) (symbol 112597 . 112603) (STRUCT 112590 . 112596) (open-paren 112589 . 112590) (symbol 112575 . 112588) (BOOL 112570 . 112574) (EXTERN 112563 . 112569) (punctuation 112561 . 112562) (close-paren 112560 . 112561) (symbol 112549 . 112560) (open-paren 112548 . 112549) (symbol 112538 . 112547) (symbol 112526 . 112537) (EXTERN 112519 . 112525) (punctuation 112517 . 112518) (close-paren 112516 . 112517) (VOID 112512 . 112516) (open-paren 112511 . 112512) (symbol 112500 . 112510) (VOID 112495 . 112499) (EXTERN 112488 . 112494) (punctuation 112486 . 112487) (close-paren 112485 . 112486) (VOID 112481 . 112485) (open-paren 112480 . 112481) (symbol 112466 . 112479) (VOID 112461 . 112465) (EXTERN 112454 . 112460) (punctuation 112452 . 112453) (close-paren 112451 . 112452) (symbol 112440 . 112451) (punctuation 112438 . 112439) (punctuation 112437 . 112438) (symbol 112431 . 112436) (STRUCT 112424 . 112430) (open-paren 112423 . 112424) (symbol 112400 . 112422) (VOID 112395 . 112399) (punctuation 112392 . 112393) (close-paren 112391 . 112392) (VOID 112387 . 112391) (open-paren 112386 . 112387) (symbol 112376 . 112385) (VOID 112371 . 112375) (EXTERN 112364 . 112370) (punctuation 112362 . 112363) (close-paren 112361 . 112362) (symbol 112352 . 112361) (open-paren 112351 . 112352) (symbol 112332 . 112350) (VOID 112327 . 112331) (EXTERN 112320 . 112326) (punctuation 112318 . 112319) (close-paren 112317 . 112318) (VOID 112313 . 112317) (open-paren 112312 . 112313) (symbol 112295 . 112311) (VOID 112290 . 112294) (EXTERN 112283 . 112289) (punctuation 112281 . 112282) (close-paren 112280 . 112281) (VOID 112276 . 112280) (open-paren 112275 . 112276) (symbol 112249 . 112274) (VOID 112244 . 112248) (EXTERN 112237 . 112243) (punctuation 112235 . 112236) (close-paren 112234 . 112235) (BOOL 112230 . 112234) (punctuation 112228 . 112229) (symbol 112217 . 112228) (punctuation 112215 . 112216) (punctuation 112214 . 112215) (CHAR 112209 . 112213) (CONST 112203 . 112208) (open-paren 112202 . 112203) (symbol 112182 . 112201) (VOID 112177 . 112181) (EXTERN 112170 . 112176) (punctuation 112168 . 112169) (close-paren 112167 . 112168) (BOOL 112163 . 112167) (punctuation 112161 . 112162) (BOOL 112157 . 112161) (punctuation 112155 . 112156) (symbol 112146 . 112155) (punctuation 112144 . 112145) (punctuation 112143 . 112144) (CHAR 112138 . 112142) (CONST 112132 . 112137) (open-paren 112131 . 112132) (symbol 112117 . 112130) (VOID 112112 . 112116) (EXTERN 112105 . 112111) (punctuation 112103 . 112104) (close-paren 112102 . 112103) (symbol 112091 . 112102) (open-paren 112090 . 112091) (symbol 112075 . 112089) (VOID 112070 . 112074) (EXTERN 112063 . 112069) (punctuation 112061 . 112062) (close-paren 112060 . 112061) (symbol 112049 . 112060) (open-paren 112048 . 112049) (symbol 112039 . 112047) (VOID 112034 . 112038) (EXTERN 112027 . 112033) (punctuation 112025 . 112026) (close-paren 112024 . 112025) (punctuation 112023 . 112024) (CHAR 112018 . 112022) (CONST 112012 . 112017) (open-paren 112011 . 112012) (symbol 111996 . 112010) (VOID 111991 . 111995) (EXTERN 111984 . 111990) (punctuation 111982 . 111983) (close-paren 111981 . 111982) (punctuation 111980 . 111981) (CHAR 111975 . 111979) (CONST 111969 . 111974) (open-paren 111968 . 111969) (symbol 111959 . 111967) (VOID 111954 . 111958) (EXTERN 111947 . 111953) (punctuation 111945 . 111946) (close-paren 111944 . 111945) (number 111943 . 111944) (punctuation 111941 . 111942) (number 111940 . 111941) (open-paren 111939 . 111940) (symbol 111915 . 111938) (close-paren 111913 . 111914) (punctuation 111912 . 111913) (punctuation 111911 . 111912) (punctuation 111910 . 111911) (punctuation 111908 . 111909) (punctuation 111907 . 111908) (CHAR 111902 . 111906) (CONST 111896 . 111901) (open-paren 111895 . 111896) (symbol 111887 . 111894) (VOID 111882 . 111886) (EXTERN 111875 . 111881) (punctuation 111873 . 111874) (close-paren 111872 . 111873) (BOOL 111868 . 111872) (punctuation 111866 . 111867) (BOOL 111862 . 111866) (open-paren 111861 . 111862) (symbol 111847 . 111860) (VOID 111842 . 111846) (EXTERN 111835 . 111841) (punctuation 111833 . 111834) (close-paren 111832 . 111833) (VOID 111828 . 111832) (open-paren 111827 . 111828) (symbol 111811 . 111826) (symbol 111799 . 111810) (EXTERN 111792 . 111798) (punctuation 111790 . 111791) (close-paren 111789 . 111790) (VOID 111785 . 111789) (open-paren 111784 . 111785) (symbol 111768 . 111783) (VOID 111763 . 111767) (EXTERN 111756 . 111762) (punctuation 111754 . 111755) (close-paren 111753 . 111754) (symbol 111742 . 111753) (open-paren 111741 . 111742) (symbol 111718 . 111740) (symbol 111706 . 111717) (EXTERN 111699 . 111705) (punctuation 111697 . 111698) (close-paren 111696 . 111697) (VOID 111692 . 111696) (open-paren 111691 . 111692) (symbol 111672 . 111690) (VOID 111667 . 111671) (EXTERN 111660 . 111666) (punctuation 111658 . 111659) (close-paren 111657 . 111658) (VOID 111653 . 111657) (open-paren 111652 . 111653) (symbol 111639 . 111651) (BOOL 111634 . 111638) (EXTERN 111627 . 111633) (punctuation 111625 . 111626) (close-paren 111624 . 111625) (BOOL 111620 . 111624) (open-paren 111619 . 111620) (symbol 111590 . 111618) (VOID 111585 . 111589) (EXTERN 111578 . 111584) (punctuation 111576 . 111577) (close-paren 111575 . 111576) (VOID 111571 . 111575) (open-paren 111570 . 111571) (symbol 111550 . 111569) (VOID 111545 . 111549) (EXTERN 111538 . 111544) (punctuation 111536 . 111537) (close-paren 111535 . 111536) (symbol 111528 . 111535) (punctuation 111526 . 111527) (punctuation 111525 . 111526) (CONST 111519 . 111524) (CHAR 111514 . 111518) (open-paren 111513 . 111514) (symbol 111501 . 111512) (VOID 111496 . 111500) (EXTERN 111489 . 111495) (punctuation 111487 . 111488) (close-paren 111486 . 111487) (punctuation 111485 . 111486) (punctuation 111484 . 111485) (punctuation 111483 . 111484) (punctuation 111481 . 111482) (punctuation 111480 . 111481) (CONST 111474 . 111479) (CHAR 111469 . 111473) (open-paren 111468 . 111469) (symbol 111457 . 111467) (VOID 111452 . 111456) (EXTERN 111445 . 111451) (punctuation 111443 . 111444) (close-paren 111442 . 111443) (number 111441 . 111442) (open-paren 111440 . 111441) (symbol 111424 . 111440) (symbol 111412 . 111423) (EXTERN 111405 . 111411) (punctuation 111334 . 111335) (close-paren 111333 . 111334) (INT 111330 . 111333) (punctuation 111328 . 111329) (BOOL 111324 . 111328) (punctuation 111322 . 111323) (symbol 111311 . 111322) (open-paren 111310 . 111311) (symbol 111302 . 111309) (symbol 111290 . 111301) (EXTERN 111283 . 111289) (punctuation 111150 . 111151) (close-paren 111149 . 111150) (VOID 111145 . 111149) (open-paren 111144 . 111145) (symbol 111129 . 111143) (VOID 111124 . 111128) (EXTERN 111117 . 111123) (punctuation 111115 . 111116) (close-paren 111114 . 111115) (BOOL 111110 . 111114) (punctuation 111108 . 111109) (symbol 111099 . 111108) (punctuation 111097 . 111098) (symbol 111088 . 111097) (punctuation 111086 . 111087) (punctuation 111085 . 111086) (CHAR 111080 . 111084) (CONST 111074 . 111079) (punctuation 111064 . 111065) (symbol 111055 . 111064) (punctuation 111053 . 111054) (symbol 111044 . 111053) (punctuation 111042 . 111043) (symbol 111033 . 111042) (punctuation 111031 . 111032) (symbol 111022 . 111031) (open-paren 111021 . 111022) (symbol 111005 . 111020) (VOID 111000 . 111004) (EXTERN 110993 . 110999) (punctuation 110991 . 110992) (close-paren 110990 . 110991) (BOOL 110986 . 110990) (punctuation 110984 . 110985) (BOOL 110980 . 110984) (punctuation 110978 . 110979) (BOOL 110974 . 110978) (punctuation 110972 . 110973) (BOOL 110968 . 110972) (punctuation 110966 . 110967) (symbol 110955 . 110966) (punctuation 110953 . 110954) (symbol 110944 . 110953) (punctuation 110942 . 110943) (symbol 110933 . 110942) (open-paren 110932 . 110933) (symbol 110918 . 110931) (VOID 110913 . 110917) (EXTERN 110906 . 110912) (punctuation 110904 . 110905) (close-paren 110903 . 110904) (INT 110900 . 110903) (punctuation 110898 . 110899) (symbol 110889 . 110898) (punctuation 110887 . 110888) (symbol 110878 . 110887) (punctuation 110868 . 110869) (symbol 110859 . 110868) (punctuation 110857 . 110858) (symbol 110848 . 110857) (open-paren 110847 . 110848) (symbol 110824 . 110846) (VOID 110819 . 110823) (EXTERN 110812 . 110818) (punctuation 110810 . 110811) (close-paren 110809 . 110810) (symbol 110800 . 110809) (punctuation 110798 . 110799) (symbol 110789 . 110798) (punctuation 110776 . 110777) (symbol 110767 . 110776) (punctuation 110765 . 110766) (symbol 110756 . 110765) (open-paren 110755 . 110756) (symbol 110729 . 110754) (VOID 110724 . 110728) (EXTERN 110717 . 110723) (punctuation 110715 . 110716) (close-paren 110714 . 110715) (symbol 110705 . 110714) (punctuation 110703 . 110704) (symbol 110694 . 110703) (punctuation 110687 . 110688) (symbol 110678 . 110687) (punctuation 110676 . 110677) (symbol 110667 . 110676) (punctuation 110665 . 110666) (symbol 110656 . 110665) (open-paren 110655 . 110656) (symbol 110635 . 110654) (VOID 110630 . 110634) (EXTERN 110623 . 110629) (punctuation 110621 . 110622) (close-paren 110620 . 110621) (symbol 110611 . 110620) (punctuation 110609 . 110610) (symbol 110600 . 110609) (punctuation 110598 . 110599) (symbol 110589 . 110598) (open-paren 110588 . 110589) (symbol 110568 . 110587) (VOID 110563 . 110567) (EXTERN 110556 . 110562) (punctuation 110554 . 110555) (close-paren 110553 . 110554) (symbol 110544 . 110553) (punctuation 110542 . 110543) (symbol 110533 . 110542) (punctuation 110531 . 110532) (punctuation 110530 . 110531) (symbol 110523 . 110529) (STRUCT 110516 . 110522) (open-paren 110515 . 110516) (symbol 110490 . 110514) (VOID 110485 . 110489) (EXTERN 110478 . 110484) (punctuation 110476 . 110477) (close-paren 110475 . 110476) (punctuation 110474 . 110475) (symbol 110464 . 110473) (punctuation 110462 . 110463) (symbol 110453 . 110462) (punctuation 110451 . 110452) (symbol 110442 . 110451) (open-paren 110441 . 110442) (symbol 110414 . 110440) (VOID 110409 . 110413) (EXTERN 110402 . 110408) (punctuation 110400 . 110401) (close-paren 110399 . 110400) (punctuation 110398 . 110399) (symbol 110388 . 110397) (punctuation 110386 . 110387) (symbol 110377 . 110386) (punctuation 110375 . 110376) (symbol 110366 . 110375) (open-paren 110365 . 110366) (symbol 110340 . 110364) (VOID 110335 . 110339) (EXTERN 110328 . 110334) (punctuation 110326 . 110327) (close-paren 110325 . 110326) (symbol 110316 . 110325) (punctuation 110314 . 110315) (symbol 110305 . 110314) (open-paren 110304 . 110305) (symbol 110292 . 110303) (VOID 110287 . 110291) (EXTERN 110280 . 110286) (punctuation 110278 . 110279) (close-paren 110277 . 110278) (BOOL 110273 . 110277) (punctuation 110271 . 110272) (symbol 110262 . 110271) (punctuation 110260 . 110261) (symbol 110251 . 110260) (punctuation 110245 . 110246) (symbol 110236 . 110245) (punctuation 110234 . 110235) (symbol 110225 . 110234) (open-paren 110224 . 110225) (symbol 110212 . 110223) (symbol 110200 . 110211) (EXTERN 110193 . 110199) (punctuation 110191 . 110192) (close-paren 110190 . 110191) (BOOL 110186 . 110190) (punctuation 110184 . 110185) (symbol 110175 . 110184) (punctuation 110173 . 110174) (symbol 110164 . 110173) (punctuation 110162 . 110163) (symbol 110153 . 110162) (punctuation 110151 . 110152) (symbol 110142 . 110151) (open-paren 110141 . 110142) (symbol 110126 . 110140) (VOID 110121 . 110125) (EXTERN 110114 . 110120) (punctuation 110112 . 110113) (close-paren 110111 . 110112) (symbol 110102 . 110111) (punctuation 110100 . 110101) (symbol 110091 . 110100) (open-paren 110090 . 110091) (symbol 110075 . 110089) (VOID 110070 . 110074) (EXTERN 110063 . 110069) (punctuation 110061 . 110062) (close-paren 110060 . 110061) (BOOL 110056 . 110060) (punctuation 110054 . 110055) (BOOL 110050 . 110054) (punctuation 110048 . 110049) (symbol 110039 . 110048) (punctuation 110037 . 110038) (symbol 110028 . 110037) (open-paren 110027 . 110028) (symbol 110015 . 110026) (symbol 110003 . 110014) (EXTERN 109996 . 110002) (punctuation 109994 . 109995) (close-paren 109993 . 109994) (symbol 109984 . 109993) (punctuation 109982 . 109983) (symbol 109973 . 109982) (open-paren 109972 . 109973) (symbol 109962 . 109971) (VOID 109957 . 109961) (EXTERN 109950 . 109956) (punctuation 109948 . 109949) (close-paren 109947 . 109948) (BOOL 109943 . 109947) (punctuation 109941 . 109942) (symbol 109932 . 109941) (punctuation 109918 . 109919) (symbol 109909 . 109918) (punctuation 109907 . 109908) (symbol 109898 . 109907) (punctuation 109884 . 109885) (symbol 109875 . 109884) (punctuation 109873 . 109874) (symbol 109862 . 109873) (open-paren 109861 . 109862) (symbol 109827 . 109860) (VOID 109822 . 109826) (EXTERN 109815 . 109821) (punctuation 109813 . 109814) (close-paren 109812 . 109813) (symbol 109803 . 109812) (punctuation 109801 . 109802) (punctuation 109800 . 109801) (CHAR 109795 . 109799) (CONST 109789 . 109794) (open-paren 109788 . 109789) (symbol 109754 . 109787) (VOID 109749 . 109753) (EXTERN 109742 . 109748) (punctuation 109740 . 109741) (close-paren 109739 . 109740) (symbol 109730 . 109739) (punctuation 109728 . 109729) (punctuation 109727 . 109728) (CHAR 109722 . 109726) (CONST 109716 . 109721) (open-paren 109715 . 109716) (symbol 109693 . 109714) (VOID 109688 . 109692) (EXTERN 109681 . 109687) (punctuation 109679 . 109680) (close-paren 109678 . 109679) (punctuation 109677 . 109678) (CHAR 109672 . 109676) (CONST 109666 . 109671) (open-paren 109665 . 109666) (symbol 109651 . 109664) (VOID 109646 . 109650) (EXTERN 109639 . 109645) (punctuation 109637 . 109638) (close-paren 109636 . 109637) (INT 109633 . 109636) (open-paren 109632 . 109633) (symbol 109620 . 109631) (VOID 109615 . 109619) (EXTERN 109608 . 109614) (punctuation 109606 . 109607) (close-paren 109605 . 109606) (BOOL 109601 . 109605) (punctuation 109599 . 109600) (symbol 109590 . 109599) (punctuation 109588 . 109589) (symbol 109579 . 109588) (punctuation 109577 . 109578) (punctuation 109576 . 109577) (symbol 109569 . 109575) (STRUCT 109562 . 109568) (open-paren 109561 . 109562) (symbol 109542 . 109560) (VOID 109537 . 109541) (EXTERN 109530 . 109536) (punctuation 109528 . 109529) (close-paren 109527 . 109528) (BOOL 109523 . 109527) (punctuation 109521 . 109522) (symbol 109512 . 109521) (punctuation 109510 . 109511) (symbol 109501 . 109510) (punctuation 109495 . 109496) (symbol 109486 . 109495) (punctuation 109484 . 109485) (symbol 109475 . 109484) (punctuation 109473 . 109474) (symbol 109462 . 109473) (open-paren 109461 . 109462) (symbol 109442 . 109460) (VOID 109437 . 109441) (EXTERN 109430 . 109436) (punctuation 109428 . 109429) (close-paren 109427 . 109428) (symbol 109411 . 109427) (BOOL 109406 . 109410) (punctuation 109404 . 109405) (symbol 109395 . 109404) (punctuation 109393 . 109394) (symbol 109384 . 109393) (open-paren 109383 . 109384) (symbol 109367 . 109382) (VOID 109362 . 109366) (EXTERN 109355 . 109361) (punctuation 109353 . 109354) (close-paren 109352 . 109353) (BOOL 109348 . 109352) (punctuation 109346 . 109347) (BOOL 109342 . 109346) (punctuation 109340 . 109341) (BOOL 109336 . 109340) (punctuation 109328 . 109329) (symbol 109319 . 109328) (punctuation 109317 . 109318) (symbol 109308 . 109317) (punctuation 109306 . 109307) (punctuation 109305 . 109306) (CHAR 109300 . 109304) (CONST 109294 . 109299) (open-paren 109293 . 109294) (symbol 109279 . 109292) (VOID 109274 . 109278) (EXTERN 109267 . 109273) (punctuation 109265 . 109266) (close-paren 109264 . 109265) (symbol 109255 . 109264) (punctuation 109253 . 109254) (punctuation 109252 . 109253) (CHAR 109247 . 109251) (CONST 109241 . 109246) (open-paren 109240 . 109241) (symbol 109221 . 109239) (VOID 109216 . 109220) (EXTERN 109209 . 109215) (punctuation 109207 . 109208) (close-paren 109206 . 109207) (symbol 109197 . 109206) (punctuation 109195 . 109196) (punctuation 109194 . 109195) (CHAR 109189 . 109193) (CONST 109183 . 109188) (open-paren 109182 . 109183) (symbol 109175 . 109181) (VOID 109170 . 109174) (EXTERN 109163 . 109169) (punctuation 109161 . 109162) (close-paren 109160 . 109161) (symbol 109151 . 109160) (punctuation 109149 . 109150) (symbol 109140 . 109149) (punctuation 109138 . 109139) (symbol 109129 . 109138) (punctuation 109121 . 109122) (punctuation 109120 . 109121) (CHAR 109115 . 109119) (UNSIGNED 109106 . 109114) (CONST 109100 . 109105) (open-paren 109099 . 109100) (symbol 109077 . 109098) (INT 109073 . 109076) (EXTERN 109066 . 109072) (punctuation 109064 . 109065) (close-paren 109063 . 109064) (symbol 109054 . 109063) (punctuation 109052 . 109053) (symbol 109043 . 109052) (punctuation 109041 . 109042) (symbol 109032 . 109041) (punctuation 109023 . 109024) (punctuation 109022 . 109023) (CHAR 109017 . 109021) (UNSIGNED 109008 . 109016) (CONST 109002 . 109007) (open-paren 109001 . 109002) (symbol 108978 . 109000) (INT 108974 . 108977) (EXTERN 108967 . 108973) (punctuation 108965 . 108966) (close-paren 108964 . 108965) (BOOL 108960 . 108964) (punctuation 108958 . 108959) (BOOL 108954 . 108958) (punctuation 108952 . 108953) (symbol 108943 . 108952) (punctuation 108934 . 108935) (punctuation 108933 . 108934) (CHAR 108928 . 108932) (UNSIGNED 108919 . 108927) (punctuation 108917 . 108918) (punctuation 108916 . 108917) (CHAR 108911 . 108915) (UNSIGNED 108902 . 108910) (CONST 108896 . 108901) (open-paren 108895 . 108896) (symbol 108885 . 108894) (symbol 108875 . 108884) (EXTERN 108868 . 108874) (punctuation 108866 . 108867) (close-paren 108865 . 108866) (symbol 108856 . 108865) (punctuation 108854 . 108855) (punctuation 108853 . 108854) (symbol 108846 . 108852) (STRUCT 108839 . 108845) (open-paren 108838 . 108839) (symbol 108827 . 108837) (VOID 108822 . 108826) (EXTERN 108815 . 108821) (punctuation 108813 . 108814) (close-paren 108812 . 108813) (symbol 108803 . 108812) (open-paren 108802 . 108803) (symbol 108793 . 108801) (VOID 108788 . 108792) (EXTERN 108781 . 108787) (punctuation 108779 . 108780) (close-paren 108778 . 108779) (VOID 108774 . 108778) (open-paren 108773 . 108774) (symbol 108757 . 108772) (VOID 108752 . 108756) (EXTERN 108735 . 108741) (punctuation 108733 . 108734) (close-paren 108732 . 108733) (symbol 108723 . 108732) (punctuation 108721 . 108722) (symbol 108712 . 108721) (open-paren 108711 . 108712) (symbol 108697 . 108710) (VOID 108692 . 108696) (EXTERN 108685 . 108691) (punctuation 108540 . 108541) (close-paren 108539 . 108540) (VOID 108535 . 108539) (open-paren 108534 . 108535) (symbol 108520 . 108533) (VOID 108515 . 108519) (EXTERN 108508 . 108514) (punctuation 108506 . 108507) (close-paren 108505 . 108506) (VOID 108501 . 108505) (open-paren 108500 . 108501) (symbol 108482 . 108499) (VOID 108477 . 108481) (EXTERN 108470 . 108476) (punctuation 108468 . 108469) (close-paren 108467 . 108468) (symbol 108458 . 108467) (punctuation 108456 . 108457) (punctuation 108455 . 108456) (symbol 108449 . 108454) (STRUCT 108442 . 108448) (open-paren 108441 . 108442) (symbol 108427 . 108440) (INT 108423 . 108426) (EXTERN 108416 . 108422) (punctuation 108254 . 108255) (close-paren 108253 . 108254) (VOID 108249 . 108253) (open-paren 108248 . 108249) (symbol 108236 . 108247) (VOID 108231 . 108235) (EXTERN 108224 . 108230) (punctuation 108222 . 108223) (close-paren 108221 . 108222) (VOID 108217 . 108221) (open-paren 108216 . 108217) (symbol 108201 . 108215) (VOID 108196 . 108200) (EXTERN 108189 . 108195) (punctuation 108158 . 108159) (close-paren 108157 . 108158) (VOID 108153 . 108157) (open-paren 108152 . 108153) (symbol 108135 . 108151) (VOID 108130 . 108134) (EXTERN 108123 . 108129) (punctuation 108121 . 108122) (close-paren 108120 . 108121) (symbol 108119 . 108120) (symbol 108107 . 108118) (punctuation 108105 . 108106) (symbol 108104 . 108105) (symbol 108092 . 108103) (open-paren 108091 . 108092) (symbol 108080 . 108090) (symbol 108068 . 108079) (EXTERN 108061 . 108067) (punctuation 108052 . 108053) (close-paren 108051 . 108052) (DOUBLE 108045 . 108051) (open-paren 108044 . 108045) (symbol 108038 . 108043) (DOUBLE 108031 . 108037) (EXTERN 108024 . 108030) (punctuation 107972 . 107973) (close-paren 107971 . 107972) (VOID 107967 . 107971) (open-paren 107966 . 107967) (symbol 107954 . 107965) (VOID 107949 . 107953) (EXTERN 107942 . 107948) (punctuation 107940 . 107941) (close-paren 107939 . 107940) (symbol 107928 . 107939) (open-paren 107927 . 107928) (symbol 107907 . 107926) (symbol 107895 . 107906) (EXTERN 107888 . 107894) (punctuation 107886 . 107887) (close-paren 107885 . 107886) (symbol 107874 . 107885) (open-paren 107873 . 107874) (symbol 107853 . 107872) (symbol 107841 . 107852) (EXTERN 107834 . 107840) (punctuation 107832 . 107833) (close-paren 107831 . 107832) (symbol 107822 . 107831) (punctuation 107820 . 107821) (symbol 107809 . 107820) (open-paren 107808 . 107809) (symbol 107788 . 107807) (symbol 107778 . 107787) (EXTERN 107771 . 107777) (punctuation 107769 . 107770) (close-paren 107768 . 107769) (symbol 107759 . 107768) (punctuation 107757 . 107758) (symbol 107746 . 107757) (open-paren 107745 . 107746) (symbol 107725 . 107744) (symbol 107715 . 107724) (EXTERN 107708 . 107714) (punctuation 107706 . 107707) (close-paren 107705 . 107706) (VOID 107701 . 107705) (open-paren 107700 . 107701) (symbol 107671 . 107699) (VOID 107666 . 107670) (EXTERN 107659 . 107665) (punctuation 107657 . 107658) (close-paren 107656 . 107657) (symbol 107645 . 107656) (punctuation 107643 . 107644) (symbol 107632 . 107643) (open-paren 107631 . 107632) (symbol 107617 . 107630) (symbol 107605 . 107616) (EXTERN 107598 . 107604) (punctuation 107596 . 107597) (close-paren 107595 . 107596) (symbol 107584 . 107595) (punctuation 107582 . 107583) (symbol 107571 . 107582) (open-paren 107570 . 107571) (symbol 107557 . 107569) (symbol 107545 . 107556) (EXTERN 107538 . 107544) (punctuation 107536 . 107537) (close-paren 107535 . 107536) (symbol 107524 . 107535) (punctuation 107522 . 107523) (symbol 107511 . 107522) (open-paren 107510 . 107511) (symbol 107503 . 107509) (symbol 107491 . 107502) (EXTERN 107484 . 107490) (punctuation 107482 . 107483) (close-paren 107481 . 107482) (symbol 107470 . 107481) (punctuation 107468 . 107469) (symbol 107457 . 107468) (open-paren 107456 . 107457) (symbol 107442 . 107455) (BOOL 107437 . 107441) (EXTERN 107430 . 107436) (punctuation 107428 . 107429) (close-paren 107427 . 107428) (symbol 107416 . 107427) (punctuation 107414 . 107415) (symbol 107403 . 107414) (punctuation 107401 . 107402) (symbol 107390 . 107401) (open-paren 107389 . 107390) (symbol 107381 . 107388) (symbol 107369 . 107380) (EXTERN 107362 . 107368) (punctuation 107360 . 107361) (close-paren 107359 . 107360) (symbol 107348 . 107359) (punctuation 107346 . 107347) (symbol 107335 . 107346) (open-paren 107334 . 107335) (symbol 107326 . 107333) (symbol 107314 . 107325) (EXTERN 107307 . 107313) (punctuation 107305 . 107306) (close-paren 107304 . 107305) (symbol 107293 . 107304) (open-paren 107292 . 107293) (symbol 107277 . 107291) (symbol 107265 . 107276) (EXTERN 107258 . 107264) (punctuation 107256 . 107257) (close-paren 107255 . 107256) (symbol 107244 . 107255) (punctuation 107242 . 107243) (symbol 107231 . 107242) (punctuation 107229 . 107230) (symbol 107218 . 107229) (open-paren 107217 . 107218) (symbol 107211 . 107216) (symbol 107199 . 107210) (EXTERN 107192 . 107198) (punctuation 107190 . 107191) (close-paren 107189 . 107190) (symbol 107180 . 107189) (punctuation 107178 . 107179) (symbol 107169 . 107178) (punctuation 107160 . 107161) (symbol 107151 . 107160) (punctuation 107149 . 107150) (symbol 107140 . 107149) (punctuation 107138 . 107139) (symbol 107127 . 107138) (open-paren 107126 . 107127) (symbol 107111 . 107125) (symbol 107099 . 107110) (EXTERN 107092 . 107098) (punctuation 107090 . 107091) (close-paren 107089 . 107090) (punctuation 107088 . 107089) (symbol 107078 . 107087) (punctuation 107076 . 107077) (punctuation 107075 . 107076) (symbol 107065 . 107074) (punctuation 107063 . 107064) (symbol 107054 . 107063) (punctuation 107042 . 107043) (symbol 107031 . 107042) (punctuation 107029 . 107030) (symbol 107018 . 107029) (punctuation 107016 . 107017) (symbol 107005 . 107016) (open-paren 107004 . 107005) (symbol 106986 . 107003) (VOID 106981 . 106985) (EXTERN 106974 . 106980) (punctuation 106893 . 106894) (close-paren 106892 . 106893) (symbol 106881 . 106892) (punctuation 106879 . 106880) (punctuation 106878 . 106879) (symbol 106862 . 106877) (STRUCT 106855 . 106861) (open-paren 106854 . 106855) (symbol 106831 . 106853) (VOID 106826 . 106830) (punctuation 106824 . 106825) (close-paren 106823 . 106824) (symbol 106813 . 106823) (punctuation 106805 . 106806) (symbol 106794 . 106805) (punctuation 106792 . 106793) (symbol 106781 . 106792) (punctuation 106779 . 106780) (punctuation 106778 . 106779) (symbol 106762 . 106777) (STRUCT 106755 . 106761) (open-paren 106754 . 106755) (symbol 106745 . 106753) (symbol 106735 . 106744) (punctuation 106733 . 106734) (close-paren 106732 . 106733) (punctuation 106731 . 106732) (symbol 106720 . 106730) (punctuation 106718 . 106719) (symbol 106707 . 106718) (punctuation 106705 . 106706) (punctuation 106704 . 106705) (symbol 106688 . 106703) (STRUCT 106681 . 106687) (open-paren 106680 . 106681) (symbol 106668 . 106679) (symbol 106658 . 106667) (punctuation 106656 . 106657) (close-paren 106655 . 106656) (BOOL 106651 . 106655) (punctuation 106649 . 106650) (symbol 106638 . 106649) (punctuation 106628 . 106629) (FLOAT 106623 . 106628) (punctuation 106621 . 106622) (FLOAT 106616 . 106621) (punctuation 106614 . 106615) (symbol 106605 . 106614) (punctuation 106603 . 106604) (symbol 106588 . 106603) (STRUCT 106581 . 106587) (open-paren 106580 . 106581) (symbol 106564 . 106579) (symbol 106552 . 106563) (punctuation 106550 . 106551) (close-paren 106549 . 106550) (INT 106546 . 106549) (punctuation 106544 . 106545) (symbol 106533 . 106544) (open-paren 106532 . 106533) (symbol 106525 . 106531) (symbol 106514 . 106524) (punctuation 106512 . 106513) (close-paren 106511 . 106512) (symbol 106502 . 106511) (punctuation 106500 . 106501) (punctuation 106499 . 106500) (CONST 106493 . 106498) (CHAR 106488 . 106492) (open-paren 106487 . 106488) (symbol 106475 . 106486) (symbol 106464 . 106474) (punctuation 106462 . 106463) (close-paren 106461 . 106462) (punctuation 106460 . 106461) (symbol 106450 . 106459) (punctuation 106448 . 106449) (punctuation 106447 . 106448) (symbol 106437 . 106446) (punctuation 106435 . 106436) (symbol 106424 . 106435) (open-paren 106423 . 106424) (symbol 106398 . 106422) (punctuation 106397 . 106398) (CHAR 106392 . 106396) (EXTERN 106385 . 106391) (punctuation 106383 . 106384) (close-paren 106382 . 106383) (VOID 106378 . 106382) (open-paren 106377 . 106378) (symbol 106354 . 106376) (VOID 106349 . 106353) (EXTERN 106342 . 106348) (punctuation 106340 . 106341) (close-paren 106339 . 106340) (symbol 106330 . 106339) (punctuation 106328 . 106329) (symbol 106319 . 106328) (punctuation 106317 . 106318) (symbol 106306 . 106317) (open-paren 106305 . 106306) (symbol 106291 . 106304) (symbol 106279 . 106290) (EXTERN 106272 . 106278) (close-paren 106253 . 106254) (symbol 106244 . 106253) (open-paren 106243 . 106244) (symbol 106225 . 106242) (symbol 106215 . 106224) (EXTERN 106208 . 106214) (punctuation 106206 . 106207) (close-paren 106205 . 106206) (number 106202 . 106204) (punctuation 106200 . 106201) (symbol 106176 . 106199) (open-paren 106174 . 106175) (ENUM 106169 . 106173) (punctuation 106141 . 106142) (close-paren 106140 . 106141) (VOID 106136 . 106140) (open-paren 106135 . 106136) (symbol 106120 . 106134) (VOID 106115 . 106119) (EXTERN 106108 . 106114) (punctuation 106106 . 106107) (close-paren 106105 . 106106) (VOID 106101 . 106105) (open-paren 106100 . 106101) (symbol 106083 . 106099) (VOID 106078 . 106082) (EXTERN 106071 . 106077) (punctuation 105985 . 105986) (close-paren 105984 . 105985) (VOID 105980 . 105984) (open-paren 105979 . 105980) (symbol 105963 . 105978) (VOID 105958 . 105962) (EXTERN 105951 . 105957) (punctuation 105949 . 105950) (close-paren 105948 . 105949) (VOID 105944 . 105948) (open-paren 105943 . 105944) (symbol 105925 . 105942) (VOID 105920 . 105924) (EXTERN 105913 . 105919) (punctuation 105911 . 105912) (close-paren 105910 . 105911) (VOID 105906 . 105910) (open-paren 105905 . 105906) (symbol 105892 . 105904) (VOID 105887 . 105891) (EXTERN 105880 . 105886) (punctuation 105848 . 105849) (close-paren 105847 . 105848) (VOID 105843 . 105847) (open-paren 105842 . 105843) (symbol 105824 . 105841) (VOID 105819 . 105823) (EXTERN 105812 . 105818) (punctuation 105810 . 105811) (close-paren 105809 . 105810) (symbol 105800 . 105809) (punctuation 105798 . 105799) (punctuation 105797 . 105798) (CHAR 105792 . 105796) (UNSIGNED 105783 . 105791) (CONST 105777 . 105782) (open-paren 105776 . 105777) (symbol 105752 . 105775) (symbol 105742 . 105751) (EXTERN 105735 . 105741) (punctuation 105733 . 105734) (close-paren 105732 . 105733) (symbol 105723 . 105732) (punctuation 105721 . 105722) (punctuation 105720 . 105721) (CHAR 105715 . 105719) (UNSIGNED 105706 . 105714) (CONST 105700 . 105705) (open-paren 105699 . 105700) (symbol 105685 . 105698) (symbol 105675 . 105684) (EXTERN 105668 . 105674) (punctuation 105634 . 105635) (close-paren 105633 . 105634) (VOID 105629 . 105633) (open-paren 105628 . 105629) (symbol 105613 . 105627) (VOID 105608 . 105612) (EXTERN 105601 . 105607) (punctuation 105599 . 105600) (close-paren 105598 . 105599) (VOID 105594 . 105598) (open-paren 105593 . 105594) (symbol 105576 . 105592) (VOID 105571 . 105575) (EXTERN 105564 . 105570) (punctuation 105562 . 105563) (close-paren 105561 . 105562) (VOID 105557 . 105561) (open-paren 105556 . 105557) (symbol 105544 . 105555) (VOID 105539 . 105543) (EXTERN 105532 . 105538) (punctuation 105530 . 105531) (close-paren 105529 . 105530) (symbol 105518 . 105529) (punctuation 105516 . 105517) (BOOL 105512 . 105516) (punctuation 105510 . 105511) (BOOL 105506 . 105510) (punctuation 105504 . 105505) (symbol 105495 . 105504) (punctuation 105452 . 105453) (symbol 105443 . 105452) (punctuation 105441 . 105442) (punctuation 105440 . 105441) (CHAR 105435 . 105439) (UNSIGNED 105426 . 105434) (CONST 105420 . 105425) (open-paren 105419 . 105420) (symbol 105398 . 105418) (symbol 105386 . 105397) (EXTERN 105379 . 105385) (punctuation 105348 . 105349) (close-paren 105347 . 105348) (VOID 105343 . 105347) (open-paren 105342 . 105343) (symbol 105329 . 105341) (VOID 105324 . 105328) (EXTERN 105317 . 105323) (punctuation 105315 . 105316) (close-paren 105314 . 105315) (VOID 105310 . 105314) (open-paren 105309 . 105310) (symbol 105296 . 105308) (VOID 105291 . 105295) (EXTERN 105284 . 105290) (punctuation 105257 . 105258) (close-paren 105256 . 105257) (punctuation 105255 . 105256) (symbol 105243 . 105254) (STRUCT 105236 . 105242) (open-paren 105235 . 105236) (symbol 105212 . 105234) (VOID 105207 . 105211) (EXTERN 105200 . 105206) (punctuation 105198 . 105199) (close-paren 105197 . 105198) (VOID 105193 . 105197) (open-paren 105192 . 105193) (symbol 105179 . 105191) (VOID 105174 . 105178) (EXTERN 105167 . 105173) (punctuation 105165 . 105166) (close-paren 105164 . 105165) (symbol 105153 . 105164) (punctuation 105151 . 105152) (symbol 105140 . 105151) (open-paren 105139 . 105140) (symbol 105126 . 105138) (symbol 105114 . 105125) (EXTERN 105107 . 105113) (punctuation 105105 . 105106) (close-paren 105104 . 105105) (symbol 105096 . 105104) (symbol 105078 . 105095) (ENUM 105073 . 105077) (punctuation 105037 . 105038) (symbol 105026 . 105037) (punctuation 105024 . 105025) (symbol 105013 . 105024) (open-paren 105012 . 105013) (symbol 104991 . 105011) (VOID 104986 . 104990) (EXTERN 104979 . 104985) (punctuation 104977 . 104978) (close-paren 104976 . 104977) (symbol 104959 . 104976) (ENUM 104954 . 104958) (punctuation 104926 . 104927) (symbol 104915 . 104926) (punctuation 104913 . 104914) (symbol 104902 . 104913) (punctuation 104900 . 104901) (symbol 104889 . 104900) (open-paren 104888 . 104889) (symbol 104875 . 104887) (VOID 104870 . 104874) (EXTERN 104863 . 104869) (punctuation 104861 . 104862) (close-paren 104860 . 104861) (symbol 104833 . 104859) (punctuation 104829 . 104830) (symbol 104810 . 104829) (punctuation 104806 . 104807) (symbol 104789 . 104806) (punctuation 104785 . 104786) (symbol 104769 . 104785) (open-paren 104765 . 104766) (symbol 104747 . 104764) (ENUM 104742 . 104746) (punctuation 104740 . 104741) (close-paren 104739 . 104740) (punctuation 104738 . 104739) (symbol 104729 . 104737) (UNION 104723 . 104728) (open-paren 104722 . 104723) (symbol 104701 . 104721) (symbol 104689 . 104700) (EXTERN 104682 . 104688) (punctuation 104680 . 104681) (close-paren 104679 . 104680) (symbol 104668 . 104679) (open-paren 104667 . 104668) (symbol 104653 . 104666) (VOID 104648 . 104652) (EXTERN 104631 . 104637) (punctuation 104629 . 104630) (close-paren 104628 . 104629) (symbol 104617 . 104628) (punctuation 104607 . 104608) (symbol 104596 . 104607) (punctuation 104594 . 104595) (symbol 104583 . 104594) (open-paren 104582 . 104583) (symbol 104562 . 104581) (VOID 104557 . 104561) (EXTERN 104540 . 104546) (punctuation 104538 . 104539) (close-paren 104537 . 104538) (symbol 104526 . 104537) (punctuation 104524 . 104525) (symbol 104513 . 104524) (open-paren 104512 . 104513) (symbol 104494 . 104511) (VOID 104489 . 104493) (EXTERN 104472 . 104478) (punctuation 104470 . 104471) (close-paren 104469 . 104470) (punctuation 104468 . 104469) (symbol 104456 . 104467) (STRUCT 104449 . 104455) (open-paren 104448 . 104449) (symbol 104430 . 104447) (punctuation 104429 . 104430) (symbol 104417 . 104428) (STRUCT 104410 . 104416) (EXTERN 104403 . 104409) (punctuation 104400 . 104401) (close-paren 104399 . 104400) (symbol 104390 . 104399) (punctuation 104388 . 104389) (symbol 104377 . 104388) (open-paren 104376 . 104377) (symbol 104359 . 104375) (symbol 104349 . 104358) (EXTERN 104342 . 104348) (punctuation 104340 . 104341) (close-paren 104339 . 104340) (symbol 104331 . 104339) (punctuation 104329 . 104330) (symbol 104321 . 104329) (punctuation 104319 . 104320) (symbol 104308 . 104319) (open-paren 104307 . 104308) (symbol 104292 . 104306) (symbol 104283 . 104291) (EXTERN 104276 . 104282) (punctuation 103853 . 103854) (close-paren 103852 . 103853) (symbol 103842 . 103852) (symbol 103825 . 103841) (ENUM 103820 . 103824) (punctuation 103785 . 103786) (symbol 103781 . 103785) (symbol 103769 . 103780) (punctuation 103767 . 103768) (symbol 103763 . 103767) (symbol 103751 . 103762) (open-paren 103750 . 103751) (symbol 103737 . 103749) (symbol 103725 . 103736) (EXTERN 103718 . 103724) (punctuation 103716 . 103717) (close-paren 103715 . 103716) (symbol 103695 . 103714) (punctuation 103691 . 103692) (symbol 103672 . 103691) (punctuation 103668 . 103669) (symbol 103658 . 103668) (punctuation 103654 . 103655) (symbol 103644 . 103654) (punctuation 103640 . 103641) (symbol 103626 . 103640) (punctuation 103622 . 103623) (symbol 103611 . 103622) (open-paren 103607 . 103608) (symbol 103590 . 103606) (ENUM 103585 . 103589) (punctuation 103583 . 103584) (close-paren 103582 . 103583) (symbol 103571 . 103582) (open-paren 103570 . 103571) (symbol 103552 . 103569) (symbol 103540 . 103551) (EXTERN 103533 . 103539) (punctuation 103531 . 103532) (close-paren 103530 . 103531) (symbol 103519 . 103530) (open-paren 103518 . 103519) (symbol 103500 . 103517) (symbol 103488 . 103499) (EXTERN 103481 . 103487) (punctuation 103479 . 103480) (close-paren 103478 . 103479) (symbol 103467 . 103478) (punctuation 103465 . 103466) (symbol 103454 . 103465) (punctuation 103442 . 103443) (symbol 103431 . 103442) (punctuation 103429 . 103430) (symbol 103418 . 103429) (open-paren 103417 . 103418) (symbol 103392 . 103416) (VOID 103387 . 103391) (EXTERN 103380 . 103386) (punctuation 103378 . 103379) (close-paren 103377 . 103378) (symbol 103366 . 103377) (punctuation 103364 . 103365) (symbol 103353 . 103364) (open-paren 103352 . 103353) (symbol 103339 . 103351) (VOID 103334 . 103338) (EXTERN 103317 . 103323) (close-paren 103288 . 103289) (semantic-list 103200 . 103287) (ELSE 103191 . 103195) (semantic-list 103122 . 103188) (semantic-list 103102 . 103117) (IF 103099 . 103101) (open-paren 103095 . 103096) (close-paren 103093 . 103094) (symbol 103092 . 103093) (punctuation 103091 . 103092) (symbol 103081 . 103090) (punctuation 103079 . 103080) (symbol 103076 . 103079) (symbol 103064 . 103075) (open-paren 103063 . 103064) (symbol 103044 . 103062) (BOOL 103039 . 103043) (symbol 103032 . 103038) (close-paren 103030 . 103031) (semantic-list 102944 . 103029) (ELSE 102935 . 102939) (semantic-list 102880 . 102932) (semantic-list 102860 . 102875) (IF 102857 . 102859) (open-paren 102853 . 102854) (close-paren 102851 . 102852) (symbol 102850 . 102851) (punctuation 102849 . 102850) (symbol 102840 . 102848) (punctuation 102838 . 102839) (symbol 102835 . 102838) (symbol 102823 . 102834) (open-paren 102822 . 102823) (symbol 102804 . 102821) (BOOL 102799 . 102803) (symbol 102792 . 102798) (punctuation 102683 . 102684) (close-paren 102682 . 102683) (DOUBLE 102676 . 102682) (open-paren 102675 . 102676) (symbol 102657 . 102674) (symbol 102645 . 102656) (EXTERN 102638 . 102644) (punctuation 102636 . 102637) (close-paren 102635 . 102636) (INT 102632 . 102635) (punctuation 102630 . 102631) (punctuation 102629 . 102630) (CONST 102623 . 102628) (CHAR 102618 . 102622) (open-paren 102617 . 102618) (symbol 102601 . 102616) (symbol 102589 . 102600) (EXTERN 102582 . 102588) (punctuation 102580 . 102581) (close-paren 102579 . 102580) (INT 102576 . 102579) (punctuation 102574 . 102575) (symbol 102563 . 102574) (open-paren 102562 . 102563) (symbol 102545 . 102561) (symbol 102533 . 102544) (EXTERN 102526 . 102532) (punctuation 102524 . 102525) (close-paren 102523 . 102524) (INT 102520 . 102523) (punctuation 102518 . 102519) (symbol 102507 . 102518) (punctuation 102505 . 102506) (symbol 102496 . 102505) (punctuation 102494 . 102495) (punctuation 102493 . 102494) (CHAR 102488 . 102492) (open-paren 102487 . 102488) (symbol 102468 . 102486) (symbol 102458 . 102467) (EXTERN 102451 . 102457) (punctuation 102449 . 102450) (close-paren 102448 . 102449) (INT 102445 . 102448) (punctuation 102443 . 102444) (symbol 102432 . 102443) (open-paren 102431 . 102432) (symbol 102416 . 102430) (symbol 102406 . 102415) (EXTERN 102399 . 102405) (punctuation 102397 . 102398) (close-paren 102396 . 102397) (symbol 102385 . 102396) (open-paren 102384 . 102385) (symbol 102366 . 102383) (symbol 102356 . 102365) (EXTERN 102349 . 102355) (punctuation 102347 . 102348) (close-paren 102346 . 102347) (symbol 102335 . 102346) (open-paren 102334 . 102335) (symbol 102317 . 102333) (symbol 102308 . 102316) (EXTERN 102301 . 102307) (close-paren 102159 . 102160) (punctuation 102137 . 102138) (punctuation 102136 . 102137) (semantic-list 102129 . 102136) (symbol 102113 . 102128) (open-paren 102109 . 102110) (close-paren 102107 . 102108) (symbol 102104 . 102107) (symbol 102092 . 102103) (punctuation 102090 . 102091) (symbol 102087 . 102090) (symbol 102077 . 102086) (punctuation 102075 . 102076) (symbol 102070 . 102075) (symbol 102058 . 102069) (open-paren 102057 . 102058) (symbol 102029 . 102056) (VOID 102024 . 102028) (symbol 102017 . 102023) (close-paren 102014 . 102015) (punctuation 101992 . 101993) (punctuation 101991 . 101992) (semantic-list 101984 . 101991) (symbol 101972 . 101983) (punctuation 101968 . 101969) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101923 . 101924)))) 101914 . 101968) (open-paren 101910 . 101911) (close-paren 101908 . 101909) (symbol 101905 . 101908) (symbol 101893 . 101904) (punctuation 101891 . 101892) (symbol 101888 . 101891) (symbol 101878 . 101887) (punctuation 101876 . 101877) (symbol 101871 . 101876) (symbol 101859 . 101870) (open-paren 101858 . 101859) (symbol 101834 . 101857) (VOID 101829 . 101833) (symbol 101822 . 101828) (close-paren 101819 . 101820) (punctuation 101799 . 101800) (punctuation 101798 . 101799) (semantic-list 101791 . 101798) (symbol 101779 . 101790) (punctuation 101775 . 101776) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101712 . 101713)))) 101703 . 101775) (open-paren 101699 . 101700) (close-paren 101697 . 101698) (symbol 101694 . 101697) (symbol 101682 . 101693) (punctuation 101680 . 101681) (symbol 101677 . 101680) (symbol 101667 . 101676) (punctuation 101665 . 101666) (symbol 101660 . 101665) (symbol 101648 . 101659) (open-paren 101647 . 101648) (symbol 101625 . 101646) (VOID 101620 . 101624) (symbol 101613 . 101619) (close-paren 101556 . 101557) (punctuation 101540 . 101541) (punctuation 101539 . 101540) (semantic-list 101532 . 101539) (symbol 101520 . 101531) (open-paren 101516 . 101517) (close-paren 101514 . 101515) (symbol 101511 . 101514) (symbol 101499 . 101510) (punctuation 101497 . 101498) (symbol 101492 . 101497) (symbol 101480 . 101491) (open-paren 101479 . 101480) (symbol 101456 . 101478) (VOID 101451 . 101455) (symbol 101444 . 101450) (close-paren 101442 . 101443) (punctuation 101427 . 101428) (punctuation 101426 . 101427) (semantic-list 101419 . 101426) (symbol 101407 . 101418) (open-paren 101403 . 101404) (close-paren 101401 . 101402) (symbol 101398 . 101401) (symbol 101386 . 101397) (punctuation 101384 . 101385) (symbol 101379 . 101384) (symbol 101367 . 101378) (open-paren 101366 . 101367) (symbol 101344 . 101365) (VOID 101339 . 101343) (symbol 101332 . 101338) (close-paren 101223 . 101224) (punctuation 101207 . 101208) (symbol 101206 . 101207) (punctuation 101205 . 101206) (symbol 101204 . 101205) (punctuation 101203 . 101204) (punctuation 101202 . 101203) (semantic-list 101199 . 101202) (symbol 101191 . 101198) (open-paren 101187 . 101188) (close-paren 101185 . 101186) (symbol 101184 . 101185) (symbol 101175 . 101183) (punctuation 101173 . 101174) (symbol 101172 . 101173) (symbol 101160 . 101171) (open-paren 101159 . 101160) (symbol 101138 . 101158) (VOID 101133 . 101137) (symbol 101126 . 101132) (close-paren 101084 . 101085) (punctuation 101072 . 101073) (symbol 101071 . 101072) (punctuation 101070 . 101071) (symbol 101069 . 101070) (punctuation 101068 . 101069) (punctuation 101067 . 101068) (semantic-list 101064 . 101067) (symbol 101056 . 101063) (RETURN 101049 . 101055) (open-paren 101045 . 101046) (close-paren 101043 . 101044) (symbol 101042 . 101043) (symbol 101030 . 101041) (open-paren 101029 . 101030) (symbol 101012 . 101028) (symbol 101003 . 101011) (symbol 100996 . 101002) (close-paren 100959 . 100960) (punctuation 100943 . 100944) (punctuation 100942 . 100943) (semantic-list 100933 . 100942) (symbol 100924 . 100932) (open-paren 100920 . 100921) (close-paren 100918 . 100919) (symbol 100913 . 100918) (symbol 100901 . 100912) (punctuation 100899 . 100900) (symbol 100892 . 100899) (symbol 100880 . 100891) (open-paren 100879 . 100880) (symbol 100861 . 100878) (VOID 100856 . 100860) (symbol 100849 . 100855) (close-paren 100809 . 100810) (punctuation 100801 . 100802) (punctuation 100800 . 100801) (symbol 100797 . 100800) (RETURN 100790 . 100796) (punctuation 100786 . 100787) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 100739 . 100742)))) 100730 . 100786) (open-paren 100726 . 100727) (close-paren 100724 . 100725) (symbol 100721 . 100724) (punctuation 100720 . 100721) (symbol 100696 . 100719) (STRUCT 100689 . 100695) (open-paren 100688 . 100689) (symbol 100678 . 100687) (INT 100674 . 100677) (symbol 100667 . 100673) (close-paren 100616 . 100617) (punctuation 100583 . 100584) (symbol 100582 . 100583) (punctuation 100581 . 100582) (symbol 100580 . 100581) (punctuation 100579 . 100580) (punctuation 100578 . 100579) (semantic-list 100573 . 100578) (symbol 100565 . 100572) (open-paren 100561 . 100562) (close-paren 100559 . 100560) (symbol 100556 . 100559) (symbol 100544 . 100555) (open-paren 100543 . 100544) (symbol 100522 . 100542) (VOID 100517 . 100521) (symbol 100510 . 100516) (close-paren 100507 . 100508) (punctuation 100493 . 100494) (symbol 100492 . 100493) (punctuation 100491 . 100492) (symbol 100490 . 100491) (punctuation 100489 . 100490) (punctuation 100488 . 100489) (semantic-list 100483 . 100488) (symbol 100475 . 100482) (open-paren 100471 . 100472) (close-paren 100469 . 100470) (symbol 100465 . 100469) (punctuation 100464 . 100465) (symbol 100452 . 100463) (STRUCT 100445 . 100451) (punctuation 100443 . 100444) (symbol 100440 . 100443) (symbol 100428 . 100439) (open-paren 100427 . 100428) (symbol 100411 . 100426) (VOID 100406 . 100410) (symbol 100399 . 100405) (close-paren 100396 . 100397) (punctuation 100380 . 100381) (symbol 100379 . 100380) (punctuation 100378 . 100379) (symbol 100377 . 100378) (punctuation 100376 . 100377) (punctuation 100375 . 100376) (semantic-list 100370 . 100375) (symbol 100362 . 100369) (open-paren 100358 . 100359) (close-paren 100356 . 100357) (symbol 100351 . 100356) (symbol 100339 . 100350) (punctuation 100337 . 100338) (symbol 100334 . 100337) (symbol 100322 . 100333) (open-paren 100321 . 100322) (symbol 100304 . 100320) (VOID 100299 . 100303) (symbol 100292 . 100298) (close-paren 100289 . 100290) (punctuation 100267 . 100268) (symbol 100266 . 100267) (punctuation 100265 . 100266) (symbol 100264 . 100265) (punctuation 100263 . 100264) (punctuation 100262 . 100263) (semantic-list 100257 . 100262) (symbol 100249 . 100256) (open-paren 100245 . 100246) (close-paren 100243 . 100244) (symbol 100235 . 100243) (symbol 100223 . 100234) (punctuation 100221 . 100222) (symbol 100218 . 100221) (symbol 100206 . 100217) (open-paren 100205 . 100206) (symbol 100185 . 100204) (VOID 100180 . 100184) (symbol 100173 . 100179) (close-paren 100080 . 100081) (number 100071 . 100072) (punctuation 100069 . 100070) (punctuation 100063 . 100064) (number 100061 . 100062) (punctuation 100045 . 100046) (punctuation 100044 . 100045) (open-paren 100030 . 100031) (close-paren 100028 . 100029) (symbol 100025 . 100028) (symbol 100013 . 100024) (punctuation 100011 . 100012) (symbol 100008 . 100011) (symbol 99998 . 100007) (punctuation 99996 . 99997) (symbol 99995 . 99996) (punctuation 99994 . 99995) (symbol 99978 . 99993) (STRUCT 99971 . 99977) (open-paren 99970 . 99971) (symbol 99950 . 99969) (VOID 99945 . 99949) (symbol 99938 . 99944) (close-paren 99935 . 99936) (punctuation 99922 . 99923) (number 99920 . 99921) (punctuation 99904 . 99905) (punctuation 99903 . 99904) (open-paren 99889 . 99890) (close-paren 99887 . 99888) (symbol 99884 . 99887) (symbol 99872 . 99883) (punctuation 99870 . 99871) (symbol 99867 . 99870) (symbol 99857 . 99866) (punctuation 99855 . 99856) (symbol 99854 . 99855) (punctuation 99853 . 99854) (symbol 99837 . 99852) (STRUCT 99830 . 99836) (open-paren 99829 . 99830) (symbol 99811 . 99828) (VOID 99806 . 99810) (symbol 99799 . 99805) (close-paren 99755 . 99756) (punctuation 99747 . 99748) (SIZEOF 99740 . 99746) (punctuation 99716 . 99717) (punctuation 99706 . 99707) (punctuation 99705 . 99706) (semantic-list 99702 . 99705) (punctuation 99682 . 99683) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 99625 . 99626)))) 99616 . 99682) (open-paren 99612 . 99613) (close-paren 99610 . 99611) (symbol 99605 . 99610) (symbol 99595 . 99604) (punctuation 99593 . 99594) (symbol 99589 . 99593) (punctuation 99588 . 99589) (symbol 99576 . 99587) (punctuation 99574 . 99575) (symbol 99568 . 99574) (symbol 99558 . 99567) (punctuation 99556 . 99557) (symbol 99555 . 99556) (symbol 99543 . 99554) (open-paren 99542 . 99543) (symbol 99536 . 99541) (VOID 99531 . 99535) (symbol 99524 . 99530) (punctuation 99365 . 99366) (close-paren 99364 . 99365) (punctuation 99363 . 99364) (symbol 99351 . 99362) (open-paren 99350 . 99351) (symbol 99340 . 99349) (VOID 99335 . 99339) (close-paren 99184 . 99185) (semantic-list 99155 . 99164) (IF 99152 . 99154) (open-paren 99148 . 99149) (close-paren 99146 . 99147) (symbol 99141 . 99146) (INT 99137 . 99140) (SHORT 99131 . 99136) (UNSIGNED 99122 . 99130) (open-paren 99121 . 99122) (symbol 99109 . 99120) (VOID 99104 . 99108) (symbol 99097 . 99103) (punctuation 98832 . 98833) (close-paren 98831 . 98832) (VOID 98827 . 98831) (open-paren 98826 . 98827) (symbol 98815 . 98825) (VOID 98810 . 98814) (EXTERN 98803 . 98809) (punctuation 98760 . 98761) (close-paren 98759 . 98760) (open-paren 97984 . 97985) (symbol 97976 . 97983) (STRUCT 97969 . 97975) (punctuation 97966 . 97967) (close-paren 97965 . 97966) (symbol 97953 . 97964) (punctuation 97951 . 97952) (symbol 97937 . 97951) (punctuation 97935 . 97936) (symbol 97928 . 97935) (open-paren 97926 . 97927) (symbol 97914 . 97925) (ENUM 97909 . 97913) (close-paren 96781 . 96782) (punctuation 96770 . 96771) (symbol 96758 . 96769) (RETURN 96751 . 96757) (open-paren 96747 . 96748) (close-paren 96745 . 96746) (VOID 96741 . 96745) (open-paren 96740 . 96741) (symbol 96726 . 96739) (symbol 96716 . 96725) (symbol 96709 . 96715) (punctuation 96532 . 96533) (close-paren 96531 . 96532) (punctuation 96398 . 96399) (symbol 96393 . 96397) (symbol "specbind_tag" 96370 . 96392) (ENUM "enum" 96370 . 96392) (punctuation 96398 . 96399) (symbol 96393 . 96397) (symbol "specbind_tag" 96370 . 96392) (ENUM "enum" 96370 . 96392) (punctuation 96078 . 96079) (symbol 96073 . 96077) (symbol "specbind_tag" 96050 . 96072) (ENUM "enum" 96050 . 96072) (punctuation 96078 . 96079) (symbol 96073 . 96077) (symbol "specbind_tag" 96050 . 96072) (ENUM "enum" 96050 . 96072) (punctuation 95973 . 95974) (symbol 95968 . 95972) (symbol "specbind_tag" 95945 . 95967) (ENUM "enum" 95945 . 95967) (punctuation 95973 . 95974) (symbol 95968 . 95972) (symbol "specbind_tag" 95945 . 95967) (ENUM "enum" 95945 . 95967) (punctuation 95856 . 95857) (symbol 95851 . 95855) (symbol "specbind_tag" 95828 . 95850) (ENUM "enum" 95828 . 95850) (punctuation 95856 . 95857) (symbol 95851 . 95855) (symbol "specbind_tag" 95828 . 95850) (ENUM "enum" 95828 . 95850) (punctuation 95738 . 95739) (symbol 95733 . 95737) (symbol "specbind_tag" 95710 . 95732) (ENUM "enum" 95710 . 95732) (punctuation 95738 . 95739) (symbol 95733 . 95737) (symbol "specbind_tag" 95710 . 95732) (ENUM "enum" 95710 . 95732) (punctuation 95615 . 95616) (symbol 95610 . 95614) (symbol "specbind_tag" 95587 . 95609) (ENUM "enum" 95587 . 95609) (punctuation 95615 . 95616) (symbol 95610 . 95614) (symbol "specbind_tag" 95587 . 95609) (ENUM "enum" 95587 . 95609) (punctuation 95487 . 95488) (symbol 95482 . 95486) (symbol "specbind_tag" 95459 . 95481) (ENUM "enum" 95459 . 95481) (punctuation 95487 . 95488) (symbol 95482 . 95486) (symbol "specbind_tag" 95459 . 95481) (ENUM "enum" 95459 . 95481) (punctuation 95357 . 95358) (symbol 95352 . 95356) (symbol "specbind_tag" 95329 . 95351) (ENUM "enum" 95329 . 95351) (punctuation 95357 . 95358) (symbol 95352 . 95356) (symbol "specbind_tag" 95329 . 95351) (ENUM "enum" 95329 . 95351) (punctuation 95298 . 95299) (symbol 95293 . 95297) (symbol "specbind_tag" 95270 . 95292) (ENUM "enum" 95270 . 95292) (open-paren 95161 . 95162) (symbol 95147 . 95158) (UNION 95141 . 95146) (punctuation 95138 . 95139) (close-paren 95137 . 95138) (symbol 95071 . 95090) (punctuation 95031 . 95032) (symbol 95014 . 95031) (punctuation 94895 . 94896) (symbol 94884 . 94895) (punctuation 94843 . 94844) (symbol 94826 . 94843) (punctuation 94791 . 94792) (symbol 94772 . 94791) (punctuation 94733 . 94734) (symbol 94709 . 94733) (punctuation 94679 . 94680) (symbol 94661 . 94679) (punctuation 94628 . 94629) (symbol 94610 . 94628) (punctuation 94508 . 94509) (symbol 94488 . 94508) (punctuation 94433 . 94434) (symbol 94419 . 94433) (open-paren 94415 . 94416) (symbol 94402 . 94414) (ENUM 94397 . 94401) (punctuation 91829 . 91830) (close-paren 91828 . 91829) (INT 91825 . 91828) (punctuation 91823 . 91824) (punctuation 91822 . 91823) (CHAR 91817 . 91821) (CONST 91811 . 91816) (punctuation 91809 . 91810) (punctuation 91808 . 91809) (symbol 91789 . 91807) (STRUCT 91782 . 91788) (open-paren 91781 . 91782) (symbol 91767 . 91780) (VOID 91762 . 91766) (EXTERN 91755 . 91761) (punctuation 91753 . 91754) (close-paren 91752 . 91753) (punctuation 91751 . 91752) (symbol 91741 . 91750) (punctuation 91739 . 91740) (punctuation 91738 . 91739) (CHAR 91733 . 91737) (CONST 91727 . 91732) (punctuation 91725 . 91726) (punctuation 91724 . 91725) (symbol 91712 . 91723) (STRUCT 91705 . 91711) (open-paren 91704 . 91705) (symbol 91693 . 91703) (VOID 91688 . 91692) (EXTERN 91681 . 91687) (punctuation 91679 . 91680) (close-paren 91678 . 91679) (punctuation 91677 . 91678) (BOOL 91672 . 91676) (punctuation 91670 . 91671) (punctuation 91669 . 91670) (CHAR 91664 . 91668) (CONST 91658 . 91663) (punctuation 91656 . 91657) (punctuation 91655 . 91656) (symbol 91642 . 91654) (STRUCT 91635 . 91641) (open-paren 91634 . 91635) (symbol 91622 . 91633) (VOID 91617 . 91621) (EXTERN 91610 . 91616) (punctuation 91608 . 91609) (close-paren 91607 . 91608) (punctuation 91606 . 91607) (symbol 91594 . 91605) (punctuation 91592 . 91593) (punctuation 91591 . 91592) (CHAR 91586 . 91590) (CONST 91580 . 91585) (punctuation 91578 . 91579) (punctuation 91577 . 91578) (symbol 91565 . 91576) (STRUCT 91558 . 91564) (open-paren 91557 . 91558) (symbol 91539 . 91556) (VOID 91534 . 91538) (EXTERN 91527 . 91533) (punctuation 91525 . 91526) (close-paren 91524 . 91525) (punctuation 91523 . 91524) (symbol 91511 . 91522) (punctuation 91509 . 91510) (punctuation 91508 . 91509) (CHAR 91503 . 91507) (CONST 91497 . 91502) (punctuation 91495 . 91496) (punctuation 91494 . 91495) (symbol 91482 . 91493) (STRUCT 91475 . 91481) (open-paren 91474 . 91475) (symbol 91462 . 91473) (VOID 91457 . 91461) (EXTERN 91450 . 91456) (punctuation 90946 . 90947) (close-paren 90945 . 90946) (number 90941 . 90942) (punctuation 90940 . 90941) (punctuation 90938 . 90939) (symbol 90928 . 90937) (punctuation 90922 . 90923) (number 90921 . 90922) (punctuation 90920 . 90921) (punctuation 90918 . 90919) (symbol 90913 . 90917) (open-paren 90907 . 90908) (symbol 90897 . 90904) (ENUM 90892 . 90896) (punctuation 90889 . 90890) (close-paren 90888 . 90889) (punctuation 90887 . 90888) (symbol 90877 . 90886) (STRUCT 90870 . 90876) (open-paren 90869 . 90870) (symbol 90861 . 90868) (VOID 90856 . 90860) (EXTERN 90849 . 90855) (close-paren 89007 . 89008) (open-paren 88933 . 88934) (close-paren 88931 . 88932) (symbol 88930 . 88931) (symbol 88918 . 88929) (open-paren 88917 . 88918) (symbol 88900 . 88916) (VOID 88895 . 88899) (symbol 88888 . 88894) (close-paren 88885 . 88886) (open-paren 88811 . 88812) (close-paren 88809 . 88810) (symbol 88808 . 88809) (symbol 88796 . 88807) (open-paren 88795 . 88796) (symbol 88778 . 88794) (VOID 88773 . 88777) (symbol 88766 . 88772) (close-paren 88149 . 88150) (semantic-list 88130 . 88133) (open-paren 88105 . 88106) (close-paren 88103 . 88104) (symbol 88102 . 88103) (symbol 88090 . 88101) (open-paren 88089 . 88090) (symbol 88075 . 88088) (VOID 88070 . 88074) (symbol 88063 . 88069) (close-paren 88060 . 88061) (semantic-list 88041 . 88044) (open-paren 88017 . 88018) (close-paren 88015 . 88016) (symbol 88014 . 88015) (symbol 88002 . 88013) (open-paren 88001 . 88002) (symbol 87988 . 88000) (VOID 87983 . 87987) (symbol 87976 . 87982) (close-paren 87973 . 87974) (punctuation 87971 . 87972) (semantic-list 87884 . 87971) (RETURN 87877 . 87883) (open-paren 87873 . 87874) (close-paren 87871 . 87872) (symbol 87870 . 87871) (symbol 87858 . 87869) (open-paren 87857 . 87858) (symbol 87847 . 87856) (DOUBLE 87840 . 87846) (symbol 87833 . 87839) (close-paren 86933 . 86934) (semantic-list 86912 . 86915) (open-paren 86888 . 86889) (close-paren 86886 . 86887) (symbol 86885 . 86886) (symbol 86873 . 86884) (open-paren 86872 . 86873) (symbol 86859 . 86871) (VOID 86854 . 86858) (symbol 86847 . 86853) (close-paren 86845 . 86846) (semantic-list 86825 . 86828) (open-paren 86802 . 86803) (close-paren 86800 . 86801) (symbol 86791 . 86800) (symbol 86779 . 86790) (punctuation 86777 . 86778) (symbol 86776 . 86777) (symbol 86764 . 86775) (open-paren 86763 . 86764) (symbol 86751 . 86762) (VOID 86746 . 86750) (symbol 86739 . 86745) (close-paren 86737 . 86738) (RETURN 86682 . 86688) (semantic-list 86664 . 86677) (IF 86661 . 86663) (RETURN 86641 . 86647) (semantic-list 86623 . 86636) (IF 86620 . 86622) (open-paren 86616 . 86617) (close-paren 86614 . 86615) (symbol 86613 . 86614) (symbol 86601 . 86612) (open-paren 86600 . 86601) (symbol 86577 . 86599) (symbol 86567 . 86576) (symbol 86560 . 86566) (close-paren 86489 . 86490) (semantic-list 86483 . 86486) (semantic-list 86456 . 86466) (open-paren 86432 . 86433) (close-paren 86430 . 86431) (symbol 86429 . 86430) (symbol 86417 . 86428) (open-paren 86416 . 86417) (symbol 86399 . 86415) (VOID 86394 . 86398) (symbol 86387 . 86393) (close-paren 86384 . 86385) (open-paren 86355 . 86356) (close-paren 86353 . 86354) (symbol 86352 . 86353) (symbol 86340 . 86351) (open-paren 86339 . 86340) (close-paren 86337 . 86338) (symbol 86325 . 86337) (open-paren 86324 . 86325) (VOID 86319 . 86323) (symbol 86312 . 86318) (close-paren 86309 . 86310) (semantic-list 86292 . 86295) (open-paren 86271 . 86272) (close-paren 86269 . 86270) (symbol 86268 . 86269) (symbol 86256 . 86267) (punctuation 86254 . 86255) (symbol 86253 . 86254) (symbol 86241 . 86252) (open-paren 86240 . 86241) (symbol 86225 . 86239) (VOID 86220 . 86224) (symbol 86213 . 86219) (close-paren 86210 . 86211) (semantic-list 86193 . 86196) (punctuation 86186 . 86187) (punctuation 86185 . 86186) (semantic-list 86181 . 86184) (open-paren 86159 . 86160) (close-paren 86157 . 86158) (symbol 86156 . 86157) (symbol 86144 . 86155) (open-paren 86143 . 86144) (symbol 86132 . 86142) (VOID 86127 . 86131) (symbol 86120 . 86126) (close-paren 86116 . 86117) (punctuation 86095 . 86096) (punctuation 86094 . 86095) (semantic-list 86090 . 86093) (symbol 86077 . 86089) (punctuation 86075 . 86076) (punctuation 86074 . 86075) (semantic-list 86070 . 86073) (symbol 86062 . 86069) (punctuation 86060 . 86061) (punctuation 86059 . 86060) (semantic-list 86055 . 86058) (symbol 86047 . 86054) (RETURN 86040 . 86046) (open-paren 86036 . 86037) (close-paren 86034 . 86035) (symbol 86033 . 86034) (symbol 86021 . 86032) (open-paren 86020 . 86021) (symbol 86013 . 86019) (BOOL 86008 . 86012) (symbol 86001 . 86007) (close-paren 85978 . 85979) (punctuation 85952 . 85953) (semantic-list 85948 . 85951) (symbol 85942 . 85947) (RETURN 85935 . 85941) (open-paren 85931 . 85932) (close-paren 85929 . 85930) (symbol 85928 . 85929) (symbol 85916 . 85927) (open-paren 85915 . 85916) (symbol 85908 . 85914) (BOOL 85903 . 85907) (symbol 85896 . 85902) (close-paren 85856 . 85857) (semantic-list 85837 . 85840) (open-paren 85813 . 85814) (close-paren 85811 . 85812) (symbol 85810 . 85811) (symbol 85798 . 85809) (open-paren 85797 . 85798) (symbol 85784 . 85796) (VOID 85779 . 85783) (symbol 85772 . 85778) (close-paren 85769 . 85770) (RETURN 85730 . 85736) (open-paren 85726 . 85727) (close-paren 85724 . 85725) (symbol 85723 . 85724) (symbol 85711 . 85722) (open-paren 85710 . 85711) (symbol 85702 . 85709) (BOOL 85697 . 85701) (symbol 85690 . 85696) (close-paren 85687 . 85688) (RETURN 85649 . 85655) (open-paren 85645 . 85646) (close-paren 85643 . 85644) (symbol 85642 . 85643) (symbol 85630 . 85641) (open-paren 85629 . 85630) (symbol 85622 . 85628) (BOOL 85617 . 85621) (symbol 85610 . 85616) (close-paren 85607 . 85608) (RETURN 85566 . 85572) (open-paren 85562 . 85563) (close-paren 85560 . 85561) (symbol 85559 . 85560) (symbol 85547 . 85558) (open-paren 85546 . 85547) (symbol 85536 . 85545) (BOOL 85531 . 85535) (symbol 85524 . 85530) (close-paren 85521 . 85522) (RETURN 85468 . 85474) (open-paren 85464 . 85465) (close-paren 85462 . 85463) (symbol 85461 . 85462) (symbol 85449 . 85460) (open-paren 85448 . 85449) (symbol 85426 . 85447) (BOOL 85421 . 85425) (symbol 85414 . 85420) (close-paren 85364 . 85365) (punctuation 85335 . 85336) (semantic-list 85331 . 85334) (symbol 85325 . 85330) (RETURN 85318 . 85324) (open-paren 85314 . 85315) (close-paren 85312 . 85313) (symbol 85311 . 85312) (symbol 85299 . 85310) (open-paren 85298 . 85299) (symbol 85288 . 85297) (BOOL 85283 . 85287) (symbol 85276 . 85282) (close-paren 85081 . 85082) (punctuation 85075 . 85076) (punctuation 85074 . 85075) (semantic-list 85070 . 85073) (symbol 85062 . 85069) (punctuation 85060 . 85061) (punctuation 85059 . 85060) (semantic-list 85055 . 85058) (symbol 85047 . 85054) (punctuation 85045 . 85046) (punctuation 85044 . 85045) (symbol 85041 . 85043) (punctuation 85039 . 85040) (punctuation 85038 . 85039) (semantic-list 85034 . 85037) (symbol 85026 . 85033) (RETURN 85019 . 85025) (open-paren 85015 . 85016) (close-paren 85013 . 85014) (symbol 85011 . 85013) (symbol 85002 . 85010) (punctuation 85000 . 85001) (symbol 84999 . 85000) (symbol 84987 . 84998) (punctuation 84985 . 84986) (symbol 84983 . 84985) (symbol 84974 . 84982) (open-paren 84973 . 84974) (symbol 84958 . 84972) (BOOL 84953 . 84957) (symbol 84946 . 84952) (close-paren 84943 . 84944) (punctuation 84929 . 84930) (punctuation 84928 . 84929) (semantic-list 84924 . 84927) (symbol 84915 . 84923) (RETURN 84908 . 84914) (open-paren 84904 . 84905) (close-paren 84902 . 84903) (symbol 84901 . 84902) (symbol 84889 . 84900) (open-paren 84888 . 84889) (symbol 84880 . 84887) (BOOL 84875 . 84879) (symbol 84868 . 84874) (close-paren 84866 . 84867) (punctuation 84851 . 84852) (punctuation 84850 . 84851) (number 84848 . 84849) (punctuation 84846 . 84847) (punctuation 84845 . 84846) (semantic-list 84841 . 84844) (symbol 84833 . 84840) (RETURN 84826 . 84832) (open-paren 84822 . 84823) (close-paren 84820 . 84821) (symbol 84819 . 84820) (symbol 84807 . 84818) (open-paren 84806 . 84807) (symbol 84798 . 84805) (BOOL 84793 . 84797) (symbol 84786 . 84792) (punctuation 84754 . 84755) (close-paren 84753 . 84754) (number 84748 . 84750) (punctuation 84746 . 84747) (symbol 84732 . 84745) (punctuation 84634 . 84635) (symbol 84625 . 84634) (punctuation 84623 . 84624) (symbol 84614 . 84622) (punctuation 84612 . 84613) (symbol 84601 . 84611) (punctuation 84599 . 84600) (symbol 84588 . 84598) (punctuation 84586 . 84587) (symbol 84575 . 84585) (punctuation 84573 . 84574) (symbol 84564 . 84572) (punctuation 84556 . 84557) (symbol 84537 . 84555) (punctuation 84530 . 84531) (number 84521 . 84530) (punctuation 84519 . 84520) (symbol 84509 . 84518) (punctuation 84503 . 84504) (number 84494 . 84503) (punctuation 84492 . 84493) (symbol 84483 . 84491) (punctuation 84477 . 84478) (number 84468 . 84477) (punctuation 84466 . 84467) (symbol 84455 . 84465) (punctuation 84449 . 84450) (number 84440 . 84449) (punctuation 84438 . 84439) (symbol 84427 . 84437) (punctuation 84421 . 84422) (number 84412 . 84421) (punctuation 84410 . 84411) (symbol 84399 . 84409) (punctuation 84393 . 84394) (number 84384 . 84393) (punctuation 84382 . 84383) (symbol 84373 . 84381) (open-paren 84367 . 84368) (symbol 84355 . 84364) (ENUM 84350 . 84354) (punctuation 84080 . 84081) (close-paren 84079 . 84080) (number 84075 . 84076) (punctuation 84073 . 84074) (symbol 84052 . 84072) (punctuation 84046 . 84047) (number 84045 . 84046) (punctuation 84043 . 84044) (symbol 84023 . 84042) (punctuation 84017 . 84018) (number 84016 . 84017) (punctuation 84014 . 84015) (symbol 83993 . 84013) (punctuation 83987 . 83988) (number 83986 . 83987) (punctuation 83984 . 83985) (symbol 83965 . 83983) (punctuation 83959 . 83960) (number 83958 . 83959) (punctuation 83956 . 83957) (symbol 83938 . 83955) (punctuation 83932 . 83933) (number 83931 . 83932) (punctuation 83929 . 83930) (symbol 83912 . 83928) (open-paren 83906 . 83907) (symbol 83890 . 83903) (ENUM 83885 . 83889) (close-paren 83016 . 83017) (punctuation 83009 . 83010) (symbol 83008 . 83009) (punctuation 83007 . 83008) (punctuation 83006 . 83007) (semantic-list 83003 . 83006) (symbol 82996 . 83002) (RETURN 82989 . 82995) (open-paren 82985 . 82986) (close-paren 82983 . 82984) (symbol 82982 . 82983) (symbol 82970 . 82981) (open-paren 82969 . 82970) (symbol 82957 . 82968) (DOUBLE 82950 . 82956) (symbol 82943 . 82949) (close-paren 82940 . 82941) (punctuation 82938 . 82939) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 82920 . 82926) ("type" symbol "Lisp_Float" 82908 . 82918) ("a" symbol "a" 82905 . 82906)))) 82897 . 82938) (RETURN 82890 . 82896) (punctuation 82886 . 82887) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 82875 . 82881)))) 82866 . 82886) (open-paren 82862 . 82863) (close-paren 82860 . 82861) (symbol 82859 . 82860) (symbol 82847 . 82858) (open-paren 82846 . 82847) (symbol 82839 . 82845) (punctuation 82837 . 82838) (symbol 82826 . 82836) (STRUCT 82819 . 82825) (symbol 82812 . 82818) (close-paren 82809 . 82810) (RETURN 82783 . 82789) (open-paren 82779 . 82780) (close-paren 82777 . 82778) (symbol 82776 . 82777) (symbol 82764 . 82775) (open-paren 82763 . 82764) (close-paren 82761 . 82762) (symbol 82755 . 82761) (open-paren 82754 . 82755) (BOOL 82749 . 82753) (symbol 82742 . 82748) (punctuation 82739 . 82740) (close-paren 82721 . 82722) (open-paren 82641 . 82642) (symbol 82628 . 82638) (STRUCT 82621 . 82627) (close-paren 82584 . 82585) (punctuation 82566 . 82567) (punctuation 82565 . 82566) (symbol 82564 . 82565) (punctuation 82563 . 82564) (RETURN 82556 . 82562) (punctuation 82552 . 82553) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 82533 . 82547)))) 82524 . 82552) (open-paren 82520 . 82521) (close-paren 82518 . 82519) (symbol 82517 . 82518) (punctuation 82516 . 82517) (symbol 82507 . 82515) (UNION 82501 . 82506) (open-paren 82500 . 82501) (symbol 82485 . 82499) (punctuation 82483 . 82484) (symbol 82464 . 82482) (STRUCT 82457 . 82463) (symbol 82450 . 82456) (close-paren 82447 . 82448) (punctuation 82424 . 82425) (punctuation 82423 . 82424) (semantic-list 82419 . 82422) (symbol 82410 . 82418) (RETURN 82403 . 82409) (open-paren 82399 . 82400) (close-paren 82397 . 82398) (symbol 82396 . 82397) (punctuation 82395 . 82396) (symbol 82386 . 82394) (UNION 82380 . 82385) (open-paren 82379 . 82380) (symbol 82364 . 82378) (BOOL 82359 . 82363) (symbol 82352 . 82358) (close-paren 82349 . 82350) (punctuation 82342 . 82343) (symbol 82334 . 82342) (punctuation 82333 . 82334) (punctuation 82332 . 82333) (symbol 82331 . 82332) (RETURN 82324 . 82330) (open-paren 82320 . 82321) (close-paren 82318 . 82319) (symbol 82317 . 82318) (punctuation 82316 . 82317) (symbol 82307 . 82315) (UNION 82301 . 82306) (open-paren 82300 . 82301) (symbol 82291 . 82299) (symbol 82277 . 82290) (ENUM 82272 . 82276) (symbol 82265 . 82271) (punctuation 82262 . 82263) (close-paren 82261 . 82262) (open-paren 82062 . 82063) (symbol 82051 . 82059) (UNION 82045 . 82050) (punctuation 82042 . 82043) (close-paren 82041 . 82042) (open-paren 81964 . 81965) (symbol 81943 . 81961) (STRUCT 81936 . 81942) (punctuation 81849 . 81850) (close-paren 81848 . 81849) (open-paren 80903 . 80904) (symbol 80877 . 80900) (STRUCT 80870 . 80876) (punctuation 79793 . 79794) (close-paren 79792 . 79793) (open-paren 79613 . 79614) (symbol 79592 . 79610) (STRUCT 79585 . 79591) (punctuation 79454 . 79455) (close-paren 79453 . 79454) (open-paren 79374 . 79375) (symbol 79360 . 79371) (STRUCT 79353 . 79359) (punctuation 79159 . 79160) (close-paren 79158 . 79159) (open-paren 79084 . 79085) (symbol 79069 . 79081) (STRUCT 79062 . 79068) (punctuation 78867 . 78868) (close-paren 78866 . 78867) (open-paren 78789 . 78790) (symbol 78775 . 78786) (STRUCT 78768 . 78774) (close-paren 78412 . 78413) (punctuation 78393 . 78394) (semantic-list 78389 . 78392) (symbol 78376 . 78388) (punctuation 78374 . 78375) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78371 . 78372)))) 78352 . 78373) (RETURN 78345 . 78351) (open-paren 78341 . 78342) (close-paren 78339 . 78340) (symbol 78338 . 78339) (symbol 78328 . 78337) (open-paren 78327 . 78328) (symbol 78317 . 78326) (symbol 78305 . 78316) (symbol 78298 . 78304) (close-paren 78296 . 78297) (punctuation 78277 . 78278) (semantic-list 78273 . 78276) (symbol 78261 . 78272) (punctuation 78259 . 78260) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78256 . 78257)))) 78237 . 78258) (RETURN 78230 . 78236) (open-paren 78226 . 78227) (close-paren 78224 . 78225) (symbol 78223 . 78224) (symbol 78214 . 78222) (open-paren 78213 . 78214) (symbol 78204 . 78212) (symbol 78192 . 78203) (symbol 78185 . 78191) (close-paren 78128 . 78129) (punctuation 78113 . 78114) (punctuation 78112 . 78113) (semantic-list 78108 . 78111) (symbol 78100 . 78107) (RETURN 78093 . 78099) (open-paren 78089 . 78090) (close-paren 78087 . 78088) (symbol 78086 . 78087) (symbol 78074 . 78085) (open-paren 78073 . 78074) (symbol 78064 . 78072) (BOOL 78059 . 78063) (symbol 78052 . 78058) (close-paren 78049 . 78050) (RETURN 78010 . 78016) (open-paren 78006 . 78007) (close-paren 78004 . 78005) (symbol 78003 . 78004) (symbol 77991 . 78002) (open-paren 77990 . 77991) (symbol 77982 . 77989) (BOOL 77977 . 77981) (symbol 77970 . 77976) (close-paren 77706 . 77707) (punctuation 77704 . 77705) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77684 . 77690) ("type" symbol "Lisp_Vectorlike" 77667 . 77682) ("a" symbol "a" 77664 . 77665)))) 77656 . 77704) (RETURN 77649 . 77655) (punctuation 77645 . 77646) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 77632 . 77640)))) 77623 . 77645) (open-paren 77619 . 77620) (close-paren 77617 . 77618) (symbol 77616 . 77617) (symbol 77604 . 77615) (open-paren 77603 . 77604) (symbol 77594 . 77602) (punctuation 77592 . 77593) (symbol 77579 . 77591) (STRUCT 77572 . 77578) (symbol 77565 . 77571) (close-paren 77562 . 77563) (RETURN 77522 . 77528) (open-paren 77518 . 77519) (close-paren 77516 . 77517) (symbol 77515 . 77516) (symbol 77503 . 77514) (open-paren 77502 . 77503) (symbol 77493 . 77501) (BOOL 77488 . 77492) (symbol 77481 . 77487) (close-paren 77478 . 77479) (punctuation 77476 . 77477) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77457 . 77463) ("type" symbol "Lisp_Vectorlike" 77440 . 77455) ("a" symbol "a" 77437 . 77438)))) 77429 . 77476) (RETURN 77422 . 77428) (punctuation 77418 . 77419) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 77406 . 77413)))) 77397 . 77418) (open-paren 77393 . 77394) (close-paren 77391 . 77392) (symbol 77390 . 77391) (symbol 77378 . 77389) (open-paren 77377 . 77378) (symbol 77369 . 77376) (punctuation 77367 . 77368) (symbol 77355 . 77366) (STRUCT 77348 . 77354) (symbol 77341 . 77347) (close-paren 77338 . 77339) (RETURN 77299 . 77305) (open-paren 77295 . 77296) (close-paren 77293 . 77294) (symbol 77292 . 77293) (symbol 77280 . 77291) (open-paren 77279 . 77280) (symbol 77271 . 77278) (BOOL 77266 . 77270) (symbol 77259 . 77265) (close-paren 77256 . 77257) (punctuation 77254 . 77255) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77232 . 77238) ("type" symbol "Lisp_Vectorlike" 77215 . 77230) ("a" symbol "a" 77212 . 77213)))) 77204 . 77254) (RETURN 77197 . 77203) (punctuation 77193 . 77194) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 77178 . 77188)))) 77169 . 77193) (open-paren 77165 . 77166) (close-paren 77163 . 77164) (symbol 77162 . 77163) (symbol 77150 . 77161) (open-paren 77149 . 77150) (symbol 77138 . 77148) (punctuation 77136 . 77137) (symbol 77121 . 77135) (STRUCT 77114 . 77120) (symbol 77107 . 77113) (close-paren 77104 . 77105) (RETURN 77062 . 77068) (open-paren 77058 . 77059) (close-paren 77056 . 77057) (symbol 77055 . 77056) (symbol 77043 . 77054) (open-paren 77042 . 77043) (symbol 77031 . 77041) (BOOL 77026 . 77030) (symbol 77019 . 77025) (punctuation 77016 . 77017) (close-paren 76998 . 76999) (open-paren 76605 . 76606) (symbol 76588 . 76602) (STRUCT 76581 . 76587) (close-paren 76403 . 76404) (punctuation 76393 . 76394) (punctuation 76392 . 76393) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 76371 . 76377) ("type" symbol "Lisp_Vectorlike" 76354 . 76369) ("a" symbol "a" 76351 . 76352)))) 76343 . 76392) (RETURN 76336 . 76342) (RETURN 76311 . 76317) (semantic-list 76293 . 76306) (IF 76290 . 76292) (punctuation 76286 . 76287) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "mint_ptrp" 76272 . 76281)))) 76263 . 76286) (open-paren 76259 . 76260) (close-paren 76257 . 76258) (symbol 76256 . 76257) (symbol 76244 . 76255) (open-paren 76243 . 76244) (symbol 76229 . 76242) (punctuation 76227 . 76228) (VOID 76222 . 76226) (symbol 76215 . 76221) (close-paren 76212 . 76213) (punctuation 76176 . 76177) (punctuation 76175 . 76176) (semantic-list 76171 . 76174) (symbol 76163 . 76170) (RETURN 76156 . 76162) (open-paren 76152 . 76153) (close-paren 76150 . 76151) (symbol 76149 . 76150) (symbol 76137 . 76148) (open-paren 76136 . 76137) (symbol 76126 . 76135) (BOOL 76121 . 76125) (symbol 76114 . 76120) (close-paren 76111 . 76112) (punctuation 76090 . 76091) (symbol 76086 . 76089) (punctuation 76084 . 76085) (symbol 76082 . 76083) (punctuation 76080 . 76081) (punctuation 76079 . 76080) (semantic-list 76073 . 76078) (symbol 76062 . 76072) (punctuation 76060 . 76061) (punctuation 76059 . 76060) (semantic-list 76053 . 76058) (symbol 76045 . 76052) (RETURN 76038 . 76044) (open-paren 75990 . 75991) (close-paren 75988 . 75989) (symbol 75987 . 75988) (punctuation 75986 . 75987) (VOID 75981 . 75985) (open-paren 75980 . 75981) (symbol 75966 . 75979) (symbol 75954 . 75965) (symbol 75947 . 75953) (punctuation 75089 . 75090) (close-paren 75088 . 75089) (punctuation 75087 . 75088) (VOID 75082 . 75086) (open-paren 75081 . 75082) (symbol 75067 . 75080) (symbol 75055 . 75066) (EXTERN 75048 . 75054) (punctuation 75045 . 75046) (close-paren 75027 . 75028) (open-paren 74968 . 74969) (symbol 74952 . 74965) (STRUCT 74945 . 74951) (punctuation 74942 . 74943) (close-paren 74924 . 74925) (open-paren 74786 . 74787) (symbol 74287 . 74299) (STRUCT 74280 . 74286) (punctuation 74174 . 74175) (close-paren 74156 . 74157) (open-paren 72365 . 72366) (symbol 72353 . 72364) (STRUCT 72346 . 72352) (close-paren 72343 . 72344) (punctuation 72341 . 72342) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 72334 . 72341) (punctuation 72332 . 72333) (semantic-list 72289 . 72331) (RETURN 72282 . 72288) (open-paren 72278 . 72279) (close-paren 72276 . 72277) (symbol 72275 . 72276) (symbol 72264 . 72274) (open-paren 72263 . 72264) (symbol 72249 . 72262) (symbol 72238 . 72248) (symbol 72231 . 72237) (close-paren 72169 . 72170) (punctuation 72164 . 72165) (semantic-list 72135 . 72163) (punctuation 72133 . 72134) (semantic-list 72124 . 72132) (RETURN 72117 . 72123) (open-paren 72113 . 72114) (close-paren 72111 . 72112) (symbol 72110 . 72111) (symbol 72099 . 72109) (punctuation 72097 . 72098) (symbol 72096 . 72097) (symbol 72085 . 72095) (open-paren 72084 . 72085) (symbol 72069 . 72083) (symbol 72058 . 72068) (symbol 72051 . 72057) (punctuation 71595 . 71596) (close-paren 71594 . 71595) (number 71591 . 71593) (punctuation 71589 . 71590) (symbol 71571 . 71588) (open-paren 71569 . 71570) (symbol 71551 . 71568) (ENUM 71546 . 71550) (close-paren 71488 . 71489) (punctuation 71480 . 71481) (punctuation 71479 . 71480) (RETURN 71464 . 71470) (open-paren 71460 . 71461) (close-paren 71458 . 71459) (symbol 71457 . 71458) (punctuation 71456 . 71457) (symbol 71440 . 71455) (STRUCT 71433 . 71439) (open-paren 71432 . 71433) (symbol 71416 . 71431) (symbol 71406 . 71415) (symbol 71399 . 71405) (close-paren 71354 . 71355) (punctuation 71341 . 71342) (punctuation 71340 . 71341) (RETURN 71326 . 71332) (open-paren 71322 . 71323) (close-paren 71320 . 71321) (symbol 71317 . 71320) (symbol 71307 . 71316) (punctuation 71305 . 71306) (symbol 71304 . 71305) (punctuation 71303 . 71304) (symbol 71287 . 71302) (STRUCT 71280 . 71286) (open-paren 71279 . 71280) (symbol 71269 . 71278) (symbol 71257 . 71268) (symbol 71250 . 71256) (close-paren 71177 . 71178) (number 71173 . 71174) (punctuation 71171 . 71172) (punctuation 71165 . 71166) (number 71163 . 71164) (punctuation 71147 . 71148) (punctuation 71146 . 71147) (RETURN 71132 . 71138) (open-paren 71128 . 71129) (close-paren 71126 . 71127) (symbol 71123 . 71126) (symbol 71113 . 71122) (punctuation 71111 . 71112) (symbol 71110 . 71111) (punctuation 71109 . 71110) (symbol 71093 . 71108) (STRUCT 71086 . 71092) (open-paren 71085 . 71086) (symbol 71074 . 71084) (symbol 71062 . 71073) (symbol 71055 . 71061) (close-paren 70991 . 70992) (punctuation 70983 . 70984) (number 70981 . 70982) (punctuation 70965 . 70966) (punctuation 70964 . 70965) (RETURN 70950 . 70956) (open-paren 70946 . 70947) (close-paren 70944 . 70945) (symbol 70941 . 70944) (symbol 70931 . 70940) (punctuation 70929 . 70930) (symbol 70928 . 70929) (punctuation 70927 . 70928) (symbol 70911 . 70926) (STRUCT 70904 . 70910) (open-paren 70903 . 70904) (symbol 70894 . 70902) (symbol 70882 . 70893) (symbol 70875 . 70881) (close-paren 70724 . 70725) (punctuation 70722 . 70723) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 70699 . 70705) ("type" symbol "Lisp_Vectorlike" 70682 . 70697) ("a" symbol "a" 70679 . 70680)))) 70671 . 70722) (RETURN 70664 . 70670) (punctuation 70660 . 70661) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 70643 . 70655)))) 70634 . 70660) (open-paren 70630 . 70631) (close-paren 70628 . 70629) (symbol 70627 . 70628) (symbol 70615 . 70626) (open-paren 70614 . 70615) (symbol 70602 . 70613) (punctuation 70600 . 70601) (symbol 70584 . 70599) (STRUCT 70577 . 70583) (symbol 70570 . 70576) (close-paren 70567 . 70568) (RETURN 70524 . 70530) (open-paren 70520 . 70521) (close-paren 70518 . 70519) (symbol 70517 . 70518) (symbol 70505 . 70516) (open-paren 70504 . 70505) (symbol 70491 . 70503) (BOOL 70486 . 70490) (symbol 70479 . 70485) (punctuation 70476 . 70477) (close-paren 70475 . 70476) (symbol 70464 . 70475) (punctuation 70462 . 70463) (punctuation 70461 . 70462) (semantic-list 70430 . 70460) (symbol 70421 . 70429) (open-paren 70420 . 70421) (symbol 70413 . 70419) (punctuation 70369 . 70370) (close-paren 70351 . 70352) (open-paren 68115 . 68116) (symbol 68099 . 68114) (STRUCT 68092 . 68098) (punctuation 68089 . 68090) (close-paren 68088 . 68089) (open-paren 67622 . 67623) (symbol 67606 . 67621) (STRUCT 67599 . 67605) (close-paren 67233 . 67234) (punctuation 67231 . 67232) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 67227 . 67230)))) 67201 . 67231) (RETURN 67194 . 67200) (open-paren 67190 . 67191) (close-paren 67188 . 67189) (symbol 67185 . 67188) (symbol 67173 . 67184) (open-paren 67172 . 67173) (close-paren 67170 . 67171) (symbol 67153 . 67170) (open-paren 67152 . 67153) (INT 67148 . 67151) (symbol 67141 . 67147) (close-paren 66917 . 66918) (punctuation 66915 . 66916) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 66911 . 66914)))) 66880 . 66915) (RETURN 66873 . 66879) (open-paren 66869 . 66870) (close-paren 66867 . 66868) (symbol 66864 . 66867) (symbol 66852 . 66863) (open-paren 66851 . 66852) (close-paren 66849 . 66850) (symbol 66827 . 66849) (open-paren 66826 . 66827) (INT 66822 . 66825) (symbol 66815 . 66821) (close-paren 66648 . 66649) (punctuation 66610 . 66611) (punctuation 66609 . 66610) (symbol 66600 . 66608) (punctuation 66599 . 66600) (symbol 66598 . 66599) (punctuation 66597 . 66598) (symbol 66596 . 66597) (punctuation 66595 . 66596) (punctuation 66594 . 66595) (semantic-list 66589 . 66594) (symbol 66581 . 66588) (RETURN 66574 . 66580) (open-paren 66570 . 66571) (close-paren 66568 . 66569) (symbol 66565 . 66568) (symbol 66553 . 66564) (open-paren 66552 . 66553) (symbol 66515 . 66551) (BOOL 66510 . 66514) (symbol 66503 . 66509) (close-paren 66439 . 66440) (punctuation 66418 . 66419) (punctuation 66417 . 66418) (symbol 66408 . 66416) (punctuation 66407 . 66408) (symbol 66406 . 66407) (punctuation 66405 . 66406) (symbol 66404 . 66405) (punctuation 66403 . 66404) (punctuation 66402 . 66403) (semantic-list 66397 . 66402) (symbol 66389 . 66396) (RETURN 66382 . 66388) (open-paren 66378 . 66379) (close-paren 66376 . 66377) (symbol 66373 . 66376) (symbol 66361 . 66372) (open-paren 66360 . 66361) (symbol 66342 . 66359) (BOOL 66337 . 66341) (symbol 66330 . 66336) (close-paren 66275 . 66276) (punctuation 66268 . 66269) (symbol 66267 . 66268) (punctuation 66266 . 66267) (symbol 66265 . 66266) (punctuation 66264 . 66265) (punctuation 66263 . 66264) (semantic-list 66258 . 66263) (symbol 66250 . 66257) (RETURN 66243 . 66249) (open-paren 66239 . 66240) (close-paren 66237 . 66238) (symbol 66234 . 66237) (symbol 66222 . 66233) (open-paren 66221 . 66222) (symbol 66209 . 66220) (symbol 66197 . 66208) (symbol 66190 . 66196) (close-paren 66187 . 66188) (punctuation 66177 . 66178) (symbol 66174 . 66177) (punctuation 66173 . 66174) (symbol 66172 . 66173) (punctuation 66171 . 66172) (symbol 66170 . 66171) (punctuation 66169 . 66170) (punctuation 66168 . 66169) (symbol 66165 . 66168) (open-paren 66105 . 66106) (close-paren 66103 . 66104) (symbol 66102 . 66103) (punctuation 66101 . 66102) (symbol 66092 . 66100) (UNION 66086 . 66091) (punctuation 66084 . 66085) (symbol 66081 . 66084) (punctuation 66080 . 66081) (symbol 66068 . 66079) (STRUCT 66061 . 66067) (open-paren 66060 . 66061) (symbol 66045 . 66059) (VOID 66040 . 66044) (symbol 66033 . 66039) (close-paren 66031 . 66032) (punctuation 66021 . 66022) (symbol 66018 . 66021) (punctuation 66017 . 66018) (symbol 66016 . 66017) (punctuation 66015 . 66016) (symbol 66014 . 66015) (punctuation 66013 . 66014) (punctuation 66012 . 66013) (symbol 66009 . 66012) (open-paren 65949 . 65950) (close-paren 65947 . 65948) (symbol 65946 . 65947) (punctuation 65945 . 65946) (symbol 65921 . 65944) (STRUCT 65914 . 65920) (punctuation 65912 . 65913) (symbol 65909 . 65912) (punctuation 65908 . 65909) (symbol 65896 . 65907) (STRUCT 65889 . 65895) (open-paren 65888 . 65889) (symbol 65873 . 65887) (VOID 65868 . 65872) (symbol 65861 . 65867) (close-paren 65859 . 65860) (punctuation 65847 . 65848) (symbol 65844 . 65847) (punctuation 65843 . 65844) (symbol 65842 . 65843) (punctuation 65841 . 65842) (symbol 65840 . 65841) (punctuation 65839 . 65840) (punctuation 65838 . 65839) (symbol 65835 . 65838) (open-paren 65776 . 65777) (close-paren 65774 . 65775) (symbol 65773 . 65774) (punctuation 65772 . 65773) (symbol 65760 . 65771) (STRUCT 65753 . 65759) (punctuation 65751 . 65752) (symbol 65748 . 65751) (punctuation 65747 . 65748) (symbol 65735 . 65746) (STRUCT 65728 . 65734) (open-paren 65727 . 65728) (symbol 65710 . 65726) (VOID 65705 . 65709) (symbol 65698 . 65704) (close-paren 65695 . 65696) (punctuation 65693 . 65694) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 65691 . 65692) ("sym" symbol "sym" 65686 . 65689)))) 65663 . 65693) (open-paren 65659 . 65660) (close-paren 65657 . 65658) (symbol 65656 . 65657) (symbol 65644 . 65655) (punctuation 65642 . 65643) (symbol 65639 . 65642) (punctuation 65638 . 65639) (symbol 65626 . 65637) (STRUCT 65619 . 65625) (open-paren 65618 . 65619) (close-paren 65616 . 65617) (symbol 65602 . 65616) (open-paren 65601 . 65602) (VOID 65596 . 65600) (symbol 65589 . 65595) (close-paren 65586 . 65587) (punctuation 65580 . 65581) (symbol 65577 . 65580) (punctuation 65576 . 65577) (symbol 65575 . 65576) (punctuation 65574 . 65575) (symbol 65573 . 65574) (punctuation 65572 . 65573) (punctuation 65571 . 65572) (symbol 65568 . 65571) (RETURN 65561 . 65567) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 66574 . 66580) (open-paren 66570 . 66571) (close-paren 66568 . 66569) (symbol 66565 . 66568) (symbol 66553 . 66564) (open-paren 66552 . 66553) (symbol 66515 . 66551) (BOOL 66510 . 66514) (symbol 66503 . 66509) (close-paren 66439 . 66440) (punctuation 66418 . 66419) (punctuation 66417 . 66418) (symbol 66408 . 66416) (punctuation 66407 . 66408) (symbol 66406 . 66407) (punctuation 66405 . 66406) (symbol 66404 . 66405) (punctuation 66403 . 66404) (punctuation 66402 . 66403) (semantic-list 66397 . 66402) (symbol 66389 . 66396) (RETURN 66382 . 66388) (open-paren 66378 . 66379) (close-paren 66376 . 66377) (symbol 66373 . 66376) (symbol 66361 . 66372) (open-paren 66360 . 66361) (symbol 66342 . 66359) (BOOL 66337 . 66341) (symbol 66330 . 66336) (close-paren 66275 . 66276) (punctuation 66268 . 66269) (symbol 66267 . 66268) (punctuation 66266 . 66267) (symbol 66265 . 66266) (punctuation 66264 . 66265) (punctuation 66263 . 66264) (semantic-list 66258 . 66263) (symbol 66250 . 66257) (RETURN 66243 . 66249) (open-paren 66239 . 66240) (close-paren 66237 . 66238) (symbol 66234 . 66237) (symbol 66222 . 66233) (open-paren 66221 . 66222) (symbol 66209 . 66220) (symbol 66197 . 66208) (symbol 66190 . 66196) (close-paren 66187 . 66188) (punctuation 66177 . 66178) (symbol 66174 . 66177) (punctuation 66173 . 66174) (symbol 66172 . 66173) (punctuation 66171 . 66172) (symbol 66170 . 66171) (punctuation 66169 . 66170) (punctuation 66168 . 66169) (symbol 66165 . 66168) (open-paren 66105 . 66106) (close-paren 66103 . 66104) (symbol 66102 . 66103) (punctuation 66101 . 66102) (symbol 66092 . 66100) (UNION 66086 . 66091) (punctuation 66084 . 66085) (symbol 66081 . 66084) (punctuation 66080 . 66081) (symbol 66068 . 66079) (STRUCT 66061 . 66067) (open-paren 66060 . 66061) (symbol 66045 . 66059) (VOID 66040 . 66044) (symbol 66033 . 66039) (close-paren 66031 . 66032) (punctuation 66021 . 66022) (symbol 66018 . 66021) (punctuation 66017 . 66018) (symbol 66016 . 66017) (punctuation 66015 . 66016) (symbol 66014 . 66015) (punctuation 66013 . 66014) (punctuation 66012 . 66013) (symbol 66009 . 66012) (open-paren 65949 . 65950) (close-paren 65947 . 65948) (symbol 65946 . 65947) (punctuation 65945 . 65946) (symbol 65921 . 65944) (STRUCT 65914 . 65920) (punctuation 65912 . 65913) (symbol 65909 . 65912) (punctuation 65908 . 65909) (symbol 65896 . 65907) (STRUCT 65889 . 65895) (open-paren 65888 . 65889) (symbol 65873 . 65887) (VOID 65868 . 65872) (symbol 65861 . 65867) (close-paren 65859 . 65860) (punctuation 65847 . 65848) (symbol 65844 . 65847) (punctuation 65843 . 65844) (symbol 65842 . 65843) (punctuation 65841 . 65842) (symbol 65840 . 65841) (punctuation 65839 . 65840) (punctuation 65838 . 65839) (symbol 65835 . 65838) (open-paren 65776 . 65777) (close-paren 65774 . 65775) (symbol 65773 . 65774) (punctuation 65772 . 65773) (symbol 65760 . 65771) (STRUCT 65753 . 65759) (punctuation 65751 . 65752) (symbol 65748 . 65751) (punctuation 65747 . 65748) (symbol 65735 . 65746) (STRUCT 65728 . 65734) (open-paren 65727 . 65728) (symbol 65710 . 65726) (VOID 65705 . 65709) (symbol 65698 . 65704) (close-paren 65695 . 65696) (punctuation 65693 . 65694) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 65691 . 65692) ("sym" symbol "sym" 65686 . 65689)))) 65663 . 65693) (open-paren 65659 . 65660) (close-paren 65657 . 65658) (symbol 65656 . 65657) (symbol 65644 . 65655) (punctuation 65642 . 65643) (symbol 65639 . 65642) (punctuation 65638 . 65639) (symbol 65626 . 65637) (STRUCT 65619 . 65625) (open-paren 65618 . 65619) (close-paren 65616 . 65617) (symbol 65602 . 65616) (open-paren 65601 . 65602) (VOID 65596 . 65600) (symbol 65589 . 65595) (close-paren 65586 . 65587) (punctuation 65580 . 65581) (symbol 65577 . 65580) (punctuation 65576 . 65577) (symbol 65575 . 65576) (punctuation 65574 . 65575) (symbol 65573 . 65574) (punctuation 65572 . 65573) (punctuation 65571 . 65572) (symbol 65568 . 65571) (RETURN 65561 . 65567) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (open-paren 76259 . 76260) (close-paren 76257 . 76258) (symbol 76256 . 76257) (symbol 76244 . 76255) (open-paren 76243 . 76244) (symbol 76229 . 76242) (punctuation 76227 . 76228) (VOID 76222 . 76226) (symbol 76215 . 76221) (close-paren 76212 . 76213) (punctuation 76176 . 76177) (punctuation 76175 . 76176) (semantic-list 76171 . 76174) (symbol 76163 . 76170) (RETURN 76156 . 76162) (open-paren 76152 . 76153) (close-paren 76150 . 76151) (symbol 76149 . 76150) (symbol 76137 . 76148) (open-paren 76136 . 76137) (symbol 76126 . 76135) (BOOL 76121 . 76125) (symbol 76114 . 76120) (close-paren 76111 . 76112) (punctuation 76090 . 76091) (symbol 76086 . 76089) (punctuation 76084 . 76085) (symbol 76082 . 76083) (punctuation 76080 . 76081) (punctuation 76079 . 76080) (semantic-list 76073 . 76078) (symbol 76062 . 76072) (punctuation 76060 . 76061) (punctuation 76059 . 76060) (semantic-list 76053 . 76058) (symbol 76045 . 76052) (RETURN 76038 . 76044) (open-paren 75990 . 75991) (close-paren 75988 . 75989) (symbol 75987 . 75988) (punctuation 75986 . 75987) (VOID 75981 . 75985) (open-paren 75980 . 75981) (symbol 75966 . 75979) (symbol 75954 . 75965) (symbol 75947 . 75953) (punctuation 75089 . 75090) (close-paren 75088 . 75089) (punctuation 75087 . 75088) (VOID 75082 . 75086) (open-paren 75081 . 75082) (symbol 75067 . 75080) (symbol 75055 . 75066) (EXTERN 75048 . 75054) (punctuation 75045 . 75046) (close-paren 75027 . 75028) (open-paren 74968 . 74969) (symbol 74952 . 74965) (STRUCT 74945 . 74951) (punctuation 74942 . 74943) (close-paren 74924 . 74925) (open-paren 74786 . 74787) (symbol 74287 . 74299) (STRUCT 74280 . 74286) (punctuation 74174 . 74175) (close-paren 74156 . 74157) (open-paren 72365 . 72366) (symbol 72353 . 72364) (STRUCT 72346 . 72352) (close-paren 72343 . 72344) (punctuation 72341 . 72342) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 72334 . 72341) (punctuation 72332 . 72333) (semantic-list 72289 . 72331) (RETURN 72282 . 72288) (open-paren 72278 . 72279) (close-paren 72276 . 72277) (symbol 72275 . 72276) (symbol 72264 . 72274) (open-paren 72263 . 72264) (symbol 72249 . 72262) (symbol 72238 . 72248) (symbol 72231 . 72237) (close-paren 72169 . 72170) (punctuation 72164 . 72165) (semantic-list 72135 . 72163) (punctuation 72133 . 72134) (semantic-list 72124 . 72132) (RETURN 72117 . 72123) (open-paren 72113 . 72114) (close-paren 72111 . 72112) (symbol 72110 . 72111) (symbol 72099 . 72109) (punctuation 72097 . 72098) (symbol 72096 . 72097) (symbol 72085 . 72095) (open-paren 72084 . 72085) (symbol 72069 . 72083) (symbol 72058 . 72068) (symbol 72051 . 72057) (punctuation 71595 . 71596) (close-paren 71594 . 71595) (number 71591 . 71593) (punctuation 71589 . 71590) (symbol 71571 . 71588) (open-paren 71569 . 71570) (symbol 71551 . 71568) (ENUM 71546 . 71550) (close-paren 71488 . 71489) (punctuation 71480 . 71481) (punctuation 71479 . 71480) (RETURN 71464 . 71470) (open-paren 71460 . 71461) (close-paren 71458 . 71459) (symbol 71457 . 71458) (punctuation 71456 . 71457) (symbol 71440 . 71455) (STRUCT 71433 . 71439) (open-paren 71432 . 71433) (symbol 71416 . 71431) (symbol 71406 . 71415) (symbol 71399 . 71405) (close-paren 71354 . 71355) (punctuation 71341 . 71342) (punctuation 71340 . 71341) (RETURN 71326 . 71332) (open-paren 71322 . 71323) (close-paren 71320 . 71321) (symbol 71317 . 71320) (symbol 71307 . 71316) (punctuation 71305 . 71306) (symbol 71304 . 71305) (punctuation 71303 . 71304) (symbol 71287 . 71302) (STRUCT 71280 . 71286) (open-paren 71279 . 71280) (symbol 71269 . 71278) (symbol 71257 . 71268) (symbol 71250 . 71256) (close-paren 71177 . 71178) (number 71173 . 71174) (punctuation 71171 . 71172) (punctuation 71165 . 71166) (number 71163 . 71164) (punctuation 71147 . 71148) (punctuation 71146 . 71147) (RETURN 71132 . 71138) (open-paren 71128 . 71129) (close-paren 71126 . 71127) (symbol 71123 . 71126) (symbol 71113 . 71122) (punctuation 71111 . 71112) (symbol 71110 . 71111) (punctuation 71109 . 71110) (symbol 71093 . 71108) (STRUCT 71086 . 71092) (open-paren 71085 . 71086) (symbol 71074 . 71084) (symbol 71062 . 71073) (symbol 71055 . 71061) (close-paren 70991 . 70992) (punctuation 70983 . 70984) (number 70981 . 70982) (punctuation 70965 . 70966) (punctuation 70964 . 70965) (RETURN 70950 . 70956) (open-paren 70946 . 70947) (close-paren 70944 . 70945) (symbol 70941 . 70944) (symbol 70931 . 70940) (punctuation 70929 . 70930) (symbol 70928 . 70929) (punctuation 70927 . 70928) (symbol 70911 . 70926) (STRUCT 70904 . 70910) (open-paren 70903 . 70904) (symbol 70894 . 70902) (symbol 70882 . 70893) (symbol 70875 . 70881) (close-paren 70724 . 70725) (punctuation 70722 . 70723) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 70699 . 70705) ("type" symbol "Lisp_Vectorlike" 70682 . 70697) ("a" symbol "a" 70679 . 70680)))) 70671 . 70722) (RETURN 70664 . 70670) (punctuation 70660 . 70661) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 70643 . 70655)))) 70634 . 70660) (open-paren 70630 . 70631) (close-paren 70628 . 70629) (symbol 70627 . 70628) (symbol 70615 . 70626) (open-paren 70614 . 70615) (symbol 70602 . 70613) (punctuation 70600 . 70601) (symbol 70584 . 70599) (STRUCT 70577 . 70583) (symbol 70570 . 70576) (close-paren 70567 . 70568) (RETURN 70524 . 70530) (open-paren 70520 . 70521) (close-paren 70518 . 70519) (symbol 70517 . 70518) (symbol 70505 . 70516) (open-paren 70504 . 70505) (symbol 70491 . 70503) (BOOL 70486 . 70490) (symbol 70479 . 70485) (punctuation 70476 . 70477) (close-paren 70475 . 70476) (symbol 70464 . 70475) (punctuation 70462 . 70463) (punctuation 70461 . 70462) (semantic-list 70430 . 70460) (symbol 70421 . 70429) (open-paren 70420 . 70421) (symbol 70413 . 70419) (punctuation 70369 . 70370) (close-paren 70351 . 70352) (open-paren 68115 . 68116) (symbol 68099 . 68114) (STRUCT 68092 . 68098) (punctuation 68089 . 68090) (close-paren 68088 . 68089) (open-paren 67622 . 67623) (symbol 67606 . 67621) (STRUCT 67599 . 67605) (close-paren 67233 . 67234) (punctuation 67231 . 67232) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 67227 . 67230)))) 67201 . 67231) (RETURN 67194 . 67200) (open-paren 67190 . 67191) (close-paren 67188 . 67189) (symbol 67185 . 67188) (symbol 67173 . 67184) (open-paren 67172 . 67173) (close-paren 67170 . 67171) (symbol 67153 . 67170) (open-paren 67152 . 67153) (INT 67148 . 67151) (symbol 67141 . 67147) (close-paren 66917 . 66918) (punctuation 66915 . 66916) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 66911 . 66914)))) 66880 . 66915) (RETURN 66873 . 66879) (open-paren 66869 . 66870) (close-paren 66867 . 66868) (symbol 66864 . 66867) (symbol 66852 . 66863) (open-paren 66851 . 66852) (close-paren 66849 . 66850) (symbol 66827 . 66849) (open-paren 66826 . 66827) (INT 66822 . 66825) (symbol 66815 . 66821) (close-paren 66648 . 66649) (punctuation 66610 . 66611) (punctuation 66609 . 66610) (symbol 66600 . 66608) (punctuation 66599 . 66600) (symbol 66598 . 66599) (punctuation 66597 . 66598) (symbol 66596 . 66597) (punctuation 66595 . 66596) (punctuation 66594 . 66595) (semantic-list 66589 . 66594) (symbol 66581 . 66588) (RETURN 66574 . 66580) (open-paren 66570 . 66571) (close-paren 66568 . 66569) (symbol 66565 . 66568) (symbol 66553 . 66564) (open-paren 66552 . 66553) (symbol 66515 . 66551) (BOOL 66510 . 66514) (symbol 66503 . 66509) (close-paren 66439 . 66440) (punctuation 66418 . 66419) (punctuation 66417 . 66418) (symbol 66408 . 66416) (punctuation 66407 . 66408) (symbol 66406 . 66407) (punctuation 66405 . 66406) (symbol 66404 . 66405) (punctuation 66403 . 66404) (punctuation 66402 . 66403) (semantic-list 66397 . 66402) (symbol 66389 . 66396) (RETURN 66382 . 66388) (open-paren 66378 . 66379) (close-paren 66376 . 66377) (symbol 66373 . 66376) (symbol 66361 . 66372) (open-paren 66360 . 66361) (symbol 66342 . 66359) (BOOL 66337 . 66341) (symbol 66330 . 66336) (close-paren 66275 . 66276) (punctuation 66268 . 66269) (symbol 66267 . 66268) (punctuation 66266 . 66267) (symbol 66265 . 66266) (punctuation 66264 . 66265) (punctuation 66263 . 66264) (semantic-list 66258 . 66263) (symbol 66250 . 66257) (RETURN 66243 . 66249) (open-paren 66239 . 66240) (close-paren 66237 . 66238) (symbol 66234 . 66237) (symbol 66222 . 66233) (open-paren 66221 . 66222) (symbol 66209 . 66220) (symbol 66197 . 66208) (symbol 66190 . 66196) (close-paren 66187 . 66188) (punctuation 66177 . 66178) (symbol 66174 . 66177) (punctuation 66173 . 66174) (symbol 66172 . 66173) (punctuation 66171 . 66172) (symbol 66170 . 66171) (punctuation 66169 . 66170) (punctuation 66168 . 66169) (symbol 66165 . 66168) (open-paren 66105 . 66106) (close-paren 66103 . 66104) (symbol 66102 . 66103) (punctuation 66101 . 66102) (symbol 66092 . 66100) (UNION 66086 . 66091) (punctuation 66084 . 66085) (symbol 66081 . 66084) (punctuation 66080 . 66081) (symbol 66068 . 66079) (STRUCT 66061 . 66067) (open-paren 66060 . 66061) (symbol 66045 . 66059) (VOID 66040 . 66044) (symbol 66033 . 66039) (close-paren 66031 . 66032) (punctuation 66021 . 66022) (symbol 66018 . 66021) (punctuation 66017 . 66018) (symbol 66016 . 66017) (punctuation 66015 . 66016) (symbol 66014 . 66015) (punctuation 66013 . 66014) (punctuation 66012 . 66013) (symbol 66009 . 66012) (open-paren 65949 . 65950) (close-paren 65947 . 65948) (symbol 65946 . 65947) (punctuation 65945 . 65946) (symbol 65921 . 65944) (STRUCT 65914 . 65920) (punctuation 65912 . 65913) (symbol 65909 . 65912) (punctuation 65908 . 65909) (symbol 65896 . 65907) (STRUCT 65889 . 65895) (open-paren 65888 . 65889) (symbol 65873 . 65887) (VOID 65868 . 65872) (symbol 65861 . 65867) (close-paren 65859 . 65860) (punctuation 65847 . 65848) (symbol 65844 . 65847) (punctuation 65843 . 65844) (symbol 65842 . 65843) (punctuation 65841 . 65842) (symbol 65840 . 65841) (punctuation 65839 . 65840) (punctuation 65838 . 65839) (symbol 65835 . 65838) (open-paren 65776 . 65777) (close-paren 65774 . 65775) (symbol 65773 . 65774) (punctuation 65772 . 65773) (symbol 65760 . 65771) (STRUCT 65753 . 65759) (punctuation 65751 . 65752) (symbol 65748 . 65751) (punctuation 65747 . 65748) (symbol 65735 . 65746) (STRUCT 65728 . 65734) (open-paren 65727 . 65728) (symbol 65710 . 65726) (VOID 65705 . 65709) (symbol 65698 . 65704) (close-paren 65695 . 65696) (punctuation 65693 . 65694) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 65691 . 65692) ("sym" symbol "sym" 65686 . 65689)))) 65663 . 65693) (open-paren 65659 . 65660) (close-paren 65657 . 65658) (symbol 65656 . 65657) (symbol 65644 . 65655) (punctuation 65642 . 65643) (symbol 65639 . 65642) (punctuation 65638 . 65639) (symbol 65626 . 65637) (STRUCT 65619 . 65625) (open-paren 65618 . 65619) (close-paren 65616 . 65617) (symbol 65602 . 65616) (open-paren 65601 . 65602) (VOID 65596 . 65600) (symbol 65589 . 65595) (close-paren 65586 . 65587) (punctuation 65580 . 65581) (symbol 65577 . 65580) (punctuation 65576 . 65577) (symbol 65575 . 65576) (punctuation 65574 . 65575) (symbol 65573 . 65574) (punctuation 65572 . 65573) (punctuation 65571 . 65572) (symbol 65568 . 65571) (RETURN 65561 . 65567) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (punctuation 127893 . 127894) (symbol 127884 . 127893) (punctuation 127882 . 127883) (punctuation 127881 . 127882) (symbol 127871 . 127880) (open-paren 127870 . 127871) (close-paren 127868 . 127869) (symbol 127858 . 127868) (punctuation 127857 . 127858) (open-paren 127856 . 127857) (symbol 127844 . 127855) (TYPEDEF 127836 . 127843) (punctuation 127503 . 127504) (close-paren 127502 . 127503) (symbol 127496 . 127502) (punctuation 127495 . 127496) (symbol 127483 . 127494) (STRUCT 127476 . 127482) (open-paren 127475 . 127476) (symbol 127446 . 127474) (BOOL 127441 . 127445) (EXTERN 127434 . 127440) (punctuation 127432 . 127433) (close-paren 127431 . 127432) (VOID 127427 . 127431) (open-paren 127426 . 127427) (symbol 127403 . 127425) (symbol 127391 . 127402) (punctuation 127389 . 127390) (close-paren 127388 . 127389) (symbol 127383 . 127388) (symbol 127371 . 127382) (open-paren 127370 . 127371) (symbol 127356 . 127369) (VOID 127351 . 127355) (EXTERN 127344 . 127350) (punctuation 127342 . 127343) (close-paren 127341 . 127342) (symbol 127338 . 127341) (punctuation 127337 . 127338) (symbol 127325 . 127336) (UNION 127319 . 127324) (punctuation 127317 . 127318) (symbol 127312 . 127317) (punctuation 127311 . 127312) (symbol 127299 . 127310) (UNION 127293 . 127298) (open-paren 127292 . 127293) (symbol 127279 . 127291) (VOID 127274 . 127278) (EXTERN 127267 . 127273) (punctuation 127265 . 127266) (close-paren 127264 . 127265) (symbol 127255 . 127264) (punctuation 127253 . 127254) (punctuation 127252 . 127253) (symbol 127240 . 127251) (punctuation 127238 . 127239) (symbol 127227 . 127238) (open-paren 127226 . 127227) (symbol 127206 . 127225) (symbol 127196 . 127205) (EXTERN 127189 . 127195) (punctuation 127187 . 127188) (close-paren 127186 . 127187) (symbol 127175 . 127186) (open-paren 127174 . 127175) (symbol 127162 . 127173) (VOID 127157 . 127161) (EXTERN 127150 . 127156) (punctuation 127148 . 127149) (close-paren 127147 . 127148) (VOID 127143 . 127147) (open-paren 127142 . 127143) (symbol 127129 . 127141) (VOID 127124 . 127128) (EXTERN 127117 . 127123) (punctuation 127115 . 127116) (close-paren 127114 . 127115) (VOID 127110 . 127114) (open-paren 127109 . 127110) (symbol 127099 . 127108) (VOID 127094 . 127098) (EXTERN 127087 . 127093) (punctuation 127085 . 127086) (close-paren 127084 . 127085) (symbol 127073 . 127084) (punctuation 127071 . 127072) (symbol 127060 . 127071) (punctuation 127058 . 127059) (symbol 127047 . 127058) (open-paren 127046 . 127047) (symbol 127035 . 127045) (symbol 127023 . 127034) (EXTERN 127016 . 127022) (punctuation 127014 . 127015) (close-paren 127013 . 127014) (symbol 127002 . 127013) (punctuation 127000 . 127001) (symbol 126989 . 127000) (open-paren 126988 . 126989) (symbol 126977 . 126987) (symbol 126965 . 126976) (EXTERN 126958 . 126964) (punctuation 126956 . 126957) (close-paren 126955 . 126956) (punctuation 126954 . 126955) (punctuation 126953 . 126954) (punctuation 126952 . 126953) (punctuation 126950 . 126951) (symbol 126939 . 126950) (punctuation 126937 . 126938) (symbol 126928 . 126937) (open-paren 126927 . 126928) (symbol 126917 . 126926) (symbol 126905 . 126916) (EXTERN 126898 . 126904) (punctuation 126896 . 126897) (close-paren 126895 . 126896) (VOID 126891 . 126895) (open-paren 126890 . 126891) (symbol 126875 . 126889) (VOID 126870 . 126874) (EXTERN 126863 . 126869) (punctuation 126861 . 126862) (close-paren 126860 . 126861) (symbol 126857 . 126860) (symbol 126845 . 126856) (open-paren 126844 . 126845) (symbol 126830 . 126843) (symbol 126818 . 126829) (EXTERN 126811 . 126817) (punctuation 126809 . 126810) (close-paren 126808 . 126809) (symbol 126797 . 126808) (open-paren 126796 . 126797) (symbol 126784 . 126795) (VOID 126779 . 126783) (EXTERN 126772 . 126778) (punctuation 126770 . 126771) (close-paren 126769 . 126770) (number 126768 . 126769) (punctuation 126766 . 126767) (number 126765 . 126766) (open-paren 126764 . 126765) (symbol 126740 . 126763) (close-paren 126736 . 126737) (symbol 126729 . 126736) (punctuation 126727 . 126728) (punctuation 126726 . 126727) (CHAR 126721 . 126725) (CONST 126715 . 126720) (open-paren 126714 . 126715) (symbol 126699 . 126713) (symbol 126687 . 126698) (EXTERN 126680 . 126686) (punctuation 126678 . 126679) (close-paren 126677 . 126678) (number 126676 . 126677) (punctuation 126674 . 126675) (number 126673 . 126674) (open-paren 126672 . 126673) (symbol 126648 . 126671) (close-paren 126644 . 126645) (symbol 126637 . 126644) (punctuation 126635 . 126636) (punctuation 126634 . 126635) (CHAR 126629 . 126633) (CONST 126623 . 126628) (open-paren 126622 . 126623) (symbol 126615 . 126621) (VOID 126610 . 126614) (EXTERN 126593 . 126599) (punctuation 126591 . 126592) (close-paren 126590 . 126591) (number 126589 . 126590) (punctuation 126587 . 126588) (number 126586 . 126587) (open-paren 126585 . 126586) (symbol 126561 . 126584) (close-paren 126559 . 126560) (punctuation 126558 . 126559) (punctuation 126557 . 126558) (punctuation 126556 . 126557) (punctuation 126554 . 126555) (punctuation 126553 . 126554) (CHAR 126548 . 126552) (CONST 126542 . 126547) (open-paren 126541 . 126542) (symbol 126535 . 126540) (VOID 126530 . 126534) (EXTERN 126513 . 126519) (punctuation 126511 . 126512) (close-paren 126510 . 126511) (punctuation 126509 . 126510) (symbol 126496 . 126508) (STRUCT 126489 . 126495) (open-paren 126488 . 126489) (symbol 126463 . 126487) (VOID 126458 . 126462) (EXTERN 126451 . 126457) (punctuation 126449 . 126450) (close-paren 126448 . 126449) (VOID 126444 . 126448) (open-paren 126443 . 126444) (symbol 126418 . 126442) (VOID 126413 . 126417) (EXTERN 126406 . 126412) (punctuation 126404 . 126405) (close-paren 126403 . 126404) (symbol 126392 . 126403) (punctuation 126390 . 126391) (symbol 126381 . 126390) (open-paren 126380 . 126381) (symbol 126370 . 126379) (symbol 126358 . 126369) (EXTERN 126351 . 126357) (punctuation 126349 . 126350) (close-paren 126348 . 126349) (punctuation 126347 . 126348) (VOID 126342 . 126346) (punctuation 126340 . 126341) (semantic-list 126332 . 126340) (semantic-list 126328 . 126331) (VOID 126323 . 126327) (punctuation 126321 . 126322) (symbol 126312 . 126321) (open-paren 126311 . 126312) (symbol 126288 . 126310) (VOID 126283 . 126287) (EXTERN 126276 . 126282) (punctuation 126274 . 126275) (close-paren 126273 . 126274) (symbol 126262 . 126273) (punctuation 126260 . 126261) (semantic-list 126247 . 126260) (semantic-list 126243 . 126246) (VOID 126238 . 126242) (punctuation 126236 . 126237) (symbol 126227 . 126236) (open-paren 126226 . 126227) (symbol 126207 . 126225) (VOID 126202 . 126206) (EXTERN 126195 . 126201) (punctuation 126193 . 126194) (close-paren 126192 . 126193) (symbol 126183 . 126192) (open-paren 126182 . 126183) (symbol 126161 . 126181) (VOID 126156 . 126160) (EXTERN 126149 . 126155) (punctuation 126147 . 126148) (close-paren 126146 . 126147) (VOID 126142 . 126146) (open-paren 126141 . 126142) (symbol 126111 . 126140) (VOID 126106 . 126110) (EXTERN 126099 . 126105) (punctuation 126097 . 126098) (close-paren 126096 . 126097) (VOID 126092 . 126096) (open-paren 126091 . 126092) (symbol 126059 . 126090) (VOID 126054 . 126058) (EXTERN 126047 . 126053) (punctuation 126045 . 126046) (close-paren 126044 . 126045) (semantic-list 126038 . 126044) (semantic-list 126034 . 126037) (VOID 126029 . 126033) (open-paren 126028 . 126029) (symbol 126001 . 126027) (VOID 125996 . 126000) (EXTERN 125989 . 125995) (punctuation 125987 . 125988) (close-paren 125986 . 125987) (INT 125983 . 125986) (punctuation 125981 . 125982) (semantic-list 125976 . 125981) (semantic-list 125972 . 125975) (VOID 125967 . 125971) (open-paren 125966 . 125967) (symbol 125940 . 125965) (VOID 125935 . 125939) (EXTERN 125928 . 125934) (punctuation 125926 . 125927) (close-paren 125925 . 125926) (punctuation 125924 . 125925) (VOID 125919 . 125923) (punctuation 125917 . 125918) (semantic-list 125909 . 125917) (semantic-list 125905 . 125908) (VOID 125900 . 125904) (open-paren 125899 . 125900) (symbol 125873 . 125898) (VOID 125868 . 125872) (EXTERN 125861 . 125867) (punctuation 125859 . 125860) (close-paren 125858 . 125859) (symbol 125849 . 125858) (punctuation 125847 . 125848) (punctuation 125846 . 125847) (symbol 125834 . 125845) (open-paren 125833 . 125834) (symbol 125805 . 125832) (VOID 125800 . 125804) (EXTERN 125793 . 125799) (punctuation 125791 . 125792) (close-paren 125790 . 125791) (symbol 125779 . 125790) (punctuation 125777 . 125778) (semantic-list 125764 . 125777) (semantic-list 125760 . 125763) (VOID 125755 . 125759) (open-paren 125754 . 125755) (symbol 125732 . 125753) (VOID 125727 . 125731) (EXTERN 125720 . 125726) (punctuation 125718 . 125719) (close-paren 125717 . 125718) (symbol 125706 . 125717) (punctuation 125704 . 125705) (symbol 125693 . 125704) (open-paren 125692 . 125693) (symbol 125683 . 125691) (VOID 125678 . 125682) (EXTERN 125671 . 125677) (punctuation 125669 . 125670) (close-paren 125668 . 125669) (symbol 125657 . 125668) (ENUM 125652 . 125656) (punctuation 125650 . 125651) (symbol 125639 . 125650) (open-paren 125638 . 125639) (symbol 125616 . 125637) (punctuation 125615 . 125616) (symbol 125607 . 125614) (STRUCT 125600 . 125606) (EXTERN 125593 . 125599) (punctuation 125591 . 125592) (close-paren 125590 . 125591) (symbol 125579 . 125590) (ENUM 125574 . 125578) (punctuation 125572 . 125573) (symbol 125561 . 125572) (open-paren 125560 . 125561) (symbol 125547 . 125559) (punctuation 125546 . 125547) (symbol 125538 . 125545) (STRUCT 125531 . 125537) (EXTERN 125524 . 125530) (punctuation 125522 . 125523) (close-paren 125521 . 125522) (punctuation 125505 . 125506) (punctuation 125490 . 125491) (punctuation 125489 . 125490) (VOID 125484 . 125488) (punctuation 125482 . 125483) (punctuation 125471 . 125472) (open-paren 125457 . 125458) (symbol 125438 . 125456) (symbol 125426 . 125437) (EXTERN 125419 . 125425) (punctuation 125417 . 125418) (close-paren 125416 . 125417) (punctuation 125374 . 125375) (punctuation 125359 . 125360) (symbol 125348 . 125359) (punctuation 125341 . 125342) (punctuation 125340 . 125341) (symbol 125328 . 125339) (punctuation 125326 . 125327) (symbol 125317 . 125326) (punctuation 125315 . 125316) (punctuation 125286 . 125287) (open-paren 125272 . 125273) (symbol 125242 . 125267) (symbol 125230 . 125241) (EXTERN 125223 . 125229) (punctuation 125221 . 125222) (close-paren 125220 . 125221) (punctuation 125204 . 125205) (punctuation 125189 . 125190) (symbol 125178 . 125189) (punctuation 125176 . 125177) (symbol 125165 . 125176) (punctuation 125163 . 125164) (symbol 125152 . 125163) (punctuation 125150 . 125151) (punctuation 125121 . 125122) (open-paren 125107 . 125108) (symbol 125081 . 125106) (symbol 125069 . 125080) (EXTERN 125062 . 125068) (punctuation 125060 . 125061) (close-paren 125059 . 125060) (punctuation 125043 . 125044) (punctuation 125028 . 125029) (symbol 125017 . 125028) (punctuation 125015 . 125016) (symbol 125004 . 125015) (punctuation 125002 . 125003) (punctuation 124986 . 124987) (open-paren 124972 . 124973) (symbol 124946 . 124971) (symbol 124934 . 124945) (EXTERN 124927 . 124933) (punctuation 124925 . 124926) (close-paren 124924 . 124925) (punctuation 124908 . 124909) (punctuation 124893 . 124894) (symbol 124882 . 124893) (punctuation 124880 . 124881) (punctuation 124871 . 124872) (open-paren 124857 . 124858) (symbol 124833 . 124856) (symbol 124821 . 124832) (EXTERN 124814 . 124820) (punctuation 124812 . 124813) (close-paren 124811 . 124812) (symbol 124800 . 124811) (punctuation 124798 . 124799) (symbol 124787 . 124798) (punctuation 124785 . 124786) (symbol 124774 . 124785) (open-paren 124773 . 124774) (symbol 124744 . 124772) (symbol 124732 . 124743) (EXTERN 124725 . 124731) (punctuation 124723 . 124724) (close-paren 124722 . 124723) (symbol 124711 . 124722) (punctuation 124709 . 124710) (punctuation 124693 . 124694) (punctuation 124678 . 124679) (symbol 124667 . 124678) (open-paren 124666 . 124667) (symbol 124651 . 124665) (symbol 124639 . 124650) (EXTERN 124632 . 124638) (punctuation 124630 . 124631) (close-paren 124629 . 124630) (symbol 124618 . 124629) (punctuation 124616 . 124617) (symbol 124605 . 124616) (punctuation 124603 . 124604) (symbol 124592 . 124603) (punctuation 124590 . 124591) (symbol 124579 . 124590) (punctuation 124577 . 124578) (symbol 124566 . 124577) (punctuation 124564 . 124565) (symbol 124553 . 124564) (punctuation 124551 . 124552) (symbol 124540 . 124551) (punctuation 124538 . 124539) (symbol 124527 . 124538) (punctuation 124525 . 124526) (symbol 124514 . 124525) (open-paren 124513 . 124514) (symbol 124507 . 124512) (symbol 124495 . 124506) (EXTERN 124488 . 124494) (punctuation 124486 . 124487) (close-paren 124485 . 124486) (symbol 124474 . 124485) (punctuation 124472 . 124473) (symbol 124461 . 124472) (punctuation 124459 . 124460) (symbol 124448 . 124459) (punctuation 124446 . 124447) (symbol 124435 . 124446) (punctuation 124433 . 124434) (symbol 124422 . 124433) (punctuation 124420 . 124421) (symbol 124409 . 124420) (punctuation 124407 . 124408) (symbol 124396 . 124407) (punctuation 124394 . 124395) (symbol 124383 . 124394) (open-paren 124382 . 124383) (symbol 124376 . 124381) (symbol 124364 . 124375) (EXTERN 124357 . 124363) (punctuation 124355 . 124356) (close-paren 124354 . 124355) (symbol 124343 . 124354) (punctuation 124341 . 124342) (symbol 124330 . 124341) (punctuation 124328 . 124329) (symbol 124317 . 124328) (punctuation 124315 . 124316) (symbol 124304 . 124315) (punctuation 124302 . 124303) (symbol 124291 . 124302) (punctuation 124289 . 124290) (symbol 124278 . 124289) (punctuation 124276 . 124277) (symbol 124265 . 124276) (open-paren 124264 . 124265) (symbol 124258 . 124263) (symbol 124246 . 124257) (EXTERN 124239 . 124245) (punctuation 124237 . 124238) (close-paren 124236 . 124237) (symbol 124225 . 124236) (punctuation 124223 . 124224) (symbol 124212 . 124223) (punctuation 124210 . 124211) (symbol 124199 . 124210) (punctuation 124197 . 124198) (symbol 124186 . 124197) (punctuation 124184 . 124185) (symbol 124173 . 124184) (punctuation 124171 . 124172) (symbol 124160 . 124171) (open-paren 124159 . 124160) (symbol 124153 . 124158) (symbol 124141 . 124152) (EXTERN 124134 . 124140) (punctuation 124132 . 124133) (close-paren 124131 . 124132) (symbol 124120 . 124131) (punctuation 124118 . 124119) (symbol 124107 . 124118) (punctuation 124105 . 124106) (symbol 124094 . 124105) (punctuation 124092 . 124093) (symbol 124081 . 124092) (punctuation 124079 . 124080) (symbol 124068 . 124079) (open-paren 124067 . 124068) (symbol 124061 . 124066) (symbol 124049 . 124060) (EXTERN 124042 . 124048) (punctuation 124040 . 124041) (close-paren 124039 . 124040) (symbol 124028 . 124039) (punctuation 124026 . 124027) (symbol 124015 . 124026) (punctuation 124013 . 124014) (symbol 124002 . 124013) (punctuation 124000 . 124001) (symbol 123989 . 124000) (open-paren 123988 . 123989) (symbol 123982 . 123987) (symbol 123970 . 123981) (EXTERN 123963 . 123969) (punctuation 123961 . 123962) (close-paren 123960 . 123961) (symbol 123949 . 123960) (punctuation 123947 . 123948) (symbol 123936 . 123947) (punctuation 123934 . 123935) (symbol 123923 . 123934) (open-paren 123922 . 123923) (symbol 123916 . 123921) (symbol 123904 . 123915) (EXTERN 123897 . 123903) (punctuation 123895 . 123896) (close-paren 123894 . 123895) (symbol 123883 . 123894) (punctuation 123881 . 123882) (symbol 123870 . 123881) (open-paren 123869 . 123870) (symbol 123863 . 123868) (symbol 123851 . 123862) (EXTERN 123844 . 123850) (punctuation 123842 . 123843) (close-paren 123841 . 123842) (symbol 123830 . 123841) (open-paren 123829 . 123830) (symbol 123823 . 123828) (symbol 123811 . 123822) (EXTERN 123804 . 123810) (punctuation 123802 . 123803) (close-paren 123801 . 123802) (symbol 123790 . 123801) (punctuation 123788 . 123789) (symbol 123777 . 123788) (open-paren 123776 . 123777) (symbol 123769 . 123775) (symbol 123757 . 123768) (EXTERN 123750 . 123756) (punctuation 123748 . 123749) (close-paren 123747 . 123748) (symbol 123743 . 123747) (symbol 123731 . 123742) (open-paren 123730 . 123731) (symbol 123721 . 123729) (symbol 123709 . 123720) (EXTERN 123702 . 123708) (punctuation 123700 . 123701) (close-paren 123699 . 123700) (symbol 123689 . 123699) (punctuation 123688 . 123689) (symbol 123676 . 123687) (punctuation 123674 . 123675) (symbol 123667 . 123674) (symbol 123657 . 123666) (punctuation 123655 . 123656) (symbol 123651 . 123655) (punctuation 123650 . 123651) (symbol 123640 . 123649) (STRUCT 123633 . 123639) (open-paren 123632 . 123633) (symbol 123619 . 123631) (symbol 123607 . 123618) (EXTERN 123600 . 123606) (punctuation 123598 . 123599) (close-paren 123597 . 123598) (symbol 123586 . 123597) (open-paren 123585 . 123586) (symbol 123575 . 123584) (BOOL 123570 . 123574) (EXTERN 123563 . 123569) (punctuation 123561 . 123562) (close-paren 123560 . 123561) (VOID 123556 . 123560) (open-paren 123555 . 123556) (symbol 123540 . 123554) (VOID 123535 . 123539) (EXTERN 123518 . 123524) (punctuation 123516 . 123517) (close-paren 123515 . 123516) (symbol 123504 . 123515) (punctuation 123502 . 123503) (punctuation 123501 . 123502) (CHAR 123496 . 123500) (CONST 123490 . 123495) (open-paren 123489 . 123490) (symbol 123476 . 123488) (VOID 123471 . 123475) (EXTERN 123454 . 123460) (punctuation 123452 . 123453) (close-paren 123451 . 123452) (symbol 123440 . 123451) (punctuation 123434 . 123435) (symbol 123423 . 123434) (punctuation 123421 . 123422) (symbol 123410 . 123421) (punctuation 123408 . 123409) (symbol 123397 . 123408) (open-paren 123396 . 123397) (symbol 123387 . 123395) (VOID 123382 . 123386) (EXTERN 123365 . 123371) (punctuation 123363 . 123364) (close-paren 123362 . 123363) (symbol 123351 . 123362) (punctuation 123349 . 123350) (symbol 123338 . 123349) (punctuation 123336 . 123337) (symbol 123325 . 123336) (open-paren 123324 . 123325) (symbol 123315 . 123323) (VOID 123310 . 123314) (EXTERN 123293 . 123299) (punctuation 123291 . 123292) (close-paren 123290 . 123291) (symbol 123279 . 123290) (punctuation 123277 . 123278) (symbol 123266 . 123277) (open-paren 123265 . 123266) (symbol 123256 . 123264) (VOID 123251 . 123255) (EXTERN 123234 . 123240) (punctuation 123232 . 123233) (close-paren 123231 . 123232) (symbol 123220 . 123231) (open-paren 123219 . 123220) (symbol 123210 . 123218) (VOID 123205 . 123209) (EXTERN 123188 . 123194) (close-paren 123186 . 123187) (open-paren 123152 . 123153) (close-paren 123150 . 123151) (symbol 123146 . 123150) (symbol 123134 . 123145) (punctuation 123132 . 123133) (symbol 123120 . 123132) (symbol 123108 . 123119) (open-paren 123107 . 123108) (symbol 123099 . 123106) (VOID 123094 . 123098) (symbol 123077 . 123083) (punctuation 123075 . 123076) (close-paren 123074 . 123075) (VOID 123070 . 123074) (open-paren 123069 . 123070) (symbol 123064 . 123068) (symbol 123052 . 123063) (EXTERN 123045 . 123051) (punctuation 123043 . 123044) (close-paren 123042 . 123043) (punctuation 122985 . 122986) (punctuation 122959 . 122960) (symbol 122955 . 122959) (punctuation 122954 . 122955) (symbol 122942 . 122953) (punctuation 122940 . 122941) (symbol 122935 . 122940) (symbol 122925 . 122934) (open-paren 122924 . 122925) (symbol 122905 . 122923) (symbol 122893 . 122904) (EXTERN 122886 . 122892) (punctuation 122884 . 122885) (close-paren 122883 . 122884) (symbol 122872 . 122883) (punctuation 122870 . 122871) (symbol 122859 . 122870) (punctuation 122857 . 122858) (symbol 122846 . 122857) (open-paren 122845 . 122846) (symbol 122824 . 122844) (VOID 122819 . 122823) (EXTERN 122812 . 122818) (punctuation 122810 . 122811) (close-paren 122809 . 122810) (symbol 122798 . 122809) (open-paren 122797 . 122798) (symbol 122788 . 122796) (VOID 122783 . 122787) (EXTERN 122776 . 122782) (close-paren 122396 . 122397) (semantic-list 122388 . 122393) (RETURN 122350 . 122356) (open-paren 122346 . 122347) (close-paren 122344 . 122345) (symbol 122341 . 122344) (punctuation 122340 . 122341) (CHAR 122335 . 122339) (CONST 122329 . 122334) (open-paren 122328 . 122329) (symbol 122312 . 122327) (symbol 122300 . 122311) (symbol 122293 . 122299) (close-paren 122290 . 122291) (semantic-list 122282 . 122287) (RETURN 122253 . 122259) (open-paren 122249 . 122250) (close-paren 122247 . 122248) (symbol 122244 . 122247) (punctuation 122243 . 122244) (CHAR 122238 . 122242) (CONST 122232 . 122237) (open-paren 122231 . 122232) (symbol 122224 . 122230) (symbol 122212 . 122223) (symbol 122205 . 122211) (punctuation 122202 . 122203) (close-paren 122201 . 122202) (VOID 122197 . 122201) (open-paren 122196 . 122197) (symbol 122182 . 122195) (VOID 122177 . 122181) (EXTERN 122170 . 122176) (punctuation 122168 . 122169) (close-paren 122167 . 122168) (VOID 122163 . 122167) (open-paren 122162 . 122163) (symbol 122151 . 122161) (VOID 122146 . 122150) (EXTERN 122139 . 122145) (punctuation 122137 . 122138) (close-paren 122136 . 122137) (VOID 122132 . 122136) (open-paren 122131 . 122132) (symbol 122118 . 122130) (VOID 122113 . 122117) (EXTERN 122106 . 122112) (punctuation 122104 . 122105) (close-paren 122103 . 122104) (symbol 122092 . 122103) (punctuation 122090 . 122091) (punctuation 122089 . 122090) (CHAR 122084 . 122088) (CONST 122078 . 122083) (open-paren 122077 . 122078) (symbol 122065 . 122076) (VOID 122060 . 122064) (EXTERN 122053 . 122059) (punctuation 122051 . 122052) (close-paren 122050 . 122051) (symbol 122039 . 122050) (punctuation 122012 . 122013) (semantic-list 121986 . 122012) (semantic-list 121982 . 121985) (VOID 121977 . 121981) (punctuation 121975 . 121976) (symbol 121964 . 121975) (open-paren 121963 . 121964) (symbol 121951 . 121962) (VOID 121946 . 121950) (EXTERN 121939 . 121945) (punctuation 121937 . 121938) (close-paren 121936 . 121937) (INT 121933 . 121936) (punctuation 121931 . 121932) (INT 121928 . 121931) (punctuation 121926 . 121927) (punctuation 121925 . 121926) (CONST 121919 . 121924) (CHAR 121914 . 121918) (open-paren 121913 . 121914) (symbol 121896 . 121912) (symbol 121884 . 121895) (EXTERN 121877 . 121883) (punctuation 121875 . 121876) (close-paren 121874 . 121875) (number 121872 . 121873) (punctuation 121870 . 121871) (symbol 121850 . 121869) (open-paren 121848 . 121849) (ENUM 121843 . 121847) (punctuation 121841 . 121842) (close-paren 121840 . 121841) (BOOL 121836 . 121840) (punctuation 121834 . 121835) (symbol 121823 . 121834) (punctuation 121821 . 121822) (punctuation 121820 . 121821) (symbol 121808 . 121819) (punctuation 121788 . 121789) (symbol 121777 . 121788) (punctuation 121775 . 121776) (symbol 121764 . 121775) (punctuation 121762 . 121763) (symbol 121751 . 121762) (open-paren 121750 . 121751) (symbol 121744 . 121749) (INT 121740 . 121743) (EXTERN 121733 . 121739) (close-paren 121731 . 121732) (semantic-list 121661 . 121674) (IF 121658 . 121660) (open-paren 121654 . 121655) (close-paren 121652 . 121653) (symbol 121651 . 121652) (symbol 121639 . 121650) (open-paren 121638 . 121639) (symbol 121622 . 121637) (VOID 121617 . 121621) (symbol 121610 . 121616) (punctuation 121608 . 121609) (close-paren 121607 . 121608) (symbol 121598 . 121607) (punctuation 121596 . 121597) (symbol 121587 . 121596) (punctuation 121585 . 121586) (punctuation 121584 . 121585) (CHAR 121579 . 121583) (CONST 121573 . 121578) (punctuation 121571 . 121572) (symbol 121560 . 121571) (open-paren 121559 . 121560) (symbol 121550 . 121558) (symbol 121538 . 121549) (EXTERN 121531 . 121537) (punctuation 121529 . 121530) (close-paren 121528 . 121529) (symbol 121517 . 121528) (punctuation 121515 . 121516) (symbol 121504 . 121515) (open-paren 121503 . 121504) (symbol 121491 . 121502) (VOID 121486 . 121490) (EXTERN 121479 . 121485) (punctuation 121477 . 121478) (close-paren 121476 . 121477) (symbol 121465 . 121476) (punctuation 121463 . 121464) (symbol 121452 . 121463) (punctuation 121450 . 121451) (symbol 121439 . 121450) (open-paren 121438 . 121439) (symbol 121424 . 121437) (symbol 121412 . 121423) (EXTERN 121405 . 121411) (punctuation 121403 . 121404) (close-paren 121402 . 121403) (symbol 121393 . 121402) (punctuation 121391 . 121392) (punctuation 121390 . 121391) (CHAR 121385 . 121389) (CONST 121379 . 121384) (open-paren 121378 . 121379) (symbol 121360 . 121377) (symbol 121348 . 121359) (EXTERN 121341 . 121347) (punctuation 121339 . 121340) (close-paren 121338 . 121339) (symbol 121329 . 121338) (punctuation 121327 . 121328) (punctuation 121326 . 121327) (CHAR 121321 . 121325) (CONST 121315 . 121320) (open-paren 121314 . 121315) (symbol 121305 . 121313) (symbol 121293 . 121304) (EXTERN 121286 . 121292) (punctuation 121284 . 121285) (close-paren 121283 . 121284) (symbol 121272 . 121283) (open-paren 121271 . 121272) (symbol 121257 . 121270) (symbol 121245 . 121256) (EXTERN 121238 . 121244) (punctuation 121208 . 121209) (close-paren 121207 . 121208) (number 121206 . 121207) (punctuation 121204 . 121205) (number 121203 . 121204) (open-paren 121202 . 121203) (symbol 121178 . 121201) (close-paren 121174 . 121175) (symbol 121167 . 121174) (punctuation 121165 . 121166) (punctuation 121164 . 121165) (CONST 121158 . 121163) (CHAR 121153 . 121157) (punctuation 121144 . 121145) (symbol 121135 . 121144) (punctuation 121133 . 121134) (punctuation 121132 . 121133) (CONST 121126 . 121131) (CHAR 121121 . 121125) (punctuation 121119 . 121120) (punctuation 121118 . 121119) (symbol 121108 . 121117) (punctuation 121106 . 121107) (punctuation 121105 . 121106) (punctuation 121104 . 121105) (CHAR 121099 . 121103) (open-paren 121098 . 121099) (symbol 121088 . 121097) (symbol 121078 . 121087) (EXTERN 121071 . 121077) (punctuation 121069 . 121070) (close-paren 121068 . 121069) (number 121067 . 121068) (punctuation 121065 . 121066) (number 121064 . 121065) (open-paren 121063 . 121064) (symbol 121039 . 121062) (close-paren 121035 . 121036) (punctuation 121034 . 121035) (punctuation 121033 . 121034) (punctuation 121032 . 121033) (punctuation 121030 . 121031) (punctuation 121029 . 121030) (CONST 121023 . 121028) (CHAR 121018 . 121022) (punctuation 121010 . 121011) (symbol 121001 . 121010) (punctuation 120999 . 121000) (punctuation 120998 . 120999) (CONST 120992 . 120997) (CHAR 120987 . 120991) (punctuation 120985 . 120986) (punctuation 120984 . 120985) (symbol 120974 . 120983) (punctuation 120972 . 120973) (punctuation 120971 . 120972) (punctuation 120970 . 120971) (CHAR 120965 . 120969) (open-paren 120964 . 120965) (symbol 120955 . 120963) (symbol 120945 . 120954) (EXTERN 120938 . 120944) (punctuation 120936 . 120937) (close-paren 120935 . 120936) (number 120934 . 120935) (punctuation 120932 . 120933) (number 120931 . 120932) (open-paren 120930 . 120931) (symbol 120906 . 120929) (close-paren 120902 . 120903) (punctuation 120901 . 120902) (punctuation 120900 . 120901) (punctuation 120899 . 120900) (punctuation 120897 . 120898) (punctuation 120896 . 120897) (CONST 120890 . 120895) (CHAR 120885 . 120889) (punctuation 120883 . 120884) (punctuation 120882 . 120883) (CHAR 120877 . 120881) (open-paren 120876 . 120877) (symbol 120867 . 120875) (symbol 120857 . 120866) (EXTERN 120850 . 120856) (punctuation 120848 . 120849) (close-paren 120847 . 120848) (symbol 120840 . 120847) (punctuation 120834 . 120835) (punctuation 120833 . 120834) (CHAR 120828 . 120832) (CONST 120822 . 120827) (punctuation 120820 . 120821) (punctuation 120819 . 120820) (CHAR 120814 . 120818) (CONST 120808 . 120813) (punctuation 120806 . 120807) (symbol 120797 . 120806) (punctuation 120795 . 120796) (punctuation 120794 . 120795) (CHAR 120789 . 120793) (open-paren 120788 . 120789) (symbol 120781 . 120787) (symbol 120771 . 120780) (EXTERN 120764 . 120770) (punctuation 120733 . 120734) (close-paren 120732 . 120733) (VOID 120728 . 120732) (open-paren 120727 . 120728) (symbol 120713 . 120726) (VOID 120708 . 120712) (EXTERN 120701 . 120707) (punctuation 120699 . 120700) (close-paren 120698 . 120699) (VOID 120694 . 120698) (open-paren 120693 . 120694) (symbol 120677 . 120692) (VOID 120672 . 120676) (EXTERN 120665 . 120671) (punctuation 120663 . 120664) (close-paren 120662 . 120663) (DOUBLE 120656 . 120662) (punctuation 120654 . 120655) (punctuation 120653 . 120654) (CHAR 120648 . 120652) (open-paren 120647 . 120648) (symbol 120631 . 120646) (INT 120627 . 120630) (EXTERN 120620 . 120626) (punctuation 120582 . 120583) (close-paren 120581 . 120582) (symbol 120570 . 120581) (punctuation 120568 . 120569) (punctuation 120552 . 120553) (punctuation 120537 . 120538) (punctuation 120536 . 120537) (CHAR 120531 . 120535) (CONST 120525 . 120530) (open-paren 120524 . 120525) (symbol 120480 . 120515) (symbol 120468 . 120479) (EXTERN 120461 . 120467) (punctuation 120459 . 120460) (close-paren 120458 . 120459) (symbol 120447 . 120458) (punctuation 120440 . 120441) (punctuation 120439 . 120440) (CHAR 120434 . 120438) (CONST 120428 . 120433) (punctuation 120426 . 120427) (symbol 120415 . 120426) (punctuation 120413 . 120414) (symbol 120402 . 120413) (open-paren 120401 . 120402) (symbol 120381 . 120400) (VOID 120376 . 120380) (EXTERN 120369 . 120375) (punctuation 120343 . 120344) (close-paren 120342 . 120343) (punctuation 120341 . 120342) (CHAR 120336 . 120340) (CONST 120330 . 120335) (open-paren 120329 . 120330) (symbol 120304 . 120328) (VOID 120299 . 120303) (EXTERN 120292 . 120298) (close-paren 120270 . 120271) (symbol 120259 . 120270) (open-paren 120258 . 120259) (symbol 120246 . 120257) (VOID 120241 . 120245) (EXTERN 120234 . 120240) (punctuation 120160 . 120161) (close-paren 120159 . 120160) (VOID 120155 . 120159) (open-paren 120154 . 120155) (symbol 120138 . 120153) (VOID 120133 . 120137) (EXTERN 120126 . 120132) (punctuation 120124 . 120125) (close-paren 120123 . 120124) (symbol 120112 . 120123) (open-paren 120111 . 120112) (symbol 120097 . 120110) (symbol 120085 . 120096) (EXTERN 120078 . 120084) (punctuation 120076 . 120077) (close-paren 120075 . 120076) (UNSIGNED 120067 . 120075) (punctuation 120065 . 120066) (UNSIGNED 120057 . 120065) (punctuation 120050 . 120051) (punctuation 120049 . 120050) (symbol 120041 . 120048) (STRUCT 120034 . 120040) (punctuation 120032 . 120033) (symbol 120021 . 120032) (punctuation 120014 . 120015) (symbol 120003 . 120014) (punctuation 120001 . 120002) (symbol 119990 . 120001) (punctuation 119983 . 119984) (semantic-list 119957 . 119983) (semantic-list 119943 . 119956) (VOID 119938 . 119942) (open-paren 119937 . 119938) (symbol 119910 . 119936) (VOID 119905 . 119909) (EXTERN 119898 . 119904) (punctuation 119896 . 119897) (close-paren 119895 . 119896) (symbol 119884 . 119895) (punctuation 119882 . 119883) (symbol 119871 . 119882) (punctuation 119869 . 119870) (symbol 119858 . 119869) (punctuation 119828 . 119829) (semantic-list 119761 . 119828) (semantic-list 119757 . 119760) (VOID 119752 . 119756) (open-paren 119751 . 119752) (symbol 119736 . 119750) (VOID 119731 . 119735) (EXTERN 119724 . 119730) (punctuation 119722 . 119723) (close-paren 119721 . 119722) (symbol 119710 . 119721) (punctuation 119708 . 119709) (INT 119705 . 119708) (punctuation 119703 . 119704) (INT 119700 . 119703) (punctuation 119698 . 119699) (symbol 119687 . 119698) (open-paren 119686 . 119687) (symbol 119665 . 119685) (VOID 119660 . 119664) (EXTERN 119653 . 119659) (punctuation 119651 . 119652) (close-paren 119650 . 119651) (punctuation 119649 . 119650) (INT 119645 . 119648) (punctuation 119643 . 119644) (punctuation 119642 . 119643) (INT 119638 . 119641) (punctuation 119591 . 119592) (INT 119588 . 119591) (punctuation 119586 . 119587) (symbol 119575 . 119586) (open-paren 119574 . 119575) (symbol 119549 . 119573) (symbol 119537 . 119548) (EXTERN 119530 . 119536) (punctuation 119528 . 119529) (close-paren 119527 . 119528) (symbol 119516 . 119527) (open-paren 119515 . 119516) (symbol 119499 . 119514) (symbol 119487 . 119498) (EXTERN 119480 . 119486) (punctuation 119114 . 119115) (close-paren 119113 . 119114) (VOID 119109 . 119113) (open-paren 119108 . 119109) (symbol 119087 . 119107) (VOID 119082 . 119086) (EXTERN 119075 . 119081) (punctuation 119066 . 119067) (close-paren 119065 . 119066) (semantic-list 119062 . 119065) (open-paren 119061 . 119062) (symbol 119039 . 119060) (close-paren 119037 . 119038) (symbol 119031 . 119037) (punctuation 119029 . 119030) (symbol 119023 . 119029) (open-paren 119022 . 119023) (symbol 119008 . 119021) (punctuation 119007 . 119008) (VOID 119002 . 119006) (EXTERN 118995 . 119001) (close-paren 118802 . 118803) (punctuation 118800 . 118801) (semantic-list 118798 . 118800) (semantic-list "((void) 0)" 118775 . 118797) (spp-arg-list nil 118775 . 118797) (open-paren 118773 . 118774) (close-paren 118771 . 118772) (VOID 118767 . 118771) (open-paren 118766 . 118767) (close-paren 118764 . 118765) (symbol 118749 . 118764) (open-paren 118748 . 118749) (VOID 118743 . 118747) (symbol 118736 . 118742) (punctuation 118666 . 118667) (close-paren 118665 . 118666) (symbol 118654 . 118665) (open-paren 118653 . 118654) (symbol 118633 . 118652) (INT 118629 . 118632) (EXTERN 118622 . 118628) (punctuation 118620 . 118621) (close-paren 118619 . 118620) (VOID 118615 . 118619) (open-paren 118614 . 118615) (symbol 118598 . 118613) (punctuation 118596 . 118597) (symbol 118589 . 118595) (STRUCT 118582 . 118588) (EXTERN 118575 . 118581) (punctuation 118573 . 118574) (close-paren 118572 . 118573) (VOID 118568 . 118572) (open-paren 118567 . 118568) (symbol 118553 . 118566) (VOID 118548 . 118552) (EXTERN 118541 . 118547) (punctuation 118539 . 118540) (close-paren 118538 . 118539) (VOID 118534 . 118538) (open-paren 118533 . 118534) (symbol 118522 . 118532) (VOID 118517 . 118521) (EXTERN 118510 . 118516) (punctuation 118508 . 118509) (close-paren 118507 . 118508) (VOID 118503 . 118507) (open-paren 118502 . 118503) (symbol 118486 . 118501) (VOID 118481 . 118485) (EXTERN 118474 . 118480) (punctuation 118472 . 118473) (close-paren 118471 . 118472) (punctuation 118470 . 118471) (symbol 118460 . 118469) (STRUCT 118453 . 118459) (open-paren 118452 . 118453) (symbol 118442 . 118451) (VOID 118437 . 118441) (EXTERN 118430 . 118436) (punctuation 118428 . 118429) (close-paren 118427 . 118428) (symbol 118416 . 118427) (punctuation 118414 . 118415) (symbol 118403 . 118414) (punctuation 118401 . 118402) (symbol 118390 . 118401) (open-paren 118389 . 118390) (symbol 118375 . 118388) (symbol 118363 . 118374) (EXTERN 118356 . 118362) (punctuation 118354 . 118355) (close-paren 118353 . 118354) (VOID 118349 . 118353) (open-paren 118348 . 118349) (symbol 118321 . 118347) (symbol 118311 . 118320) (EXTERN 118304 . 118310) (punctuation 118302 . 118303) (close-paren 118301 . 118302) (VOID 118297 . 118301) (open-paren 118296 . 118297) (symbol 118273 . 118295) (VOID 118268 . 118272) (EXTERN 118261 . 118267) (punctuation 118259 . 118260) (close-paren 118258 . 118259) (DOUBLE 118252 . 118258) (open-paren 118251 . 118252) (symbol 118240 . 118250) (symbol 118228 . 118239) (EXTERN 118221 . 118227) (punctuation 117509 . 117510) (close-paren 117508 . 117509) (symbol 117499 . 117508) (ENUM 117494 . 117498) (punctuation 117484 . 117485) (INT 117481 . 117484) (punctuation 117479 . 117480) (INT 117476 . 117479) (punctuation 117474 . 117475) (INT 117471 . 117474) (open-paren 117470 . 117471) (symbol 117448 . 117469) (punctuation 117447 . 117448) (symbol 117435 . 117446) (STRUCT 117428 . 117434) (EXTERN 117421 . 117427) (close-paren 117418 . 117419) (RETURN 117408 . 117414) (punctuation 117384 . 117385) (punctuation 117383 . 117384) (semantic-list 117380 . 117383) (symbol 117364 . 117379) (punctuation 117346 . 117347) (punctuation 117345 . 117346) (semantic-list 117342 . 117345) (symbol 117326 . 117341) (punctuation 117322 . 117323) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 117297 . 117300) ("v" symbol "XVECTOR" 117289 . 117296)))) 117275 . 117322) (open-paren 117165 . 117166) (close-paren 117163 . 117164) (symbol 117155 . 117163) (INT 117151 . 117154) (punctuation 117149 . 117150) (symbol 117144 . 117149) (INT 117140 . 117143) (open-paren 117139 . 117140) (symbol 117112 . 117138) (symbol 117100 . 117111) (symbol 117093 . 117099) (close-paren 117037 . 117038) (RETURN 117027 . 117033) (punctuation 117023 . 117024) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 117021 . 117022) ("a" symbol "v" 117018 . 117019)))) 117006 . 117023) (open-paren 116929 . 116930) (close-paren 116927 . 116928) (symbol 116923 . 116927) (symbol 116913 . 116922) (open-paren 116912 . 116913) (symbol 116893 . 116911) (symbol 116881 . 116892) (symbol 116874 . 116880) (punctuation 116562 . 116563) (close-paren 116561 . 116562) (symbol 116552 . 116561) (open-paren 116551 . 116552) (symbol 116535 . 116550) (punctuation 116534 . 116535) (symbol 116522 . 116533) (STRUCT 116515 . 116521) (EXTERN 116508 . 116514) (punctuation 116506 . 116507) (close-paren 116505 . 116506) (punctuation 116504 . 116505) (symbol 116492 . 116503) (STRUCT 116485 . 116491) (open-paren 116484 . 116485) (symbol 116469 . 116483) (VOID 116464 . 116468) (EXTERN 116457 . 116463) (punctuation 116455 . 116456) (close-paren 116454 . 116455) (symbol 116443 . 116454) (punctuation 116441 . 116442) (symbol 116430 . 116441) (open-paren 116429 . 116430) (symbol 116419 . 116428) (symbol 116407 . 116418) (EXTERN 116400 . 116406) (close-paren 116397 . 116398) (semantic-list 116389 . 116394) (RETURN 116357 . 116363) (open-paren 116353 . 116354) (close-paren 116351 . 116352) (symbol 116348 . 116351) (punctuation 116347 . 116348) (CHAR 116342 . 116346) (CONST 116336 . 116341) (open-paren 116335 . 116336) (symbol 116322 . 116334) (symbol 116310 . 116321) (symbol 116303 . 116309) (close-paren 116206 . 116207) (semantic-list 116198 . 116203) (RETURN 116159 . 116165) (open-paren 116155 . 116156) (close-paren 116153 . 116154) (symbol 116150 . 116153) (punctuation 116149 . 116150) (CHAR 116144 . 116148) (CONST 116138 . 116143) (open-paren 116137 . 116138) (symbol 116117 . 116136) (symbol 116105 . 116116) (symbol 116098 . 116104) (punctuation 116024 . 116025) (close-paren 116023 . 116024) (symbol 116014 . 116023) (punctuation 116012 . 116013) (punctuation 116011 . 116012) (CHAR 116006 . 116010) (CONST 116000 . 116005) (open-paren 115999 . 116000) (symbol 115980 . 115998) (symbol 115968 . 115979) (EXTERN 115961 . 115967) (punctuation 115959 . 115960) (close-paren 115958 . 115959) (BOOL 115954 . 115958) (punctuation 115952 . 115953) (symbol 115943 . 115952) (punctuation 115941 . 115942) (symbol 115932 . 115941) (punctuation 115930 . 115931) (punctuation 115929 . 115930) (CHAR 115924 . 115928) (CONST 115918 . 115923) (open-paren 115917 . 115918) (symbol 115900 . 115916) (symbol 115888 . 115899) (EXTERN 115881 . 115887) (punctuation 115879 . 115880) (close-paren 115878 . 115879) (BOOL 115874 . 115878) (punctuation 115872 . 115873) (symbol 115863 . 115872) (punctuation 115861 . 115862) (symbol 115852 . 115861) (punctuation 115843 . 115844) (punctuation 115842 . 115843) (CHAR 115837 . 115841) (CONST 115831 . 115836) (open-paren 115830 . 115831) (symbol 115808 . 115829) (symbol 115796 . 115807) (EXTERN 115789 . 115795) (punctuation 115787 . 115788) (close-paren 115786 . 115787) (symbol 115777 . 115786) (punctuation 115775 . 115776) (symbol 115766 . 115775) (punctuation 115764 . 115765) (punctuation 115763 . 115764) (CHAR 115758 . 115762) (CONST 115752 . 115757) (open-paren 115751 . 115752) (symbol 115728 . 115750) (symbol 115716 . 115727) (EXTERN 115709 . 115715) (punctuation 115707 . 115708) (close-paren 115706 . 115707) (symbol 115697 . 115706) (punctuation 115695 . 115696) (symbol 115686 . 115695) (open-paren 115685 . 115686) (symbol 115656 . 115684) (symbol 115644 . 115655) (EXTERN 115637 . 115643) (punctuation 115635 . 115636) (close-paren 115634 . 115635) (symbol 115625 . 115634) (open-paren 115624 . 115625) (symbol 115605 . 115623) (symbol 115593 . 115604) (EXTERN 115586 . 115592) (punctuation 115584 . 115585) (close-paren 115583 . 115584) (punctuation 115582 . 115583) (symbol 115570 . 115581) (punctuation 115568 . 115569) (symbol 115559 . 115568) (open-paren 115558 . 115559) (symbol 115541 . 115557) (symbol 115529 . 115540) (EXTERN 115522 . 115528) (punctuation 115520 . 115521) (close-paren 115519 . 115520) (symbol 115510 . 115519) (punctuation 115508 . 115509) (symbol 115499 . 115508) (punctuation 115497 . 115498) (punctuation 115496 . 115497) (CHAR 115491 . 115495) (CONST 115485 . 115490) (open-paren 115484 . 115485) (symbol 115462 . 115483) (symbol 115450 . 115461) (EXTERN 115443 . 115449) (close-paren 115440 . 115441) (semantic-list 115432 . 115437) (RETURN 115392 . 115398) (open-paren 115388 . 115389) (close-paren 115386 . 115387) (symbol 115383 . 115386) (punctuation 115382 . 115383) (CHAR 115377 . 115381) (CONST 115371 . 115376) (open-paren 115370 . 115371) (symbol 115349 . 115369) (symbol 115337 . 115348) (symbol 115330 . 115336) (punctuation 115256 . 115257) (close-paren 115255 . 115256) (symbol 115246 . 115255) (punctuation 115244 . 115245) (punctuation 115243 . 115244) (CHAR 115238 . 115242) (CONST 115232 . 115237) (open-paren 115231 . 115232) (symbol 115211 . 115230) (symbol 115199 . 115210) (EXTERN 115192 . 115198) (punctuation 115190 . 115191) (close-paren 115189 . 115190) (number 115188 . 115189) (punctuation 115186 . 115187) (number 115185 . 115186) (open-paren 115184 . 115185) (symbol 115160 . 115183) (close-paren 115156 . 115157) (punctuation 115155 . 115156) (punctuation 115154 . 115155) (punctuation 115153 . 115154) (punctuation 115151 . 115152) (punctuation 115150 . 115151) (CHAR 115145 . 115149) (CONST 115139 . 115144) (punctuation 115137 . 115138) (punctuation 115136 . 115137) (CHAR 115131 . 115135) (open-paren 115130 . 115131) (symbol 115108 . 115129) (symbol 115096 . 115107) (EXTERN 115089 . 115095) (punctuation 115087 . 115088) (close-paren 115086 . 115087) (symbol 115077 . 115086) (punctuation 115075 . 115076) (punctuation 115074 . 115075) (CHAR 115069 . 115073) (CONST 115063 . 115068) (open-paren 115062 . 115063) (symbol 115050 . 115061) (symbol 115038 . 115049) (EXTERN 115031 . 115037) (punctuation 115029 . 115030) (close-paren 115028 . 115029) (VOID 115024 . 115028) (open-paren 115023 . 115024) (symbol 115007 . 115022) (VOID 115002 . 115006) (EXTERN 114985 . 114991) (punctuation 114983 . 114984) (close-paren 114982 . 114983) (symbol 114971 . 114982) (punctuation 114969 . 114970) (symbol 114958 . 114969) (open-paren 114957 . 114958) (symbol 114940 . 114956) (symbol 114928 . 114939) (EXTERN 114921 . 114927) (punctuation 114919 . 114920) (close-paren 114918 . 114919) (symbol 114909 . 114918) (open-paren 114908 . 114909) (symbol 114884 . 114907) (symbol 114872 . 114883) (EXTERN 114865 . 114871) (close-paren 114862 . 114863) (semantic-list 114856 . 114859) (semantic-list 114839 . 114842) (semantic-list 114820 . 114823) (semantic-list 114803 . 114806) (RETURN 114777 . 114783) (open-paren 114773 . 114774) (close-paren 114771 . 114772) (symbol 114770 . 114771) (symbol 114760 . 114769) (punctuation 114758 . 114759) (symbol 114757 . 114758) (symbol 114747 . 114756) (punctuation 114745 . 114746) (symbol 114744 . 114745) (symbol 114734 . 114743) (punctuation 114732 . 114733) (symbol 114731 . 114732) (symbol 114721 . 114730) (open-paren 114720 . 114721) (symbol 114713 . 114719) (symbol 114701 . 114712) (symbol 114694 . 114700) (close-paren 114691 . 114692) (semantic-list 114685 . 114688) (semantic-list 114668 . 114671) (semantic-list 114651 . 114654) (RETURN 114625 . 114631) (open-paren 114621 . 114622) (close-paren 114619 . 114620) (symbol 114618 . 114619) (symbol 114608 . 114617) (punctuation 114606 . 114607) (symbol 114605 . 114606) (symbol 114595 . 114604) (punctuation 114593 . 114594) (symbol 114592 . 114593) (symbol 114582 . 114591) (open-paren 114581 . 114582) (symbol 114574 . 114580) (symbol 114562 . 114573) (symbol 114555 . 114561) (close-paren 114552 . 114553) (semantic-list 114546 . 114549) (semantic-list 114529 . 114532) (RETURN 114503 . 114509) (open-paren 114499 . 114500) (close-paren 114497 . 114498) (symbol 114496 . 114497) (symbol 114486 . 114495) (punctuation 114484 . 114485) (symbol 114483 . 114484) (symbol 114473 . 114482) (open-paren 114472 . 114473) (symbol 114465 . 114471) (symbol 114453 . 114464) (symbol 114446 . 114452) (punctuation 114390 . 114391) (close-paren 114389 . 114390) (punctuation 114388 . 114389) (punctuation 114387 . 114388) (punctuation 114386 . 114387) (punctuation 114384 . 114385) (symbol 114373 . 114384) (punctuation 114371 . 114372) (symbol 114362 . 114371) (punctuation 114360 . 114361) (symbol 114352 . 114360) (ENUM 114347 . 114351) (open-paren 114346 . 114347) (symbol 114340 . 114345) (symbol 114328 . 114339) (EXTERN 114321 . 114327) (punctuation 114319 . 114320) (close-paren 114318 . 114319) (symbol 114305 . 114318) (punctuation 114303 . 114304) (symbol 114290 . 114303) (open-paren 114289 . 114290) (symbol 114280 . 114288) (ENUM 114275 . 114279) (punctuation 114273 . 114274) (close-paren 114272 . 114273) (symbol 114261 . 114272) (punctuation 114254 . 114255) (symbol 114243 . 114254) (punctuation 114241 . 114242) (symbol 114230 . 114241) (punctuation 114228 . 114229) (symbol 114217 . 114228) (punctuation 114215 . 114216) (symbol 114204 . 114215) (open-paren 114203 . 114204) (symbol 114197 . 114202) (symbol 114185 . 114196) (EXTERN 114178 . 114184) (punctuation 114176 . 114177) (close-paren 114175 . 114176) (symbol 114164 . 114175) (punctuation 114162 . 114163) (symbol 114151 . 114162) (punctuation 114149 . 114150) (symbol 114138 . 114149) (punctuation 114136 . 114137) (symbol 114125 . 114136) (open-paren 114124 . 114125) (symbol 114118 . 114123) (symbol 114106 . 114117) (EXTERN 114099 . 114105) (punctuation 114097 . 114098) (close-paren 114096 . 114097) (symbol 114085 . 114096) (punctuation 114083 . 114084) (symbol 114072 . 114083) (punctuation 114070 . 114071) (symbol 114059 . 114070) (open-paren 114058 . 114059) (symbol 114052 . 114057) (symbol 114040 . 114051) (EXTERN 114033 . 114039) (punctuation 114031 . 114032) (close-paren 114030 . 114031) (symbol 114019 . 114030) (punctuation 114017 . 114018) (symbol 114006 . 114017) (open-paren 114005 . 114006) (symbol 113999 . 114004) (symbol 113987 . 113998) (EXTERN 113980 . 113986) (punctuation 113978 . 113979) (close-paren 113977 . 113978) (symbol 113966 . 113977) (open-paren 113965 . 113966) (symbol 113959 . 113964) (symbol 113947 . 113958) (EXTERN 113940 . 113946) (punctuation 113743 . 113744) (close-paren 113742 . 113743) (symbol 113739 . 113742) (punctuation 113738 . 113739) (VOID 113733 . 113737) (punctuation 113731 . 113732) (semantic-list 113720 . 113731) (semantic-list 113712 . 113719) (VOID 113707 . 113711) (open-paren 113706 . 113707) (symbol 113684 . 113705) (VOID 113679 . 113683) (EXTERN 113672 . 113678) (punctuation 113670 . 113671) (close-paren 113669 . 113670) (punctuation 113668 . 113669) (CHAR 113663 . 113667) (punctuation 113661 . 113662) (punctuation 113660 . 113661) (CHAR 113655 . 113659) (open-paren 113654 . 113655) (symbol 113643 . 113653) (VOID 113638 . 113642) (EXTERN 113631 . 113637) (punctuation 113629 . 113630) (close-paren 113628 . 113629) (symbol 113619 . 113628) (punctuation 113617 . 113618) (punctuation 113616 . 113617) (symbol 113604 . 113615) (open-paren 113603 . 113604) (symbol 113584 . 113602) (VOID 113579 . 113583) (EXTERN 113572 . 113578) (punctuation 113570 . 113571) (close-paren 113569 . 113570) (VOID 113565 . 113569) (open-paren 113564 . 113565) (symbol 113546 . 113563) (VOID 113541 . 113545) (EXTERN 113534 . 113540) (punctuation 113532 . 113533) (close-paren 113531 . 113532) (VOID 113527 . 113531) (open-paren 113526 . 113527) (symbol 113509 . 113525) (VOID 113504 . 113508) (EXTERN 113497 . 113503) (punctuation 113372 . 113373) (close-paren 113371 . 113372) (symbol 113360 . 113371) (open-paren 113359 . 113360) (symbol 113347 . 113358) (VOID 113342 . 113346) (EXTERN 113335 . 113341) (punctuation 113333 . 113334) (close-paren 113332 . 113333) (symbol 113321 . 113332) (open-paren 113320 . 113321) (symbol 113306 . 113319) (BOOL 113301 . 113305) (EXTERN 113294 . 113300) (punctuation 113292 . 113293) (close-paren 113291 . 113292) (symbol 113282 . 113291) (open-paren 113281 . 113282) (symbol 113262 . 113280) (VOID 113257 . 113261) (EXTERN 113240 . 113246) (punctuation 113238 . 113239) (close-paren 113237 . 113238) (symbol 113231 . 113237) (open-paren 113230 . 113231) (symbol 113218 . 113229) (VOID 113213 . 113217) (EXTERN 113196 . 113202) (punctuation 113194 . 113195) (close-paren 113193 . 113194) (punctuation 113192 . 113193) (CHAR 113187 . 113191) (CONST 113181 . 113186) (open-paren 113180 . 113181) (symbol 113165 . 113179) (VOID 113160 . 113164) (EXTERN 113153 . 113159) (punctuation 113151 . 113152) (close-paren 113150 . 113151) (symbol 113141 . 113150) (punctuation 113139 . 113140) (symbol 113130 . 113139) (punctuation 113128 . 113129) (punctuation 113127 . 113128) (symbol 113115 . 113126) (STRUCT 113108 . 113114) (open-paren 113107 . 113108) (symbol 113086 . 113106) (VOID 113081 . 113085) (EXTERN 113074 . 113080) (punctuation 113072 . 113073) (close-paren 113071 . 113072) (VOID 113067 . 113071) (open-paren 113066 . 113067) (symbol 113050 . 113065) (VOID 113045 . 113049) (EXTERN 113038 . 113044) (punctuation 113036 . 113037) (close-paren 113035 . 113036) (VOID 113031 . 113035) (open-paren 113030 . 113031) (symbol 113016 . 113029) (punctuation 113015 . 113016) (VOID 113010 . 113014) (EXTERN 113003 . 113009) (punctuation 112973 . 112974) (close-paren 112972 . 112973) (punctuation 112971 . 112972) (symbol 112961 . 112970) (punctuation 112959 . 112960) (punctuation 112958 . 112959) (symbol 112948 . 112957) (punctuation 112938 . 112939) (symbol 112929 . 112938) (punctuation 112927 . 112928) (punctuation 112926 . 112927) (CHAR 112921 . 112925) (UNSIGNED 112912 . 112920) (CONST 112906 . 112911) (open-paren 112905 . 112906) (symbol 112882 . 112904) (VOID 112877 . 112881) (EXTERN 112870 . 112876) (punctuation 112836 . 112837) (close-paren 112835 . 112836) (semantic-list 112821 . 112835) (semantic-list 112810 . 112820) (VOID 112805 . 112809) (punctuation 112803 . 112804) (punctuation 112802 . 112803) (VOID 112797 . 112801) (open-paren 112796 . 112797) (symbol 112780 . 112795) (VOID 112775 . 112779) (EXTERN 112768 . 112774) (punctuation 112735 . 112736) (close-paren 112734 . 112735) (VOID 112730 . 112734) (open-paren 112729 . 112730) (symbol 112711 . 112728) (VOID 112706 . 112710) (EXTERN 112699 . 112705) (punctuation 112665 . 112666) (close-paren 112664 . 112665) (punctuation 112663 . 112664) (INT 112659 . 112662) (punctuation 112657 . 112658) (punctuation 112656 . 112657) (INT 112652 . 112655) (punctuation 112650 . 112651) (punctuation 112649 . 112650) (INT 112645 . 112648) (punctuation 112643 . 112644) (punctuation 112642 . 112643) (INT 112638 . 112641) (punctuation 112636 . 112637) (punctuation 112635 . 112636) (INT 112631 . 112634) (punctuation 112623 . 112624) (punctuation 112622 . 112623) (INT 112618 . 112621) (punctuation 112616 . 112617) (symbol 112607 . 112616) (punctuation 112605 . 112606) (punctuation 112604 . 112605) (symbol 112597 . 112603) (STRUCT 112590 . 112596) (open-paren 112589 . 112590) (symbol 112575 . 112588) (BOOL 112570 . 112574) (EXTERN 112563 . 112569) (punctuation 112561 . 112562) (close-paren 112560 . 112561) (symbol 112549 . 112560) (open-paren 112548 . 112549) (symbol 112538 . 112547) (symbol 112526 . 112537) (EXTERN 112519 . 112525) (punctuation 112517 . 112518) (close-paren 112516 . 112517) (VOID 112512 . 112516) (open-paren 112511 . 112512) (symbol 112500 . 112510) (VOID 112495 . 112499) (EXTERN 112488 . 112494) (punctuation 112486 . 112487) (close-paren 112485 . 112486) (VOID 112481 . 112485) (open-paren 112480 . 112481) (symbol 112466 . 112479) (VOID 112461 . 112465) (EXTERN 112454 . 112460) (punctuation 112452 . 112453) (close-paren 112451 . 112452) (symbol 112440 . 112451) (punctuation 112438 . 112439) (punctuation 112437 . 112438) (symbol 112431 . 112436) (STRUCT 112424 . 112430) (open-paren 112423 . 112424) (symbol 112400 . 112422) (VOID 112395 . 112399) (punctuation 112392 . 112393) (close-paren 112391 . 112392) (VOID 112387 . 112391) (open-paren 112386 . 112387) (symbol 112376 . 112385) (VOID 112371 . 112375) (EXTERN 112364 . 112370) (punctuation 112362 . 112363) (close-paren 112361 . 112362) (symbol 112352 . 112361) (open-paren 112351 . 112352) (symbol 112332 . 112350) (VOID 112327 . 112331) (EXTERN 112320 . 112326) (punctuation 112318 . 112319) (close-paren 112317 . 112318) (VOID 112313 . 112317) (open-paren 112312 . 112313) (symbol 112295 . 112311) (VOID 112290 . 112294) (EXTERN 112283 . 112289) (punctuation 112281 . 112282) (close-paren 112280 . 112281) (VOID 112276 . 112280) (open-paren 112275 . 112276) (symbol 112249 . 112274) (VOID 112244 . 112248) (EXTERN 112237 . 112243) (punctuation 112235 . 112236) (close-paren 112234 . 112235) (BOOL 112230 . 112234) (punctuation 112228 . 112229) (symbol 112217 . 112228) (punctuation 112215 . 112216) (punctuation 112214 . 112215) (CHAR 112209 . 112213) (CONST 112203 . 112208) (open-paren 112202 . 112203) (symbol 112182 . 112201) (VOID 112177 . 112181) (EXTERN 112170 . 112176) (punctuation 112168 . 112169) (close-paren 112167 . 112168) (BOOL 112163 . 112167) (punctuation 112161 . 112162) (BOOL 112157 . 112161) (punctuation 112155 . 112156) (symbol 112146 . 112155) (punctuation 112144 . 112145) (punctuation 112143 . 112144) (CHAR 112138 . 112142) (CONST 112132 . 112137) (open-paren 112131 . 112132) (symbol 112117 . 112130) (VOID 112112 . 112116) (EXTERN 112105 . 112111) (punctuation 112103 . 112104) (close-paren 112102 . 112103) (symbol 112091 . 112102) (open-paren 112090 . 112091) (symbol 112075 . 112089) (VOID 112070 . 112074) (EXTERN 112063 . 112069) (punctuation 112061 . 112062) (close-paren 112060 . 112061) (symbol 112049 . 112060) (open-paren 112048 . 112049) (symbol 112039 . 112047) (VOID 112034 . 112038) (EXTERN 112027 . 112033) (punctuation 112025 . 112026) (close-paren 112024 . 112025) (punctuation 112023 . 112024) (CHAR 112018 . 112022) (CONST 112012 . 112017) (open-paren 112011 . 112012) (symbol 111996 . 112010) (VOID 111991 . 111995) (EXTERN 111984 . 111990) (punctuation 111982 . 111983) (close-paren 111981 . 111982) (punctuation 111980 . 111981) (CHAR 111975 . 111979) (CONST 111969 . 111974) (open-paren 111968 . 111969) (symbol 111959 . 111967) (VOID 111954 . 111958) (EXTERN 111947 . 111953) (punctuation 111945 . 111946) (close-paren 111944 . 111945) (number 111943 . 111944) (punctuation 111941 . 111942) (number 111940 . 111941) (open-paren 111939 . 111940) (symbol 111915 . 111938) (close-paren 111913 . 111914) (punctuation 111912 . 111913) (punctuation 111911 . 111912) (punctuation 111910 . 111911) (punctuation 111908 . 111909) (punctuation 111907 . 111908) (CHAR 111902 . 111906) (CONST 111896 . 111901) (open-paren 111895 . 111896) (symbol 111887 . 111894) (VOID 111882 . 111886) (EXTERN 111875 . 111881) (punctuation 111873 . 111874) (close-paren 111872 . 111873) (BOOL 111868 . 111872) (punctuation 111866 . 111867) (BOOL 111862 . 111866) (open-paren 111861 . 111862) (symbol 111847 . 111860) (VOID 111842 . 111846) (EXTERN 111835 . 111841) (punctuation 111833 . 111834) (close-paren 111832 . 111833) (VOID 111828 . 111832) (open-paren 111827 . 111828) (symbol 111811 . 111826) (symbol 111799 . 111810) (EXTERN 111792 . 111798) (punctuation 111790 . 111791) (close-paren 111789 . 111790) (VOID 111785 . 111789) (open-paren 111784 . 111785) (symbol 111768 . 111783) (VOID 111763 . 111767) (EXTERN 111756 . 111762) (punctuation 111754 . 111755) (close-paren 111753 . 111754) (symbol 111742 . 111753) (open-paren 111741 . 111742) (symbol 111718 . 111740) (symbol 111706 . 111717) (EXTERN 111699 . 111705) (punctuation 111697 . 111698) (close-paren 111696 . 111697) (VOID 111692 . 111696) (open-paren 111691 . 111692) (symbol 111672 . 111690) (VOID 111667 . 111671) (EXTERN 111660 . 111666) (punctuation 111658 . 111659) (close-paren 111657 . 111658) (VOID 111653 . 111657) (open-paren 111652 . 111653) (symbol 111639 . 111651) (BOOL 111634 . 111638) (EXTERN 111627 . 111633) (punctuation 111625 . 111626) (close-paren 111624 . 111625) (BOOL 111620 . 111624) (open-paren 111619 . 111620) (symbol 111590 . 111618) (VOID 111585 . 111589) (EXTERN 111578 . 111584) (punctuation 111576 . 111577) (close-paren 111575 . 111576) (VOID 111571 . 111575) (open-paren 111570 . 111571) (symbol 111550 . 111569) (VOID 111545 . 111549) (EXTERN 111538 . 111544) (punctuation 111536 . 111537) (close-paren 111535 . 111536) (symbol 111528 . 111535) (punctuation 111526 . 111527) (punctuation 111525 . 111526) (CONST 111519 . 111524) (CHAR 111514 . 111518) (open-paren 111513 . 111514) (symbol 111501 . 111512) (VOID 111496 . 111500) (EXTERN 111489 . 111495) (punctuation 111487 . 111488) (close-paren 111486 . 111487) (punctuation 111485 . 111486) (punctuation 111484 . 111485) (punctuation 111483 . 111484) (punctuation 111481 . 111482) (punctuation 111480 . 111481) (CONST 111474 . 111479) (CHAR 111469 . 111473) (open-paren 111468 . 111469) (symbol 111457 . 111467) (VOID 111452 . 111456) (EXTERN 111445 . 111451) (punctuation 111443 . 111444) (close-paren 111442 . 111443) (number 111441 . 111442) (open-paren 111440 . 111441) (symbol 111424 . 111440) (symbol 111412 . 111423) (EXTERN 111405 . 111411) (punctuation 111334 . 111335) (close-paren 111333 . 111334) (INT 111330 . 111333) (punctuation 111328 . 111329) (BOOL 111324 . 111328) (punctuation 111322 . 111323) (symbol 111311 . 111322) (open-paren 111310 . 111311) (symbol 111302 . 111309) (symbol 111290 . 111301) (EXTERN 111283 . 111289) (punctuation 111150 . 111151) (close-paren 111149 . 111150) (VOID 111145 . 111149) (open-paren 111144 . 111145) (symbol 111129 . 111143) (VOID 111124 . 111128) (EXTERN 111117 . 111123) (punctuation 111115 . 111116) (close-paren 111114 . 111115) (BOOL 111110 . 111114) (punctuation 111108 . 111109) (symbol 111099 . 111108) (punctuation 111097 . 111098) (symbol 111088 . 111097) (punctuation 111086 . 111087) (punctuation 111085 . 111086) (CHAR 111080 . 111084) (CONST 111074 . 111079) (punctuation 111064 . 111065) (symbol 111055 . 111064) (punctuation 111053 . 111054) (symbol 111044 . 111053) (punctuation 111042 . 111043) (symbol 111033 . 111042) (punctuation 111031 . 111032) (symbol 111022 . 111031) (open-paren 111021 . 111022) (symbol 111005 . 111020) (VOID 111000 . 111004) (EXTERN 110993 . 110999) (punctuation 110991 . 110992) (close-paren 110990 . 110991) (BOOL 110986 . 110990) (punctuation 110984 . 110985) (BOOL 110980 . 110984) (punctuation 110978 . 110979) (BOOL 110974 . 110978) (punctuation 110972 . 110973) (BOOL 110968 . 110972) (punctuation 110966 . 110967) (symbol 110955 . 110966) (punctuation 110953 . 110954) (symbol 110944 . 110953) (punctuation 110942 . 110943) (symbol 110933 . 110942) (open-paren 110932 . 110933) (symbol 110918 . 110931) (VOID 110913 . 110917) (EXTERN 110906 . 110912) (punctuation 110904 . 110905) (close-paren 110903 . 110904) (INT 110900 . 110903) (punctuation 110898 . 110899) (symbol 110889 . 110898) (punctuation 110887 . 110888) (symbol 110878 . 110887) (punctuation 110868 . 110869) (symbol 110859 . 110868) (punctuation 110857 . 110858) (symbol 110848 . 110857) (open-paren 110847 . 110848) (symbol 110824 . 110846) (VOID 110819 . 110823) (EXTERN 110812 . 110818) (punctuation 110810 . 110811) (close-paren 110809 . 110810) (symbol 110800 . 110809) (punctuation 110798 . 110799) (symbol 110789 . 110798) (punctuation 110776 . 110777) (symbol 110767 . 110776) (punctuation 110765 . 110766) (symbol 110756 . 110765) (open-paren 110755 . 110756) (symbol 110729 . 110754) (VOID 110724 . 110728) (EXTERN 110717 . 110723) (punctuation 110715 . 110716) (close-paren 110714 . 110715) (symbol 110705 . 110714) (punctuation 110703 . 110704) (symbol 110694 . 110703) (punctuation 110687 . 110688) (symbol 110678 . 110687) (punctuation 110676 . 110677) (symbol 110667 . 110676) (punctuation 110665 . 110666) (symbol 110656 . 110665) (open-paren 110655 . 110656) (symbol 110635 . 110654) (VOID 110630 . 110634) (EXTERN 110623 . 110629) (punctuation 110621 . 110622) (close-paren 110620 . 110621) (symbol 110611 . 110620) (punctuation 110609 . 110610) (symbol 110600 . 110609) (punctuation 110598 . 110599) (symbol 110589 . 110598) (open-paren 110588 . 110589) (symbol 110568 . 110587) (VOID 110563 . 110567) (EXTERN 110556 . 110562) (punctuation 110554 . 110555) (close-paren 110553 . 110554) (symbol 110544 . 110553) (punctuation 110542 . 110543) (symbol 110533 . 110542) (punctuation 110531 . 110532) (punctuation 110530 . 110531) (symbol 110523 . 110529) (STRUCT 110516 . 110522) (open-paren 110515 . 110516) (symbol 110490 . 110514) (VOID 110485 . 110489) (EXTERN 110478 . 110484) (punctuation 110476 . 110477) (close-paren 110475 . 110476) (punctuation 110474 . 110475) (symbol 110464 . 110473) (punctuation 110462 . 110463) (symbol 110453 . 110462) (punctuation 110451 . 110452) (symbol 110442 . 110451) (open-paren 110441 . 110442) (symbol 110414 . 110440) (VOID 110409 . 110413) (EXTERN 110402 . 110408) (punctuation 110400 . 110401) (close-paren 110399 . 110400) (punctuation 110398 . 110399) (symbol 110388 . 110397) (punctuation 110386 . 110387) (symbol 110377 . 110386) (punctuation 110375 . 110376) (symbol 110366 . 110375) (open-paren 110365 . 110366) (symbol 110340 . 110364) (VOID 110335 . 110339) (EXTERN 110328 . 110334) (punctuation 110326 . 110327) (close-paren 110325 . 110326) (symbol 110316 . 110325) (punctuation 110314 . 110315) (symbol 110305 . 110314) (open-paren 110304 . 110305) (symbol 110292 . 110303) (VOID 110287 . 110291) (EXTERN 110280 . 110286) (punctuation 110278 . 110279) (close-paren 110277 . 110278) (BOOL 110273 . 110277) (punctuation 110271 . 110272) (symbol 110262 . 110271) (punctuation 110260 . 110261) (symbol 110251 . 110260) (punctuation 110245 . 110246) (symbol 110236 . 110245) (punctuation 110234 . 110235) (symbol 110225 . 110234) (open-paren 110224 . 110225) (symbol 110212 . 110223) (symbol 110200 . 110211) (EXTERN 110193 . 110199) (punctuation 110191 . 110192) (close-paren 110190 . 110191) (BOOL 110186 . 110190) (punctuation 110184 . 110185) (symbol 110175 . 110184) (punctuation 110173 . 110174) (symbol 110164 . 110173) (punctuation 110162 . 110163) (symbol 110153 . 110162) (punctuation 110151 . 110152) (symbol 110142 . 110151) (open-paren 110141 . 110142) (symbol 110126 . 110140) (VOID 110121 . 110125) (EXTERN 110114 . 110120) (punctuation 110112 . 110113) (close-paren 110111 . 110112) (symbol 110102 . 110111) (punctuation 110100 . 110101) (symbol 110091 . 110100) (open-paren 110090 . 110091) (symbol 110075 . 110089) (VOID 110070 . 110074) (EXTERN 110063 . 110069) (punctuation 110061 . 110062) (close-paren 110060 . 110061) (BOOL 110056 . 110060) (punctuation 110054 . 110055) (BOOL 110050 . 110054) (punctuation 110048 . 110049) (symbol 110039 . 110048) (punctuation 110037 . 110038) (symbol 110028 . 110037) (open-paren 110027 . 110028) (symbol 110015 . 110026) (symbol 110003 . 110014) (EXTERN 109996 . 110002) (punctuation 109994 . 109995) (close-paren 109993 . 109994) (symbol 109984 . 109993) (punctuation 109982 . 109983) (symbol 109973 . 109982) (open-paren 109972 . 109973) (symbol 109962 . 109971) (VOID 109957 . 109961) (EXTERN 109950 . 109956) (punctuation 109948 . 109949) (close-paren 109947 . 109948) (BOOL 109943 . 109947) (punctuation 109941 . 109942) (symbol 109932 . 109941) (punctuation 109918 . 109919) (symbol 109909 . 109918) (punctuation 109907 . 109908) (symbol 109898 . 109907) (punctuation 109884 . 109885) (symbol 109875 . 109884) (punctuation 109873 . 109874) (symbol 109862 . 109873) (open-paren 109861 . 109862) (symbol 109827 . 109860) (VOID 109822 . 109826) (EXTERN 109815 . 109821) (punctuation 109813 . 109814) (close-paren 109812 . 109813) (symbol 109803 . 109812) (punctuation 109801 . 109802) (punctuation 109800 . 109801) (CHAR 109795 . 109799) (CONST 109789 . 109794) (open-paren 109788 . 109789) (symbol 109754 . 109787) (VOID 109749 . 109753) (EXTERN 109742 . 109748) (punctuation 109740 . 109741) (close-paren 109739 . 109740) (symbol 109730 . 109739) (punctuation 109728 . 109729) (punctuation 109727 . 109728) (CHAR 109722 . 109726) (CONST 109716 . 109721) (open-paren 109715 . 109716) (symbol 109693 . 109714) (VOID 109688 . 109692) (EXTERN 109681 . 109687) (punctuation 109679 . 109680) (close-paren 109678 . 109679) (punctuation 109677 . 109678) (CHAR 109672 . 109676) (CONST 109666 . 109671) (open-paren 109665 . 109666) (symbol 109651 . 109664) (VOID 109646 . 109650) (EXTERN 109639 . 109645) (punctuation 109637 . 109638) (close-paren 109636 . 109637) (INT 109633 . 109636) (open-paren 109632 . 109633) (symbol 109620 . 109631) (VOID 109615 . 109619) (EXTERN 109608 . 109614) (punctuation 109606 . 109607) (close-paren 109605 . 109606) (BOOL 109601 . 109605) (punctuation 109599 . 109600) (symbol 109590 . 109599) (punctuation 109588 . 109589) (symbol 109579 . 109588) (punctuation 109577 . 109578) (punctuation 109576 . 109577) (symbol 109569 . 109575) (STRUCT 109562 . 109568) (open-paren 109561 . 109562) (symbol 109542 . 109560) (VOID 109537 . 109541) (EXTERN 109530 . 109536) (punctuation 109528 . 109529) (close-paren 109527 . 109528) (BOOL 109523 . 109527) (punctuation 109521 . 109522) (symbol 109512 . 109521) (punctuation 109510 . 109511) (symbol 109501 . 109510) (punctuation 109495 . 109496) (symbol 109486 . 109495) (punctuation 109484 . 109485) (symbol 109475 . 109484) (punctuation 109473 . 109474) (symbol 109462 . 109473) (open-paren 109461 . 109462) (symbol 109442 . 109460) (VOID 109437 . 109441) (EXTERN 109430 . 109436) (punctuation 109428 . 109429) (close-paren 109427 . 109428) (symbol 109411 . 109427) (BOOL 109406 . 109410) (punctuation 109404 . 109405) (symbol 109395 . 109404) (punctuation 109393 . 109394) (symbol 109384 . 109393) (open-paren 109383 . 109384) (symbol 109367 . 109382) (VOID 109362 . 109366) (EXTERN 109355 . 109361) (punctuation 109353 . 109354) (close-paren 109352 . 109353) (BOOL 109348 . 109352) (punctuation 109346 . 109347) (BOOL 109342 . 109346) (punctuation 109340 . 109341) (BOOL 109336 . 109340) (punctuation 109328 . 109329) (symbol 109319 . 109328) (punctuation 109317 . 109318) (symbol 109308 . 109317) (punctuation 109306 . 109307) (punctuation 109305 . 109306) (CHAR 109300 . 109304) (CONST 109294 . 109299) (open-paren 109293 . 109294) (symbol 109279 . 109292) (VOID 109274 . 109278) (EXTERN 109267 . 109273) (punctuation 109265 . 109266) (close-paren 109264 . 109265) (symbol 109255 . 109264) (punctuation 109253 . 109254) (punctuation 109252 . 109253) (CHAR 109247 . 109251) (CONST 109241 . 109246) (open-paren 109240 . 109241) (symbol 109221 . 109239) (VOID 109216 . 109220) (EXTERN 109209 . 109215) (punctuation 109207 . 109208) (close-paren 109206 . 109207) (symbol 109197 . 109206) (punctuation 109195 . 109196) (punctuation 109194 . 109195) (CHAR 109189 . 109193) (CONST 109183 . 109188) (open-paren 109182 . 109183) (symbol 109175 . 109181) (VOID 109170 . 109174) (EXTERN 109163 . 109169) (punctuation 109161 . 109162) (close-paren 109160 . 109161) (symbol 109151 . 109160) (punctuation 109149 . 109150) (symbol 109140 . 109149) (punctuation 109138 . 109139) (symbol 109129 . 109138) (punctuation 109121 . 109122) (punctuation 109120 . 109121) (CHAR 109115 . 109119) (UNSIGNED 109106 . 109114) (CONST 109100 . 109105) (open-paren 109099 . 109100) (symbol 109077 . 109098) (INT 109073 . 109076) (EXTERN 109066 . 109072) (punctuation 109064 . 109065) (close-paren 109063 . 109064) (symbol 109054 . 109063) (punctuation 109052 . 109053) (symbol 109043 . 109052) (punctuation 109041 . 109042) (symbol 109032 . 109041) (punctuation 109023 . 109024) (punctuation 109022 . 109023) (CHAR 109017 . 109021) (UNSIGNED 109008 . 109016) (CONST 109002 . 109007) (open-paren 109001 . 109002) (symbol 108978 . 109000) (INT 108974 . 108977) (EXTERN 108967 . 108973) (punctuation 108965 . 108966) (close-paren 108964 . 108965) (BOOL 108960 . 108964) (punctuation 108958 . 108959) (BOOL 108954 . 108958) (punctuation 108952 . 108953) (symbol 108943 . 108952) (punctuation 108934 . 108935) (punctuation 108933 . 108934) (CHAR 108928 . 108932) (UNSIGNED 108919 . 108927) (punctuation 108917 . 108918) (punctuation 108916 . 108917) (CHAR 108911 . 108915) (UNSIGNED 108902 . 108910) (CONST 108896 . 108901) (open-paren 108895 . 108896) (symbol 108885 . 108894) (symbol 108875 . 108884) (EXTERN 108868 . 108874) (punctuation 108866 . 108867) (close-paren 108865 . 108866) (symbol 108856 . 108865) (punctuation 108854 . 108855) (punctuation 108853 . 108854) (symbol 108846 . 108852) (STRUCT 108839 . 108845) (open-paren 108838 . 108839) (symbol 108827 . 108837) (VOID 108822 . 108826) (EXTERN 108815 . 108821) (punctuation 108813 . 108814) (close-paren 108812 . 108813) (symbol 108803 . 108812) (open-paren 108802 . 108803) (symbol 108793 . 108801) (VOID 108788 . 108792) (EXTERN 108781 . 108787) (punctuation 108779 . 108780) (close-paren 108778 . 108779) (VOID 108774 . 108778) (open-paren 108773 . 108774) (symbol 108757 . 108772) (VOID 108752 . 108756) (EXTERN 108735 . 108741) (punctuation 108733 . 108734) (close-paren 108732 . 108733) (symbol 108723 . 108732) (punctuation 108721 . 108722) (symbol 108712 . 108721) (open-paren 108711 . 108712) (symbol 108697 . 108710) (VOID 108692 . 108696) (EXTERN 108685 . 108691) (punctuation 108540 . 108541) (close-paren 108539 . 108540) (VOID 108535 . 108539) (open-paren 108534 . 108535) (symbol 108520 . 108533) (VOID 108515 . 108519) (EXTERN 108508 . 108514) (punctuation 108506 . 108507) (close-paren 108505 . 108506) (VOID 108501 . 108505) (open-paren 108500 . 108501) (symbol 108482 . 108499) (VOID 108477 . 108481) (EXTERN 108470 . 108476) (punctuation 108468 . 108469) (close-paren 108467 . 108468) (symbol 108458 . 108467) (punctuation 108456 . 108457) (punctuation 108455 . 108456) (symbol 108449 . 108454) (STRUCT 108442 . 108448) (open-paren 108441 . 108442) (symbol 108427 . 108440) (INT 108423 . 108426) (EXTERN 108416 . 108422) (punctuation 108254 . 108255) (close-paren 108253 . 108254) (VOID 108249 . 108253) (open-paren 108248 . 108249) (symbol 108236 . 108247) (VOID 108231 . 108235) (EXTERN 108224 . 108230) (punctuation 108222 . 108223) (close-paren 108221 . 108222) (VOID 108217 . 108221) (open-paren 108216 . 108217) (symbol 108201 . 108215) (VOID 108196 . 108200) (EXTERN 108189 . 108195) (punctuation 108158 . 108159) (close-paren 108157 . 108158) (VOID 108153 . 108157) (open-paren 108152 . 108153) (symbol 108135 . 108151) (VOID 108130 . 108134) (EXTERN 108123 . 108129) (punctuation 108121 . 108122) (close-paren 108120 . 108121) (symbol 108119 . 108120) (symbol 108107 . 108118) (punctuation 108105 . 108106) (symbol 108104 . 108105) (symbol 108092 . 108103) (open-paren 108091 . 108092) (symbol 108080 . 108090) (symbol 108068 . 108079) (EXTERN 108061 . 108067) (punctuation 108052 . 108053) (close-paren 108051 . 108052) (DOUBLE 108045 . 108051) (open-paren 108044 . 108045) (symbol 108038 . 108043) (DOUBLE 108031 . 108037) (EXTERN 108024 . 108030) (punctuation 107972 . 107973) (close-paren 107971 . 107972) (VOID 107967 . 107971) (open-paren 107966 . 107967) (symbol 107954 . 107965) (VOID 107949 . 107953) (EXTERN 107942 . 107948) (punctuation 107940 . 107941) (close-paren 107939 . 107940) (symbol 107928 . 107939) (open-paren 107927 . 107928) (symbol 107907 . 107926) (symbol 107895 . 107906) (EXTERN 107888 . 107894) (punctuation 107886 . 107887) (close-paren 107885 . 107886) (symbol 107874 . 107885) (open-paren 107873 . 107874) (symbol 107853 . 107872) (symbol 107841 . 107852) (EXTERN 107834 . 107840) (punctuation 107832 . 107833) (close-paren 107831 . 107832) (symbol 107822 . 107831) (punctuation 107820 . 107821) (symbol 107809 . 107820) (open-paren 107808 . 107809) (symbol 107788 . 107807) (symbol 107778 . 107787) (EXTERN 107771 . 107777) (punctuation 107769 . 107770) (close-paren 107768 . 107769) (symbol 107759 . 107768) (punctuation 107757 . 107758) (symbol 107746 . 107757) (open-paren 107745 . 107746) (symbol 107725 . 107744) (symbol 107715 . 107724) (EXTERN 107708 . 107714) (punctuation 107706 . 107707) (close-paren 107705 . 107706) (VOID 107701 . 107705) (open-paren 107700 . 107701) (symbol 107671 . 107699) (VOID 107666 . 107670) (EXTERN 107659 . 107665) (punctuation 107657 . 107658) (close-paren 107656 . 107657) (symbol 107645 . 107656) (punctuation 107643 . 107644) (symbol 107632 . 107643) (open-paren 107631 . 107632) (symbol 107617 . 107630) (symbol 107605 . 107616) (EXTERN 107598 . 107604) (punctuation 107596 . 107597) (close-paren 107595 . 107596) (symbol 107584 . 107595) (punctuation 107582 . 107583) (symbol 107571 . 107582) (open-paren 107570 . 107571) (symbol 107557 . 107569) (symbol 107545 . 107556) (EXTERN 107538 . 107544) (punctuation 107536 . 107537) (close-paren 107535 . 107536) (symbol 107524 . 107535) (punctuation 107522 . 107523) (symbol 107511 . 107522) (open-paren 107510 . 107511) (symbol 107503 . 107509) (symbol 107491 . 107502) (EXTERN 107484 . 107490) (punctuation 107482 . 107483) (close-paren 107481 . 107482) (symbol 107470 . 107481) (punctuation 107468 . 107469) (symbol 107457 . 107468) (open-paren 107456 . 107457) (symbol 107442 . 107455) (BOOL 107437 . 107441) (EXTERN 107430 . 107436) (punctuation 107428 . 107429) (close-paren 107427 . 107428) (symbol 107416 . 107427) (punctuation 107414 . 107415) (symbol 107403 . 107414) (punctuation 107401 . 107402) (symbol 107390 . 107401) (open-paren 107389 . 107390) (symbol 107381 . 107388) (symbol 107369 . 107380) (EXTERN 107362 . 107368) (punctuation 107360 . 107361) (close-paren 107359 . 107360) (symbol 107348 . 107359) (punctuation 107346 . 107347) (symbol 107335 . 107346) (open-paren 107334 . 107335) (symbol 107326 . 107333) (symbol 107314 . 107325) (EXTERN 107307 . 107313) (punctuation 107305 . 107306) (close-paren 107304 . 107305) (symbol 107293 . 107304) (open-paren 107292 . 107293) (symbol 107277 . 107291) (symbol 107265 . 107276) (EXTERN 107258 . 107264) (punctuation 107256 . 107257) (close-paren 107255 . 107256) (symbol 107244 . 107255) (punctuation 107242 . 107243) (symbol 107231 . 107242) (punctuation 107229 . 107230) (symbol 107218 . 107229) (open-paren 107217 . 107218) (symbol 107211 . 107216) (symbol 107199 . 107210) (EXTERN 107192 . 107198) (punctuation 107190 . 107191) (close-paren 107189 . 107190) (symbol 107180 . 107189) (punctuation 107178 . 107179) (symbol 107169 . 107178) (punctuation 107160 . 107161) (symbol 107151 . 107160) (punctuation 107149 . 107150) (symbol 107140 . 107149) (punctuation 107138 . 107139) (symbol 107127 . 107138) (open-paren 107126 . 107127) (symbol 107111 . 107125) (symbol 107099 . 107110) (EXTERN 107092 . 107098) (punctuation 107090 . 107091) (close-paren 107089 . 107090) (punctuation 107088 . 107089) (symbol 107078 . 107087) (punctuation 107076 . 107077) (punctuation 107075 . 107076) (symbol 107065 . 107074) (punctuation 107063 . 107064) (symbol 107054 . 107063) (punctuation 107042 . 107043) (symbol 107031 . 107042) (punctuation 107029 . 107030) (symbol 107018 . 107029) (punctuation 107016 . 107017) (symbol 107005 . 107016) (open-paren 107004 . 107005) (symbol 106986 . 107003) (VOID 106981 . 106985) (EXTERN 106974 . 106980) (punctuation 106893 . 106894) (close-paren 106892 . 106893) (symbol 106881 . 106892) (punctuation 106879 . 106880) (punctuation 106878 . 106879) (symbol 106862 . 106877) (STRUCT 106855 . 106861) (open-paren 106854 . 106855) (symbol 106831 . 106853) (VOID 106826 . 106830) (punctuation 106824 . 106825) (close-paren 106823 . 106824) (symbol 106813 . 106823) (punctuation 106805 . 106806) (symbol 106794 . 106805) (punctuation 106792 . 106793) (symbol 106781 . 106792) (punctuation 106779 . 106780) (punctuation 106778 . 106779) (symbol 106762 . 106777) (STRUCT 106755 . 106761) (open-paren 106754 . 106755) (symbol 106745 . 106753) (symbol 106735 . 106744) (punctuation 106733 . 106734) (close-paren 106732 . 106733) (punctuation 106731 . 106732) (symbol 106720 . 106730) (punctuation 106718 . 106719) (symbol 106707 . 106718) (punctuation 106705 . 106706) (punctuation 106704 . 106705) (symbol 106688 . 106703) (STRUCT 106681 . 106687) (open-paren 106680 . 106681) (symbol 106668 . 106679) (symbol 106658 . 106667) (punctuation 106656 . 106657) (close-paren 106655 . 106656) (BOOL 106651 . 106655) (punctuation 106649 . 106650) (symbol 106638 . 106649) (punctuation 106628 . 106629) (FLOAT 106623 . 106628) (punctuation 106621 . 106622) (FLOAT 106616 . 106621) (punctuation 106614 . 106615) (symbol 106605 . 106614) (punctuation 106603 . 106604) (symbol 106588 . 106603) (STRUCT 106581 . 106587) (open-paren 106580 . 106581) (symbol 106564 . 106579) (symbol 106552 . 106563) (punctuation 106550 . 106551) (close-paren 106549 . 106550) (INT 106546 . 106549) (punctuation 106544 . 106545) (symbol 106533 . 106544) (open-paren 106532 . 106533) (symbol 106525 . 106531) (symbol 106514 . 106524) (punctuation 106512 . 106513) (close-paren 106511 . 106512) (symbol 106502 . 106511) (punctuation 106500 . 106501) (punctuation 106499 . 106500) (CONST 106493 . 106498) (CHAR 106488 . 106492) (open-paren 106487 . 106488) (symbol 106475 . 106486) (symbol 106464 . 106474) (punctuation 106462 . 106463) (close-paren 106461 . 106462) (punctuation 106460 . 106461) (symbol 106450 . 106459) (punctuation 106448 . 106449) (punctuation 106447 . 106448) (symbol 106437 . 106446) (punctuation 106435 . 106436) (symbol 106424 . 106435) (open-paren 106423 . 106424) (symbol 106398 . 106422) (punctuation 106397 . 106398) (CHAR 106392 . 106396) (EXTERN 106385 . 106391) (punctuation 106383 . 106384) (close-paren 106382 . 106383) (VOID 106378 . 106382) (open-paren 106377 . 106378) (symbol 106354 . 106376) (VOID 106349 . 106353) (EXTERN 106342 . 106348) (punctuation 106340 . 106341) (close-paren 106339 . 106340) (symbol 106330 . 106339) (punctuation 106328 . 106329) (symbol 106319 . 106328) (punctuation 106317 . 106318) (symbol 106306 . 106317) (open-paren 106305 . 106306) (symbol 106291 . 106304) (symbol 106279 . 106290) (EXTERN 106272 . 106278) (close-paren 106253 . 106254) (symbol 106244 . 106253) (open-paren 106243 . 106244) (symbol 106225 . 106242) (symbol 106215 . 106224) (EXTERN 106208 . 106214) (punctuation 106206 . 106207) (close-paren 106205 . 106206) (number 106202 . 106204) (punctuation 106200 . 106201) (symbol 106176 . 106199) (open-paren 106174 . 106175) (ENUM 106169 . 106173) (punctuation 106141 . 106142) (close-paren 106140 . 106141) (VOID 106136 . 106140) (open-paren 106135 . 106136) (symbol 106120 . 106134) (VOID 106115 . 106119) (EXTERN 106108 . 106114) (punctuation 106106 . 106107) (close-paren 106105 . 106106) (VOID 106101 . 106105) (open-paren 106100 . 106101) (symbol 106083 . 106099) (VOID 106078 . 106082) (EXTERN 106071 . 106077) (punctuation 105985 . 105986) (close-paren 105984 . 105985) (VOID 105980 . 105984) (open-paren 105979 . 105980) (symbol 105963 . 105978) (VOID 105958 . 105962) (EXTERN 105951 . 105957) (punctuation 105949 . 105950) (close-paren 105948 . 105949) (VOID 105944 . 105948) (open-paren 105943 . 105944) (symbol 105925 . 105942) (VOID 105920 . 105924) (EXTERN 105913 . 105919) (punctuation 105911 . 105912) (close-paren 105910 . 105911) (VOID 105906 . 105910) (open-paren 105905 . 105906) (symbol 105892 . 105904) (VOID 105887 . 105891) (EXTERN 105880 . 105886) (punctuation 105848 . 105849) (close-paren 105847 . 105848) (VOID 105843 . 105847) (open-paren 105842 . 105843) (symbol 105824 . 105841) (VOID 105819 . 105823) (EXTERN 105812 . 105818) (punctuation 105810 . 105811) (close-paren 105809 . 105810) (symbol 105800 . 105809) (punctuation 105798 . 105799) (punctuation 105797 . 105798) (CHAR 105792 . 105796) (UNSIGNED 105783 . 105791) (CONST 105777 . 105782) (open-paren 105776 . 105777) (symbol 105752 . 105775) (symbol 105742 . 105751) (EXTERN 105735 . 105741) (punctuation 105733 . 105734) (close-paren 105732 . 105733) (symbol 105723 . 105732) (punctuation 105721 . 105722) (punctuation 105720 . 105721) (CHAR 105715 . 105719) (UNSIGNED 105706 . 105714) (CONST 105700 . 105705) (open-paren 105699 . 105700) (symbol 105685 . 105698) (symbol 105675 . 105684) (EXTERN 105668 . 105674) (punctuation 105634 . 105635) (close-paren 105633 . 105634) (VOID 105629 . 105633) (open-paren 105628 . 105629) (symbol 105613 . 105627) (VOID 105608 . 105612) (EXTERN 105601 . 105607) (punctuation 105599 . 105600) (close-paren 105598 . 105599) (VOID 105594 . 105598) (open-paren 105593 . 105594) (symbol 105576 . 105592) (VOID 105571 . 105575) (EXTERN 105564 . 105570) (punctuation 105562 . 105563) (close-paren 105561 . 105562) (VOID 105557 . 105561) (open-paren 105556 . 105557) (symbol 105544 . 105555) (VOID 105539 . 105543) (EXTERN 105532 . 105538) (punctuation 105530 . 105531) (close-paren 105529 . 105530) (symbol 105518 . 105529) (punctuation 105516 . 105517) (BOOL 105512 . 105516) (punctuation 105510 . 105511) (BOOL 105506 . 105510) (punctuation 105504 . 105505) (symbol 105495 . 105504) (punctuation 105452 . 105453) (symbol 105443 . 105452) (punctuation 105441 . 105442) (punctuation 105440 . 105441) (CHAR 105435 . 105439) (UNSIGNED 105426 . 105434) (CONST 105420 . 105425) (open-paren 105419 . 105420) (symbol 105398 . 105418) (symbol 105386 . 105397) (EXTERN 105379 . 105385) (punctuation 105348 . 105349) (close-paren 105347 . 105348) (VOID 105343 . 105347) (open-paren 105342 . 105343) (symbol 105329 . 105341) (VOID 105324 . 105328) (EXTERN 105317 . 105323) (punctuation 105315 . 105316) (close-paren 105314 . 105315) (VOID 105310 . 105314) (open-paren 105309 . 105310) (symbol 105296 . 105308) (VOID 105291 . 105295) (EXTERN 105284 . 105290) (punctuation 105257 . 105258) (close-paren 105256 . 105257) (punctuation 105255 . 105256) (symbol 105243 . 105254) (STRUCT 105236 . 105242) (open-paren 105235 . 105236) (symbol 105212 . 105234) (VOID 105207 . 105211) (EXTERN 105200 . 105206) (punctuation 105198 . 105199) (close-paren 105197 . 105198) (VOID 105193 . 105197) (open-paren 105192 . 105193) (symbol 105179 . 105191) (VOID 105174 . 105178) (EXTERN 105167 . 105173) (punctuation 105165 . 105166) (close-paren 105164 . 105165) (symbol 105153 . 105164) (punctuation 105151 . 105152) (symbol 105140 . 105151) (open-paren 105139 . 105140) (symbol 105126 . 105138) (symbol 105114 . 105125) (EXTERN 105107 . 105113) (punctuation 105105 . 105106) (close-paren 105104 . 105105) (symbol 105096 . 105104) (symbol 105078 . 105095) (ENUM 105073 . 105077) (punctuation 105037 . 105038) (symbol 105026 . 105037) (punctuation 105024 . 105025) (symbol 105013 . 105024) (open-paren 105012 . 105013) (symbol 104991 . 105011) (VOID 104986 . 104990) (EXTERN 104979 . 104985) (punctuation 104977 . 104978) (close-paren 104976 . 104977) (symbol 104959 . 104976) (ENUM 104954 . 104958) (punctuation 104926 . 104927) (symbol 104915 . 104926) (punctuation 104913 . 104914) (symbol 104902 . 104913) (punctuation 104900 . 104901) (symbol 104889 . 104900) (open-paren 104888 . 104889) (symbol 104875 . 104887) (VOID 104870 . 104874) (EXTERN 104863 . 104869) (punctuation 104861 . 104862) (close-paren 104860 . 104861) (symbol 104833 . 104859) (punctuation 104829 . 104830) (symbol 104810 . 104829) (punctuation 104806 . 104807) (symbol 104789 . 104806) (punctuation 104785 . 104786) (symbol 104769 . 104785) (open-paren 104765 . 104766) (symbol 104747 . 104764) (ENUM 104742 . 104746) (punctuation 104740 . 104741) (close-paren 104739 . 104740) (punctuation 104738 . 104739) (symbol 104729 . 104737) (UNION 104723 . 104728) (open-paren 104722 . 104723) (symbol 104701 . 104721) (symbol 104689 . 104700) (EXTERN 104682 . 104688) (punctuation 104680 . 104681) (close-paren 104679 . 104680) (symbol 104668 . 104679) (open-paren 104667 . 104668) (symbol 104653 . 104666) (VOID 104648 . 104652) (EXTERN 104631 . 104637) (punctuation 104629 . 104630) (close-paren 104628 . 104629) (symbol 104617 . 104628) (punctuation 104607 . 104608) (symbol 104596 . 104607) (punctuation 104594 . 104595) (symbol 104583 . 104594) (open-paren 104582 . 104583) (symbol 104562 . 104581) (VOID 104557 . 104561) (EXTERN 104540 . 104546) (punctuation 104538 . 104539) (close-paren 104537 . 104538) (symbol 104526 . 104537) (punctuation 104524 . 104525) (symbol 104513 . 104524) (open-paren 104512 . 104513) (symbol 104494 . 104511) (VOID 104489 . 104493) (EXTERN 104472 . 104478) (punctuation 104470 . 104471) (close-paren 104469 . 104470) (punctuation 104468 . 104469) (symbol 104456 . 104467) (STRUCT 104449 . 104455) (open-paren 104448 . 104449) (symbol 104430 . 104447) (punctuation 104429 . 104430) (symbol 104417 . 104428) (STRUCT 104410 . 104416) (EXTERN 104403 . 104409) (punctuation 104400 . 104401) (close-paren 104399 . 104400) (symbol 104390 . 104399) (punctuation 104388 . 104389) (symbol 104377 . 104388) (open-paren 104376 . 104377) (symbol 104359 . 104375) (symbol 104349 . 104358) (EXTERN 104342 . 104348) (punctuation 104340 . 104341) (close-paren 104339 . 104340) (symbol 104331 . 104339) (punctuation 104329 . 104330) (symbol 104321 . 104329) (punctuation 104319 . 104320) (symbol 104308 . 104319) (open-paren 104307 . 104308) (symbol 104292 . 104306) (symbol 104283 . 104291) (EXTERN 104276 . 104282) (punctuation 103853 . 103854) (close-paren 103852 . 103853) (symbol 103842 . 103852) (symbol 103825 . 103841) (ENUM 103820 . 103824) (punctuation 103785 . 103786) (symbol 103781 . 103785) (symbol 103769 . 103780) (punctuation 103767 . 103768) (symbol 103763 . 103767) (symbol 103751 . 103762) (open-paren 103750 . 103751) (symbol 103737 . 103749) (symbol 103725 . 103736) (EXTERN 103718 . 103724) (punctuation 103716 . 103717) (close-paren 103715 . 103716) (symbol 103695 . 103714) (punctuation 103691 . 103692) (symbol 103672 . 103691) (punctuation 103668 . 103669) (symbol 103658 . 103668) (punctuation 103654 . 103655) (symbol 103644 . 103654) (punctuation 103640 . 103641) (symbol 103626 . 103640) (punctuation 103622 . 103623) (symbol 103611 . 103622) (open-paren 103607 . 103608) (symbol 103590 . 103606) (ENUM 103585 . 103589) (punctuation 103583 . 103584) (close-paren 103582 . 103583) (symbol 103571 . 103582) (open-paren 103570 . 103571) (symbol 103552 . 103569) (symbol 103540 . 103551) (EXTERN 103533 . 103539) (punctuation 103531 . 103532) (close-paren 103530 . 103531) (symbol 103519 . 103530) (open-paren 103518 . 103519) (symbol 103500 . 103517) (symbol 103488 . 103499) (EXTERN 103481 . 103487) (punctuation 103479 . 103480) (close-paren 103478 . 103479) (symbol 103467 . 103478) (punctuation 103465 . 103466) (symbol 103454 . 103465) (punctuation 103442 . 103443) (symbol 103431 . 103442) (punctuation 103429 . 103430) (symbol 103418 . 103429) (open-paren 103417 . 103418) (symbol 103392 . 103416) (VOID 103387 . 103391) (EXTERN 103380 . 103386) (punctuation 103378 . 103379) (close-paren 103377 . 103378) (symbol 103366 . 103377) (punctuation 103364 . 103365) (symbol 103353 . 103364) (open-paren 103352 . 103353) (symbol 103339 . 103351) (VOID 103334 . 103338) (EXTERN 103317 . 103323) (close-paren 103288 . 103289) (semantic-list 103200 . 103287) (ELSE 103191 . 103195) (semantic-list 103122 . 103188) (semantic-list 103102 . 103117) (IF 103099 . 103101) (open-paren 103095 . 103096) (close-paren 103093 . 103094) (symbol 103092 . 103093) (punctuation 103091 . 103092) (symbol 103081 . 103090) (punctuation 103079 . 103080) (symbol 103076 . 103079) (symbol 103064 . 103075) (open-paren 103063 . 103064) (symbol 103044 . 103062) (BOOL 103039 . 103043) (symbol 103032 . 103038) (close-paren 103030 . 103031) (semantic-list 102944 . 103029) (ELSE 102935 . 102939) (semantic-list 102880 . 102932) (semantic-list 102860 . 102875) (IF 102857 . 102859) (open-paren 102853 . 102854) (close-paren 102851 . 102852) (symbol 102850 . 102851) (punctuation 102849 . 102850) (symbol 102840 . 102848) (punctuation 102838 . 102839) (symbol 102835 . 102838) (symbol 102823 . 102834) (open-paren 102822 . 102823) (symbol 102804 . 102821) (BOOL 102799 . 102803) (symbol 102792 . 102798) (punctuation 102683 . 102684) (close-paren 102682 . 102683) (DOUBLE 102676 . 102682) (open-paren 102675 . 102676) (symbol 102657 . 102674) (symbol 102645 . 102656) (EXTERN 102638 . 102644) (punctuation 102636 . 102637) (close-paren 102635 . 102636) (INT 102632 . 102635) (punctuation 102630 . 102631) (punctuation 102629 . 102630) (CONST 102623 . 102628) (CHAR 102618 . 102622) (open-paren 102617 . 102618) (symbol 102601 . 102616) (symbol 102589 . 102600) (EXTERN 102582 . 102588) (punctuation 102580 . 102581) (close-paren 102579 . 102580) (INT 102576 . 102579) (punctuation 102574 . 102575) (symbol 102563 . 102574) (open-paren 102562 . 102563) (symbol 102545 . 102561) (symbol 102533 . 102544) (EXTERN 102526 . 102532) (punctuation 102524 . 102525) (close-paren 102523 . 102524) (INT 102520 . 102523) (punctuation 102518 . 102519) (symbol 102507 . 102518) (punctuation 102505 . 102506) (symbol 102496 . 102505) (punctuation 102494 . 102495) (punctuation 102493 . 102494) (CHAR 102488 . 102492) (open-paren 102487 . 102488) (symbol 102468 . 102486) (symbol 102458 . 102467) (EXTERN 102451 . 102457) (punctuation 102449 . 102450) (close-paren 102448 . 102449) (INT 102445 . 102448) (punctuation 102443 . 102444) (symbol 102432 . 102443) (open-paren 102431 . 102432) (symbol 102416 . 102430) (symbol 102406 . 102415) (EXTERN 102399 . 102405) (punctuation 102397 . 102398) (close-paren 102396 . 102397) (symbol 102385 . 102396) (open-paren 102384 . 102385) (symbol 102366 . 102383) (symbol 102356 . 102365) (EXTERN 102349 . 102355) (punctuation 102347 . 102348) (close-paren 102346 . 102347) (symbol 102335 . 102346) (open-paren 102334 . 102335) (symbol 102317 . 102333) (symbol 102308 . 102316) (EXTERN 102301 . 102307) (close-paren 102159 . 102160) (punctuation 102137 . 102138) (punctuation 102136 . 102137) (semantic-list 102129 . 102136) (symbol 102113 . 102128) (open-paren 102109 . 102110) (close-paren 102107 . 102108) (symbol 102104 . 102107) (symbol 102092 . 102103) (punctuation 102090 . 102091) (symbol 102087 . 102090) (symbol 102077 . 102086) (punctuation 102075 . 102076) (symbol 102070 . 102075) (symbol 102058 . 102069) (open-paren 102057 . 102058) (symbol 102029 . 102056) (VOID 102024 . 102028) (symbol 102017 . 102023) (close-paren 102014 . 102015) (punctuation 101992 . 101993) (punctuation 101991 . 101992) (semantic-list 101984 . 101991) (symbol 101972 . 101983) (punctuation 101968 . 101969) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101923 . 101924)))) 101914 . 101968) (open-paren 101910 . 101911) (close-paren 101908 . 101909) (symbol 101905 . 101908) (symbol 101893 . 101904) (punctuation 101891 . 101892) (symbol 101888 . 101891) (symbol 101878 . 101887) (punctuation 101876 . 101877) (symbol 101871 . 101876) (symbol 101859 . 101870) (open-paren 101858 . 101859) (symbol 101834 . 101857) (VOID 101829 . 101833) (symbol 101822 . 101828) (close-paren 101819 . 101820) (punctuation 101799 . 101800) (punctuation 101798 . 101799) (semantic-list 101791 . 101798) (symbol 101779 . 101790) (punctuation 101775 . 101776) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101712 . 101713)))) 101703 . 101775) (open-paren 101699 . 101700) (close-paren 101697 . 101698) (symbol 101694 . 101697) (symbol 101682 . 101693) (punctuation 101680 . 101681) (symbol 101677 . 101680) (symbol 101667 . 101676) (punctuation 101665 . 101666) (symbol 101660 . 101665) (symbol 101648 . 101659) (open-paren 101647 . 101648) (symbol 101625 . 101646) (VOID 101620 . 101624) (symbol 101613 . 101619) (close-paren 101556 . 101557) (punctuation 101540 . 101541) (punctuation 101539 . 101540) (semantic-list 101532 . 101539) (symbol 101520 . 101531) (open-paren 101516 . 101517) (close-paren 101514 . 101515) (symbol 101511 . 101514) (symbol 101499 . 101510) (punctuation 101497 . 101498) (symbol 101492 . 101497) (symbol 101480 . 101491) (open-paren 101479 . 101480) (symbol 101456 . 101478) (VOID 101451 . 101455) (symbol 101444 . 101450) (close-paren 101442 . 101443) (punctuation 101427 . 101428) (punctuation 101426 . 101427) (semantic-list 101419 . 101426) (symbol 101407 . 101418) (open-paren 101403 . 101404) (close-paren 101401 . 101402) (symbol 101398 . 101401) (symbol 101386 . 101397) (punctuation 101384 . 101385) (symbol 101379 . 101384) (symbol 101367 . 101378) (open-paren 101366 . 101367) (symbol 101344 . 101365) (VOID 101339 . 101343) (symbol 101332 . 101338) (close-paren 101223 . 101224) (punctuation 101207 . 101208) (symbol 101206 . 101207) (punctuation 101205 . 101206) (symbol 101204 . 101205) (punctuation 101203 . 101204) (punctuation 101202 . 101203) (semantic-list 101199 . 101202) (symbol 101191 . 101198) (open-paren 101187 . 101188) (close-paren 101185 . 101186) (symbol 101184 . 101185) (symbol 101175 . 101183) (punctuation 101173 . 101174) (symbol 101172 . 101173) (symbol 101160 . 101171) (open-paren 101159 . 101160) (symbol 101138 . 101158) (VOID 101133 . 101137) (symbol 101126 . 101132) (close-paren 101084 . 101085) (punctuation 101072 . 101073) (symbol 101071 . 101072) (punctuation 101070 . 101071) (symbol 101069 . 101070) (punctuation 101068 . 101069) (punctuation 101067 . 101068) (semantic-list 101064 . 101067) (symbol 101056 . 101063) (RETURN 101049 . 101055) (open-paren 101045 . 101046) (close-paren 101043 . 101044) (symbol 101042 . 101043) (symbol 101030 . 101041) (open-paren 101029 . 101030) (symbol 101012 . 101028) (symbol 101003 . 101011) (symbol 100996 . 101002) (close-paren 100959 . 100960) (punctuation 100943 . 100944) (punctuation 100942 . 100943) (semantic-list 100933 . 100942) (symbol 100924 . 100932) (open-paren 100920 . 100921) (close-paren 100918 . 100919) (symbol 100913 . 100918) (symbol 100901 . 100912) (punctuation 100899 . 100900) (symbol 100892 . 100899) (symbol 100880 . 100891) (open-paren 100879 . 100880) (symbol 100861 . 100878) (VOID 100856 . 100860) (symbol 100849 . 100855) (close-paren 100809 . 100810) (punctuation 100801 . 100802) (punctuation 100800 . 100801) (symbol 100797 . 100800) (RETURN 100790 . 100796) (punctuation 100786 . 100787) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 100739 . 100742)))) 100730 . 100786) (open-paren 100726 . 100727) (close-paren 100724 . 100725) (symbol 100721 . 100724) (punctuation 100720 . 100721) (symbol 100696 . 100719) (STRUCT 100689 . 100695) (open-paren 100688 . 100689) (symbol 100678 . 100687) (INT 100674 . 100677) (symbol 100667 . 100673) (close-paren 100616 . 100617) (punctuation 100583 . 100584) (symbol 100582 . 100583) (punctuation 100581 . 100582) (symbol 100580 . 100581) (punctuation 100579 . 100580) (punctuation 100578 . 100579) (semantic-list 100573 . 100578) (symbol 100565 . 100572) (open-paren 100561 . 100562) (close-paren 100559 . 100560) (symbol 100556 . 100559) (symbol 100544 . 100555) (open-paren 100543 . 100544) (symbol 100522 . 100542) (VOID 100517 . 100521) (symbol 100510 . 100516) (close-paren 100507 . 100508) (punctuation 100493 . 100494) (symbol 100492 . 100493) (punctuation 100491 . 100492) (symbol 100490 . 100491) (punctuation 100489 . 100490) (punctuation 100488 . 100489) (semantic-list 100483 . 100488) (symbol 100475 . 100482) (open-paren 100471 . 100472) (close-paren 100469 . 100470) (symbol 100465 . 100469) (punctuation 100464 . 100465) (symbol 100452 . 100463) (STRUCT 100445 . 100451) (punctuation 100443 . 100444) (symbol 100440 . 100443) (symbol 100428 . 100439) (open-paren 100427 . 100428) (symbol 100411 . 100426) (VOID 100406 . 100410) (symbol 100399 . 100405) (close-paren 100396 . 100397) (punctuation 100380 . 100381) (symbol 100379 . 100380) (punctuation 100378 . 100379) (symbol 100377 . 100378) (punctuation 100376 . 100377) (punctuation 100375 . 100376) (semantic-list 100370 . 100375) (symbol 100362 . 100369) (open-paren 100358 . 100359) (close-paren 100356 . 100357) (symbol 100351 . 100356) (symbol 100339 . 100350) (punctuation 100337 . 100338) (symbol 100334 . 100337) (symbol 100322 . 100333) (open-paren 100321 . 100322) (symbol 100304 . 100320) (VOID 100299 . 100303) (symbol 100292 . 100298) (close-paren 100289 . 100290) (punctuation 100267 . 100268) (symbol 100266 . 100267) (punctuation 100265 . 100266) (symbol 100264 . 100265) (punctuation 100263 . 100264) (punctuation 100262 . 100263) (semantic-list 100257 . 100262) (symbol 100249 . 100256) (open-paren 100245 . 100246) (close-paren 100243 . 100244) (symbol 100235 . 100243) (symbol 100223 . 100234) (punctuation 100221 . 100222) (symbol 100218 . 100221) (symbol 100206 . 100217) (open-paren 100205 . 100206) (symbol 100185 . 100204) (VOID 100180 . 100184) (symbol 100173 . 100179) (close-paren 100080 . 100081) (number 100071 . 100072) (punctuation 100069 . 100070) (punctuation 100063 . 100064) (number 100061 . 100062) (punctuation 100045 . 100046) (punctuation 100044 . 100045) (open-paren 100030 . 100031) (close-paren 100028 . 100029) (symbol 100025 . 100028) (symbol 100013 . 100024) (punctuation 100011 . 100012) (symbol 100008 . 100011) (symbol 99998 . 100007) (punctuation 99996 . 99997) (symbol 99995 . 99996) (punctuation 99994 . 99995) (symbol 99978 . 99993) (STRUCT 99971 . 99977) (open-paren 99970 . 99971) (symbol 99950 . 99969) (VOID 99945 . 99949) (symbol 99938 . 99944) (close-paren 99935 . 99936) (punctuation 99922 . 99923) (number 99920 . 99921) (punctuation 99904 . 99905) (punctuation 99903 . 99904) (open-paren 99889 . 99890) (close-paren 99887 . 99888) (symbol 99884 . 99887) (symbol 99872 . 99883) (punctuation 99870 . 99871) (symbol 99867 . 99870) (symbol 99857 . 99866) (punctuation 99855 . 99856) (symbol 99854 . 99855) (punctuation 99853 . 99854) (symbol 99837 . 99852) (STRUCT 99830 . 99836) (open-paren 99829 . 99830) (symbol 99811 . 99828) (VOID 99806 . 99810) (symbol 99799 . 99805) (close-paren 99755 . 99756) (punctuation 99747 . 99748) (SIZEOF 99740 . 99746) (punctuation 99716 . 99717) (punctuation 99706 . 99707) (punctuation 99705 . 99706) (semantic-list 99702 . 99705) (punctuation 99682 . 99683) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 99625 . 99626)))) 99616 . 99682) (open-paren 99612 . 99613) (close-paren 99610 . 99611) (symbol 99605 . 99610) (symbol 99595 . 99604) (punctuation 99593 . 99594) (symbol 99589 . 99593) (punctuation 99588 . 99589) (symbol 99576 . 99587) (punctuation 99574 . 99575) (symbol 99568 . 99574) (symbol 99558 . 99567) (punctuation 99556 . 99557) (symbol 99555 . 99556) (symbol 99543 . 99554) (open-paren 99542 . 99543) (symbol 99536 . 99541) (VOID 99531 . 99535) (symbol 99524 . 99530) (punctuation 99365 . 99366) (close-paren 99364 . 99365) (punctuation 99363 . 99364) (symbol 99351 . 99362) (open-paren 99350 . 99351) (symbol 99340 . 99349) (VOID 99335 . 99339) (close-paren 99184 . 99185) (semantic-list 99155 . 99164) (IF 99152 . 99154) (open-paren 99148 . 99149) (close-paren 99146 . 99147) (symbol 99141 . 99146) (INT 99137 . 99140) (SHORT 99131 . 99136) (UNSIGNED 99122 . 99130) (open-paren 99121 . 99122) (symbol 99109 . 99120) (VOID 99104 . 99108) (symbol 99097 . 99103) (punctuation 98832 . 98833) (close-paren 98831 . 98832) (VOID 98827 . 98831) (open-paren 98826 . 98827) (symbol 98815 . 98825) (VOID 98810 . 98814) (EXTERN 98803 . 98809) (punctuation 98760 . 98761) (close-paren 98759 . 98760) (open-paren 97984 . 97985) (symbol 97976 . 97983) (STRUCT 97969 . 97975) (punctuation 97966 . 97967) (close-paren 97965 . 97966) (symbol 97953 . 97964) (punctuation 97951 . 97952) (symbol 97937 . 97951) (punctuation 97935 . 97936) (symbol 97928 . 97935) (open-paren 97926 . 97927) (symbol 97914 . 97925) (ENUM 97909 . 97913) (close-paren 96781 . 96782) (punctuation 96770 . 96771) (symbol 96758 . 96769) (RETURN 96751 . 96757) (open-paren 96747 . 96748) (close-paren 96745 . 96746) (VOID 96741 . 96745) (open-paren 96740 . 96741) (symbol 96726 . 96739) (symbol 96716 . 96725) (symbol 96709 . 96715) (punctuation 96532 . 96533) (close-paren 96531 . 96532) (punctuation 96398 . 96399) (symbol 96393 . 96397) (symbol "specbind_tag" 96370 . 96392) (ENUM "enum" 96370 . 96392) (punctuation 96398 . 96399) (symbol 96393 . 96397) (symbol "specbind_tag" 96370 . 96392) (ENUM "enum" 96370 . 96392) (punctuation 96078 . 96079) (symbol 96073 . 96077) (symbol "specbind_tag" 96050 . 96072) (ENUM "enum" 96050 . 96072) (punctuation 96078 . 96079) (symbol 96073 . 96077) (symbol "specbind_tag" 96050 . 96072) (ENUM "enum" 96050 . 96072) (punctuation 95973 . 95974) (symbol 95968 . 95972) (symbol "specbind_tag" 95945 . 95967) (ENUM "enum" 95945 . 95967) (punctuation 95973 . 95974) (symbol 95968 . 95972) (symbol "specbind_tag" 95945 . 95967) (ENUM "enum" 95945 . 95967) (punctuation 95856 . 95857) (symbol 95851 . 95855) (symbol "specbind_tag" 95828 . 95850) (ENUM "enum" 95828 . 95850) (punctuation 95856 . 95857) (symbol 95851 . 95855) (symbol "specbind_tag" 95828 . 95850) (ENUM "enum" 95828 . 95850) (punctuation 95738 . 95739) (symbol 95733 . 95737) (symbol "specbind_tag" 95710 . 95732) (ENUM "enum" 95710 . 95732) (punctuation 95738 . 95739) (symbol 95733 . 95737) (symbol "specbind_tag" 95710 . 95732) (ENUM "enum" 95710 . 95732) (punctuation 95615 . 95616) (symbol 95610 . 95614) (symbol "specbind_tag" 95587 . 95609) (ENUM "enum" 95587 . 95609) (punctuation 95615 . 95616) (symbol 95610 . 95614) (symbol "specbind_tag" 95587 . 95609) (ENUM "enum" 95587 . 95609) (punctuation 95487 . 95488) (symbol 95482 . 95486) (symbol "specbind_tag" 95459 . 95481) (ENUM "enum" 95459 . 95481) (punctuation 95487 . 95488) (symbol 95482 . 95486) (symbol "specbind_tag" 95459 . 95481) (ENUM "enum" 95459 . 95481) (punctuation 95357 . 95358) (symbol 95352 . 95356) (symbol "specbind_tag" 95329 . 95351) (ENUM "enum" 95329 . 95351) (punctuation 95357 . 95358) (symbol 95352 . 95356) (symbol "specbind_tag" 95329 . 95351) (ENUM "enum" 95329 . 95351) (punctuation 95298 . 95299) (symbol 95293 . 95297) (symbol "specbind_tag" 95270 . 95292) (ENUM "enum" 95270 . 95292) (open-paren 95161 . 95162) (symbol 95147 . 95158) (UNION 95141 . 95146) (punctuation 95138 . 95139) (close-paren 95137 . 95138) (symbol 95071 . 95090) (punctuation 95031 . 95032) (symbol 95014 . 95031) (punctuation 94895 . 94896) (symbol 94884 . 94895) (punctuation 94843 . 94844) (symbol 94826 . 94843) (punctuation 94791 . 94792) (symbol 94772 . 94791) (punctuation 94733 . 94734) (symbol 94709 . 94733) (punctuation 94679 . 94680) (symbol 94661 . 94679) (punctuation 94628 . 94629) (symbol 94610 . 94628) (punctuation 94508 . 94509) (symbol 94488 . 94508) (punctuation 94433 . 94434) (symbol 94419 . 94433) (open-paren 94415 . 94416) (symbol 94402 . 94414) (ENUM 94397 . 94401) (punctuation 91829 . 91830) (close-paren 91828 . 91829) (INT 91825 . 91828) (punctuation 91823 . 91824) (punctuation 91822 . 91823) (CHAR 91817 . 91821) (CONST 91811 . 91816) (punctuation 91809 . 91810) (punctuation 91808 . 91809) (symbol 91789 . 91807) (STRUCT 91782 . 91788) (open-paren 91781 . 91782) (symbol 91767 . 91780) (VOID 91762 . 91766) (EXTERN 91755 . 91761) (punctuation 91753 . 91754) (close-paren 91752 . 91753) (punctuation 91751 . 91752) (symbol 91741 . 91750) (punctuation 91739 . 91740) (punctuation 91738 . 91739) (CHAR 91733 . 91737) (CONST 91727 . 91732) (punctuation 91725 . 91726) (punctuation 91724 . 91725) (symbol 91712 . 91723) (STRUCT 91705 . 91711) (open-paren 91704 . 91705) (symbol 91693 . 91703) (VOID 91688 . 91692) (EXTERN 91681 . 91687) (punctuation 91679 . 91680) (close-paren 91678 . 91679) (punctuation 91677 . 91678) (BOOL 91672 . 91676) (punctuation 91670 . 91671) (punctuation 91669 . 91670) (CHAR 91664 . 91668) (CONST 91658 . 91663) (punctuation 91656 . 91657) (punctuation 91655 . 91656) (symbol 91642 . 91654) (STRUCT 91635 . 91641) (open-paren 91634 . 91635) (symbol 91622 . 91633) (VOID 91617 . 91621) (EXTERN 91610 . 91616) (punctuation 91608 . 91609) (close-paren 91607 . 91608) (punctuation 91606 . 91607) (symbol 91594 . 91605) (punctuation 91592 . 91593) (punctuation 91591 . 91592) (CHAR 91586 . 91590) (CONST 91580 . 91585) (punctuation 91578 . 91579) (punctuation 91577 . 91578) (symbol 91565 . 91576) (STRUCT 91558 . 91564) (open-paren 91557 . 91558) (symbol 91539 . 91556) (VOID 91534 . 91538) (EXTERN 91527 . 91533) (punctuation 91525 . 91526) (close-paren 91524 . 91525) (punctuation 91523 . 91524) (symbol 91511 . 91522) (punctuation 91509 . 91510) (punctuation 91508 . 91509) (CHAR 91503 . 91507) (CONST 91497 . 91502) (punctuation 91495 . 91496) (punctuation 91494 . 91495) (symbol 91482 . 91493) (STRUCT 91475 . 91481) (open-paren 91474 . 91475) (symbol 91462 . 91473) (VOID 91457 . 91461) (EXTERN 91450 . 91456) (punctuation 90946 . 90947) (close-paren 90945 . 90946) (number 90941 . 90942) (punctuation 90940 . 90941) (punctuation 90938 . 90939) (symbol 90928 . 90937) (punctuation 90922 . 90923) (number 90921 . 90922) (punctuation 90920 . 90921) (punctuation 90918 . 90919) (symbol 90913 . 90917) (open-paren 90907 . 90908) (symbol 90897 . 90904) (ENUM 90892 . 90896) (punctuation 90889 . 90890) (close-paren 90888 . 90889) (punctuation 90887 . 90888) (symbol 90877 . 90886) (STRUCT 90870 . 90876) (open-paren 90869 . 90870) (symbol 90861 . 90868) (VOID 90856 . 90860) (EXTERN 90849 . 90855) (close-paren 89007 . 89008) (open-paren 88933 . 88934) (close-paren 88931 . 88932) (symbol 88930 . 88931) (symbol 88918 . 88929) (open-paren 88917 . 88918) (symbol 88900 . 88916) (VOID 88895 . 88899) (symbol 88888 . 88894) (close-paren 88885 . 88886) (open-paren 88811 . 88812) (close-paren 88809 . 88810) (symbol 88808 . 88809) (symbol 88796 . 88807) (open-paren 88795 . 88796) (symbol 88778 . 88794) (VOID 88773 . 88777) (symbol 88766 . 88772) (close-paren 88149 . 88150) (semantic-list 88130 . 88133) (open-paren 88105 . 88106) (close-paren 88103 . 88104) (symbol 88102 . 88103) (symbol 88090 . 88101) (open-paren 88089 . 88090) (symbol 88075 . 88088) (VOID 88070 . 88074) (symbol 88063 . 88069) (close-paren 88060 . 88061) (semantic-list 88041 . 88044) (open-paren 88017 . 88018) (close-paren 88015 . 88016) (symbol 88014 . 88015) (symbol 88002 . 88013) (open-paren 88001 . 88002) (symbol 87988 . 88000) (VOID 87983 . 87987) (symbol 87976 . 87982) (close-paren 87973 . 87974) (punctuation 87971 . 87972) (semantic-list 87884 . 87971) (RETURN 87877 . 87883) (open-paren 87873 . 87874) (close-paren 87871 . 87872) (symbol 87870 . 87871) (symbol 87858 . 87869) (open-paren 87857 . 87858) (symbol 87847 . 87856) (DOUBLE 87840 . 87846) (symbol 87833 . 87839) (close-paren 86933 . 86934) (semantic-list 86912 . 86915) (open-paren 86888 . 86889) (close-paren 86886 . 86887) (symbol 86885 . 86886) (symbol 86873 . 86884) (open-paren 86872 . 86873) (symbol 86859 . 86871) (VOID 86854 . 86858) (symbol 86847 . 86853) (close-paren 86845 . 86846) (semantic-list 86825 . 86828) (open-paren 86802 . 86803) (close-paren 86800 . 86801) (symbol 86791 . 86800) (symbol 86779 . 86790) (punctuation 86777 . 86778) (symbol 86776 . 86777) (symbol 86764 . 86775) (open-paren 86763 . 86764) (symbol 86751 . 86762) (VOID 86746 . 86750) (symbol 86739 . 86745) (close-paren 86737 . 86738) (RETURN 86682 . 86688) (semantic-list 86664 . 86677) (IF 86661 . 86663) (RETURN 86641 . 86647) (semantic-list 86623 . 86636) (IF 86620 . 86622) (open-paren 86616 . 86617) (close-paren 86614 . 86615) (symbol 86613 . 86614) (symbol 86601 . 86612) (open-paren 86600 . 86601) (symbol 86577 . 86599) (symbol 86567 . 86576) (symbol 86560 . 86566) (close-paren 86489 . 86490) (semantic-list 86483 . 86486) (semantic-list 86456 . 86466) (open-paren 86432 . 86433) (close-paren 86430 . 86431) (symbol 86429 . 86430) (symbol 86417 . 86428) (open-paren 86416 . 86417) (symbol 86399 . 86415) (VOID 86394 . 86398) (symbol 86387 . 86393) (close-paren 86384 . 86385) (open-paren 86355 . 86356) (close-paren 86353 . 86354) (symbol 86352 . 86353) (symbol 86340 . 86351) (open-paren 86339 . 86340) (close-paren 86337 . 86338) (symbol 86325 . 86337) (open-paren 86324 . 86325) (VOID 86319 . 86323) (symbol 86312 . 86318) (close-paren 86309 . 86310) (semantic-list 86292 . 86295) (open-paren 86271 . 86272) (close-paren 86269 . 86270) (symbol 86268 . 86269) (symbol 86256 . 86267) (punctuation 86254 . 86255) (symbol 86253 . 86254) (symbol 86241 . 86252) (open-paren 86240 . 86241) (symbol 86225 . 86239) (VOID 86220 . 86224) (symbol 86213 . 86219) (close-paren 86210 . 86211) (semantic-list 86193 . 86196) (punctuation 86186 . 86187) (punctuation 86185 . 86186) (semantic-list 86181 . 86184) (open-paren 86159 . 86160) (close-paren 86157 . 86158) (symbol 86156 . 86157) (symbol 86144 . 86155) (open-paren 86143 . 86144) (symbol 86132 . 86142) (VOID 86127 . 86131) (symbol 86120 . 86126) (close-paren 86116 . 86117) (punctuation 86095 . 86096) (punctuation 86094 . 86095) (semantic-list 86090 . 86093) (symbol 86077 . 86089) (punctuation 86075 . 86076) (punctuation 86074 . 86075) (semantic-list 86070 . 86073) (symbol 86062 . 86069) (punctuation 86060 . 86061) (punctuation 86059 . 86060) (semantic-list 86055 . 86058) (symbol 86047 . 86054) (RETURN 86040 . 86046) (open-paren 86036 . 86037) (close-paren 86034 . 86035) (symbol 86033 . 86034) (symbol 86021 . 86032) (open-paren 86020 . 86021) (symbol 86013 . 86019) (BOOL 86008 . 86012) (symbol 86001 . 86007) (close-paren 85978 . 85979) (punctuation 85952 . 85953) (semantic-list 85948 . 85951) (symbol 85942 . 85947) (RETURN 85935 . 85941) (open-paren 85931 . 85932) (close-paren 85929 . 85930) (symbol 85928 . 85929) (symbol 85916 . 85927) (open-paren 85915 . 85916) (symbol 85908 . 85914) (BOOL 85903 . 85907) (symbol 85896 . 85902) (close-paren 85856 . 85857) (semantic-list 85837 . 85840) (open-paren 85813 . 85814) (close-paren 85811 . 85812) (symbol 85810 . 85811) (symbol 85798 . 85809) (open-paren 85797 . 85798) (symbol 85784 . 85796) (VOID 85779 . 85783) (symbol 85772 . 85778) (close-paren 85769 . 85770) (RETURN 85730 . 85736) (open-paren 85726 . 85727) (close-paren 85724 . 85725) (symbol 85723 . 85724) (symbol 85711 . 85722) (open-paren 85710 . 85711) (symbol 85702 . 85709) (BOOL 85697 . 85701) (symbol 85690 . 85696) (close-paren 85687 . 85688) (RETURN 85649 . 85655) (open-paren 85645 . 85646) (close-paren 85643 . 85644) (symbol 85642 . 85643) (symbol 85630 . 85641) (open-paren 85629 . 85630) (symbol 85622 . 85628) (BOOL 85617 . 85621) (symbol 85610 . 85616) (close-paren 85607 . 85608) (RETURN 85566 . 85572) (open-paren 85562 . 85563) (close-paren 85560 . 85561) (symbol 85559 . 85560) (symbol 85547 . 85558) (open-paren 85546 . 85547) (symbol 85536 . 85545) (BOOL 85531 . 85535) (symbol 85524 . 85530) (close-paren 85521 . 85522) (RETURN 85468 . 85474) (open-paren 85464 . 85465) (close-paren 85462 . 85463) (symbol 85461 . 85462) (symbol 85449 . 85460) (open-paren 85448 . 85449) (symbol 85426 . 85447) (BOOL 85421 . 85425) (symbol 85414 . 85420) (close-paren 85364 . 85365) (punctuation 85335 . 85336) (semantic-list 85331 . 85334) (symbol 85325 . 85330) (RETURN 85318 . 85324) (open-paren 85314 . 85315) (close-paren 85312 . 85313) (symbol 85311 . 85312) (symbol 85299 . 85310) (open-paren 85298 . 85299) (symbol 85288 . 85297) (BOOL 85283 . 85287) (symbol 85276 . 85282) (close-paren 85081 . 85082) (punctuation 85075 . 85076) (punctuation 85074 . 85075) (semantic-list 85070 . 85073) (symbol 85062 . 85069) (punctuation 85060 . 85061) (punctuation 85059 . 85060) (semantic-list 85055 . 85058) (symbol 85047 . 85054) (punctuation 85045 . 85046) (punctuation 85044 . 85045) (symbol 85041 . 85043) (punctuation 85039 . 85040) (punctuation 85038 . 85039) (semantic-list 85034 . 85037) (symbol 85026 . 85033) (RETURN 85019 . 85025) (open-paren 85015 . 85016) (close-paren 85013 . 85014) (symbol 85011 . 85013) (symbol 85002 . 85010) (punctuation 85000 . 85001) (symbol 84999 . 85000) (symbol 84987 . 84998) (punctuation 84985 . 84986) (symbol 84983 . 84985) (symbol 84974 . 84982) (open-paren 84973 . 84974) (symbol 84958 . 84972) (BOOL 84953 . 84957) (symbol 84946 . 84952) (close-paren 84943 . 84944) (punctuation 84929 . 84930) (punctuation 84928 . 84929) (semantic-list 84924 . 84927) (symbol 84915 . 84923) (RETURN 84908 . 84914) (open-paren 84904 . 84905) (close-paren 84902 . 84903) (symbol 84901 . 84902) (symbol 84889 . 84900) (open-paren 84888 . 84889) (symbol 84880 . 84887) (BOOL 84875 . 84879) (symbol 84868 . 84874) (close-paren 84866 . 84867) (punctuation 84851 . 84852) (punctuation 84850 . 84851) (number 84848 . 84849) (punctuation 84846 . 84847) (punctuation 84845 . 84846) (semantic-list 84841 . 84844) (symbol 84833 . 84840) (RETURN 84826 . 84832) (open-paren 84822 . 84823) (close-paren 84820 . 84821) (symbol 84819 . 84820) (symbol 84807 . 84818) (open-paren 84806 . 84807) (symbol 84798 . 84805) (BOOL 84793 . 84797) (symbol 84786 . 84792) (punctuation 84754 . 84755) (close-paren 84753 . 84754) (number 84748 . 84750) (punctuation 84746 . 84747) (symbol 84732 . 84745) (punctuation 84634 . 84635) (symbol 84625 . 84634) (punctuation 84623 . 84624) (symbol 84614 . 84622) (punctuation 84612 . 84613) (symbol 84601 . 84611) (punctuation 84599 . 84600) (symbol 84588 . 84598) (punctuation 84586 . 84587) (symbol 84575 . 84585) (punctuation 84573 . 84574) (symbol 84564 . 84572) (punctuation 84556 . 84557) (symbol 84537 . 84555) (punctuation 84530 . 84531) (number 84521 . 84530) (punctuation 84519 . 84520) (symbol 84509 . 84518) (punctuation 84503 . 84504) (number 84494 . 84503) (punctuation 84492 . 84493) (symbol 84483 . 84491) (punctuation 84477 . 84478) (number 84468 . 84477) (punctuation 84466 . 84467) (symbol 84455 . 84465) (punctuation 84449 . 84450) (number 84440 . 84449) (punctuation 84438 . 84439) (symbol 84427 . 84437) (punctuation 84421 . 84422) (number 84412 . 84421) (punctuation 84410 . 84411) (symbol 84399 . 84409) (punctuation 84393 . 84394) (number 84384 . 84393) (punctuation 84382 . 84383) (symbol 84373 . 84381) (open-paren 84367 . 84368) (symbol 84355 . 84364) (ENUM 84350 . 84354) (punctuation 84080 . 84081) (close-paren 84079 . 84080) (number 84075 . 84076) (punctuation 84073 . 84074) (symbol 84052 . 84072) (punctuation 84046 . 84047) (number 84045 . 84046) (punctuation 84043 . 84044) (symbol 84023 . 84042) (punctuation 84017 . 84018) (number 84016 . 84017) (punctuation 84014 . 84015) (symbol 83993 . 84013) (punctuation 83987 . 83988) (number 83986 . 83987) (punctuation 83984 . 83985) (symbol 83965 . 83983) (punctuation 83959 . 83960) (number 83958 . 83959) (punctuation 83956 . 83957) (symbol 83938 . 83955) (punctuation 83932 . 83933) (number 83931 . 83932) (punctuation 83929 . 83930) (symbol 83912 . 83928) (open-paren 83906 . 83907) (symbol 83890 . 83903) (ENUM 83885 . 83889) (close-paren 83016 . 83017) (punctuation 83009 . 83010) (symbol 83008 . 83009) (punctuation 83007 . 83008) (punctuation 83006 . 83007) (semantic-list 83003 . 83006) (symbol 82996 . 83002) (RETURN 82989 . 82995) (open-paren 82985 . 82986) (close-paren 82983 . 82984) (symbol 82982 . 82983) (symbol 82970 . 82981) (open-paren 82969 . 82970) (symbol 82957 . 82968) (DOUBLE 82950 . 82956) (symbol 82943 . 82949) (close-paren 82940 . 82941) (punctuation 82938 . 82939) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 82920 . 82926) ("type" symbol "Lisp_Float" 82908 . 82918) ("a" symbol "a" 82905 . 82906)))) 82897 . 82938) (RETURN 82890 . 82896) (punctuation 82886 . 82887) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 82875 . 82881)))) 82866 . 82886) (open-paren 82862 . 82863) (close-paren 82860 . 82861) (symbol 82859 . 82860) (symbol 82847 . 82858) (open-paren 82846 . 82847) (symbol 82839 . 82845) (punctuation 82837 . 82838) (symbol 82826 . 82836) (STRUCT 82819 . 82825) (symbol 82812 . 82818) (close-paren 82809 . 82810) (RETURN 82783 . 82789) (open-paren 82779 . 82780) (close-paren 82777 . 82778) (symbol 82776 . 82777) (symbol 82764 . 82775) (open-paren 82763 . 82764) (close-paren 82761 . 82762) (symbol 82755 . 82761) (open-paren 82754 . 82755) (BOOL 82749 . 82753) (symbol 82742 . 82748) (punctuation 82739 . 82740) (close-paren 82721 . 82722) (open-paren 82641 . 82642) (symbol 82628 . 82638) (STRUCT 82621 . 82627) (close-paren 82584 . 82585) (punctuation 82566 . 82567) (punctuation 82565 . 82566) (symbol 82564 . 82565) (punctuation 82563 . 82564) (RETURN 82556 . 82562) (punctuation 82552 . 82553) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 82533 . 82547)))) 82524 . 82552) (open-paren 82520 . 82521) (close-paren 82518 . 82519) (symbol 82517 . 82518) (punctuation 82516 . 82517) (symbol 82507 . 82515) (UNION 82501 . 82506) (open-paren 82500 . 82501) (symbol 82485 . 82499) (punctuation 82483 . 82484) (symbol 82464 . 82482) (STRUCT 82457 . 82463) (symbol 82450 . 82456) (close-paren 82447 . 82448) (punctuation 82424 . 82425) (punctuation 82423 . 82424) (semantic-list 82419 . 82422) (symbol 82410 . 82418) (RETURN 82403 . 82409) (open-paren 82399 . 82400) (close-paren 82397 . 82398) (symbol 82396 . 82397) (punctuation 82395 . 82396) (symbol 82386 . 82394) (UNION 82380 . 82385) (open-paren 82379 . 82380) (symbol 82364 . 82378) (BOOL 82359 . 82363) (symbol 82352 . 82358) (close-paren 82349 . 82350) (punctuation 82342 . 82343) (symbol 82334 . 82342) (punctuation 82333 . 82334) (punctuation 82332 . 82333) (symbol 82331 . 82332) (RETURN 82324 . 82330) (open-paren 82320 . 82321) (close-paren 82318 . 82319) (symbol 82317 . 82318) (punctuation 82316 . 82317) (symbol 82307 . 82315) (UNION 82301 . 82306) (open-paren 82300 . 82301) (symbol 82291 . 82299) (symbol 82277 . 82290) (ENUM 82272 . 82276) (symbol 82265 . 82271) (punctuation 82262 . 82263) (close-paren 82261 . 82262) (open-paren 82062 . 82063) (symbol 82051 . 82059) (UNION 82045 . 82050) (punctuation 82042 . 82043) (close-paren 82041 . 82042) (open-paren 81964 . 81965) (symbol 81943 . 81961) (STRUCT 81936 . 81942) (punctuation 81849 . 81850) (close-paren 81848 . 81849) (open-paren 80903 . 80904) (symbol 80877 . 80900) (STRUCT 80870 . 80876) (punctuation 79793 . 79794) (close-paren 79792 . 79793) (open-paren 79613 . 79614) (symbol 79592 . 79610) (STRUCT 79585 . 79591) (punctuation 79454 . 79455) (close-paren 79453 . 79454) (open-paren 79374 . 79375) (symbol 79360 . 79371) (STRUCT 79353 . 79359) (punctuation 79159 . 79160) (close-paren 79158 . 79159) (open-paren 79084 . 79085) (symbol 79069 . 79081) (STRUCT 79062 . 79068) (punctuation 78867 . 78868) (close-paren 78866 . 78867) (open-paren 78789 . 78790) (symbol 78775 . 78786) (STRUCT 78768 . 78774) (close-paren 78412 . 78413) (punctuation 78393 . 78394) (semantic-list 78389 . 78392) (symbol 78376 . 78388) (punctuation 78374 . 78375) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78371 . 78372)))) 78352 . 78373) (RETURN 78345 . 78351) (open-paren 78341 . 78342) (close-paren 78339 . 78340) (symbol 78338 . 78339) (symbol 78328 . 78337) (open-paren 78327 . 78328) (symbol 78317 . 78326) (symbol 78305 . 78316) (symbol 78298 . 78304) (close-paren 78296 . 78297) (punctuation 78277 . 78278) (semantic-list 78273 . 78276) (symbol 78261 . 78272) (punctuation 78259 . 78260) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78256 . 78257)))) 78237 . 78258) (RETURN 78230 . 78236) (open-paren 78226 . 78227) (close-paren 78224 . 78225) (symbol 78223 . 78224) (symbol 78214 . 78222) (open-paren 78213 . 78214) (symbol 78204 . 78212) (symbol 78192 . 78203) (symbol 78185 . 78191) (close-paren 78128 . 78129) (punctuation 78113 . 78114) (punctuation 78112 . 78113) (semantic-list 78108 . 78111) (symbol 78100 . 78107) (RETURN 78093 . 78099) (open-paren 78089 . 78090) (close-paren 78087 . 78088) (symbol 78086 . 78087) (symbol 78074 . 78085) (open-paren 78073 . 78074) (symbol 78064 . 78072) (BOOL 78059 . 78063) (symbol 78052 . 78058) (close-paren 78049 . 78050) (RETURN 78010 . 78016) (open-paren 78006 . 78007) (close-paren 78004 . 78005) (symbol 78003 . 78004) (symbol 77991 . 78002) (open-paren 77990 . 77991) (symbol 77982 . 77989) (BOOL 77977 . 77981) (symbol 77970 . 77976) (close-paren 77706 . 77707) (punctuation 77704 . 77705) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77684 . 77690) ("type" symbol "Lisp_Vectorlike" 77667 . 77682) ("a" symbol "a" 77664 . 77665)))) 77656 . 77704) (RETURN 77649 . 77655) (punctuation 77645 . 77646) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 77632 . 77640)))) 77623 . 77645) (open-paren 77619 . 77620) (close-paren 77617 . 77618) (symbol 77616 . 77617) (symbol 77604 . 77615) (open-paren 77603 . 77604) (symbol 77594 . 77602) (punctuation 77592 . 77593) (symbol 77579 . 77591) (STRUCT 77572 . 77578) (symbol 77565 . 77571) (close-paren 77562 . 77563) (RETURN 77522 . 77528) (open-paren 77518 . 77519) (close-paren 77516 . 77517) (symbol 77515 . 77516) (symbol 77503 . 77514) (open-paren 77502 . 77503) (symbol 77493 . 77501) (BOOL 77488 . 77492) (symbol 77481 . 77487) (close-paren 77478 . 77479) (punctuation 77476 . 77477) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77457 . 77463) ("type" symbol "Lisp_Vectorlike" 77440 . 77455) ("a" symbol "a" 77437 . 77438)))) 77429 . 77476) (RETURN 77422 . 77428) (punctuation 77418 . 77419) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 77406 . 77413)))) 77397 . 77418) (open-paren 77393 . 77394) (close-paren 77391 . 77392) (symbol 77390 . 77391) (symbol 77378 . 77389) (open-paren 77377 . 77378) (symbol 77369 . 77376) (punctuation 77367 . 77368) (symbol 77355 . 77366) (STRUCT 77348 . 77354) (symbol 77341 . 77347) (close-paren 77338 . 77339) (RETURN 77299 . 77305) (open-paren 77295 . 77296) (close-paren 77293 . 77294) (symbol 77292 . 77293) (symbol 77280 . 77291) (open-paren 77279 . 77280) (symbol 77271 . 77278) (BOOL 77266 . 77270) (symbol 77259 . 77265) (close-paren 77256 . 77257) (punctuation 77254 . 77255) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77232 . 77238) ("type" symbol "Lisp_Vectorlike" 77215 . 77230) ("a" symbol "a" 77212 . 77213)))) 77204 . 77254) (RETURN 77197 . 77203) (punctuation 77193 . 77194) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 77178 . 77188)))) 77169 . 77193) (open-paren 77165 . 77166) (close-paren 77163 . 77164) (symbol 77162 . 77163) (symbol 77150 . 77161) (open-paren 77149 . 77150) (symbol 77138 . 77148) (punctuation 77136 . 77137) (symbol 77121 . 77135) (STRUCT 77114 . 77120) (symbol 77107 . 77113) (close-paren 77104 . 77105) (RETURN 77062 . 77068) (open-paren 77058 . 77059) (close-paren 77056 . 77057) (symbol 77055 . 77056) (symbol 77043 . 77054) (open-paren 77042 . 77043) (symbol 77031 . 77041) (BOOL 77026 . 77030) (symbol 77019 . 77025) (punctuation 77016 . 77017) (close-paren 76998 . 76999) (open-paren 76605 . 76606) (symbol 76588 . 76602) (STRUCT 76581 . 76587) (close-paren 76403 . 76404) (punctuation 76393 . 76394) (punctuation 76392 . 76393) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 76371 . 76377) ("type" symbol "Lisp_Vectorlike" 76354 . 76369) ("a" symbol "a" 76351 . 76352)))) 76343 . 76392) (RETURN 76336 . 76342) (RETURN 76311 . 76317) (semantic-list 76293 . 76306) (IF 76290 . 76292) (punctuation 76286 . 76287) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "mint_ptrp" 76272 . 76281)))) 76263 . 76286) (open-paren 76259 . 76260) (close-paren 76257 . 76258) (symbol 76256 . 76257) (symbol 76244 . 76255) (open-paren 76243 . 76244) (symbol 76229 . 76242) (punctuation 76227 . 76228) (VOID 76222 . 76226) (symbol 76215 . 76221) (close-paren 76212 . 76213) (punctuation 76176 . 76177) (punctuation 76175 . 76176) (semantic-list 76171 . 76174) (symbol 76163 . 76170) (RETURN 76156 . 76162) (open-paren 76152 . 76153) (close-paren 76150 . 76151) (symbol 76149 . 76150) (symbol 76137 . 76148) (open-paren 76136 . 76137) (symbol 76126 . 76135) (BOOL 76121 . 76125) (symbol 76114 . 76120) (close-paren 76111 . 76112) (punctuation 76090 . 76091) (symbol 76086 . 76089) (punctuation 76084 . 76085) (symbol 76082 . 76083) (punctuation 76080 . 76081) (punctuation 76079 . 76080) (semantic-list 76073 . 76078) (symbol 76062 . 76072) (punctuation 76060 . 76061) (punctuation 76059 . 76060) (semantic-list 76053 . 76058) (symbol 76045 . 76052) (RETURN 76038 . 76044) (open-paren 75990 . 75991) (close-paren 75988 . 75989) (symbol 75987 . 75988) (punctuation 75986 . 75987) (VOID 75981 . 75985) (open-paren 75980 . 75981) (symbol 75966 . 75979) (symbol 75954 . 75965) (symbol 75947 . 75953) (punctuation 75089 . 75090) (close-paren 75088 . 75089) (punctuation 75087 . 75088) (VOID 75082 . 75086) (open-paren 75081 . 75082) (symbol 75067 . 75080) (symbol 75055 . 75066) (EXTERN 75048 . 75054) (punctuation 75045 . 75046) (close-paren 75027 . 75028) (open-paren 74968 . 74969) (symbol 74952 . 74965) (STRUCT 74945 . 74951) (punctuation 74942 . 74943) (close-paren 74924 . 74925) (open-paren 74786 . 74787) (symbol 74287 . 74299) (STRUCT 74280 . 74286) (punctuation 74174 . 74175) (close-paren 74156 . 74157) (open-paren 72365 . 72366) (symbol 72353 . 72364) (STRUCT 72346 . 72352) (close-paren 72343 . 72344) (punctuation 72341 . 72342) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 72334 . 72341) (punctuation 72332 . 72333) (semantic-list 72289 . 72331) (RETURN 72282 . 72288) (open-paren 72278 . 72279) (close-paren 72276 . 72277) (symbol 72275 . 72276) (symbol 72264 . 72274) (open-paren 72263 . 72264) (symbol 72249 . 72262) (symbol 72238 . 72248) (symbol 72231 . 72237) (close-paren 72169 . 72170) (punctuation 72164 . 72165) (semantic-list 72135 . 72163) (punctuation 72133 . 72134) (semantic-list 72124 . 72132) (RETURN 72117 . 72123) (open-paren 72113 . 72114) (close-paren 72111 . 72112) (symbol 72110 . 72111) (symbol 72099 . 72109) (punctuation 72097 . 72098) (symbol 72096 . 72097) (symbol 72085 . 72095) (open-paren 72084 . 72085) (symbol 72069 . 72083) (symbol 72058 . 72068) (symbol 72051 . 72057) (punctuation 71595 . 71596) (close-paren 71594 . 71595) (number 71591 . 71593) (punctuation 71589 . 71590) (symbol 71571 . 71588) (open-paren 71569 . 71570) (symbol 71551 . 71568) (ENUM 71546 . 71550) (close-paren 71488 . 71489) (punctuation 71480 . 71481) (punctuation 71479 . 71480) (RETURN 71464 . 71470) (open-paren 71460 . 71461) (close-paren 71458 . 71459) (symbol 71457 . 71458) (punctuation 71456 . 71457) (symbol 71440 . 71455) (STRUCT 71433 . 71439) (open-paren 71432 . 71433) (symbol 71416 . 71431) (symbol 71406 . 71415) (symbol 71399 . 71405) (close-paren 71354 . 71355) (punctuation 71341 . 71342) (punctuation 71340 . 71341) (RETURN 71326 . 71332) (open-paren 71322 . 71323) (close-paren 71320 . 71321) (symbol 71317 . 71320) (symbol 71307 . 71316) (punctuation 71305 . 71306) (symbol 71304 . 71305) (punctuation 71303 . 71304) (symbol 71287 . 71302) (STRUCT 71280 . 71286) (open-paren 71279 . 71280) (symbol 71269 . 71278) (symbol 71257 . 71268) (symbol 71250 . 71256) (close-paren 71177 . 71178) (number 71173 . 71174) (punctuation 71171 . 71172) (punctuation 71165 . 71166) (number 71163 . 71164) (punctuation 71147 . 71148) (punctuation 71146 . 71147) (RETURN 71132 . 71138) (open-paren 71128 . 71129) (close-paren 71126 . 71127) (symbol 71123 . 71126) (symbol 71113 . 71122) (punctuation 71111 . 71112) (symbol 71110 . 71111) (punctuation 71109 . 71110) (symbol 71093 . 71108) (STRUCT 71086 . 71092) (open-paren 71085 . 71086) (symbol 71074 . 71084) (symbol 71062 . 71073) (symbol 71055 . 71061) (close-paren 70991 . 70992) (punctuation 70983 . 70984) (number 70981 . 70982) (punctuation 70965 . 70966) (punctuation 70964 . 70965) (RETURN 70950 . 70956) (open-paren 70946 . 70947) (close-paren 70944 . 70945) (symbol 70941 . 70944) (symbol 70931 . 70940) (punctuation 70929 . 70930) (symbol 70928 . 70929) (punctuation 70927 . 70928) (symbol 70911 . 70926) (STRUCT 70904 . 70910) (open-paren 70903 . 70904) (symbol 70894 . 70902) (symbol 70882 . 70893) (symbol 70875 . 70881) (close-paren 70724 . 70725) (punctuation 70722 . 70723) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 70699 . 70705) ("type" symbol "Lisp_Vectorlike" 70682 . 70697) ("a" symbol "a" 70679 . 70680)))) 70671 . 70722) (RETURN 70664 . 70670) (punctuation 70660 . 70661) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 70643 . 70655)))) 70634 . 70660) (open-paren 70630 . 70631) (close-paren 70628 . 70629) (symbol 70627 . 70628) (symbol 70615 . 70626) (open-paren 70614 . 70615) (symbol 70602 . 70613) (punctuation 70600 . 70601) (symbol 70584 . 70599) (STRUCT 70577 . 70583) (symbol 70570 . 70576) (close-paren 70567 . 70568) (RETURN 70524 . 70530) (open-paren 70520 . 70521) (close-paren 70518 . 70519) (symbol 70517 . 70518) (symbol 70505 . 70516) (open-paren 70504 . 70505) (symbol 70491 . 70503) (BOOL 70486 . 70490) (symbol 70479 . 70485) (punctuation 70476 . 70477) (close-paren 70475 . 70476) (symbol 70464 . 70475) (punctuation 70462 . 70463) (punctuation 70461 . 70462) (semantic-list 70430 . 70460) (symbol 70421 . 70429) (open-paren 70420 . 70421) (symbol 70413 . 70419) (punctuation 70369 . 70370) (close-paren 70351 . 70352) (open-paren 68115 . 68116) (symbol 68099 . 68114) (STRUCT 68092 . 68098) (punctuation 68089 . 68090) (close-paren 68088 . 68089) (open-paren 67622 . 67623) (symbol 67606 . 67621) (STRUCT 67599 . 67605) (close-paren 67233 . 67234) (punctuation 67231 . 67232) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 67227 . 67230)))) 67201 . 67231) (RETURN 67194 . 67200) (open-paren 67190 . 67191) (close-paren 67188 . 67189) (symbol 67185 . 67188) (symbol 67173 . 67184) (open-paren 67172 . 67173) (close-paren 67170 . 67171) (symbol 67153 . 67170) (open-paren 67152 . 67153) (INT 67148 . 67151) (symbol 67141 . 67147) (close-paren 66917 . 66918) (punctuation 66915 . 66916) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 66911 . 66914)))) 66880 . 66915) (RETURN 66873 . 66879) (open-paren 66869 . 66870) (close-paren 66867 . 66868) (symbol 66864 . 66867) (symbol 66852 . 66863) (open-paren 66851 . 66852) (close-paren 66849 . 66850) (symbol 66827 . 66849) (open-paren 66826 . 66827) (INT 66822 . 66825) (symbol 66815 . 66821) (close-paren 66648 . 66649) (punctuation 66610 . 66611) (punctuation 66609 . 66610) (symbol 66600 . 66608) (punctuation 66599 . 66600) (symbol 66598 . 66599) (punctuation 66597 . 66598) (symbol 66596 . 66597) (punctuation 66595 . 66596) (punctuation 66594 . 66595) (semantic-list 66589 . 66594) (symbol 66581 . 66588) (RETURN 66574 . 66580) (open-paren 66570 . 66571) (close-paren 66568 . 66569) (symbol 66565 . 66568) (symbol 66553 . 66564) (open-paren 66552 . 66553) (symbol 66515 . 66551) (BOOL 66510 . 66514) (symbol 66503 . 66509) (close-paren 66439 . 66440) (punctuation 66418 . 66419) (punctuation 66417 . 66418) (symbol 66408 . 66416) (punctuation 66407 . 66408) (symbol 66406 . 66407) (punctuation 66405 . 66406) (symbol 66404 . 66405) (punctuation 66403 . 66404) (punctuation 66402 . 66403) (semantic-list 66397 . 66402) (symbol 66389 . 66396) (RETURN 66382 . 66388) (open-paren 66378 . 66379) (close-paren 66376 . 66377) (symbol 66373 . 66376) (symbol 66361 . 66372) (open-paren 66360 . 66361) (symbol 66342 . 66359) (BOOL 66337 . 66341) (symbol 66330 . 66336) (close-paren 66275 . 66276) (punctuation 66268 . 66269) (symbol 66267 . 66268) (punctuation 66266 . 66267) (symbol 66265 . 66266) (punctuation 66264 . 66265) (punctuation 66263 . 66264) (semantic-list 66258 . 66263) (symbol 66250 . 66257) (RETURN 66243 . 66249) (open-paren 66239 . 66240) (close-paren 66237 . 66238) (symbol 66234 . 66237) (symbol 66222 . 66233) (open-paren 66221 . 66222) (symbol 66209 . 66220) (symbol 66197 . 66208) (symbol 66190 . 66196) (close-paren 66187 . 66188) (punctuation 66177 . 66178) (symbol 66174 . 66177) (punctuation 66173 . 66174) (symbol 66172 . 66173) (punctuation 66171 . 66172) (symbol 66170 . 66171) (punctuation 66169 . 66170) (punctuation 66168 . 66169) (symbol 66165 . 66168) (open-paren 66105 . 66106) (close-paren 66103 . 66104) (symbol 66102 . 66103) (punctuation 66101 . 66102) (symbol 66092 . 66100) (UNION 66086 . 66091) (punctuation 66084 . 66085) (symbol 66081 . 66084) (punctuation 66080 . 66081) (symbol 66068 . 66079) (STRUCT 66061 . 66067) (open-paren 66060 . 66061) (symbol 66045 . 66059) (VOID 66040 . 66044) (symbol 66033 . 66039) (close-paren 66031 . 66032) (punctuation 66021 . 66022) (symbol 66018 . 66021) (punctuation 66017 . 66018) (symbol 66016 . 66017) (punctuation 66015 . 66016) (symbol 66014 . 66015) (punctuation 66013 . 66014) (punctuation 66012 . 66013) (symbol 66009 . 66012) (open-paren 65949 . 65950) (close-paren 65947 . 65948) (symbol 65946 . 65947) (punctuation 65945 . 65946) (symbol 65921 . 65944) (STRUCT 65914 . 65920) (punctuation 65912 . 65913) (symbol 65909 . 65912) (punctuation 65908 . 65909) (symbol 65896 . 65907) (STRUCT 65889 . 65895) (open-paren 65888 . 65889) (symbol 65873 . 65887) (VOID 65868 . 65872) (symbol 65861 . 65867) (close-paren 65859 . 65860) (punctuation 65847 . 65848) (symbol 65844 . 65847) (punctuation 65843 . 65844) (symbol 65842 . 65843) (punctuation 65841 . 65842) (symbol 65840 . 65841) (punctuation 65839 . 65840) (punctuation 65838 . 65839) (symbol 65835 . 65838) (open-paren 65776 . 65777) (close-paren 65774 . 65775) (symbol 65773 . 65774) (punctuation 65772 . 65773) (symbol 65760 . 65771) (STRUCT 65753 . 65759) (punctuation 65751 . 65752) (symbol 65748 . 65751) (punctuation 65747 . 65748) (symbol 65735 . 65746) (STRUCT 65728 . 65734) (open-paren 65727 . 65728) (symbol 65710 . 65726) (VOID 65705 . 65709) (symbol 65698 . 65704) (close-paren 65695 . 65696) (punctuation 65693 . 65694) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 65691 . 65692) ("sym" symbol "sym" 65686 . 65689)))) 65663 . 65693) (open-paren 65659 . 65660) (close-paren 65657 . 65658) (symbol 65656 . 65657) (symbol 65644 . 65655) (punctuation 65642 . 65643) (symbol 65639 . 65642) (punctuation 65638 . 65639) (symbol 65626 . 65637) (STRUCT 65619 . 65625) (open-paren 65618 . 65619) (close-paren 65616 . 65617) (symbol 65602 . 65616) (open-paren 65601 . 65602) (VOID 65596 . 65600) (symbol 65589 . 65595) (close-paren 65586 . 65587) (punctuation 65580 . 65581) (symbol 65577 . 65580) (punctuation 65576 . 65577) (symbol 65575 . 65576) (punctuation 65574 . 65575) (symbol 65573 . 65574) (punctuation 65572 . 65573) (punctuation 65571 . 65572) (symbol 65568 . 65571) (RETURN 65561 . 65567) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 82403 . 82409) (open-paren 82399 . 82400) (close-paren 82397 . 82398) (symbol 82396 . 82397) (punctuation 82395 . 82396) (symbol 82386 . 82394) (UNION 82380 . 82385) (open-paren 82379 . 82380) (symbol 82364 . 82378) (BOOL 82359 . 82363) (symbol 82352 . 82358) (close-paren 82349 . 82350) (punctuation 82342 . 82343) (symbol 82334 . 82342) (punctuation 82333 . 82334) (punctuation 82332 . 82333) (symbol 82331 . 82332) (RETURN 82324 . 82330) (open-paren 82320 . 82321) (close-paren 82318 . 82319) (symbol 82317 . 82318) (punctuation 82316 . 82317) (symbol 82307 . 82315) (UNION 82301 . 82306) (open-paren 82300 . 82301) (symbol 82291 . 82299) (symbol 82277 . 82290) (ENUM 82272 . 82276) (symbol 82265 . 82271) (punctuation 82262 . 82263) (close-paren 82261 . 82262) (open-paren 82062 . 82063) (symbol 82051 . 82059) (UNION 82045 . 82050) (punctuation 82042 . 82043) (close-paren 82041 . 82042) (open-paren 81964 . 81965) (symbol 81943 . 81961) (STRUCT 81936 . 81942) (punctuation 81849 . 81850) (close-paren 81848 . 81849) (open-paren 80903 . 80904) (symbol 80877 . 80900) (STRUCT 80870 . 80876) (punctuation 79793 . 79794) (close-paren 79792 . 79793) (open-paren 79613 . 79614) (symbol 79592 . 79610) (STRUCT 79585 . 79591) (punctuation 79454 . 79455) (close-paren 79453 . 79454) (open-paren 79374 . 79375) (symbol 79360 . 79371) (STRUCT 79353 . 79359) (punctuation 79159 . 79160) (close-paren 79158 . 79159) (open-paren 79084 . 79085) (symbol 79069 . 79081) (STRUCT 79062 . 79068) (punctuation 78867 . 78868) (close-paren 78866 . 78867) (open-paren 78789 . 78790) (symbol 78775 . 78786) (STRUCT 78768 . 78774) (close-paren 78412 . 78413) (punctuation 78393 . 78394) (semantic-list 78389 . 78392) (symbol 78376 . 78388) (punctuation 78374 . 78375) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78371 . 78372)))) 78352 . 78373) (RETURN 78345 . 78351) (open-paren 78341 . 78342) (close-paren 78339 . 78340) (symbol 78338 . 78339) (symbol 78328 . 78337) (open-paren 78327 . 78328) (symbol 78317 . 78326) (symbol 78305 . 78316) (symbol 78298 . 78304) (close-paren 78296 . 78297) (punctuation 78277 . 78278) (semantic-list 78273 . 78276) (symbol 78261 . 78272) (punctuation 78259 . 78260) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 78256 . 78257)))) 78237 . 78258) (RETURN 78230 . 78236) (open-paren 78226 . 78227) (close-paren 78224 . 78225) (symbol 78223 . 78224) (symbol 78214 . 78222) (open-paren 78213 . 78214) (symbol 78204 . 78212) (symbol 78192 . 78203) (symbol 78185 . 78191) (close-paren 78128 . 78129) (punctuation 78113 . 78114) (punctuation 78112 . 78113) (semantic-list 78108 . 78111) (symbol 78100 . 78107) (RETURN 78093 . 78099) (open-paren 78089 . 78090) (close-paren 78087 . 78088) (symbol 78086 . 78087) (symbol 78074 . 78085) (open-paren 78073 . 78074) (symbol 78064 . 78072) (BOOL 78059 . 78063) (symbol 78052 . 78058) (close-paren 78049 . 78050) (RETURN 78010 . 78016) (open-paren 78006 . 78007) (close-paren 78004 . 78005) (symbol 78003 . 78004) (symbol 77991 . 78002) (open-paren 77990 . 77991) (symbol 77982 . 77989) (BOOL 77977 . 77981) (symbol 77970 . 77976) (close-paren 77706 . 77707) (punctuation 77704 . 77705) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77684 . 77690) ("type" symbol "Lisp_Vectorlike" 77667 . 77682) ("a" symbol "a" 77664 . 77665)))) 77656 . 77704) (RETURN 77649 . 77655) (punctuation 77645 . 77646) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 77632 . 77640)))) 77623 . 77645) (open-paren 77619 . 77620) (close-paren 77617 . 77618) (symbol 77616 . 77617) (symbol 77604 . 77615) (open-paren 77603 . 77604) (symbol 77594 . 77602) (punctuation 77592 . 77593) (symbol 77579 . 77591) (STRUCT 77572 . 77578) (symbol 77565 . 77571) (close-paren 77562 . 77563) (RETURN 77522 . 77528) (open-paren 77518 . 77519) (close-paren 77516 . 77517) (symbol 77515 . 77516) (symbol 77503 . 77514) (open-paren 77502 . 77503) (symbol 77493 . 77501) (BOOL 77488 . 77492) (symbol 77481 . 77487) (close-paren 77478 . 77479) (punctuation 77476 . 77477) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77457 . 77463) ("type" symbol "Lisp_Vectorlike" 77440 . 77455) ("a" symbol "a" 77437 . 77438)))) 77429 . 77476) (RETURN 77422 . 77428) (punctuation 77418 . 77419) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 77406 . 77413)))) 77397 . 77418) (open-paren 77393 . 77394) (close-paren 77391 . 77392) (symbol 77390 . 77391) (symbol 77378 . 77389) (open-paren 77377 . 77378) (symbol 77369 . 77376) (punctuation 77367 . 77368) (symbol 77355 . 77366) (STRUCT 77348 . 77354) (symbol 77341 . 77347) (close-paren 77338 . 77339) (RETURN 77299 . 77305) (open-paren 77295 . 77296) (close-paren 77293 . 77294) (symbol 77292 . 77293) (symbol 77280 . 77291) (open-paren 77279 . 77280) (symbol 77271 . 77278) (BOOL 77266 . 77270) (symbol 77259 . 77265) (close-paren 77256 . 77257) (punctuation 77254 . 77255) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 77232 . 77238) ("type" symbol "Lisp_Vectorlike" 77215 . 77230) ("a" symbol "a" 77212 . 77213)))) 77204 . 77254) (RETURN 77197 . 77203) (punctuation 77193 . 77194) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 77178 . 77188)))) 77169 . 77193) (open-paren 77165 . 77166) (close-paren 77163 . 77164) (symbol 77162 . 77163) (symbol 77150 . 77161) (open-paren 77149 . 77150) (symbol 77138 . 77148) (punctuation 77136 . 77137) (symbol 77121 . 77135) (STRUCT 77114 . 77120) (symbol 77107 . 77113) (close-paren 77104 . 77105) (RETURN 77062 . 77068) (open-paren 77058 . 77059) (close-paren 77056 . 77057) (symbol 77055 . 77056) (symbol 77043 . 77054) (open-paren 77042 . 77043) (symbol 77031 . 77041) (BOOL 77026 . 77030) (symbol 77019 . 77025) (punctuation 77016 . 77017) (close-paren 76998 . 76999) (open-paren 76605 . 76606) (symbol 76588 . 76602) (STRUCT 76581 . 76587) (close-paren 76403 . 76404) (punctuation 76393 . 76394) (punctuation 76392 . 76393) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 76371 . 76377) ("type" symbol "Lisp_Vectorlike" 76354 . 76369) ("a" symbol "a" 76351 . 76352)))) 76343 . 76392) (RETURN 76336 . 76342) (RETURN 76311 . 76317) (semantic-list 76293 . 76306) (IF 76290 . 76292) (punctuation 76286 . 76287) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "mint_ptrp" 76272 . 76281)))) 76263 . 76286) (open-paren 76259 . 76260) (close-paren 76257 . 76258) (symbol 76256 . 76257) (symbol 76244 . 76255) (open-paren 76243 . 76244) (symbol 76229 . 76242) (punctuation 76227 . 76228) (VOID 76222 . 76226) (symbol 76215 . 76221) (close-paren 76212 . 76213) (punctuation 76176 . 76177) (punctuation 76175 . 76176) (semantic-list 76171 . 76174) (symbol 76163 . 76170) (RETURN 76156 . 76162) (open-paren 76152 . 76153) (close-paren 76150 . 76151) (symbol 76149 . 76150) (symbol 76137 . 76148) (open-paren 76136 . 76137) (symbol 76126 . 76135) (BOOL 76121 . 76125) (symbol 76114 . 76120) (close-paren 76111 . 76112) (punctuation 76090 . 76091) (symbol 76086 . 76089) (punctuation 76084 . 76085) (symbol 76082 . 76083) (punctuation 76080 . 76081) (punctuation 76079 . 76080) (semantic-list 76073 . 76078) (symbol 76062 . 76072) (punctuation 76060 . 76061) (punctuation 76059 . 76060) (semantic-list 76053 . 76058) (symbol 76045 . 76052) (RETURN 76038 . 76044) (open-paren 75990 . 75991) (close-paren 75988 . 75989) (symbol 75987 . 75988) (punctuation 75986 . 75987) (VOID 75981 . 75985) (open-paren 75980 . 75981) (symbol 75966 . 75979) (symbol 75954 . 75965) (symbol 75947 . 75953) (punctuation 75089 . 75090) (close-paren 75088 . 75089) (punctuation 75087 . 75088) (VOID 75082 . 75086) (open-paren 75081 . 75082) (symbol 75067 . 75080) (symbol 75055 . 75066) (EXTERN 75048 . 75054) (punctuation 75045 . 75046) (close-paren 75027 . 75028) (open-paren 74968 . 74969) (symbol 74952 . 74965) (STRUCT 74945 . 74951) (punctuation 74942 . 74943) (close-paren 74924 . 74925) (open-paren 74786 . 74787) (symbol 74287 . 74299) (STRUCT 74280 . 74286) (punctuation 74174 . 74175) (close-paren 74156 . 74157) (open-paren 72365 . 72366) (symbol 72353 . 72364) (STRUCT 72346 . 72352) (close-paren 72343 . 72344) (punctuation 72341 . 72342) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 72334 . 72341) (punctuation 72332 . 72333) (semantic-list 72289 . 72331) (RETURN 72282 . 72288) (open-paren 72278 . 72279) (close-paren 72276 . 72277) (symbol 72275 . 72276) (symbol 72264 . 72274) (open-paren 72263 . 72264) (symbol 72249 . 72262) (symbol 72238 . 72248) (symbol 72231 . 72237) (close-paren 72169 . 72170) (punctuation 72164 . 72165) (semantic-list 72135 . 72163) (punctuation 72133 . 72134) (semantic-list 72124 . 72132) (RETURN 72117 . 72123) (open-paren 72113 . 72114) (close-paren 72111 . 72112) (symbol 72110 . 72111) (symbol 72099 . 72109) (punctuation 72097 . 72098) (symbol 72096 . 72097) (symbol 72085 . 72095) (open-paren 72084 . 72085) (symbol 72069 . 72083) (symbol 72058 . 72068) (symbol 72051 . 72057) (punctuation 71595 . 71596) (close-paren 71594 . 71595) (number 71591 . 71593) (punctuation 71589 . 71590) (symbol 71571 . 71588) (open-paren 71569 . 71570) (symbol 71551 . 71568) (ENUM 71546 . 71550) (close-paren 71488 . 71489) (punctuation 71480 . 71481) (punctuation 71479 . 71480) (RETURN 71464 . 71470) (open-paren 71460 . 71461) (close-paren 71458 . 71459) (symbol 71457 . 71458) (punctuation 71456 . 71457) (symbol 71440 . 71455) (STRUCT 71433 . 71439) (open-paren 71432 . 71433) (symbol 71416 . 71431) (symbol 71406 . 71415) (symbol 71399 . 71405) (close-paren 71354 . 71355) (punctuation 71341 . 71342) (punctuation 71340 . 71341) (RETURN 71326 . 71332) (open-paren 71322 . 71323) (close-paren 71320 . 71321) (symbol 71317 . 71320) (symbol 71307 . 71316) (punctuation 71305 . 71306) (symbol 71304 . 71305) (punctuation 71303 . 71304) (symbol 71287 . 71302) (STRUCT 71280 . 71286) (open-paren 71279 . 71280) (symbol 71269 . 71278) (symbol 71257 . 71268) (symbol 71250 . 71256) (close-paren 71177 . 71178) (number 71173 . 71174) (punctuation 71171 . 71172) (punctuation 71165 . 71166) (number 71163 . 71164) (punctuation 71147 . 71148) (punctuation 71146 . 71147) (RETURN 71132 . 71138) (open-paren 71128 . 71129) (close-paren 71126 . 71127) (symbol 71123 . 71126) (symbol 71113 . 71122) (punctuation 71111 . 71112) (symbol 71110 . 71111) (punctuation 71109 . 71110) (symbol 71093 . 71108) (STRUCT 71086 . 71092) (open-paren 71085 . 71086) (symbol 71074 . 71084) (symbol 71062 . 71073) (symbol 71055 . 71061) (close-paren 70991 . 70992) (punctuation 70983 . 70984) (number 70981 . 70982) (punctuation 70965 . 70966) (punctuation 70964 . 70965) (RETURN 70950 . 70956) (open-paren 70946 . 70947) (close-paren 70944 . 70945) (symbol 70941 . 70944) (symbol 70931 . 70940) (punctuation 70929 . 70930) (symbol 70928 . 70929) (punctuation 70927 . 70928) (symbol 70911 . 70926) (STRUCT 70904 . 70910) (open-paren 70903 . 70904) (symbol 70894 . 70902) (symbol 70882 . 70893) (symbol 70875 . 70881) (close-paren 70724 . 70725) (punctuation 70722 . 70723) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 70699 . 70705) ("type" symbol "Lisp_Vectorlike" 70682 . 70697) ("a" symbol "a" 70679 . 70680)))) 70671 . 70722) (RETURN 70664 . 70670) (punctuation 70660 . 70661) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 70643 . 70655)))) 70634 . 70660) (open-paren 70630 . 70631) (close-paren 70628 . 70629) (symbol 70627 . 70628) (symbol 70615 . 70626) (open-paren 70614 . 70615) (symbol 70602 . 70613) (punctuation 70600 . 70601) (symbol 70584 . 70599) (STRUCT 70577 . 70583) (symbol 70570 . 70576) (close-paren 70567 . 70568) (RETURN 70524 . 70530) (open-paren 70520 . 70521) (close-paren 70518 . 70519) (symbol 70517 . 70518) (symbol 70505 . 70516) (open-paren 70504 . 70505) (symbol 70491 . 70503) (BOOL 70486 . 70490) (symbol 70479 . 70485) (punctuation 70476 . 70477) (close-paren 70475 . 70476) (symbol 70464 . 70475) (punctuation 70462 . 70463) (punctuation 70461 . 70462) (semantic-list 70430 . 70460) (symbol 70421 . 70429) (open-paren 70420 . 70421) (symbol 70413 . 70419) (punctuation 70369 . 70370) (close-paren 70351 . 70352) (open-paren 68115 . 68116) (symbol 68099 . 68114) (STRUCT 68092 . 68098) (punctuation 68089 . 68090) (close-paren 68088 . 68089) (open-paren 67622 . 67623) (symbol 67606 . 67621) (STRUCT 67599 . 67605) (close-paren 67233 . 67234) (punctuation 67231 . 67232) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 67227 . 67230)))) 67201 . 67231) (RETURN 67194 . 67200) (open-paren 67190 . 67191) (close-paren 67188 . 67189) (symbol 67185 . 67188) (symbol 67173 . 67184) (open-paren 67172 . 67173) (close-paren 67170 . 67171) (symbol 67153 . 67170) (open-paren 67152 . 67153) (INT 67148 . 67151) (symbol 67141 . 67147) (close-paren 66917 . 66918) (punctuation 66915 . 66916) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 66911 . 66914)))) 66880 . 66915) (RETURN 66873 . 66879) (open-paren 66869 . 66870) (close-paren 66867 . 66868) (symbol 66864 . 66867) (symbol 66852 . 66863) (open-paren 66851 . 66852) (close-paren 66849 . 66850) (symbol 66827 . 66849) (open-paren 66826 . 66827) (INT 66822 . 66825) (symbol 66815 . 66821) (close-paren 66648 . 66649) (punctuation 66610 . 66611) (punctuation 66609 . 66610) (symbol 66600 . 66608) (punctuation 66599 . 66600) (symbol 66598 . 66599) (punctuation 66597 . 66598) (symbol 66596 . 66597) (punctuation 66595 . 66596) (punctuation 66594 . 66595) (semantic-list 66589 . 66594) (symbol 66581 . 66588) (RETURN 66574 . 66580) (open-paren 66570 . 66571) (close-paren 66568 . 66569) (symbol 66565 . 66568) (symbol 66553 . 66564) (open-paren 66552 . 66553) (symbol 66515 . 66551) (BOOL 66510 . 66514) (symbol 66503 . 66509) (close-paren 66439 . 66440) (punctuation 66418 . 66419) (punctuation 66417 . 66418) (symbol 66408 . 66416) (punctuation 66407 . 66408) (symbol 66406 . 66407) (punctuation 66405 . 66406) (symbol 66404 . 66405) (punctuation 66403 . 66404) (punctuation 66402 . 66403) (semantic-list 66397 . 66402) (symbol 66389 . 66396) (RETURN 66382 . 66388) (open-paren 66378 . 66379) (close-paren 66376 . 66377) (symbol 66373 . 66376) (symbol 66361 . 66372) (open-paren 66360 . 66361) (symbol 66342 . 66359) (BOOL 66337 . 66341) (symbol 66330 . 66336) (close-paren 66275 . 66276) (punctuation 66268 . 66269) (symbol 66267 . 66268) (punctuation 66266 . 66267) (symbol 66265 . 66266) (punctuation 66264 . 66265) (punctuation 66263 . 66264) (semantic-list 66258 . 66263) (symbol 66250 . 66257) (RETURN 66243 . 66249) (open-paren 66239 . 66240) (close-paren 66237 . 66238) (symbol 66234 . 66237) (symbol 66222 . 66233) (open-paren 66221 . 66222) (symbol 66209 . 66220) (symbol 66197 . 66208) (symbol 66190 . 66196) (close-paren 66187 . 66188) (punctuation 66177 . 66178) (symbol 66174 . 66177) (punctuation 66173 . 66174) (symbol 66172 . 66173) (punctuation 66171 . 66172) (symbol 66170 . 66171) (punctuation 66169 . 66170) (punctuation 66168 . 66169) (symbol 66165 . 66168) (open-paren 66105 . 66106) (close-paren 66103 . 66104) (symbol 66102 . 66103) (punctuation 66101 . 66102) (symbol 66092 . 66100) (UNION 66086 . 66091) (punctuation 66084 . 66085) (symbol 66081 . 66084) (punctuation 66080 . 66081) (symbol 66068 . 66079) (STRUCT 66061 . 66067) (open-paren 66060 . 66061) (symbol 66045 . 66059) (VOID 66040 . 66044) (symbol 66033 . 66039) (close-paren 66031 . 66032) (punctuation 66021 . 66022) (symbol 66018 . 66021) (punctuation 66017 . 66018) (symbol 66016 . 66017) (punctuation 66015 . 66016) (symbol 66014 . 66015) (punctuation 66013 . 66014) (punctuation 66012 . 66013) (symbol 66009 . 66012) (open-paren 65949 . 65950) (close-paren 65947 . 65948) (symbol 65946 . 65947) (punctuation 65945 . 65946) (symbol 65921 . 65944) (STRUCT 65914 . 65920) (punctuation 65912 . 65913) (symbol 65909 . 65912) (punctuation 65908 . 65909) (symbol 65896 . 65907) (STRUCT 65889 . 65895) (open-paren 65888 . 65889) (symbol 65873 . 65887) (VOID 65868 . 65872) (symbol 65861 . 65867) (close-paren 65859 . 65860) (punctuation 65847 . 65848) (symbol 65844 . 65847) (punctuation 65843 . 65844) (symbol 65842 . 65843) (punctuation 65841 . 65842) (symbol 65840 . 65841) (punctuation 65839 . 65840) (punctuation 65838 . 65839) (symbol 65835 . 65838) (open-paren 65776 . 65777) (close-paren 65774 . 65775) (symbol 65773 . 65774) (punctuation 65772 . 65773) (symbol 65760 . 65771) (STRUCT 65753 . 65759) (punctuation 65751 . 65752) (symbol 65748 . 65751) (punctuation 65747 . 65748) (symbol 65735 . 65746) (STRUCT 65728 . 65734) (open-paren 65727 . 65728) (symbol 65710 . 65726) (VOID 65705 . 65709) (symbol 65698 . 65704) (close-paren 65695 . 65696) (punctuation 65693 . 65694) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 65691 . 65692) ("sym" symbol "sym" 65686 . 65689)))) 65663 . 65693) (open-paren 65659 . 65660) (close-paren 65657 . 65658) (symbol 65656 . 65657) (symbol 65644 . 65655) (punctuation 65642 . 65643) (symbol 65639 . 65642) (punctuation 65638 . 65639) (symbol 65626 . 65637) (STRUCT 65619 . 65625) (open-paren 65618 . 65619) (close-paren 65616 . 65617) (symbol 65602 . 65616) (open-paren 65601 . 65602) (VOID 65596 . 65600) (symbol 65589 . 65595) (close-paren 65586 . 65587) (punctuation 65580 . 65581) (symbol 65577 . 65580) (punctuation 65576 . 65577) (symbol 65575 . 65576) (punctuation 65574 . 65575) (symbol 65573 . 65574) (punctuation 65572 . 65573) (punctuation 65571 . 65572) (symbol 65568 . 65571) (RETURN 65561 . 65567) (open-paren 65486 . 65487) (close-paren 65484 . 65485) (symbol 65481 . 65484) (punctuation 65480 . 65481) (symbol 65468 . 65479) (STRUCT 65461 . 65467) (open-paren 65460 . 65461) (symbol 65449 . 65459) (punctuation 65447 . 65448) (symbol 65438 . 65446) (UNION 65432 . 65437) (symbol 65425 . 65431) (close-paren 65423 . 65424) (punctuation 65417 . 65418) (symbol 65414 . 65417) (punctuation 65413 . 65414) (symbol 65412 . 65413) (punctuation 65411 . 65412) (symbol 65410 . 65411) (punctuation 65409 . 65410) (punctuation 65408 . 65409) (symbol 65405 . 65408) (RETURN 65398 . 65404) (open-paren 65323 . 65324) (close-paren 65321 . 65322) (symbol 65318 . 65321) (punctuation 65317 . 65318) (symbol 65305 . 65316) (STRUCT 65298 . 65304) (open-paren 65297 . 65298) (symbol 65286 . 65296) (punctuation 65284 . 65285) (symbol 65260 . 65283) (STRUCT 65253 . 65259) (symbol 65246 . 65252) (close-paren 65244 . 65245) (punctuation 65236 . 65237) (symbol 65233 . 65236) (punctuation 65232 . 65233) (symbol 65231 . 65232) (punctuation 65230 . 65231) (symbol 65229 . 65230) (punctuation 65228 . 65229) (punctuation 65227 . 65228) (symbol 65224 . 65227) (RETURN 65217 . 65223) (open-paren 65141 . 65142) (close-paren 65139 . 65140) (symbol 65136 . 65139) (punctuation 65135 . 65136) (symbol 65123 . 65134) (STRUCT 65116 . 65122) (open-paren 65115 . 65116) (symbol 65102 . 65114) (punctuation 65100 . 65101) (symbol 65088 . 65099) (STRUCT 65081 . 65087) (symbol 65074 . 65080) (close-paren 65071 . 65072) (punctuation 65069 . 65070) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 65065 . 65068)))) 65046 . 65069) (RETURN 65039 . 65045) (open-paren 65035 . 65036) (close-paren 65033 . 65034) (symbol 65030 . 65033) (punctuation 65029 . 65030) (symbol 65017 . 65028) (STRUCT 65010 . 65016) (open-paren 65009 . 65010) (close-paren 65007 . 65008) (symbol 64997 . 65007) (open-paren 64996 . 64997) (symbol 64984 . 64995) (symbol 64977 . 64983) (close-paren 64148 . 64149) (punctuation 64146 . 64147) (semantic-list 64071 . 64146) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 64064 . 64070) (open-paren 64060 . 64061) (close-paren 64058 . 64059) (symbol 64056 . 64058) (punctuation 64055 . 64056) (symbol 64039 . 64054) (STRUCT 64032 . 64038) (open-paren 64031 . 64032) (symbol 64008 . 64030) (INT 64004 . 64007) (symbol 63997 . 64003) (punctuation 63929 . 63930) (close-paren 63928 . 63929) (semantic-list 63915 . 63928) (SIZEOF 63908 . 63914) (punctuation 63906 . 63907) (symbol 63884 . 63905) (punctuation 63882 . 63883) (symbol 63870 . 63881) (punctuation 63868 . 63869) (punctuation 63867 . 63868) (semantic-list 63827 . 63865) (symbol 63818 . 63826) (open-paren 63817 . 63818) (symbol 63810 . 63816) (punctuation 63808 . 63809) (close-paren 63807 . 63808) (semantic-list 63794 . 63807) (SIZEOF 63787 . 63793) (punctuation 63785 . 63786) (symbol 63759 . 63784) (punctuation 63757 . 63758) (symbol 63745 . 63756) (punctuation 63743 . 63744) (punctuation 63742 . 63743) (semantic-list 63708 . 63740) (symbol 63699 . 63707) (open-paren 63698 . 63699) (symbol 63691 . 63697) (punctuation 63689 . 63690) (close-paren 63688 . 63689) (symbol 63677 . 63688) (punctuation 63675 . 63676) (punctuation 63674 . 63675) (semantic-list 63641 . 63673) (symbol 63632 . 63640) (open-paren 63631 . 63632) (symbol 63624 . 63630) (punctuation 63580 . 63581) (close-paren 63579 . 63580) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 63546 . 63565) ("type" STRUCT "struct" 63539 . 63545)))) 63524 . 63576) (punctuation 63522 . 63523) (symbol 63500 . 63521) (punctuation 63353 . 63354) (semantic-list #("(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 63329 . 63344) ("type" STRUCT "struct" 63322 . 63328)))) 63307 . 63353) (punctuation 63305 . 63306) (symbol 63279 . 63304) (open-paren 63107 . 63108) (symbol 63085 . 63104) (ENUM 63080 . 63084) (close-paren 63077 . 63078) (punctuation 63075 . 63076) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 63058 . 63064) ("type" symbol "Lisp_Vectorlike" 63041 . 63056) ("a" symbol "a" 63038 . 63039)))) 63030 . 63075) (RETURN 63023 . 63029) (punctuation 63019 . 63020) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 63009 . 63014)))) 63000 . 63019) (open-paren 62996 . 62997) (close-paren 62994 . 62995) (symbol 62993 . 62994) (symbol 62981 . 62992) (open-paren 62980 . 62981) (symbol 62974 . 62979) (punctuation 62972 . 62973) (symbol 62962 . 62971) (STRUCT 62955 . 62961) (symbol 62948 . 62954) (close-paren 62945 . 62946) (RETURN 62908 . 62914) (open-paren 62904 . 62905) (close-paren 62902 . 62903) (symbol 62901 . 62902) (symbol 62889 . 62900) (open-paren 62888 . 62889) (symbol 62882 . 62887) (BOOL 62877 . 62881) (symbol 62870 . 62876) (punctuation 62867 . 62868) (close-paren 62866 . 62867) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 62849 . 62855)))) 62838 . 62866) (open-paren 62837 . 62838) (symbol 62830 . 62836) (punctuation 62828 . 62829) (close-paren 62810 . 62811) (semantic-list "(GCALIGNMENT)" 62784 . 62807) (symbol "alignas" 62784 . 62807) (CHAR "char" 62784 . 62807) (open-paren 61796 . 61797) (symbol 61784 . 61793) (STRUCT 61777 . 61783) (close-paren 61636 . 61637) (ELSE 61596 . 61600) (punctuation 61575 . 61576) (punctuation 61574 . 61575) (semantic-list 61570 . 61574) (semantic-list 61458 . 61524) (IF 61455 . 61457) (open-paren 61451 . 61452) (close-paren 61449 . 61450) (symbol 61446 . 61449) (symbol 61434 . 61445) (punctuation 61432 . 61433) (symbol 61429 . 61432) (INT 61425 . 61428) (punctuation 61423 . 61424) (symbol 61421 . 61423) (symbol 61409 . 61420) (open-paren 61408 . 61409) (symbol 61393 . 61407) (VOID 61388 . 61392) (symbol 61381 . 61387) (close-paren 61244 . 61245) (punctuation 61242 . 61243) (semantic-list 61156 . 61242) (RETURN 61149 . 61155) (open-paren 61145 . 61146) (close-paren 61143 . 61144) (symbol 61140 . 61143) (INT 61136 . 61139) (punctuation 61134 . 61135) (symbol 61132 . 61134) (symbol 61120 . 61131) (open-paren 61119 . 61120) (symbol 61104 . 61118) (symbol 61092 . 61103) (symbol 61085 . 61091) (close-paren 60965 . 60966) (RETURN 60953 . 60959) (punctuation 60948 . 60949) (semantic-list 60912 . 60948) (WHILE 60906 . 60911) (semantic-list 60678 . 60903) (DO 60671 . 60673) (open-paren 60610 . 60611) (close-paren 60608 . 60609) (symbol 60605 . 60608) (symbol 60595 . 60604) (punctuation 60593 . 60594) (symbol 60591 . 60593) (symbol 60579 . 60590) (open-paren 60578 . 60579) (symbol 60557 . 60577) (symbol 60545 . 60556) (symbol 60538 . 60544) (close-paren 60535 . 60536) (punctuation 60533 . 60534) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 60506 . 60512) ("type" symbol "Lisp_Vectorlike" 60489 . 60504) ("a" symbol "a" 60486 . 60487)))) 60478 . 60533) (RETURN 60471 . 60477) (punctuation 60467 . 60468) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 60446 . 60462)))) 60437 . 60467) (open-paren 60433 . 60434) (close-paren 60431 . 60432) (symbol 60430 . 60431) (symbol 60418 . 60429) (open-paren 60417 . 60418) (symbol 60401 . 60416) (punctuation 60399 . 60400) (symbol 60379 . 60398) (STRUCT 60372 . 60378) (symbol 60365 . 60371) (close-paren 60362 . 60363) (RETURN 60315 . 60321) (open-paren 60311 . 60312) (close-paren 60309 . 60310) (symbol 60308 . 60309) (symbol 60296 . 60307) (open-paren 60295 . 60296) (symbol 60278 . 60294) (BOOL 60273 . 60277) (symbol 60266 . 60272) (punctuation 60263 . 60264) (close-paren 60245 . 60246) (open-paren 59484 . 59485) (symbol 59462 . 59481) (STRUCT 59455 . 59461) (close-paren 59452 . 59453) (punctuation 59450 . 59451) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 59427 . 59433) ("type" symbol "Lisp_Vectorlike" 59410 . 59425) ("a" symbol "a" 59407 . 59408)))) 59399 . 59450) (RETURN 59392 . 59398) (punctuation 59388 . 59389) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 59371 . 59383)))) 59362 . 59388) (open-paren 59358 . 59359) (close-paren 59356 . 59357) (symbol 59355 . 59356) (symbol 59343 . 59354) (open-paren 59342 . 59343) (symbol 59330 . 59341) (punctuation 59328 . 59329) (symbol 59312 . 59327) (STRUCT 59305 . 59311) (symbol 59298 . 59304) (close-paren 59295 . 59296) (RETURN 59252 . 59258) (open-paren 59248 . 59249) (close-paren 59246 . 59247) (symbol 59245 . 59246) (symbol 59233 . 59244) (open-paren 59232 . 59233) (symbol 59219 . 59231) (BOOL 59214 . 59218) (symbol 59207 . 59213) (punctuation 59204 . 59205) (close-paren 59186 . 59187) (open-paren 58136 . 58137) (symbol 58118 . 58133) (STRUCT 58111 . 58117) (punctuation 58108 . 58109) (close-paren 58107 . 58108) (number 58106 . 58107) (open-paren 58105 . 58106) (symbol 58093 . 58105) (INT 58089 . 58092) (CONST 58083 . 58088) (EXTERN 58076 . 58082) (punctuation 58073 . 58074) (close-paren 58072 . 58073) (number 58068 . 58069) (punctuation 58066 . 58067) (symbol 58046 . 58065) (punctuation 58040 . 58041) (number 58039 . 58040) (punctuation 58037 . 58038) (symbol 58017 . 58036) (punctuation 58011 . 58012) (number 58010 . 58011) (punctuation 58008 . 58009) (symbol 57988 . 58007) (punctuation 57982 . 57983) (number 57981 . 57982) (punctuation 57979 . 57980) (symbol 57959 . 57978) (open-paren 57953 . 57954) (symbol 57933 . 57950) (ENUM 57928 . 57932) (close-paren 56003 . 56004) (number 55991 . 55992) (punctuation 55906 . 55907) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55894 . 55895)))) 55885 . 55906) (open-paren 55881 . 55882) (close-paren 55879 . 55880) (symbol 55873 . 55879) (symbol 55863 . 55872) (punctuation 55861 . 55862) (symbol 55860 . 55861) (punctuation 55859 . 55860) (VOID 55854 . 55858) (open-paren 55853 . 55854) (symbol 55844 . 55852) (VOID 55839 . 55843) (symbol 55832 . 55838) (punctuation 55704 . 55705) (close-paren 55703 . 55704) (number 55701 . 55702) (punctuation 55699 . 55700) (punctuation 55698 . 55699) (symbol 55686 . 55697) (punctuation 55684 . 55685) (punctuation 55683 . 55684) (number 55681 . 55682) (punctuation 55679 . 55680) (punctuation 55678 . 55679) (symbol 55672 . 55677) (punctuation 55670 . 55671) (symbol 55658 . 55669) (open-paren 55656 . 55657) (ENUM 55651 . 55655) (close-paren 55297 . 55298) (punctuation 55275 . 55276) (punctuation 55274 . 55275) (semantic-list 55267 . 55274) (symbol 55259 . 55266) (punctuation 55255 . 55256) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 55220 . 55221)))) 55211 . 55255) (open-paren 55067 . 55068) (close-paren 55065 . 55066) (symbol 55062 . 55065) (symbol 55050 . 55061) (punctuation 55048 . 55049) (symbol 55045 . 55048) (symbol 55035 . 55044) (punctuation 55033 . 55034) (symbol 55028 . 55033) (symbol 55016 . 55027) (open-paren 55015 . 55016) (symbol 55007 . 55014) (VOID 55002 . 55006) (symbol 54995 . 55001) (close-paren 54992 . 54993) (punctuation 54970 . 54971) (punctuation 54969 . 54970) (semantic-list 54962 . 54969) (symbol 54954 . 54961) (punctuation 54950 . 54951) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54918 . 54919)))) 54909 . 54950) (open-paren 54905 . 54906) (close-paren 54903 . 54904) (symbol 54900 . 54903) (symbol 54888 . 54899) (punctuation 54886 . 54887) (symbol 54883 . 54886) (symbol 54873 . 54882) (punctuation 54871 . 54872) (symbol 54866 . 54871) (symbol 54854 . 54865) (open-paren 54853 . 54854) (symbol 54848 . 54852) (VOID 54843 . 54847) (symbol 54836 . 54842) (close-paren 54833 . 54834) (punctuation 54815 . 54816) (punctuation 54813 . 54814) (symbol 54808 . 54812) (punctuation 54807 . 54808) (symbol 54801 . 54807) (punctuation 54800 . 54801) (punctuation 54799 . 54800) (semantic-list 54792 . 54799) (symbol 54784 . 54791) (RETURN 54777 . 54783) (open-paren 54705 . 54706) (close-paren 54703 . 54704) (symbol 54698 . 54703) (symbol 54686 . 54697) (open-paren 54685 . 54686) (symbol 54676 . 54684) (symbol 54666 . 54675) (symbol 54659 . 54665) (close-paren 54656 . 54657) (punctuation 54640 . 54641) (punctuation 54639 . 54640) (semantic-list 54632 . 54639) (symbol 54624 . 54631) (punctuation 54622 . 54623) (RETURN 54615 . 54621) (open-paren 54611 . 54612) (close-paren 54609 . 54610) (symbol 54606 . 54609) (symbol 54596 . 54605) (punctuation 54594 . 54595) (symbol 54589 . 54594) (symbol 54577 . 54588) (open-paren 54576 . 54577) (symbol 54566 . 54575) (punctuation 54564 . 54565) (symbol 54552 . 54563) (symbol 54545 . 54551) (close-paren 54542 . 54543) (punctuation 54526 . 54527) (punctuation 54525 . 54526) (semantic-list 54518 . 54525) (symbol 54510 . 54517) (RETURN 54503 . 54509) (open-paren 54499 . 54500) (close-paren 54497 . 54498) (symbol 54494 . 54497) (symbol 54484 . 54493) (punctuation 54482 . 54483) (symbol 54477 . 54482) (symbol 54465 . 54476) (open-paren 54464 . 54465) (symbol 54459 . 54463) (symbol 54447 . 54458) (symbol 54440 . 54446) (close-paren 54386 . 54387) (punctuation 54384 . 54385) (semantic-list 54346 . 54384) (punctuation 54344 . 54345) (punctuation 54342 . 54343) (punctuation 54341 . 54342) (symbol 54336 . 54340) (punctuation 54335 . 54336) (ELSE 54326 . 54330) (punctuation 54322 . 54323) (semantic-list 54291 . 54322) (punctuation 54289 . 54290) (punctuation 54288 . 54289) (number 54286 . 54287) (punctuation 54284 . 54285) (punctuation 54283 . 54284) (symbol 54278 . 54282) (punctuation 54277 . 54278) (semantic-list 54269 . 54272) (IF 54266 . 54268) (punctuation 54261 . 54262) (punctuation 54203 . 54204) (punctuation 54201 . 54202) (symbol 54196 . 54200) (open-paren 54120 . 54121) (close-paren 54118 . 54119) (symbol 54117 . 54118) (BOOL 54112 . 54116) (punctuation 54110 . 54111) (symbol 54109 . 54110) (symbol 54099 . 54108) (punctuation 54097 . 54098) (symbol 54096 . 54097) (symbol 54084 . 54095) (open-paren 54083 . 54084) (symbol 54067 . 54082) (VOID 54062 . 54066) (symbol 54055 . 54061) (close-paren 54022 . 54023) (punctuation 54014 . 54015) (symbol 54011 . 54013) (punctuation 54009 . 54010) (semantic-list 54002 . 54008) (symbol 53983 . 54001) (RETURN 53976 . 53982) (open-paren 53972 . 53973) (close-paren 53970 . 53971) (symbol 53969 . 53970) (symbol 53959 . 53968) (punctuation 53957 . 53958) (symbol 53956 . 53957) (symbol 53944 . 53955) (open-paren 53943 . 53944) (symbol 53927 . 53942) (symbol 53915 . 53926) (symbol 53908 . 53914) (close-paren 53905 . 53906) (punctuation 53903 . 53904) (semantic-list 53797 . 53903) (punctuation 53795 . 53796) (punctuation 53794 . 53795) (RETURN 53787 . 53793) (open-paren 53735 . 53736) (close-paren 53733 . 53734) (symbol 53732 . 53733) (symbol 53722 . 53731) (punctuation 53720 . 53721) (symbol 53719 . 53720) (symbol 53707 . 53718) (open-paren 53706 . 53707) (symbol 53687 . 53705) (BOOL 53682 . 53686) (symbol 53675 . 53681) (close-paren 53636 . 53637) (semantic-list 53596 . 53613) (RETURN 53589 . 53595) (open-paren 53585 . 53586) (close-paren 53583 . 53584) (symbol 53582 . 53583) (symbol 53570 . 53581) (open-paren 53569 . 53570) (symbol 53546 . 53568) (punctuation 53544 . 53545) (CHAR 53539 . 53543) (UNSIGNED 53530 . 53538) (symbol 53523 . 53529) (close-paren 53520 . 53521) (punctuation 53513 . 53514) (punctuation 53512 . 53513) (semantic-list 53509 . 53512) (symbol 53496 . 53508) (RETURN 53489 . 53495) (open-paren 53485 . 53486) (close-paren 53483 . 53484) (symbol 53482 . 53483) (symbol 53470 . 53481) (open-paren 53469 . 53470) (symbol 53452 . 53468) (punctuation 53450 . 53451) (symbol 53440 . 53449) (symbol 53433 . 53439) (close-paren 53430 . 53431) (RETURN 53417 . 53423) (open-paren 53347 . 53348) (close-paren 53345 . 53346) (symbol 53344 . 53345) (symbol 53332 . 53343) (open-paren 53331 . 53332) (symbol 53314 . 53330) (symbol 53304 . 53313) (symbol 53297 . 53303) (close-paren 53294 . 53295) (punctuation 53292 . 53293) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 53268 . 53274) ("type" symbol "Lisp_Vectorlike" 53251 . 53266) ("a" symbol "a" 53248 . 53249)))) 53240 . 53292) (RETURN 53233 . 53239) (punctuation 53229 . 53230) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 53211 . 53224)))) 53202 . 53229) (open-paren 53198 . 53199) (close-paren 53196 . 53197) (symbol 53195 . 53196) (symbol 53183 . 53194) (open-paren 53182 . 53183) (symbol 53169 . 53181) (punctuation 53167 . 53168) (symbol 53150 . 53166) (STRUCT 53143 . 53149) (symbol 53136 . 53142) (close-paren 53133 . 53134) (semantic-list 53108 . 53111) (open-paren 53078 . 53079) (close-paren 53076 . 53077) (symbol 53075 . 53076) (symbol 53063 . 53074) (open-paren 53062 . 53063) (symbol 53044 . 53061) (VOID 53039 . 53043) (symbol 53032 . 53038) (close-paren 53029 . 53030) (RETURN 52985 . 52991) (open-paren 52981 . 52982) (close-paren 52979 . 52980) (symbol 52978 . 52979) (symbol 52966 . 52977) (open-paren 52965 . 52966) (symbol 52951 . 52964) (BOOL 52946 . 52950) (symbol 52939 . 52945) (close-paren 52936 . 52937) (punctuation 52907 . 52908) (semantic-list 52868 . 52906) (RETURN 52861 . 52867) (open-paren 52782 . 52783) (close-paren 52780 . 52781) (symbol 52776 . 52780) (symbol 52766 . 52775) (open-paren 52765 . 52766) (symbol 52747 . 52764) (symbol 52737 . 52746) (symbol 52730 . 52736) (close-paren 52727 . 52728) (punctuation 52705 . 52706) (semantic-list 52673 . 52704) (RETURN 52666 . 52672) (open-paren 52587 . 52588) (close-paren 52585 . 52586) (symbol 52581 . 52585) (symbol 52571 . 52580) (open-paren 52570 . 52571) (symbol 52552 . 52569) (symbol 52542 . 52551) (symbol 52535 . 52541) (punctuation 52456 . 52457) (close-paren 52455 . 52456) (semantic-list 52439 . 52452) (SIZEOF 52432 . 52438) (punctuation 52430 . 52431) (symbol 52420 . 52429) (punctuation 52414 . 52415) (semantic-list 52383 . 52414) (symbol 52374 . 52382) (punctuation 52372 . 52373) (symbol 52355 . 52371) (punctuation 52349 . 52350) (semantic-list 52319 . 52349) (symbol 52310 . 52318) (punctuation 52308 . 52309) (symbol 52296 . 52307) (open-paren 52290 . 52291) (ENUM 52283 . 52287) (punctuation 51657 . 51658) (close-paren 51639 . 51640) (open-paren 51166 . 51167) (symbol 51147 . 51163) (STRUCT 51140 . 51146) (close-paren 51062 . 51063) (semantic-list 50872 . 51061) (ELSE 50863 . 50867) (RETURN 50847 . 50853) (semantic-list 50823 . 50842) (IF 50820 . 50822) (open-paren 50816 . 50817) (close-paren 50814 . 50815) (symbol 50810 . 50814) (INT 50806 . 50809) (punctuation 50804 . 50805) (symbol 50803 . 50804) (symbol 50791 . 50802) (open-paren 50790 . 50791) (symbol 50776 . 50789) (BOOL 50771 . 50775) (symbol 50764 . 50770) (close-paren 50706 . 50707) (punctuation 50704 . 50705) (semantic-list 50593 . 50704) (RETURN 50586 . 50592) (open-paren 50477 . 50478) (close-paren 50475 . 50476) (symbol 50471 . 50475) (symbol 50461 . 50470) (ENUM 50456 . 50460) (punctuation 50454 . 50455) (symbol 50453 . 50454) (punctuation 50452 . 50453) (symbol 50434 . 50451) (UNION 50428 . 50433) (open-paren 50427 . 50428) (symbol 50408 . 50426) (BOOL 50403 . 50407) (symbol 50396 . 50402) (close-paren 50347 . 50348) (punctuation 50345 . 50346) (semantic-list 50226 . 50345) (RETURN 50219 . 50225) (open-paren 50180 . 50181) (close-paren 50178 . 50179) (symbol 50177 . 50178) (punctuation 50176 . 50177) (symbol 50164 . 50175) (STRUCT 50157 . 50163) (open-paren 50156 . 50157) (symbol 50138 . 50155) (symbol 50128 . 50137) (ENUM 50123 . 50127) (symbol 50116 . 50122) (close-paren 50036 . 50037) (semantic-list 50017 . 50020) (open-paren 49993 . 49994) (close-paren 49991 . 49992) (symbol 49990 . 49991) (symbol 49978 . 49989) (open-paren 49977 . 49978) (symbol 49964 . 49976) (VOID 49959 . 49963) (symbol 49952 . 49958) (close-paren 49949 . 49950) (punctuation 49947 . 49948) (semantic-list 49916 . 49947) (punctuation 49914 . 49915) (punctuation 49912 . 49913) (punctuation 49911 . 49912) (semantic-list 49907 . 49910) (symbol 49895 . 49906) (RETURN 49888 . 49894) (open-paren 49884 . 49885) (close-paren 49882 . 49883) (symbol 49881 . 49882) (symbol 49869 . 49880) (open-paren 49868 . 49869) (symbol 49860 . 49867) (BOOL 49855 . 49859) (symbol 49848 . 49854) (close-paren 49845 . 49846) (semantic-list 49814 . 49818) (symbol 49808 . 49813) (RETURN 49801 . 49807) (open-paren 49797 . 49798) (close-paren 49795 . 49796) (symbol 49793 . 49795) (symbol 49781 . 49792) (open-paren 49780 . 49781) (symbol 49773 . 49779) (symbol 49763 . 49772) (symbol 49756 . 49762) (close-paren 49753 . 49754) (RETURN 49740 . 49746) (open-paren 49664 . 49665) (close-paren 49662 . 49663) (symbol 49657 . 49662) (symbol 49645 . 49656) (open-paren 49644 . 49645) (symbol 49638 . 49643) (symbol 49628 . 49637) (symbol 49621 . 49627) (close-paren 49618 . 49619) (punctuation 49616 . 49617) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 49597 . 49603) ("type" symbol "Lisp_Vectorlike" 49580 . 49595) ("a" symbol "a" 49577 . 49578)))) 49569 . 49616) (RETURN 49562 . 49568) (punctuation 49558 . 49559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49542 . 49553)))) 49533 . 49558) (open-paren 49529 . 49530) (close-paren 49527 . 49528) (symbol 49526 . 49527) (symbol 49514 . 49525) (open-paren 49513 . 49514) (symbol 49505 . 49512) (punctuation 49503 . 49504) (symbol 49491 . 49502) (STRUCT 49484 . 49490) (symbol 49477 . 49483) (close-paren 49474 . 49475) (RETURN 49443 . 49449) (open-paren 49439 . 49440) (close-paren 49437 . 49438) (symbol 49436 . 49437) (symbol 49424 . 49435) (open-paren 49423 . 49424) (close-paren 49421 . 49422) (symbol 49410 . 49421) (open-paren 49409 . 49410) (BOOL 49404 . 49408) (symbol 49397 . 49403) (punctuation 49394 . 49395) (close-paren 49376 . 49377) (open-paren 49287 . 49288) (symbol 49273 . 49284) (STRUCT 49266 . 49272) (close-paren 49190 . 49191) (punctuation 49173 . 49174) (symbol 49172 . 49173) (punctuation 49171 . 49172) (symbol 49170 . 49171) (punctuation 49169 . 49170) (punctuation 49168 . 49169) (semantic-list 49160 . 49168) (symbol 49152 . 49159) (punctuation 49148 . 49149) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 49040 . 49056)))) 49031 . 49148) (open-paren 48922 . 48923) (close-paren 48920 . 48921) (symbol 48913 . 48920) (symbol 48903 . 48912) (punctuation 48901 . 48902) (symbol 48895 . 48901) (symbol 48883 . 48894) (open-paren 48882 . 48883) (symbol 48865 . 48881) (VOID 48860 . 48864) (symbol 48853 . 48859) (close-paren 48851 . 48852) (semantic-list 48840 . 48848) (RETURN 48811 . 48817) (open-paren 48807 . 48808) (close-paren 48805 . 48806) (symbol 48799 . 48805) (symbol 48787 . 48798) (open-paren 48786 . 48787) (symbol 48779 . 48785) (symbol 48769 . 48778) (symbol 48762 . 48768) (close-paren 48759 . 48760) (RETURN 48744 . 48750) (punctuation 48698 . 48699) (symbol 48697 . 48698) (punctuation 48696 . 48697) (symbol 48695 . 48696) (punctuation 48694 . 48695) (punctuation 48693 . 48694) (symbol 48692 . 48693) (punctuation 48690 . 48691) (symbol 48685 . 48689) (punctuation 48684 . 48685) (symbol 48683 . 48684) (punctuation 48682 . 48683) (symbol 48681 . 48682) (punctuation 48680 . 48681) (punctuation 48679 . 48680) (symbol 48678 . 48679) (punctuation 48676 . 48677) (number 48674 . 48675) (punctuation 48672 . 48673) (symbol 48662 . 48671) (punctuation 48661 . 48662) (symbol 48660 . 48661) (punctuation 48659 . 48660) (symbol 48658 . 48659) (punctuation 48657 . 48658) (punctuation 48656 . 48657) (symbol 48655 . 48656) (punctuation 48653 . 48654) (symbol 48646 . 48652) (symbol 48636 . 48645) (open-paren 48558 . 48559) (close-paren 48556 . 48557) (symbol 48555 . 48556) (punctuation 48554 . 48555) (symbol 48542 . 48553) (STRUCT 48535 . 48541) (open-paren 48534 . 48535) (symbol 48521 . 48533) (symbol 48511 . 48520) (symbol 48504 . 48510) (close-paren 48411 . 48412) (RETURN 48396 . 48402) (open-paren 48318 . 48319) (close-paren 48316 . 48317) (symbol 48310 . 48316) (symbol 48298 . 48309) (open-paren 48297 . 48298) (symbol 48290 . 48296) (symbol 48280 . 48289) (symbol 48273 . 48279) (close-paren 48271 . 48272) (punctuation 48269 . 48270) (NEW 48266 . 48269) (punctuation 48264 . 48265) (open-paren 48238 . 48239) (close-paren 48236 . 48237) (NEW 48233 . 48236) (CHAR 48228 . 48232) (UNSIGNED 48219 . 48227) (punctuation 48217 . 48218) (symbol 48212 . 48217) (symbol 48202 . 48211) (punctuation 48200 . 48201) (symbol 48194 . 48200) (symbol 48182 . 48193) (open-paren 48181 . 48182) (symbol 48176 . 48180) (VOID 48171 . 48175) (symbol 48164 . 48170) (close-paren 48162 . 48163) (punctuation 48160 . 48161) (RETURN 48132 . 48138) (open-paren 48128 . 48129) (close-paren 48126 . 48127) (symbol 48121 . 48126) (symbol 48111 . 48120) (punctuation 48109 . 48110) (symbol 48103 . 48109) (symbol 48091 . 48102) (open-paren 48090 . 48091) (symbol 48085 . 48089) (CHAR 48080 . 48084) (UNSIGNED 48071 . 48079) (symbol 48064 . 48070) (close-paren 48062 . 48063) (semantic-list 48037 . 48045) (RETURN 48030 . 48036) (open-paren 47984 . 47985) (close-paren 47982 . 47983) (symbol 47976 . 47982) (symbol 47964 . 47975) (open-paren 47963 . 47964) (symbol 47956 . 47962) (punctuation 47954 . 47955) (CHAR 47949 . 47953) (symbol 47942 . 47948) (close-paren 47940 . 47941) (punctuation 47933 . 47934) (symbol 47932 . 47933) (punctuation 47931 . 47932) (symbol 47930 . 47931) (punctuation 47929 . 47930) (punctuation 47928 . 47929) (semantic-list 47920 . 47928) (symbol 47912 . 47919) (RETURN 47905 . 47911) (open-paren 47901 . 47902) (close-paren 47899 . 47900) (symbol 47893 . 47899) (symbol 47881 . 47892) (open-paren 47880 . 47881) (symbol 47874 . 47879) (punctuation 47872 . 47873) (CHAR 47867 . 47871) (UNSIGNED 47858 . 47866) (symbol 47851 . 47857) (close-paren 46365 . 46366) (punctuation 46353 . 46354) (symbol 46352 . 46353) (punctuation 46351 . 46352) (symbol 46350 . 46351) (punctuation 46349 . 46350) (punctuation 46348 . 46349) (semantic-list 46343 . 46348) (symbol 46335 . 46342) (punctuation 46333 . 46334) (punctuation 46332 . 46333) (number 46330 . 46331) (RETURN 46323 . 46329) (open-paren 46319 . 46320) (close-paren 46317 . 46318) (symbol 46314 . 46317) (symbol 46302 . 46313) (open-paren 46301 . 46302) (symbol 46284 . 46300) (BOOL 46279 . 46283) (symbol 46272 . 46278) (close-paren 46227 . 46228) (punctuation 46225 . 46226) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 46206 . 46212) ("type" symbol "Lisp_String" 46193 . 46204) ("a" symbol "a" 46190 . 46191)))) 46182 . 46225) (RETURN 46175 . 46181) (punctuation 46171 . 46172) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 46159 . 46166)))) 46150 . 46171) (open-paren 46146 . 46147) (close-paren 46144 . 46145) (symbol 46143 . 46144) (symbol 46131 . 46142) (open-paren 46130 . 46131) (symbol 46122 . 46129) (punctuation 46120 . 46121) (symbol 46108 . 46119) (STRUCT 46101 . 46107) (symbol 46094 . 46100) (close-paren 46091 . 46092) (semantic-list 46072 . 46075) (open-paren 46048 . 46049) (close-paren 46046 . 46047) (symbol 46045 . 46046) (symbol 46033 . 46044) (open-paren 46032 . 46033) (symbol 46019 . 46031) (VOID 46014 . 46018) (symbol 46007 . 46013) (close-paren 46004 . 46005) (RETURN 45971 . 45977) (open-paren 45967 . 45968) (close-paren 45965 . 45966) (symbol 45964 . 45965) (symbol 45952 . 45963) (open-paren 45951 . 45952) (symbol 45943 . 45950) (BOOL 45938 . 45942) (symbol 45931 . 45937) (punctuation 45928 . 45929) (close-paren 45927 . 45928) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45908 . 45914)))) 45897 . 45927) (open-paren 45896 . 45897) (symbol 45889 . 45895) (punctuation 45887 . 45888) (close-paren 45886 . 45887) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (semantic-list "(GCALIGNMENT)" 45856 . 45878) (symbol "alignas" 45856 . 45878) (CHAR "char" 45856 . 45878) (open-paren 45641 . 45642) (symbol 45629 . 45640) (STRUCT 45622 . 45628) (close-paren 45543 . 45544) (punctuation 45535 . 45536) (semantic-list 45531 . 45534) (symbol 45526 . 45530) (punctuation 45524 . 45525) (semantic-list 45520 . 45523) (symbol 45514 . 45519) (RETURN 45507 . 45513) (open-paren 45503 . 45504) (close-paren 45501 . 45502) (symbol 45500 . 45501) (symbol 45488 . 45499) (open-paren 45487 . 45488) (symbol 45478 . 45486) (symbol 45466 . 45477) (symbol 45459 . 45465) (close-paren 45457 . 45458) (punctuation 45449 . 45450) (semantic-list 45445 . 45448) (symbol 45440 . 45444) (punctuation 45438 . 45439) (semantic-list 45434 . 45437) (symbol 45428 . 45433) (RETURN 45421 . 45427) (open-paren 45417 . 45418) (close-paren 45415 . 45416) (symbol 45414 . 45415) (symbol 45402 . 45413) (open-paren 45401 . 45402) (symbol 45392 . 45400) (symbol 45380 . 45391) (symbol 45373 . 45379) (close-paren 45305 . 45306) (RETURN 45292 . 45298) (semantic-list 45241 . 45252) (IF 45238 . 45240) (RETURN 45219 . 45225) (semantic-list 45203 . 45214) (IF 45200 . 45202) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45176 . 45179) (symbol 45164 . 45175) (symbol 45157 . 45163) (close-paren 45155 . 45156) (RETURN 45142 . 45148) (semantic-list 45091 . 45102) (IF 45088 . 45090) (RETURN 45069 . 45075) (semantic-list 45053 . 45064) (IF 45050 . 45052) (open-paren 45046 . 45047) (close-paren 45044 . 45045) (symbol 45043 . 45044) (symbol 45031 . 45042) (open-paren 45030 . 45031) (symbol 45026 . 45029) (symbol 45014 . 45025) (symbol 45007 . 45013) (close-paren 44939 . 44940) (punctuation 44934 . 44935) (semantic-list 44930 . 44933) (symbol 44920 . 44929) (punctuation 44919 . 44920) (open-paren 44915 . 44916) (close-paren 44913 . 44914) (symbol 44912 . 44913) (symbol 44900 . 44911) (punctuation 44898 . 44899) (symbol 44897 . 44898) (symbol 44885 . 44896) (open-paren 44884 . 44885) (symbol 44876 . 44883) (VOID 44871 . 44875) (symbol 44864 . 44870) (close-paren 44862 . 44863) (punctuation 44857 . 44858) (semantic-list 44853 . 44856) (symbol 44843 . 44852) (punctuation 44842 . 44843) (open-paren 44838 . 44839) (close-paren 44836 . 44837) (symbol 44835 . 44836) (symbol 44823 . 44834) (punctuation 44821 . 44822) (symbol 44820 . 44821) (symbol 44808 . 44819) (open-paren 44807 . 44808) (symbol 44799 . 44806) (VOID 44794 . 44798) (symbol 44787 . 44793) (close-paren 44616 . 44617) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "s" 44599 . 44614) (punctuation "." 44599 . 44614) (symbol "u" 44599 . 44614) (punctuation ">" 44599 . 44614) (punctuation "-" 44599 . 44614) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44612 . 44613)))) 44599 . 44614) (symbol "XCONS" 44599 . 44614) (RETURN 44592 . 44598) (open-paren 44588 . 44589) (close-paren 44586 . 44587) (symbol 44585 . 44586) (symbol 44573 . 44584) (open-paren 44572 . 44573) (close-paren 44570 . 44571) (symbol 44566 . 44570) (open-paren 44565 . 44566) (symbol 44553 . 44564) (symbol 44546 . 44552) (close-paren 44543 . 44544) (punctuation "." 44526 . 44541) (symbol "s" 44526 . 44541) (punctuation "." 44526 . 44541) (symbol "u" 44526 . 44541) (punctuation ">" 44526 . 44541) (punctuation "-" 44526 . 44541) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44539 . 44540)))) 44526 . 44541) (symbol "XCONS" 44526 . 44541) (RETURN 44519 . 44525) (open-paren 44515 . 44516) (close-paren 44513 . 44514) (symbol 44512 . 44513) (symbol 44500 . 44511) (open-paren 44499 . 44500) (close-paren 44497 . 44498) (symbol 44493 . 44497) (open-paren 44492 . 44493) (symbol 44480 . 44491) (symbol 44473 . 44479) (close-paren 44434 . 44435) (punctuation 44428 . 44429) (symbol 44427 . 44428) (punctuation 44426 . 44427) (symbol 44425 . 44426) (punctuation 44424 . 44425) (symbol 44423 . 44424) (punctuation 44422 . 44423) (punctuation 44421 . 44422) (semantic-list 44418 . 44421) (symbol 44412 . 44417) (punctuation 44411 . 44412) (RETURN 44404 . 44410) (open-paren 44400 . 44401) (close-paren 44398 . 44399) (symbol 44397 . 44398) (symbol 44385 . 44396) (open-paren 44384 . 44385) (symbol 44374 . 44383) (punctuation 44372 . 44373) (symbol 44360 . 44371) (symbol 44353 . 44359) (close-paren 44351 . 44352) (punctuation 44345 . 44346) (symbol 44344 . 44345) (punctuation 44343 . 44344) (symbol 44342 . 44343) (punctuation 44341 . 44342) (punctuation 44340 . 44341) (semantic-list 44337 . 44340) (symbol 44331 . 44336) (punctuation 44330 . 44331) (RETURN 44323 . 44329) (open-paren 44319 . 44320) (close-paren 44317 . 44318) (symbol 44316 . 44317) (symbol 44304 . 44315) (open-paren 44303 . 44304) (symbol 44293 . 44302) (punctuation 44291 . 44292) (symbol 44279 . 44290) (symbol 44272 . 44278) (close-paren 43812 . 43813) (punctuation 43810 . 43811) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43808 . 43809)))) 43794 . 43810) (RETURN 43787 . 43793) (open-paren 43783 . 43784) (close-paren 43781 . 43782) (symbol 43780 . 43781) (symbol 43768 . 43779) (open-paren 43767 . 43768) (close-paren 43765 . 43766) (symbol 43760 . 43765) (open-paren 43759 . 43760) (punctuation 43757 . 43758) (symbol 43747 . 43756) (STRUCT 43740 . 43746) (symbol 43733 . 43739) (close-paren 43730 . 43731) (semantic-list 43713 . 43716) (open-paren 43691 . 43692) (close-paren 43689 . 43690) (symbol 43688 . 43689) (symbol 43676 . 43687) (open-paren 43675 . 43676) (symbol 43664 . 43674) (VOID 43659 . 43663) (symbol 43652 . 43658) (close-paren 43649 . 43650) (RETURN 43624 . 43630) (open-paren 43620 . 43621) (close-paren 43618 . 43619) (symbol 43617 . 43618) (symbol 43605 . 43616) (open-paren 43604 . 43605) (close-paren 43602 . 43603) (symbol 43597 . 43602) (open-paren 43596 . 43597) (BOOL 43591 . 43595) (symbol 43584 . 43590) (close-paren 43581 . 43582) (RETURN 43557 . 43563) (open-paren 43553 . 43554) (close-paren 43551 . 43552) (symbol 43550 . 43551) (symbol 43538 . 43549) (open-paren 43537 . 43538) (close-paren 43535 . 43536) (symbol 43531 . 43535) (open-paren 43530 . 43531) (BOOL 43525 . 43529) (symbol 43518 . 43524) (punctuation 43515 . 43516) (close-paren 43514 . 43515) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 43497 . 43503)))) 43486 . 43514) (open-paren 43485 . 43486) (symbol 43478 . 43484) (punctuation 43476 . 43477) (close-paren 43475 . 43476) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (semantic-list "(GCALIGNMENT)" 43445 . 43467) (symbol "alignas" 43445 . 43467) (CHAR "char" 43445 . 43467) (open-paren 43189 . 43190) (symbol 43179 . 43188) (STRUCT 43172 . 43178) (close-paren 43094 . 43095) (RETURN 43084 . 43090) (punctuation 43080 . 43081) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 43045 . 43052)))) 43036 . 43080) (open-paren 42981 . 42982) (close-paren 42979 . 42980) (symbol 42978 . 42979) (punctuation 42977 . 42978) (VOID 42972 . 42976) (open-paren 42971 . 42972) (symbol 42950 . 42970) (symbol 42938 . 42949) (symbol 42931 . 42937) (close-paren 42928 . 42929) (RETURN 42918 . 42924) (open-paren 42872 . 42873) (close-paren 42870 . 42871) (symbol 42869 . 42870) (punctuation 42868 . 42869) (VOID 42863 . 42867) (open-paren 42862 . 42863) (symbol 42834 . 42861) (symbol 42822 . 42833) (symbol 42815 . 42821) (close-paren 42812 . 42813) (punctuation 42810 . 42811) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 42805 . 42809) ("type" symbol "Lisp_Int0" 42794 . 42803) ("a" symbol "a" 42791 . 42792)))) 42783 . 42810) (RETURN 42776 . 42782) (open-paren 42772 . 42773) (close-paren 42770 . 42771) (symbol 42769 . 42770) (symbol 42757 . 42768) (open-paren 42756 . 42757) (symbol 42745 . 42755) (punctuation 42743 . 42744) (VOID 42738 . 42742) (symbol 42731 . 42737) (close-paren 40308 . 40309) (punctuation 40306 . 40307) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40304 . 40305)))) 40288 . 40306) (RETURN 40281 . 40287) (open-paren 40277 . 40278) (close-paren 40275 . 40276) (symbol 40274 . 40275) (symbol 40262 . 40273) (open-paren 40261 . 40262) (close-paren 40259 . 40260) (symbol 40252 . 40259) (open-paren 40251 . 40252) (BOOL 40246 . 40250) (symbol 40239 . 40245) (close-paren 40236 . 40237) (RETURN 40226 . 40232) (punctuation 40222 . 40223) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 40171 . 40178)))) 40162 . 40222) (open-paren 40119 . 40120) (close-paren 40117 . 40118) (symbol 40113 . 40117) (symbol 40103 . 40112) (ENUM 40098 . 40102) (punctuation 40096 . 40097) (symbol 40093 . 40096) (punctuation 40092 . 40093) (VOID 40087 . 40091) (open-paren 40086 . 40087) (symbol 40072 . 40085) (symbol 40060 . 40071) (symbol 40053 . 40059) (close-paren 39992 . 39993) (punctuation 39983 . 39984) (symbol 39979 . 39982) (punctuation 39977 . 39978) (symbol 39971 . 39976) (punctuation 39969 . 39970) (punctuation 39968 . 39969) (symbol 39964 . 39967) (punctuation 39962 . 39963) (symbol 39956 . 39961) (punctuation 39954 . 39955) (symbol 39948 . 39953) (punctuation 39946 . 39947) (symbol 39942 . 39945) (RETURN 39935 . 39941) (open-paren 39931 . 39932) (close-paren 39929 . 39930) (symbol 39924 . 39929) (symbol 39914 . 39923) (punctuation 39912 . 39913) (symbol 39909 . 39912) (symbol 39899 . 39908) (punctuation 39897 . 39898) (symbol 39892 . 39897) (symbol 39882 . 39891) (open-paren 39881 . 39882) (symbol 39866 . 39880) (symbol 39856 . 39865) (symbol 39849 . 39855) (close-paren 39655 . 39656) (punctuation 39653 . 39654) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39651 . 39652) ("x" symbol "x" 39648 . 39649)))) 39637 . 39653) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092) (RETURN 39630 . 39636) (open-paren 39626 . 39627) (close-paren 39624 . 39625) (symbol 39623 . 39624) (symbol 39611 . 39622) (punctuation 39609 . 39610) (symbol 39608 . 39609) (symbol 39596 . 39607) (open-paren 39595 . 39596) (close-paren 39593 . 39594) (symbol 39591 . 39593) (open-paren 39590 . 39591) (BOOL 39585 . 39589) (symbol 39578 . 39584) (close-paren 39523 . 39524) (semantic-list 39503 . 39520) (punctuation 39501 . 39502) (punctuation 39492 . 39493) (semantic-list 39488 . 39491) (symbol 39476 . 39487) (punctuation 39474 . 39475) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39462 . 39473) (RETURN 39455 . 39461) (punctuation 39421 . 39422) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39385 . 39386)))) 39376 . 39421) (open-paren 39372 . 39373) (close-paren 39370 . 39371) (symbol 39369 . 39370) (symbol 39359 . 39368) (open-paren 39358 . 39359) (symbol 39340 . 39357) (symbol 39328 . 39339) (symbol 39321 . 39327) (close-paren 39237 . 39238) (RETURN 39212 . 39218) (open-paren 39208 . 39209) (close-paren 39206 . 39207) (symbol 39205 . 39206) (symbol 39193 . 39204) (open-paren 39192 . 39193) (close-paren 39190 . 39191) (symbol 39185 . 39190) (open-paren 39184 . 39185) (symbol 39174 . 39183) (symbol 39167 . 39173) (close-paren 39003 . 39004) (punctuation 39001 . 39002) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38994 . 39001) (punctuation 38992 . 38993) (symbol 38990 . 38991) (punctuation 38988 . 38989) (symbol 38976 . 38987) (punctuation 38974 . 38975) (punctuation 38973 . 38974) (symbol 38971 . 38972) (punctuation 38969 . 38970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38957 . 38968) (RETURN 38950 . 38956) (open-paren 38920 . 38921) (close-paren 38918 . 38919) (symbol 38917 . 38918) (symbol 38905 . 38916) (open-paren 38904 . 38905) (symbol 38895 . 38903) (symbol 38884 . 38894) (symbol 38877 . 38883) (close-paren 38797 . 38798) (RETURN 38787 . 38793) (punctuation 38763 . 38764) (semantic-list 38746 . 38763) (punctuation 38744 . 38745) (semantic-list 38740 . 38743) (symbol 38736 . 38739) (punctuation 38734 . 38735) (semantic-list 38730 . 38733) (symbol 38722 . 38729) (punctuation 38720 . 38721) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38708 . 38719) (punctuation 38706 . 38707) (symbol 38704 . 38705) (symbol 38694 . 38703) (open-paren 38660 . 38661) (close-paren 38658 . 38659) (symbol 38657 . 38658) (symbol 38645 . 38656) (open-paren 38644 . 38645) (symbol 38636 . 38643) (symbol 38626 . 38635) (symbol 38619 . 38625) (close-paren 38442 . 38443) (punctuation 38427 . 38428) (punctuation 38426 . 38427) (symbol 38424 . 38425) (RETURN 38417 . 38423) (semantic-list 38355 . 38414) (semantic-list 38335 . 38350) (IF 38332 . 38334) (open-paren 38303 . 38304) (close-paren 38301 . 38302) (symbol 38300 . 38301) (symbol 38288 . 38299) (open-paren 38287 . 38288) (symbol 38279 . 38286) (symbol 38269 . 38278) (symbol 38262 . 38268) (close-paren 38213 . 38214) (RETURN 38197 . 38203) (semantic-list 38137 . 38194) (ELSE 38128 . 38132) (semantic-list 38049 . 38125) (semantic-list 38031 . 38044) (IF 38028 . 38030) (open-paren 37994 . 37995) (close-paren 37992 . 37993) (symbol 37991 . 37992) (symbol 37981 . 37990) (open-paren 37980 . 37981) (symbol 37968 . 37979) (symbol 37956 . 37967) (symbol 37949 . 37955) (punctuation 36877 . 36878) (close-paren 36876 . 36877) (symbol 36851 . 36873) (punctuation 36849 . 36850) (punctuation 36848 . 36849) (number 36843 . 36847) (punctuation 36841 . 36842) (symbol 36826 . 36840) (punctuation 36820 . 36821) (symbol 36798 . 36820) (punctuation 36796 . 36797) (symbol 36773 . 36795) (punctuation 36771 . 36772) (symbol 36748 . 36770) (punctuation 36680 . 36681) (semantic-list 36608 . 36680) (punctuation 36606 . 36607) (symbol 36583 . 36605) (punctuation 36577 . 36578) (number 36575 . 36577) (punctuation 36573 . 36574) (symbol 36550 . 36572) (punctuation 36398 . 36399) (number 36397 . 36398) (punctuation 36395 . 36396) (semantic-list 36365 . 36394) (punctuation 36363 . 36364) (symbol 36340 . 36362) (punctuation 36334 . 36335) (number 36332 . 36334) (punctuation 36330 . 36331) (symbol 36307 . 36329) (open-paren 35934 . 35935) (symbol 35917 . 35931) (ENUM 35912 . 35916) (punctuation 35909 . 35910) (close-paren 35908 . 35909) (symbol 35838 . 35847) (punctuation 35834 . 35835) (symbol 35823 . 35834) (punctuation 35819 . 35820) (symbol 35800 . 35819) (punctuation 35796 . 35797) (symbol 35781 . 35796) (punctuation 35777 . 35778) (symbol 35764 . 35777) (punctuation 35695 . 35696) (symbol 35675 . 35695) (punctuation 35671 . 35672) (symbol 35659 . 35671) (punctuation 35655 . 35656) (symbol 35645 . 35655) (punctuation 35641 . 35642) (symbol 35630 . 35641) (punctuation 35626 . 35627) (symbol 35609 . 35626) (punctuation 35605 . 35606) (symbol 35593 . 35605) (punctuation 35532 . 35533) (symbol 35522 . 35532) (punctuation 35518 . 35519) (symbol 35509 . 35518) (punctuation 35505 . 35506) (symbol 35480 . 35505) (punctuation 35476 . 35477) (symbol 35463 . 35476) (punctuation 35459 . 35460) (symbol 35444 . 35459) (punctuation 35440 . 35441) (symbol 35429 . 35440) (punctuation 35425 . 35426) (symbol 35409 . 35425) (punctuation 35405 . 35406) (symbol 35394 . 35405) (punctuation 35390 . 35391) (symbol 35380 . 35390) (punctuation 35376 . 35377) (symbol 35364 . 35376) (punctuation 35316 . 35317) (symbol 35303 . 35316) (punctuation 35299 . 35300) (symbol 35285 . 35299) (punctuation 35281 . 35282) (symbol 35269 . 35281) (punctuation 35265 . 35266) (symbol 35254 . 35265) (punctuation 35250 . 35251) (symbol 35239 . 35250) (punctuation 35235 . 35236) (symbol 35226 . 35235) (punctuation 35222 . 35223) (symbol 35204 . 35222) (open-paren 35200 . 35201) (symbol 35190 . 35199) (ENUM 35185 . 35189) (punctuation ";" 34943 . 34984) (symbol "EXTERNALLY_VISIBLE" 34829 . 34883) (symbol "id" 34829 . 34883) (CONST "const" 34829 . 34883) (symbol "type" 34829 . 34883) (EXTERN "extern" 34829 . 34883) (punctuation ";" 34678 . 34717) (symbol "EXTERNALLY_VISIBLE" 34588 . 34640) (symbol "id" 34588 . 34640) (CONST "const" 34588 . 34640) (symbol "type" 34588 . 34640) (EXTERN "extern" 34588 . 34640) (close-paren 34504 . 34505) (open-paren 34475 . 34476) (close-paren 34473 . 34474) (symbol 34472 . 34473) (symbol 34460 . 34471) (open-paren 34459 . 34460) (close-paren 34457 . 34458) (symbol 34445 . 34457) (open-paren 34444 . 34445) (VOID 34439 . 34443) (symbol 34432 . 34438) (close-paren 34429 . 34430) (semantic-list 34419 . 34426) (punctuation 34411 . 34412) (RETURN 34386 . 34392) (open-paren 34382 . 34383) (close-paren 34380 . 34381) (symbol 34375 . 34380) (INT 34371 . 34374) (open-paren 34370 . 34371) (symbol 34350 . 34369) (symbol 34338 . 34349) (symbol 34331 . 34337) (close-paren 34328 . 34329) (RETURN 34318 . 34324) (punctuation 34314 . 34315) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34295 . 34302)))) 34286 . 34314) (open-paren 33570 . 33571) (close-paren 33568 . 33569) (symbol 33565 . 33568) (punctuation 33564 . 33565) (symbol 33552 . 33563) (STRUCT 33545 . 33551) (open-paren 33544 . 33545) (symbol 33527 . 33543) (symbol 33515 . 33526) (symbol 33508 . 33514) (close-paren 33505 . 33506) (RETURN 33488 . 33494) (punctuation 33173 . 33174) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33161 . 33168)))) 33152 . 33173) (open-paren 33097 . 33098) (close-paren 33095 . 33096) (symbol 33094 . 33095) (symbol 33082 . 33093) (open-paren 33081 . 33082) (close-paren 33079 . 33080) (symbol 33072 . 33079) (open-paren 33071 . 33072) (symbol 33039 . 33070) (punctuation 33037 . 33038) (symbol 33025 . 33036) (STRUCT 33018 . 33024) (symbol 33011 . 33017) (close-paren 33008 . 33009) (RETURN 32981 . 32987) (open-paren 32977 . 32978) (close-paren 32975 . 32976) (symbol 32974 . 32975) (symbol 32962 . 32973) (open-paren 32961 . 32962) (close-paren 32959 . 32960) (symbol 32952 . 32959) (open-paren 32951 . 32952) (BOOL 32946 . 32950) (symbol 32939 . 32945) (punctuation 32936 . 32937) (close-paren 32935 . 32936) (open-paren 31788 . 31789) (symbol 31768 . 31785) (UNION 31762 . 31767) (punctuation 27612 . 27613) (close-paren 27611 . 27612) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 27592 . 27598)))) 27581 . 27611) (open-paren 27580 . 27581) (symbol 27573 . 27579) (punctuation 27571 . 27572) (close-paren 27570 . 27571) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (semantic-list "(GCALIGNMENT)" 27540 . 27562) (symbol "alignas" 27540 . 27562) (CHAR "char" 27540 . 27562) (open-paren 25902 . 25903) (symbol 25890 . 25901) (STRUCT 25883 . 25889) (punctuation 25880 . 25881) (close-paren 25879 . 25880) (number 25877 . 25878) (punctuation 25875 . 25876) (symbol 25854 . 25874) (punctuation 25850 . 25851) (number 25849 . 25850) (punctuation 25847 . 25848) (symbol 25832 . 25846) (punctuation 25828 . 25829) (number 25827 . 25828) (punctuation 25825 . 25826) (symbol 25802 . 25824) (open-paren 25798 . 25799) (symbol 25777 . 25797) (ENUM 25772 . 25776) (punctuation 25769 . 25770) (close-paren 25768 . 25769) (number 25766 . 25767) (punctuation 25764 . 25765) (symbol 25747 . 25763) (punctuation 25743 . 25744) (number 25742 . 25743) (punctuation 25740 . 25741) (symbol 25723 . 25739) (punctuation 25719 . 25720) (number 25718 . 25719) (punctuation 25716 . 25717) (symbol 25699 . 25714) (punctuation 25695 . 25696) (number 25694 . 25695) (punctuation 25692 . 25693) (symbol 25675 . 25690) (open-paren 25671 . 25672) (symbol 25655 . 25670) (ENUM 25650 . 25654) (punctuation 25647 . 25648) (close-paren 25646 . 25647) (number 25644 . 25645) (punctuation 25642 . 25643) (symbol 25607 . 25641) (punctuation 25603 . 25604) (number 25602 . 25603) (punctuation 25600 . 25601) (symbol 25584 . 25599) (punctuation 25580 . 25581) (number 25579 . 25580) (punctuation 25577 . 25578) (symbol 25559 . 25576) (open-paren 25555 . 25556) (symbol 25539 . 25554) (ENUM 25534 . 25538) (close-paren 25288 . 25289) (punctuation 25286 . 25287) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25284 . 25285) ("predicate" symbol "predicate" 25273 . 25282) ("ok" symbol "ok" 25269 . 25271)))) 25250 . 25286) (open-paren 25246 . 25247) (close-paren 25244 . 25245) (symbol 25243 . 25244) (symbol 25231 . 25242) (punctuation 25229 . 25230) (symbol 25220 . 25229) (symbol 25208 . 25219) (punctuation 25206 . 25207) (symbol 25204 . 25206) (INT 25200 . 25203) (open-paren 25199 . 25200) (close-paren 25197 . 25198) (symbol 25187 . 25197) (open-paren 25186 . 25187) (VOID 25181 . 25185) (symbol 25174 . 25180) (close-paren 25171 . 25172) (punctuation 25169 . 25170) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 25165 . 25168) ("a" symbol "a" 25162 . 25163)))) 25146 . 25169) (RETURN 25139 . 25145) (open-paren 25135 . 25136) (close-paren 25133 . 25134) (symbol 25130 . 25133) (symbol 25120 . 25129) (ENUM 25115 . 25119) (punctuation 25113 . 25114) (symbol 25112 . 25113) (symbol 25100 . 25111) (open-paren 25099 . 25100) (close-paren 25097 . 25098) (symbol 25090 . 25097) (open-paren 25089 . 25090) (BOOL 25084 . 25088) (symbol 25077 . 25083) (close-paren 24985 . 24986) (punctuation 24967 . 24968) (punctuation 24966 . 24967) (symbol 24964 . 24965) (punctuation 24962 . 24963) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 24954 . 24961) (punctuation 24953 . 24954) (punctuation 24951 . 24952) (symbol 24949 . 24950) (punctuation 24947 . 24948) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 24935 . 24946) (RETURN 24928 . 24934) (open-paren 24849 . 24850) (close-paren 24847 . 24848) (symbol 24846 . 24847) (symbol 24834 . 24845) (open-paren 24833 . 24834) (close-paren 24831 . 24832) (symbol 24826 . 24831) (open-paren 24825 . 24826) (symbol 24815 . 24824) (ENUM 24810 . 24814) (symbol 24803 . 24809) (close-paren 24774 . 24775) (punctuation 24772 . 24773) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24770 . 24771)))) 24758 . 24772) (RETURN 24751 . 24757) (open-paren 24747 . 24748) (close-paren 24745 . 24746) (symbol 24744 . 24745) (punctuation 24743 . 24744) (VOID 24738 . 24742) (open-paren 24737 . 24738) (close-paren 24735 . 24736) (symbol 24732 . 24735) (open-paren 24731 . 24732) (symbol 24719 . 24730) (symbol 24712 . 24718) (close-paren 24709 . 24710) (punctuation 24707 . 24708) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24705 . 24706)))) 24693 . 24707) (RETURN 24686 . 24692) (open-paren 24682 . 24683) (close-paren 24680 . 24681) (symbol 24679 . 24680) (symbol 24667 . 24678) (open-paren 24666 . 24667) (close-paren 24664 . 24665) (symbol 24661 . 24664) (open-paren 24660 . 24661) (punctuation 24658 . 24659) (VOID 24653 . 24657) (symbol 24646 . 24652) (close-paren 24643 . 24644) (punctuation 24641 . 24642) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24639 . 24640)))) 24627 . 24641) (RETURN 24620 . 24626) (open-paren 24616 . 24617) (close-paren 24614 . 24615) (symbol 24613 . 24614) (symbol 24603 . 24612) (open-paren 24602 . 24603) (close-paren 24600 . 24601) (symbol 24597 . 24600) (open-paren 24596 . 24597) (symbol 24584 . 24595) (symbol 24577 . 24583) (close-paren 24574 . 24575) (punctuation 24572 . 24573) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24570 . 24571)))) 24558 . 24572) (RETURN 24551 . 24557) (open-paren 24547 . 24548) (close-paren 24545 . 24546) (symbol 24544 . 24545) (symbol 24532 . 24543) (open-paren 24531 . 24532) (close-paren 24529 . 24530) (symbol 24526 . 24529) (open-paren 24525 . 24526) (symbol 24515 . 24524) (symbol 24508 . 24514) (punctuation 24233 . 24234) (close-paren 24232 . 24233) (symbol 24221 . 24232) (open-paren 24220 . 24221) (symbol 24206 . 24219) (DOUBLE 24199 . 24205) (EXTERN 24192 . 24198) (punctuation 23884 . 23885) (close-paren 23883 . 23884) (symbol 23872 . 23883) (punctuation 23870 . 23871) (symbol 23859 . 23870) (open-paren 23858 . 23859) (symbol 23838 . 23857) (VOID 23833 . 23837) (EXTERN 23816 . 23822) (punctuation 23787 . 23788) (close-paren 23786 . 23787) (symbol 23775 . 23786) (punctuation 23773 . 23774) (INT 23770 . 23773) (punctuation 23768 . 23769) (symbol 23757 . 23768) (open-paren 23756 . 23757) (symbol 23741 . 23755) (VOID 23736 . 23740) (EXTERN 23729 . 23735) (punctuation 23727 . 23728) (close-paren 23726 . 23727) (INT 23723 . 23726) (punctuation 23721 . 23722) (symbol 23710 . 23721) (open-paren 23709 . 23710) (symbol 23694 . 23708) (symbol 23682 . 23693) (EXTERN 23675 . 23681) (punctuation 23643 . 23644) (close-paren 23642 . 23643) (symbol 23633 . 23642) (open-paren 23632 . 23633) (symbol 23619 . 23631) (symbol 23607 . 23618) (EXTERN 23600 . 23606) (punctuation 23598 . 23599) (close-paren 23597 . 23598) (symbol 23589 . 23597) (open-paren 23588 . 23589) (symbol 23576 . 23587) (symbol 23564 . 23575) (EXTERN 23557 . 23563) (punctuation 23555 . 23556) (close-paren 23554 . 23555) (symbol 23543 . 23554) (open-paren 23542 . 23543) (symbol 23525 . 23541) (DOUBLE 23518 . 23524) (EXTERN 23511 . 23517) (punctuation 23480 . 23481) (close-paren 23479 . 23480) (symbol 23468 . 23479) (punctuation 23455 . 23456) (symbol 23446 . 23455) (punctuation 23444 . 23445) (symbol 23433 . 23444) (open-paren 23432 . 23433) (symbol 23404 . 23431) (VOID 23399 . 23403) (symbol 23392 . 23398) (punctuation 23322 . 23323) (close-paren 23321 . 23322) (symbol 23315 . 23320) (punctuation 23313 . 23314) (symbol 23290 . 23312) (open-paren 23288 . 23289) (symbol 23265 . 23287) (ENUM 23260 . 23264) (punctuation 20538 . 20539) (close-paren 20537 . 20538) (symbol 20468 . 20487) (punctuation 20416 . 20417) (symbol 20397 . 20416) (punctuation 20350 . 20351) (symbol 20338 . 20350) (punctuation 20300 . 20301) (symbol 20287 . 20300) (punctuation 20246 . 20247) (symbol 20234 . 20246) (open-paren 20228 . 20229) (symbol 20212 . 20225) (ENUM 20207 . 20211) (punctuation 20046 . 20047) (close-paren 20045 . 20046) (number 20041 . 20042) (punctuation 20039 . 20040) (symbol 20028 . 20038) (punctuation 20021 . 20022) (number 20020 . 20021) (punctuation 20018 . 20019) (number 20016 . 20017) (punctuation 20014 . 20015) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 20002 . 20013) (punctuation 20000 . 20001) (symbol 19990 . 19999) (punctuation 19920 . 19921) (number 19919 . 19920) (punctuation 19917 . 19918) (symbol 19901 . 19916) (punctuation 19637 . 19638) (number 19636 . 19637) (punctuation 19634 . 19635) (symbol 19622 . 19633) (punctuation 19475 . 19476) (number 19474 . 19475) (punctuation 19472 . 19473) (number 19470 . 19471) (punctuation 19468 . 19469) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 19456 . 19467) (punctuation 19454 . 19455) (symbol 19444 . 19453) (punctuation 19438 . 19439) (number 19437 . 19438) (punctuation 19435 . 19436) (symbol 19425 . 19434) (punctuation 19322 . 19323) (number 19321 . 19322) (punctuation 19319 . 19320) (symbol 19307 . 19318) (open-paren 19232 . 19233) (symbol 19220 . 19229) (ENUM 19215 . 19219) (close-paren 17010 . 17011) (semantic-list 16978 . 17010) (punctuation 16976 . 16977) (punctuation 16974 . 16975) (punctuation 16973 . 16974) (symbol 16948 . 16965) (symbol 16940 . 16947) (punctuation 16938 . 16939) (punctuation 16936 . 16937) (punctuation 16935 . 16936) (symbol 16922 . 16934) (symbol 16914 . 16921) (punctuation 16912 . 16913) (punctuation 16910 . 16911) (punctuation 16909 . 16910) (punctuation 9980 . 9981) (punctuation 9979 . 9980) (symbol 9973 . 9978) (string 9911 . 9972) (string 9842 . 9907) (symbol 9836 . 9841) (punctuation 9834 . 9835) (punctuation ";" 9757 . 9788) (symbol "EXTERNALLY_VISIBLE" 9649 . 9693) (symbol "id" 9649 . 9693) (CONST "const" 9649 . 9693) (symbol "type" 9649 . 9693) (EXTERN "extern" 9649 . 9693) (punctuation ";" 9538 . 9573) (symbol "EXTERNALLY_VISIBLE" 9447 . 9490) (symbol "id" 9447 . 9490) (CONST "const" 9447 . 9490) (symbol "type" 9447 . 9490) (EXTERN "extern" 9447 . 9490) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (symbol "id" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "type" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092))
      :lexical-table 
        '(("pMd" . ((symbol "pI" 5218 . 5220) (string "\"d\"" 5220 . 5223)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 9711 . 9756)))
          ("GCALIGNMENT" . ((number "1" 10418 . 10419)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 28171 . 28177)))
          ("LISP_WORD_TAG" (spp-arg-list ("tag") 29647 . 29652) . ((semantic-list "((Lisp_Word_tag) (tag) << (USE_LSB_TAG ? 0 : VALBITS))" 29657 . 29711)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 30056 . 30062) . ((symbol "TAG_PTR" 30067 . 30074) (semantic-list "(Lisp_Symbol, (char *) (intptr_t) ((i##name) * sizeof *lispsym))" 30075 . 30139)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 34666 . 34677)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 41991 . 41997) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 41998 . 42036)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 64727 . 64733) . ((symbol "longjmp" 64734 . 64741) (semantic-list "(j, v)" 64742 . 64748)))
          ("CHECK_INTEGER_COERCE_MARKER" (spp-arg-list ("x") 88423 . 88426) . 
              ((DO "do" 88435 . 88437) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (INTEGERP (x), Qnumber_or_marker_p, x);		\\
  }" 88438 . 88609) (WHILE "while" 88610 . 88615) (semantic-list "(false)" 88616 . 88623)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 93130 . 93149) . 
              ((DO "do" 93155 . 93157) (semantic-list "{						\\
    static struct Lisp_Intfwd i_fwd;		\\
    defvar_int (&i_fwd, lname, &globals.f_ ## vname);		\\
  }" 93158 . 93267) (WHILE "while" 93268 . 93273) (semantic-list "(false)" 93274 . 93281)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 152925 . 152940) . 
              ((symbol "Lisp_Object" 152949 . 152960) (symbol "name" 152961 . 152965) (punctuation "=" 152966 . 152967) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 152968 . 153081)))
          ("FOR_EACH_TAIL_INTERNAL" (spp-arg-list ("tail" "cycle" "check_quit") 156156 . 156181) . ((FOR "for" 156188 . 156191) (semantic-list "(struct for_each_tail_internal li = { tail, 2, 0, 2 };		\\
       CONSP (tail);							\\
       ((tail) = XCDR (tail),						\\
	((--li.q != 0							\\
	  || ((check_quit) ? maybe_quit () : (void) 0, 0 < --li.n)	\\
	  || (li.q = li.n = li.max <<= 1, li.n >>= USHRT_WIDTH,		\\
	      li.tortoise = (tail), false))				\\
	 && EQ (tail, li.tortoise))					\\
	? (cycle) : (void) 0))" 156192 . 156561)))
          ("EMACS_LISP_H")
          ("max" (spp-arg-list ("a" "b") 1887 . 1893) . ((semantic-list "((a) > (b) ? (a) : (b))" 1894 . 1917)))
          ("pD" . ((string "\"ll\"" 5714 . 5718)))
          ("GCALIGNED_UNION_MEMBER" . 
              ((CHAR "char" 11546 . 11550) (symbol "alignas" 11551 . 11558) (semantic-list "(GCALIGNMENT)" 11559 . 11572) (symbol "gcaligned" 11573 . 11582) (punctuation ";" 11582 . 11583)))
          ("case_Lisp_Int" . 
              ((CASE "case" 18866 . 18870) (symbol "Lisp_Int0" 18871 . 18880) (punctuation ":" 18880 . 18881) (CASE "case" 18882 . 18886) (symbol "Lisp_Int1" 18887 . 18896)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 28080 . 28106)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 28199 . 28212)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 30736 . 30741) . ((spp-symbol-merge ((symbol "i" 30742 . 30743) (symbol "sym" 30745 . 30748)) 30742 . 30748)))
          ("XSETCONS" (spp-arg-list ("a" "b") 40429 . 40435) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 40436 . 40472)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 90492 . 90546) . 
              ((STATIC "static" 90552 . 90558) (STRUCT "struct" 90559 . 90565) (symbol "Lisp_Subr" 90566 . 90575) (symbol "sname" 90576 . 90581) (punctuation "=" 90582 . 90583) (semantic-list "{ { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, intspec, 0}" 90594 . 90726) (punctuation ";" 90726 . 90727) (symbol "Lisp_Object" 90736 . 90747) (symbol "fnname" 90748 . 90754)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 148006 . 148031) . 
              ((DO "do" 148039 . 148041) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 148042 . 148353) (WHILE "while" 148354 . 148359) (semantic-list "(false)" 148360 . 148367)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 153100 . 153118) . 
              ((symbol "Lisp_Object" 153129 . 153140) (symbol "name" 153141 . 153145) (punctuation "=" 153160 . 153161) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 153162 . 153299)))
          ("min" (spp-arg-list ("a" "b") 1929 . 1935) . ((semantic-list "((a) < (b) ? (a) : (b))" 1936 . 1959)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 4444 . 4452)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9511 . 9537)))
          ("lisp_h_SYMBOL_TRAPPED_WRITE_P" (spp-arg-list ("sym") 15264 . 15269) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write)" 15270 . 15304)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 15696 . 15699) . 
              ((symbol "XCONS" 15700 . 15705) (semantic-list "(c)" 15706 . 15709) (punctuation "-" 15709 . 15710) (punctuation ">" 15710 . 15711) (symbol "u" 15711 . 15712) (punctuation "." 15712 . 15713) (symbol "s" 15713 . 15714) (punctuation "." 15714 . 15715) (symbol "car" 15715 . 15718)))
          ("lisp_h_check_cons_list" (spp-arg-list nil 15950 . 15952) . ((semantic-list "((void) 0)" 15953 . 15963)))
          ("XUNTAG" (spp-arg-list ("a" "type" "ctype") 25419 . 25435) . ((semantic-list "((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 25436 . 25495)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 28234 . 28260)))
          ("CHECK_RANGED_INTEGER" (spp-arg-list ("x" "lo" "hi") 86964 . 86975) . 
              ((DO "do" 86984 . 86986) (semantic-list "{									\\
    CHECK_FIXNUM (x);							\\
    if (! ((lo) <= XFIXNUM (x) && XFIXNUM (x) <= (hi)))			\\
      args_out_of_range_3						\\
	(x,								\\
	 make_fixnum ((lo) < 0 && (lo) < MOST_NEGATIVE_FIXNUM		\\
		      ? MOST_NEGATIVE_FIXNUM				\\
		      : (lo)),						\\
	 make_fixnum (min (hi, MOST_POSITIVE_FIXNUM)));			\\
  }" 86987 . 87310) (WHILE "while" 87311 . 87316) (semantic-list "(false)" 87317 . 87324)))
          ("FOR_EACH_TAIL" (spp-arg-list ("tail") 154969 . 154975) . ((symbol "FOR_EACH_TAIL_INTERNAL" 154980 . 155002) (semantic-list "(tail, circular_list (tail), true)" 155003 . 155037)))
          ("eassume" (spp-arg-list ("cond") 7102 . 7108) . ((symbol "assume" 7109 . 7115) (semantic-list "(cond)" 7116 . 7122)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 14715 . 14721) . ((semantic-list "(XLI (x) == XLI (y))" 14722 . 14742)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 17046 . 17050)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 19189 . 19195) . ((ENUM "enum" 19196 . 19200) (symbol "TYPE" 19201 . 19205)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 28282 . 28321)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 29802 . 29812) . ((symbol "LISP_INITIALLY" 29817 . 29831) (semantic-list "((Lisp_Word) ((untagged_ptr) (ptr) + LISP_WORD_TAG (tag)))" 29832 . 29890)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 34911 . 34942)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 41797 . 41803) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 41804 . 41844)))
          ("XSETCOMPILED" (spp-arg-list ("a" "b") 41925 . 41931) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_COMPILED))" 41932 . 41972)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 47265 . 47270) . 
              ((DO "do" 47278 . 47280) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = -1;		\\
  }" 47281 . 47436) (WHILE "while" 47437 . 47442) (semantic-list "(false)" 47443 . 47450)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "nonlispfield") 56448 . 56468) . ((semantic-list "(offsetof (type, nonlispfield) < header_size			\\
    ? 0 : (offsetof (type, nonlispfield) - header_size) / word_size)" 56476 . 56593)))
          ("UNSIGNED_CMP" (spp-arg-list ("a" "op" "b") 56939 . 56949) . ((semantic-list "(max (sizeof ((a) + 0), sizeof ((b) + 0)) <= sizeof (unsigned)	\\
   ? ((a) + (unsigned) 0) op ((b) + (unsigned) 0)			\\
   : ((a) + (uintmax_t) 0) op ((b) + (uintmax_t) 0))" 56959 . 57130)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 120616 . 120619)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 152232 . 152238) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 152243 . 152294)))
          ("x" . (nil))
          ("pMu" . ((symbol "pI" 5237 . 5239) (string "\"u\"" 5239 . 5242)))
          ("LISP_WORDS_ARE_POINTERS" . ((semantic-list "(EMACS_INT_MAX == INTPTR_MAX)" 12148 . 12177)))
          ("lisp_h_XLI" (spp-arg-list ("o") 13831 . 13834) . ((semantic-list "(o)" 13835 . 13838)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 28343 . 28395)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 31104 . 31108)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 39761 . 39764) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 39769 . 39847)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 40623 . 40629) . ((semantic-list "((a) = make_lisp_symbol (b))" 40630 . 40658)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 40890 . 40919) . ((semantic-list "((v)->header.size = (PSEUDOVECTOR_FLAG			\\
		       | ((code) << PSEUDOVECTOR_AREA_BITS)	\\
		       | ((restsize) << PSEUDOVECTOR_SIZE_BITS) \\
		       | (lispsize)))" 40925 . 41091)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 67360 . 67371))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 98884 . 98928)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 118028 . 118046) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 118059 . 118191)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 138371 . 138381)))
          ("CHILD_SETUP_TYPE" . ((symbol "_Noreturn" 138874 . 138883) (VOID "void" 138884 . 138888)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 150473 . 150484) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 150485 . 150507) (semantic-list "(buf, nelt, 0)" 150508 . 150522)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1796 . 1801) . ((punctuation ";" 1802 . 1803)))
          ("lisp_h_CHECK_FIXNUM" (spp-arg-list ("x") 14436 . 14439) . ((symbol "CHECK_TYPE" 14440 . 14450) (semantic-list "(FIXNUMP (x), Qfixnump, x)" 14451 . 14477)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 28417 . 28488)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 37327 . 37354)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 47582 . 47587) . 
              ((DO "do" 47594 . 47596) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = XSTRING (STR)->u.s.size; \\
  }" 47597 . 47774) (WHILE "while" 47775 . 47780) (semantic-list "(false)" 47781 . 47788)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 70750 . 70760) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 70768 . 70814)))
          ("CALLMANY" (spp-arg-list ("f" "array") 91043 . 91053) . ((semantic-list "(f)" 91054 . 91057) (semantic-list "(ARRAYELTS (array), array)" 91058 . 91084)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 93304 . 93323) . 
              ((DO "do" 93330 . 93332) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd ko_fwd;			\\
    defvar_kboard (&ko_fwd, lname, offsetof (KBOARD, vname ## _)); \\
  }" 93333 . 93465) (WHILE "while" 93466 . 93471) (semantic-list "(false)" 93472 . 93479)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 117685 . 117703) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 117717 . 117862)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_type >= 0)" 137322 . 137340)))
          ("eabs" (spp-arg-list ("x") 147158 . 147161) . ((semantic-list "((x) < 0 ? -(x) : (x))" 147170 . 147192)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 147687 . 147693) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : record_xmalloc (size))" 147694 . 147781)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 153668 . 153679) . ((symbol "AUTO_STRING_WITH_LEN" 153684 . 153704) (semantic-list "(name, str, strlen (str))" 153705 . 153730)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1721 . 1731) . 
              ((EXTERN "extern" 1732 . 1738) (symbol "DECLARE_GDB_SYM" 1739 . 1754) (semantic-list "(type, id)" 1755 . 1765)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2017 . 2022) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2023 . 2055)))
          ("pI" . ((string "\"ll\"" 3788 . 3792)))
          ("eassert" (spp-arg-list ("cond") 7024 . 7030) . ((semantic-list "((void) (false && (cond)))" 7031 . 7057)))
          ("GCALIGNED_STRUCT_MEMBER" . ((symbol "GCALIGNED_UNION_MEMBER" 11756 . 11778)))
          ("lisp_h_XPL" (spp-arg-list ("p") 13938 . 13941) . ((semantic-list "((Lisp_Object) (uintptr_t) (p))" 13942 . 13973)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 14505 . 14508) . ((symbol "CHECK_TYPE" 14509 . 14519) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 14520 . 14546)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 28510 . 28594)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 30502 . 30508) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 30514 . 30537) (semantic-list "(Lisp_Object, name)" 30538 . 30557) (symbol "DEFINE_GDB_SYMBOL_END" 30563 . 30584) (semantic-list "(LISPSYM_INITIALLY (name))" 30585 . 30611)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 41583 . 41589) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 41594 . 41646)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 41666 . 41672) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 41673 . 41712)))
          ("sys_setjmp" (spp-arg-list ("j") 64692 . 64695) . ((symbol "setjmp" 64696 . 64702) (semantic-list "(j)" 64703 . 64706)))
          ("CHECK_NUMBER_COERCE_MARKER" (spp-arg-list ("x") 88186 . 88189) . 
              ((DO "do" 88198 . 88200) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (NUMBERP (x), Qnumber_or_marker_p, x);			\\
  }" 88201 . 88372) (WHILE "while" 88373 . 88378) (semantic-list "(false)" 88379 . 88386)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 147481 . 147490) (symbol "sa_avail" 147491 . 147499) (punctuation "=" 147500 . 147501) (symbol "MAX_ALLOCA" 147502 . 147512) (punctuation ";" 147512 . 147513) (symbol "ptrdiff_t" 147518 . 147527) (symbol "sa_count" 147528 . 147536) (punctuation "=" 147537 . 147538) (symbol "SPECPDL_INDEX" 147539 . 147552) (semantic-list "()" 147553 . 147555)))
          ("a")
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3225 . 3234)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 9057 . 9092)))
          ("LISP_INITIALLY" (spp-arg-list ("w") 23252 . 23255) . ((semantic-list "(w)" 23256 . 23259)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 28616 . 28713)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 37267 . 37297)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "false" 151295 . 151300)))
          ("cond" . (nil))
          ("b")
          ("lisp_h_TAGGEDP" (spp-arg-list ("a" "tag") 15487 . 15495) . ((semantic-list "(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 15501 . 15617)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 15783 . 15786) . ((semantic-list "(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 15792 . 15854)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 15875 . 15878) . ((symbol "XUFIXNUM" 15879 . 15887) (semantic-list "(a)" 15888 . 15891)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 28735 . 28845)))
          ("XSETINT" (spp-arg-list ("a" "b") 40326 . 40332) . ((semantic-list "((a) = make_fixnum (b))" 40333 . 40356)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 41186 . 41198) . ((symbol "XSETTYPED_PSEUDOVECTOR" 41203 . 41225) (semantic-list "(a, b,					\\
			  (XUNTAG (a, Lisp_Vectorlike,		\\
				   union vectorlike_header)	\\
			   ->size),				\\
			  code)" 41226 . 41340)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 41861 . 41867) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 41868 . 41904)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 47127 . 47200)))
          ("_UCHAR_T")
          ("CHECK_FIXNUM_COERCE_MARKER" (spp-arg-list ("x") 87629 . 87632) . 
              ((DO "do" 87641 . 87643) (semantic-list "{									\\
    if (MARKERP ((x)))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (FIXNUMP (x), Qinteger_or_marker_p, x);		\\
  }" 87644 . 87817) (WHILE "while" 87818 . 87823) (semantic-list "(false)" 87824 . 87831)))
          ("CALLN" (spp-arg-list ("f" "...") 91393 . 91401) . ((symbol "CALLMANY" 91402 . 91410) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 91411 . 91448)))
          ("c" . (nil))
          ("GCALIGNED_STRUCT")
          ("GCALIGNED" (spp-arg-list ("type") 11829 . 11835) . ((semantic-list "(alignof (type) % GCALIGNMENT == 0)" 11836 . 11871)))
          ("lisp_h_FIXNUMP" (spp-arg-list ("x") 14765 . 14768) . ((semantic-list "(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 14774 . 14917)))
          ("XSETFLOAT" (spp-arg-list ("a" "b") 40676 . 40682) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 40683 . 40720)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 40770 . 40779) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 40789 . 40865)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 41371 . 41389) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 41396 . 41549)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 41731 . 41737) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 41738 . 41776)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 42132 . 42138) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 42139 . 42182)))
          ("XSETTHREAD" (spp-arg-list ("a" "b") 42281 . 42287) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_THREAD))" 42288 . 42326)))
          ("XSETMUTEX" (spp-arg-list ("a" "b") 42344 . 42350) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_MUTEX))" 42351 . 42388)))
          ("INT_TO_INTEGER" (spp-arg-list ("expr") 78508 . 78514) . ((semantic-list "(EXPR_SIGNED (expr) ? make_int (expr) : make_uint (expr))" 78519 . 78576)))
          ("IEEE_FLOATING_POINT" . ((semantic-list "(FLT_RADIX == 2 && FLT_MANT_DIG == 24 \\
			     && FLT_MIN_EXP == -125 && FLT_MAX_EXP == 128)" 83491 . 83584)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 92604 . 92623) . 
              ((DO "do" 92629 . 92631) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp (&o_fwd, lname, &globals.f_ ## vname);		\\
  }" 92632 . 92742) (WHILE "while" 92743 . 92748) (semantic-list "(false)" 92749 . 92756)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 148459 . 148472) . 
              ((DO "do" 148479 . 148481) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 148482 . 148602) (WHILE "while" 148603 . 148608) (semantic-list "(false)" 148609 . 148616)))
          ("SAFE_FREE_UNBIND_TO" (spp-arg-list ("count" "val") 149425 . 149437) . ((symbol "safe_free_unbind_to" 149442 . 149461) (semantic-list "(count, sa_count, val)" 149462 . 149484)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1508 . 1518) . 
              ((symbol "type" 1519 . 1523) (CONST "const" 1524 . 1529) (symbol "id" 1530 . 1532) (symbol "EXTERNALLY_VISIBLE" 1533 . 1551)))
          ("GCTYPEBITS" . ((number "3" 2162 . 2163)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 14572 . 14590) . ((semantic-list "((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 14596 . 14650)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 15330 . 15335) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 15341 . 15413)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 27874 . 27891) . 
              ((EXTERN "extern" 27896 . 27902) (symbol "Lisp_Object" 27903 . 27914) (symbol "fnname" 27915 . 27921) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 27922 . 27933) (symbol "maxargs" 27937 . 27944)) 27922 . 27944)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 40559 . 40565) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 40566 . 40604)))
          ("XSETCONDVAR" (spp-arg-list ("a" "b") 42408 . 42414) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CONDVAR))" 42415 . 42454)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 104084 . 104101) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 104108 . 104275)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 147577 . 147583) . ((semantic-list "(sa_avail -= (size), alloca (size))" 147584 . 147619)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 149794 . 149812) . 
              ((DO "do" 149824 . 149826) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	(buf) = xmalloc (alloca_nbytes);		       \\
	record_unwind_protect_array (buf, nelt);	       \\
      }							       \\
  }" 149827 . 150364) (WHILE "while" 150365 . 150370) (semantic-list "(false)" 150371 . 150378)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 152137 . 152143) . ((symbol "make_lisp_ptr" 152148 . 152161) (semantic-list "(&((struct Lisp_Cons) {{{a, {b}}}}), Lisp_Cons)" 152162 . 152209)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 4071 . 4072)))
          ("lisp_h_XIL" (spp-arg-list ("i") 13859 . 13862) . ((semantic-list "(i)" 13863 . 13866)))
          ("lisp_h_XLP" (spp-arg-list ("o") 13887 . 13890) . ((semantic-list "((void *) (uintptr_t) (o))" 13891 . 13917)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 14939 . 14942) . ((symbol "TAGGEDP" 14943 . 14950) (semantic-list "(x, Lisp_Float)" 14951 . 14966)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 15738 . 15741) . 
              ((symbol "XCONS" 15742 . 15747) (semantic-list "(c)" 15748 . 15751) (punctuation "-" 15751 . 15752) (punctuation ">" 15752 . 15753) (symbol "u" 15753 . 15754) (punctuation "." 15754 . 15755) (symbol "s" 15755 . 15756) (punctuation "." 15756 . 15757) (symbol "u" 15757 . 15758) (punctuation "." 15758 . 15759) (symbol "cdr" 15759 . 15762)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 18807 . 18843)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 40376 . 40382) . ((semantic-list "((a) = make_fixed_natnum (b))" 40383 . 40412)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 42059 . 42065) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 42066 . 42108)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 42209 . 42215) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 42216 . 42262)))
          ("VECSIZE" (spp-arg-list ("type") 56157 . 56163) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 56173 . 56232)))
          ("ASCII_CHAR_P" (spp-arg-list ("c") 57193 . 57196) . ((symbol "UNSIGNED_CMP" 57197 . 57209) (semantic-list "(c, <, 0x80)" 57210 . 57222)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 92782 . 92801) . 
              ((DO "do" 92806 . 92808) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp_nopro (&o_fwd, lname, &globals.f_ ## vname);	\\
  }" 92809 . 92924) (WHILE "while" 92925 . 92930) (semantic-list "(false)" 92931 . 92938)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 92958 . 92977) . 
              ((DO "do" 92983 . 92985) (semantic-list "{						\\
    static struct Lisp_Boolfwd b_fwd;		\\
    defvar_bool (&b_fwd, lname, &globals.f_ ## vname);		\\
  }" 92986 . 93097) (WHILE "while" 93098 . 93103) (semantic-list "(false)" 93104 . 93111)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 152662 . 152671) . 
              ((symbol "Lisp_Object" 152681 . 152692) (symbol "name" 152693 . 152697) (punctuation "=" 152698 . 152699) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 152700 . 152751)))
          ("lisp_h_CONSP" (spp-arg-list ("x") 14671 . 14674) . ((symbol "TAGGEDP" 14675 . 14682) (semantic-list "(x, Lisp_Cons)" 14683 . 14697)))
          ("lisp_h_NILP" (spp-arg-list ("x") 14986 . 14989) . ((symbol "EQ" 14990 . 14992) (semantic-list "(x, Qnil)" 14993 . 15002)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 15032 . 15040) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 15046 . 15130)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 15163 . 15168) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 15174 . 15226)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 15436 . 15439) . ((symbol "TAGGEDP" 15440 . 15447) (semantic-list "(x, Lisp_Symbol)" 15448 . 15464)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 15644 . 15647) . ((symbol "TAGGEDP" 15648 . 15655) (semantic-list "(x, Lisp_Vectorlike)" 15656 . 15676)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 28136 . 28149)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 40491 . 40497) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 40498 . 40540)))
          ("TYPE_RANGED_FIXNUMP" (spp-arg-list ("type" "x") 85111 . 85120) . ((semantic-list "(FIXNUMP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XFIXNUM (x) : 0 <= XFIXNUM (x)) \\
   && XFIXNUM (x) <= TYPE_MAXIMUM (type))" 85125 . 85274)))
          ("CHECK_TYPE_RANGED_INTEGER" (spp-arg-list ("type" "x") 87358 . 87367) . 
              ((DO "do" 87372 . 87374) (semantic-list "{									\\
    if (TYPE_SIGNED (type))						\\
      CHECK_RANGED_INTEGER (x, TYPE_MINIMUM (type), TYPE_MAXIMUM (type)); \\
    else								\\
      CHECK_RANGED_INTEGER (x, 0, TYPE_MAXIMUM (type));			\\
  }" 87375 . 87579) (WHILE "while" 87580 . 87585) (semantic-list "(false)" 87586 . 87593)))
          ("IS_DAEMON" . ((semantic-list "(daemon_type != 0)" 137280 . 137298)))
          ("SAFE_FREE" (spp-arg-list nil 148690 . 148692) . ((symbol "safe_free" 148693 . 148702) (semantic-list "(sa_count)" 148703 . 148713)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 152590 . 152602) . 
              ((symbol "Lisp_Object" 152603 . 152614) (symbol "name" 152615 . 152619) (punctuation "=" 152620 . 152621) (symbol "AUTO_CONS_EXPR" 152622 . 152636) (semantic-list "(a, b)" 152637 . 152643)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 152770 . 152782) . 
              ((symbol "Lisp_Object" 152792 . 152803) (symbol "name" 152804 . 152808) (punctuation "=" 152809 . 152810) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 152811 . 152906)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 154129 . 154145) . 
              ((symbol "Lisp_Object" 154153 . 154164) (symbol "name" 154165 . 154169) (punctuation "=" 154170 . 154171) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(struct Lisp_String) {{{len, -1, 0, (unsigned char *) (str)}}}), \\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 154184 . 154373)))
          ("FOR_EACH_TAIL_SAFE" (spp-arg-list ("tail") 155194 . 155200) . ((symbol "FOR_EACH_TAIL_INTERNAL" 155205 . 155227) (semantic-list "(tail, (void) ((tail) = Qnil), false)" 155228 . 155265)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 156634 . 156665) . ((FOR "for" 156671 . 156674) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 156675 . 156821)))
          )
)
    (semanticdb-table "semanticdb-table-1af59d4"
      :major-mode c-mode
      :tags 
        '( ("DYNLIB_H" variable (:constant-flag t) nil [758 766])
            ("stdbool.h" include (:system-flag t) nil [768 788])
            ("dynlib_handle_ptr" type
               (:typedef ("void")
                :pointer 1
                :type "typedef")
                nil [790 822])
            ("dynlib_open" function
               (:prototype-flag t
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [854 871]))                  
                :type ("dynlib_handle_ptr" type (:type "class") nil nil))
                nil [823 872])
            ("dynlib_close" function
               (:prototype-flag t
                :arguments 
                  ( ("h" variable (:type ("dynlib_handle_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [891 911]))                  
                :type "int")
                nil [873 912])
            ("dynlib_error" function
               (:prototype-flag t
                :pointer 1
                :constant-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [939 944]))                  
                :type "char")
                nil [913 945])
            ("dynlib_sym" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("h" variable (:type ("dynlib_handle_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [985 1005])
                    ("sym" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1006 1022]))                  
                :type "void")
                nil [967 1023])
            ("dynlib_func" function
               (:prototype-flag t
                :arguments 
                  ( ("h" variable (:type ("dynlib_handle_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1151 1171])
                    ("sym" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1172 1188]))                  
                :type ("dynlib_function_ptr" type (:type "class") nil nil))
                nil [1118 1189])
            ("dynlib_addr" function
               (:prototype-flag t
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1399 1409])
                    ("file" variable
                       (:pointer 2
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1410 1428])
                    ("sym" variable
                       (:pointer 2
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1429 1446]))                  
                :type "void")
                nil [1381 1447]))          
      :file "dynlib.h"
      :pointmax 1471
      :fsize 1470
      :lastmodtime '(23443 29219 999866 517000)
      :unmatched-syntax '((punctuation 1116 . 1117) (semantic-list 1110 . 1116) (semantic-list 1067 . 1109) (punctuation 1066 . 1067) (symbol 1040 . 1065) (STRUCT 1033 . 1039) (TYPEDEF 1025 . 1032) (symbol 947 . 966))
      :lexical-table 
        '(("DYNLIB_H")
          )
)
    (semanticdb-table "semanticdb-table-1afad00"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CODING_H" variable (:constant-flag t) nil [1139 1153])
            ("lisp.h" include nil nil [1155 1172])
            ("define_coding_system_arg_index" type
               (:members 
                  ( ("coding_arg_name" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1301 1317])
                    ("coding_arg_mnemonic" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1322 1342])
                    ("coding_arg_coding_type" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1347 1370])
                    ("coding_arg_charset_list" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1375 1399])
                    ("coding_arg_ascii_compatible_p" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1404 1434])
                    ("coding_arg_decode_translation_table" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1439 1475])
                    ("coding_arg_encode_translation_table" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1480 1516])
                    ("coding_arg_post_read_conversion" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1521 1553])
                    ("coding_arg_pre_write_conversion" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1558 1590])
                    ("coding_arg_default_char" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1595 1619])
                    ("coding_arg_for_unibyte" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1624 1647])
                    ("coding_arg_plist" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1652 1669])
                    ("coding_arg_eol_type" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1674 1694])
                    ("coding_arg_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1699 1717]))                  
                :type "enum")
                nil [1257 1718])
            ("define_coding_iso2022_arg_index" type
               (:members 
                  ( ("coding_arg_iso2022_initial" variable
                       (:constant-flag t
                        :default-value (1794 1808)
                        :type "int")
                        (reparse-symbol enumsubparts) [1765 1808])
                    ("coding_arg_iso2022_reg_usage" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1814 1843])
                    ("coding_arg_iso2022_request" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1848 1875])
                    ("coding_arg_iso2022_flags" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1880 1905])
                    ("coding_arg_iso2022_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1910 1936]))                  
                :type "enum")
                nil [1720 1937])
            ("define_coding_utf8_arg_index" type
               (:members 
                  ( ("coding_arg_utf8_bom" variable
                       (:constant-flag t
                        :default-value (2003 2017)
                        :type "int")
                        (reparse-symbol enumsubparts) [1981 2017])
                    ("coding_arg_utf8_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2023 2046]))                  
                :type "enum")
                nil [1939 2047])
            ("define_coding_utf16_arg_index" type
               (:members 
                  ( ("coding_arg_utf16_bom" variable
                       (:constant-flag t
                        :default-value (2115 2129)
                        :type "int")
                        (reparse-symbol enumsubparts) [2092 2129])
                    ("coding_arg_utf16_endian" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2135 2159])
                    ("coding_arg_utf16_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2164 2188]))                  
                :type "enum")
                nil [2049 2189])
            ("define_coding_ccl_arg_index" type
               (:members 
                  ( ("coding_arg_ccl_decoder" variable
                       (:constant-flag t
                        :default-value (2257 2271)
                        :type "int")
                        (reparse-symbol enumsubparts) [2232 2271])
                    ("coding_arg_ccl_encoder" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2277 2300])
                    ("coding_arg_ccl_valids" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2305 2327])
                    ("coding_arg_ccl_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2332 2354]))                  
                :type "enum")
                nil [2191 2355])
            ("define_coding_undecided_arg_index" type
               (:members 
                  ( ("coding_arg_undecided_inhibit_null_byte_detection" variable
                       (:constant-flag t
                        :default-value (2455 2469)
                        :type "int")
                        (reparse-symbol enumsubparts) [2404 2469])
                    ("coding_arg_undecided_inhibit_iso_escape_detection" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2475 2525])
                    ("coding_arg_undecided_prefer_utf_8" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2530 2564])
                    ("coding_arg_undecided_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2569 2597]))                  
                :type "enum")
                nil [2357 2598])
            ("Vcoding_system_hash_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3001 3046])
            ("coding_attr_index" type
               (:members 
                  ( ("coding_attr_base_name" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3152 3174])
                    ("coding_attr_docstring" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3179 3201])
                    ("coding_attr_mnemonic" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3206 3227])
                    ("coding_attr_type" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3232 3249])
                    ("coding_attr_charset_list" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3254 3279])
                    ("coding_attr_ascii_compat" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3284 3309])
                    ("coding_attr_decode_tbl" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3314 3337])
                    ("coding_attr_encode_tbl" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3342 3365])
                    ("coding_attr_trans_tbl" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3370 3392])
                    ("coding_attr_post_read" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3397 3419])
                    ("coding_attr_pre_write" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3424 3446])
                    ("coding_attr_default_char" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3451 3476])
                    ("coding_attr_for_unibyte" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3481 3505])
                    ("coding_attr_plist" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3510 3528])
                    ("coding_attr_category" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3534 3555])
                    ("coding_attr_safe_charsets" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3560 3586])
                    ("coding_attr_charset_valids" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3654 3681])
                    ("coding_attr_ccl_decoder" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3687 3711])
                    ("coding_attr_ccl_encoder" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3716 3740])
                    ("coding_attr_ccl_valids" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3745 3768])
                    ("coding_attr_iso_initial" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3774 3798])
                    ("coding_attr_iso_usage" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3803 3825])
                    ("coding_attr_iso_request" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3830 3854])
                    ("coding_attr_iso_flags" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3859 3881])
                    ("coding_attr_utf_bom" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3887 3907])
                    ("coding_attr_utf_16_endian" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3912 3938])
                    ("coding_attr_emacs_mule_full" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3944 3972])
                    ("coding_attr_undecided_inhibit_null_byte_detection" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3978 4028])
                    ("coding_attr_undecided_inhibit_iso_escape_detection" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4033 4084])
                    ("coding_attr_undecided_prefer_utf_8" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4089 4124])
                    ("coding_attr_last_index" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4130 4156]))                  
                :type "enum")
                nil [3121 4157])
            ("CODING_ATTR_BASE_NAME" variable (:constant-flag t) nil [4228 4249])
            ("CODING_ATTR_TYPE" variable (:constant-flag t) nil [4301 4317])
            ("CODING_ATTR_CHARSET_LIST" variable (:constant-flag t) nil [4365 4389])
            ("CODING_ATTR_MNEMONIC" variable (:constant-flag t) nil [4444 4464])
            ("CODING_ATTR_DOCSTRING" variable (:constant-flag t) nil [4515 4536])
            ("CODING_ATTR_ASCII_COMPAT" variable (:constant-flag t) nil [4588 4612])
            ("CODING_ATTR_DECODE_TBL" variable (:constant-flag t) nil [4667 4689])
            ("CODING_ATTR_ENCODE_TBL" variable (:constant-flag t) nil [4742 4764])
            ("CODING_ATTR_TRANS_TBL" variable (:constant-flag t) nil [4817 4838])
            ("CODING_ATTR_POST_READ" variable (:constant-flag t) nil [4890 4911])
            ("CODING_ATTR_PRE_WRITE" variable (:constant-flag t) nil [4963 4984])
            ("CODING_ATTR_DEFAULT_CHAR" variable (:constant-flag t) nil [5036 5060])
            ("CODING_ATTR_FOR_UNIBYTE" variable (:constant-flag t) nil [5115 5138])
            ("CODING_ATTR_PLIST" variable (:constant-flag t) nil [5192 5209])
            ("CODING_ATTR_CATEGORY" variable (:constant-flag t) nil [5257 5277])
            ("CODING_ATTR_SAFE_CHARSETS" variable (:constant-flag t) nil [5328 5353])
            ("CODING_ID_NAME" variable (:constant-flag t) nil [5469 5483])
            ("CODING_ID_ATTRS" variable (:constant-flag t) nil [5630 5645])
            ("CODING_ID_ALIASES" variable (:constant-flag t) nil [5803 5820])
            ("CODING_ID_EOL_TYPE" variable (:constant-flag t) nil [5971 5989])
            ("CODING_SYSTEM_SPEC" variable (:constant-flag t) nil [6133 6151])
            ("CODING_SYSTEM_ID" variable (:constant-flag t) nil [6302 6318])
            ("CODING_SYSTEM_P" variable (:constant-flag t) nil [6513 6528])
            ("CHECK_CODING_SYSTEM" variable (:constant-flag t) nil [6762 6781])
            ("CHECK_CODING_SYSTEM_GET_SPEC" variable (:constant-flag t) nil [7073 7101])
            ("CHECK_CODING_SYSTEM_GET_ID" variable (:constant-flag t) nil [7501 7527])
            ("coding_result_code" type
               (:members 
                  ( ("CODING_RESULT_SUCCESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7930 7952])
                    ("CODING_RESULT_INSUFFICIENT_SRC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7957 7988])
                    ("CODING_RESULT_INSUFFICIENT_DST" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7993 8024])
                    ("CODING_RESULT_INVALID_SRC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8029 8055])
                    ("CODING_RESULT_INTERRUPT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8060 8087]))                  
                :type "enum")
                nil [7898 8088])
            ("CODING_MODE_LAST_BLOCK" variable (:constant-flag t) nil [8336 8358])
            ("CODING_MODE_SELECTIVE_DISPLAY" variable (:constant-flag t) nil [8479 8508])
            ("CODING_MODE_DIRECTION" variable (:constant-flag t) nil [8660 8681])
            ("CODING_MODE_FIXED_DESTINATION" variable (:constant-flag t) nil [8698 8727])
            ("CODING_MODE_SAFE_ENCODING" variable (:constant-flag t) nil [8875 8900])
            ("composite.h" include nil nil [8952 8974])
            ("composition_state" type
               (:members 
                  ( ("COMPOSING_NO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9007 9020])
                    ("COMPOSING_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9025 9040])
                    ("COMPOSING_RULE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9045 9060])
                    ("COMPOSING_COMPONENT_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9065 9090])
                    ("COMPOSING_COMPONENT_RULE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9095 9123]))                  
                :type "enum")
                nil [8976 9124])
            ("composition_status" type
               (:members 
                  ( ("state" variable (:type ("composition_state" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [9209 9238])
                    ("method" variable (:type ("composition_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [9241 9272])
                    ("old_form" variable (:type "bool") (reparse-symbol classsubparts) [9275 9289])
                    ("length" variable (:type "int") (reparse-symbol classsubparts) [9320 9331])
                    ("nchars" variable (:type "int") (reparse-symbol classsubparts) [9382 9393])
                    ("ncomps" variable (:type "int") (reparse-symbol classsubparts) [9435 9446])
                    ("carryover" variable (:type "int") (reparse-symbol classsubparts) [9603 9796]))                  
                :type "struct")
                nil [9179 9799])
            ("iso_2022_spec" type
               (:members 
                  ( ("flags" variable (:type "unsigned int") (reparse-symbol classsubparts) [9955 9970])
                    ("current_invocation" variable
                       (:dereference 1
                        :type "int")
                        (reparse-symbol classsubparts) [10043 10069])
                    ("current_designation" variable
                       (:dereference 1
                        :type "int")
                        (reparse-symbol classsubparts) [10260 10287])
                    ("ctext_extended_segment_len" variable (:type "int") (reparse-symbol classsubparts) [10357 10388])
                    ("single_shifting" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10500 10528])
                    ("bol" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10601 10617])
                    ("embedded_utf_8" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10684 10711])
                    ("cmp_status" variable (:type ("composition_status" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [10749 10786]))                  
                :type "struct")
                nil [9885 10789])
            ("emacs_mule_spec" type
               (:members 
                  ( ("cmp_status" variable (:type ("composition_status" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [10818 10855]))                  
                :type "struct")
                nil [10791 10858])
            ("undecided_spec" type
               (:members 
                  ( ("inhibit_nbd" variable (:type "int") (reparse-symbol classsubparts) [11010 11026])
                    ("inhibit_ied" variable (:type "int") (reparse-symbol classsubparts) [11089 11105])
                    ("prefer_utf_8" variable (:type "bool") (reparse-symbol classsubparts) [11172 11190]))                  
                :type "struct")
                nil [10860 11193])
            ("utf_bom_type" type
               (:members 
                  ( ("utf_detect_bom" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [11221 11236])
                    ("utf_without_bom" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [11241 11257])
                    ("utf_with_bom" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [11262 11278]))                  
                :type "enum")
                nil [11195 11279])
            ("utf_16_endian_type" type
               (:members 
                  ( ("utf_16_big_endian" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [11313 11331])
                    ("utf_16_little_endian" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [11336 11360]))                  
                :type "enum")
                nil [11281 11361])
            ("utf_16_spec" type
               (:members 
                  ( ("bom" variable (:type ("utf_bom_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [11386 11408])
                    ("endian" variable (:type ("utf_16_endian_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [11411 11442])
                    ("surrogate" variable (:type "int") (reparse-symbol classsubparts) [11445 11459]))                  
                :type "struct")
                nil [11363 11462])
            ("coding_detection_info" type
               (:members 
                  ( ("checked" variable (:type "int") (reparse-symbol classsubparts) [11615 11627])
                    ("found" variable (:type "int") (reparse-symbol classsubparts) [11676 11686])
                    ("rejected" variable (:type "int") (reparse-symbol classsubparts) [11729 11742]))                  
                :type "struct")
                nil [11464 11745])
            ("coding_system" type
               (:members 
                  ( ("id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [12078 12091])
                    ("common_flags" variable
                       (:suffix ":14"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [12208 12235])
                    ("mode" variable
                       (:suffix ":5"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [12334 12352])
                    ("src_multibyte" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12642 12668])
                    ("dst_multibyte" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12671 12697])
                    ("chars_at_source" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12801 12829])
                    ("raw_destination" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12939 12967])
                    ("annotated" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13027 13049])
                    ("eol_seen" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [13125 13147])
                    ("result" variable
                       (:suffix ":3"
                        :type "int")
                        (reparse-symbol classsubparts) [13223 13234])
                    ("max_charset_id" variable (:type "int") (reparse-symbol classsubparts) [13238 13257])
                    ("spec" variable (:type ("" type
                         (:members 
                            ( ("iso_2022" variable (:type ("iso_2022_spec" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [13349 13379])
                              ("ccl" variable
                                 (:pointer 1
                                  :type ("ccl_spec" type
                                       (:prototype t
                                        :type "struct")
                                        nil nil))
                                  (reparse-symbol classsubparts) [13386 13407])
                              ("utf_16" variable (:type ("utf_16_spec" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [13439 13465])
                              ("utf_8_bom" variable (:type ("utf_bom_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [13472 13500])
                              ("emacs_mule" variable (:type ("emacs_mule_spec" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [13507 13541])
                              ("undecided" variable (:type ("undecided_spec" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [13548 13580]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [13331 13592])
                    ("safe_charsets" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [13596 13625])
                    ("head_ascii" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [13920 13941])
                    ("detected_utf8_bytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14061 14112])
                    ("detected_utf8_chars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14061 14112])
                    ("produced" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14185 14244])
                    ("produced_char" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14185 14244])
                    ("consumed" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14185 14244])
                    ("consumed_char" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14185 14244])
                    ("src_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14248 14302])
                    ("src_pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14248 14302])
                    ("src_chars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14248 14302])
                    ("src_bytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14248 14302])
                    ("src_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14305 14328])
                    ("source" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [14331 14359])
                    ("dst_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14363 14406])
                    ("dst_pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14363 14406])
                    ("dst_bytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14363 14406])
                    ("dst_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14409 14432])
                    ("destination" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [14435 14462])
                    ("charbuf" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol classsubparts) [15048 15061])
                    ("charbuf_size" variable (:type "int") (reparse-symbol classsubparts) [15064 15095])
                    ("charbuf_used" variable (:type "int") (reparse-symbol classsubparts) [15064 15095])
                    ("carryover" variable
                       (:dereference 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [15099 15127])
                    ("carryover_bytes" variable (:type "int") (reparse-symbol classsubparts) [15130 15150])
                    ("default_char" variable (:type "int") (reparse-symbol classsubparts) [15154 15171])
                    ("detector" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("coding_system" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [15193 15216])
                            ("" variable
                               (:pointer 1
                                :type ("coding_detection_info" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [15217 15248]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [15175 15249])
                    ("decoder" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("coding_system" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [15269 15292]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [15252 15293])
                    ("encoder" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("coding_system" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [15313 15336]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [15296 15337]))                  
                :type "struct")
                nil [11748 15340])
            ("CODING_ANNOTATION_MASK" variable (:constant-flag t) nil [15539 15561])
            ("CODING_ANNOTATE_COMPOSITION_MASK" variable (:constant-flag t) nil [15579 15611])
            ("CODING_ANNOTATE_DIRECTION_MASK" variable (:constant-flag t) nil [15627 15657])
            ("CODING_ANNOTATE_CHARSET_MASK" variable (:constant-flag t) nil [15674 15702])
            ("CODING_FOR_UNIBYTE_MASK" variable (:constant-flag t) nil [15719 15742])
            ("CODING_REQUIRE_FLUSHING_MASK" variable (:constant-flag t) nil [15760 15788])
            ("CODING_REQUIRE_DECODING_MASK" variable (:constant-flag t) nil [15805 15833])
            ("CODING_REQUIRE_ENCODING_MASK" variable (:constant-flag t) nil [15850 15878])
            ("CODING_REQUIRE_DETECTION_MASK" variable (:constant-flag t) nil [15895 15924])
            ("CODING_RESET_AT_BOL_MASK" variable (:constant-flag t) nil [15941 15965])
            ("CODING_REQUIRE_ANNOTATION" variable (:constant-flag t) nil [16067 16092])
            ("CODING_FOR_UNIBYTE" variable (:constant-flag t) nil [16249 16267])
            ("CODING_REQUIRE_FLUSHING" variable (:constant-flag t) nil [16463 16486])
            ("CODING_REQUIRE_DECODING" variable (:constant-flag t) nil [16656 16679])
            ("CODING_REQUIRE_ENCODING" variable (:constant-flag t) nil [17075 17098])
            ("CODING_REQUIRE_DETECTION" variable (:constant-flag t) nil [17363 17387])
            ("CODING_MAY_REQUIRE_DECODING" variable (:constant-flag t) nil [17589 17616])
            ("SJIS_TO_JIS" variable (:constant-flag t) nil [17947 17958])
            ("SJIS_TO_JIS2" variable (:constant-flag t) nil [18368 18380])
            ("JIS_TO_SJIS" variable (:constant-flag t) nil [19024 19035])
            ("JIS_TO_SJIS2" variable (:constant-flag t) nil [19431 19443])
            ("ENCODE_FILE" variable (:constant-flag t) nil [20168 20179])
            ("DECODE_FILE" variable (:constant-flag t) nil [20314 20325])
            ("ENCODE_SYSTEM" variable (:constant-flag t) nil [20462 20475])
            ("DECODE_SYSTEM" variable (:constant-flag t) nil [20723 20736])
            ("ENCODE_UTF_8" variable (:constant-flag t) nil [20964 20976])
            ("UTF_16_HIGH_SURROGATE_P" variable (:constant-flag t) nil [21124 21147])
            ("UTF_16_LOW_SURROGATE_P" variable (:constant-flag t) nil [21278 21300])
            ("code_conversion_save" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21409 21414])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21415 21420]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21368 21421])
            ("encode_coding_utf_8" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [21455 21478]))                  
                :type "bool")
                nil [21422 21479])
            ("utf8_string_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21507 21519]))                  
                :type "bool")
                nil [21480 21520])
            ("setup_coding_system" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21554 21566])
                    ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [21567 21590]))                  
                :type "void")
                nil [21521 21591])
            ("coding_charset_list" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [21632 21655]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21592 21656])
            ("coding_system_charset_list" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21704 21716]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21657 21717])
            ("code_convert_string" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21758 21770])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21771 21783])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21824 21836])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21837 21842])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21843 21848])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21849 21854]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21718 21855])
            ("code_convert_string_norecord" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21905 21917])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21918 21930])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21980 21985]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21856 21986])
            ("encode_file_name" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22024 22036]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21987 22037])
            ("decode_file_name" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22075 22087]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [22038 22088])
            ("raw_text_coding_system" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22132 22144]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [22089 22145])
            ("raw_text_coding_system_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22184 22207]))                  
                :type "bool")
                nil [22146 22208])
            ("coding_inherit_eol_type" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22253 22265])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22266 22278]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [22209 22279])
            ("complement_process_encoding_system" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22335 22347]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [22280 22348])
            ("decode_coding_gap" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22381 22404])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22415 22425])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22426 22436]))                  
                :type "void")
                nil [22350 22437])
            ("decode_coding_object" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22472 22495])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22530 22542])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22543 22553])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22554 22564])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22599 22609])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22610 22620])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22621 22633]))                  
                :type "void")
                nil [22438 22634])
            ("encode_coding_object" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22669 22692])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22727 22739])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22740 22750])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22751 22761])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22796 22806])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22807 22817])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22818 22830]))                  
                :type "void")
                nil [22635 22831])
            ("surrogates_to_codepoint" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [22897 22901])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [22902 22906]))                  
                :type "int")
                nil [22868 22907])
            ("encode_coding_string" variable (:constant-flag t) nil [24010 24030])
            ("decode_coding_c_string" variable (:constant-flag t) nil [24245 24267])
            ("surrogates_to_codepoint" function
               (:arguments 
                  ( ("low" variable (:type "int") (reparse-symbol arg-sub-list) [24637 24645])
                    ("high" variable (:type "int") (reparse-symbol arg-sub-list) [24646 24655]))                  
                :type "int")
                nil [24608 24888])
            ("preferred_coding_system" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [24934 24939]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [24890 24940])
            ("emacs_mule_bytes" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [25123 25157]))          
      :file "coding.h"
      :pointmax 25206
      :fsize 25205
      :lastmodtime '(23443 29219 986541 894000)
      :unmatched-syntax '((symbol 25159 . 25176) (symbol 24601 . 24607) (symbol 22861 . 22867) (semantic-list 13202 . 13222) (symbol 13194 . 13201) (symbol 1174 . 1193))
      :lexical-table 
        '(("CODING_ATTR_ASCII_COMPAT" (spp-arg-list ("attrs") 4612 . 4619) . ((symbol "AREF" 4620 . 4624) (semantic-list "(attrs, coding_attr_ascii_compat)" 4625 . 4658)))
          ("CODING_ANNOTATE_COMPOSITION_MASK" . ((number "0x0001" 15612 . 15618)))
          ("CODING_REQUIRE_FLUSHING_MASK" . ((number "0x0200" 15790 . 15796)))
          ("SJIS_TO_JIS" (spp-arg-list ("code") 17958 . 17964) . 
              ((DO "do" 17972 . 17974) (semantic-list "{							\\
    int s1, s2, j1, j2;					\\
							\\
    s1 = (code) >> 8, s2 = (code) & 0xFF;		\\
							\\
    if (s2 >= 0x9F)					\\
      (j1 = s1 * 2 - (s1 >= 0xE0 ? 0x160 : 0xE0),	\\
       j2 = s2 - 0x7E);					\\
    else						\\
      (j1 = s1 * 2 - ((s1 >= 0xE0) ? 0x161 : 0xE1),	\\
       j2 = s2 - ((s2 >= 0x7F) ? 0x20 : 0x1F));		\\
    (code) = (j1 << 8) | j2;				\\
  }" 17975 . 18344) (WHILE "while" 18345 . 18350) (semantic-list "(false)" 18351 . 18358)))
          ("JIS_TO_SJIS" (spp-arg-list ("code") 19035 . 19041) . 
              ((DO "do" 19049 . 19051) (semantic-list "{							\\
    int s1, s2, j1, j2;					\\
							\\
    j1 = (code) >> 8, j2 = (code) & 0xFF;		\\
    if (j1 & 1)						\\
      (s1 = j1 / 2 + ((j1 < 0x5F) ? 0x71 : 0xB1),	\\
       s2 = j2 + ((j2 >= 0x60) ? 0x20 : 0x1F));		\\
    else						\\
      (s1 = j1 / 2 + ((j1 < 0x5F) ? 0x70 : 0xB0),	\\
       s2 = j2 + 0x7E);					\\
    (code) = (s1 << 8) | s2;				\\
  }" 19052 . 19407) (WHILE "while" 19408 . 19413) (semantic-list "(false)" 19414 . 19421)))
          ("CODING_REQUIRE_ENCODING_MASK" . ((number "0x0800" 15880 . 15886)))
          ("CODING_RESET_AT_BOL_MASK" . ((number "0x2000" 15967 . 15973)))
          ("CODING_ATTR_ENCODE_TBL" (spp-arg-list ("attrs") 4764 . 4771) . ((symbol "AREF" 4772 . 4776) (semantic-list "(attrs, coding_attr_encode_tbl)" 4777 . 4808)))
          ("CODING_ID_EOL_TYPE" (spp-arg-list ("id") 5989 . 5993) . ((semantic-list "(AREF (HASH_VALUE (XHASH_TABLE (Vcoding_system_hash_table), id), 2))" 5998 . 6066)))
          ("CODING_SYSTEM_SPEC" (spp-arg-list ("coding_system_symbol") 6151 . 6173) . ((semantic-list "(Fgethash (coding_system_symbol, Vcoding_system_hash_table, Qnil))" 6178 . 6244)))
          ("CODING_SYSTEM_P" (spp-arg-list ("coding_system_symbol") 6528 . 6550) . ((semantic-list "(CODING_SYSTEM_ID (coding_system_symbol) >= 0		\\
   || (! NILP (coding_system_symbol)			\\
       && ! NILP (Fcoding_system_p (coding_system_symbol))))" 6556 . 6706)))
          ("CODING_MODE_SAFE_ENCODING" . ((number "0x10" 8902 . 8906)))
          ("CODING_ANNOTATION_MASK" . ((number "0x00FF" 15564 . 15570)))
          ("ENCODE_UTF_8" (spp-arg-list ("str") 20976 . 20981) . ((symbol "code_convert_string_norecord" 20982 . 21010) (semantic-list "(str, Qutf_8, true)" 21011 . 21030)))
          ("decode_coding_c_string" (spp-arg-list ("coding" "src" "bytes" "dst_object") 24267 . 24299) . 
              ((DO "do" 24305 . 24307) (semantic-list "{									\\
    (coding)->source = (src);						\\
    (coding)->src_chars = (coding)->src_bytes = (bytes);		\\
    decode_coding_object ((coding), Qnil, 0, 0, (bytes), (bytes),	\\
			  (dst_object));				\\
  }" 24308 . 24513) (WHILE "while" 24514 . 24519) (semantic-list "(false)" 24520 . 24527)))
          ("CODING_ID_NAME" (spp-arg-list ("id") 5483 . 5487) . ((semantic-list "(HASH_KEY (XHASH_TABLE (Vcoding_system_hash_table), id))" 5492 . 5548)))
          ("CHECK_CODING_SYSTEM_GET_ID" (spp-arg-list ("x" "id") 7527 . 7534) . 
              ((DO "do" 7541 . 7543) (semantic-list "{								\\
      id = CODING_SYSTEM_ID (x);				\\
      if (id < 0)						\\
	{							\\
	  Fcheck_coding_system (x);				\\
	  id = CODING_SYSTEM_ID (x);				\\
	}							\\
      if (id < 0)						\\
	wrong_type_argument (Qcoding_system_p, (x));	\\
    }" 7557 . 7800) (WHILE "while" 7801 . 7806) (semantic-list "(false)" 7807 . 7814)))
          ("CODING_MODE_FIXED_DESTINATION" . ((number "0x08" 8729 . 8733)))
          ("CODING_ANNOTATE_CHARSET_MASK" . ((number "0x0003" 15704 . 15710)))
          ("CODING_FOR_UNIBYTE_MASK" . ((number "0x0100" 15745 . 15751)))
          ("CODING_MAY_REQUIRE_DECODING" (spp-arg-list ("coding") 17616 . 17624) . ((semantic-list "(CODING_REQUIRE_DECODING (coding)		\\
   || CODING_REQUIRE_DETECTION (coding))" 17629 . 17706)))
          ("ENCODE_FILE" (spp-arg-list ("NAME") 20179 . 20185) . ((symbol "encode_file_name" 20187 . 20203) (semantic-list "(NAME)" 20204 . 20210)))
          ("DECODE_SYSTEM" (spp-arg-list ("str") 20736 . 20741) . ((semantic-list "(! NILP (Vlocale_coding_system)					   \\
   ? code_convert_string_norecord (str, Vlocale_coding_system, false)	   \\
   : str)" 20754 . 20879)))
          ("CODING_ATTR_POST_READ" (spp-arg-list ("attrs") 4911 . 4918) . ((symbol "AREF" 4919 . 4923) (semantic-list "(attrs, coding_attr_post_read)" 4924 . 4954)))
          ("CODING_ID_ALIASES" (spp-arg-list ("id") 5820 . 5824) . ((semantic-list "(AREF (HASH_VALUE (XHASH_TABLE (Vcoding_system_hash_table), id), 1))" 5829 . 5897)))
          ("CHECK_CODING_SYSTEM_GET_SPEC" (spp-arg-list ("x" "spec") 7101 . 7110) . 
              ((DO "do" 7116 . 7118) (semantic-list "{							\\
    spec = CODING_SYSTEM_SPEC (x);			\\
    if (NILP (spec))					\\
      {							\\
	Fcheck_coding_system (x);			\\
	spec = CODING_SYSTEM_SPEC (x);			\\
      }							\\
    if (NILP (spec))					\\
      wrong_type_argument (Qcoding_system_p, (x));	\\
  }" 7119 . 7377) (WHILE "while" 7378 . 7383) (semantic-list "(false)" 7384 . 7391)))
          ("CODING_REQUIRE_DETECTION_MASK" . ((number "0x1000" 15926 . 15932)))
          ("DECODE_FILE" (spp-arg-list ("NAME") 20325 . 20331) . ((symbol "decode_file_name" 20333 . 20349) (semantic-list "(NAME)" 20350 . 20356)))
          ("CODING_ID_ATTRS" (spp-arg-list ("id") 5645 . 5649) . ((semantic-list "(AREF (HASH_VALUE (XHASH_TABLE (Vcoding_system_hash_table), id), 0))" 5654 . 5722)))
          ("CODING_ATTR_MNEMONIC" (spp-arg-list ("attrs") 4464 . 4471) . ((symbol "AREF" 4472 . 4476) (semantic-list "(attrs, coding_attr_mnemonic)" 4477 . 4506)))
          ("CODING_SYSTEM_ID" (spp-arg-list ("coding_system_symbol") 6318 . 6340) . ((symbol "hash_lookup" 6347 . 6358) (semantic-list "(XHASH_TABLE (Vcoding_system_hash_table),		\\
	       coding_system_symbol, NULL)" 6359 . 6439)))
          ("CODING_REQUIRE_ANNOTATION" (spp-arg-list ("coding") 16092 . 16100) . ((semantic-list "((coding)->common_flags & CODING_ANNOTATION_MASK)" 16105 . 16154)))
          ("CODING_REQUIRE_FLUSHING" (spp-arg-list ("coding") 16486 . 16494) . ((semantic-list "((coding)->common_flags & CODING_REQUIRE_FLUSHING_MASK)" 16499 . 16554)))
          ("UTF_16_LOW_SURROGATE_P" (spp-arg-list ("val") 21300 . 21305) . ((semantic-list "(((val) & 0xFC00) == 0xDC00)" 21310 . 21338)))
          ("EMACS_CODING_H")
          ("CODING_ATTR_DOCSTRING" (spp-arg-list ("attrs") 4536 . 4543) . ((symbol "AREF" 4544 . 4548) (semantic-list "(attrs, coding_attr_docstring)" 4549 . 4579)))
          ("CODING_ATTR_FOR_UNIBYTE" (spp-arg-list ("attrs") 5138 . 5145) . ((symbol "AREF" 5146 . 5150) (semantic-list "(attrs, coding_attr_for_unibyte)" 5151 . 5183)))
          ("CODING_ATTR_PLIST" (spp-arg-list ("attrs") 5209 . 5216) . ((symbol "AREF" 5217 . 5221) (semantic-list "(attrs, coding_attr_plist)" 5222 . 5248)))
          ("CODING_ATTR_CATEGORY" (spp-arg-list ("attrs") 5277 . 5284) . ((symbol "AREF" 5285 . 5289) (semantic-list "(attrs, coding_attr_category)" 5290 . 5319)))
          ("ENCODE_SYSTEM" (spp-arg-list ("str") 20475 . 20480) . ((semantic-list "(! NILP (Vlocale_coding_system)					   \\
   ? code_convert_string_norecord (str, Vlocale_coding_system, true)	   \\
   : str)" 20493 . 20617)))
          ("CODING_ATTR_TYPE" (spp-arg-list ("attrs") 4317 . 4324) . ((symbol "AREF" 4326 . 4330) (semantic-list "(attrs, coding_attr_type)" 4331 . 4356)))
          ("CODING_FOR_UNIBYTE" (spp-arg-list ("coding") 16267 . 16275) . ((semantic-list "((coding)->common_flags & CODING_FOR_UNIBYTE_MASK)" 16280 . 16330)))
          ("CODING_ATTR_TRANS_TBL" (spp-arg-list ("attrs") 4838 . 4845) . ((symbol "AREF" 4846 . 4850) (semantic-list "(attrs, coding_attr_trans_tbl)" 4851 . 4881)))
          ("CODING_ANNOTATE_DIRECTION_MASK" . ((number "0x0002" 15659 . 15665)))
          ("CODING_REQUIRE_ENCODING" (spp-arg-list ("coding") 17098 . 17106) . ((semantic-list "((coding)->src_multibyte					\\
   || (coding)->common_flags & CODING_REQUIRE_ENCODING_MASK	\\
   || (coding)->mode & CODING_MODE_SELECTIVE_DISPLAY)" 17114 . 17260)))
          ("CODING_ATTR_BASE_NAME" (spp-arg-list ("attrs") 4249 . 4256) . ((symbol "AREF" 4257 . 4261) (semantic-list "(attrs, coding_attr_base_name)" 4262 . 4292)))
          ("CODING_REQUIRE_DECODING_MASK" . ((number "0x0400" 15835 . 15841)))
          ("CODING_REQUIRE_DECODING" (spp-arg-list ("coding") 16679 . 16687) . ((semantic-list "((coding)->dst_multibyte		\\
   || (coding)->common_flags & CODING_REQUIRE_DECODING_MASK)" 16692 . 16780)))
          ("CODING_REQUIRE_DETECTION" (spp-arg-list ("coding") 17387 . 17395) . ((semantic-list "((coding)->common_flags & CODING_REQUIRE_DETECTION_MASK)" 17400 . 17456)))
          ("CODING_ATTR_DECODE_TBL" (spp-arg-list ("attrs") 4689 . 4696) . ((symbol "AREF" 4697 . 4701) (semantic-list "(attrs, coding_attr_decode_tbl)" 4702 . 4733)))
          ("CODING_ATTR_DEFAULT_CHAR" (spp-arg-list ("attrs") 5060 . 5067) . ((symbol "AREF" 5068 . 5072) (semantic-list "(attrs, coding_attr_default_char)" 5073 . 5106)))
          ("SJIS_TO_JIS2" (spp-arg-list ("code") 18380 . 18386) . 
              ((DO "do" 18394 . 18396) (semantic-list "{							\\
    int s1, s2, j1, j2;					\\
							\\
    s1 = (code) >> 8, s2 = (code) & 0xFF;		\\
							\\
    if (s2 >= 0x9F)					\\
      {							\\
	j1 = (s1 == 0xF0 ? 0x28				\\
	      : s1 == 0xF1 ? 0x24			\\
	      : s1 == 0xF2 ? 0x2C			\\
	      : s1 == 0xF3 ? 0x2E			\\
	      : 0x6E + (s1 - 0xF4) * 2);		\\
	j2 = s2 - 0x7E;					\\
      }							\\
    else						\\
      {							\\
	j1 = (s1 <= 0xF2 ? 0x21 + (s1 - 0xF0) * 2	\\
	      : s1 <= 0xF4 ? 0x2D + (s1 - 0xF3) * 2	\\
	      : 0x6F + (s1 - 0xF5) * 2);		\\
	j2 = s2 - ((s2 >= 0x7F ? 0x20 : 0x1F));		\\
      }							\\
    (code) = (j1 << 8) | j2;				\\
  }" 18397 . 18999) (WHILE "while" 19000 . 19005) (semantic-list "(false)" 19006 . 19013)))
          ("JIS_TO_SJIS2" (spp-arg-list ("code") 19443 . 19449) . 
              ((DO "do" 19457 . 19459) (semantic-list "{							\\
    int s1, s2, j1, j2;					\\
							\\
    j1 = (code) >> 8, j2 = (code) & 0xFF;		\\
    if (j1 & 1)						\\
      {							\\
	s1 = (j1 <= 0x25 ? 0xF0 + (j1 - 0x21) / 2	\\
	      : j1 <= 0x2F ? 0xF3 + (j1 - 0x2D) / 2	\\
	      : 0xF5 + (j1 - 0x6F) / 2);		\\
	s2 = j2 + ((j2 >= 0x60) ? 0x20 : 0x1F);		\\
      }							\\
    else						\\
      {							\\
	s1 = (j1 == 0x28 ? 0xF0				\\
	      : j1 == 0x24 ? 0xF1			\\
	      : j1 == 0x2C ? 0xF2			\\
	      : j1 == 0x2E ? 0xF3			\\
	      : 0xF4 + (j1 - 0x6E) / 2);		\\
	s2 = j2 + 0x7E;					\\
      }							\\
    (code) = (s1 << 8) | s2;				\\
  }" 19460 . 20050) (WHILE "while" 20051 . 20056) (semantic-list "(false)" 20057 . 20064)))
          ("CODING_ATTR_CHARSET_LIST" (spp-arg-list ("attrs") 4389 . 4396) . ((symbol "AREF" 4397 . 4401) (semantic-list "(attrs, coding_attr_charset_list)" 4402 . 4435)))
          ("CODING_ATTR_PRE_WRITE" (spp-arg-list ("attrs") 4984 . 4991) . ((symbol "AREF" 4992 . 4996) (semantic-list "(attrs, coding_attr_pre_write)" 4997 . 5027)))
          ("CODING_ATTR_SAFE_CHARSETS" (spp-arg-list ("attrs") 5353 . 5360) . ((symbol "AREF" 5360 . 5364) (semantic-list "(attrs, coding_attr_safe_charsets)" 5365 . 5399)))
          ("CHECK_CODING_SYSTEM" (spp-arg-list ("x") 6781 . 6784) . 
              ((DO "do" 6792 . 6794) (semantic-list "{							\\
    if (CODING_SYSTEM_ID (x) < 0			\\
	&& NILP (Fcheck_coding_system (x)))		\\
      wrong_type_argument (Qcoding_system_p, (x));	\\
  }" 6795 . 6938) (WHILE "while" 6939 . 6944) (semantic-list "(false)" 6945 . 6952)))
          ("CODING_MODE_LAST_BLOCK" . ((number "0x01" 8361 . 8365)))
          ("CODING_MODE_SELECTIVE_DISPLAY" . ((number "0x02" 8510 . 8514)))
          ("CODING_MODE_DIRECTION" . ((number "0x04" 8684 . 8688)))
          ("UTF_16_HIGH_SURROGATE_P" (spp-arg-list ("val") 21147 . 21152) . ((semantic-list "(((val) & 0xFC00) == 0xD800)" 21157 . 21185)))
          ("encode_coding_string" (spp-arg-list ("coding" "string" "nocopy") 24030 . 24054) . ((semantic-list "(STRING_MULTIBYTE(string) ?						\\
    (encode_coding_object (coding, string, 0, 0, SCHARS (string),	\\
			   SBYTES (string), Qt),			\\
     (coding)->dst_object) : (string))" 24061 . 24234)))
          )
)
    (semanticdb-table "semanticdb-table-1afad20"
      :major-mode c-mode
      :tags 
        '( ("EMACS_KEYBOARD_H" variable (:constant-flag t) nil [801 817])
            ("coding.h" include nil nil [819 838])
            ("termhooks.h" include nil nil [892 914])
            ("KVAR" variable (:constant-flag t) nil [1109 1113])
            ("KBOARD" type
               (:typedef ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [3219 3248])
            ("kboard" type
               (:members 
                  ( ("next_kboard" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3271 3291])
                    ("Voverriding_terminal_local_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3633 3677])
                    ("Vlast_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3803 3830])
                    ("Vreal_last_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3916 3948])
                    ("Vkeyboard_translate_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4024 4063])
                    ("Vlast_repeatable_command_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4127 4165])
                    ("Vprefix_arg_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4237 4262])
                    ("Vlast_prefix_arg_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4336 4366])
                    ("kbd_queue_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4422 4445])
                    ("defining_kbd_macro_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4506 4538])
                    ("kbd_macro_buffer" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4608 4638])
                    ("kbd_macro_ptr" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4703 4730])
                    ("kbd_macro_end" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5269 5296])
                    ("kbd_macro_bufsize" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5349 5377])
                    ("Vlast_kbd_macro_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5428 5457])
                    ("Vsystem_key_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5522 5553])
                    ("system_key_syms_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5601 5630])
                    ("Vwindow_system_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5680 5708])
                    ("Vlocal_function_key_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5823 5860])
                    ("Vinput_decode_map_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6053 6084])
                    ("Vdefault_minibuffer_frame_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6168 6207])
                    ("reference_count" variable (:type "int") (reparse-symbol classsubparts) [6354 6374])
                    ("echo_string_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6502 6527])
                    ("kbd_queue_has_data" variable (:type ("bool_bf" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7078 7105])
                    ("immediate_echo" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7163 7190])
                    ("echo_prompt_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7269 7294]))                  
                :type "struct")
                nil [3249 7299])
            ("kset_default_minibuffer_frame" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7344 7362])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7363 7379]))                  
                :type "void")
                nil [7308 7423])
            ("kset_defining_kbd_macro" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7461 7479])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7480 7496]))                  
                :type "void")
                nil [7431 7533])
            ("kset_input_decode_map" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7569 7587])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7588 7604]))                  
                :type "void")
                nil [7541 7640])
            ("kset_last_command" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7672 7690])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7691 7707]))                  
                :type "void")
                nil [7648 7739])
            ("kset_last_kbd_macro" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7773 7791])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7792 7808]))                  
                :type "void")
                nil [7747 7842])
            ("kset_prefix_arg" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7872 7890])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7891 7907]))                  
                :type "void")
                nil [7850 7937])
            ("kset_system_key_alist" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7973 7991])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7992 8008]))                  
                :type "void")
                nil [7945 8044])
            ("kset_window_system" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8077 8095])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8096 8112]))                  
                :type "void")
                nil [8052 8145])
            ("buffered_input_event" type
               (:members 
                  ( ("EVENT_KIND_WIDTH" variable (:type "int") (reparse-symbol classsubparts) [8206 8223])
                    ("ie" variable (:type ("input_event" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [8226 8248]))                  
                :type "union")
                nil [8147 8310])
            ("initial_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("KBOARD" type (:type "class") nil nil))
                nil [8367 8397])
            ("current_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("KBOARD" type (:type "class") nil nil))
                nil [8686 8716])
            ("num_input_events" variable
               (:typemodifiers ("extern")
                :type ("uintmax_t" type (:type "class") nil nil))
                nil [8796 8830])
            ("point_before_last_command_or_undo" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [8976 9027])
            ("buffer_before_last_command_or_undo" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [9179 9236])
            ("prev_buffer" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [9238 9272])
            ("poll_suppress_count" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [9340 9371])
            ("this_command_keys" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9610 9647])
            ("this_command_key_count" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [9648 9688])
            ("internal_last_event_frame" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9999 10044])
            ("item_properties" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10285 10320])
            ("ITEM_PROPERTY_ITEM" variable (:constant-flag t) nil [10499 10517])
            ("ITEM_PROPERTY_NAME" variable (:constant-flag t) nil [10552 10570])
            ("ITEM_PROPERTY_DEF" variable (:constant-flag t) nil [10662 10679])
            ("ITEM_PROPERTY_MAP" variable (:constant-flag t) nil [10751 10768])
            ("ITEM_PROPERTY_TYPE" variable (:constant-flag t) nil [10810 10828])
            ("ITEM_PROPERTY_KEYEQ" variable (:constant-flag t) nil [10900 10919])
            ("ITEM_PROPERTY_SELECTED" variable (:constant-flag t) nil [11002 11024])
            ("ITEM_PROPERTY_HELP" variable (:constant-flag t) nil [11081 11099])
            ("ITEM_PROPERTY_ENABLE" variable (:constant-flag t) nil [11197 11217])
            ("menu_items" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12210 12240])
            ("menu_items_inuse" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12395 12431])
            ("menu_items_allocated" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12491 12523])
            ("menu_items_used" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12589 12616])
            ("menu_items_n_panes" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [12715 12745])
            ("MENU_ITEMS_PANE_NAME" variable (:constant-flag t) nil [12755 12775])
            ("MENU_ITEMS_PANE_PREFIX" variable (:constant-flag t) nil [12786 12808])
            ("MENU_ITEMS_PANE_LENGTH" variable (:constant-flag t) nil [12819 12841])
            ("menu_item_idx" type
               (:members 
                  ( ("MENU_ITEMS_ITEM_NAME" variable
                       (:constant-flag t
                        :default-value (12891 12892)
                        :type "int")
                        (reparse-symbol enumsubparts) [12868 12892])
                    ("MENU_ITEMS_ITEM_ENABLE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [12896 12919])
                    ("MENU_ITEMS_ITEM_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [12922 12944])
                    ("MENU_ITEMS_ITEM_EQUIV_KEY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [12947 12973])
                    ("MENU_ITEMS_ITEM_DEFINITION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [12976 13003])
                    ("MENU_ITEMS_ITEM_TYPE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13006 13027])
                    ("MENU_ITEMS_ITEM_SELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13030 13055])
                    ("MENU_ITEMS_ITEM_HELP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13058 13079])
                    ("MENU_ITEMS_ITEM_LENGTH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [13082 13106]))                  
                :type "enum")
                nil [12845 13107])
            ("unuse_menu_items" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13139 13144]))                  
                :type "void")
                nil [13109 13145])
            ("ENCODE_MENU_STRING" variable (:constant-flag t) nil [13597 13615])
            ("EVENT_HAS_PARAMETERS" variable (:constant-flag t) nil [13865 13885])
            ("EVENT_HEAD" variable (:constant-flag t) nil [14003 14013])
            ("EVENT_START" variable (:constant-flag t) nil [14163 14174])
            ("EVENT_END" variable (:constant-flag t) nil [14220 14229])
            ("EVENT_CLICK_COUNT" variable (:constant-flag t) nil [14344 14361])
            ("POSN_WINDOW" variable (:constant-flag t) nil [14453 14464])
            ("POSN_POSN" variable (:constant-flag t) nil [14497 14506])
            ("POSN_SET_POSN" variable (:constant-flag t) nil [14550 14563])
            ("POSN_WINDOW_POSN" variable (:constant-flag t) nil [14609 14625])
            ("POSN_TIMESTAMP" variable (:constant-flag t) nil [14680 14694])
            ("POSN_SCROLLBAR_PART" variable (:constant-flag t) nil [14760 14779])
            ("POSN_STRING" variable (:constant-flag t) nil [14963 14974])
            ("POSN_INBUFFER_P" variable (:constant-flag t) nil [15087 15102])
            ("POSN_BUFFER_POSN" variable (:constant-flag t) nil [15145 15161])
            ("EVENT_HEAD_KIND" variable (:constant-flag t) nil [15252 15267])
            ("input_available_clear_time" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15410 15461])
            ("ignore_mouse_drag_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [15463 15495])
            ("parse_modifiers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15533 15545]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15497 15546])
            ("reorder_modifiers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15585 15597]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15547 15598])
            ("read_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [15629 15633])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15634 15646])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15647 15659])
                    ("" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [15690 15697])
                    ("" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15698 15716]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15599 15717])
            ("parse_solitary_modifier" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15754 15773]))                  
                :type "int")
                nil [15718 15774])
            ("real_this_command" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [15847 15884])
            ("quit_char" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [15886 15907])
            ("timers_run" variable
               (:typemodifiers ("extern")
                :type "unsigned int")
                nil [15909 15940])
            ("menu_separator_name_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15977 15990]))                  
                :type "bool")
                nil [15942 15991])
            ("parse_menu_item" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16021 16033])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [16034 16038]))                  
                :type "bool")
                nil [15992 16039])
            ("init_raw_keybuf_count" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16076 16081]))                  
                :type "void")
                nil [16041 16082])
            ("allocate_kboard" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16115 16127]))                  
                :type ("KBOARD" type (:type "class") nil nil))
                nil [16083 16128])
            ("delete_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16156 16165]))                  
                :type "void")
                nil [16129 16166])
            ("not_single_kboard_state" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16204 16213]))                  
                :type "void")
                nil [16167 16214])
            ("push_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16240 16256]))                  
                :type "void")
                nil [16215 16257])
            ("push_frame_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16289 16304]))                  
                :type "void")
                nil [16258 16305])
            ("pop_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16330 16335]))                  
                :type "void")
                nil [16306 16336])
            ("temporarily_switch_to_single_kboard" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16386 16401]))                  
                :type "void")
                nil [16337 16402])
            ("record_asynch_buffer_change" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16444 16449]))                  
                :type "void")
                nil [16403 16450])
            ("input_poll_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [16482 16486]))                  
                :type "void")
                nil [16451 16487])
            ("start_polling" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16515 16520]))                  
                :type "void")
                nil [16488 16521])
            ("stop_polling" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16548 16553]))                  
                :type "void")
                nil [16522 16554])
            ("set_poll_suppress_count" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [16592 16596]))                  
                :type "void")
                nil [16555 16597])
            ("gobble_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16623 16628]))                  
                :type "int")
                nil [16598 16629])
            ("input_polling_used" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16662 16667]))                  
                :type "bool")
                nil [16630 16668])
            ("clear_input_pending" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16702 16707]))                  
                :type "void")
                nil [16669 16708])
            ("requeued_events_pending_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16748 16753]))                  
                :type "bool")
                nil [16709 16754])
            ("bind_polling_period" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [16788 16792]))                  
                :type "void")
                nil [16755 16793])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [16826 16842])
            ("stuff_buffered_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16877 16889]))                  
                :type "void")
                nil [16843 16890])
            ("clear_waiting_for_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16928 16933]))                  
                :type "void")
                nil [16891 16934])
            ("swallow_events" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16963 16968]))                  
                :type "void")
                nil [16935 16969])
            ("lucid_event_type_list_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17007 17019]))                  
                :type "bool")
                nil [16970 17020])
            ("kbd_buffer_store_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17057 17078]))                  
                :type "void")
                nil [17021 17079])
            ("kbd_buffer_store_buffered_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffered_input_event" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [17125 17154])
                    ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17165 17186]))                  
                :type "void")
                nil [17080 17187])
            ("kbd_buffer_store_event_hold" function
               (:arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17229 17255])
                    ("hold_quit" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17264 17294]))                  
                :type "void")
                nil [17195 17544])
            ("poll_for_input_1" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [17667 17672]))                  
                :type "void")
                nil [17637 17673])
            ("show_help_echo" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17702 17714])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17715 17727])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17728 17740])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17769 17781]))                  
                :type "void")
                nil [17674 17782])
            ("gen_help_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17811 17823])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17824 17836])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17837 17849])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17878 17890])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17891 17901]))                  
                :type "void")
                nil [17783 17902])
            ("kbd_buffer_store_help_event" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17944 17956])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17957 17969]))                  
                :type "void")
                nil [17903 17970])
            ("menu_item_eval_property" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18015 18027]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [17971 18028])
            ("kbd_buffer_events_waiting" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18068 18073]))                  
                :type "bool")
                nil [18029 18074])
            ("add_user_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [18104 18108])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18109 18122]))                  
                :type "void")
                nil [18075 18123])
            ("tty_read_avail_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18158 18176])
                    ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18177 18198]))                  
                :type "int")
                nil [18125 18199])
            ("pending_signals" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [18200 18237])
            ("process_pending_signals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18275 18280]))                  
                :type "void")
                nil [18238 18281])
            ("timer_check" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18318 18323]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18282 18324])
            ("mark_kboards" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18351 18356]))                  
                :type "void")
                nil [18325 18357])
            ("DEV_TTY" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [18433 18461]))          
      :file "keyboard.h"
      :pointmax 18512
      :fsize 18511
      :lastmodtime '(23443 29220 49835 658000)
      :unmatched-syntax '((symbol 18463 . 18480) (symbol 17188 . 17194) (semantic-list 16820 . 16825) (symbol 16805 . 16819) (INT 16801 . 16804) (EXTERN 16794 . 16800) (punctuation 8204 . 8205) (symbol 8199 . 8203) (semantic-list 8186 . 8198) (symbol 8178 . 8185) (symbol 8045 . 8051) (symbol 7938 . 7944) (symbol 7843 . 7849) (symbol 7740 . 7746) (symbol 7641 . 7647) (symbol 7534 . 7540) (symbol 7424 . 7430) (symbol 7301 . 7307) (symbol 1000 . 1019))
      :lexical-table 
        '(("ITEM_PROPERTY_TYPE" . ((number "4" 10829 . 10830)))
          ("ENCODE_MENU_STRING" (spp-arg-list ("str") 13615 . 13620) . ((symbol "string_make_unibyte" 13621 . 13640) (semantic-list "(str)" 13641 . 13646)))
          ("EVENT_HAS_PARAMETERS" (spp-arg-list ("event") 13885 . 13892) . ((semantic-list "(CONSP (event))" 13893 . 13908)))
          ("POSN_INBUFFER_P" (spp-arg-list ("posn") 15102 . 15108) . ((semantic-list "(NILP (POSN_STRING (posn)))" 15109 . 15136)))
          ("EMACS_KEYBOARD_H")
          ("ITEM_PROPERTY_HELP" . ((number "7" 11100 . 11101)))
          ("POSN_SCROLLBAR_PART" (spp-arg-list ("posn") 14779 . 14785) . ((semantic-list "(Fnth (make_fixnum (4), (posn)))" 14786 . 14818)))
          ("ITEM_PROPERTY_NAME" . ((number "1" 10571 . 10572)))
          ("ITEM_PROPERTY_ENABLE" . ((number "8" 11218 . 11219)))
          ("MENU_ITEMS_PANE_LENGTH" . ((number "3" 12842 . 12843)))
          ("POSN_SET_POSN" (spp-arg-list ("posn" "x") 14563 . 14571) . ((semantic-list "(XSETCAR (XCDR (posn), (x)))" 14572 . 14600)))
          ("MENU_ITEMS_PANE_PREFIX" . ((number "2" 12809 . 12810)))
          ("EVENT_HEAD" (spp-arg-list ("event") 14013 . 14020) . ((semantic-list "(EVENT_HAS_PARAMETERS (event) ? XCAR (event) : (event))" 14025 . 14080)))
          ("POSN_WINDOW" (spp-arg-list ("posn") 14464 . 14470) . ((semantic-list "(CAR_SAFE (posn))" 14471 . 14488)))
          ("POSN_BUFFER_POSN" (spp-arg-list ("posn") 15161 . 15167) . ((semantic-list "(Fnth (make_fixnum (5), (posn)))" 15168 . 15200)))
          ("POSN_STRING" (spp-arg-list ("posn") 14974 . 14980) . ((semantic-list "(Fnth (make_fixnum (4), (posn)))" 14981 . 15013)))
          ("ITEM_PROPERTY_DEF" . ((number "2" 10680 . 10681)))
          ("ITEM_PROPERTY_KEYEQ" . ((number "5" 10920 . 10921)))
          ("EVENT_START" (spp-arg-list ("event") 14174 . 14181) . ((semantic-list "(CAR_SAFE (CDR_SAFE (event)))" 14182 . 14211)))
          ("POSN_TIMESTAMP" (spp-arg-list ("posn") 14694 . 14700) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (CDR_SAFE (posn)))))" 14701 . 14751)))
          ("KVAR" (spp-arg-list ("kboard" "field") 1113 . 1128) . ((semantic-list "((kboard)->field ## _)" 1129 . 1151)))
          ("ITEM_PROPERTY_MAP" . ((number "3" 10769 . 10770)))
          ("EVENT_END" (spp-arg-list ("event") 14229 . 14236) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (event))))" 14237 . 14277)))
          ("POSN_WINDOW_POSN" (spp-arg-list ("posn") 14625 . 14631) . ((semantic-list "(CAR_SAFE (CDR_SAFE (CDR_SAFE (posn))))" 14632 . 14671)))
          ("MENU_ITEMS_PANE_NAME" . ((number "1" 12776 . 12777)))
          ("ITEM_PROPERTY_ITEM" . ((number "0" 10518 . 10519)))
          ("ITEM_PROPERTY_SELECTED" . ((number "6" 11025 . 11026)))
          ("EVENT_CLICK_COUNT" (spp-arg-list ("event") 14361 . 14368) . ((semantic-list "(Fnth (make_fixnum (2), (event)))" 14369 . 14402)))
          ("POSN_POSN" (spp-arg-list ("posn") 14506 . 14512) . ((semantic-list "(CAR_SAFE (CDR_SAFE (posn)))" 14513 . 14541)))
          ("EVENT_HEAD_KIND" (spp-arg-list ("event_head") 15267 . 15279) . ((semantic-list "(Fget ((event_head), Qevent_kind))" 15284 . 15318)))
          )
)
    (semanticdb-table "semanticdb-table-1afad40"
      :major-mode c-mode
      :tags 
        '( ("EMACS_SYSSIGNAL_H" variable (:constant-flag t) nil [805 822])
            ("signal.h" include (:system-flag t) nil [824 843])
            ("init_signals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [871 876]))                  
                :type "void")
                nil [845 877])
            ("block_child_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [910 921]))                  
                :type "void")
                nil [878 922])
            ("unblock_child_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [957 974]))                  
                :type "void")
                nil [923 975])
            ("block_interrupt_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1012 1023]))                  
                :type "void")
                nil [976 1024])
            ("restore_signal_mask" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1058 1075]))                  
                :type "void")
                nil [1025 1076])
            ("block_tty_out_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1111 1122]))                  
                :type "void")
                nil [1077 1123])
            ("unblock_tty_out_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1160 1177]))                  
                :type "void")
                nil [1124 1178])
            ("empty_mask" variable
               (:typemodifiers ("extern")
                :type ("sigset_t" type (:type "class") nil nil))
                nil [1793 1820])
            ("signal_handler_t" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [1856 1860]))                  
                :type "void")
                nil [1830 1861])
            ("emacs_sigaction_init" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sigaction" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1897 1916])
                    ("" variable (:type ("signal_handler_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1917 1934]))                  
                :type "void")
                nil [1863 1935])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [1969 1985])
            ("SA_SIGINFO" variable (:constant-flag t) nil [2087 2097])
            ("emacs_raise" variable (:constant-flag t) nil [2137 2148])
            ("strsignal" variable (:constant-flag t) nil [2206 2215])
            ("deliver_process_signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [2279 2283])
                    ("" variable (:type ("signal_handler_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2284 2301]))                  
                :type "void")
                nil [2250 2302]))          
      :file "syssignal.h"
      :pointmax 2335
      :fsize 2334
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax '((semantic-list 1963 . 1968) (symbol 1948 . 1962) (punctuation 1947 . 1948) (CONST 1941 . 1946) (CHAR 1936 . 1940) (TYPEDEF 1822 . 1829))
      :lexical-table 
        '(("emacs_raise" (spp-arg-list ("sig") 2148 . 2153) . ((symbol "raise" 2154 . 2159) (semantic-list "(sig)" 2160 . 2165)))
          ("SA_SIGINFO" . ((number "0" 2098 . 2099)))
          ("EMACS_SYSSIGNAL_H")
          ("strsignal" (spp-arg-list ("sig") 2215 . 2220) . ((symbol "safe_strsignal" 2221 . 2235) (semantic-list "(sig)" 2236 . 2241)))
          )
)
    (semanticdb-table "semanticdb-table-1afad60"
      :major-mode c-mode
      :tags 
        '( ("THREAD_H" variable (:constant-flag t) nil [746 754])
            ("regex-emacs.h" include nil nil [756 780])
            ("sysselect.h" include nil nil [888 910])
            ("systhread.h" include nil nil [924 946])
            ("GCALIGNED_STRUCT" variable (:type ("thread_state" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [948 7146])
            ("thread_state" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [972 1003])
                    ("m_last_thing_searched" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1164 1198])
                    ("last_thing_searched" variable (:constant-flag t) (reparse-symbol classsubparts) [1207 1226])
                    ("m_saved_last_thing_searched" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1270 1310])
                    ("saved_last_thing_searched" variable (:constant-flag t) (reparse-symbol classsubparts) [1319 1344])
                    ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1422 1439])
                    ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1475 1496])
                    ("result" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1556 1575])
                    ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1631 1656])
                    ("error_data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1659 1682])
                    ("event_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1775 1800])
                    ("m_stack_bottom" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [1959 1980])
                    ("stack_bottom" variable (:constant-flag t) (reparse-symbol classsubparts) [1989 2001])
                    ("stack_top" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [2513 2529])
                    ("m_catchlist" variable
                       (:pointer 1
                        :type ("catchtag" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [2533 2562])
                    ("catchlist" variable (:constant-flag t) (reparse-symbol classsubparts) [2571 2580])
                    ("m_handlerlist" variable
                       (:pointer 1
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [2901 2931])
                    ("handlerlist" variable (:constant-flag t) (reparse-symbol classsubparts) [2940 2951])
                    ("m_handlerlist_sentinel" variable
                       (:pointer 1
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [2987 3026])
                    ("handlerlist_sentinel" variable (:constant-flag t) (reparse-symbol classsubparts) [3035 3055])
                    ("m_specpdl_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3162 3187])
                    ("specpdl_size" variable (:constant-flag t) (reparse-symbol classsubparts) [3196 3208])
                    ("m_specpdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol classsubparts) [3287 3316])
                    ("specpdl" variable (:constant-flag t) (reparse-symbol classsubparts) [3325 3332])
                    ("m_specpdl_ptr" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol classsubparts) [3417 3450])
                    ("specpdl_ptr" variable (:constant-flag t) (reparse-symbol classsubparts) [3459 3470])
                    ("m_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3561 3589])
                    ("lisp_eval_depth" variable (:constant-flag t) (reparse-symbol classsubparts) [3598 3613])
                    ("m_current_buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [3697 3729])
                    ("current_buffer" variable (:constant-flag t) (reparse-symbol classsubparts) [3738 3752])
                    ("m_search_regs" variable (:type ("re_registers" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [4774 4808])
                    ("search_regs" variable (:constant-flag t) (reparse-symbol classsubparts) [4817 4828])
                    ("m_search_regs_saved" variable (:type "bool") (reparse-symbol classsubparts) [4987 5012])
                    ("search_regs_saved" variable (:constant-flag t) (reparse-symbol classsubparts) [5021 5038])
                    ("m_saved_search_regs" variable (:type ("re_registers" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [5080 5120])
                    ("saved_search_regs" variable (:constant-flag t) (reparse-symbol classsubparts) [5129 5146])
                    ("m_waiting_for_user_input_p" variable (:type "int") (reparse-symbol classsubparts) [5690 5721])
                    ("waiting_for_user_input_p" variable (:constant-flag t) (reparse-symbol classsubparts) [5730 5754])
                    ("m_waiting_for_input" variable (:type "bool") (reparse-symbol classsubparts) [5840 5865])
                    ("waiting_for_input" variable (:constant-flag t) (reparse-symbol classsubparts) [5874 5891])
                    ("m_getcjmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6188 6210])
                    ("getcjmp" variable (:constant-flag t) (reparse-symbol classsubparts) [6219 6226])
                    ("thread_id" variable (:type ("sys_thread_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6302 6325])
                    ("thread_condvar" variable (:type ("sys_cond_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6470 6496])
                    ("wait_condvar" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [6689 6714])
                    ("not_holding_lock" variable (:type "int") (reparse-symbol classsubparts) [7024 7045])
                    ("next_thread" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [7093 7126]))                  
                :type "struct")
                nil [948 7146])
            ("THREADP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7169 7183]))                  
                :type "bool")
                nil [7155 7228])
            ("CHECK_THREAD" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7256 7270]))                  
                :type "void")
                nil [7237 7315])
            ("XTHREAD" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7355 7369]))                  
                :type ("thread_state" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [7324 7457])
            ("lisp_mutex_t" type
               (:typedef ("" type
                     (:members 
                        ( ("owner" variable
                             (:pointer 1
                              :type ("thread_state" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil))
                              (reparse-symbol classsubparts) [7767 7794])
                          ("count" variable (:type "unsigned int") (reparse-symbol classsubparts) [7822 7841])
                          ("condition" variable (:type ("sys_cond_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7895 7916]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [7699 7932])
            ("GCALIGNED_STRUCT" variable (:type ("Lisp_Mutex" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [7967 8163])
            ("Lisp_Mutex" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [7989 8020])
                    ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8064 8081])
                    ("mutex" variable (:type ("lisp_mutex_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8124 8143]))                  
                :type "struct")
                nil [7967 8163])
            ("MUTEXP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8185 8199]))                  
                :type "bool")
                nil [8172 8243])
            ("CHECK_MUTEX" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8270 8284]))                  
                :type "void")
                nil [8252 8327])
            ("XMUTEX" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8364 8378]))                  
                :type ("Lisp_Mutex" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [8336 8463])
            ("GCALIGNED_STRUCT" variable (:type ("Lisp_CondVar" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [8511 8785])
            ("Lisp_CondVar" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [8535 8566])
                    ("mutex" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8601 8619])
                    ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8676 8693])
                    ("cond" variable (:type ("sys_cond_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8749 8765]))                  
                :type "struct")
                nil [8511 8785])
            ("CONDVARP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8809 8823]))                  
                :type "bool")
                nil [8794 8869])
            ("CHECK_CONDVAR" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8898 8912]))                  
                :type "void")
                nil [8878 8971])
            ("XCONDVAR" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9012 9026]))                  
                :type ("Lisp_CondVar" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [8980 9115])
            ("current_thread" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("thread_state" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [9117 9160])
            ("finalize_one_thread" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9195 9222]))                  
                :type "void")
                nil [9162 9223])
            ("finalize_one_mutex" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Mutex" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9256 9276]))                  
                :type "void")
                nil [9224 9277])
            ("finalize_one_condvar" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_CondVar" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9312 9334]))                  
                :type "void")
                nil [9278 9335])
            ("maybe_reacquire_global_lock" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9377 9382]))                  
                :type "void")
                nil [9336 9383])
            ("init_threads_once" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9416 9421]))                  
                :type "void")
                nil [9385 9422])
            ("init_threads" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9449 9454]))                  
                :type "void")
                nil [9423 9455])
            ("syms_of_threads" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9485 9490]))                  
                :type "void")
                nil [9456 9491])
            ("main_thread_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [9519 9526]))                  
                :type "bool")
                nil [9492 9527])
            ("in_current_thread" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9559 9564]))                  
                :type "bool")
                nil [9528 9565])
            ("select_func" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [9592 9596])
                    ("" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9597 9606])
                    ("" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9607 9616])
                    ("" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9617 9626])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9631 9655])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9656 9673]))                  
                :type "int")
                nil [9575 9674])
            ("thread_select" function
               (:prototype-flag t
                :arguments 
                  ( ("func" variable
                       (:pointer 1
                        :type ("select_func" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9696 9714])
                    ("max_fds" variable (:type "int") (reparse-symbol arg-sub-list) [9715 9727])
                    ("rfds" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9728 9741])
                    ("wfds" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9748 9761])
                    ("efds" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9762 9775])
                    ("timeout" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9776 9801])
                    ("sigmask" variable
                       (:pointer 1
                        :type ("sigset_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9808 9826]))                  
                :type "int")
                nil [9676 9827])
            ("thread_check_current_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9863 9879]))                  
                :type "bool")
                nil [9829 9880]))          
      :file "thread.h"
      :pointmax 9904
      :fsize 9903
      :lastmodtime '(23454 65441 997778 138000)
      :unmatched-syntax '((TYPEDEF 9567 . 9574) (symbol 8973 . 8979) (symbol 8871 . 8877) (symbol 8787 . 8793) (symbol 8329 . 8335) (symbol 8245 . 8251) (symbol 8165 . 8171) (symbol 7317 . 7323) (symbol 7230 . 7236) (symbol 7148 . 7154))
      :lexical-table 
        '(("handlerlist_sentinel" . ((semantic-list "(current_thread->m_handlerlist_sentinel)" 3056 . 3096)))
          ("stack_bottom" . ((semantic-list "(current_thread->m_stack_bottom)" 2002 . 2034)))
          ("specpdl_ptr" . ((semantic-list "(current_thread->m_specpdl_ptr)" 3471 . 3502)))
          ("THREAD_H")
          ("waiting_for_user_input_p" . ((semantic-list "(current_thread->m_waiting_for_user_input_p)" 5755 . 5799)))
          ("specpdl" . ((semantic-list "(current_thread->m_specpdl)" 3333 . 3360)))
          ("lisp_eval_depth" . ((semantic-list "(current_thread->m_lisp_eval_depth)" 3614 . 3649)))
          ("waiting_for_input" . ((semantic-list "(current_thread->m_waiting_for_input)" 5892 . 5929)))
          ("getcjmp" . ((semantic-list "(current_thread->m_getcjmp)" 6227 . 6254)))
          ("specpdl_size" . ((semantic-list "(current_thread->m_specpdl_size)" 3209 . 3241)))
          ("current_buffer" . ((semantic-list "(current_thread->m_current_buffer)" 3753 . 3787)))
          ("search_regs_saved" . ((semantic-list "(current_thread->m_search_regs_saved)" 5039 . 5076)))
          ("saved_search_regs" . ((semantic-list "(current_thread->m_saved_search_regs)" 5147 . 5184)))
          ("last_thing_searched" . ((semantic-list "(current_thread->m_last_thing_searched)" 1227 . 1266)))
          ("search_regs" . ((semantic-list "(current_thread->m_search_regs)" 4829 . 4860)))
          ("handlerlist" . ((semantic-list "(current_thread->m_handlerlist)" 2952 . 2983)))
          ("catchlist" . ((semantic-list "(current_thread->m_catchlist)" 2581 . 2610)))
          ("saved_last_thing_searched" . ((semantic-list "(current_thread->m_saved_last_thing_searched)" 1345 . 1390)))
          )
)
    (semanticdb-table "semanticdb-table-1afad80"
      :major-mode c-mode
      :tags 
        '( ("NDEBUG" variable (:constant-flag t) nil [1198 1204])
            ("stdbool.h" include (:system-flag t) nil [1587 1607])
            ("GNUC_PREREQ" variable (:constant-flag t) nil [2013 2024])
            ("bool_bf" type
               (:typedef ("bool")
                :type "typedef")
                nil [2362 2383])
            ("__has_attribute" variable (:constant-flag t) nil [2701 2716])
            ("__has_attribute_alloc_size" variable (:constant-flag t) nil [2749 2775])
            ("__has_attribute_cleanup" variable (:constant-flag t) nil [2807 2830])
            ("__has_attribute_externally_visible" variable (:constant-flag t) nil [2862 2896])
            ("__has_attribute_no_address_safety_analysis" variable (:constant-flag t) nil [2928 2970])
            ("__has_attribute_no_sanitize_address" variable (:constant-flag t) nil [2986 3021])
            ("__has_attribute_no_sanitize_undefined" variable (:constant-flag t) nil [3053 3090])
            ("__has_feature" variable (:constant-flag t) nil [3264 3277])
            ("ADDRESS_SANITIZER" variable (:constant-flag t) nil [3458 3475])
            ("getenv_TZ" variable (:constant-flag t) nil [7660 7669])
            ("setenv_TZ" variable (:constant-flag t) nil [7694 7703])
            ("emacs_getenv_TZ" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7750 7755]))                  
                :type "char")
                nil [7720 7756])
            ("emacs_setenv_TZ" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7785 7798]))                  
                :type "int")
                nil [7757 7799])
            ("NO_INLINE" variable (:constant-flag t) nil [7870 7879])
            ("EXTERNALLY_VISIBLE" variable (:constant-flag t) nil [8056 8074])
            ("ATTRIBUTE_FORMAT" variable (:constant-flag t) nil [8190 8206])
            ("FALLTHROUGH" variable (:constant-flag t) nil [8329 8340])
            ("PRINTF_ARCHETYPE" variable (:constant-flag t) nil [9383 9399])
            ("ATTRIBUTE_FORMAT_PRINTF" variable (:constant-flag t) nil [9426 9449])
            ("ARG_NONNULL" variable (:constant-flag t) nil [9561 9572])
            ("ATTRIBUTE_CONST" variable (:constant-flag t) nil [9597 9612])
            ("ATTRIBUTE_UNUSED" variable (:constant-flag t) nil [9641 9657])
            ("ATTRIBUTE_MAY_ALIAS" variable (:constant-flag t) nil [9790 9809])
            ("DECLARE_POINTER_ALIAS" variable (:constant-flag t) nil [10099 10120])
            ("ATTRIBUTE_MALLOC" variable (:constant-flag t) nil [10220 10236])
            ("ATTRIBUTE_ALLOC_SIZE" variable (:constant-flag t) nil [10428 10448])
            ("ATTRIBUTE_MALLOC_SIZE" variable (:constant-flag t) nil [10471 10492])
            ("ADDRESS_SANITIZER_WORKAROUND" variable (:constant-flag t) nil [10894 10922])
            ("ATTRIBUTE_NO_SANITIZE_ADDRESS" variable (:constant-flag t) nil [11435 11464])
            ("ATTRIBUTE_NO_SANITIZE_UNDEFINED" variable (:constant-flag t) nil [11821 11852])
            ("INLINE" variable (:constant-flag t) nil [13488 13494])
            ("EXTERN_INLINE" variable (:constant-flag t) nil [13521 13534])
            ("INLINE_HEADER_BEGIN" variable (:constant-flag t) nil [13561 13580])
            ("INLINE_HEADER_END" variable (:constant-flag t) nil [13613 13630])
            ("UNINIT" variable (:constant-flag t) nil [13873 13879]))          
      :file "conf_post.h"
      :pointmax 13899
      :fsize 13898
      :lastmodtime '(23443 29219 989873 50000)
      :unmatched-syntax '((close-paren 10883 . 10884) (semantic-list 10808 . 10883) (punctuation 10806 . 10807) (punctuation 10805 . 10806))
      :lexical-table 
        '(("__has_attribute_no_address_safety_analysis" . ((symbol "false" 2971 . 2976)))
          ("getenv_TZ" . ((symbol "emacs_getenv_TZ" 7670 . 7685)))
          ("ATTRIBUTE_CONST" . ((symbol "_GL_ATTRIBUTE_CONST" 9613 . 9632)))
          ("INLINE_HEADER_BEGIN" . ((symbol "_GL_INLINE_HEADER_BEGIN" 13581 . 13604)))
          ("__has_attribute_externally_visible" . ((symbol "GNUC_PREREQ" 2897 . 2908) (semantic-list "(4, 1, 0)" 2909 . 2918)))
          ("ATTRIBUTE_MALLOC" . ((symbol "__attribute__" 10237 . 10250) (semantic-list "((__malloc__))" 10251 . 10265)))
          ("__has_attribute_no_sanitize_undefined" . ((symbol "GNUC_PREREQ" 3091 . 3102) (semantic-list "(4, 9, 0)" 3103 . 3112)))
          ("__has_attribute_no_sanitize_address" . ((symbol "GNUC_PREREQ" 3022 . 3033) (semantic-list "(4, 8, 0)" 3034 . 3043)))
          ("__has_feature" (spp-arg-list ("a") 3277 . 3280) . ((symbol "false" 3281 . 3286)))
          ("ATTRIBUTE_MALLOC_SIZE" (spp-arg-list ("args") 10492 . 10498) . 
              ((symbol "ATTRIBUTE_MALLOC" 10499 . 10515) (symbol "ATTRIBUTE_ALLOC_SIZE" 10516 . 10536) (semantic-list "(args)" 10537 . 10543)))
          ("INLINE" . ((symbol "_GL_INLINE" 13495 . 13505)))
          ("EXTERN_INLINE" . ((symbol "_GL_EXTERN_INLINE" 13535 . 13552)))
          ("setenv_TZ" . ((symbol "emacs_setenv_TZ" 7704 . 7719)))
          ("PRINTF_ARCHETYPE" . ((symbol "__printf__" 9400 . 9410)))
          ("ARG_NONNULL" . ((symbol "_GL_ARG_NONNULL" 9573 . 9588)))
          ("ATTRIBUTE_NO_SANITIZE_ADDRESS")
          ("ADDRESS_SANITIZER" . ((symbol "false" 3476 . 3481)))
          ("FALLTHROUGH" . ((semantic-list "((void) 0)" 8341 . 8351)))
          ("EXTERNALLY_VISIBLE")
          ("GNUC_PREREQ" (spp-arg-list ("v" "w" "x") 2024 . 2033) . ((semantic-list "((v) < __GNUC__ + ((w) < __GNUC_MINOR__ + ((x) <= __GNUC_PATCHLEVEL__)))" 2040 . 2112)))
          ("ADDRESS_SANITIZER_WORKAROUND")
          ("INLINE_HEADER_END" . ((symbol "_GL_INLINE_HEADER_END" 13631 . 13652)))
          ("__has_attribute_cleanup" . ((symbol "GNUC_PREREQ" 2831 . 2842) (semantic-list "(3, 4, 0)" 2843 . 2852)))
          ("ATTRIBUTE_FORMAT" (spp-arg-list ("spec") 8206 . 8212))
          ("NDEBUG")
          ("__has_attribute" (spp-arg-list ("a") 2716 . 2719) . ((spp-symbol-merge ((symbol "__has_attribute_" 2720 . 2736) (symbol "a" 2738 . 2739)) 2720 . 2739)))
          ("__has_attribute_alloc_size" . ((symbol "GNUC_PREREQ" 2776 . 2787) (semantic-list "(4, 3, 0)" 2788 . 2797)))
          ("NO_INLINE" . ((symbol "__attribute__" 7880 . 7893) (semantic-list "((noinline))" 7893 . 7905)))
          ("ATTRIBUTE_MAY_ALIAS")
          ("DECLARE_POINTER_ALIAS" (spp-arg-list ("name" "type" "addr") 10120 . 10138) . 
              ((symbol "type" 10143 . 10147) (symbol "ATTRIBUTE_MAY_ALIAS" 10148 . 10167) (punctuation "*" 10168 . 10169) (symbol "name" 10169 . 10173) (punctuation "=" 10174 . 10175) (semantic-list "(type *)" 10176 . 10184) (semantic-list "(addr)" 10185 . 10191)))
          ("UNINIT")
          ("ATTRIBUTE_FORMAT_PRINTF" (spp-arg-list ("string_index" "first_to_check") 9449 . 9479) . ((symbol "ATTRIBUTE_FORMAT" 9484 . 9500) (semantic-list "((PRINTF_ARCHETYPE, string_index, first_to_check))" 9501 . 9551)))
          ("ATTRIBUTE_ALLOC_SIZE" (spp-arg-list ("args") 10448 . 10454))
          ("ATTRIBUTE_UNUSED" . ((symbol "_GL_UNUSED" 9658 . 9668)))
          ("ATTRIBUTE_NO_SANITIZE_UNDEFINED")
          )
)
    (semanticdb-table "semanticdb-table-1afada0"
      :major-mode c-mode
      :tags 
        '( ("__MINI_GMP_H__" variable (:constant-flag t) nil [1379 1393])
            ("stddef.h" include (:system-flag t) nil [1412 1431])
            ("mpz_export" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [11282 11289])
                    ("" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11290 11299])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [11300 11304])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11305 11312])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [11313 11317])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11318 11325])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11326 11338]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11264 11339])
            ("mpz_import" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11208 11214])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11215 11222])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [11223 11227])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11228 11235])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [11236 11240])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11241 11248])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [11249 11262]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11191 11263])
            ("mpz_init_set_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10008 10014])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10015 10028])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [10029 10033]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9986 10034])
            ("mpz_set_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9959 9965])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9966 9979])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [9980 9984]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9942 9985])
            ("mpz_get_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [9915 9922])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [9923 9927])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9928 9940]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9896 9941])
            ("mpz_sizeinbase" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9877 9889])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [9890 9894]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9854 9895])
            ("mpz_init_set_d" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9837 9843])
                    ("" variable (:type "double") (reparse-symbol arg-sub-list) [9844 9851]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9816 9852])
            ("mpz_init_set" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9795 9801])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9802 9814]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9776 9815])
            ("mpz_init_set_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9749 9755])
                    ("" variable (:type "unsigned long int") (reparse-symbol arg-sub-list) [9756 9774]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9727 9775])
            ("mpz_init_set_si" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9702 9708])
                    ("" variable (:type "signed long int") (reparse-symbol arg-sub-list) [9709 9725]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9680 9726])
            ("mpz_set_d" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9663 9669])
                    ("" variable (:type "double") (reparse-symbol arg-sub-list) [9670 9677]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9647 9678])
            ("mpz_set" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9626 9632])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9633 9645]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9612 9646])
            ("mpz_set_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9585 9591])
                    ("" variable (:type "unsigned long int") (reparse-symbol arg-sub-list) [9592 9610]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9568 9611])
            ("mpz_set_si" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9543 9549])
                    ("" variable (:type "signed long int") (reparse-symbol arg-sub-list) [9550 9566]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9526 9567])
            ("MPZ_ROINIT_N" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [9486 9498])
            ("mpz_roinit_n" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mpz_srcptr" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9447 9453])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9454 9464])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9465 9475]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9422 9476])
            ("mpz_limbs_finish" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9403 9409])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9410 9420]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9380 9421])
            ("mpz_limbs_write" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_ptr" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9361 9367])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9368 9378]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9337 9379])
            ("mpz_limbs_modify" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_ptr" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9318 9324])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9325 9335]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9293 9336])
            ("mpz_limbs_read" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_srcptr" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mpz_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9280 9291]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9254 9292])
            ("mpz_realloc2" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9233 9239])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9240 9252]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9214 9253])
            ("mpz_getlimbn" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9188 9200])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9201 9211]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9164 9212])
            ("mpz_size" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9150 9162]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9133 9163])
            ("mpz_get_d" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9119 9131]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9101 9132])
            ("mpz_get_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9087 9099]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9057 9100])
            ("mpz_get_si" function
               (:typemodifiers ("extern" "\"C\"")
                :type "long int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9043 9055]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9022 9056])
            ("mpz_fits_ulong_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9008 9020]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8986 9021])
            ("mpz_fits_slong_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8972 8984]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8950 8985])
            ("mpz_scan1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8922 8934])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8935 8947]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8899 8948])
            ("mpz_scan0" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8872 8884])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8885 8897]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8849 8898])
            ("mpz_hamdist" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8822 8834])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8835 8847]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8797 8848])
            ("mpz_popcount" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8783 8795]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8757 8796])
            ("mpz_xor" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8722 8728])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8729 8741])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8742 8754]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8708 8755])
            ("mpz_ior" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8674 8680])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8681 8693])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8694 8706]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8660 8707])
            ("mpz_and" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8626 8632])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8633 8645])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8646 8658]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8612 8659])
            ("mpz_com" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8591 8597])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8598 8610]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8577 8611])
            ("mpz_combit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8555 8561])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8562 8574]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8538 8575])
            ("mpz_clrbit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8517 8523])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8524 8536]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8500 8537])
            ("mpz_setbit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8479 8485])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8486 8498]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8462 8499])
            ("mpz_tstbit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8435 8447])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8448 8460]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8419 8461])
            ("mpz_probab_prime_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8399 8411])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [8412 8416]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8375 8417])
            ("mpz_bin_uiui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8336 8342])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8343 8357])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8358 8372]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8317 8373])
            ("mpz_mfac_uiui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8279 8285])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8286 8300])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8301 8315]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8259 8316])
            ("mpz_2fac_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8236 8242])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8243 8257]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8218 8258])
            ("mpz_fac_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8195 8201])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8202 8216]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8178 8217])
            ("mpz_root" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8141 8147])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8148 8160])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8161 8175]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8127 8176])
            ("mpz_rootrem" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8084 8090])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8091 8097])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8098 8110])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8111 8125]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8066 8126])
            ("mpz_powm_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8016 8022])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8023 8035])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [8036 8050])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8051 8063]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7998 8064])
            ("mpz_powm" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7951 7957])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7958 7970])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7971 7983])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7984 7996]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7936 7997])
            ("mpz_ui_pow_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7898 7904])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7905 7919])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7920 7934]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7878 7935])
            ("mpz_pow_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7842 7848])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7849 7861])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7862 7876]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7825 7877])
            ("mpz_perfect_square_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7810 7822]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7784 7823])
            ("mpz_sqrt" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7763 7769])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7770 7782]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7748 7783])
            ("mpz_sqrtrem" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7720 7726])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7727 7733])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7734 7746]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7702 7747])
            ("mpz_invert" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7667 7673])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7674 7686])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7687 7699]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7651 7700])
            ("mpz_lcm" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7617 7623])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7624 7636])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7637 7649]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7603 7650])
            ("mpz_lcm_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7567 7573])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7574 7586])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7587 7601]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7550 7602])
            ("mpz_gcdext" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7502 7508])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7509 7515])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7516 7522])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7523 7535])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7536 7548]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7485 7549])
            ("mpz_gcd" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7451 7457])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7458 7470])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7471 7483]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7437 7484])
            ("mpz_gcd_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7401 7407])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7408 7420])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7421 7435]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7375 7436])
            ("mpz_divisible_ui_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7345 7357])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7358 7372]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7321 7373])
            ("mpz_divexact_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7284 7290])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7291 7303])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7304 7318]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7262 7319])
            ("mpz_mod_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7225 7231])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7232 7244])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7245 7259]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7199 7260])
            ("mpz_tdiv_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7169 7181])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7182 7196]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7142 7197])
            ("mpz_fdiv_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7113 7125])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7126 7140]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7086 7141])
            ("mpz_cdiv_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7057 7069])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7070 7084]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7030 7085])
            ("mpz_tdiv_r_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6994 7000])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7001 7013])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [7014 7028]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6965 7029])
            ("mpz_fdiv_r_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6929 6935])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6936 6948])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6949 6963]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6900 6964])
            ("mpz_cdiv_r_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6864 6870])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6871 6883])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6884 6898]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6835 6899])
            ("mpz_tdiv_q_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6799 6805])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6806 6818])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6819 6833]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6770 6834])
            ("mpz_fdiv_q_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6734 6740])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6741 6753])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6754 6768]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6705 6769])
            ("mpz_cdiv_q_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6669 6675])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6676 6688])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6689 6703]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6640 6704])
            ("mpz_tdiv_qr_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6597 6603])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6604 6610])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6611 6623])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6624 6638]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6567 6639])
            ("mpz_fdiv_qr_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6524 6530])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6531 6537])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6538 6550])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6551 6565]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6494 6566])
            ("mpz_cdiv_qr_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "unsigned long"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6451 6457])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6458 6464])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6465 6477])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [6478 6492]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6421 6493])
            ("mpz_congruent_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6380 6392])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6393 6405])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6406 6418]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6359 6419])
            ("mpz_divisible_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6332 6344])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6345 6357]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6311 6358])
            ("mpz_divexact" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6276 6282])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6283 6295])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6296 6308]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6257 6309])
            ("mpz_mod" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6222 6228])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6229 6241])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6242 6254]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6208 6255])
            ("mpz_tdiv_r_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6173 6179])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6180 6192])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6193 6205]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6151 6206])
            ("mpz_fdiv_r_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6117 6123])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6124 6136])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6137 6149]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6095 6150])
            ("mpz_cdiv_r_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6061 6067])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6068 6080])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6081 6093]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6039 6094])
            ("mpz_tdiv_q_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6005 6011])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6012 6024])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6025 6037]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5983 6038])
            ("mpz_fdiv_q_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5949 5955])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5956 5968])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5969 5981]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5927 5982])
            ("mpz_cdiv_q_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5893 5899])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5900 5912])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5913 5925]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5871 5926])
            ("mpz_tdiv_r" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5836 5842])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5843 5855])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5856 5868]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5819 5869])
            ("mpz_fdiv_r" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5785 5791])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5792 5804])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5805 5817]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5768 5818])
            ("mpz_cdiv_r" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5734 5740])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5741 5753])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5754 5766]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5717 5767])
            ("mpz_tdiv_q" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5683 5689])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5690 5702])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5703 5715]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5666 5716])
            ("mpz_fdiv_q" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5632 5638])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5639 5651])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5652 5664]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5615 5665])
            ("mpz_cdiv_q" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5581 5587])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5588 5600])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5601 5613]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5564 5614])
            ("mpz_tdiv_qr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5523 5529])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5530 5536])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5537 5549])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5550 5562]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5505 5563])
            ("mpz_fdiv_qr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5464 5470])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5471 5477])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5478 5490])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5491 5503]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5446 5504])
            ("mpz_cdiv_qr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5405 5411])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5412 5418])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5419 5431])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5432 5444]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5387 5445])
            ("mpz_submul" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5352 5358])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5359 5371])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5372 5384]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5335 5385])
            ("mpz_submul_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5295 5301])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5302 5314])
                    ("" variable (:type "unsigned long int") (reparse-symbol arg-sub-list) [5315 5333]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5275 5334])
            ("mpz_addmul" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5241 5247])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5248 5260])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5261 5273]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5224 5274])
            ("mpz_addmul_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5184 5190])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5191 5203])
                    ("" variable (:type "unsigned long int") (reparse-symbol arg-sub-list) [5204 5222]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5164 5223])
            ("mpz_mul_2exp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5130 5136])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5137 5149])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5150 5162]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5111 5163])
            ("mpz_mul" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5077 5083])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5084 5096])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5097 5109]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5063 5110])
            ("mpz_mul_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5023 5029])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5030 5042])
                    ("" variable (:type "unsigned long int") (reparse-symbol arg-sub-list) [5043 5061]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [5006 5062])
            ("mpz_mul_si" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4975 4981])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4982 4994])
                    ("" variable (:type "long int") (reparse-symbol arg-sub-list) [4995 5004]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4958 5005])
            ("mpz_sub" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4923 4929])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4930 4942])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4943 4955]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4909 4956])
            ("mpz_ui_sub" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4873 4879])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [4880 4894])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4895 4907]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4856 4908])
            ("mpz_sub_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4820 4826])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4827 4839])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [4840 4854]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4803 4855])
            ("mpz_add" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4769 4775])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4776 4788])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4789 4801]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4755 4802])
            ("mpz_add_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4719 4725])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4726 4738])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [4739 4753]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4702 4754])
            ("mpz_swap" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4686 4692])
                    ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4693 4699]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4671 4700])
            ("mpz_neg" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4650 4656])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4657 4669]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4636 4670])
            ("mpz_abs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4615 4621])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4622 4634]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4601 4635])
            ("mpz_cmpabs_d" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4578 4590])
                    ("" variable (:type "double") (reparse-symbol arg-sub-list) [4591 4598]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4560 4599])
            ("mpz_cmp_d" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4538 4550])
                    ("" variable (:type "double") (reparse-symbol arg-sub-list) [4551 4558]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4523 4559])
            ("mpz_cmpabs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4496 4508])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4509 4521]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4480 4522])
            ("mpz_cmpabs_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4451 4463])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [4464 4478]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4432 4479])
            ("mpz_cmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4405 4417])
                    ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4418 4430]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4392 4431])
            ("mpz_cmp_ui" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4363 4375])
                    ("" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [4376 4390]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4347 4391])
            ("mpz_cmp_si" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4327 4339])
                    ("" variable (:type "long") (reparse-symbol arg-sub-list) [4340 4345]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4311 4346])
            ("mpz_sgn" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4297 4309]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4284 4310])
            ("mpz_even_p" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4250 4260])
            ("mpz_odd_p" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4182 4191])
            ("mpz_clear" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4165 4171]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4149 4172])
            ("mpz_init2" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4128 4134])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4135 4147]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4112 4148])
            ("mpz_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4104 4110]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4089 4111])
            ("mpn_set_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4043 4050])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [4051 4073])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4074 4081])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [4082 4086]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [4020 4087])
            ("mpn_get_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [3978 3994])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3995 3999])
                    ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4000 4007])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4008 4018]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3958 4019])
            ("mpn_invert_limb" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3913 3928])
            ("mpn_invert_3by2" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3882 3892])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3893 3903]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3855 3904])
            ("mpn_popcount" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3831 3841])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3842 3852]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3805 3853])
            ("mpn_neg" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3773 3780])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3781 3791])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3792 3802]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3754 3803])
            ("mpn_com" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3723 3730])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3731 3741])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3742 3752]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3709 3753])
            ("mpn_scan1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3683 3693])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3694 3706]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3660 3707])
            ("mpn_scan0" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_bitcnt_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3635 3645])
                    ("" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3646 3658]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3612 3659])
            ("mpn_rshift" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3566 3573])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3574 3584])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3585 3595])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [3596 3609]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3544 3610])
            ("mpn_lshift" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3499 3506])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3507 3517])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3518 3528])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [3529 3542]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3477 3543])
            ("mpn_sqrtrem" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3437 3444])
                    ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3445 3452])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3453 3463])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3464 3474]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3414 3475])
            ("mpn_perfect_square_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3391 3401])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3402 3412]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3365 3413])
            ("mpn_sqr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3334 3341])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3342 3352])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3353 3363]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3320 3364])
            ("mpn_mul_n" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3278 3285])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3286 3296])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3297 3307])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3308 3318]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3262 3319])
            ("mpn_mul" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3209 3216])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3217 3227])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3228 3238])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3239 3249])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3250 3260]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3190 3261])
            ("mpn_submul_1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3147 3154])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3155 3165])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3166 3176])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3177 3187]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3123 3188])
            ("mpn_addmul_1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3081 3088])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3089 3099])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3100 3110])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3111 3121]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3057 3122])
            ("mpn_mul_1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3015 3022])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3023 3033])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3034 3044])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3045 3055]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2994 3056])
            ("mpn_sub" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2940 2947])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2948 2958])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2959 2969])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2970 2980])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2981 2991]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2921 2992])
            ("mpn_sub_n" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2879 2886])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2887 2897])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2898 2908])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2909 2919]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2858 2920])
            ("mpn_sub_1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2816 2823])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2824 2834])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2835 2845])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2846 2856]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2795 2857])
            ("mpn_add" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2741 2748])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2749 2759])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2760 2770])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2771 2781])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2782 2792]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2722 2793])
            ("mpn_add_n" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2680 2687])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2688 2698])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2699 2709])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2710 2720]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2659 2721])
            ("mpn_add_1" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("mp_limb_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2617 2624])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2625 2635])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2636 2646])
                    ("" variable (:type ("mp_limb_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2647 2657]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2596 2658])
            ("mpn_zero_p" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2572 2582])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2583 2593]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2556 2594])
            ("mpn_cmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2522 2532])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2533 2543])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2544 2554]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2509 2555])
            ("mpn_zero" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2488 2495])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2496 2506]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2473 2507])
            ("mpn_copyd" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2442 2449])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2450 2460])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2461 2471]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2426 2472])
            ("mpn_copyi" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable (:type ("mp_ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2395 2402])
                    ("" variable (:type ("mp_srcptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2403 2413])
                    ("" variable (:type ("mp_size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2414 2424]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2379 2425])
            ("mp_bits_per_limb" variable
               (:type "int"
                :constant-flag t
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [2343 2377])
            ("mpz_srcptr" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :pointer 1
                :typedef ("__mpz_struct" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [2302 2341])
            ("mpz_ptr" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :pointer 1
                :typedef ("__mpz_struct" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [2271 2301])
            ("mpz_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("__mpz_struct" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [2239 2269])
            ("__mpz_struct" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("_mp_alloc" variable (:type "int") (reparse-symbol classsubparts) [1925 1939])
                          ("_mp_size" variable (:type "int") (reparse-symbol classsubparts) [2020 2033])
                          ("_mp_d" variable
                             (:pointer 1
                              :type ("mp_limb_t" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [2174 2191]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [1906 2237])
            ("mp_srcptr" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :pointer 1
                :typedef ("mp_limb_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [1869 1904])
            ("mp_ptr" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :pointer 1
                :typedef ("mp_limb_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [1842 1868])
            ("mp_bitcnt_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("unsigned long"))
                (reparse-symbol extern-c-contents) [1806 1840])
            ("mp_size_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("long"))
                (reparse-symbol extern-c-contents) [1782 1805])
            ("mp_limb_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("unsigned long"))
                (reparse-symbol extern-c-contents) [1749 1781])
            ("mp_get_memory_functions" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1643 1653])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1673 1683])
                    (nil variable (:pointer (("" variable (:pointer 1 :type "void") (reparse-symbol arg-sub-list) [1730 1737]) ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1738 1745])) :type "void") (reparse-symbol arg-sub-list) [1719 1746]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1613 1747])
            ("mp_set_memory_functions" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1510 1519])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1539 1548])
                    ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [1594 1601])
                            ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1602 1609]))                          
                        :type "void")
                        nil nil))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1480 1611]))          
      :file "mini-gmp.h"
      :pointmax 11404
      :fsize 11403
      :lastmodtime '(23443 29220 96473 742000)
      :unmatched-syntax '((semantic-list 1684 . 1708) (semantic-list 1679 . 1683) (semantic-list 1654 . 1662) (semantic-list 1649 . 1653) (semantic-list 1549 . 1573) (semantic-list 1545 . 1548) (semantic-list 1520 . 1528) (semantic-list 1516 . 1519))
      :lexical-table 
        '(("mpz_even_p" (spp-arg-list ("z") 4260 . 4263) . ((semantic-list "(! mpz_odd_p (z))" 4265 . 4282)))
          ("__MINI_GMP_H__")
          ("mpz_odd_p" (spp-arg-list ("z") 4191 . 4194) . ((semantic-list "(((z)->_mp_size != 0) & (int) (z)->_mp_d[0])" 4197 . 4241)))
          ("MPZ_ROINIT_N" (spp-arg-list ("xp" "xs") 9498 . 9506) . ((semantic-list "{{0, (xs),(xp) }}" 9507 . 9524)))
          ("mpn_invert_limb" (spp-arg-list ("x") 3928 . 3931) . ((symbol "mpn_invert_3by2" 3932 . 3947) (semantic-list "((x), 0)" 3948 . 3956)))
          )
)

    (semanticdb-table "semanticdb-table-1afade0"
      :major-mode c-mode
      :tags 
        '( ("EMACS_COMPOSITE_H" variable (:constant-flag t) nil [1136 1153])
            ("font.h" include nil nil [1155 1172])
            ("composition_method" type
               (:members 
                  ( ("COMPOSITION_RELATIVE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1350 1371])
                    ("COMPOSITION_WITH_RULE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1532 1554])
                    ("COMPOSITION_WITH_ALTCHARS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1612 1638])
                    ("COMPOSITION_WITH_RULE_ALTCHARS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1716 1747])
                    ("COMPOSITION_NO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1781 1797]))                  
                :type "enum")
                nil [1264 1798])
            ("MAX_COMPOSITION_COMPONENTS" variable (:constant-flag t) nil [1875 1901])
            ("composition_registered_p" function
               (:arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2258 2275]))                  
                :type "bool")
                nil [2227 2311])
            ("COMPOSITION_ID" variable (:constant-flag t) nil [2384 2398])
            ("COMPOSITION_LENGTH" variable (:constant-flag t) nil [2477 2495])
            ("COMPOSITION_COMPONENTS" variable (:constant-flag t) nil [2667 2689])
            ("COMPOSITION_MODIFICATION_FUNC" variable (:constant-flag t) nil [2859 2888])
            ("COMPOSITION_GLYPH" variable (:constant-flag t) nil [3126 3143])
            ("COMPOSITION_RULE" variable (:constant-flag t) nil [3544 3560])
            ("COMPOSITION_DECODE_REFS" variable (:constant-flag t) nil [3976 3999])
            ("COMPOSITION_DECODE_RULE" variable (:constant-flag t) nil [4340 4363])
            ("COMPOSITION_ENCODE_RULE_VALID" variable (:constant-flag t) nil [4676 4705])
            ("COMPOSITION_ENCODE_RULE" variable (:constant-flag t) nil [4932 4955])
            ("composition" type
               (:members 
                  ( ("glyph_len" variable (:type "int") (reparse-symbol classsubparts) [5485 5499])
                    ("pixel_width" variable (:type "short") (reparse-symbol classsubparts) [5566 5601])
                    ("ascent" variable (:type "short") (reparse-symbol classsubparts) [5566 5601])
                    ("descent" variable (:type "short") (reparse-symbol classsubparts) [5566 5601])
                    ("lbearing" variable (:type "short") (reparse-symbol classsubparts) [5605 5630])
                    ("rbearing" variable (:type "short") (reparse-symbol classsubparts) [5605 5630])
                    ("width" variable (:type "int") (reparse-symbol classsubparts) [5796 5806])
                    ("method" variable (:type ("composition_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [5846 5877])
                    ("hash_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5927 5948])
                    ("font" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [6061 6072])
                    ("offsets" variable
                       (:pointer 1
                        :type "short")
                        (reparse-symbol classsubparts) [6406 6421]))                  
                :type "struct")
                nil [5405 6424])
            ("composition_table" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type ("composition" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6512 6558])
            ("n_compositions" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6615 6647])
            ("CHECK_HEAD" variable (:constant-flag t) nil [6782 6792])
            ("CHECK_TAIL" variable (:constant-flag t) nil [6826 6836])
            ("CHECK_INSIDE" variable (:constant-flag t) nil [6868 6880])
            ("CHECK_BORDER" variable (:constant-flag t) nil [6917 6929])
            ("CHECK_ALL" variable (:constant-flag t) nil [6964 6973])
            ("composition_hash_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [7005 7047])
            ("get_composition_id" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7085 7095])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7096 7106])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7107 7117])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7127 7139])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7140 7152]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7048 7153])
            ("find_composition" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7184 7194])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7195 7205])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7206 7218])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7219 7231])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7241 7255])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7256 7268]))                  
                :type "bool")
                nil [7154 7269])
            ("update_compositions" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7303 7313])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7314 7324])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [7325 7329]))                  
                :type "void")
                nil [7270 7330])
            ("make_composition_value_copy" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7372 7384]))                  
                :type "void")
                nil [7331 7385])
            ("syms_of_composite" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7417 7422]))                  
                :type "void")
                nil [7386 7423])
            ("compose_text" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7450 7460])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7461 7471])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7472 7484])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7485 7497])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7524 7536]))                  
                :type "void")
                nil [7424 7537])
            ("composition_method" function
               (:arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7653 7670]))                  
                :type ("composition_method" type (:type "enum") nil nil))
                nil [7609 8013])
            ("composition_valid_p" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8165 8181])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8182 8196])
                    ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8197 8214]))                  
                :type "bool")
                nil [8139 8664])
            ("LGSTRING_HEADER" variable (:constant-flag t) nil [8772 8787])
            ("LGSTRING_SET_HEADER" variable (:constant-flag t) nil [8815 8834])
            ("LGSTRING_FONT" variable (:constant-flag t) nil [8879 8892])
            ("LGSTRING_CHAR" variable (:constant-flag t) nil [8938 8951])
            ("LGSTRING_CHAR_LEN" variable (:constant-flag t) nil [9006 9023])
            ("LGSTRING_SET_FONT" variable (:constant-flag t) nil [9074 9091])
            ("LGSTRING_SET_CHAR" variable (:constant-flag t) nil [9149 9166])
            ("LGSTRING_ID" variable (:constant-flag t) nil [9230 9241])
            ("LGSTRING_SET_ID" variable (:constant-flag t) nil [9269 9284])
            ("LGSTRING_GLYPH_LEN" variable (:constant-flag t) nil [9321 9339])
            ("LGSTRING_GLYPH" variable (:constant-flag t) nil [9373 9387])
            ("LGSTRING_SET_GLYPH" variable (:constant-flag t) nil [9430 9448])
            ("lgstring_glyph_addr" function
               (:pointer 1
                :arguments 
                  ( ("lgs" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9537 9553])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9554 9568]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9502 9607])
            ("lglyph_indices" type
               (:members 
                  ( ("LGLYPH_IX_FROM" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9672 9687])
                    ("LGLYPH_IX_TO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9688 9701])
                    ("LGLYPH_IX_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9703 9718])
                    ("LGLYPH_IX_CODE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9719 9734])
                    ("LGLYPH_IX_WIDTH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9739 9755])
                    ("LGLYPH_IX_LBEARING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9756 9775])
                    ("LGLYPH_IX_RBEARING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9776 9795])
                    ("LGLYPH_IX_ASCENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9800 9817])
                    ("LGLYPH_IX_DESCENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9818 9836])
                    ("LGLYPH_IX_ADJUSTMENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9837 9858])
                    ("LGLYPH_SIZE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9888 9903]))                  
                :type "enum")
                nil [9644 9904])
            ("LGLYPH_NEW" variable (:constant-flag t) nil [9914 9924])
            ("LGLYPH_FROM" variable (:constant-flag t) nil [9982 9993])
            ("LGLYPH_TO" variable (:constant-flag t) nil [10042 10051])
            ("LGLYPH_CHAR" variable (:constant-flag t) nil [10098 10109])
            ("LGLYPH_CODE" variable (:constant-flag t) nil [10158 10169])
            ("LGLYPH_WIDTH" variable (:constant-flag t) nil [10335 10347])
            ("LGLYPH_LBEARING" variable (:constant-flag t) nil [10397 10412])
            ("LGLYPH_RBEARING" variable (:constant-flag t) nil [10465 10480])
            ("LGLYPH_ASCENT" variable (:constant-flag t) nil [10533 10546])
            ("LGLYPH_DESCENT" variable (:constant-flag t) nil [10597 10611])
            ("LGLYPH_ADJUSTMENT" variable (:constant-flag t) nil [10663 10680])
            ("LGLYPH_SET_FROM" variable (:constant-flag t) nil [10725 10740])
            ("LGLYPH_SET_TO" variable (:constant-flag t) nil [10803 10816])
            ("LGLYPH_SET_CHAR" variable (:constant-flag t) nil [10877 10892])
            ("LGLYPH_SET_CODE" variable (:constant-flag t) nil [11008 11023])
            ("LGLYPH_SET_WIDTH" variable (:constant-flag t) nil [11140 11156])
            ("LGLYPH_SET_LBEARING" variable (:constant-flag t) nil [11220 11239])
            ("LGLYPH_SET_RBEARING" variable (:constant-flag t) nil [11306 11325])
            ("LGLYPH_SET_ASCENT" variable (:constant-flag t) nil [11392 11409])
            ("LGLYPH_SET_DESCENT" variable (:constant-flag t) nil [11474 11492])
            ("LGLYPH_SET_ADJUSTMENT" variable (:constant-flag t) nil [11558 11579])
            ("LGLYPH_XOFF" variable (:constant-flag t) nil [11637 11648])
            ("LGLYPH_YOFF" variable (:constant-flag t) nil [11747 11758])
            ("LGLYPH_WADJUST" variable (:constant-flag t) nil [11857 11871])
            ("composition_gstring_put_cache" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12016 12028])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12029 12039]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11966 12040])
            ("composition_gstring_from_id" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12089 12099]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12041 12100])
            ("composition_gstring_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12136 12148]))                  
                :type "bool")
                nil [12101 12149])
            ("composition_gstring_width" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12188 12200])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12201 12211])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12212 12222])
                    ("" variable
                       (:pointer 1
                        :type ("font_metrics" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12261 12283]))                  
                :type "int")
                nil [12150 12284])
            ("composition_compute_stop_pos" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("composition_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12328 12352])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12395 12405])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12406 12416])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12417 12427])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12470 12482]))                  
                :type "void")
                nil [12286 12483])
            ("composition_reseat_it" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("composition_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12519 12543])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12544 12554])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12562 12572])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12573 12583])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12584 12600])
                    ("" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12608 12622])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12623 12635]))                  
                :type "bool")
                nil [12484 12636])
            ("composition_update_it" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("composition_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12671 12695])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12730 12740])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12741 12751])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12752 12764]))                  
                :type "int")
                nil [12637 12765])
            ("composition_adjust_point" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12810 12820])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12821 12831]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [12767 12832]))          
      :file "composite.h"
      :pointmax 12888
      :fsize 12886
      :lastmodtime '(23443 29219 989873 50000)
      :unmatched-syntax '((symbol 12834 . 12851) (symbol 9495 . 9501) (symbol 8132 . 8138) (symbol 7602 . 7608) (symbol 2220 . 2226) (symbol 1174 . 1193))
      :lexical-table 
        '(("COMPOSITION_DECODE_RULE" (spp-arg-list ("rule_code" "gref" "nref" "xoff" "yoff") 4363 . 4398) . 
              ((DO "do" 4403 . 4405) (semantic-list "{									\\
    xoff = (rule_code) >> 16;						\\
    yoff = ((rule_code) >> 8) & 0xFF;					\\
    COMPOSITION_DECODE_REFS (rule_code, gref, nref);			\\
  }" 4406 . 4559) (WHILE "while" 4560 . 4565) (semantic-list "(false)" 4566 . 4573)))
          ("LGSTRING_ID" (spp-arg-list ("lgs") 9241 . 9246) . ((symbol "AREF" 9247 . 9251) (semantic-list "(lgs, 1)" 9252 . 9260)))
          ("COMPOSITION_COMPONENTS" (spp-arg-list ("prop") 2689 . 2695) . ((semantic-list "(composition_registered_p (prop)	\\
   ? XCAR (XCDR (XCDR (prop)))		\\
   : XCDR (XCAR (prop)))" 2700 . 2793)))
          ("CHECK_TAIL" . ((number "2" 6837 . 6838)))
          ("LGLYPH_SET_FROM" (spp-arg-list ("g" "val") 10740 . 10748) . ((symbol "ASET" 10749 . 10753) (semantic-list "((g), LGLYPH_IX_FROM, make_fixnum (val))" 10754 . 10794)))
          ("LGLYPH_SET_CHAR" (spp-arg-list ("g" "val") 10892 . 10900) . ((symbol "ASET" 10901 . 10905) (semantic-list "((g), LGLYPH_IX_CHAR, make_fixnum (val))" 10906 . 10946)))
          ("LGLYPH_XOFF" (spp-arg-list ("g") 11648 . 11651) . ((semantic-list "(VECTORP (LGLYPH_ADJUSTMENT (g)) \\
			? XFIXNUM (AREF (LGLYPH_ADJUSTMENT (g), 0)) : 0)" 11652 . 11738)))
          ("COMPOSITION_MODIFICATION_FUNC" (spp-arg-list ("prop") 2888 . 2894) . ((semantic-list "(composition_registered_p (prop)		\\
   ? XCDR (XCDR (XCDR (prop)))			\\
   : CONSP (prop) ? XCDR (prop) : Qnil)" 2899 . 3009)))
          ("LGLYPH_SET_ASCENT" (spp-arg-list ("g" "val") 11409 . 11417) . ((symbol "ASET" 11418 . 11422) (semantic-list "((g), LGLYPH_IX_ASCENT, make_fixnum (val))" 11423 . 11465)))
          ("LGLYPH_YOFF" (spp-arg-list ("g") 11758 . 11761) . ((semantic-list "(VECTORP (LGLYPH_ADJUSTMENT (g)) \\
			? XFIXNUM (AREF (LGLYPH_ADJUSTMENT (g), 1)) : 0)" 11762 . 11848)))
          ("LGLYPH_ASCENT" (spp-arg-list ("g") 10546 . 10549) . ((symbol "XFIXNUM" 10550 . 10557) (semantic-list "(AREF ((g), LGLYPH_IX_ASCENT))" 10558 . 10588)))
          ("LGLYPH_SET_WIDTH" (spp-arg-list ("g" "val") 11156 . 11164) . ((symbol "ASET" 11165 . 11169) (semantic-list "((g), LGLYPH_IX_WIDTH, make_fixnum (val))" 11170 . 11211)))
          ("LGLYPH_SET_ADJUSTMENT" (spp-arg-list ("g" "val") 11579 . 11587) . ((symbol "ASET" 11588 . 11592) (semantic-list "((g), LGLYPH_IX_ADJUSTMENT, (val))" 11593 . 11627)))
          ("LGLYPH_NEW" (spp-arg-list nil 9924 . 9926) . ((symbol "Fmake_vector" 9927 . 9939) (semantic-list "(make_fixnum (LGLYPH_SIZE), Qnil)" 9940 . 9973)))
          ("LGLYPH_RBEARING" (spp-arg-list ("g") 10480 . 10483) . ((symbol "XFIXNUM" 10484 . 10491) (semantic-list "(AREF ((g), LGLYPH_IX_RBEARING))" 10492 . 10524)))
          ("LGSTRING_CHAR_LEN" (spp-arg-list ("lgs") 9023 . 9028) . ((semantic-list "(ASIZE (LGSTRING_HEADER (lgs)) - 1)" 9029 . 9064)))
          ("LGSTRING_GLYPH_LEN" (spp-arg-list ("lgs") 9339 . 9344) . ((semantic-list "(ASIZE ((lgs)) - 2)" 9345 . 9364)))
          ("LGLYPH_FROM" (spp-arg-list ("g") 9993 . 9996) . ((symbol "XFIXNUM" 9997 . 10004) (semantic-list "(AREF ((g), LGLYPH_IX_FROM))" 10005 . 10033)))
          ("LGLYPH_CHAR" (spp-arg-list ("g") 10109 . 10112) . ((symbol "XFIXNUM" 10113 . 10120) (semantic-list "(AREF ((g), LGLYPH_IX_CHAR))" 10121 . 10149)))
          ("EMACS_COMPOSITE_H")
          ("COMPOSITION_GLYPH" (spp-arg-list ("cmp" "n") 3143 . 3151) . ((symbol "XFIXNUM" 3160 . 3167) (semantic-list "(XVECTOR (XVECTOR (XHASH_TABLE (composition_hash_table)		\\
			  ->key_and_value)				\\
		 ->contents[cmp->hash_index * 2])			\\
	->contents[cmp->method == COMPOSITION_WITH_RULE_ALTCHARS	\\
		  ? (n) * 2 : (n)])" 3168 . 3375)))
          ("CHECK_HEAD" . ((number "1" 6793 . 6794)))
          ("LGSTRING_SET_CHAR" (spp-arg-list ("lgs" "i" "c") 9166 . 9177) . ((symbol "ASET" 9178 . 9182) (semantic-list "(LGSTRING_HEADER (lgs), (i) + 1, (c))" 9183 . 9220)))
          ("LGSTRING_SET_ID" (spp-arg-list ("lgs" "id") 9284 . 9293) . ((symbol "ASET" 9294 . 9298) (semantic-list "(lgs, 1, id)" 9299 . 9311)))
          ("LGSTRING_SET_GLYPH" (spp-arg-list ("lgs" "idx" "val") 9448 . 9463) . ((symbol "ASET" 9464 . 9468) (semantic-list "((lgs), (idx) + 2, (val))" 9469 . 9494)))
          ("LGLYPH_ADJUSTMENT" (spp-arg-list ("g") 10680 . 10683) . ((symbol "AREF" 10684 . 10688) (semantic-list "((g), LGLYPH_IX_ADJUSTMENT)" 10689 . 10716)))
          ("LGLYPH_SET_LBEARING" (spp-arg-list ("g" "val") 11239 . 11247) . ((symbol "ASET" 11248 . 11252) (semantic-list "((g), LGLYPH_IX_LBEARING, make_fixnum (val))" 11253 . 11297)))
          ("LGLYPH_SET_DESCENT" (spp-arg-list ("g" "val") 11492 . 11500) . ((symbol "ASET" 11501 . 11505) (semantic-list "((g), LGLYPH_IX_DESCENT, make_fixnum (val))" 11506 . 11549)))
          ("MAX_COMPOSITION_COMPONENTS" . ((number "16" 1902 . 1904)))
          ("COMPOSITION_RULE" (spp-arg-list ("cmp" "n") 3560 . 3568) . ((symbol "XFIXNUM" 3576 . 3583) (semantic-list "(XVECTOR (XVECTOR (XHASH_TABLE (composition_hash_table)	\\
			  ->key_and_value)			\\
		 ->contents[cmp->hash_index * 2])		\\
	->contents[(n) * 2 - 1])" 3584 . 3732)))
          ("COMPOSITION_DECODE_REFS" (spp-arg-list ("rule_code" "gref" "nref") 3999 . 4022) . 
              ((DO "do" 4029 . 4031) (semantic-list "{									\\
    rule_code &= 0xFF;							\\
    gref = (rule_code) / 12;						\\
    if (gref > 12) gref = 11;						\\
    nref = (rule_code) % 12;						\\
  }" 4032 . 4187) (WHILE "while" 4188 . 4193) (semantic-list "(false)" 4194 . 4201)))
          ("COMPOSITION_ENCODE_RULE_VALID" (spp-arg-list ("gref" "nref") 4705 . 4717) . ((semantic-list "(UNSIGNED_CMP (gref, <, 12) && UNSIGNED_CMP (nref, <, 12))" 4722 . 4780)))
          ("LGSTRING_CHAR" (spp-arg-list ("lgs" "i") 8951 . 8959) . ((symbol "AREF" 8960 . 8964) (semantic-list "(LGSTRING_HEADER (lgs), (i) + 1)" 8965 . 8997)))
          ("LGLYPH_DESCENT" (spp-arg-list ("g") 10611 . 10614) . ((symbol "XFIXNUM" 10615 . 10622) (semantic-list "(AREF ((g), LGLYPH_IX_DESCENT))" 10623 . 10654)))
          ("LGLYPH_SET_CODE" (spp-arg-list ("g" "val") 11023 . 11031) . ((symbol "ASET" 11041 . 11045) (semantic-list "(g, LGLYPH_IX_CODE,						\\
	val == FONT_INVALID_CODE ? Qnil : INTEGER_TO_CONS (val))" 11046 . 11130)))
          ("LGLYPH_WADJUST" (spp-arg-list ("g") 11871 . 11874) . ((semantic-list "(VECTORP (LGLYPH_ADJUSTMENT (g)) \\
			   ? XFIXNUM (AREF (LGLYPH_ADJUSTMENT (g), 2)) : 0)" 11875 . 11964)))
          ("CHECK_ALL" . ((semantic-list "(CHECK_BORDER | CHECK_INSIDE)" 6974 . 7003)))
          ("LGSTRING_SET_HEADER" (spp-arg-list ("lgs" "header") 8834 . 8847) . ((symbol "ASET" 8848 . 8852) (semantic-list "(lgs, 0, header)" 8853 . 8869)))
          ("LGSTRING_SET_FONT" (spp-arg-list ("lgs" "val") 9091 . 9101) . ((symbol "ASET" 9102 . 9106) (semantic-list "(LGSTRING_HEADER (lgs), 0, (val))" 9107 . 9140)))
          ("LGLYPH_TO" (spp-arg-list ("g") 10051 . 10054) . ((symbol "XFIXNUM" 10055 . 10062) (semantic-list "(AREF ((g), LGLYPH_IX_TO))" 10063 . 10089)))
          ("COMPOSITION_ID" (spp-arg-list ("prop") 2398 . 2404) . ((symbol "XFIXNUM" 2405 . 2412) (semantic-list "(XCAR (prop))" 2413 . 2426)))
          ("CHECK_INSIDE" . ((number "4" 6881 . 6882)))
          ("LGSTRING_GLYPH" (spp-arg-list ("lgs" "idx") 9387 . 9397) . ((symbol "AREF" 9398 . 9402) (semantic-list "((lgs), (idx) + 2)" 9403 . 9421)))
          ("LGLYPH_SET_TO" (spp-arg-list ("g" "val") 10816 . 10824) . ((symbol "ASET" 10825 . 10829) (semantic-list "((g), LGLYPH_IX_TO, make_fixnum (val))" 10830 . 10868)))
          ("COMPOSITION_LENGTH" (spp-arg-list ("prop") 2495 . 2501) . ((semantic-list "(composition_registered_p (prop)	\\
   ? XFIXNUM (XCAR (XCDR (prop)))		\\
   : XFIXNUM (XCAR (XCAR (prop))))" 2506 . 2612)))
          ("CHECK_BORDER" . ((semantic-list "(CHECK_HEAD | CHECK_TAIL)" 6930 . 6955)))
          ("LGSTRING_HEADER" (spp-arg-list ("lgs") 8787 . 8792) . ((symbol "AREF" 8793 . 8797) (semantic-list "(lgs, 0)" 8798 . 8806)))
          ("LGSTRING_FONT" (spp-arg-list ("lgs") 8892 . 8897) . ((symbol "AREF" 8898 . 8902) (semantic-list "(LGSTRING_HEADER (lgs), 0)" 8903 . 8929)))
          ("COMPOSITION_ENCODE_RULE" (spp-arg-list ("gref" "nref") 4955 . 4967) . ((semantic-list "((gref) * 12 + (nref))" 4973 . 4995)))
          ("LGLYPH_CODE" (spp-arg-list ("g") 10169 . 10172) . ((semantic-list "(NILP (AREF ((g), LGLYPH_IX_CODE))				\\
   ? FONT_INVALID_CODE						\\
   : cons_to_unsigned (AREF (g, LGLYPH_IX_CODE), TYPE_MAXIMUM (unsigned)))" 10182 . 10326)))
          ("LGLYPH_WIDTH" (spp-arg-list ("g") 10347 . 10350) . ((symbol "XFIXNUM" 10351 . 10358) (semantic-list "(AREF ((g), LGLYPH_IX_WIDTH))" 10359 . 10388)))
          ("LGLYPH_LBEARING" (spp-arg-list ("g") 10412 . 10415) . ((symbol "XFIXNUM" 10416 . 10423) (semantic-list "(AREF ((g), LGLYPH_IX_LBEARING))" 10424 . 10456)))
          ("LGLYPH_SET_RBEARING" (spp-arg-list ("g" "val") 11325 . 11333) . ((symbol "ASET" 11334 . 11338) (semantic-list "((g), LGLYPH_IX_RBEARING, make_fixnum (val))" 11339 . 11383)))
          )
)
    (semanticdb-table "semanticdb-table-1afae00"
      :major-mode c-mode
      :tags 
        '( ("EMACS_TERMHOOKS_H" variable (:constant-flag t) nil [810 827])
            ("lisp.h" include nil nil [851 868])
            ("systime.h" include nil nil [869 889])
            ("glyph" type
               (:prototype t
                :type "struct")
                nil [906 919])
            ("scroll_bar_part" type
               (:members 
                  ( ("scroll_bar_nowhere" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [967 986])
                    ("scroll_bar_above_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [989 1013])
                    ("scroll_bar_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1016 1034])
                    ("scroll_bar_below_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1037 1061])
                    ("scroll_bar_up_arrow" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1064 1084])
                    ("scroll_bar_down_arrow" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1087 1109])
                    ("scroll_bar_to_top" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1112 1130])
                    ("scroll_bar_to_bottom" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1133 1154])
                    ("scroll_bar_end_scroll" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1157 1179])
                    ("scroll_bar_move_ratio" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1182 1204])
                    ("scroll_bar_before_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1207 1232])
                    ("scroll_bar_horizontal_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1235 1264])
                    ("scroll_bar_after_handle" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1267 1291])
                    ("scroll_bar_left_arrow" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1294 1316])
                    ("scroll_bar_right_arrow" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1319 1342])
                    ("scroll_bar_to_leftmost" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1345 1368])
                    ("scroll_bar_to_rightmost" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1371 1396]))                  
                :type "enum")
                nil [942 1397])
            ("output_method" type
               (:members 
                  ( ("output_initial" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1503 1518])
                    ("output_termcap" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1521 1536])
                    ("output_x_window" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1539 1555])
                    ("output_msdos_raw" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1558 1575])
                    ("output_w32" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1578 1589])
                    ("output_ns" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1592 1603]))                  
                :type "enum")
                nil [1480 1604])
            ("event_kind" type
               (:members 
                  ( ("NO_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1670 1679])
                    ("ASCII_KEYSTROKE_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1772 1794])
                    ("MULTIBYTE_CHAR_KEYSTROKE_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2086 2117])
                    ("NON_ASCII_KEYSTROKE_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2267 2293])
                    ("TIMER_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2760 2772])
                    ("MOUSE_CLICK_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2814 2832])
                    ("WHEEL_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3242 3254])
                    ("HORIZ_WHEEL_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3816 3834])
                    ("SCROLL_BAR_CLICK_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4243 4266])
                    ("HORIZONTAL_SCROLL_BAR_CLICK_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4789 4823])
                    ("SELECTION_REQUEST_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5346 5370])
                    ("SELECTION_CLEAR_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5467 5489])
                    ("BUFFER_SWITCH_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5539 5559])
                    ("DELETE_WINDOW_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5609 5629])
                    ("MENU_BAR_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5775 5790])
                    ("ICONIFY_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5963 5977])
                    ("DEICONIFY_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6023 6039])
                    ("MENU_BAR_ACTIVATE_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6087 6111])
                    ("DRAG_N_DROP_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6188 6206])
                    ("USER_SIGNAL_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6709 6727])
                    ("HELP_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7051 7062])
                    ("TOOL_BAR_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7248 7263])
                    ("FOCUS_IN_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7404 7419])
                    ("FOCUS_OUT_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7423 7439])
                    ("MOVE_FRAME_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7485 7502])
                    ("SELECT_WINDOW_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7578 7598])
                    ("SAVE_SESSION_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7699 7806])
                    ("CONFIG_CHANGED_EVENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [7807 8965]))                  
                :type "enum")
                nil [1650 8966])
            ("" type
               (:members 
                  ( ("EVENT_KIND_WIDTH" variable
                       (:constant-flag t
                        :default-value (9073 9075)
                        :type "int")
                        (reparse-symbol enumsubparts) [9054 9075]))                  
                :type "enum")
                nil [9047 9078])
            ("input_event" type
               (:members 
                  ( ("EVENT_KIND_WIDTH" variable (:type "int") (reparse-symbol classsubparts) [9627 9644])
                    ("part" variable
                       (:suffix ":16"
                        :type "int")
                        (reparse-symbol classsubparts) [9717 9727])
                    ("code" variable (:type "unsigned int") (reparse-symbol classsubparts) [9947 9961])
                    ("modifiers" variable (:type "unsigned int") (reparse-symbol classsubparts) [10009 10028])
                    ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10165 10182])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10165 10182])
                    ("timestamp" variable (:type ("Time" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10375 10390])
                    ("frame_or_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10519 10547])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10773 10789]))                  
                :type "struct")
                nil [9538 10792])
            ("EVENT_INIT" variable (:constant-flag t) nil [10802 10812])
            ("" type
               (:members 
                  ( ("up_modifier" variable
                       (:constant-flag t
                        :default-value (11785 11786)
                        :type "int")
                        (reparse-symbol enumsubparts) [11769 11786])
                    ("down_modifier" variable
                       (:constant-flag t
                        :default-value (11938 11939)
                        :type "int")
                        (reparse-symbol enumsubparts) [11920 11939])
                    ("drag_modifier" variable
                       (:constant-flag t
                        :default-value (11997 11998)
                        :type "int")
                        (reparse-symbol enumsubparts) [11979 11998])
                    ("click_modifier" variable
                       (:constant-flag t
                        :default-value (12146 12147)
                        :type "int")
                        (reparse-symbol enumsubparts) [12128 12147])
                    ("double_modifier" variable
                       (:constant-flag t
                        :default-value (12195 12197)
                        :type "int")
                        (reparse-symbol enumsubparts) [12178 12197])
                    ("triple_modifier" variable
                       (:constant-flag t
                        :default-value (12253 12255)
                        :type "int")
                        (reparse-symbol enumsubparts) [12236 12255])
                    ("alt_modifier" variable
                       (:constant-flag t
                        :default-value (12925 12933)
                        :type "int")
                        (reparse-symbol enumsubparts) [12909 12933])
                    ("super_modifier" variable
                       (:constant-flag t
                        :default-value (12995 13005)
                        :type "int")
                        (reparse-symbol enumsubparts) [12978 13005])
                    ("hyper_modifier" variable
                       (:constant-flag t
                        :default-value (13069 13079)
                        :type "int")
                        (reparse-symbol enumsubparts) [13052 13079])
                    ("shift_modifier" variable
                       (:constant-flag t
                        :default-value (13143 13153)
                        :type "int")
                        (reparse-symbol enumsubparts) [13126 13153])
                    ("ctrl_modifier" variable
                       (:constant-flag t
                        :default-value (13174 13182)
                        :type "int")
                        (reparse-symbol enumsubparts) [13157 13182])
                    ("meta_modifier" variable
                       (:constant-flag t
                        :default-value (13203 13212)
                        :type "int")
                        (reparse-symbol enumsubparts) [13186 13212]))                  
                :type "enum")
                nil [11760 13257])
            ("terminal" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [13692 13723])
                    ("param_alist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [13770 13794])
                    ("charset_list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [13951 13976])
                    ("Vselection_alist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14773 14802])
                    ("glyph_code_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14983 15012])
                    ("next_terminal" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [15198 15229])
                    ("id" variable (:type "int") (reparse-symbol classsubparts) [15277 15284])
                    ("reference_count" variable (:type "int") (reparse-symbol classsubparts) [15344 15364])
                    ("type" variable (:type ("output_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [15409 15433])
                    ("name" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [15584 15595])
                    ("kboard" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [15639 15661])
                    ("display_info" variable (:type ("display_info" type
                         (:prototype t
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [15865 16119])
                    ("display_info" type
                       (:members 
                          ( ("tty" variable
                               (:pointer 1
                                :type ("tty_display_info" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol classsubparts) [15892 15921])
                            ("x" variable
                               (:pointer 1
                                :type ("x_display_info" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol classsubparts) [15947 15972])
                            ("w32" variable
                               (:pointer 1
                                :type ("w32_display_info" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol classsubparts) [15999 16028])
                            ("ns" variable
                               (:pointer 1
                                :type ("ns_display_info" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol classsubparts) [16053 16080]))                          
                        :type "union")
                        (reparse-symbol classsubparts) [15865 16119])
                    ("terminal_coding" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [16362 16400])
                    ("keyboard_coding" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [16589 16627])
                    ("rif" variable
                       (:pointer 1
                        :type ("redisplay_interface" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [16714 16746])
                    ("cursor_to_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [16846 16862])
                            ("vpos" variable (:type "int") (reparse-symbol arg-sub-list) [16863 16872])
                            ("hpos" variable (:type "int") (reparse-symbol arg-sub-list) [16873 16882]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [16822 16883])
                    ("raw_cursor_to_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [16914 16929])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [16930 16934])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [16935 16939]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [16886 16940])
                    ("clear_to_end_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [16971 16986]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [16944 16987])
                    ("clear_frame_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17016 17031]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [16990 17032])
                    ("clear_end_of_line_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17067 17082])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [17083 17087]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17035 17088])
                    ("ins_del_lines_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17120 17136])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [17137 17141])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [17142 17146]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17092 17147])
                    ("insert_glyphs_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17179 17195])
                            ("s" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17196 17212])
                            ("n" variable (:type "int") (reparse-symbol arg-sub-list) [17213 17219]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17151 17220])
                    ("write_glyphs_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17250 17266])
                            ("s" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17267 17283])
                            ("n" variable (:type "int") (reparse-symbol arg-sub-list) [17284 17290]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17223 17291])
                    ("delete_glyphs_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17322 17337])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [17338 17342]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17294 17343])
                    ("ring_bell_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17371 17387]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17347 17388])
                    ("toggle_invisible_pointer_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17430 17446])
                            ("invisible" variable (:type "bool") (reparse-symbol arg-sub-list) [17447 17462]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17391 17463])
                    ("reset_terminal_modes_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("terminal" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17502 17520]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17467 17521])
                    ("set_terminal_modes_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("terminal" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17557 17575]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17524 17576])
                    ("update_begin_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17607 17622]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17580 17623])
                    ("update_end_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17651 17666]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17626 17667])
                    ("set_terminal_window_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [17704 17719])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [17720 17724]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [17670 17725])
                    ("mouse_position_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 2
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [18457 18474])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [18475 18479])
                            ("bar_window" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [18511 18535])
                            ("part" variable
                               (:pointer 1
                                :type ("scroll_bar_part" type (:type "enum") nil nil))
                                (reparse-symbol arg-sub-list) [18567 18594])
                            ("x" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [18626 18641])
                            ("y" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [18673 18688])
                            ("" variable
                               (:pointer 1
                                :type ("Time" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [18720 18727]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [18428 18728])
                    ("frame_rehighlight_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [18971 18986]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [18939 18987])
                    ("frame_raise_lower_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [19543 19559])
                            ("raise_flag" variable (:type "bool") (reparse-symbol arg-sub-list) [19560 19576]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [19511 19577])
                    ("fullscreen_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [19831 19847]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [19806 19848])
                    ("menu_show_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [19930 19946])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [19947 19953])
                            ("y" variable (:type "int") (reparse-symbol arg-sub-list) [19954 19960])
                            ("menuflags" variable (:type "int") (reparse-symbol arg-sub-list) [19961 19975])
                            ("title" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19981 19999])
                            ("error_name" variable
                               (:pointer 2
                                :constant-flag t
                                :type "char")
                                (reparse-symbol arg-sub-list) [20000 20024]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [19899 20025])
                    ("popup_dialog_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [20117 20133])
                            ("header" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20134 20153])
                            ("contents" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20162 20183]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [20083 20184])
                    ("set_vertical_scroll_bar_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("window" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21523 21545])
                            ("portion" variable (:type "int") (reparse-symbol arg-sub-list) [21586 21598])
                            ("whole" variable (:type "int") (reparse-symbol arg-sub-list) [21599 21609])
                            ("position" variable (:type "int") (reparse-symbol arg-sub-list) [21650 21663]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [21485 21664])
                    ("set_horizontal_scroll_bar_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("window" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [22039 22061])
                            ("portion" variable (:type "int") (reparse-symbol arg-sub-list) [22069 22081])
                            ("whole" variable (:type "int") (reparse-symbol arg-sub-list) [22082 22092])
                            ("position" variable (:type "int") (reparse-symbol arg-sub-list) [22100 22113]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [21999 22114])
                    ("condemn_scroll_bars_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("frame" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [23305 23325]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [23271 23326])
                    ("redeem_scroll_bar_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("window" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [23506 23528]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [23474 23529])
                    ("judge_scroll_bars_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("FRAME" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24144 24164]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [24112 24165])
                    ("read_socket_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("terminal" variable
                               (:pointer 1
                                :type ("terminal" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24622 24648])
                            ("hold_quit" variable
                               (:pointer 1
                                :type ("input_event" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24676 24706]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [24597 24707])
                    ("frame_up_to_date_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24810 24825]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [24779 24826])
                    ("buffer_flipping_unblocked_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [25026 25041]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [24986 25042])
                    ("delete_frame_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [25178 25193]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [25151 25194])
                    ("delete_terminal_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("terminal" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [25713 25731]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [25683 25732]))                  
                :type "struct")
                nil [13605 25735])
            ("TERMINALP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25760 25774]))                  
                :type "bool")
                nil [25744 25821])
            ("XTERMINAL" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25859 25873]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [25830 25959])
            ("tset_charset_list" function
               (:arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26078 26097])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26098 26114]))                  
                :type "void")
                nil [26054 26143])
            ("tset_selection_alist" function
               (:arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26178 26197])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26198 26214]))                  
                :type "void")
                nil [26151 26247])
            ("terminal_list" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [26304 26342])
            ("FRAME_MUST_WRITE_SPACES" variable (:constant-flag t) nil [26352 26375])
            ("FRAME_LINE_INS_DEL_OK" variable (:constant-flag t) nil [26422 26443])
            ("FRAME_CHAR_INS_DEL_OK" variable (:constant-flag t) nil [26488 26509])
            ("FRAME_SCROLL_REGION_OK" variable (:constant-flag t) nil [26554 26576])
            ("FRAME_SCROLL_REGION_COST" variable (:constant-flag t) nil [26622 26646])
            ("FRAME_MEMORY_BELOW_FRAME" variable (:constant-flag t) nil [26694 26718])
            ("FRAME_TERMINAL_CODING" variable (:constant-flag t) nil [26767 26788])
            ("FRAME_KEYBOARD_CODING" variable (:constant-flag t) nil [26833 26854])
            ("TERMINAL_TERMINAL_CODING" variable (:constant-flag t) nil [26900 26924])
            ("TERMINAL_KEYBOARD_CODING" variable (:constant-flag t) nil [26959 26983])
            ("FRAME_RIF" variable (:constant-flag t) nil [27019 27028])
            ("FRAME_TERMINAL" variable (:constant-flag t) nil [27062 27076])
            ("TERMINAL_ACTIVE_P" variable (:constant-flag t) nil [27165 27182])
            ("decode_live_terminal" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27915 27927]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [27869 27928])
            ("decode_tty_terminal" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27974 27986]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [27929 27987])
            ("get_named_terminal" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28032 28045]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [27988 28046])
            ("create_terminal" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("output_method" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [28088 28107])
                    ("" variable
                       (:pointer 1
                        :type ("redisplay_interface" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28114 28143]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [28047 28144])
            ("delete_terminal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28174 28192]))                  
                :type "void")
                nil [28145 28193])
            ("terminal_glyph_code" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28234 28252])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [28253 28257]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28194 28258])
            ("initial_terminal" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [28326 28367])
            ("encode_terminal_code" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28413 28428])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [28429 28433])
                    ("" variable
                       (:pointer 1
                        :type ("coding_system" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28443 28466]))                  
                :type "unsigned char")
                nil [28369 28467])
            ("cursorX" variable (:constant-flag t) nil [28656 28663])
            ("cursorY" variable (:constant-flag t) nil [28684 28691]))          
      :file "termhooks.h"
      :pointmax 28762
      :fsize 28826
      :lastmodtime '(23443 29226 323249 937000)
      :unmatched-syntax '((symbol 28712 . 28729) (symbol 26144 . 26150) (symbol 26047 . 26053) (symbol 25823 . 25829) (symbol 25737 . 25743) (semantic-list 9699 . 9716) (symbol 9691 . 9698) (punctuation 9625 . 9626) (symbol 9620 . 9624) (semantic-list 9607 . 9619) (symbol 9599 . 9606) (symbol 921 . 940))
      :lexical-table 
        '(("FRAME_TERMINAL" (spp-arg-list ("f") 27076 . 27079) . ((semantic-list "((f)->terminal)" 27080 . 27095)))
          ("FRAME_SCROLL_REGION_OK" (spp-arg-list ("f") 26576 . 26579) . ((semantic-list "(FRAME_TTY (f)->scroll_region_ok)" 26580 . 26613)))
          ("FRAME_MEMORY_BELOW_FRAME" (spp-arg-list ("f") 26718 . 26721) . ((semantic-list "(FRAME_TTY (f)->memory_below_frame)" 26722 . 26757)))
          ("FRAME_TERMINAL_CODING" (spp-arg-list ("f") 26788 . 26791) . ((semantic-list "((f)->terminal->terminal_coding)" 26792 . 26824)))
          ("FRAME_KEYBOARD_CODING" (spp-arg-list ("f") 26854 . 26857) . ((semantic-list "((f)->terminal->keyboard_coding)" 26858 . 26890)))
          ("FRAME_CHAR_INS_DEL_OK" (spp-arg-list ("f") 26509 . 26512) . ((semantic-list "(FRAME_TTY (f)->char_ins_del_ok)" 26513 . 26545)))
          ("TERMINAL_TERMINAL_CODING" (spp-arg-list ("d") 26924 . 26927) . ((semantic-list "((d)->terminal_coding)" 26928 . 26950)))
          ("TERMINAL_KEYBOARD_CODING" (spp-arg-list ("d") 26983 . 26986) . ((semantic-list "((d)->keyboard_coding)" 26987 . 27009)))
          ("FRAME_MUST_WRITE_SPACES" (spp-arg-list ("f") 26375 . 26378) . ((semantic-list "(FRAME_TTY (f)->must_write_spaces)" 26379 . 26413)))
          ("EMACS_TERMHOOKS_H")
          ("TERMINAL_ACTIVE_P" (spp-arg-list ("d") 27182 . 27185) . ((semantic-list "(((d)->type != output_termcap && (d)->type != output_msdos_raw)	\\
   || (d)->display_info.tty->input)" 27195 . 27296)))
          ("FRAME_SCROLL_REGION_COST" (spp-arg-list ("f") 26646 . 26649) . ((semantic-list "(FRAME_TTY (f)->scroll_region_cost)" 26650 . 26685)))
          ("cursorX" (spp-arg-list ("t") 28663 . 28666) . ((symbol "curX" 28668 . 28672) (semantic-list "(t)" 28672 . 28675)))
          ("EVENT_INIT" (spp-arg-list ("event") 10812 . 10819) . ((symbol "memset" 10820 . 10826) (semantic-list "(&(event), 0, sizeof (struct input_event))" 10827 . 10869)))
          ("FRAME_LINE_INS_DEL_OK" (spp-arg-list ("f") 26443 . 26446) . ((semantic-list "(FRAME_TTY (f)->line_ins_del_ok)" 26447 . 26479)))
          ("cursorY" (spp-arg-list ("t") 28691 . 28694) . ((symbol "curY" 28696 . 28700) (semantic-list "(t)" 28700 . 28703)))
          ("FRAME_RIF" (spp-arg-list ("f") 27028 . 27031) . ((semantic-list "((f)->terminal->rif)" 27032 . 27052)))
          )
)
    (semanticdb-table "semanticdb-table-1afae20"
      :major-mode c-mode
      :tags 
        '( ("EMACS_REGEX_H" variable (:constant-flag t) nil [782 795])
            ("stddef.h" include (:system-flag t) nil [799 818])
            ("re_registers" type
               (:members 
                  ( ("num_regs" variable (:type "unsigned int") (reparse-symbol classsubparts) [1004 1022])
                    ("start" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1025 1042])
                    ("end" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1045 1060]))                  
                :type "struct")
                nil [980 1063])
            ("lisp.h" include nil nil [1065 1082])
            ("re_match_object" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1698 1733])
            ("emacs_re_max_failures" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [1801 1837])
            ("emacs_re_safe_alloca" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [1898 1936])
            ("re_pattern_buffer" type
               (:members 
                  ( ("buffer" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [2438 2460])
                    ("allocated" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2514 2531])
                    ("used" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2586 2598])
                    ("charset_unibyte" variable (:type "int") (reparse-symbol classsubparts) [2666 2686])
                    ("fastmap" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [2872 2886])
                    ("translate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3135 3157])
                    ("re_nsub" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3217 3232])
                    ("can_be_null" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [3511 3536])
                    ("regs_allocated" variable
                       (:suffix ":2"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [3776 3804])
                    ("fastmap_accurate" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [3951 3981])
                    ("used_syntax" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [4140 4165])
                    ("multibyte" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [4277 4300])
                    ("target_multibyte" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [4413 4443]))                  
                :type "struct")
                nil [2246 4446])
            ("re_compile_pattern" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :arguments 
                  ( ("pattern" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [4727 4747])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4748 4762])
                    ("posix_backtracking" variable (:type "bool") (reparse-symbol arg-sub-list) [4774 4798])
                    ("whitespace_regexp" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [4810 4840])
                    ("buffer" variable
                       (:pointer 1
                        :type ("re_pattern_buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4852 4885]))                  
                :type "char")
                nil [4688 4886])
            ("re_search" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("re_pattern_buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5236 5269])
                    ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [5276 5295])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5296 5310])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5317 5333])
                    ("range" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5334 5350])
                    ("regs" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5357 5383]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5208 5384])
            ("re_search_2" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("re_pattern_buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5546 5579])
                    ("string1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [5588 5608])
                    ("length1" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5609 5624])
                    ("string2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [5633 5653])
                    ("length2" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5654 5669])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5678 5694])
                    ("range" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5695 5711])
                    ("regs" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5720 5746])
                    ("stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5755 5770]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5516 5771])
            ("re_match_2" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("re_pattern_buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5932 5965])
                    ("string1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [5973 5993])
                    ("length1" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5994 6009])
                    ("string2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [6017 6037])
                    ("length2" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6038 6053])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6061 6077])
                    ("regs" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6078 6104])
                    ("stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6112 6127]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5903 6128])
            ("re_set_registers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("re_pattern_buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6713 6746])
                    ("regs" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6756 6782])
                    ("num_regs" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [6792 6810])
                    ("starts" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6820 6838])
                    ("ends" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6839 6855]))                  
                :type "void")
                nil [6683 6856])
            ("re_wctype_t" type
               (:typedef ("" type
                     (:members 
                        ( ("RECC_ERROR" variable
                             (:constant-flag t
                              :default-value (6912 6913)
                              :type "int")
                              (reparse-symbol enumsubparts) [6899 6913])
                          ("RECC_ALNUM" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6923 6934])
                          ("RECC_ALPHA" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6935 6946])
                          ("RECC_WORD" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6947 6957])
                          ("RECC_GRAPH" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6966 6977])
                          ("RECC_PRINT" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6978 6989])
                          ("RECC_LOWER" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [6998 7009])
                          ("RECC_UPPER" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7010 7021])
                          ("RECC_PUNCT" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7030 7041])
                          ("RECC_CNTRL" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7042 7053])
                          ("RECC_DIGIT" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7062 7073])
                          ("RECC_XDIGIT" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7074 7086])
                          ("RECC_BLANK" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7095 7106])
                          ("RECC_SPACE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7107 7118])
                          ("RECC_MULTIBYTE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7127 7142])
                          ("RECC_NONASCII" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7143 7157])
                          ("RECC_ASCII" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7166 7177])
                          ("RECC_UNIBYTE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [7178 7192]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [6884 7205])
            ("re_iswctype" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("ch" variable (:type "int") (reparse-symbol arg-sub-list) [7232 7239])
                    ("cc" variable (:type ("re_wctype_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7240 7255]))                  
                :type "bool")
                nil [7207 7256])
            ("re_wctype_parse" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("strp" variable
                       (:pointer 2
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [7293 7320])
                    ("limit" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [7329 7344]))                  
                :type ("re_wctype_t" type (:type "class") nil nil))
                nil [7257 7345]))          
      :file "regex-emacs.h"
      :pointmax 7374
      :fsize 7373
      :lastmodtime '(23443 29220 119792 786000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMACS_REGEX_H" . ((number "1" 796 . 797)))
          )
)
    (semanticdb-table "semanticdb-table-1afae40"
      :major-mode c-mode
      :tags 
        '( ("SYSSELECT_H" variable (:constant-flag t) nil [807 818])
            ("sys/select.h" include (:system-flag t) nil [837 860])
            ("lisp.h" include nil nil [869 886])
            ("FD_SETSIZE" variable (:constant-flag t) nil [1196 1206])
            ("fd_set" type
               (:typedef ("int")
                :type "typedef")
                nil [1210 1229])
            ("FD_SET" variable (:constant-flag t) nil [1310 1316])
            ("FD_CLR" variable (:constant-flag t) nil [1352 1358])
            ("FD_ISSET" variable (:constant-flag t) nil [1395 1403])
            ("FD_ZERO" variable (:constant-flag t) nil [1438 1445])
            ("select" variable (:constant-flag t) nil [1546 1552])
            ("fd_CLR" function
               (:arguments 
                  ( ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [2020 2027])
                    ("set" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2028 2040]))                  
                :type "void")
                nil [2007 2104])
            ("fd_ISSET" function
               (:arguments 
                  ( ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [2128 2135])
                    ("set" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2136 2148]))                  
                :type "bool")
                nil [2113 2226])
            ("fd_SET" function
               (:arguments 
                  ( ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [2248 2255])
                    ("set" variable
                       (:pointer 1
                        :type ("fd_set" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2256 2268]))                  
                :type "void")
                nil [2235 2332])
            ("FD_CLR" variable (:constant-flag t) nil [2386 2392])
            ("FD_ISSET" variable (:constant-flag t) nil [2427 2435])
            ("FD_SET" variable (:constant-flag t) nil [2472 2478]))          
      :file "sysselect.h"
      :pointmax 2557
      :fsize 2556
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax '((symbol 2506 . 2523) (symbol 2228 . 2234) (symbol 2106 . 2112) (symbol 2000 . 2006) (symbol 1910 . 1929))
      :lexical-table 
        '(("FD_ZERO" (spp-arg-list ("p") 1445 . 1448) . ((semantic-list "(*(p) = 0)" 1449 . 1459)))
          ("SYSSELECT_H" . ((number "1" 819 . 820)))
          ("FD_ISSET" (spp-arg-list ("fd" "set") 2435 . 2444) . ((symbol "fd_ISSET" 2445 . 2453) (semantic-list "(fd, set)" 2454 . 2463)))
          ("FD_SET" (spp-arg-list ("fd" "set") 2478 . 2487) . ((symbol "fd_SET" 2488 . 2494) (semantic-list "(fd, set)" 2495 . 2504)))
          ("FD_CLR" (spp-arg-list ("fd" "set") 2392 . 2401) . ((symbol "fd_CLR" 2402 . 2408) (semantic-list "(fd, set)" 2409 . 2418)))
          ("FD_SETSIZE" . ((number "32" 1207 . 1209)))
          ("select" . ((symbol "sys_select" 1553 . 1563)))
          )
)
    (semanticdb-table "semanticdb-table-1afae60"
      :major-mode c-mode
      :tags 
        '( ("EMACS_SYSTIME_H" variable (:constant-flag t) nil [813 828])
            ("timespec.h" include (:system-flag t) nil [830 851])
            ("sys/time.h" include (:system-flag t) nil [1200 1221])
            ("invalid_timespec" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1692 1697]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1658 1733])
            ("timespec_valid_p" function
               (:arguments 
                  ( ("t" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [1951 1969]))                  
                :type "bool")
                nil [1928 1998])
            ("current_timespec" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2076 2081]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2042 2134])
            ("set_file_times" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [2189 2193])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [2194 2207])
                    ("" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [2208 2224])
                    ("" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [2225 2241]))                  
                :type "int")
                nil [2162 2242])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [2296 2312])
            ("set_waiting_for_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2377 2395]))                  
                :type "void")
                nil [2342 2396]))          
      :file "systime.h"
      :pointmax 3188
      :fsize 2865
      :lastmodtime '(23457 9721 546038 26000)
      :unmatched-syntax '((symbol 3140 . 3157) (semantic-list 2278 . 2295) (symbol 2265 . 2277) (symbol 2257 . 2264) (STRUCT 2250 . 2256) (EXTERN 2243 . 2249) (symbol 2035 . 2041) (symbol 1921 . 1927) (symbol 1651 . 1657) (symbol 853 . 872))
      :lexical-table 
        '(("EMACS_SYSTIME_H")
          )
)
    (semanticdb-table "semanticdb-table-1afae80"
      :major-mode c-mode
      :tags 
        '( ("SYSTHREAD_H" variable (:constant-flag t) nil [756 767])
            ("stdbool.h" include (:system-flag t) nil [769 789])
            ("__has_attribute" variable (:constant-flag t) nil [824 839])
            ("ATTRIBUTE_WARN_UNUSED_RESULT" variable (:constant-flag t) nil [996 1024])
            ("sys_mutex_t" type
               (:typedef ("int")
                :type "typedef")
                nil [2544 2568])
            ("sys_cond_t" type
               (:typedef ("int")
                :type "typedef")
                nil [2569 2592])
            ("sys_thread_t" type
               (:typedef ("int")
                :type "typedef")
                nil [2593 2618])
            ("thread_creation_function" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [2692 2699]))                  
                :type "void")
                nil [2658 2700])
            ("sys_mutex_init" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2730 2744]))                  
                :type "void")
                nil [2702 2745])
            ("sys_mutex_lock" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2774 2788]))                  
                :type "void")
                nil [2746 2789])
            ("sys_mutex_unlock" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2820 2834]))                  
                :type "void")
                nil [2790 2835])
            ("sys_cond_init" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2864 2877]))                  
                :type "void")
                nil [2837 2878])
            ("sys_cond_wait" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2906 2919])
                    ("" variable
                       (:pointer 1
                        :type ("sys_mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2920 2934]))                  
                :type "void")
                nil [2879 2935])
            ("sys_cond_signal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2965 2978]))                  
                :type "void")
                nil [2936 2979])
            ("sys_cond_broadcast" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3012 3025]))                  
                :type "void")
                nil [2980 3026])
            ("sys_cond_destroy" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_cond_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3057 3070]))                  
                :type "void")
                nil [3027 3071])
            ("sys_thread_self" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3110 3115]))                  
                :type ("sys_thread_t" type (:type "class") nil nil))
                nil [3073 3147])
            ("sys_thread_equal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("sys_thread_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3178 3191])
                    ("" variable (:type ("sys_thread_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3192 3205]))                  
                :type "bool")
                nil [3148 3237])
            ("sys_thread_create" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("sys_thread_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3270 3285])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3286 3299])
                    ("" variable
                       (:pointer 1
                        :type ("thread_creation_function" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3331 3358])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [3359 3366]))                  
                :type "bool")
                nil [3239 3398])
            ("sys_thread_yield" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3430 3435]))                  
                :type "void")
                nil [3400 3436]))          
      :file "systhread.h"
      :pointmax 3463
      :fsize 3462
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax '((TYPEDEF 2650 . 2657))
      :lexical-table 
        '(("SYSTHREAD_H")
          ("ATTRIBUTE_WARN_UNUSED_RESULT")
          ("__has_attribute" (spp-arg-list ("a") 839 . 842) . ((symbol "false" 843 . 848)))
          )
)
    (semanticdb-table "semanticdb-table-1afaea0"
      :major-mode c-mode
      :tags 
        '( ("EMACS_FONT_H" variable (:constant-flag t) nil [948 960])
            ("composition_it" type
               (:prototype t
                :type "struct")
                nil [962 984])
            ("face" type
               (:prototype t
                :type "struct")
                nil [985 997])
            ("glyph_string" type
               (:prototype t
                :type "struct")
                nil [998 1018])
            ("font_property_index" type
               (:members 
                  ( ("FONT_TYPE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2342 2358])
                    ("FONT_FOUNDRY_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2416 2435])
                    ("FONT_FAMILY_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2491 2509])
                    ("FONT_ADSTYLE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2577 2596])
                    ("FONT_REGISTRY_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2709 2729])
                    ("FONT_WEIGHT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2982 3000])
                    ("FONT_SLANT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3246 3263])
                    ("FONT_WIDTH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3508 3525])
                    ("FONT_SIZE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3748 3764])
                    ("FONT_DPI_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3859 3874])
                    ("FONT_SPACING_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4004 4023])
                    ("FONT_AVGWIDTH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4112 4132])
                    ("FONT_EXTRA_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5868 5885])
                    ("FONT_SPEC_MAX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [5968 5982])
                    ("FONT_OBJLIST_INDEX" variable
                       (:constant-flag t
                        :default-value (6148 6161)
                        :type "int")
                        (reparse-symbol enumsubparts) [6127 6161])
                    ("FONT_ENTITY_MAX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6227 6243])
                    ("FONT_NAME_INDEX" variable
                       (:constant-flag t
                        :default-value (6369 6384)
                        :type "int")
                        (reparse-symbol enumsubparts) [6351 6384])
                    ("FONT_FULLNAME_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6588 6608])
                    ("FONT_FILE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6714 6730])
                    ("FONT_OBJECT_MAX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [6795 6814]))                  
                :type "enum")
                nil [2117 6815])
            ("FONT_WEIGHT_NUMERIC" variable (:constant-flag t) nil [6873 6892])
            ("FONT_SLANT_NUMERIC" variable (:constant-flag t) nil [7066 7084])
            ("FONT_WIDTH_NUMERIC" variable (:constant-flag t) nil [7256 7274])
            ("FONT_WEIGHT_SYMBOLIC" variable (:constant-flag t) nil [7448 7468])
            ("FONT_SLANT_SYMBOLIC" variable (:constant-flag t) nil [7588 7607])
            ("FONT_WIDTH_SYMBOLIC" variable (:constant-flag t) nil [7726 7745])
            ("FONT_WEIGHT_FOR_FACE" variable (:constant-flag t) nil [7883 7903])
            ("FONT_SLANT_FOR_FACE" variable (:constant-flag t) nil [8039 8058])
            ("FONT_WIDTH_FOR_FACE" variable (:constant-flag t) nil [8194 8213])
            ("FONT_WEIGHT_NAME_NUMERIC" variable (:constant-flag t) nil [8357 8381])
            ("FONT_SLANT_NAME_NUMERIC" variable (:constant-flag t) nil [8534 8557])
            ("FONT_WIDTH_NAME_NUMERIC" variable (:constant-flag t) nil [8709 8732])
            ("FONT_SET_STYLE" variable (:constant-flag t) nil [9016 9030])
            ("FONT_WIDTH" variable (:constant-flag t) nil [9148 9158])
            ("FONT_HEIGHT" variable (:constant-flag t) nil [9224 9235])
            ("FONT_BASE" variable (:constant-flag t) nil [9261 9270])
            ("FONT_DESCENT" variable (:constant-flag t) nil [9296 9308])
            ("font_spec" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [9385 9416])
                    ("props" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9419 9452]))                  
                :type "struct")
                nil [9364 9455])
            ("font_entity" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [9517 9548])
                    ("props" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9551 9586]))                  
                :type "struct")
                nil [9494 9589])
            ("FONT_ENCODING_NOT_DECIDED" variable (:constant-flag t) nil [9747 9772])
            ("font" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [9831 9862])
                    ("props" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9969 10004])
                    ("min_width" variable (:type "int") (reparse-symbol classsubparts) [10313 10327])
                    ("max_width" variable (:type "int") (reparse-symbol classsubparts) [10330 10344])
                    ("pixel_size" variable (:type "int") (reparse-symbol classsubparts) [10397 10412])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [10516 10527])
                    ("space_width" variable (:type "int") (reparse-symbol classsubparts) [10640 10656])
                    ("average_width" variable (:type "int") (reparse-symbol classsubparts) [10883 10901])
                    ("ascent" variable (:type "int") (reparse-symbol classsubparts) [10958 10978])
                    ("descent" variable (:type "int") (reparse-symbol classsubparts) [10958 10978])
                    ("driver" variable
                       (:pointer 1
                        :type ("font_driver" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [14578 14611]))                  
                :type "struct")
                nil [9815 14712])
            ("font_spacing" type
               (:members 
                  ( ("FONT_SPACING_PROPORTIONAL" variable
                       (:constant-flag t
                        :default-value (14768 14769)
                        :type "int")
                        (reparse-symbol enumsubparts) [14740 14769])
                    ("FONT_SPACING_DUAL" variable
                       (:constant-flag t
                        :default-value (14795 14797)
                        :type "int")
                        (reparse-symbol enumsubparts) [14775 14797])
                    ("FONT_SPACING_MONO" variable
                       (:constant-flag t
                        :default-value (14823 14826)
                        :type "int")
                        (reparse-symbol enumsubparts) [14803 14826])
                    ("FONT_SPACING_CHARCELL" variable
                       (:constant-flag t
                        :default-value (14856 14859)
                        :type "int")
                        (reparse-symbol enumsubparts) [14832 14859]))                  
                :type "enum")
                nil [14714 14864])
            ("font_metrics" type
               (:members 
                  ( ("lbearing" variable (:type "short") (reparse-symbol classsubparts) [14890 14939])
                    ("rbearing" variable (:type "short") (reparse-symbol classsubparts) [14890 14939])
                    ("width" variable (:type "short") (reparse-symbol classsubparts) [14890 14939])
                    ("ascent" variable (:type "short") (reparse-symbol classsubparts) [14890 14939])
                    ("descent" variable (:type "short") (reparse-symbol classsubparts) [14890 14939]))                  
                :type "struct")
                nil [14866 14942])
            ("font_bitmap" type
               (:members 
                  ( ("bits_per_pixel" variable (:type "int") (reparse-symbol classsubparts) [14967 14986])
                    ("rows" variable (:type "int") (reparse-symbol classsubparts) [14989 14998])
                    ("width" variable (:type "int") (reparse-symbol classsubparts) [15001 15011])
                    ("pitch" variable (:type "int") (reparse-symbol classsubparts) [15014 15024])
                    ("buffer" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [15027 15049])
                    ("left" variable (:type "int") (reparse-symbol classsubparts) [15052 15061])
                    ("top" variable (:type "int") (reparse-symbol classsubparts) [15064 15072])
                    ("advance" variable (:type "int") (reparse-symbol classsubparts) [15075 15087]))                  
                :type "struct")
                nil [14944 15090])
            ("FONTP" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15238 15252]))                  
                :type "bool")
                nil [15226 15295])
            ("FONT_SPEC_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15354 15368]))                  
                :type "bool")
                nil [15336 15423])
            ("GC_FONT_SPEC_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15520 15534]))                  
                :type "bool")
                nil [15499 15618])
            ("FONT_ENTITY_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15681 15695]))                  
                :type "bool")
                nil [15661 15752])
            ("GC_FONT_ENTITY_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15853 15867]))                  
                :type "bool")
                nil [15830 15953])
            ("FONT_OBJECT_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16016 16030]))                  
                :type "bool")
                nil [15996 16087])
            ("GC_FONT_OBJECT_P" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16188 16202]))                  
                :type "bool")
                nil [16165 16288])
            ("CHECK_FONT" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16380 16394]))                  
                :type "void")
                nil [16363 16434])
            ("CHECK_FONT_SPEC" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16465 16479]))                  
                :type "void")
                nil [16443 16530])
            ("CHECK_FONT_ENTITY" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16563 16577]))                  
                :type "void")
                nil [16539 16632])
            ("CHECK_FONT_OBJECT" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16665 16679]))                  
                :type "void")
                nil [16641 16734])
            ("XFONT_SPEC" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16847 16861]))                  
                :type ("font_spec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [16816 16950])
            ("GC_XFONT_SPEC" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16993 17007]))                  
                :type ("font_spec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [16959 17099])
            ("XFONT_ENTITY" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17143 17157]))                  
                :type ("font_entity" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [17108 17250])
            ("GC_XFONT_ENTITY" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17297 17311]))                  
                :type ("font_entity" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [17259 17407])
            ("XFONT_OBJECT" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17444 17458]))                  
                :type ("font" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [17416 17544])
            ("GC_XFONT_OBJECT" function
               (:pointer 1
                :arguments 
                  ( ("p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17584 17598]))                  
                :type ("font" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [17553 17687])
            ("XSETFONT" variable (:constant-flag t) nil [17697 17705])
            ("CHECK_FONT_GET_OBJECT" function
               (:pointer 1
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17794 17808]))                  
                :type ("font" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [17757 17864])
            ("PT_PER_INCH" variable (:constant-flag t) nil [17923 17934])
            ("POINT_TO_PIXEL" variable (:constant-flag t) nil [18046 18060])
            ("PIXEL_TO_POINT" variable (:constant-flag t) nil [18472 18486])
            ("FONT_PIXEL_SIZE_QUANTUM" variable (:constant-flag t) nil [18632 18655])
            ("FONT_INVALID_CODE" variable (:constant-flag t) nil [18667 18684])
            ("font_driver" type
               (:members 
                  ( ("type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18843 18860])
                    ("case_sensitive" variable (:type "bool") (reparse-symbol classsubparts) [18953 18973])
                    ("get_cache" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [19128 19144]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [19102 19145])
                    ("list" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("frame" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [20297 20317])
                            ("font_spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20318 20340]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [20276 20341])
                    ("match" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [20694 20710])
                            ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20711 20728]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [20672 20729])
                    ("list_family" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [20863 20879]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [20835 20880])
                    ("free_entity" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font_entity" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20973 20997]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [20952 20998])
                    ("open" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21137 21153])
                            ("font_entity" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21154 21178])
                            ("pixel_size" variable (:type "int") (reparse-symbol arg-sub-list) [21202 21217]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [21116 21218])
                    ("close" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21291 21309]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [21276 21310])
                    ("prepare_face" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21445 21461])
                            ("face" variable
                               (:pointer 1
                                :type ("face" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21462 21480]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [21423 21481])
                    ("done_face" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21590 21606])
                            ("face" variable
                               (:pointer 1
                                :type ("face" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [21607 21625]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [21571 21626])
                    ("has_char" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21867 21884])
                            ("c" variable (:type "int") (reparse-symbol arg-sub-list) [21885 21891]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [21850 21892])
                    ("encode_char" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [22062 22080])
                            ("c" variable (:type "int") (reparse-symbol arg-sub-list) [22081 22087]))                          
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [22037 22088])
                    ("text_extents" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [22279 22297])
                            ("code" variable
                               (:pointer 1
                                :type "unsigned int")
                                (reparse-symbol arg-sub-list) [22301 22316])
                            ("nglyphs" variable (:type "int") (reparse-symbol arg-sub-list) [22317 22329])
                            ("metrics" variable
                               (:pointer 1
                                :type ("font_metrics" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [22333 22362]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [22257 22363])
                    ("anchor_point" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [23500 23518])
                            ("code" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [23519 23533])
                            ("index" variable (:type "int") (reparse-symbol arg-sub-list) [23534 23544])
                            ("x" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [23568 23575])
                            ("y" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [23576 23583]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [23479 23584])
                    ("otf_capability" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [23759 23777]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [23728 23778])
                    ("otf_drive" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24436 24454])
                            ("features" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24455 24476])
                            ("gstring_in" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24497 24520])
                            ("from" variable (:type "int") (reparse-symbol arg-sub-list) [24521 24530])
                            ("to" variable (:type "int") (reparse-symbol arg-sub-list) [24531 24538])
                            ("gstring_out" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24559 24583])
                            ("idx" variable (:type "int") (reparse-symbol arg-sub-list) [24584 24592])
                            ("alternate_subst" variable (:type "bool") (reparse-symbol arg-sub-list) [24593 24614]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [24418 24615])
                    ("start_for_frame" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24824 24840]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [24800 24841])
                    ("end_for_frame" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [24982 24998]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [24960 24999])
                    ("shape" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("lgstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25732 25753]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [25710 25754])
                    ("check" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [25986 26002])
                            ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [26003 26021]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [25972 26022])
                    ("get_variation_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [26327 26345])
                            ("c" variable (:type "int") (reparse-symbol arg-sub-list) [26377 26383])
                            ("variations" variable
                               (:dereference 1
                                :type "unsigned int")
                                (reparse-symbol arg-sub-list) [26384 26409]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [26298 26410])
                    ("filter_properties" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26441 26458])
                            ("properties" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26459 26482]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [26414 26483])
                    ("cached_font_ok" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [26626 26642])
                            ("font_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26669 26693])
                            ("entity" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26720 26739]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [26602 26740])
                    ("combining_capability" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("font" variable
                               (:pointer 1
                                :type ("font" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [26928 26946]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [26891 26947])
                    ("drop_xrender_surfaces" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [27191 27207]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [27160 27208]))                  
                :type "struct")
                nil [18764 27211])
            ("font_driver_list" type
               (:members 
                  ( ("on" variable (:type "bool") (reparse-symbol classsubparts) [27523 27531])
                    ("driver" variable
                       (:pointer 1
                        :type ("font_driver" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [27571 27604])
                    ("next" variable
                       (:pointer 1
                        :type ("font_driver_list" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [27658 27688]))                  
                :type "struct")
                nil [27396 27691])
            ("copy_font_spec" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27728 27740]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27693 27741])
            ("merge_font_spec" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27778 27790])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27791 27803]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27742 27804])
            ("font_make_entity" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [27843 27848]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27806 27849])
            ("font_make_object" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [27887 27891])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27892 27904])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [27905 27909]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27850 27910])
            ("find_font_encoding" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28107 28119]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28068 28120])
            ("font_registry_charsets" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28156 28168])
                    ("" variable
                       (:pointer 2
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28169 28187])
                    ("" variable
                       (:pointer 2
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28223 28241]))                  
                :type "int")
                nil [28121 28242])
            ("font_style_to_value" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("prop" variable (:type ("font_property_index" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [28275 28305])
                    ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28338 28355])
                    ("noerror" variable (:type "bool") (reparse-symbol arg-sub-list) [28356 28369]))                  
                :type "int")
                nil [28243 28370])
            ("font_style_symbolic" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28411 28428])
                    ("prop" variable (:type ("font_property_index" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [28469 28499])
                    ("for_face" variable (:type "bool") (reparse-symbol arg-sub-list) [28540 28554]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28371 28555])
            ("font_match_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28583 28600])
                    ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28601 28618]))                  
                :type "bool")
                nil [28557 28619])
            ("font_list_entities" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28659 28674])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28675 28687]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28620 28688])
            ("font_get_name" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28724 28748]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28690 28749])
            ("font_spec_from_name" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font_name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28790 28812]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28750 28813])
            ("font_get_frame" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28849 28873]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28814 28874])
            ("font_has_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28901 28916])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28917 28929])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [28930 28934]))                  
                :type "int")
                nil [28875 28935])
            ("font_clear_prop" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("attrs" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28966 28985])
                    ("prop" variable (:type ("font_property_index" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [29015 29045]))                  
                :type "void")
                nil [28937 29046])
            ("font_find_for_lface" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29087 29103])
                    ("lface" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29104 29123])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29164 29181])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [29182 29188]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29047 29189])
            ("font_open_for_lface" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29230 29246])
                    ("entity" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29247 29266])
                    ("lface" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29307 29326])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29367 29384]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29190 29385])
            ("font_load_for_lface" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29426 29442])
                    ("lface" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29443 29462])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29503 29520]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29386 29521])
            ("font_prepare_for_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29557 29573])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29574 29592]))                  
                :type "void")
                nil [29522 29593])
            ("font_done_for_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29626 29642])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29643 29661]))                  
                :type "void")
                nil [29594 29662])
            ("clear_font_cache" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29693 29708]))                  
                :type "void")
                nil [29663 29709])
            ("font_open_by_spec" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29749 29765])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29766 29783]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29711 29784])
            ("font_open_by_name" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29823 29839])
                    ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29840 29857]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29785 29858])
            ("font_intern_prop" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [29897 29913])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29914 29928])
                    ("force_symbol" variable (:type "bool") (reparse-symbol arg-sub-list) [29938 29956]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [29860 29957])
            ("font_update_sort_order" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("order" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [29994 30005]))                  
                :type "void")
                nil [29958 30006])
            ("font_parse_family_registry" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("family" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30048 30067])
                    ("registry" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30108 30129])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30170 30187]))                  
                :type "void")
                nil [30008 30188])
            ("font_parse_xlfd" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("name" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [30218 30229])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30230 30244])
                    ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30245 30262]))                  
                :type "int")
                nil [30190 30263])
            ("font_unparse_xlfd" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30300 30317])
                    ("pixel_size" variable (:type "int") (reparse-symbol arg-sub-list) [30318 30333])
                    ("name" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [30342 30353])
                    ("bytes" variable (:type "int") (reparse-symbol arg-sub-list) [30354 30364]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [30264 30365])
            ("register_font_driver" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("font_driver" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30400 30427])
                    ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30428 30443]))                  
                :type "void")
                nil [30366 30444])
            ("free_font_driver_list" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30480 30496]))                  
                :type "void")
                nil [30445 30497])
            ("valid_font_driver" function
               (:arguments 
                  ( ("d" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("font_driver" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30618 30646]))                  
                :type "bool")
                nil [30594 30665])
            ("font_update_drivers" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30713 30729])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30730 30747]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30673 30748])
            ("font_range" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30780 30790])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30791 30801])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30802 30814])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30825 30841])
                    ("" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30842 30856])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30867 30879]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30749 30880])
            ("font_fill_lglyph_metrics" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30919 30931])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30932 30944]))                  
                :type "void")
                nil [30881 30945])
            ("font_put_extra" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30982 30999])
                    ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31000 31017])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31053 31069]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30947 31070])
            ("font_filter_properties" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("font" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31334 31351])
                    ("alist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31360 31378])
                    ("boolean_properties" variable
                       (:pointer 1
                        :dereference 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31387 31426])
                    ("non_boolean_properties" variable
                       (:pointer 1
                        :dereference 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31463 31506]))                  
                :type "void")
                nil [31298 31507])
            ("font_drop_xrender_surfaces" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [31549 31565]))                  
                :type "void")
                nil [31509 31566])
            ("FONT_DEBUG" variable (:constant-flag t) nil [33650 33660])
            ("font_add_log" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33695 33708])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33709 33721])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33722 33734]))                  
                :type "void")
                nil [33669 33735])
            ("font_deferred_log" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33767 33780])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33781 33793])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33794 33806]))                  
                :type "void")
                nil [33736 33807])
            ("FONT_ADD_LOG" variable (:constant-flag t) nil [33817 33829])
            ("FONT_DEFERRED_LOG" variable (:constant-flag t) nil [33978 33995])
            ("font_data_structures_may_be_ill_formed" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [34418 34423]))                  
                :type "bool")
                nil [34373 34592]))          
      :file "font.h"
      :pointmax 34643
      :fsize 34642
      :lastmodtime '(23443 29220 6528 864000)
      :unmatched-syntax '((symbol 34594 . 34611) (symbol 34366 . 34372) (symbol 30587 . 30593) (symbol 17750 . 17756) (symbol 17546 . 17552) (symbol 17409 . 17415) (symbol 17252 . 17258) (symbol 17101 . 17107) (symbol 16952 . 16958) (symbol 16809 . 16815) (symbol 16634 . 16640) (symbol 16532 . 16538) (symbol 16436 . 16442) (symbol 16356 . 16362) (symbol 16158 . 16164) (symbol 15989 . 15995) (symbol 15823 . 15829) (symbol 15654 . 15660) (symbol 15492 . 15498) (symbol 15329 . 15335) (symbol 15219 . 15225) (symbol 1020 . 1039))
      :lexical-table 
        '(("FONT_WIDTH_NAME_NUMERIC" (spp-arg-list ("name") 8732 . 8738) . ((semantic-list "(font_style_to_value (FONT_WIDTH_INDEX, (name), false) >> 8)" 8743 . 8803)))
          ("FONT_WIDTH" (spp-arg-list ("f") 9158 . 9161) . ((semantic-list "((f)->max_width)" 9162 . 9178)))
          ("FONT_DEBUG")
          ("FONT_ADD_LOG" (spp-arg-list ("ACTION" "ARG" "RESULT") 33829 . 33850) . 
              ((DO "do" 33855 . 33857) (semantic-list "{						\\
    if (! EQ (Vfont_log, Qt))			\\
      font_add_log ((ACTION), (ARG), (RESULT));	\\
  }" 33858 . 33954) (WHILE "while" 33955 . 33960) (semantic-list "(false)" 33961 . 33968)))
          ("FONT_SLANT_NUMERIC" (spp-arg-list ("font") 7084 . 7090) . ((semantic-list "(FIXNUMP (AREF ((font), FONT_SLANT_INDEX))	\\
   ? (XFIXNUM (AREF ((font), FONT_SLANT_INDEX)) >> 8) : -1)" 7096 . 7200)))
          ("FONT_BASE" (spp-arg-list ("f") 9270 . 9273) . ((semantic-list "((f)->ascent)" 9274 . 9287)))
          ("FONT_DESCENT" (spp-arg-list ("f") 9308 . 9311) . ((semantic-list "((f)->descent)" 9312 . 9326)))
          ("POINT_TO_PIXEL" (spp-arg-list ("POINT" "DPI") 18060 . 18072) . ((semantic-list "((POINT) * (DPI) / PT_PER_INCH + 0.5)" 18073 . 18110)))
          ("PIXEL_TO_POINT" (spp-arg-list ("PIXEL" "DPI") 18486 . 18498) . ((semantic-list "((PIXEL) * PT_PER_INCH / (DPI) + 0.5)" 18499 . 18536)))
          ("FONT_WIDTH_NUMERIC" (spp-arg-list ("font") 7274 . 7280) . ((semantic-list "(FIXNUMP (AREF ((font), FONT_WIDTH_INDEX))	\\
   ? (XFIXNUM (AREF ((font), FONT_WIDTH_INDEX)) >> 8) : -1)" 7286 . 7390)))
          ("FONT_WEIGHT_NAME_NUMERIC" (spp-arg-list ("name") 8381 . 8387) . ((semantic-list "(font_style_to_value (FONT_WEIGHT_INDEX, (name), false) >> 8)" 8392 . 8453)))
          ("XSETFONT" (spp-arg-list ("a" "b") 17705 . 17711) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_FONT))" 17712 . 17748)))
          ("FONT_SLANT_FOR_FACE" (spp-arg-list ("font") 8058 . 8064) . ((symbol "font_style_symbolic" 8069 . 8088) (semantic-list "(font, FONT_SLANT_INDEX, true)" 8089 . 8119)))
          ("FONT_ENCODING_NOT_DECIDED" . ((number "255" 9773 . 9776)))
          ("FONT_HEIGHT" (spp-arg-list ("f") 9235 . 9238) . ((semantic-list "((f)->height)" 9239 . 9252)))
          ("FONT_INVALID_CODE" . ((number "0xFFFFFFFF" 18685 . 18695)))
          ("FONT_SLANT_SYMBOLIC" (spp-arg-list ("font") 7607 . 7613) . ((symbol "font_style_symbolic" 7618 . 7637) (semantic-list "(font, FONT_SLANT_INDEX, false)" 7638 . 7669)))
          ("FONT_SET_STYLE" (spp-arg-list ("font" "prop" "val") 9030 . 9047) . ((symbol "ASET" 9052 . 9056) (semantic-list "((font), prop, make_fixnum (font_style_to_value (prop, val, true)))" 9057 . 9124)))
          ("EMACS_FONT_H")
          ("FONT_WIDTH_FOR_FACE" (spp-arg-list ("font") 8213 . 8219) . ((symbol "font_style_symbolic" 8224 . 8243) (semantic-list "(font, FONT_WIDTH_INDEX, true)" 8244 . 8274)))
          ("FONT_SLANT_NAME_NUMERIC" (spp-arg-list ("name") 8557 . 8563) . ((semantic-list "(font_style_to_value (FONT_SLANT_INDEX, (name), false) >> 8)" 8568 . 8628)))
          ("FONT_PIXEL_SIZE_QUANTUM" . ((number "1" 18656 . 18657)))
          ("FONT_WEIGHT_NUMERIC" (spp-arg-list ("font") 6892 . 6898) . ((semantic-list "(FIXNUMP (AREF ((font), FONT_WEIGHT_INDEX))	\\
   ? (XFIXNUM (AREF ((font), FONT_WEIGHT_INDEX)) >> 8) : -1)" 6904 . 7010)))
          ("FONT_WEIGHT_FOR_FACE" (spp-arg-list ("font") 7903 . 7909) . ((symbol "font_style_symbolic" 7914 . 7933) (semantic-list "(font, FONT_WEIGHT_INDEX, true)" 7934 . 7965)))
          ("PT_PER_INCH" . ((number "72.27" 17935 . 17940)))
          ("FONT_WIDTH_SYMBOLIC" (spp-arg-list ("font") 7745 . 7751) . ((symbol "font_style_symbolic" 7756 . 7775) (semantic-list "(font, FONT_WIDTH_INDEX, false)" 7776 . 7807)))
          ("FONT_DEFERRED_LOG" (spp-arg-list ("ACTION" "ARG" "RESULT") 33995 . 34016) . 
              ((DO "do" 34022 . 34024) (semantic-list "{							\\
    if (! EQ (Vfont_log, Qt))				\\
      font_deferred_log ((ACTION), (ARG), (RESULT));	\\
  }" 34025 . 34128) (WHILE "while" 34129 . 34134) (semantic-list "(false)" 34135 . 34142)))
          ("FONT_WEIGHT_SYMBOLIC" (spp-arg-list ("font") 7468 . 7474) . ((symbol "font_style_symbolic" 7479 . 7498) (semantic-list "(font, FONT_WEIGHT_INDEX, false)" 7499 . 7531)))
          )
)
    (semanticdb-table "semanticdb-table-1afaec0"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [788 807])
            ("stdio.h" include (:system-flag t) nil [808 826])
            ("lisp.h" include nil nil [828 845])
            ("buffer.h" include nil nil [846 865])
            ("region-cache.h" include nil nil [866 891])
            ("boundary" type
               (:members 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2374 2388])
                    ("value" variable (:type "int") (reparse-symbol classsubparts) [2391 2401]))                  
                :type "struct")
                nil [2354 2404])
            ("region_cache" type
               (:members 
                  ( ("boundaries" variable
                       (:pointer 1
                        :type ("boundary" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [2516 2544])
                    ("gap_start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2619 2648])
                    ("gap_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2619 2648])
                    ("cache_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2737 2757])
                    ("beg_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2932 2971])
                    ("end_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2932 2971])
                    ("buffer_beg" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3408 3441])
                    ("buffer_end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3408 3441]))                  
                :type "struct")
                nil [2406 3444])
            ("BOUNDARY_POS" variable (:constant-flag t) nil [3507 3519])
            ("BOUNDARY_VALUE" variable (:constant-flag t) nil [3739 3753])
            ("SET_BOUNDARY_VALUE" variable (:constant-flag t) nil [3943 3961])
            ("NEW_CACHE_GAP" variable (:constant-flag t) nil [4176 4189])
            ("PRESERVE_THRESHOLD" variable (:constant-flag t) nil [4448 4466])
            ("revalidate_region_cache" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4511 4530])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4531 4554]))                  
                :type "void")
                nil [4474 4555])
            ("new_region_cache" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4676 4681]))                  
                :type ("region_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [4636 5188])
            ("free_region_cache" function
               (:arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5214 5237]))                  
                :type "void")
                nil [5190 5279])
            ("find_cache_boundary" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5730 5753])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5754 5768]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5692 6296])
            ("move_cache_gap" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6501 6524])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6525 6539])
                    ("min_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6540 6559]))                  
                :type "void")
                nil [6473 8910])
            ("insert_cache_boundary" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9058 9081])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9082 9094])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9095 9109])
                    ("value" variable (:type "int") (reparse-symbol arg-sub-list) [9119 9129]))                  
                :type "void")
                nil [9023 9873])
            ("delete_cache_boundaries" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9977 10000])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10005 10021])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10022 10036]))                  
                :type "void")
                nil [9940 10949])
            ("set_cache_region" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11088 11111])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11116 11132])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11133 11147])
                    ("value" variable (:type "int") (reparse-symbol arg-sub-list) [11148 11158]))                  
                :type "void")
                nil [11058 14211])
            ("invalidate_region_cache" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14821 14840])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14841 14864])
                    ("head" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14869 14884])
                    ("tail" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14885 14900]))                  
                :type "void")
                nil [14791 17028])
            ("revalidate_region_cache" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18188 18207])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18208 18231]))                  
                :type "void")
                nil [18151 23198])
            ("know_region_cache" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23466 23485])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23486 23509])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23515 23531])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23532 23546]))                  
                :type "void")
                nil [23442 23626])
            ("region_cache_forward" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23938 23957])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23958 23981])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23990 24004])
                    ("next" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24005 24021]))                  
                :type "int")
                nil [23912 24704])
            ("region_cache_backward" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24982 25001])
                    ("c" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25002 25025])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25035 25049])
                    ("next" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25050 25066]))                  
                :type "int")
                nil [24955 25735]))          
      :file "region-cache.c"
      :pointmax 26623
      :fsize 26622
      :lastmodtime '(23443 29220 119792 786000)
      :unmatched-syntax nil
      :lexical-table 
        '(("NEW_CACHE_GAP" . ((semantic-list "(40)" 4190 . 4194)))
          ("SET_BOUNDARY_VALUE" (spp-arg-list ("c" "i" "v") 3961 . 3970) . ((semantic-list "((i) < (c)->gap_start \\
   ? ((c)->boundaries[(i)].value = (v))\\
   : ((c)->boundaries[(c)->gap_len + (i)].value = (v)))" 3975 . 4095)))
          ("BOUNDARY_VALUE" (spp-arg-list ("c" "i") 3753 . 3759) . ((semantic-list "((i) < (c)->gap_start \\
   ? (c)->boundaries[(i)].value \\
   : (c)->boundaries[(c)->gap_len + (i)].value)" 3764 . 3869)))
          ("BOUNDARY_POS" (spp-arg-list ("c" "i") 3519 . 3525) . ((semantic-list "((i) < (c)->gap_start \\
   ? (c)->buffer_beg + (c)->boundaries[(i)].pos \\
   : (c)->buffer_end + (c)->boundaries[(c)->gap_len + (i)].pos)" 3530 . 3667)))
          ("PRESERVE_THRESHOLD" . ((semantic-list "(500)" 4467 . 4472)))
          )
)
    (semanticdb-table "semanticdb-table-1afaee0"
      :major-mode c-mode
      :tags 
        '( ("EMACS_BUFFER_H" variable (:constant-flag t) nil [808 822])
            ("sys/types.h" include (:system-flag t) nil [824 846])
            ("time.h" include (:system-flag t) nil [847 864])
            ("character.h" include nil nil [866 888])
            ("lisp.h" include nil nil [889 906])
            ("BEG" variable (:constant-flag t) nil [1129 1132])
            ("BEG_BYTE" variable (:constant-flag t) nil [1145 1153])
            ("BEGV" variable (:constant-flag t) nil [1229 1233])
            ("BEGV_BYTE" variable (:constant-flag t) nil [1265 1274])
            ("PT" variable (:constant-flag t) nil [1437 1439])
            ("PT_BYTE" variable (:constant-flag t) nil [1473 1480])
            ("GPT" variable (:constant-flag t) nil [1554 1557])
            ("GPT_BYTE" variable (:constant-flag t) nil [1594 1602])
            ("ZV" variable (:constant-flag t) nil [1699 1701])
            ("ZV_BYTE" variable (:constant-flag t) nil [1731 1738])
            ("Z" variable (:constant-flag t) nil [1808 1809])
            ("Z_BYTE" variable (:constant-flag t) nil [1844 1850])
            ("BEG_ADDR" variable (:constant-flag t) nil [1988 1996])
            ("BEGV_ADDR" variable (:constant-flag t) nil [2093 2102])
            ("PT_ADDR" variable (:constant-flag t) nil [2191 2198])
            ("GPT_ADDR" variable (:constant-flag t) nil [2296 2304])
            ("GAP_END_ADDR" variable (:constant-flag t) nil [2426 2438])
            ("ZV_ADDR" variable (:constant-flag t) nil [2606 2613])
            ("Z_ADDR" variable (:constant-flag t) nil [2698 2704])
            ("GAP_SIZE" variable (:constant-flag t) nil [2837 2845])
            ("MODIFF" variable (:constant-flag t) nil [2915 2921])
            ("CHARS_MODIFF" variable (:constant-flag t) nil [2999 3011])
            ("OVERLAY_MODIFF" variable (:constant-flag t) nil [3093 3107])
            ("SAVE_MODIFF" variable (:constant-flag t) nil [3208 3219])
            ("BUFFER_CEILING_OF" variable (:constant-flag t) nil [3433 3450])
            ("BUFFER_FLOOR_OF" variable (:constant-flag t) nil [3534 3549])
            ("BUF_BEG" variable (:constant-flag t) nil [3804 3811])
            ("BUF_BEG_BYTE" variable (:constant-flag t) nil [3831 3843])
            ("BUF_BEGV" variable (:constant-flag t) nil [4069 4077])
            ("BUF_BEGV_BYTE" variable (:constant-flag t) nil [4235 4248])
            ("BUF_PT" variable (:constant-flag t) nil [4456 4462])
            ("BUF_PT_BYTE" variable (:constant-flag t) nil [4614 4625])
            ("BUF_ZV" variable (:constant-flag t) nil [4843 4849])
            ("BUF_ZV_BYTE" variable (:constant-flag t) nil [5001 5012])
            ("BUF_GPT" variable (:constant-flag t) nil [5210 5217])
            ("BUF_GPT_BYTE" variable (:constant-flag t) nil [5250 5262])
            ("BUF_Z" variable (:constant-flag t) nil [5335 5340])
            ("BUF_Z_BYTE" variable (:constant-flag t) nil [5371 5381])
            ("BUF_BEG_ADDR" variable (:constant-flag t) nil [5457 5469])
            ("BUF_GPT_ADDR" variable (:constant-flag t) nil [5549 5561])
            ("BUF_Z_ADDR" variable (:constant-flag t) nil [5663 5673])
            ("BUF_GAP_END_ADDR" variable (:constant-flag t) nil [5804 5820])
            ("BUF_GAP_SIZE" variable (:constant-flag t) nil [5933 5945])
            ("BUF_MODIFF" variable (:constant-flag t) nil [6011 6021])
            ("BUF_CHARS_MODIFF" variable (:constant-flag t) nil [6095 6111])
            ("BUF_SAVE_MODIFF" variable (:constant-flag t) nil [6206 6221])
            ("BUF_OVERLAY_MODIFF" variable (:constant-flag t) nil [6298 6316])
            ("BUF_AUTOSAVE_MODIFF" variable (:constant-flag t) nil [6474 6493])
            ("BUF_COMPACT" variable (:constant-flag t) nil [6561 6572])
            ("BUF_MARKERS" variable (:constant-flag t) nil [6641 6652])
            ("BUF_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6690 6712])
            ("BUF_OVERLAY_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6765 6795])
            ("BUF_BEG_UNCHANGED" variable (:constant-flag t) nil [6855 6872])
            ("BUF_END_UNCHANGED" variable (:constant-flag t) nil [6915 6932])
            ("UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6976 6994])
            ("OVERLAY_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [7047 7073])
            ("BEG_UNCHANGED" variable (:constant-flag t) nil [7134 7147])
            ("END_UNCHANGED" variable (:constant-flag t) nil [7191 7204])
            ("BUF_COMPUTE_UNCHANGED" variable (:constant-flag t) nil [7431 7452])
            ("SET_PT" variable (:constant-flag t) nil [8177 8183])
            ("TEMP_SET_PT" variable (:constant-flag t) nil [8225 8236])
            ("SET_PT_BOTH" variable (:constant-flag t) nil [8302 8313])
            ("TEMP_SET_PT_BOTH" variable (:constant-flag t) nil [8372 8388])
            ("BUF_TEMP_SET_PT" variable (:constant-flag t) nil [8477 8492])
            ("set_point" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8579 8589]))                  
                :type "void")
                nil [8556 8590])
            ("temp_set_point" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8619 8635])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8636 8646]))                  
                :type "void")
                nil [8591 8647])
            ("set_point_both" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8676 8686])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8687 8697]))                  
                :type "void")
                nil [8648 8698])
            ("temp_set_point_both" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8732 8748])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8754 8764])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8765 8775]))                  
                :type "void")
                nil [8699 8776])
            ("set_point_from_marker" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8812 8824]))                  
                :type "void")
                nil [8777 8825])
            ("enlarge_buffer_text" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8859 8875])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8876 8886]))                  
                :type "void")
                nil [8826 8887])
            ("SET_BUF_BEGV" variable (:constant-flag t) nil [9152 9164])
            ("SET_BUF_ZV" variable (:constant-flag t) nil [9289 9299])
            ("SET_BUF_BEGV_BOTH" variable (:constant-flag t) nil [9419 9436])
            ("SET_BUF_ZV_BOTH" variable (:constant-flag t) nil [9532 9547])
            ("SET_BUF_PT_BOTH" variable (:constant-flag t) nil [9639 9654])
            ("BUF_BYTES_MAX" variable (:constant-flag t) nil [10181 10194])
            ("GAP_BYTES_DFL" variable (:constant-flag t) nil [10404 10417])
            ("GAP_BYTES_MIN" variable (:constant-flag t) nil [10552 10565])
            ("BYTE_POS_ADDR" variable (:constant-flag t) nil [10643 10656])
            ("CHAR_POS_ADDR" variable (:constant-flag t) nil [10783 10796])
            ("CHAR_TO_BYTE" variable (:constant-flag t) nil [10981 10993])
            ("BYTE_TO_CHAR" variable (:constant-flag t) nil [11126 11138])
            ("PTR_BYTE_POS" variable (:constant-flag t) nil [11294 11306])
            ("FETCH_CHAR" variable (:constant-flag t) nil [11574 11584])
            ("FETCH_BYTE" variable (:constant-flag t) nil [11788 11798])
            ("FETCH_CHAR_AS_MULTIBYTE" variable (:constant-flag t) nil [11993 12016])
            ("BUF_BYTE_ADDRESS" variable (:constant-flag t) nil [12449 12465])
            ("BUF_CHAR_ADDRESS" variable (:constant-flag t) nil [12731 12747])
            ("BUF_PTR_BYTE_POS" variable (:constant-flag t) nil [12992 13008])
            ("BUF_FETCH_CHAR" variable (:constant-flag t) nil [13251 13265])
            ("BUF_FETCH_CHAR_AS_MULTIBYTE" variable (:constant-flag t) nil [13584 13611])
            ("BUF_FETCH_BYTE" variable (:constant-flag t) nil [13872 13886])
            ("buffer_text" type
               (:members 
                  ( ("beg" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [14414 14433])
                    ("gpt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14439 14453])
                    ("z" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14493 14505])
                    ("gpt_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14545 14564])
                    ("z_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14604 14621])
                    ("gap_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14661 14680])
                    ("modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14715 14732])
                    ("chars_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14891 14914])
                    ("save_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15081 15103])
                    ("overlay_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15197 15222])
                    ("compact" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15269 15287])
                    ("beg_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15453 15477])
                    ("end_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15555 15579])
                    ("unchanged_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15731 15760])
                    ("overlay_unchanged_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15962 15999])
                    ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16050 16069])
                    ("markers" variable
                       (:pointer 1
                        :type ("Lisp_Marker" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [16454 16482])
                    ("inhibit_shrinking" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [16652 16682])
                    ("redisplay" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [16735 16757]))                  
                :type "struct")
                nil [14124 16762])
            ("BVAR" variable (:constant-flag t) nil [16852 16856])
            ("buffer" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [16977 17008])
                    ("name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17046 17064])
                    ("filename_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17130 17152])
                    ("directory_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17210 17233])
                    ("backed_up_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17383 17406])
                    ("save_length_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17735 17760])
                    ("auto_save_file_name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17916 17949])
                    ("read_only_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17991 18014])
                    ("mark_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18117 18135])
                    ("local_var_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18323 18352])
                    ("major_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18409 18433])
                    ("mode_name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18487 18510])
                    ("mode_line_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18576 18606])
                    ("header_line_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18736 18768])
                    ("keymap_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18823 18843])
                    ("abbrev_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18890 18916])
                    ("syntax_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18957 18983])
                    ("category_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19026 19054])
                    ("case_fold_search_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19212 19242])
                    ("tab_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19245 19268])
                    ("fill_column_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19271 19296])
                    ("left_margin_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19299 19324])
                    ("auto_fill_function_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19390 19422])
                    ("downcase_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19547 19575])
                    ("upcase_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19644 19670])
                    ("case_canon_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19734 19764])
                    ("case_eqv_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19829 19857])
                    ("truncate_lines_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19919 19947])
                    ("word_wrap_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20031 20054])
                    ("ctl_arrow_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20113 20136])
                    ("bidi_display_reordering_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20228 20265])
                    ("bidi_paragraph_direction_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20453 20491])
                    ("bidi_paragraph_separate_re_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20567 20607])
                    ("bidi_paragraph_start_re_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20679 20716])
                    ("selective_display_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20827 20858])
                    ("selective_display_ellipses_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20938 20978])
                    ("minor_modes_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21059 21084])
                    ("overwrite_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21237 21265])
                    ("abbrev_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21342 21367])
                    ("display_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21426 21453])
                    ("mark_active_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21516 21541])
                    ("enable_multibyte_characters_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21659 21700])
                    ("buffer_file_coding_system_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21787 21826])
                    ("file_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21901 21926])
                    ("auto_save_file_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22003 22038])
                    ("cache_long_scans_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22194 22224])
                    ("width_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22622 22647])
                    ("pt_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22829 22852])
                    ("begv_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23036 23061])
                    ("zv_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23243 23266])
                    ("point_before_scroll_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23388 23421])
                    ("file_truename_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23472 23499])
                    ("invisibility_spec_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23691 23722])
                    ("last_selected_window_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23860 23894])
                    ("display_count_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23966 23993])
                    ("left_margin_cols_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24087 24117])
                    ("right_margin_cols_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24120 24151])
                    ("left_fringe_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24243 24274])
                    ("right_fringe_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24277 24309])
                    ("fringes_outside_margins_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24435 24472])
                    ("scroll_bar_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24570 24600])
                    ("scroll_bar_height_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24603 24634])
                    ("vertical_scroll_bar_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24637 24675])
                    ("horizontal_scroll_bar_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24678 24718])
                    ("indicate_empty_lines_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24807 24841])
                    ("indicate_buffer_boundaries_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24910 24950])
                    ("fringe_indicator_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25007 25043])
                    ("fringe_cursor_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25100 25133])
                    ("display_time_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25213 25239])
                    ("scroll_up_aggressively_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25504 25540])
                    ("scroll_down_aggressively_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25805 25843])
                    ("cursor_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25955 25980])
                    ("extra_line_spacing_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26093 26125])
                    ("cursor_in_non_selected_windows_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26266 26310])
                    ("own_text" variable (:type ("buffer_text" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [26570 26598])
                    ("text" variable
                       (:pointer 1
                        :type ("buffer_text" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [26814 26839])
                    ("next" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [26913 26933])
                    ("pt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26980 26993])
                    ("pt_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27040 27058])
                    ("begv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27119 27134])
                    ("begv_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27195 27215])
                    ("zv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27270 27283])
                    ("zv_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27338 27356])
                    ("base_buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [27461 27488])
                    ("indirections" variable (:type "int") (reparse-symbol classsubparts) [27678 27695])
                    ("window_count" variable (:type "int") (reparse-symbol classsubparts) [27822 27839])
                    ("MAX_PER_BUFFER_VARS" variable (:constant-flag t) (reparse-symbol classsubparts) [28182 28201])
                    ("local_flags" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [28207 28245])
                    ("NONEXISTENT_MODTIME_NSECS" variable (:constant-flag t) (reparse-symbol classsubparts) [28565 28590])
                    ("UNKNOWN_MODTIME_NSECS" variable (:constant-flag t) (reparse-symbol classsubparts) [28604 28625])
                    ("modtime" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [28633 28657])
                    ("modtime_size" variable (:type ("off_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28987 29006])
                    ("auto_save_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29068 29097])
                    ("display_error_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29230 29261])
                    ("auto_save_failure_time" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29367 29397])
                    ("last_window_start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29500 29528])
                    ("newline_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [30464 30499])
                    ("width_run_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [30502 30539])
                    ("bidi_paragraph_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [30542 30584])
                    ("prevent_redisplay_optimizations_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30710 30756])
                    ("clip_changed" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30828 30853])
                    ("overlays_before" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [30956 30993])
                    ("overlays_after" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31092 31128])
                    ("overlay_center" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [31188 31213])
                    ("undo_list_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [31556 31579]))                  
                :type "struct")
                nil [16959 31582])
            ("BUFFERP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31605 31619]))                  
                :type "bool")
                nil [31591 31664])
            ("CHECK_BUFFER" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31692 31706]))                  
                :type "void")
                nil [31673 31751])
            ("XBUFFER" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31785 31799]))                  
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [31760 31881])
            ("bset_bidi_paragraph_direction" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32104 32121])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32122 32138]))                  
                :type "void")
                nil [32068 32180])
            ("bset_cache_long_scans" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32216 32233])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32234 32250]))                  
                :type "void")
                nil [32188 32284])
            ("bset_case_canon_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32320 32337])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32338 32354]))                  
                :type "void")
                nil [32292 32388])
            ("bset_case_eqv_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32422 32439])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32440 32456]))                  
                :type "void")
                nil [32396 32488])
            ("bset_directory" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32517 32534])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32535 32551]))                  
                :type "void")
                nil [32496 32578])
            ("bset_display_count" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32611 32628])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32629 32645]))                  
                :type "void")
                nil [32586 32676])
            ("bset_left_margin_cols" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32712 32729])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32730 32746]))                  
                :type "void")
                nil [32684 32780])
            ("bset_right_margin_cols" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32817 32834])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32835 32851]))                  
                :type "void")
                nil [32788 32886])
            ("bset_display_time" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32918 32935])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32936 32952]))                  
                :type "void")
                nil [32894 32982])
            ("bset_downcase_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33016 33033])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33034 33050]))                  
                :type "void")
                nil [32990 33082])
            ("bset_enable_multibyte_characters" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33129 33146])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33147 33163]))                  
                :type "void")
                nil [33090 33208])
            ("bset_filename" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33236 33253])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33254 33270]))                  
                :type "void")
                nil [33216 33296])
            ("bset_keymap" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33322 33339])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33340 33356]))                  
                :type "void")
                nil [33304 33380])
            ("bset_last_selected_window" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33420 33437])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33438 33454]))                  
                :type "void")
                nil [33388 33492])
            ("bset_local_var_alist" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33527 33544])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33545 33561]))                  
                :type "void")
                nil [33500 33594])
            ("bset_mark_active" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33625 33642])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33643 33659]))                  
                :type "void")
                nil [33602 33688])
            ("bset_point_before_scroll" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33727 33744])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33745 33761]))                  
                :type "void")
                nil [33696 33798])
            ("bset_read_only" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33827 33844])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33845 33861]))                  
                :type "void")
                nil [33806 33888])
            ("bset_truncate_lines" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33922 33939])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33940 33956]))                  
                :type "void")
                nil [33896 33988])
            ("bset_undo_list" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34017 34034])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34035 34051]))                  
                :type "void")
                nil [33996 34078])
            ("bset_upcase_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34110 34127])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34128 34144]))                  
                :type "void")
                nil [34086 34174])
            ("bset_width_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34205 34222])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34223 34239]))                  
                :type "void")
                nil [34182 34268])
            ("BUFFER_LISP_SIZE" variable (:constant-flag t) nil [34457 34473])
            ("BUFFER_REST_SIZE" variable (:constant-flag t) nil [34703 34719])
            ("BUFFER_PVEC_INIT" variable (:constant-flag t) nil [35046 35062])
            ("BUFFER_LIVE_P" variable (:constant-flag t) nil [35235 35248])
            ("BUFFER_HIDDEN_P" variable (:constant-flag t) nil [35414 35429])
            ("BUFFER_CHECK_INDIRECTION" variable (:constant-flag t) nil [35513 35537])
            ("all_buffers" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [35889 35923])
            ("FOR_EACH_BUFFER" variable (:constant-flag t) nil [35979 35994])
            ("buffer_defaults" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [36431 36468])
            ("buffer_local_flags" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37055 37095])
            ("buffer_local_symbols" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37253 37295])
            ("delete_all_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37331 37347]))                  
                :type "void")
                nil [37298 37348])
            ("reset_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37375 37391]))                  
                :type "void")
                nil [37349 37392])
            ("compact_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37421 37437]))                  
                :type "void")
                nil [37393 37438])
            ("evaporate_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37471 37481]))                  
                :type "void")
                nil [37439 37482])
            ("overlays_at" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37513 37523])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37524 37529])
                    ("" variable
                       (:pointer 2
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37530 37545])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37555 37567])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37568 37580])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37581 37593])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37594 37599]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [37483 37600])
            ("sort_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37633 37647])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37648 37658])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37659 37675]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [37601 37676])
            ("recenter_overlay_lists" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37713 37729])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37730 37740]))                  
                :type "void")
                nil [37677 37741])
            ("overlay_strings" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37776 37786])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37787 37803])
                    ("" variable
                       (:pointer 2
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [37804 37821]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [37742 37822])
            ("validate_region" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37852 37866])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37867 37881]))                  
                :type "void")
                nil [37823 37882])
            ("set_buffer_internal_1" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37918 37934]))                  
                :type "void")
                nil [37883 37935])
            ("set_buffer_internal_2" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37971 37987]))                  
                :type "void")
                nil [37936 37988])
            ("set_buffer_temp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38018 38034]))                  
                :type "void")
                nil [37989 38035])
            ("buffer_local_value" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38075 38087])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38088 38100]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [38036 38101])
            ("record_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38129 38141]))                  
                :type "void")
                nil [38102 38142])
            ("fix_overlays_before" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38176 38192])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38193 38203])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38204 38214]))                  
                :type "void")
                nil [38143 38215])
            ("mmap_set_vars" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [38243 38248]))                  
                :type "void")
                nil [38216 38249])
            ("restore_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38278 38290]))                  
                :type "void")
                nil [38250 38291])
            ("set_buffer_if_live" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38324 38336]))                  
                :type "void")
                nil [38292 38337])
            ("decode_buffer" function
               (:pointer 1
                :arguments 
                  ( ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38456 38470]))                  
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [38425 38544])
            ("set_buffer_internal" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39003 39020]))                  
                :type "void")
                nil [38977 39082])
            ("record_unwind_current_buffer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [39251 39256]))                  
                :type "void")
                nil [39216 39326])
            ("GET_OVERLAYS_AT" variable (:constant-flag t) nil [39520 39535])
            ("Vbuffer_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [40036 40069])
            ("FOR_EACH_LIVE_BUFFER" variable (:constant-flag t) nil [40223 40243])
            ("buffer_intervals" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40394 40411]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [40367 40473])
            ("set_buffer_intervals" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40548 40565])
                    ("i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40566 40577]))                  
                :type "void")
                nil [40521 40636])
            ("buffer_has_overlays" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40720 40725]))                  
                :type "bool")
                nil [40694 40805])
            ("FETCH_MULTIBYTE_CHAR" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41028 41042]))                  
                :type "int")
                nil [41002 41114])
            ("BUF_FETCH_MULTIBYTE_CHAR" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [41347 41366])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41367 41381]))                  
                :type "int")
                nil [41317 41537])
            ("buffer_window_count" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [41615 41632]))                  
                :type "int")
                nil [41590 41742])
            ("OVERLAY_START" variable (:constant-flag t) nil [41841 41854])
            ("OVERLAY_END" variable (:constant-flag t) nil [41960 41971])
            ("OVERLAY_PLIST" variable (:constant-flag t) nil [42044 42057])
            ("OVERLAY_POSITION" variable (:constant-flag t) nil [42207 42223])
            ("last_per_buffer_idx" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [42510 42541])
            ("PER_BUFFER_VAR_OFFSET" variable (:constant-flag t) nil [42658 42679])
            ("FOR_EACH_PER_BUFFER_OBJECT_AT" variable (:constant-flag t) nil [42951 42980])
            ("PER_BUFFER_VAR_IDX" variable (:constant-flag t) nil [43469 43487])
            ("PER_BUFFER_VALUE_P" variable (:constant-flag t) nil [43640 43658])
            ("SET_PER_BUFFER_VALUE_P" variable (:constant-flag t) nil [43923 43945])
            ("PER_BUFFER_IDX" variable (:constant-flag t) nil [44978 44992])
            ("per_buffer_default" function
               (:arguments 
                  ( ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45236 45247]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45204 45314])
            ("set_per_buffer_default" function
               (:arguments 
                  ( ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45352 45363])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45364 45382]))                  
                :type "void")
                nil [45323 45450])
            ("per_buffer_value" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [45613 45630])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45631 45642]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45583 45694])
            ("set_per_buffer_value" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [45730 45747])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45748 45759])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45760 45778]))                  
                :type "void")
                nil [45703 45831])
            ("downcase" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [45927 45933]))                  
                :type "int")
                nil [45913 46110])
            ("upcase" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46201 46207]))                  
                :type "int")
                nil [46189 46372])
            ("uppercasep" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46430 46436]))                  
                :type "bool")
                nil [46413 46468])
            ("lowercasep" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46526 46532]))                  
                :type "bool")
                nil [46509 46581]))          
      :file "buffer.h"
      :pointmax 46630
      :fsize 46629
      :lastmodtime '(23443 29219 983210 739000)
      :unmatched-syntax '((symbol 46583 . 46600) (symbol 46502 . 46508) (symbol 46406 . 46412) (symbol 46182 . 46188) (symbol 45906 . 45912) (symbol 45696 . 45702) (symbol 45576 . 45582) (symbol 45316 . 45322) (symbol 45197 . 45203) (symbol 41583 . 41589) (symbol 41310 . 41316) (symbol 40995 . 41001) (symbol 40687 . 40693) (symbol 40514 . 40520) (symbol 40360 . 40366) (symbol 39209 . 39215) (symbol 38970 . 38976) (symbol 38418 . 38424) (symbol 34175 . 34181) (symbol 34079 . 34085) (symbol 33989 . 33995) (symbol 33889 . 33895) (symbol 33799 . 33805) (symbol 33689 . 33695) (symbol 33595 . 33601) (symbol 33493 . 33499) (symbol 33381 . 33387) (symbol 33297 . 33303) (symbol 33209 . 33215) (symbol 33083 . 33089) (symbol 32983 . 32989) (symbol 32887 . 32893) (symbol 32781 . 32787) (symbol 32677 . 32683) (symbol 32579 . 32585) (symbol 32489 . 32495) (symbol 32389 . 32395) (symbol 32285 . 32291) (symbol 32181 . 32187) (symbol 32061 . 32067) (symbol 31753 . 31759) (symbol 31666 . 31672) (symbol 31584 . 31590) (symbol 908 . 927))
      :lexical-table 
        '(("BEG_BYTE" . ((semantic-list "(BEG)" 1154 . 1159)))
          ("GPT_BYTE" . ((semantic-list "(current_buffer->text->gpt_byte)" 1603 . 1635)))
          ("BUF_BEGV" (spp-arg-list ("buf") 4077 . 4082) . ((semantic-list "(buf == current_buffer ? BEGV			\\
    : NILP (BVAR (buf, begv_marker)) ? buf->begv	\\
    : marker_position (BVAR (buf, begv_marker)))" 4092 . 4225)))
          ("BUF_Z_BYTE" (spp-arg-list ("buf") 5381 . 5386) . ((semantic-list "((buf)->text->z_byte)" 5387 . 5408)))
          ("OVERLAY_UNCHANGED_MODIFIED" . ((symbol "BUF_OVERLAY_UNCHANGED_MODIFIED" 7078 . 7108) (semantic-list "(current_buffer)" 7109 . 7125)))
          ("BUF_FETCH_BYTE" (spp-arg-list ("buf" "n") 13886 . 13894) . ((punctuation "*" 13899 . 13900) (semantic-list "(BUF_BYTE_ADDRESS ((buf), (n)))" 13900 . 13931)))
          ("BUFFER_LISP_SIZE" . ((semantic-list "((offsetof (struct buffer, own_text) - header_size) / word_size)" 34483 . 34547)))
          ("BUFFER_REST_SIZE" . ((semantic-list "((((sizeof (struct buffer) - offsetof (struct buffer, own_text))	\\
     + (word_size - 1)) & ~(word_size - 1)) / word_size)" 34729 . 34852)))
          ("PER_BUFFER_VALUE_P" (spp-arg-list ("B" "IDX") 43658 . 43666) . ((semantic-list "(((IDX) < 0 || IDX >= last_per_buffer_idx)	\\
     ? (emacs_abort (), false)			\\
     : ((B)->local_flags[IDX] != 0))" 43674 . 43790)))
          ("BEG" . ((semantic-list "(1)" 1133 . 1136)))
          ("GPT" . ((semantic-list "(current_buffer->text->gpt)" 1558 . 1585)))
          ("GAP_END_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gpt_byte + current_buffer->text->gap_size - BEG_BYTE)" 2439 . 2543)))
          ("CHARS_MODIFF" . ((semantic-list "(current_buffer->text->chars_modiff)" 3012 . 3048)))
          ("OVERLAY_MODIFF" . ((semantic-list "(current_buffer->text->overlay_modiff)" 3108 . 3146)))
          ("BUF_Z" (spp-arg-list ("buf") 5340 . 5345) . ((semantic-list "((buf)->text->z)" 5346 . 5362)))
          ("CHAR_POS_ADDR" (spp-arg-list ("n") 10796 . 10799) . ((semantic-list "(((n) >= GPT ? GAP_SIZE : 0)			\\
   + buf_charpos_to_bytepos (current_buffer, n)	\\
   + BEG_ADDR - BEG_BYTE)" 10806 . 10914)))
          ("BUF_PTR_BYTE_POS" (spp-arg-list ("buf" "ptr") 13008 . 13018) . ((semantic-list "((ptr) - (buf)->text->beg					\\
   - (ptr - (buf)->text->beg <= BUF_GPT_BYTE (buf) - BEG_BYTE	\\
      ? 0 : BUF_GAP_SIZE ((buf)))				\\
   + BEG_BYTE)" 13026 . 13175)))
          ("FOR_EACH_LIVE_BUFFER" (spp-arg-list ("list_var" "buf_var") 40243 . 40262) . ((symbol "FOR_EACH_ALIST_VALUE" 40269 . 40289) (semantic-list "(Vbuffer_alist, list_var, buf_var)" 40290 . 40324)))
          ("OVERLAY_START" (spp-arg-list ("OV") 41854 . 41858) . 
              ((symbol "XOVERLAY" 41859 . 41867) (semantic-list "(OV)" 41868 . 41872) (punctuation "-" 41872 . 41873) (punctuation ">" 41873 . 41874) (symbol "start" 41874 . 41879)))
          ("BUF_BEG_ADDR" (spp-arg-list ("buf") 5469 . 5474) . ((semantic-list "((buf)->text->beg)" 5475 . 5493)))
          ("BUF_GPT_ADDR" (spp-arg-list ("buf") 5561 . 5566) . ((semantic-list "((buf)->text->beg + (buf)->text->gpt_byte - BEG_BYTE)" 5567 . 5620)))
          ("BUF_GAP_SIZE" (spp-arg-list ("buf") 5945 . 5950) . ((semantic-list "((buf)->text->gap_size)" 5951 . 5974)))
          ("BUF_OVERLAY_UNCHANGED_MODIFIED" (spp-arg-list ("buf") 6795 . 6800) . ((semantic-list "((buf)->text->overlay_unchanged_modified)" 6805 . 6846)))
          ("BYTE_POS_ADDR" (spp-arg-list ("n") 10656 . 10659) . ((semantic-list "(((n) >= GPT_BYTE ? GAP_SIZE : 0) + (n) + BEG_ADDR - BEG_BYTE)" 10664 . 10726)))
          ("CHAR_TO_BYTE" (spp-arg-list ("charpos") 10993 . 11002) . ((semantic-list "(buf_charpos_to_bytepos (current_buffer, charpos))" 11009 . 11059)))
          ("MAX_PER_BUFFER_VARS" . ((number "50" 28202 . 28204)))
          ("BUF_MODIFF" (spp-arg-list ("buf") 6021 . 6026) . ((semantic-list "((buf)->text->modiff)" 6027 . 6048)))
          ("BUF_SAVE_MODIFF" (spp-arg-list ("buf") 6221 . 6226) . ((semantic-list "((buf)->text->save_modiff)" 6227 . 6253)))
          ("GAP_BYTES_DFL" . ((number "2000" 10418 . 10422)))
          ("OVERLAY_END" (spp-arg-list ("OV") 41971 . 41975) . 
              ((symbol "XOVERLAY" 41976 . 41984) (semantic-list "(OV)" 41985 . 41989) (punctuation "-" 41989 . 41990) (punctuation ">" 41990 . 41991) (symbol "end" 41991 . 41994)))
          ("PT_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->pt_byte))" 2199 . 2240)))
          ("Z_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gap_size + current_buffer->text->z_byte - BEG_BYTE)" 2705 . 2807)))
          ("BUF_BEGV_BYTE" (spp-arg-list ("buf") 4248 . 4253) . ((semantic-list "(buf == current_buffer ? BEGV_BYTE			\\
    : NILP (BVAR (buf, begv_marker)) ? buf->begv_byte	\\
    : marker_byte_position (BVAR (buf, begv_marker)))" 4262 . 4410)))
          ("TEMP_SET_PT" (spp-arg-list ("position") 8236 . 8246) . ((semantic-list "(temp_set_point (current_buffer, (position)))" 8247 . 8292)))
          ("GAP_BYTES_MIN" . ((number "20" 10566 . 10568)))
          ("PTR_BYTE_POS" (spp-arg-list ("ptr") 11306 . 11311) . ((semantic-list "((ptr) - (current_buffer)->text->beg					    \\
   - (ptr - (current_buffer)->text->beg <= GPT_BYTE - BEG_BYTE ? 0 : GAP_SIZE) \\
   + BEG_BYTE)" 11316 . 11458)))
          ("PER_BUFFER_VAR_IDX" (spp-arg-list ("VAR") 43487 . 43492) . ((symbol "PER_BUFFER_IDX" 43499 . 43513) (semantic-list "(PER_BUFFER_VAR_OFFSET (VAR))" 43514 . 43543)))
          ("EMACS_BUFFER_H")
          ("ZV" . ((semantic-list "(current_buffer->zv)" 1702 . 1722)))
          ("BUF_PT" (spp-arg-list ("buf") 4462 . 4467) . ((semantic-list "(buf == current_buffer ? PT				\\
    : NILP (BVAR (buf, pt_marker)) ? buf->pt		\\
    : marker_position (BVAR (buf, pt_marker)))" 4477 . 4604)))
          ("BUF_OVERLAY_MODIFF" (spp-arg-list ("buf") 6316 . 6321) . ((semantic-list "((buf)->text->overlay_modiff)" 6322 . 6351)))
          ("BUF_UNCHANGED_MODIFIED" (spp-arg-list ("buf") 6712 . 6717) . ((semantic-list "((buf)->text->unchanged_modified)" 6722 . 6755)))
          ("BUF_BYTES_MAX" . 
              ((semantic-list "(ptrdiff_t)" 10199 . 10210) (symbol "min" 10211 . 10214) (semantic-list "(MOST_POSITIVE_FIXNUM - 1, min (SIZE_MAX, PTRDIFF_MAX))" 10215 . 10270)))
          ("FETCH_CHAR_AS_MULTIBYTE" (spp-arg-list ("pos") 12016 . 12021) . ((semantic-list "(!NILP (BVAR (current_buffer, enable_multibyte_characters))	\\
   ? FETCH_MULTIBYTE_CHAR ((pos))			\\
   : UNIBYTE_TO_CHAR (FETCH_BYTE ((pos))))" 12028 . 12170)))
          ("BUFFER_LIVE_P" (spp-arg-list ("b") 35248 . 35251) . ((semantic-list "(!NILP (BVAR (b, name)))" 35252 . 35276)))
          ("FOR_EACH_BUFFER" (spp-arg-list ("b") 35994 . 35997) . ((FOR "for" 36002 . 36005) (semantic-list "((b) = all_buffers; (b); (b) = (b)->next)" 36006 . 36047)))
          ("OVERLAY_POSITION" (spp-arg-list ("P") 42223 . 42226) . ((semantic-list "(MARKERP (P) ? marker_position (P) : (emacs_abort (), 0))" 42230 . 42287)))
          ("ZV_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->zv_byte))" 2614 . 2655)))
          ("BUFFER_CEILING_OF" (spp-arg-list ("BYTEPOS") 3450 . 3459) . ((semantic-list "(((BYTEPOS) < GPT_BYTE && GPT < ZV ? GPT_BYTE : ZV_BYTE) - 1)" 3464 . 3525)))
          ("BUF_BEG" (spp-arg-list ("buf") 3811 . 3816) . ((semantic-list "(BEG)" 3817 . 3822)))
          ("BUF_BEG_BYTE" (spp-arg-list ("buf") 3843 . 3848) . ((semantic-list "(BEG_BYTE)" 3849 . 3859)))
          ("BUF_GPT" (spp-arg-list ("buf") 5217 . 5222) . ((semantic-list "((buf)->text->gpt)" 5223 . 5241)))
          ("BUF_GPT_BYTE" (spp-arg-list ("buf") 5262 . 5267) . ((semantic-list "((buf)->text->gpt_byte)" 5268 . 5291)))
          ("END_UNCHANGED" . ((symbol "BUF_END_UNCHANGED" 7205 . 7222) (semantic-list "(current_buffer)" 7223 . 7239)))
          ("BUF_COMPUTE_UNCHANGED" (spp-arg-list ("buf" "start" "end") 7452 . 7469) . 
              ((DO "do" 7477 . 7479) (semantic-list "{									\\
      if (BUF_UNCHANGED_MODIFIED (buf) == BUF_MODIFF (buf)		\\
	  && (BUF_OVERLAY_UNCHANGED_MODIFIED (buf)			\\
	      == BUF_OVERLAY_MODIFF (buf)))				\\
	{								\\
	  BUF_BEG_UNCHANGED (buf) = (start) - BUF_BEG (buf);		\\
	  BUF_END_UNCHANGED (buf) = BUF_Z (buf) - (end);		\\
	}								\\
      else								\\
	{								\\
	  if (BUF_Z (buf) - (end) < BUF_END_UNCHANGED (buf))		\\
	    BUF_END_UNCHANGED (buf) = BUF_Z (buf) - (end);		\\
	  if ((start) - BUF_BEG (buf) < BUF_BEG_UNCHANGED (buf))	\\
	    BUF_BEG_UNCHANGED (buf) = (start) - BUF_BEG (buf);		\\
	}								\\
    }" 7494 . 8072) (WHILE "while" 8085 . 8090) (semantic-list "(false)" 8091 . 8098)))
          ("SET_PT_BOTH" (spp-arg-list ("position" "byte") 8313 . 8329) . ((semantic-list "(set_point_both (position, byte))" 8330 . 8363)))
          ("SET_PT" (spp-arg-list ("position") 8183 . 8193) . ((semantic-list "(set_point (position))" 8194 . 8216)))
          ("BUF_BYTE_ADDRESS" (spp-arg-list ("buf" "pos") 12465 . 12475) . ((semantic-list "((buf)->text->beg + (pos) - BEG_BYTE \\
   + ((pos) >= (buf)->text->gpt_byte ? (buf)->text->gap_size : 0))" 12480 . 12585)))
          ("BUF_FETCH_CHAR_AS_MULTIBYTE" (spp-arg-list ("buf" "pos") 13611 . 13621) . ((semantic-list "(! NILP (BVAR ((buf), enable_multibyte_characters))   \\
   ? BUF_FETCH_MULTIBYTE_CHAR ((buf), (pos))            \\
   : UNIBYTE_TO_CHAR (BUF_FETCH_BYTE ((buf), (pos))))" 13636 . 13803)))
          ("BUFFER_HIDDEN_P" (spp-arg-list ("b") 35429 . 35432) . ((semantic-list "(SREF (BVAR (b, name), 0) == ' ')" 35433 . 35466)))
          ("OVERLAY_PLIST" (spp-arg-list ("OV") 42057 . 42061) . 
              ((symbol "XOVERLAY" 42062 . 42070) (semantic-list "(OV)" 42071 . 42075) (punctuation "-" 42075 . 42076) (punctuation ">" 42076 . 42077) (symbol "plist" 42077 . 42082)))
          ("FOR_EACH_PER_BUFFER_OBJECT_AT" (spp-arg-list ("offset") 42980 . 42988) . ((FOR "for" 42997 . 43000) (semantic-list "(offset = PER_BUFFER_VAR_OFFSET (name);				 \\
       offset <= PER_BUFFER_VAR_OFFSET (cursor_in_non_selected_windows); \\
       offset += word_size)" 43001 . 43149)))
          ("NONEXISTENT_MODTIME_NSECS" . ((semantic-list "(-1)" 28591 . 28595)))
          ("PT_BYTE" . ((semantic-list "(current_buffer->pt_byte + 0)" 1481 . 1510)))
          ("Z_BYTE" . ((semantic-list "(current_buffer->text->z_byte)" 1851 . 1881)))
          ("BEGV_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->begv_byte))" 2103 . 2146)))
          ("BUF_AUTOSAVE_MODIFF" (spp-arg-list ("buf") 6493 . 6498) . ((semantic-list "((buf)->auto_save_modified)" 6499 . 6526)))
          ("TEMP_SET_PT_BOTH" (spp-arg-list ("position" "byte") 8388 . 8404) . ((semantic-list "(temp_set_point_both (current_buffer, (position), (byte)))" 8409 . 8467)))
          ("SET_BUF_BEGV" (spp-arg-list ("buf" "charpos") 9164 . 9178) . ((semantic-list "((buf)->begv_byte = buf_charpos_to_bytepos ((buf), (charpos)), \\
   (buf)->begv = (charpos))" 9187 . 9279)))
          ("BUFFER_PVEC_INIT" (spp-arg-list ("b") 35062 . 35065) . ((symbol "XSETPVECTYPESIZE" 35105 . 35121) (semantic-list "(b, PVEC_BUFFER, BUFFER_LISP_SIZE, BUFFER_REST_SIZE)" 35122 . 35174)))
          ("SET_PER_BUFFER_VALUE_P" (spp-arg-list ("B" "IDX" "VAL") 43945 . 43958) . 
              ((DO "do" 43966 . 43968) (semantic-list "{						\\
       if ((IDX) < 0 || (IDX) >= last_per_buffer_idx)	\\
	 emacs_abort ();				\\
       (B)->local_flags[IDX] = (VAL);			\\
     }" 43969 . 44105) (WHILE "while" 44106 . 44111) (semantic-list "(false)" 44112 . 44119)))
          ("UNKNOWN_MODTIME_NSECS" . ((semantic-list "(-2)" 28626 . 28630)))
          ("BEG_ADDR" . ((semantic-list "(current_buffer->text->beg)" 1997 . 2024)))
          ("GPT_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gpt_byte - BEG_BYTE)" 2305 . 2376)))
          ("GAP_SIZE" . ((semantic-list "(current_buffer->text->gap_size)" 2846 . 2878)))
          ("BUF_Z_ADDR" (spp-arg-list ("buf") 5673 . 5678) . ((semantic-list "((buf)->text->beg + (buf)->text->gap_size + (buf)->text->z_byte - BEG_BYTE)" 5679 . 5754)))
          ("BUF_END_UNCHANGED" (spp-arg-list ("buf") 6932 . 6937) . ((semantic-list "((buf)->text->end_unchanged)" 6938 . 6966)))
          ("BEG_UNCHANGED" . ((symbol "BUF_BEG_UNCHANGED" 7148 . 7165) (semantic-list "(current_buffer)" 7166 . 7182)))
          ("SET_BUF_ZV" (spp-arg-list ("buf" "charpos") 9299 . 9313) . ((semantic-list "((buf)->zv_byte = buf_charpos_to_bytepos ((buf), (charpos)),	\\
   (buf)->zv = (charpos))" 9321 . 9409)))
          ("SET_BUF_PT_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9654 . 9674) . ((semantic-list "((buf)->pt = (charpos),				\\
   (buf)->pt_byte = (byte))" 9680 . 9736)))
          ("ZV_BYTE" . ((semantic-list "(current_buffer->zv_byte)" 1739 . 1764)))
          ("SAVE_MODIFF" . ((semantic-list "(current_buffer->text->save_modiff)" 3220 . 3255)))
          ("BUFFER_FLOOR_OF" (spp-arg-list ("BYTEPOS") 3549 . 3558) . ((semantic-list "(BEGV <= GPT && GPT_BYTE <= (BYTEPOS) ? GPT_BYTE : BEGV_BYTE)" 3563 . 3624)))
          ("BUF_PT_BYTE" (spp-arg-list ("buf") 4625 . 4630) . ((semantic-list "(buf == current_buffer ? PT_BYTE			\\
    : NILP (BVAR (buf, pt_marker)) ? buf->pt_byte	\\
    : marker_byte_position (BVAR (buf, pt_marker)))" 4639 . 4779)))
          ("BUF_TEMP_SET_PT" (spp-arg-list ("buffer" "position") 8492 . 8510) . ((semantic-list "(temp_set_point ((buffer), (position)))" 8515 . 8554)))
          ("SET_BUF_BEGV_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9436 . 9456) . ((semantic-list "((buf)->begv = (charpos),				\\
   (buf)->begv_byte = (byte))" 9462 . 9522)))
          ("BYTE_TO_CHAR" (spp-arg-list ("bytepos") 11138 . 11147) . ((semantic-list "(buf_bytepos_to_charpos (current_buffer, bytepos))" 11154 . 11204)))
          ("FETCH_CHAR" (spp-arg-list ("pos") 11584 . 11589) . ((semantic-list "(!NILP (BVAR (current_buffer, enable_multibyte_characters))	\\
   ? FETCH_MULTIBYTE_CHAR ((pos))		      	\\
   : FETCH_BYTE ((pos)))" 11604 . 11734)))
          ("BUFFER_CHECK_INDIRECTION" (spp-arg-list ("b") 35537 . 35540) . 
              ((DO "do" 35547 . 35549) (semantic-list "{							\\
    if (BUFFER_LIVE_P (b))				\\
      {							\\
	if (b->base_buffer)				\\
	  {						\\
	    eassert (b->indirections == -1);		\\
	    eassert (b->base_buffer->indirections > 0);	\\
	  }						\\
	else						\\
	  eassert (b->indirections >= 0);		\\
      }							\\
  }" 35550 . 35820) (WHILE "while" 35821 . 35826) (semantic-list "(false)" 35827 . 35834)))
          ("BEGV" . ((semantic-list "(current_buffer->begv)" 1234 . 1256)))
          ("MODIFF" . ((semantic-list "(current_buffer->text->modiff)" 2922 . 2952)))
          ("BUF_ZV" (spp-arg-list ("buf") 4849 . 4854) . ((semantic-list "(buf == current_buffer ? ZV				\\
    : NILP (BVAR (buf, zv_marker)) ? buf->zv		\\
    : marker_position (BVAR (buf, zv_marker)))" 4864 . 4991)))
          ("BUF_GAP_END_ADDR" (spp-arg-list ("buf") 5820 . 5825) . ((semantic-list "((buf)->text->beg + (buf)->text->gpt_byte + (buf)->text->gap_size - BEG_BYTE)" 5826 . 5903)))
          ("BUF_CHARS_MODIFF" (spp-arg-list ("buf") 6111 . 6116) . ((semantic-list "((buf)->text->chars_modiff)" 6117 . 6144)))
          ("BUF_COMPACT" (spp-arg-list ("buf") 6572 . 6577) . ((semantic-list "((buf)->text->compact)" 6578 . 6600)))
          ("BUF_MARKERS" (spp-arg-list ("buf") 6652 . 6657) . ((semantic-list "((buf)->text->markers)" 6658 . 6680)))
          ("SET_BUF_ZV_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9547 . 9567) . ((semantic-list "((buf)->zv = (charpos),				\\
   (buf)->zv_byte = (byte))" 9573 . 9629)))
          ("FETCH_BYTE" (spp-arg-list ("n") 11798 . 11801) . ((punctuation "*" 11802 . 11803) (semantic-list "(BYTE_POS_ADDR ((n)))" 11803 . 11824)))
          ("BUF_CHAR_ADDRESS" (spp-arg-list ("buf" "pos") 12747 . 12757) . ((semantic-list "((buf)->text->beg + buf_charpos_to_bytepos ((buf), (pos)) - BEG_BYTE	\\
   + ((pos) >= (buf)->text->gpt ? (buf)->text->gap_size : 0))" 12762 . 12894)))
          ("GET_OVERLAYS_AT" (spp-arg-list ("posn" "overlays" "noverlays" "nextp" "chrq") 39535 . 39575) . 
              ((DO "do" 39581 . 39583) (semantic-list "{									\\
    ptrdiff_t maxlen = 40;						\\
    SAFE_NALLOCA (overlays, 1, maxlen);					\\
    (noverlays) = overlays_at (posn, false, &(overlays), &maxlen,	\\
			       nextp, NULL, chrq);			\\
    if ((noverlays) > maxlen)						\\
      {									\\
	maxlen = noverlays;						\\
	SAFE_NALLOCA (overlays, 1, maxlen);				\\
	(noverlays) = overlays_at (posn, false, &(overlays), &maxlen,	\\
				   nextp, NULL, chrq);			\\
      }									\\
  }" 39584 . 40020) (WHILE "while" 40021 . 40026) (semantic-list "(false)" 40027 . 40034)))
          ("PER_BUFFER_VAR_OFFSET" (spp-arg-list ("VAR") 42679 . 42684) . ((symbol "offsetof" 42689 . 42697) (semantic-list "(struct buffer, VAR ## _)" 42698 . 42723)))
          ("BEGV_BYTE" . ((semantic-list "(current_buffer->begv_byte)" 1275 . 1302)))
          ("PT" . ((semantic-list "(current_buffer->pt + 0)" 1440 . 1464)))
          ("Z" . ((semantic-list "(current_buffer->text->z)" 1810 . 1835)))
          ("BUF_ZV_BYTE" (spp-arg-list ("buf") 5012 . 5017) . ((semantic-list "(buf == current_buffer ? ZV_BYTE			\\
    : NILP (BVAR (buf, zv_marker)) ? buf->zv_byte	\\
    : marker_byte_position (BVAR (buf, zv_marker)))" 5026 . 5166)))
          ("BUF_BEG_UNCHANGED" (spp-arg-list ("buf") 6872 . 6877) . ((semantic-list "((buf)->text->beg_unchanged)" 6878 . 6906)))
          ("UNCHANGED_MODIFIED" . ((symbol "BUF_UNCHANGED_MODIFIED" 6999 . 7021) (semantic-list "(current_buffer)" 7022 . 7038)))
          ("BUF_FETCH_CHAR" (spp-arg-list ("buf" "pos") 13265 . 13275) . ((semantic-list "(!NILP (buf->enable_multibyte_characters)	\\
   ? BUF_FETCH_MULTIBYTE_CHAR ((buf), (pos))    \\
   : BUF_FETCH_BYTE ((buf), (pos)))" 13287 . 13416)))
          ("BVAR" (spp-arg-list ("buf" "field") 16856 . 16868) . ((semantic-list "((buf)->field ## _)" 16869 . 16888)))
          ("PER_BUFFER_IDX" (spp-arg-list ("OFFSET") 44992 . 45000) . ((symbol "XFIXNUM" 45009 . 45016) (semantic-list "(*(Lisp_Object *)((OFFSET) + (char *) &buffer_local_flags))" 45017 . 45076)))
          )
)
    (semanticdb-table "semanticdb-table-1afaf00"
      :file "region-cache.h"
      :fsize 5279
      :lastmodtime '(23443 29220 119792 786000))
    (semanticdb-table "semanticdb-table-1afaf20"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [818 837])
            ("lisp.h" include nil nil [839 856])
            ("character.h" include nil nil [857 879])
            ("buffer.h" include nil nil [880 899])
            ("regex-emacs.h" include nil nil [900 924])
            ("syntax.h" include nil nil [925 944])
            ("intervals.h" include nil nil [945 967])
            ("category.h" include nil nil [968 989])
            ("SYNTAX" variable (:constant-flag t) nil [1055 1061])
            ("SYNTAX_ENTRY" variable (:constant-flag t) nil [1096 1108])
            ("SYNTAX_WITH_FLAGS" variable (:constant-flag t) nil [1149 1166])
            ("SYNTAX_FLAGS_COMSTART_FIRST" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [2644 2654]))                  
                :type "bool")
                nil [2603 2686])
            ("SYNTAX_FLAGS_COMSTART_SECOND" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [2729 2739]))                  
                :type "bool")
                nil [2687 2771])
            ("SYNTAX_FLAGS_COMEND_FIRST" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [2811 2821]))                  
                :type "bool")
                nil [2772 2853])
            ("SYNTAX_FLAGS_COMEND_SECOND" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [2894 2904]))                  
                :type "bool")
                nil [2854 2936])
            ("SYNTAX_FLAGS_COMSTARTEND_FIRST" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [2981 2991]))                  
                :type "bool")
                nil [2937 3028])
            ("SYNTAX_FLAGS_PREFIX" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3062 3072]))                  
                :type "bool")
                nil [3029 3104])
            ("SYNTAX_FLAGS_COMMENT_STYLEB" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3146 3156]))                  
                :type "bool")
                nil [3105 3188])
            ("SYNTAX_FLAGS_COMMENT_STYLEC" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3230 3240]))                  
                :type "bool")
                nil [3189 3272])
            ("SYNTAX_FLAGS_COMMENT_STYLEC2" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3314 3324]))                  
                :type "int")
                nil [3273 3402])
            ("SYNTAX_FLAGS_COMMENT_NESTED" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3444 3454]))                  
                :type "bool")
                nil [3403 3486])
            ("SYNTAX_FLAGS_COMMENT_STYLE" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [3658 3668])
                    ("other_flags" variable (:type "int") (reparse-symbol arg-sub-list) [3669 3685]))                  
                :type "int")
                nil [3619 3827])
            ("SYNTAX_COMEND_FIRST" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [3919 3925]))                  
                :type "bool")
                nil [3886 3989])
            ("" type
               (:members 
                  ( ("ST_COMMENT_STYLE" variable
                       (:constant-flag t
                        :default-value (4190 4197)
                        :type "int")
                        (reparse-symbol enumsubparts) [4171 4197])
                    ("ST_STRING_STYLE" variable
                       (:constant-flag t
                        :default-value (4221 4228)
                        :type "int")
                        (reparse-symbol enumsubparts) [4203 4228]))                  
                :type "enum")
                nil [4158 4233])
            ("lisp_parse_state" type
               (:members 
                  ( ("depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4348 4364])
                    ("instring" variable (:type "int") (reparse-symbol classsubparts) [4401 4414])
                    ("incomment" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4477 4497])
                    ("comstyle" variable (:type "int") (reparse-symbol classsubparts) [4557 4570])
                    ("quoted" variable (:type "bool") (reparse-symbol classsubparts) [4631 4643])
                    ("mindepth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4710 4729])
                    ("thislevelstart" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4850 4875])
                    ("prevlevelstart" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4936 4961])
                    ("location" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4966 4985])
                    ("location_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5040 5064])
                    ("comstr_start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5105 5128])
                    ("levelstarts" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5182 5206])
                    ("prev_syntax" variable (:type "int") (reparse-symbol classsubparts) [5296 5312]))                  
                :type "struct")
                nil [4316 5566])
            ("find_start_pos" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6001 6033])
            ("find_start_value" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6034 6068])
            ("find_start_value_byte" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6069 6108])
            ("find_start_buffer" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6109 6149])
            ("find_start_begv" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6150 6183])
            ("find_start_modiff" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6184 6219])
            ("skip_chars" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [6253 6258])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6259 6271])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6272 6284])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [6285 6290]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [6222 6291])
            ("skip_syntaxes" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [6326 6331])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6332 6344])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6345 6357]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [6292 6358])
            ("scan_lists" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6390 6400])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6401 6411])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6412 6422])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [6423 6428]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [6359 6429])
            ("scan_sexps_forward" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("lisp_parse_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6462 6488])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6521 6531])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6532 6542])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6543 6553])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6554 6564])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [6597 6602])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [6603 6607]))                  
                :type "void")
                nil [6430 6608])
            ("internalize_parse_state" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6646 6658])
                    ("" variable
                       (:pointer 1
                        :type ("lisp_parse_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6659 6685]))                  
                :type "void")
                nil [6609 6686])
            ("in_classes" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [6711 6715])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6716 6728]))                  
                :type "bool")
                nil [6687 6729])
            ("parse_sexp_propertize" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6765 6783]))                  
                :type "void")
                nil [6730 6784])
            ("bset_syntax_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6885 6902])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6903 6919]))                  
                :type "void")
                nil [6854 6949])
            ("syntax_prefix_flag_p" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [7049 7055]))                  
                :type "bool")
                nil [7022 7113])
            ("gl_state" variable (:type ("gl_state_s" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [7115 7142])
            ("" type
               (:members 
                  ( ("INTERVALS_AT_ONCE" variable
                       (:constant-flag t
                        :default-value (7210 7212)
                        :type "int")
                        (reparse-symbol enumsubparts) [7190 7212]))                  
                :type "enum")
                nil [7183 7215])
            ("SET_RAW_SYNTAX_ENTRY" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7382 7400])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [7401 7407])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7408 7424]))                  
                :type "void")
                nil [7348 7462])
            ("SET_RAW_SYNTAX_ENTRY_RANGE" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7641 7659])
                    ("range" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7660 7678])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7686 7702]))                  
                :type "void")
                nil [7601 7751])
            ("SYNTAX_MATCH" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [7881 7887]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [7848 7971])
            ("SETUP_SYNTAX_TABLE" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8337 8352])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8353 8369]))                  
                :type "void")
                nil [8305 8759])
            ("SETUP_SYNTAX_TABLE_FOR_OBJECT" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9197 9216])
                    ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9227 9242])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9243 9259]))                  
                :type "void")
                nil [9161 10130])
            ("update_syntax_table" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10864 10882])
                    ("count" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10883 10899])
                    ("init" variable (:type "bool") (reparse-symbol arg-sub-list) [10900 10910])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10918 10937]))                  
                :type "void")
                nil [10838 15162])
            ("parse_sexp_propertize" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15199 15217]))                  
                :type "void")
                nil [15164 16347])
            ("update_syntax_table_forward" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16383 16401])
                    ("init" variable (:type "bool") (reparse-symbol arg-sub-list) [16402 16412])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16421 16440]))                  
                :type "void")
                nil [16349 16792])
            ("char_quoted" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17020 17038])
                    ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17039 17057]))                  
                :type "bool")
                nil [16995 17492])
            ("dec_bytepos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17642 17660]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [17612 17793])
            ("find_defun_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18424 18438])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18439 18458]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [18389 20869])
            ("prev_char_comend_first" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20986 21000])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21001 21020]))                  
                :type "bool")
                nil [20950 21229])
            ("back_comment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21727 21742])
                    ("from_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21743 21763])
                    ("stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21764 21779])
                    ("comnested" variable (:type "bool") (reparse-symbol arg-sub-list) [21787 21802])
                    ("comstyle" variable (:type "int") (reparse-symbol arg-sub-list) [21803 21816])
                    ("charpos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21817 21840])
                    ("bytepos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21848 21871]))                  
                :type "bool")
                nil [21701 31491])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsyntax_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31519 31535])
                    ("" variable (:type ("Ssyntax_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31536 31552])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31569 31573]))                  
                :type "int")
                nil [31494 31694])
            ("check_syntax_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31850 31866]))                  
                :type "void")
                nil [31818 31984])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsyntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32009 32023])
                    ("" variable (:type ("Ssyntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32024 32038])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32055 32059]))                  
                :type "int")
                nil [31986 32158])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstandard_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32242 32265])
                    ("" variable (:type ("Sstandard_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32269 32292])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32309 32313]))                  
                :type "int")
                nil [32210 32402])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcopy_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32469 32488])
                    ("" variable (:type ("Scopy_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32489 32508])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32525 32529]))                  
                :type "int")
                nil [32441 32675])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33332 33350])
                    ("" variable (:type ("Sset_syntax_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33351 33369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33386 33390]))                  
                :type "int")
                nil [33305 33500])
            ("syntax_spec_code" variable
               (:dereference 1
                :default-value "{ 0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    Swhitespace, Scomment_fence, Sstring, 0377, Smath, 0377, 0377, Squote,
    Sopen, Sclose, 0377, 0377, 0377, Swhitespace, Spunct, Scharquote,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, Scomment, 0377, Sendcomment, 0377,
    Sinherit, 0377, 0377, 0377, 0377, 0377, 0377, 0377,   /* @, A ... */
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, Sword,
    0377, 0377, 0377, 0377, Sescape, 0377, 0377, Ssymbol,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,   /* `, a, ... */
    0377, 0377, 0377, 0377, 0377, 0377, 0377, 0377,
    0377, 0377, 0377, 0377, 0377, 0377, 0377, Sword,
    0377, 0377, 0377, 0377, Sstring_fence, 0377, 0377, 0377
  }"
                :type "unsigned char")
                nil [33912 34900])
            ("syntax_code_spec" variable
               (:dereference 1
                :default-value "{
    ' ', '.', 'w', '_', '(', ')', '\\'', '\\\"', '$', '\\\\', '/', '<', '>', '@',
    '!', '|'
  }"
                :type "char")
                nil [34969 35101])
            ("Vsyntax_code_object" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35392 35431])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_syntax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35457 35470])
                    ("" variable (:type ("Schar_syntax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35471 35484])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35501 35505]))                  
                :type "int")
                nil [35435 36023])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmatching_paren" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36227 36243])
                    ("" variable (:type ("Smatching_paren" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36244 36260])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36277 36281]))                  
                :type "int")
                nil [36202 36377])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_syntax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36665 36683])
                    ("" variable (:type ("Sstring_to_syntax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36684 36702])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36719 36723]))                  
                :type "int")
                nil [36638 37064])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmodify_syntax_entry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38308 38329])
                    ("" variable (:type ("Smodify_syntax_entry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38330 38351])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38423 38427]))                  
                :type "int")
                nil [38278 40616])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finternal_describe_syntax_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41340 41372])
                    ("" variable (:type ("Sinternal_describe_syntax_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41380 41412])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41429 41433]))                  
                :type "int")
                nil [41299 41537])
            ("scan_words" function
               (:arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45395 45410])
                    ("count" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45411 45427]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [45373 48214])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fforward_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48239 48253])
                    ("" variable (:type ("Sforward_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48254 48268])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48288 48292]))                  
                :type "int")
                nil [48216 49042])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fskip_chars_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49529 49549])
                    ("" variable (:type ("Sskip_chars_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49550 49570])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49587 49591]))                  
                :type "int")
                nil [49500 50154])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fskip_chars_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50231 50252])
                    ("" variable (:type ("Sskip_chars_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50253 50274])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50291 50295]))                  
                :type "int")
                nil [50201 50510])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fskip_syntax_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50587 50608])
                    ("" variable (:type ("Sskip_syntax_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50609 50630])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50647 50651]))                  
                :type "int")
                nil [50557 51018])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fskip_syntax_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51096 51118])
                    ("" variable (:type ("Sskip_syntax_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51119 51141])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51158 51162]))                  
                :type "int")
                nil [51065 51578])
            ("skip_chars" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("forwardp" variable (:type "bool") (reparse-symbol arg-sub-list) [51656 51670])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51671 51690])
                    ("lim" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51691 51707])
                    ("handle_iso_classes" variable (:type "bool") (reparse-symbol arg-sub-list) [51713 51737]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [51625 61668])
            ("skip_syntaxes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("forwardp" variable (:type "bool") (reparse-symbol arg-sub-list) [61705 61719])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61720 61739])
                    ("lim" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61740 61756]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [61671 65062])
            ("in_classes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [65271 65277])
                    ("iso_classes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65278 65302]))                  
                :type "bool")
                nil [65247 65549])
            ("forw_comment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67034 67049])
                    ("from_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67050 67070])
                    ("stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67071 67086])
                    ("nesting" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67094 67112])
                    ("style" variable (:type "int") (reparse-symbol arg-sub-list) [67113 67123])
                    ("prev_syntax" variable (:type "int") (reparse-symbol arg-sub-list) [67124 67140])
                    ("charpos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67148 67171])
                    ("bytepos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67172 67195])
                    ("incomment_ptr" variable
                       (:pointer 1
                        :type ("EMACS_INT" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67203 67228])
                    ("last_syntax_ptr" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [67229 67250]))                  
                :type "bool")
                nil [67008 70817])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fforward_comment" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70845 70862])
                    ("" variable (:type ("Sforward_comment" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70863 70880])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70897 70901]))                  
                :type "int")
                nil [70819 71235])
            ("syntax_multibyte" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [76879 76885])
                    ("multibyte_symbol_p" variable (:type "bool") (reparse-symbol arg-sub-list) [76886 76910]))                  
                :type ("syntaxcode" type (:type "enum") nil nil))
                nil [76838 76987])
            ("scan_lists" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77020 77035])
                    ("count" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77036 77052])
                    ("depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77053 77069])
                    ("sexpflag" variable (:type "bool") (reparse-symbol arg-sub-list) [77070 77084]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [76989 87757])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscan_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87780 87792])
                    ("" variable (:type ("Sscan_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87793 87805])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87822 87826]))                  
                :type "int")
                nil [87759 88768])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscan_sexps" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88942 88954])
                    ("" variable (:type ("Sscan_sexps" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88955 88967])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88984 88988]))                  
                :type "int")
                nil [88921 89499])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbackward_prefix_chars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89646 89669])
                    ("" variable (:type ("Sbackward_prefix_chars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89670 89693])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89717 89721]))                  
                :type "int")
                nil [89614 89909])
            ("in_2char_comment_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("lisp_parse_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [90810 90841])
                    ("prev_from_syntax" variable (:type "int") (reparse-symbol arg-sub-list) [90866 90887])
                    ("prev_from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90912 90932])
                    ("from_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90957 90977]))                  
                :type "bool")
                nil [90774 91720])
            ("scan_sexps_forward" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("lisp_parse_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [92141 92172])
                    ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92179 92194])
                    ("from_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92195 92215])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92216 92230])
                    ("targetdepth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92237 92259])
                    ("stopbefore" variable (:type "bool") (reparse-symbol arg-sub-list) [92260 92276])
                    ("commentstop" variable (:type "int") (reparse-symbol arg-sub-list) [92283 92299]))                  
                :type "void")
                nil [92109 101093])
            ("internalize_parse_state" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("external" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101220 101241])
                    ("state" variable
                       (:pointer 1
                        :type ("lisp_parse_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [101242 101273]))                  
                :type "void")
                nil [101183 103244])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fparse_partial_sexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103275 103295])
                    ("" variable (:type ("Sparse_partial_sexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103296 103316])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103333 103337]))                  
                :type "int")
                nil [103246 105398])
            ("init_syntax_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [107192 107197]))                  
                :type "void")
                nil [107169 110290])
            ("syms_of_syntax" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [110313 110318]))                  
                :type "void")
                nil [110292 114230]))          
      :file "syntax.c"
      :pointmax 114231
      :fsize 114230
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax '((thing 31501 . 31517) (thing 31553 . 31554) (thing 31556 . 31557) (thing 31559 . 31560) (thing 31572 . 31573) (thing 31695 . 31816) (thing 31993 . 32007) (thing 32039 . 32040) (thing 32042 . 32043) (thing 32045 . 32046) (thing 32058 . 32059) (thing 32159 . 32208) (thing 32217 . 32240) (thing 32293 . 32294) (thing 32296 . 32297) (thing 32299 . 32300) (thing 32312 . 32313) (thing 32403 . 32439) (thing 32448 . 32467) (thing 32509 . 32510) (thing 32512 . 32513) (thing 32515 . 32516) (thing 32528 . 32529) (thing 32676 . 33303) (thing 33312 . 33330) (thing 33370 . 33371) (thing 33373 . 33374) (thing 33376 . 33377) (thing 33389 . 33390) (thing 33501 . 33769) (thing 35442 . 35455) (thing 35485 . 35486) (thing 35488 . 35489) (thing 35491 . 35492) (thing 35504 . 35505) (thing 36024 . 36200) (thing 36209 . 36225) (thing 36261 . 36262) (thing 36264 . 36265) (thing 36267 . 36268) (thing 36280 . 36281) (thing 36378 . 36636) (thing 36645 . 36663) (thing 36703 . 36704) (thing 36706 . 36707) (thing 36709 . 36710) (thing 36722 . 36723) (thing 37065 . 38150) (thing 38285 . 38306) (thing 38352 . 38353) (thing 38355 . 38356) (thing 38360 . 38414) (thing 38426 . 38427) (thing 40617 . 41236) (thing 41306 . 41338) (thing 41413 . 41414) (thing 41416 . 41417) (thing 41419 . 41420) (thing 41432 . 41433) (thing 41538 . 45168) (thing 48223 . 48237) (thing 48269 . 48270) (thing 48272 . 48273) (thing 48275 . 48279) (thing 48291 . 48292) (thing 49043 . 49497) (thing 49507 . 49527) (thing 49571 . 49572) (thing 49574 . 49575) (thing 49577 . 49578) (thing 49590 . 49591) (thing 50155 . 50199) (thing 50208 . 50229) (thing 50275 . 50276) (thing 50278 . 50279) (thing 50281 . 50282) (thing 50294 . 50295) (thing 50511 . 50555) (thing 50564 . 50585) (thing 50631 . 50632) (thing 50634 . 50635) (thing 50637 . 50638) (thing 50650 . 50651) (thing 51019 . 51063) (thing 51072 . 51094) (thing 51142 . 51143) (thing 51145 . 51146) (thing 51148 . 51149) (thing 51161 . 51162) (thing 51579 . 51623) (thing 70826 . 70843) (thing 70881 . 70882) (thing 70884 . 70885) (thing 70887 . 70888) (thing 70900 . 70901) (thing 71236 . 76700) (thing 87766 . 87778) (thing 87806 . 87807) (thing 87809 . 87810) (thing 87812 . 87813) (thing 87825 . 87826) (thing 88769 . 88919) (thing 88928 . 88940) (thing 88968 . 88969) (thing 88971 . 88972) (thing 88974 . 88975) (thing 88987 . 88988) (thing 89500 . 89612) (thing 89621 . 89644) (thing 89701 . 89702) (thing 89704 . 89705) (thing 89707 . 89708) (thing 89720 . 89721) (thing 89910 . 90619) (thing 103253 . 103273) (thing 103317 . 103318) (thing 103320 . 103321) (thing 103323 . 103324) (thing 103336 . 103337) (thing 105399 . 107166))
      :lexical-table 
        '(("SYNTAX_WITH_FLAGS" (spp-arg-list ("c") 1166 . 1169) . ((symbol "syntax_property_with_flags" 1170 . 1196) (semantic-list "(c, 1)" 1197 . 1203)))
          ("SYNTAX_ENTRY" (spp-arg-list ("c") 1108 . 1111) . ((symbol "syntax_property_entry" 1112 . 1133) (semantic-list "(c, 1)" 1134 . 1140)))
          ("SYNTAX" (spp-arg-list ("c") 1061 . 1064) . ((symbol "syntax_property" 1065 . 1080) (semantic-list "(c, 1)" 1081 . 1087)))
          )
)
    (semanticdb-table "semanticdb-table-1afaf40"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CHARACTER_H" variable (:constant-flag t) nil [1020 1037])
            ("verify.h" include (:system-flag t) nil [1039 1058])
            ("lisp.h" include nil nil [1059 1076])
            ("MAX_CHAR" variable (:constant-flag t) nil [1679 1687])
            ("MAX_UNICODE_CHAR" variable (:constant-flag t) nil [1746 1762])
            ("MAX_1_BYTE_CHAR" variable (:constant-flag t) nil [1820 1835])
            ("MAX_2_BYTE_CHAR" variable (:constant-flag t) nil [1849 1864])
            ("MAX_3_BYTE_CHAR" variable (:constant-flag t) nil [1879 1894])
            ("MAX_4_BYTE_CHAR" variable (:constant-flag t) nil [1910 1925])
            ("MAX_5_BYTE_CHAR" variable (:constant-flag t) nil [1943 1958])
            ("MIN_MULTIBYTE_LEADING_CODE" variable (:constant-flag t) nil [2030 2056])
            ("MAX_MULTIBYTE_LEADING_CODE" variable (:constant-flag t) nil [2190 2216])
            ("" type
               (:members 
                  ( ("NO_BREAK_SPACE" variable
                       (:constant-flag t
                        :default-value (2282 2288)
                        :type "int")
                        (reparse-symbol enumsubparts) [2265 2288])
                    ("SOFT_HYPHEN" variable
                       (:constant-flag t
                        :default-value (2306 2312)
                        :type "int")
                        (reparse-symbol enumsubparts) [2292 2312])
                    ("ZERO_WIDTH_NON_JOINER" variable
                       (:constant-flag t
                        :default-value (2340 2346)
                        :type "int")
                        (reparse-symbol enumsubparts) [2316 2346])
                    ("ZERO_WIDTH_JOINER" variable
                       (:constant-flag t
                        :default-value (2370 2376)
                        :type "int")
                        (reparse-symbol enumsubparts) [2350 2376])
                    ("HYPHEN" variable
                       (:constant-flag t
                        :default-value (2389 2395)
                        :type "int")
                        (reparse-symbol enumsubparts) [2380 2395])
                    ("NON_BREAKING_HYPHEN" variable
                       (:constant-flag t
                        :default-value (2421 2427)
                        :type "int")
                        (reparse-symbol enumsubparts) [2399 2427])
                    ("LEFT_SINGLE_QUOTATION_MARK" variable
                       (:constant-flag t
                        :default-value (2460 2466)
                        :type "int")
                        (reparse-symbol enumsubparts) [2431 2466])
                    ("RIGHT_SINGLE_QUOTATION_MARK" variable
                       (:constant-flag t
                        :default-value (2500 2506)
                        :type "int")
                        (reparse-symbol enumsubparts) [2470 2506])
                    ("PARAGRAPH_SEPARATOR" variable
                       (:constant-flag t
                        :default-value (2532 2538)
                        :type "int")
                        (reparse-symbol enumsubparts) [2510 2538])
                    ("LEFT_POINTING_ANGLE_BRACKET" variable
                       (:constant-flag t
                        :default-value (2572 2578)
                        :type "int")
                        (reparse-symbol enumsubparts) [2542 2578])
                    ("RIGHT_POINTING_ANGLE_BRACKET" variable
                       (:constant-flag t
                        :default-value (2613 2619)
                        :type "int")
                        (reparse-symbol enumsubparts) [2582 2619])
                    ("LEFT_ANGLE_BRACKET" variable
                       (:constant-flag t
                        :default-value (2644 2650)
                        :type "int")
                        (reparse-symbol enumsubparts) [2623 2650])
                    ("RIGHT_ANGLE_BRACKET" variable
                       (:constant-flag t
                        :default-value (2676 2682)
                        :type "int")
                        (reparse-symbol enumsubparts) [2654 2682])
                    ("OBJECT_REPLACEMENT_CHARACTER" variable
                       (:constant-flag t
                        :default-value (2717 2723)
                        :type "int")
                        (reparse-symbol enumsubparts) [2686 2723]))                  
                :type "enum")
                nil [2256 2727])
            ("uLSQM" variable (:constant-flag t) nil [2878 2883])
            ("uRSQM" variable (:constant-flag t) nil [2947 2952])
            ("CHAR_BYTE8_P" variable (:constant-flag t) nil [3095 3107])
            ("BYTE8_TO_CHAR" variable (:constant-flag t) nil [3202 3215])
            ("UNIBYTE_TO_CHAR" variable (:constant-flag t) nil [3251 3266])
            ("CHAR_TO_BYTE8" variable (:constant-flag t) nil [3390 3403])
            ("CHAR_TO_BYTE_SAFE" variable (:constant-flag t) nil [3559 3576])
            ("CHAR_BYTE8_HEAD_P" variable (:constant-flag t) nil [3780 3797])
            ("MAKE_CHAR_UNIBYTE" variable (:constant-flag t) nil [3890 3907])
            ("MAKE_CHAR_MULTIBYTE" variable (:constant-flag t) nil [4077 4096])
            ("MAX_MULTIBYTE_LENGTH" variable (:constant-flag t) nil [4232 4252])
            ("CHARACTERP" variable (:constant-flag t) nil [4301 4311])
            ("CHAR_VALID_P" variable (:constant-flag t) nil [4416 4428])
            ("CHECK_CHARACTER" variable (:constant-flag t) nil [4525 4540])
            ("CHECK_CHARACTER_CAR" variable (:constant-flag t) nil [4601 4620])
            ("CHECK_CHARACTER_CDR" variable (:constant-flag t) nil [4731 4750])
            ("SINGLE_BYTE_CHAR_P" variable (:constant-flag t) nil [4922 4940])
            ("CHAR_PRINTABLE_P" variable (:constant-flag t) nil [5033 5049])
            ("CHAR_BYTES" variable (:constant-flag t) nil [5210 5220])
            ("CHAR_LEADING_CODE" variable (:constant-flag t) nil [5476 5493])
            ("CHAR_STRING" variable (:constant-flag t) nil [5967 5978])
            ("BYTE8_STRING" variable (:constant-flag t) nil [6661 6673])
            ("CHAR_STRING_ADVANCE" variable (:constant-flag t) nil [6975 6994])
            ("LEADING_CODE_P" variable (:constant-flag t) nil [7578 7592])
            ("TRAILING_CODE_P" variable (:constant-flag t) nil [7726 7741])
            ("CHAR_HEAD_P" variable (:constant-flag t) nil [7921 7932])
            ("BYTES_BY_CHAR_HEAD" variable (:constant-flag t) nil [8181 8199])
            ("MULTIBYTE_LENGTH" variable (:constant-flag t) nil [8563 8579])
            ("MULTIBYTE_LENGTH_NO_CHECK" variable (:constant-flag t) nil [9209 9234])
            ("NEXT_CHAR_BOUNDARY" variable (:constant-flag t) nil [9784 9802])
            ("PREV_CHAR_BOUNDARY" variable (:constant-flag t) nil [10117 10135])
            ("STRING_CHAR" variable (:constant-flag t) nil [10532 10543])
            ("STRING_CHAR_AND_LENGTH" variable (:constant-flag t) nil [11020 11042])
            ("STRING_CHAR_ADVANCE" variable (:constant-flag t) nil [11605 11624])
            ("FETCH_STRING_CHAR_ADVANCE" variable (:constant-flag t) nil [12348 12373])
            ("FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE" variable (:constant-flag t) nil [13010 13048])
            ("FETCH_STRING_CHAR_ADVANCE_NO_CHECK" variable (:constant-flag t) nil [13803 13837])
            ("FETCH_CHAR_ADVANCE" variable (:constant-flag t) nil [14310 14328])
            ("FETCH_CHAR_ADVANCE_NO_CHECK" variable (:constant-flag t) nil [14895 14922])
            ("INC_POS" variable (:constant-flag t) nil [15360 15367])
            ("DEC_POS" variable (:constant-flag t) nil [15665 15672])
            ("INC_BOTH" variable (:constant-flag t) nil [16113 16121])
            ("DEC_BOTH" variable (:constant-flag t) nil [16453 16461])
            ("BUF_INC_POS" variable (:constant-flag t) nil [16972 16983])
            ("BUF_DEC_POS" variable (:constant-flag t) nil [17301 17312])
            ("SANE_TAB_WIDTH" variable (:constant-flag t) nil [17803 17817])
            ("sanitize_tab_width" function
               (:arguments 
                  ( ("width" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17911 17927]))                  
                :type "int")
                nil [17887 17980])
            ("ASCII_CHAR_WIDTH" variable (:constant-flag t) nil [18152 18168])
            ("sanitize_char_width" function
               (:arguments 
                  ( ("width" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18549 18565]))                  
                :type "int")
                nil [18524 18622])
            ("CHARACTER_WIDTH" variable (:constant-flag t) nil [18906 18921])
            ("CHAR_VARIATION_SELECTOR_P" variable (:constant-flag t) nil [19179 19204])
            ("char_surrogate_p" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [19428 19434]))                  
                :type "bool")
                nil [19405 19475])
            ("unicode_category_t" type
               (:typedef ("" type
                     (:members 
                        ( ("UNICODE_CATEGORY_UNKNOWN" variable
                             (:constant-flag t
                              :default-value (19758 19759)
                              :type "int")
                              (reparse-symbol enumsubparts) [19731 19759])
                          ("UNICODE_CATEGORY_Lu" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19763 19783])
                          ("UNICODE_CATEGORY_Ll" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19786 19806])
                          ("UNICODE_CATEGORY_Lt" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19809 19829])
                          ("UNICODE_CATEGORY_Lm" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19832 19852])
                          ("UNICODE_CATEGORY_Lo" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19855 19875])
                          ("UNICODE_CATEGORY_Mn" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19878 19898])
                          ("UNICODE_CATEGORY_Mc" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19901 19921])
                          ("UNICODE_CATEGORY_Me" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19924 19944])
                          ("UNICODE_CATEGORY_Nd" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19947 19967])
                          ("UNICODE_CATEGORY_Nl" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19970 19990])
                          ("UNICODE_CATEGORY_No" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [19993 20013])
                          ("UNICODE_CATEGORY_Pc" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20016 20036])
                          ("UNICODE_CATEGORY_Pd" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20039 20059])
                          ("UNICODE_CATEGORY_Ps" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20062 20082])
                          ("UNICODE_CATEGORY_Pe" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20085 20105])
                          ("UNICODE_CATEGORY_Pi" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20108 20128])
                          ("UNICODE_CATEGORY_Pf" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20131 20151])
                          ("UNICODE_CATEGORY_Po" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20154 20174])
                          ("UNICODE_CATEGORY_Sm" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20177 20197])
                          ("UNICODE_CATEGORY_Sc" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20200 20220])
                          ("UNICODE_CATEGORY_Sk" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20223 20243])
                          ("UNICODE_CATEGORY_So" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20246 20266])
                          ("UNICODE_CATEGORY_Zs" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20269 20289])
                          ("UNICODE_CATEGORY_Zl" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20292 20312])
                          ("UNICODE_CATEGORY_Zp" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20315 20335])
                          ("UNICODE_CATEGORY_Cc" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20338 20358])
                          ("UNICODE_CATEGORY_Cf" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20361 20381])
                          ("UNICODE_CATEGORY_Cs" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20384 20404])
                          ("UNICODE_CATEGORY_Co" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20407 20427])
                          ("UNICODE_CATEGORY_Cn" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [20430 20451]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [19714 20471])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [20529 20545])
            ("char_string" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [20570 20579])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20580 20596]))                  
                :type "int")
                nil [20546 20597])
            ("string_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20622 20644])
                    ("" variable
                       (:pointer 2
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20669 20692])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [20693 20699]))                  
                :type "int")
                nil [20598 20700])
            ("translate_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20729 20741])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [20742 20748]))                  
                :type "int")
                nil [20702 20749])
            ("count_size_as_multibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20792 20814])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20815 20825]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [20750 20826])
            ("str_as_multibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20862 20878])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20879 20889])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20890 20900])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20908 20920]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [20827 20921])
            ("str_to_multibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [20957 20973])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20974 20984])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20985 20995]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [20922 20996])
            ("str_as_unibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [21030 21046])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21047 21057]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [20997 21058])
            ("str_to_unibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [21092 21114])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [21115 21131])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21165 21175]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21059 21176])
            ("strwidth" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [21204 21217])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21218 21228]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21177 21229])
            ("c_string_width" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [21263 21285])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21286 21296])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [21297 21301])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21307 21319])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21320 21332]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21230 21333])
            ("lisp_string_width" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21370 21382])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21383 21393])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21402 21414])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21415 21427]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [21334 21428])
            ("Vchar_unify_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21430 21467])
            ("string_escape_byte8" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21508 21520]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [21468 21521])
            ("alphabeticp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [21548 21552]))                  
                :type "bool")
                nil [21523 21553])
            ("alphanumericp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [21581 21585]))                  
                :type "bool")
                nil [21554 21586])
            ("graphicp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [21609 21613]))                  
                :type "bool")
                nil [21587 21614])
            ("printablep" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [21639 21643]))                  
                :type "bool")
                nil [21615 21644])
            ("blankp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [21665 21669]))                  
                :type "bool")
                nil [21645 21670])
            ("confusable_symbol_character_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("ch" variable (:type "int") (reparse-symbol arg-sub-list) [21715 21722]))                  
                :type "bool")
                nil [21672 21723])
            ("GET_TRANSLATION_TABLE" variable (:constant-flag t) nil [21784 21805])
            ("char_table_translate" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22054 22070])
                    ("ch" variable (:type "int") (reparse-symbol arg-sub-list) [22071 22078]))                  
                :type "int")
                nil [22028 22378])
            ("HEXDIGIT_CONST" variable (:constant-flag t) nil [22438 22452])
            ("HEXDIGIT_IS_CONST" variable (:constant-flag t) nil [22468 22485])
            ("hexdigit" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "signed char")
                nil [22561 22606])
            ("char_hexdigit" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [22749 22755]))                  
                :type "int")
                nil [22730 22813]))          
      :file "character.h"
      :pointmax 22865
      :fsize 22864
      :lastmodtime '(23443 29219 986541 894000)
      :unmatched-syntax '((symbol 22815 . 22832) (symbol 22723 . 22729) (symbol 22021 . 22027) (semantic-list 20517 . 20528) (symbol 20490 . 20516) (symbol 20480 . 20489) (EXTERN 20473 . 20479) (symbol 19398 . 19404) (symbol 18517 . 18523) (symbol 17880 . 17886) (symbol 1078 . 1097))
      :lexical-table 
        '(("DEC_BOTH" (spp-arg-list ("charpos" "bytepos") 16461 . 16479) . 
              ((DO "do" 16487 . 16489) (semantic-list "{								\\
      (charpos)--;						\\
      if (NILP (BVAR (current_buffer, enable_multibyte_characters)))	\\
	(bytepos)--;						\\
      else							\\
	DEC_POS ((bytepos));					\\
    }" 16503 . 16684) (WHILE "while" 16696 . 16701) (semantic-list "(false)" 16702 . 16709)))
          ("MAX_UNICODE_CHAR" . ((number "0x10FFFF" 1763 . 1771)))
          ("MAX_5_BYTE_CHAR" . ((number "0x3FFF7F" 1959 . 1967)))
          ("CHARACTERP" (spp-arg-list ("x") 4311 . 4314) . ((semantic-list "(FIXNATP (x) && XFIXNAT (x) <= MAX_CHAR)" 4315 . 4355)))
          ("SINGLE_BYTE_CHAR_P" (spp-arg-list ("c") 4940 . 4943) . ((symbol "UNSIGNED_CMP" 4944 . 4956) (semantic-list "(c, <, 0x100)" 4957 . 4970)))
          ("SANE_TAB_WIDTH" (spp-arg-list ("buf") 17817 . 17822) . ((symbol "sanitize_tab_width" 17827 . 17845) (semantic-list "(XFIXNAT (BVAR (buf, tab_width)))" 17846 . 17879)))
          ("MAX_1_BYTE_CHAR" . ((number "0x7F" 1836 . 1840)))
          ("MAX_MULTIBYTE_LENGTH" . ((number "5" 4253 . 4254)))
          ("CHAR_PRINTABLE_P" (spp-arg-list ("c") 5049 . 5052) . ((semantic-list "(((c) >= 32 && (c) < 127)	\\
   || ! NILP (CHAR_TABLE_REF (Vprintable_chars, (c))))" 5057 . 5139)))
          ("TRAILING_CODE_P" (spp-arg-list ("byte") 7741 . 7747) . ((semantic-list "(((byte) & 0xC0) == 0x80)" 7748 . 7773)))
          ("CHAR_HEAD_P" (spp-arg-list ("byte") 7932 . 7938) . ((semantic-list "(((byte) & 0xC0) != 0x80)" 7939 . 7964)))
          ("PREV_CHAR_BOUNDARY" (spp-arg-list ("p" "limit") 10135 . 10145) . 
              ((DO "do" 10154 . 10156) (semantic-list "{									\\
    if ((p) > (limit))							\\
      {									\\
	const unsigned char *chp = (p);					\\
	do {								\\
	  chp--;							\\
	} while (chp >= limit && ! CHAR_HEAD_P (*chp));			\\
	(p) = (BYTES_BY_CHAR_HEAD (*chp) == (p) - chp) ? chp : (p) - 1;	\\
      }									\\
  }" 10157 . 10431) (WHILE "while" 10432 . 10437) (semantic-list "(false)" 10438 . 10445)))
          ("ASCII_CHAR_WIDTH" (spp-arg-list ("c") 18168 . 18171) . ((semantic-list "(c < 0x20								\\
   ? (c == '\\t'								\\
      ? SANE_TAB_WIDTH (current_buffer)					\\
      : (c == '\\n' ? 0 : (NILP (BVAR (current_buffer, ctl_arrow)) ? 4 : 2)))	\\
   : (c < 0x7f								\\
      ? 1								\\
      : ((NILP (BVAR (current_buffer, ctl_arrow)) ? 4 : 2))))" 18181 . 18454)))
          ("MAX_MULTIBYTE_LEADING_CODE" . ((number "0xF8" 2217 . 2221)))
          ("UNIBYTE_TO_CHAR" (spp-arg-list ("byte") 3266 . 3272) . ((semantic-list "(ASCII_CHAR_P (byte) ? (byte) : BYTE8_TO_CHAR (byte))" 3277 . 3330)))
          ("CHAR_TO_BYTE_SAFE" (spp-arg-list ("c") 3576 . 3579) . ((semantic-list "(ASCII_CHAR_P (c) ? c : (CHAR_BYTE8_P (c) ? (c) - 0x3FFF00 : -1))" 3589 . 3654)))
          ("STRING_CHAR_ADVANCE" (spp-arg-list ("p") 11624 . 11627) . ((semantic-list "(!((p)[0] & 0x80)						\\
   ? *(p)++							\\
   : ! ((p)[0] & 0x20)						\\
   ? ((p) += 2,							\\
      ((((p)[-2] & 0x1F) << 6)					\\
       | ((p)[-1] & 0x3F)					\\
       | ((unsigned char) ((p)[-2]) < 0xC2 ? 0x3FFF80 : 0)))	\\
   : ! ((p)[0] & 0x10)						\\
   ? ((p) += 3,							\\
      ((((p)[-3] & 0x0F) << 12)					\\
       | (((p)[-2] & 0x3F) << 6)				\\
       | ((p)[-1] & 0x3F)))					\\
   : string_char ((p), &(p), NULL))" 11636 . 12066)))
          ("EMACS_CHARACTER_H")
          ("CHECK_CHARACTER_CDR" (spp-arg-list ("x") 4750 . 4753) . 
              ((DO "do" 4758 . 4760) (semantic-list "{					\\
    Lisp_Object tmp = XCDR (x);		\\
    CHECK_CHARACTER (tmp);		\\
  }" 4761 . 4837) (WHILE "while" 4838 . 4843) (semantic-list "(false)" 4844 . 4851)))
          ("CHAR_STRING_ADVANCE" (spp-arg-list ("c" "p") 6994 . 7000) . 
              ((DO "do" 7006 . 7008) (semantic-list "{						\\
    if ((c) <= MAX_1_BYTE_CHAR)			\\
      *(p)++ = (c);				\\
    else if ((c) <= MAX_2_BYTE_CHAR)		\\
      *(p)++ = (0xC0 | ((c) >> 6)),		\\
	*(p)++ = (0x80 | ((c) & 0x3F));		\\
    else if ((c) <= MAX_3_BYTE_CHAR)		\\
      *(p)++ = (0xE0 | ((c) >> 12)),		\\
	*(p)++ = (0x80 | (((c) >> 6) & 0x3F)),	\\
	*(p)++ = (0x80 | ((c) & 0x3F));		\\
    else					\\
      {						\\
	verify (sizeof (c) <= sizeof (unsigned));	\\
	(p) += char_string (c, p);		\\
      }						\\
  }" 7009 . 7476) (WHILE "while" 7477 . 7482) (semantic-list "(false)" 7483 . 7490)))
          ("FETCH_STRING_CHAR_ADVANCE_NO_CHECK" (spp-arg-list ("OUTPUT" "STRING" "CHARIDX" "BYTEIDX") 13837 . 13871) . 
              ((DO "do" 13876 . 13878) (semantic-list "{									     \\
      unsigned char *fetch_ptr = &SDATA (STRING)[BYTEIDX];		     \\
      int fetch_len;							     \\
									     \\
      OUTPUT = STRING_CHAR_AND_LENGTH (fetch_ptr, fetch_len);		     \\
      BYTEIDX += fetch_len;						     \\
      CHARIDX++;							     \\
    }" 13901 . 14180) (WHILE "while" 14198 . 14203) (semantic-list "(false)" 14204 . 14211)))
          ("FETCH_CHAR_ADVANCE_NO_CHECK" (spp-arg-list ("OUTPUT" "CHARIDX" "BYTEIDX") 14922 . 14948) . 
              ((DO "do" 14953 . 14955) (semantic-list "{								\\
      unsigned char *chp = BYTE_POS_ADDR (BYTEIDX);		\\
      int chlen;							\\
								\\
      OUTPUT = STRING_CHAR_AND_LENGTH (chp, chlen);		\\
      BYTEIDX += chlen;						\\
      CHARIDX++;						\\
    }" 14972 . 15188) (WHILE "while" 15200 . 15205) (semantic-list "(false)" 15206 . 15213)))
          ("MAX_2_BYTE_CHAR" . ((number "0x7FF" 1865 . 1870)))
          ("uRSQM" . ((string "\"\\xE2\\x80\\x99\"" 2953 . 2967)))
          ("CHAR_STRING" (spp-arg-list ("c" "p") 5978 . 5984) . ((semantic-list "(UNSIGNED_CMP (c, <=, MAX_1_BYTE_CHAR)	\\
   ? ((p)[0] = (c),				\\
      1)					\\
   : UNSIGNED_CMP (c, <=, MAX_2_BYTE_CHAR)	\\
   ? ((p)[0] = (0xC0 | ((c) >> 6)),		\\
      (p)[1] = (0x80 | ((c) & 0x3F)),		\\
      2)					\\
   : UNSIGNED_CMP (c, <=, MAX_3_BYTE_CHAR)	\\
   ? ((p)[0] = (0xE0 | ((c) >> 12)),		\\
      (p)[1] = (0x80 | (((c) >> 6) & 0x3F)),	\\
      (p)[2] = (0x80 | ((c) & 0x3F)),		\\
      3)					\\
   : verify_expr (sizeof (c) <= sizeof (unsigned), char_string (c, p)))" 5991 . 6471)))
          ("FETCH_STRING_CHAR_ADVANCE" (spp-arg-list ("OUTPUT" "STRING" "CHARIDX" "BYTEIDX") 12373 . 12407) . 
              ((DO "do" 12412 . 12414) (semantic-list "{									\\
      CHARIDX++;							\\
      if (STRING_MULTIBYTE (STRING))					\\
	{								\\
	  unsigned char *chp = &SDATA (STRING)[BYTEIDX];		\\
	  int chlen;							\\
									\\
	  OUTPUT = STRING_CHAR_AND_LENGTH (chp, chlen);			\\
	  BYTEIDX += chlen;						\\
	}								\\
      else								\\
	{								\\
	  OUTPUT = SREF (STRING, BYTEIDX);				\\
	  BYTEIDX++;							\\
	}								\\
    }" 12488 . 12871) (WHILE "while" 12884 . 12889) (semantic-list "(false)" 12890 . 12897)))
          ("INC_POS" (spp-arg-list ("pos_byte") 15367 . 15377) . 
              ((DO "do" 15385 . 15387) (semantic-list "{							\\
    unsigned char *chp = BYTE_POS_ADDR (pos_byte);	\\
    pos_byte += BYTES_BY_CHAR_HEAD (*chp);		\\
  }" 15388 . 15500) (WHILE "while" 15501 . 15506) (semantic-list "(false)" 15507 . 15514)))
          ("MIN_MULTIBYTE_LEADING_CODE" . ((number "0xC0" 2057 . 2061)))
          ("BYTE8_TO_CHAR" (spp-arg-list ("byte") 3215 . 3221) . ((semantic-list "((byte) + 0x3FFF00)" 3222 . 3241)))
          ("FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE" (spp-arg-list ("OUTPUT" "STRING" "CHARIDX" "BYTEIDX") 13048 . 13082) . 
              ((DO "do" 13087 . 13089) (semantic-list "{									      \\
      CHARIDX++;							      \\
      if (STRING_MULTIBYTE (STRING))					      \\
	{								      \\
	  unsigned char *chp = &SDATA (STRING)[BYTEIDX];		      \\
	  int chlen;							      \\
									      \\
	  OUTPUT = STRING_CHAR_AND_LENGTH (chp, chlen);			      \\
	  BYTEIDX += chlen;						      \\
	}								      \\
      else								      \\
	{								      \\
	  OUTPUT = SREF (STRING, BYTEIDX);				      \\
	  BYTEIDX++;							      \\
	  MAKE_CHAR_MULTIBYTE (OUTPUT);					      \\
	}								      \\
    }" 13169 . 13687) (WHILE "while" 13706 . 13711) (semantic-list "(false)" 13712 . 13719)))
          ("LEADING_CODE_P" (spp-arg-list ("byte") 7592 . 7598) . ((semantic-list "(((byte) & 0xC0) == 0xC0)" 7599 . 7624)))
          ("BUF_INC_POS" (spp-arg-list ("buf" "pos_byte") 16983 . 16998) . 
              ((DO "do" 17006 . 17008) (semantic-list "{								\\
    unsigned char *chp = BUF_BYTE_ADDRESS (buf, pos_byte);	\\
    pos_byte += BYTES_BY_CHAR_HEAD (*chp);			\\
  }" 17009 . 17131) (WHILE "while" 17132 . 17137) (semantic-list "(false)" 17138 . 17145)))
          ("HEXDIGIT_CONST" . ((CONST "const" 22453 . 22458)))
          ("MAX_3_BYTE_CHAR" . ((number "0xFFFF" 1895 . 1901)))
          ("CHAR_VALID_P" (spp-arg-list ("c") 4428 . 4431) . ((symbol "UNSIGNED_CMP" 4432 . 4444) (semantic-list "(c, <=, MAX_CHAR)" 4445 . 4462)))
          ("CHECK_CHARACTER" (spp-arg-list ("x") 4540 . 4543) . ((symbol "CHECK_TYPE" 4548 . 4558) (semantic-list "(CHARACTERP (x), Qcharacterp, x)" 4559 . 4591)))
          ("CHECK_CHARACTER_CAR" (spp-arg-list ("x") 4620 . 4623) . 
              ((DO "do" 4628 . 4630) (semantic-list "{					\\
    Lisp_Object tmp = XCAR (x);		\\
    CHECK_CHARACTER (tmp);		\\
  }" 4631 . 4707) (WHILE "while" 4708 . 4713) (semantic-list "(false)" 4714 . 4721)))
          ("CHAR_BYTES" (spp-arg-list ("c") 5220 . 5223) . ((semantic-list "( (c) <= MAX_1_BYTE_CHAR ? 1		\\
    : (c) <= MAX_2_BYTE_CHAR ? 2	\\
    : (c) <= MAX_3_BYTE_CHAR ? 3	\\
    : (c) <= MAX_4_BYTE_CHAR ? 4	\\
    : (c) <= MAX_5_BYTE_CHAR ? 5	\\
    : 2)" 5230 . 5410)))
          ("MULTIBYTE_LENGTH" (spp-arg-list ("p" "pend") 8579 . 8588) . ((semantic-list "(p >= pend ? 0						\\
   : !((p)[0] & 0x80) ? 1					\\
   : ((p + 1 >= pend) || (((p)[1] & 0xC0) != 0x80)) ? 0		\\
   : ((p)[0] & 0xE0) == 0xC0 ? 2				\\
   : ((p + 2 >= pend) || (((p)[2] & 0xC0) != 0x80)) ? 0		\\
   : ((p)[0] & 0xF0) == 0xE0 ? 3				\\
   : ((p + 3 >= pend) || (((p)[3] & 0xC0) != 0x80)) ? 0		\\
   : ((p)[0] & 0xF8) == 0xF0 ? 4				\\
   : ((p + 4 >= pend) || (((p)[4] & 0xC0) != 0x80)) ? 0		\\
   : (p)[0] == 0xF8 && ((p)[1] & 0xF0) == 0x80 ? 5		\\
   : 0)" 8596 . 9061)))
          ("NEXT_CHAR_BOUNDARY" (spp-arg-list ("p" "limit") 9802 . 9812) . 
              ((DO "do" 9817 . 9819) (semantic-list "{					\\
    if ((p) < (limit))			\\
      (p) += BYTES_BY_CHAR_HEAD (*(p));	\\
  }" 9820 . 9900) (WHILE "while" 9901 . 9906) (semantic-list "(false)" 9907 . 9914)))
          ("STRING_CHAR" (spp-arg-list ("p") 10543 . 10546) . ((semantic-list "(!((p)[0] & 0x80)						\\
   ? (p)[0]							\\
   : ! ((p)[0] & 0x20)						\\
   ? (((((p)[0] & 0x1F) << 6)					\\
       | ((p)[1] & 0x3F))					\\
      + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0))	\\
   : ! ((p)[0] & 0x10)						\\
   ? ((((p)[0] & 0x0F) << 12)					\\
      | (((p)[1] & 0x3F) << 6)					\\
      | ((p)[2] & 0x3F))					\\
   : string_char ((p), NULL, NULL))" 10556 . 10928)))
          ("CHAR_LEADING_CODE" (spp-arg-list ("c") 5493 . 5496) . ((semantic-list "((c) <= MAX_1_BYTE_CHAR ? c				\\
   : (c) <= MAX_2_BYTE_CHAR ? (0xC0 | ((c) >> 6))	\\
   : (c) <= MAX_3_BYTE_CHAR ? (0xE0 | ((c) >> 12))	\\
   : (c) <= MAX_4_BYTE_CHAR ? (0xF0 | ((c) >> 18))	\\
   : (c) <= MAX_5_BYTE_CHAR ? 0xF8			\\
   : (0xC0 | (((c) >> 6) & 0x01)))" 5504 . 5768)))
          ("GET_TRANSLATION_TABLE" (spp-arg-list ("id") 21805 . 21809) . ((semantic-list "(XCDR (XVECTOR (Vtranslation_table_vector)->contents[(id)]))" 21814 . 21874)))
          ("CHAR_TO_BYTE8" (spp-arg-list ("c") 3403 . 3406) . ((semantic-list "(CHAR_BYTE8_P (c) ? (c) - 0x3FFF00 : (c & 0xFF))" 3407 . 3455)))
          ("BYTES_BY_CHAR_HEAD" (spp-arg-list ("byte") 8199 . 8205) . ((semantic-list "(!((byte) & 0x80) ? 1			\\
   : !((byte) & 0x20) ? 2		\\
   : !((byte) & 0x10) ? 3		\\
   : !((byte) & 0x08) ? 4		\\
   : 5)" 8210 . 8330)))
          ("MULTIBYTE_LENGTH_NO_CHECK" (spp-arg-list ("p") 9234 . 9237) . ((semantic-list "(!((p)[0] & 0x80) ? 1					\\
   : ((p)[1] & 0xC0) != 0x80 ? 0			\\
   : ((p)[0] & 0xE0) == 0xC0 ? 2			\\
   : ((p)[2] & 0xC0) != 0x80 ? 0			\\
   : ((p)[0] & 0xF0) == 0xE0 ? 3			\\
   : ((p)[3] & 0xC0) != 0x80 ? 0			\\
   : ((p)[0] & 0xF8) == 0xF0 ? 4			\\
   : ((p)[4] & 0xC0) != 0x80 ? 0			\\
   : (p)[0] == 0xF8 && ((p)[1] & 0xF0) == 0x80 ? 5	\\
   : 0)" 9244 . 9591)))
          ("DEC_POS" (spp-arg-list ("pos_byte") 15672 . 15682) . 
              ((DO "do" 15689 . 15691) (semantic-list "{						\\
    unsigned char *chp;				\\
    						\\
    pos_byte--;					\\
    if (pos_byte < GPT_BYTE)			\\
      chp = BEG_ADDR + pos_byte - BEG_BYTE;	\\
    else					\\
      chp = BEG_ADDR + GAP_SIZE + pos_byte - BEG_BYTE; \\
    while (!CHAR_HEAD_P (*chp))			\\
      {						\\
	chp--;					\\
	pos_byte--;				\\
      }						\\
  }" 15692 . 16016) (WHILE "while" 16017 . 16022) (semantic-list "(false)" 16023 . 16030)))
          ("CHARACTER_WIDTH" (spp-arg-list ("c") 18921 . 18924) . ((semantic-list "(ASCII_CHAR_P (c)		\\
   ? ASCII_CHAR_WIDTH (c)	\\
   : sanitize_char_width (XFIXNUM (CHAR_TABLE_REF (Vchar_width_table, c))))" 18929 . 19053)))
          ("MAX_4_BYTE_CHAR" . ((number "0x1FFFFF" 1926 . 1934)))
          ("BYTE8_STRING" (spp-arg-list ("b" "p") 6673 . 6679) . ((semantic-list "((p)[0] = (0xC0 | (((b) >> 6) & 0x01)),	\\
   (p)[1] = (0x80 | ((b) & 0x3F)),		\\
   2)" 6686 . 6771)))
          ("STRING_CHAR_AND_LENGTH" (spp-arg-list ("p" "actual_len") 11042 . 11057) . ((semantic-list "(!((p)[0] & 0x80)						\\
   ? ((actual_len) = 1, (p)[0])					\\
   : ! ((p)[0] & 0x20)						\\
   ? ((actual_len) = 2,						\\
      (((((p)[0] & 0x1F) << 6)					\\
	| ((p)[1] & 0x3F))					\\
       + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0)))	\\
   : ! ((p)[0] & 0x10)						\\
   ? ((actual_len) = 3,						\\
      ((((p)[0] & 0x0F) << 12)					\\
       | (((p)[1] & 0x3F) << 6)					\\
       | ((p)[2] & 0x3F)))					\\
   : string_char ((p), NULL, &actual_len))" 11064 . 11524)))
          ("FETCH_CHAR_ADVANCE" (spp-arg-list ("OUTPUT" "CHARIDX" "BYTEIDX") 14328 . 14354) . 
              ((DO "do" 14360 . 14362) (semantic-list "{								\\
      CHARIDX++;						\\
      if (!NILP (BVAR (current_buffer, enable_multibyte_characters)))	\\
	{							\\
	  unsigned char *chp = BYTE_POS_ADDR (BYTEIDX);		\\
	  int chlen;						\\
								\\
	  OUTPUT = STRING_CHAR_AND_LENGTH (chp, chlen);		\\
	  BYTEIDX += chlen;					\\
	}							\\
      else							\\
	{							\\
	  OUTPUT = *(BYTE_POS_ADDR (BYTEIDX));			\\
	  BYTEIDX++;						\\
	}							\\
    }" 14379 . 14781) (WHILE "while" 14793 . 14798) (semantic-list "(false)" 14799 . 14806)))
          ("INC_BOTH" (spp-arg-list ("charpos" "bytepos") 16121 . 16139) . 
              ((DO "do" 16147 . 16149) (semantic-list "{								\\
      (charpos)++;						\\
      if (NILP (BVAR (current_buffer, enable_multibyte_characters)))	\\
	(bytepos)++;						\\
      else							\\
	INC_POS ((bytepos));					\\
    }" 16163 . 16344) (WHILE "while" 16356 . 16361) (semantic-list "(false)" 16362 . 16369)))
          ("HEXDIGIT_IS_CONST" . ((symbol "true" 22486 . 22490)))
          ("MAX_CHAR" . ((number "0x3FFFFF" 1689 . 1697)))
          ("uLSQM" . ((string "\"\\xE2\\x80\\x98\"" 2884 . 2898)))
          ("CHAR_BYTE8_P" (spp-arg-list ("c") 3107 . 3110) . ((semantic-list "((c) > MAX_5_BYTE_CHAR)" 3111 . 3134)))
          ("CHAR_BYTE8_HEAD_P" (spp-arg-list ("byte") 3797 . 3803) . ((semantic-list "((byte) == 0xC0 || (byte) == 0xC1)" 3804 . 3838)))
          ("MAKE_CHAR_UNIBYTE" (spp-arg-list ("c") 3907 . 3910) . 
              ((DO "do" 3915 . 3917) (semantic-list "{				\\
    if (! ASCII_CHAR_P (c))	\\
      c = CHAR_TO_BYTE8 (c);	\\
  }" 3918 . 3989) (WHILE "while" 3990 . 3995) (semantic-list "(false)" 3996 . 4003)))
          ("MAKE_CHAR_MULTIBYTE" (spp-arg-list ("c") 4096 . 4099) . ((semantic-list "(eassert ((c) >= 0 && (c) < 256), (c) = UNIBYTE_TO_CHAR (c))" 4104 . 4164)))
          ("BUF_DEC_POS" (spp-arg-list ("buf" "pos_byte") 17312 . 17327) . 
              ((DO "do" 17336 . 17338) (semantic-list "{									\\
    unsigned char *chp;							\\
    pos_byte--;								\\
    if (pos_byte < BUF_GPT_BYTE (buf))					\\
      chp = BUF_BEG_ADDR (buf) + pos_byte - BEG_BYTE;			\\
    else								\\
      chp = BUF_BEG_ADDR (buf) + BUF_GAP_SIZE (buf) + pos_byte - BEG_BYTE;\\
    while (!CHAR_HEAD_P (*chp))						\\
      {									\\
	chp--;								\\
	pos_byte--;							\\
      }									\\
  }" 17339 . 17721) (WHILE "while" 17722 . 17727) (semantic-list "(false)" 17728 . 17735)))
          ("CHAR_VARIATION_SELECTOR_P" (spp-arg-list ("c") 19204 . 19207) . ((semantic-list "((c) < 0xFE00 ? 0				\\
   : (c) <= 0xFE0F ? (c) - 0xFE00 + 1		\\
   : (c) < 0xE0100 ? 0				\\
   : (c) <= 0xE01EF ? (c) - 0xE0100 + 17	\\
   : 0)" 19213 . 19355)))
          )
)
    (semanticdb-table "semanticdb-table-1afaf60"
      :major-mode c-mode
      :tags 
        '( ("EMACS_SYNTAX_H" variable (:constant-flag t) nil [818 832])
            ("buffer.h" include nil nil [834 853])
            ("lisp.h" include nil nil [854 871])
            ("update_syntax_table" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [927 937])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [938 948])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [949 954])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [955 967]))                  
                :type "void")
                nil [894 968])
            ("update_syntax_table_forward" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1010 1020])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1021 1026])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1027 1039]))                  
                :type "void")
                nil [969 1040])
            ("Vstandard_syntax_table" variable (:constant-flag t) nil [1152 1174])
            ("syntaxcode" type
               (:members 
                  ( ("Swhitespace" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1466 1478])
                    ("Spunct" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1516 1523])
                    ("Sword" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1569 1575])
                    ("Ssymbol" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1610 1618])
                    ("Sopen" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1674 1680])
                    ("Sclose" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1718 1725])
                    ("Squote" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1765 1772])
                    ("Sstring" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1819 1827])
                    ("Smath" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1883 1889])
                    ("Sescape" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1932 1940])
                    ("Scharquote" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1997 2008])
                    ("Scomment" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2072 2081])
                    ("Sendcomment" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2128 2140])
                    ("Sinherit" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2182 2191])
                    ("Scomment_fence" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2254 2269])
                    ("Sstring_fence" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2385 2399])
                    ("Smax" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2515 2573]))                  
                :type "enum")
                nil [1442 2574])
            ("gl_state_s" type
               (:members 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2599 2618])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2658 2674])
                    ("stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2701 2716])
                    ("use_global" variable (:type "bool") (reparse-symbol classsubparts) [2743 2759])
                    ("global_code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2816 2840])
                    ("current_syntax_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2880 2913])
                    ("old_prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2953 2974])
                    ("b_property" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3017 3038])
                    ("e_property" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3084 3105])
                    ("e_property_truncated" variable (:type "bool") (reparse-symbol classsubparts) [3163 3189])
                    ("forward_i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3275 3294])
                    ("backward_i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3340 3360])
                    ("offset" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3600 3617]))                  
                :type "struct")
                nil [2577 3620])
            ("gl_state" variable
               (:typemodifiers ("extern")
                :type ("gl_state_s" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [3622 3656])
            ("syntax_property_entry" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [3883 3889])
                    ("via_property" variable (:type "bool") (reparse-symbol arg-sub-list) [3890 3908]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3848 4117])
            ("SYNTAX_ENTRY" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4151 4157]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4125 4204])
            ("syntax_property_with_flags" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4340 4346])
                    ("via_property" variable (:type "bool") (reparse-symbol arg-sub-list) [4347 4365]))                  
                :type "int")
                nil [4308 4489])
            ("SYNTAX_WITH_FLAGS" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4520 4526]))                  
                :type "int")
                nil [4497 4578])
            ("syntax_property" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4620 4626])
                    ("via_property" variable (:type "bool") (reparse-symbol arg-sub-list) [4627 4645]))                  
                :type ("syntaxcode" type (:type "enum") nil nil))
                nil [4587 4711])
            ("SYNTAX" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4743 4749]))                  
                :type ("syntaxcode" type (:type "enum") nil nil))
                nil [4719 4790])
            ("syntax_prefix_flag_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4897 4903]))                  
                :type "bool")
                nil [4863 4904])
            ("syntax_spec_code" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "unsigned char")
                nil [5094 5144])
            ("syntax_code_spec" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [5213 5252])
            ("SYNTAX_TABLE_BYTE_TO_CHAR" function
               (:arguments 
                  ( ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5584 5602]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5547 6049])
            ("UPDATE_SYNTAX_TABLE_FORWARD" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6217 6235]))                  
                :type "void")
                nil [6183 6451])
            ("UPDATE_SYNTAX_TABLE_BACKWARD" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6619 6637]))                  
                :type "void")
                nil [6584 6791])
            ("UPDATE_SYNTAX_TABLE" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6870 6888]))                  
                :type "void")
                nil [6844 6975])
            ("SETUP_BUFFER_SYNTAX_TABLE" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7063 7068]))                  
                :type "void")
                nil [7031 7215])
            ("scan_words" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7246 7256])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7257 7267]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7217 7268])
            ("SETUP_SYNTAX_TABLE_FOR_OBJECT" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7312 7324])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7325 7335])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7336 7346]))                  
                :type "void")
                nil [7269 7347]))          
      :file "syntax.h"
      :pointmax 7396
      :fsize 7395
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax '((symbol 7349 . 7366) (symbol 7024 . 7030) (symbol 6837 . 6843) (symbol 6577 . 6583) (symbol 6176 . 6182) (symbol 5540 . 5546) (symbol 4712 . 4718) (symbol 4580 . 4586) (symbol 4490 . 4496) (symbol 4301 . 4307) (symbol 4118 . 4124) (symbol 3841 . 3847) (symbol 873 . 892))
      :lexical-table 
        '(("EMACS_SYNTAX_H")
          ("Vstandard_syntax_table" . ((symbol "BVAR" 1175 . 1179) (semantic-list "(&buffer_defaults, syntax_table)" 1180 . 1212)))
          )
)
    (semanticdb-table "semanticdb-table-1afaf80"
      :major-mode c-mode
      :tags 
        '( ("EMACS_INTERVALS_H" variable (:constant-flag t) nil [798 815])
            ("buffer.h" include nil nil [817 836])
            ("lisp.h" include nil nil [837 854])
            ("interval" type
               (:members 
                  ( ("total_length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1010 1033])
                    ("position" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1085 1104])
                    ("left" variable
                       (:pointer 1
                        :type ("interval" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [1336 1358])
                    ("right" variable
                       (:pointer 1
                        :type ("interval" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [1396 1419])
                    ("up" variable (:type ("" type
                         (:members 
                            ( ("interval" variable
                                 (:pointer 1
                                  :type ("interval" type
                                       (:prototype t
                                        :type "struct")
                                        nil nil))
                                  (reparse-symbol classsubparts) [1551 1577])
                              ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1582 1598]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [1537 1606])
                    ("up_obj" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1609 1628])
                    ("gcmarkbit" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1632 1654])
                    ("write_protect" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1827 1853])
                    ("visible" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1892 1912])
                    ("front_sticky" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1954 1979])
                    ("rear_sticky" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2069 2093])
                    ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2135 2153]))                  
                :type "struct")
                nil [923 2186])
            ("NULL_RIGHT_CHILD" variable (:constant-flag t) nil [2306 2322])
            ("NULL_LEFT_CHILD" variable (:constant-flag t) nil [2404 2419])
            ("NULL_PARENT" variable (:constant-flag t) nil [2496 2507])
            ("AM_LEFT_CHILD" variable (:constant-flag t) nil [2630 2643])
            ("AM_RIGHT_CHILD" variable (:constant-flag t) nil [2792 2806])
            ("LEAF_INTERVAL_P" variable (:constant-flag t) nil [2930 2945])
            ("ROOT_INTERVAL_P" variable (:constant-flag t) nil [3070 3085])
            ("ONLY_INTERVAL_P" variable (:constant-flag t) nil [3186 3201])
            ("BOTH_KIDS_P" variable (:constant-flag t) nil [3322 3333])
            ("TOTAL_LENGTH" variable (:constant-flag t) nil [3528 3540])
            ("LENGTH" variable (:constant-flag t) nil [3651 3657])
            ("INTERVAL_LAST_POS" variable (:constant-flag t) nil [3900 3917])
            ("LEFT_TOTAL_LENGTH" variable (:constant-flag t) nil [4019 4036])
            ("RIGHT_TOTAL_LENGTH" variable (:constant-flag t) nil [4152 4170])
            ("DEFAULT_INTERVAL_P" variable (:constant-flag t) nil [4397 4415])
            ("INTERVAL_HAS_PARENT" variable (:constant-flag t) nil [4574 4593])
            ("INTERVAL_HAS_OBJECT" variable (:constant-flag t) nil [4646 4665])
            ("INTERVAL_PARENT" variable (:constant-flag t) nil [4897 4912])
            ("GET_INTERVAL_OBJECT" variable (:constant-flag t) nil [4990 5009])
            ("set_interval_object" function
               (:arguments 
                  ( ("i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5179 5190])
                    ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5191 5207]))                  
                :type "void")
                nil [5153 5291])
            ("set_interval_parent" function
               (:arguments 
                  ( ("i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5326 5337])
                    ("parent" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5338 5354]))                  
                :type "void")
                nil [5300 5406])
            ("set_interval_plist" function
               (:arguments 
                  ( ("i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5440 5451])
                    ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5452 5470]))                  
                :type "void")
                nil [5415 5494])
            ("INTERVAL_PARENT_OR_NULL" variable (:constant-flag t) nil [5703 5726])
            ("RESET_INTERVAL" variable (:constant-flag t) nil [5861 5875])
            ("COPY_INTERVAL_CACHE" variable (:constant-flag t) nil [6298 6317])
            ("MERGE_INTERVAL_CACHE" variable (:constant-flag t) nil [6595 6615])
            ("INTERVAL_VISIBLE_P" variable (:constant-flag t) nil [6960 6978])
            ("INTERVAL_WRITABLE_P" variable (:constant-flag t) nil [7110 7129])
            ("TEXT_PROP_MEANS_INVISIBLE" variable (:constant-flag t) nil [8056 8081])
            ("make_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8308 8313]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8277 8314])
            ("create_root_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8387 8399]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8349 8400])
            ("copy_properties" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8430 8439])
                    ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8440 8449]))                  
                :type "void")
                nil [8401 8450])
            ("intervals_equal" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8480 8489])
                    ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8490 8499]))                  
                :type "bool")
                nil [8451 8500])
            ("traverse_intervals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8533 8542])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8543 8553])
                    ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8596 8605])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8606 8618]))                          
                        :type "void")
                        nil nil)
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8652 8664]))                  
                :type "void")
                nil [8501 8665])
            ("traverse_intervals_noorder" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8706 8715])
                    ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8731 8740])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [8741 8748]))                          
                        :type "void")
                        nil nil)
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8750 8757]))                  
                :type "void")
                nil [8666 8758])
            ("split_interval_right" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8797 8806])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8807 8817]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8759 8818])
            ("split_interval_left" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8856 8865])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8866 8876]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8819 8877])
            ("find_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8909 8918])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8919 8929]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8878 8930])
            ("next_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8962 8971]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8931 8972])
            ("previous_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9008 9017]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [8973 9018])
            ("merge_interval_left" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9056 9065]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [9019 9066])
            ("offset_intervals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9097 9113])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9114 9124])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9125 9135]))                  
                :type "void")
                nil [9067 9136])
            ("graft_intervals_into_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9178 9187])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9188 9198])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9199 9209])
                    ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9251 9267])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [9268 9273]))                  
                :type "void")
                nil [9137 9274])
            ("verify_interval_modification" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9317 9333])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9341 9351])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9352 9362]))                  
                :type "void")
                nil [9275 9363])
            ("balance_intervals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9399 9408]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [9364 9409])
            ("copy_intervals_to_string" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9448 9460])
                    ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9461 9477])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9523 9533])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9534 9544]))                  
                :type "void")
                nil [9410 9545])
            ("copy_intervals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9578 9587])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9588 9598])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9599 9609]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [9546 9610])
            ("compare_string_intervals" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9649 9661])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9662 9674]))                  
                :type "bool")
                nil [9611 9675])
            ("textget" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9704 9716])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9717 9729]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9676 9730])
            ("lookup_char_property" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9772 9784])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9785 9797])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [9798 9803]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9731 9804])
            ("move_if_not_intangible" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9841 9851]))                  
                :type "void")
                nil [9805 9852])
            ("get_property_and_range" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9889 9899])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9900 9912])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9913 9927])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9936 9948])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9949 9961])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9962 9974]))                  
                :type "bool")
                nil [9853 9975])
            ("get_local_map" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10010 10020])
                    ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [10021 10037])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10038 10050]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9976 10051])
            ("update_interval" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10085 10094])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10095 10105]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [10052 10106])
            ("set_intervals_multibyte" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [10144 10149]))                  
                :type "void")
                nil [10107 10150])
            ("validate_interval_range" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10192 10204])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10205 10219])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10261 10275])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [10276 10281]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [10151 10282])
            ("interval_of" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10312 10322])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10323 10335]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [10283 10336])
            ("invisible_prop" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10392 10404])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10405 10417]))                  
                :type "int")
                nil [10365 10418])
            ("copy_text_properties" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10491 10503])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10504 10516])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10558 10570])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10571 10583])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10625 10637])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10638 10650]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10450 10651])
            ("set_text_properties" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10692 10704])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10705 10717])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10758 10770])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10771 10783])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10824 10836]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10652 10837])
            ("set_text_properties_1" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10873 10885])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10886 10898])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10934 10946])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10947 10959])
                    ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10960 10969]))                  
                :type "void")
                nil [10838 10970])
            ("text_property_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11004 11016])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11017 11029])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11030 11042])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11075 11087]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10972 11088])
            ("add_text_properties_from_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11125 11137])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11138 11150])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11151 11163]))                  
                :type "void")
                nil [11089 11164])
            ("extend_property_ranges" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11201 11213])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11214 11226])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11227 11239]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11165 11240])
            ("get_char_property_and_overlay" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11284 11296])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11297 11309])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11353 11365])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11366 11380]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11241 11381])
            ("text_property_stickiness" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11419 11436])
                    ("pos" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11437 11453])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11491 11510]))                  
                :type "int")
                nil [11382 11511])
            ("syms_of_textprop" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11543 11548]))                  
                :type "void")
                nil [11513 11549]))          
      :file "intervals.h"
      :pointmax 11601
      :fsize 11600
      :lastmodtime '(23443 29220 26516 615000)
      :unmatched-syntax '((symbol 11551 . 11568) (symbol 5408 . 5414) (symbol 5293 . 5299) (symbol 5146 . 5152) (symbol 856 . 875))
      :lexical-table 
        '(("LEFT_TOTAL_LENGTH" (spp-arg-list ("i") 4036 . 4039) . ((semantic-list "((i)->left ? (i)->left->total_length : 0)" 4040 . 4081)))
          ("INTERVAL_PARENT_OR_NULL" (spp-arg-list ("i") 5726 . 5729) . ((semantic-list "(INTERVAL_HAS_PARENT (i) ? INTERVAL_PARENT (i) : 0)" 5735 . 5786)))
          ("NULL_RIGHT_CHILD" (spp-arg-list ("i") 2322 . 2325) . ((semantic-list "((i)->right == NULL)" 2326 . 2346)))
          ("INTERVAL_LAST_POS" (spp-arg-list ("i") 3917 . 3920) . ((semantic-list "((i)->position + LENGTH (i))" 3921 . 3949)))
          ("INTERVAL_PARENT" (spp-arg-list ("i") 4912 . 4915) . ((semantic-list "(eassert ((i) != 0 && ! (i)->up_obj), (i)->up.interval)" 4925 . 4980)))
          ("INTERVAL_HAS_OBJECT" (spp-arg-list ("i") 4665 . 4668) . ((semantic-list "((i)->up_obj)" 4669 . 4682)))
          ("RIGHT_TOTAL_LENGTH" (spp-arg-list ("i") 4170 . 4173) . ((semantic-list "((i)->right ? (i)->right->total_length : 0)" 4174 . 4217)))
          ("NULL_LEFT_CHILD" (spp-arg-list ("i") 2419 . 2422) . ((semantic-list "((i)->left == NULL)" 2423 . 2442)))
          ("TOTAL_LENGTH" (spp-arg-list ("i") 3540 . 3543) . ((semantic-list "((i) == NULL ? 0 : (i)->total_length)" 3544 . 3581)))
          ("TEXT_PROP_MEANS_INVISIBLE" (spp-arg-list ("prop") 8081 . 8087) . ((semantic-list "(EQ (BVAR (current_buffer, invisibility_spec), Qt)			\\
   ? !NILP (prop)							\\
   : invisible_prop (prop, BVAR (current_buffer, invisibility_spec)))" 8096 . 8246)))
          ("GET_INTERVAL_OBJECT" (spp-arg-list ("d" "s") 5009 . 5014) . ((semantic-list "(eassert ((s)->up_obj), (d) = (s)->up.obj)" 5015 . 5057)))
          ("RESET_INTERVAL" (spp-arg-list ("i") 5875 . 5878) . 
              ((DO "do" 5889 . 5891) (semantic-list "{					      \\
  (i)->total_length = (i)->position = 0;      \\
  (i)->left = (i)->right = NULL;	      \\
  set_interval_parent (i, NULL);	      \\
  (i)->write_protect = false;		      \\
  (i)->visible = false;			      \\
  (i)->front_sticky = (i)->rear_sticky = false;	\\
  set_interval_plist (i, Qnil);		      \\
 }" 5892 . 6202) (WHILE "while" 6203 . 6208) (semantic-list "(false)" 6209 . 6216)))
          ("AM_LEFT_CHILD" (spp-arg-list ("i") 2643 . 2646) . ((semantic-list "(! NULL_PARENT (i) && INTERVAL_PARENT (i)->left == (i))" 2655 . 2710)))
          ("AM_RIGHT_CHILD" (spp-arg-list ("i") 2806 . 2809) . ((semantic-list "(! NULL_PARENT (i) && INTERVAL_PARENT (i)->right == (i))" 2818 . 2874)))
          ("LEAF_INTERVAL_P" (spp-arg-list ("i") 2945 . 2948) . ((semantic-list "((i)->left == NULL && (i)->right == NULL)" 2949 . 2990)))
          ("INTERVAL_WRITABLE_P" (spp-arg-list ("i") 7129 . 7132) . ((semantic-list "(NILP (textget ((i)->plist, Qread_only))			\\
   || !NILP (textget ((i)->plist, Qinhibit_read_only))		\\
   || ((CONSP (Vinhibit_read_only)				\\
	? !NILP (Fmemq (textget ((i)->plist, Qread_only),	\\
			Vinhibit_read_only))			\\
	: !NILP (Vinhibit_read_only))))" 7141 . 7397)))
          ("EMACS_INTERVALS_H")
          ("LENGTH" (spp-arg-list ("i") 3657 . 3660) . ((semantic-list "((i)->total_length			\\
		   - TOTAL_LENGTH ((i)->right)		\\
		   - TOTAL_LENGTH ((i)->left))" 3661 . 3752)))
          ("ONLY_INTERVAL_P" (spp-arg-list ("i") 3201 . 3204) . ((semantic-list "(ROOT_INTERVAL_P (i) && LEAF_INTERVAL_P (i))" 3205 . 3249)))
          ("MERGE_INTERVAL_CACHE" (spp-arg-list ("from" "to") 6615 . 6624) . 
              ((DO "do" 6631 . 6633) (semantic-list "{								\\
  if ((from)->write_protect) (to)->write_protect = true;	\\
  if ((from)->visible) (to)->visible = true;			\\
  if ((from)->front_sticky) (to)->front_sticky = true;		\\
  if ((from)->rear_sticky) (to)->rear_sticky = true;		\\
 }" 6634 . 6869) (WHILE "while" 6870 . 6875) (semantic-list "(false)" 6876 . 6883)))
          ("ROOT_INTERVAL_P" (spp-arg-list ("i") 3085 . 3088) . ((symbol "NULL_PARENT" 3089 . 3100) (semantic-list "(i)" 3101 . 3104)))
          ("INTERVAL_HAS_PARENT" (spp-arg-list ("i") 4593 . 4596) . ((semantic-list "(! (i)->up_obj && (i)->up.interval != 0)" 4597 . 4637)))
          ("COPY_INTERVAL_CACHE" (spp-arg-list ("from" "to") 6317 . 6326) . 
              ((DO "do" 6331 . 6333) (semantic-list "{						\\
  (to)->write_protect = (from)->write_protect;	\\
  (to)->visible = (from)->visible;		\\
  (to)->front_sticky = (from)->front_sticky;	\\
  (to)->rear_sticky = (from)->rear_sticky;	\\
 }" 6334 . 6524) (WHILE "while" 6525 . 6530) (semantic-list "(false)" 6531 . 6538)))
          ("NULL_PARENT" (spp-arg-list ("i") 2507 . 2510) . ((semantic-list "((i)->up_obj || (i)->up.interval == 0)" 2511 . 2549)))
          ("BOTH_KIDS_P" (spp-arg-list ("i") 3333 . 3336) . ((semantic-list "((i)->left != NULL && (i)->right != NULL)" 3337 . 3378)))
          ("DEFAULT_INTERVAL_P" (spp-arg-list ("i") 4415 . 4418) . ((semantic-list "(!i || NILP ((i)->plist))" 4419 . 4444)))
          ("INTERVAL_VISIBLE_P" (spp-arg-list ("i") 6978 . 6981) . ((semantic-list "(i && NILP (textget ((i)->plist, Qinvisible)))" 6986 . 7032)))
          )
)
    (semanticdb-table "semanticdb-table-1afafa0"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CATEGORY_H" variable (:constant-flag t) nil [1109 1125])
            ("lisp.h" include nil nil [2353 2370])
            ("CATEGORYP" variable (:constant-flag t) nil [2401 2410])
            ("CHECK_CATEGORY" variable (:constant-flag t) nil [2454 2468])
            ("CATEGORY_SET_P" variable (:constant-flag t) nil [2527 2541])
            ("MAKE_CATEGORY_SET" variable (:constant-flag t) nil [2649 2666])
            ("CHECK_CATEGORY_SET" variable (:constant-flag t) nil [2722 2740])
            ("CATEGORY_SET" variable (:constant-flag t) nil [2884 2896])
            ("CATEGORY_MEMBER" function
               (:arguments 
                  ( ("category" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3077 3096])
                    ("category_set" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3097 3122]))                  
                :type "bool")
                nil [3055 3180])
            ("CHAR_HAS_CATEGORY" function
               (:arguments 
                  ( ("ch" variable (:type "int") (reparse-symbol arg-sub-list) [3273 3280])
                    ("category" variable (:type "int") (reparse-symbol arg-sub-list) [3281 3294]))                  
                :type "bool")
                nil [3249 3397])
            ("Vstandard_category_table" variable (:constant-flag t) nil [3511 3535])
            ("CATEGORY_DOCSTRING" variable (:constant-flag t) nil [3651 3669])
            ("SET_CATEGORY_DOCSTRING" variable (:constant-flag t) nil [3850 3872])
            ("CATEGORY_TABLE_VERSION" variable (:constant-flag t) nil [4081 4103])
            ("WORD_BOUNDARY_P" variable (:constant-flag t) nil [4394 4409])
            ("word_boundary_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [4545 4549])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [4550 4554]))                  
                :type "bool")
                nil [4516 4555]))          
      :file "category.h"
      :pointmax 4606
      :fsize 4605
      :lastmodtime '(23443 29219 983210 739000)
      :unmatched-syntax '((symbol 4557 . 4574) (symbol 3242 . 3248) (symbol 3048 . 3054) (symbol 2372 . 2391))
      :lexical-table 
        '(("MAKE_CATEGORY_SET" . ((semantic-list "(Fmake_bool_vector (make_fixnum (128), Qnil))" 2667 . 2712)))
          ("EMACS_CATEGORY_H")
          ("CHECK_CATEGORY" (spp-arg-list ("x") 2468 . 2471) . ((symbol "CHECK_TYPE" 2476 . 2486) (semantic-list "(CATEGORYP (x), Qcategoryp, x)" 2487 . 2517)))
          ("CHECK_CATEGORY_SET" (spp-arg-list ("x") 2740 . 2743) . ((symbol "CHECK_TYPE" 2748 . 2758) (semantic-list "(CATEGORY_SET_P (x), Qcategorysetp, x)" 2759 . 2797)))
          ("SET_CATEGORY_DOCSTRING" (spp-arg-list ("table" "category" "value") 3872 . 3896) . ((symbol "ASET" 3903 . 3907) (semantic-list "(Fchar_table_extra_slot (table, make_fixnum (0)), ((category) - ' '), value)" 3908 . 3984)))
          ("WORD_BOUNDARY_P" (spp-arg-list ("c1" "c2") 4409 . 4417) . ((semantic-list "(!(SINGLE_BYTE_CHAR_P (c1) && SINGLE_BYTE_CHAR_P (c2))	\\
   && word_boundary_p (c1, c2))" 4426 . 4514)))
          ("CATEGORYP" (spp-arg-list ("x") 2410 . 2413) . ((symbol "RANGED_FIXNUMP" 2414 . 2428) (semantic-list "(0x20, x, 0x7E)" 2429 . 2444)))
          ("CATEGORY_SET" (spp-arg-list ("c") 2896 . 2899) . ((symbol "char_category_set" 2900 . 2917) (semantic-list "(c)" 2918 . 2921)))
          ("Vstandard_category_table" . ((symbol "BVAR" 3536 . 3540) (semantic-list "(&buffer_defaults, category_table)" 3541 . 3575)))
          ("CATEGORY_DOCSTRING" (spp-arg-list ("table" "category") 3669 . 3686) . ((symbol "AREF" 3694 . 3698) (semantic-list "(Fchar_table_extra_slot (table, make_fixnum (0)), ((category) - ' '))" 3699 . 3768)))
          ("CATEGORY_TABLE_VERSION" . 
              ((semantic-list "(table)" 4104 . 4111) (symbol "Fchar_table_extra_slot" 4116 . 4138) (semantic-list "(table, make_fixnum (1))" 4139 . 4163)))
          ("CATEGORY_SET_P" (spp-arg-list ("x") 2541 . 2544) . ((semantic-list "(BOOL_VECTOR_P (x) && bool_vector_size (x) == 128)" 2549 . 2599)))
          )
)
    (semanticdb-table "semanticdb-table-1afafc0"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [768 787])
            ("limits.h" include (:system-flag t) nil [788 807])
            ("stdio.h" include (:system-flag t) nil [808 826])
            ("stdlib.h" include (:system-flag t) nil [827 846])
            ("lisp.h" include nil nil [847 864])
            ("blockinput.h" include nil nil [865 888])
            ("commands.h" include nil nil [889 910])
            ("keyboard.h" include nil nil [911 932])
            ("dispextern.h" include nil nil [933 956])
            ("buffer.h" include nil nil [957 976])
            ("CACHEABLE" variable (:constant-flag t) nil [1220 1229])
            ("Vautoload_queue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1606 1634])
            ("Vrun_hooks" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1771 1794])
            ("when_entered_debugger" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2708 2747])
            ("Vsignaling_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2880 2912])
            ("inhibit_lisp_code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3035 3065])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3183 3202])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3253 3272])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3326 3345])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3402 3421])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3462 3481])
            ("funcall_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3518 3530])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3531 3541])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3542 3556]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3483 3557])
            ("apply_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3591 3603])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3604 3616])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3617 3627]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3558 3628])
            ("lambda_arity" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3662 3674]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3629 3675])
            ("specpdl_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3712 3735]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3677 3803])
            ("specpdl_kind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3844 3867]))                  
                :type ("specbind_tag" type (:type "enum") nil nil))
                nil [3805 3933])
            ("specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3973 3996]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3935 4067])
            ("set_specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4104 4127])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4128 4144]))                  
                :type "void")
                nil [4069 4214])
            ("specpdl_where" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4250 4273]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4216 4339])
            ("specpdl_saved_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4381 4404]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4341 4477])
            ("specpdl_arg" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4511 4534]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4479 4605])
            ("backtrace_function" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4639 4662]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4607 4737])
            ("backtrace_nargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4773 4796]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4739 4868])
            ("backtrace_args" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4900 4923]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4870 4994])
            ("backtrace_debug_on_exit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5033 5056]))                  
                :type "bool")
                nil [4996 5136])
            ("set_backtrace_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5226 5249])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5250 5268])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5269 5285]))                  
                :type "void")
                nil [5194 5381])
            ("set_backtrace_debug_on_exit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5424 5447])
                    ("doe" variable (:type "bool") (reparse-symbol arg-sub-list) [5448 5457]))                  
                :type "void")
                nil [5383 5536])
            ("backtrace_p" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5604 5627]))                  
                :type "bool")
                nil [5586 5654])
            ("backtrace_thread_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5688 5716])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5717 5740]))                  
                :type "bool")
                nil [5656 5777])
            ("backtrace_top" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5814 5819]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5779 5954])
            ("backtrace_thread_top" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6005 6033]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5956 6193])
            ("backtrace_next" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [6231 6254]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [6195 6354])
            ("backtrace_thread_next" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tstate" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6406 6434])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [6435 6458]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [6356 6573])
            ("init_eval_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6596 6601]))                  
                :type "void")
                nil [6575 6954])
            ("init_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7023 7028]))                  
                :type "void")
                nil [7007 7778])
            ("restore_stack_limits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7869 7886]))                  
                :type "void")
                nil [7835 7981])
            ("grow_specpdl" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8009 8014]))                  
                :type "void")
                nil [7983 8015])
            ("call_debugger" function
               (:arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8100 8116]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8073 10561])
            ("do_debug_on_call" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10593 10610])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10611 10627]))                  
                :type "void")
                nil [10563 10744])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("For" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10950 10954])
                    ("" variable (:type ("Sor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10955 10959])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10963 10973])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10984 10988]))                  
                :type "int")
                nil [10937 11190])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11409 11414])
                    ("" variable (:type ("Sand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11415 11420])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11424 11434])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11445 11449]))                  
                :type "int")
                nil [11395 11656])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fif" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11871 11875])
                    ("" variable (:type ("Sif" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11876 11880])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11884 11894])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11905 11909]))                  
                :type "int")
                nil [11858 12220])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12396 12402])
                    ("" variable (:type ("Scond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12403 12409])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12413 12423])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12434 12438]))                  
                :type "int")
                nil [12381 12902])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprogn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13209 13216])
                    ("" variable (:type ("Sprogn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13217 13224])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13228 13238])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13249 13253]))                  
                :type "int")
                nil [13193 13364])
            ("prog_ignore" function
               (:arguments 
                  ( ("body" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13616 13633]))                  
                :type "void")
                nil [13598 13654])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprog1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13672 13679])
                    ("" variable (:type ("Sprog1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13680 13687])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13691 13701])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13712 13716]))                  
                :type "int")
                nil [13656 13934])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprog2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14043 14050])
                    ("" variable (:type ("Sprog2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14051 14058])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14062 14072])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14083 14087]))                  
                :type "int")
                nil [14027 14318])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14396 14402])
                    ("" variable (:type ("Ssetq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14403 14409])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14413 14423])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14434 14438]))                  
                :type "int")
                nil [14381 14919])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fquote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15739 15746])
                    ("" variable (:type ("Squote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15747 15754])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15758 15768])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15779 15783]))                  
                :type "int")
                nil [15723 16422])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16563 16573])
                    ("" variable (:type ("Sfunction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16574 16584])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16588 16598])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16609 16613]))                  
                :type "int")
                nil [16544 16817])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefvaralias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17839 17852])
                    ("" variable (:type ("Sdefvaralias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17853 17866])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17883 17887]))                  
                :type "int")
                nil [17817 18490])
            ("default_toplevel_binding" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20726 20745]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [20673 21285])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21320 21344])
                    ("" variable (:type ("Sdefault_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21345 21369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21386 21390]))                  
                :type "int")
                nil [21287 21506])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_default_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21790 21818])
                    ("" variable (:type ("Sset_default_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21826 21854])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21871 21875]))                  
                :type "int")
                nil [21753 22019])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefvar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22223 22231])
                    ("" variable (:type ("Sdefvar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22232 22240])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22244 22254])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22265 22269]))                  
                :type "int")
                nil [22206 23535])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefconst" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25205 25215])
                    ("" variable (:type ("Sdefconst" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25216 25226])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25230 25240])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25251 25255]))                  
                :type "int")
                nil [25186 26012])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_var_non_special" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26747 26769])
                    ("" variable (:type ("Smake_var_non_special" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26777 26799])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26816 26820]))                  
                :type "int")
                nil [26707 26873])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("FletX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26986 26992])
                    ("" variable (:type ("SletX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26993 26999])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27003 27013])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27024 27028]))                  
                :type "int")
                nil [26971 27395])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flet" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28760 28765])
                    ("" variable (:type ("Slet" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28766 28771])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28775 28785])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28796 28800]))                  
                :type "int")
                nil [28746 29156])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwhile" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30874 30881])
                    ("" variable (:type ("Swhile" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30882 30889])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30893 30903])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30914 30918]))                  
                :type "int")
                nil [30858 31112])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmacroexpand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31320 31333])
                    ("" variable (:type ("Smacroexpand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31334 31347])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31364 31368]))                  
                :type "int")
                nil [31298 31807])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcatch" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33212 33219])
                    ("" variable (:type ("Scatch" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33220 33227])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33231 33241])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33252 33256]))                  
                :type "int")
                nil [33196 33662])
            ("clobbered_eassert" variable (:constant-flag t) nil [33929 33946])
            ("internal_catch" function
               (:arguments 
                  ( ("tag" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34160 34176])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34200 34212]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34214 34230]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34132 34744])
            ("unwind_to_catch" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35520 35541])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35543 35561]))                  
                :type "void")
                nil [35481 36209])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthrow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36227 36234])
                    ("" variable (:type ("Sthrow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36235 36242])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36259 36263])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36363 36374])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36375 36384]))                  
                :type "int")
                nil [36211 36432])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Funwind_protect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36761 36777])
                    ("" variable (:type ("Sunwind_protect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36778 36794])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36798 36808])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36819 36823]))                  
                :type "int")
                nil [36736 37096])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcondition_case" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37303 37319])
                    ("" variable (:type ("Scondition_case" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37320 37336])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37340 37350])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37361 37365]))                  
                :type "int")
                nil [37278 38698])
            ("internal_lisp_condition_case" function
               (:arguments 
                  ( ("var" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39045 39061])
                    ("bodyform" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39062 39083])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39093 39114]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39003 41501])
            ("internal_condition_case" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [41971 41976]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41978 41999])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42025 42037]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41913 42427])
            ("internal_condition_case_1" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42566 42578]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42580 42596])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42603 42624])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42652 42664]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [42506 43057])
            ("internal_condition_case_2" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43212 43224])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43225 43237]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43245 43262])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43269 43286])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43293 43314])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43342 43354]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43152 43754])
            ("internal_condition_case_n" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43920 43930])
                            ("" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [43931 43945]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43953 43969])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [43976 43994])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44001 44022])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("err" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44050 44066])
                            ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44073 44089])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [44096 44114]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43860 44528])
            ("internal_catch_all_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [44596 44603]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("argument" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [44605 44620]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [44530 45056])
            ("internal_catch_all" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [45319 45326]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("argument" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [45328 45343])
                    ("handler" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45388 45400]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45262 45858])
            ("push_handler" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45891 45914])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [45915 45944]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [45860 46070])
            ("push_handler_nosignal" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46112 46135])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [46136 46165]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [46072 46729])
            ("signal_or_quit" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46768 46780])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46781 46793])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [46794 46799]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [46733 46800])
            ("find_handler_clause" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46841 46853])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46854 46866]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [46801 46867])
            ("maybe_call_debugger" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46901 46924])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46925 46941])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46947 46964]))                  
                :type "bool")
                nil [46868 46965])
            ("process_quit_flag" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46998 47003]))                  
                :type "void")
                nil [46967 47194])
            ("maybe_quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [47924 47929]))                  
                :type "void")
                nil [47907 48069])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsignal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48088 48096])
                    ("" variable (:type ("Ssignal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48097 48105])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48122 48126])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48739 48750])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48751 48760]))                  
                :type "int")
                nil [48071 48807])
            ("quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [48949 48954]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48931 49003])
            ("signal_or_quit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49306 49331])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49332 49349])
                    ("keyboard_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [49350 49369]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [49271 52841])
            ("xsignal0" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52928 52953]))                  
                :type "void")
                nil [52913 52989])
            ("xsignal1" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53006 53031])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53032 53048]))                  
                :type "void")
                nil [52991 53091])
            ("xsignal2" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53108 53133])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53134 53151])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53152 53169]))                  
                :type "void")
                nil [53093 53219])
            ("xsignal3" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53236 53261])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53262 53279])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53280 53297])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53298 53315]))                  
                :type "void")
                nil [53221 53371])
            ("signal_error" function
               (:arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [53515 53529])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53530 53546]))                  
                :type "void")
                nil [53496 53660])
            ("overflow_error" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [53788 53793]))                  
                :type "void")
                nil [53767 53827])
            ("wants_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53947 53964])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53965 53988]))                  
                :type "bool")
                nil [53919 54315])
            ("skip_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54510 54533])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54534 54551]))                  
                :type "bool")
                nil [54483 55153])
            ("maybe_call_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55498 55521])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55522 55538])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55539 55556]))                  
                :type "bool")
                nil [55465 56212])
            ("find_handler_clause" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56254 56275])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56276 56299]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [56214 56866])
            ("vformat_string" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [56953 56967])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56968 56979]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [56925 57299])
            ("verror" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [57365 57379])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57380 57391]))                  
                :type "void")
                nil [57352 57440])
            ("error" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [57522 57536])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [57537 57541]))                  
                :type "void")
                nil [57510 57597])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcommandp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57619 57629])
                    ("" variable (:type ("Scommandp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57630 57640])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57657 57661]))                  
                :type "int")
                nil [57600 58399])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fautoload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59950 59960])
                    ("" variable (:type ("Sautoload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59961 59971])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59988 59992]))                  
                :type "int")
                nil [59931 60719])
            ("un_autoload" function
               (:arguments 
                  ( ("oldqueue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61502 61523]))                  
                :type "void")
                nil [61484 61992])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fautoload_do_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62160 62178])
                    ("" variable (:type ("Sautoload_do_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62179 62197])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62214 62218]))                  
                :type "int")
                nil [62133 62577])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64545 64551])
                    ("" variable (:type ("Seval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64552 64558])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64575 64579]))                  
                :type "int")
                nil [64530 64821])
            ("grow_specpdl" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [65486 65491]))                  
                :type "void")
                nil [65460 66187])
            ("record_in_backtrace" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66220 66241])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [66242 66260])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66261 66277]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [66189 66604])
            ("eval_sub" function
               (:arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66720 66737]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [66698 72575])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fapply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72594 72601])
                    ("" variable (:type ("Sapply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72602 72609])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72613 72618])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72629 72633]))                  
                :type "int")
                nil [72578 72881])
            ("funcall_nil" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74832 74848])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [74849 74867]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74800 74912])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hooks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74934 74945])
                    ("" variable (:type ("Srun_hooks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74946 74957])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74961 74966])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74977 74981]))                  
                :type "int")
                nil [74914 75688])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75809 75829])
                    ("" variable (:type ("Srun_hook_with_args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75837 75857])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75861 75866])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75877 75881]))                  
                :type "int")
                nil [75780 76349])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args_until_success" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76626 76660])
                    ("" variable (:type ("Srun_hook_with_args_until_success" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76668 76702])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76706 76711])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76722 76726]))                  
                :type "int")
                nil [76583 77331])
            ("funcall_not" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77422 77438])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [77439 77457]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [77390 77513])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args_until_failure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77558 77592])
                    ("" variable (:type ("Srun_hook_with_args_until_failure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77600 77634])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77638 77643])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77654 77658]))                  
                :type "int")
                nil [77515 78316])
            ("run_hook_wrapped_funcall" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78442 78458])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [78459 78477]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78397 78637])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_wrapped" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78666 78684])
                    ("" variable (:type ("Srun_hook_wrapped" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78685 78703])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78707 78712])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78723 78727]))                  
                :type "int")
                nil [78639 79114])
            ("run_hook_with_args" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79455 79471])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79472 79490])
                    ("funcall" function
                       (:function-pointer t
                        :arguments 
                          ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79521 79537])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [79538 79556]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79423 80920])
            ("run_hook" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80994 81011]))                  
                :type "void")
                nil [80979 81049])
            ("run_hook_with_args_2" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81154 81171])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81172 81189])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81190 81207]))                  
                :type "void")
                nil [81127 81260])
            ("apply1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81306 81321])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81322 81338]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81286 81409])
            ("call0" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81471 81486]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81452 81518])
            ("call1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81600 81615])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81616 81633]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81581 81674])
            ("call2" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81763 81778])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81779 81796])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81797 81814]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81744 81861])
            ("call3" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81956 81971])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81972 81989])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81990 82007])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82008 82025]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81937 82078])
            ("call4" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82179 82194])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82195 82212])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82213 82230])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82231 82248])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82256 82273]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82160 82332])
            ("call5" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82439 82454])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82455 82472])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82473 82490])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82491 82508])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82516 82533])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82534 82551]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82420 82616])
            ("call6" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82729 82744])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82745 82762])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82763 82780])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82781 82798])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82806 82823])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82824 82841])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82842 82859]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82710 82930])
            ("call7" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83049 83064])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83065 83082])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83083 83100])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83101 83118])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83126 83143])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83144 83161])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83162 83179])
                    ("arg7" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83180 83197]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83030 83274])
            ("call8" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83402 83417])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83418 83435])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83436 83453])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83454 83471])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83479 83496])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83497 83514])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83515 83532])
                    ("arg7" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83533 83550])
                    ("arg8" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83558 83575]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83383 83658])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunctionp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83680 83691])
                    ("" variable (:type ("Sfunctionp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83692 83703])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83720 83724]))                  
                :type "int")
                nil [83660 83792])
            ("FUNCTIONP" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83870 83889]))                  
                :type "bool")
                nil [83854 84602])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffuncall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84622 84631])
                    ("" variable (:type ("Sfuncall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84632 84641])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84645 84650])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84661 84665]))                  
                :type "int")
                nil [84604 84918])
            ("funcall_subr" function
               (:arguments 
                  ( ("subr" variable
                       (:pointer 1
                        :type ("Lisp_Subr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [86743 86766])
                    ("numargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86767 86785])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86786 86804]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86717 89450])
            ("apply_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89485 89501])
                    ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89502 89519])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89520 89536]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [89452 90285])
            ("funcall_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90535 90551])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90552 90568])
                    ("arg_vector" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90571 90604]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [90500 94153])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunc_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94176 94188])
                    ("" variable (:type ("Sfunc_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94189 94201])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94218 94222]))                  
                :type "int")
                nil [94155 94563])
            ("lambda_arity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95903 95919]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [95870 97132])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffetch_bytecode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97159 97175])
                    ("" variable (:type ("Sfetch_bytecode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97176 97192])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97216 97220]))                  
                :type "int")
                nil [97134 97305])
            ("let_shadows_buffer_binding_p" function
               (:arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [98100 98127]))                  
                :type "bool")
                nil [98065 98513])
            ("do_specbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [98540 98564])
                    ("bind" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [98565 98589])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98603 98621])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [98622 98654]))                  
                :type "void")
                nil [98515 99257])
            ("specbind" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99909 99928])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99929 99947]))                  
                :type "void")
                nil [99894 101948])
            ("record_unwind_protect" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102050 102062]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102064 102080]))                  
                :type "void")
                nil [102004 102220])
            ("record_unwind_protect_array" function
               (:arguments 
                  ( ("array" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [102256 102275])
                    ("nelts" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102276 102292]))                  
                :type "void")
                nil [102222 102458])
            ("record_unwind_protect_ptr" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [102510 102517]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [102519 102529]))                  
                :type "void")
                nil [102460 102685])
            ("record_unwind_protect_int" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [102737 102741]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type "int") (reparse-symbol arg-sub-list) [102743 102751]))                  
                :type "void")
                nil [102687 102907])
            ("record_unwind_protect_excursion" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [102947 102952]))                  
                :type "void")
                nil [102909 103077])
            ("record_unwind_protect_void" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [103130 103135]))                          
                        :type "void")
                        nil nil))                  
                :type "void")
                nil [103079 103258])
            ("rebind_for_thread_switch" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [103291 103296]))                  
                :type "void")
                nil [103260 103666])
            ("do_one_unbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("this_binding" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [103695 103727])
                    ("unwinding" variable (:type "bool") (reparse-symbol arg-sub-list) [103728 103743])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [103759 103791]))                  
                :type "void")
                nil [103668 105951])
            ("do_nothing" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [105977 105982]))                  
                :type "void")
                nil [105953 105985])
            ("record_unwind_protect_nothing" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [106137 106142]))                  
                :type "void")
                nil [106101 106189])
            ("clear_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106332 106348]))                  
                :type "void")
                nil [106305 106475])
            ("set_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106679 106695])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106710 106722]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106730 106746]))                  
                :type "void")
                nil [106654 106875])
            ("set_unwind_protect_ptr" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106906 106922])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [106937 106944]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [106946 106956]))                  
                :type "void")
                nil [106877 107101])
            ("unbind_to" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107240 107256])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107257 107275]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [107217 107901])
            ("unbind_for_thread_switch" function
               (:arguments 
                  ( ("thr" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [107934 107959]))                  
                :type "void")
                nil [107903 108271])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fspecial_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108302 108322])
                    ("" variable (:type ("Sspecial_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108323 108343])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108360 108364]))                  
                :type "int")
                nil [108273 108577])
            ("get_backtrace_starting_at" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108727 108744]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [108673 109057])
            ("get_backtrace_frame" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109107 109127])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109128 109145]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [109059 109407])
            ("backtrace_frame_apply" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109451 109472])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [109473 109496]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109409 109967])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_debug" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109995 110012])
                    ("" variable (:type ("Sbacktrace_debug" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110013 110030])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110047 110051]))                  
                :type "int")
                nil [109969 110238])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapbacktrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110447 110461])
                    ("" variable (:type ("Smapbacktrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110462 110476])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110493 110497]))                  
                :type "int")
                nil [110424 111138])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_frame_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111602 111628])
                    ("" variable (:type ("Sbacktrace_frame_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111636 111662])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111669 111674])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111682 111686]))                  
                :type "int")
                nil [111566 111888])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_frames_from_thread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112014 112044])
                    ("" variable (:type ("Sbacktrace_frames_from_thread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112052 112082])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112089 112094])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112102 112106]))                  
                :type "int")
                nil [111974 112645])
            ("backtrace_eval_unrewind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("distance" variable (:type "int") (reparse-symbol arg-sub-list) [113851 113864]))                  
                :type "void")
                nil [113814 116398])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_eval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116425 116441])
                    ("" variable (:type ("Sbacktrace_eval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116442 116458])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116465 116470])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116478 116482]))                  
                :type "int")
                nil [116400 116685])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace__locals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117283 117302])
                    ("" variable (:type ("Sbacktrace__locals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117303 117322])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117329 117334])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117342 117346]))                  
                :type "int")
                nil [117255 117536])
            ("mark_specpdl" function
               (:arguments 
                  ( ("first" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [119683 119708])
                    ("ptr" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [119709 119732]))                  
                :type "void")
                nil [119664 120798])
            ("get_backtrace" function
               (:arguments 
                  ( ("array" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120820 120838]))                  
                :type "void")
                nil [120800 121189])
            ("backtrace_top_function" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [121227 121232]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121191 121345])
            ("syms_of_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [121366 121371]))                  
                :type "void")
                nil [121347 129681]))          
      :file "eval.c"
      :pointmax 129682
      :fsize 129681
      :lastmodtime '(23454 65441 997778 138000)
      :unmatched-syntax nil
      :lexical-table 
        '(("clobbered_eassert" (spp-arg-list ("E") 33946 . 33949) . ((symbol "verify" 33950 . 33956) (semantic-list "(sizeof (E) != 0)" 33957 . 33974)))
          ("CACHEABLE")
          )
)
    (semanticdb-table "semanticdb-table-1afafe0"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [809 828])
            ("math.h" include (:system-flag t) nil [830 847])
            ("stdio.h" include (:system-flag t) nil [848 866])
            ("byteswap.h" include (:system-flag t) nil [868 889])
            ("count-one-bits.h" include (:system-flag t) nil [890 917])
            ("count-trailing-zeros.h" include (:system-flag t) nil [918 951])
            ("intprops.h" include (:system-flag t) nil [952 973])
            ("lisp.h" include nil nil [975 992])
            ("bignum.h" include nil nil [993 1012])
            ("puresize.h" include nil nil [1013 1034])
            ("character.h" include nil nil [1035 1057])
            ("buffer.h" include nil nil [1058 1077])
            ("keyboard.h" include nil nil [1078 1099])
            ("process.h" include nil nil [1100 1120])
            ("frame.h" include nil nil [1121 1139])
            ("keymap.h" include nil nil [1140 1159])
            ("swap_in_symval_forwarding" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1200 1221])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1233 1266]))                  
                :type "void")
                nil [1161 1267])
            ("BOOLFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1291 1309]))                  
                :type "bool")
                nil [1269 1353])
            ("INTFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1375 1393]))                  
                :type "bool")
                nil [1354 1436])
            ("KBOARD_OBJFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1465 1483]))                  
                :type "bool")
                nil [1437 1533])
            ("OBJFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1555 1573]))                  
                :type "bool")
                nil [1534 1616])
            ("XBOOLFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1657 1675]))                  
                :type ("Lisp_Boolfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1618 1729])
            ("XKBOARD_OBJFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1781 1799]))                  
                :type ("Lisp_Kboard_Objfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1730 1865])
            ("XFIXNUMFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1906 1924]))                  
                :type ("Lisp_Intfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1866 1976])
            ("XOBJFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [2014 2032]))                  
                :type ("Lisp_Objfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1977 2084])
            ("CHECK_SUBR" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2110 2124]))                  
                :type "void")
                nil [2086 2165])
            ("set_blv_found" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2194 2230])
                    ("found" variable (:type "int") (reparse-symbol arg-sub-list) [2231 2241]))                  
                :type "void")
                nil [2167 2322])
            ("blv_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2354 2390]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2324 2424])
            ("set_blv_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2453 2489])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2490 2506]))                  
                :type "void")
                nil [2426 2541])
            ("set_blv_where" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2570 2606])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2607 2623]))                  
                :type "void")
                nil [2543 2647])
            ("set_blv_defcell" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2678 2714])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2715 2731]))                  
                :type "void")
                nil [2649 2757])
            ("set_blv_valcell" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2788 2824])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2825 2841]))                  
                :type "void")
                nil [2759 2867])
            ("wrong_length_argument" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2914 2929])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2930 2945])
                    ("a3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2946 2961]))                  
                :type "void")
                nil [2869 3257])
            ("wrong_type_argument" function
               (:arguments 
                  ( ("predicate" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3295 3326])
                    ("value" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3327 3354]))                  
                :type "void")
                nil [3269 3744])
            ("pure_write_error" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3769 3785]))                  
                :type "void")
                nil [3746 3868])
            ("args_out_of_range" function
               (:arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3894 3909])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3910 3925]))                  
                :type "void")
                nil [3870 3970])
            ("args_out_of_range_3" function
               (:arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3998 4013])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4014 4029])
                    ("a3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4030 4045]))                  
                :type "void")
                nil [3972 4094])
            ("circular_list" function
               (:arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4116 4133]))                  
                :type "void")
                nil [4096 4172])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4219 4223])
                    ("" variable (:type ("Seq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4224 4228])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4245 4249])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4315 4326]))                  
                :type "int")
                nil [4206 4372])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnull" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4446 4452])
                    ("" variable (:type ("Snull" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4453 4459])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4476 4480])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4548 4559]))                  
                :type "int")
                nil [4431 4589])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftype_of" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4664 4673])
                    ("" variable (:type ("Stype_of" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4674 4683])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4700 4704]))                  
                :type "int")
                nil [4646 4879])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7068 7075])
                    ("" variable (:type ("Sconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7076 7083])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7100 7104])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7154 7165]))                  
                :type "int")
                nil [7052 7195])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fatom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7268 7274])
                    ("" variable (:type ("Satom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7275 7281])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7298 7302])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7376 7387]))                  
                :type "int")
                nil [7253 7417])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7491 7498])
                    ("" variable (:type ("Slistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7499 7506])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7523 7527])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7624 7635]))                  
                :type "int")
                nil [7475 7665])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7757 7765])
                    ("" variable (:type ("Snlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7766 7774])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7791 7795])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7864 7875]))                  
                :type "int")
                nil [7740 7905])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7999 8008])
                    ("" variable (:type ("Ssymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8009 8018])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8035 8039])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8086 8097]))                  
                :type "int")
                nil [7981 8127])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkeywordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8284 8294])
                    ("" variable (:type ("Skeywordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8295 8305])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8322 8326]))                  
                :type "int")
                nil [8265 8491])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8671 8680])
                    ("" variable (:type ("Svectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8681 8690])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8707 8711]))                  
                :type "int")
                nil [8653 8774])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8852 8861])
                    ("" variable (:type ("Srecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8862 8871])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8888 8892]))                  
                :type "int")
                nil [8834 8955])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9033 9042])
                    ("" variable (:type ("Sstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9043 9052])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9069 9073])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9120 9131]))                  
                :type "int")
                nil [9015 9161])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmultibyte_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9250 9270])
                    ("" variable (:type ("Smultibyte_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9271 9291])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9315 9319]))                  
                :type "int")
                nil [9221 9458])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9570 9584])
                    ("" variable (:type ("Schar_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9585 9599])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9616 9620]))                  
                :type "int")
                nil [9547 9687])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvector_or_char_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9785 9809])
                    ("" variable (:type ("Svector_or_char_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9817 9841])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9858 9862]))                  
                :type "int")
                nil [9752 9939])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10048 10063])
                    ("" variable (:type ("Sbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10064 10079])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10096 10100]))                  
                :type "int")
                nil [10024 10168])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Farrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10251 10259])
                    ("" variable (:type ("Sarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10260 10268])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10285 10289]))                  
                :type "int")
                nil [10234 10371])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsequencep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10450 10461])
                    ("" variable (:type ("Ssequencep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10462 10473])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10490 10494]))                  
                :type "int")
                nil [10430 10584])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10696 10705])
                    ("" variable (:type ("Sbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10706 10715])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10732 10736]))                  
                :type "int")
                nil [10678 10807])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmarkerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10885 10894])
                    ("" variable (:type ("Smarkerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10895 10904])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10921 10925]))                  
                :type "int")
                nil [10867 11005])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11313 11320])
                    ("" variable (:type ("Ssubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11321 11328])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11345 11349]))                  
                :type "int")
                nil [11297 11423])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_code_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11512 11534])
                    ("" variable (:type ("Sbyte_code_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11535 11557])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11581 11585]))                  
                :type "int")
                nil [11481 11671])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmodule_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11761 11780])
                    ("" variable (:type ("Smodule_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11781 11800])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11807 11812])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11820 11824])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11902 11913]))                  
                :type "int")
                nil [11733 11943])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_or_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12024 12042])
                    ("" variable (:type ("Schar_or_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12043 12061])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12078 12082])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12144 12155]))                  
                :type "int")
                nil [11997 12194])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12297 12307])
                    ("" variable (:type ("Sintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12308 12318])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12335 12339])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12388 12399]))                  
                :type "int")
                nil [12278 12429])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finteger_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12520 12541])
                    ("" variable (:type ("Sinteger_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12542 12563])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12580 12584]))                  
                :type "int")
                nil [12490 12687])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnatnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12786 12795])
                    ("" variable (:type ("Snatnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12796 12805])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12822 12826])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12886 12897]))                  
                :type "int")
                nil [12768 12927])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13086 13095])
                    ("" variable (:type ("Snumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13096 13105])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13122 13126])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13201 13212]))                  
                :type "int")
                nil [13068 13242])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumber_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13340 13360])
                    ("" variable (:type ("Snumber_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13368 13388])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13405 13409]))                  
                :type "int")
                nil [13311 13484])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffloatp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13581 13589])
                    ("" variable (:type ("Sfloatp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13590 13598])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13615 13619])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13681 13692]))                  
                :type "int")
                nil [13564 13722])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthreadp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13799 13808])
                    ("" variable (:type ("Sthreadp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13809 13818])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13835 13839]))                  
                :type "int")
                nil [13781 13902])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmutexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13979 13987])
                    ("" variable (:type ("Smutexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13988 13996])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14013 14017]))                  
                :type "int")
                nil [13962 14079])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcondition_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14169 14191])
                    ("" variable (:type ("Scondition_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14192 14214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14238 14242]))                  
                :type "int")
                nil [14138 14317])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14438 14443])
                    ("" variable (:type ("Scar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14444 14449])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14466 14470]))                  
                :type "int")
                nil [14424 14748])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcar_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14794 14804])
                    ("" variable (:type ("Scar_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14805 14815])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14832 14836]))                  
                :type "int")
                nil [14775 14927])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14975 14980])
                    ("" variable (:type ("Scdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14981 14986])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15003 15007]))                  
                :type "int")
                nil [14961 15285])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcdr_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15331 15341])
                    ("" variable (:type ("Scdr_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15342 15352])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15369 15373]))                  
                :type "int")
                nil [15312 15464])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15515 15523])
                    ("" variable (:type ("Ssetcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15524 15532])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15549 15553]))                  
                :type "int")
                nil [15498 15662])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15786 15794])
                    ("" variable (:type ("Ssetcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15795 15803])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15820 15824]))                  
                :type "int")
                nil [15769 15933])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16105 16113])
                    ("" variable (:type ("Sboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16114 16122])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16139 16143]))                  
                :type "int")
                nil [16088 16330])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17448 17457])
                    ("" variable (:type ("Sfboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17458 17467])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17484 17488]))                  
                :type "int")
                nil [17430 17573])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17685 17697])
                    ("" variable (:type ("Smakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17698 17710])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17727 17731]))                  
                :type "int")
                nil [17664 17815])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17988 18001])
                    ("" variable (:type ("Sfmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18002 18015])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18032 18036]))                  
                :type "int")
                nil [17966 18133])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18327 18344])
                    ("" variable (:type ("Ssymbol_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18345 18362])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18379 18383]))                  
                :type "int")
                nil [18301 18475])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18570 18584])
                    ("" variable (:type ("Ssymbol_plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18585 18599])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18616 18620]))                  
                :type "int")
                nil [18547 18682])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18773 18786])
                    ("" variable (:type ("Ssymbol_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18787 18800])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18817 18821]))                  
                :type "int")
                nil [18751 18893])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19015 19021])
                    ("" variable (:type ("Sfset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19022 19028])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19045 19049]))                  
                :type "int")
                nil [19000 19184])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefalias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19910 19920])
                    ("" variable (:type ("Sdefalias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19921 19931])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19948 19952]))                  
                :type "int")
                nil [19891 20485])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetplist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21680 21690])
                    ("" variable (:type ("Ssetplist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21691 21701])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21718 21722]))                  
                :type "int")
                nil [21661 21845])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubr_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21955 21967])
                    ("" variable (:type ("Ssubr_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21968 21980])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21997 22001]))                  
                :type "int")
                nil [21934 22320])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubr_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22626 22637])
                    ("" variable (:type ("Ssubr_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22638 22649])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22666 22670]))                  
                :type "int")
                nil [22606 22765])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finteractive_form" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22905 22923])
                    ("" variable (:type ("Sinteractive_form" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22924 22942])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22959 22963]))                  
                :type "int")
                nil [22878 23141])
            ("indirect_variable" function
               (:pointer 1
                :arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24678 24705]))                  
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24638 25155])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Findirect_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25186 25205])
                    ("" variable (:type ("Sindirect_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25206 25225])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25242 25246]))                  
                :type "int")
                nil [25158 25639])
            ("do_symval_forwarding" function
               (:arguments 
                  ( ("valcontents" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [26021 26058]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [25987 27183])
            ("wrong_choice" function
               (:arguments 
                  ( ("choice" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27332 27351])
                    ("wrong" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27352 27370]))                  
                :type "void")
                nil [27313 28056])
            ("wrong_range" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("min" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28226 28242])
                    ("max" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28243 28259])
                    ("wrong" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28260 28278]))                  
                :type "void")
                nil [28201 28509])
            ("store_symval_forwarding" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("valcontents" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [28934 28962])
                    ("newval" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28963 28991])
                    ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28992 29011]))                  
                :type "void")
                nil [28897 31226])
            ("swap_in_global_binding" function
               (:arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [31531 31558]))                  
                :type "void")
                nil [31502 32035])
            ("swap_in_symval_forwarding" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32375 32402])
                    ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32403 32439]))                  
                :type "void")
                nil [32336 33184])
            ("find_symbol_value" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33513 33532]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33482 34104])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34129 34143])
                    ("" variable (:type ("Ssymbol_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34144 34158])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34175 34179]))                  
                :type "int")
                nil [34106 34362])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34519 34524])
                    ("" variable (:type ("Sset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34525 34530])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34547 34551]))                  
                :type "int")
                nil [34505 34660])
            ("set_internal" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35148 35167])
                    ("newval" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35168 35187])
                    ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35188 35206])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [35221 35253]))                  
                :type "void")
                nil [35129 39877])
            ("set_symbol_trapped_write" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39917 39936])
                    ("trap" variable (:type ("symbol_trapped_write" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [39937 39968]))                  
                :type "void")
                nil [39879 40142])
            ("restore_symbol_trapped_write" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40186 40205]))                  
                :type "void")
                nil [40144 40268])
            ("harmonize_variable_watchers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("alias" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40311 40329])
                    ("base_variable" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40330 40356]))                  
                :type "void")
                nil [40270 40538])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fadd_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40571 40593])
                    ("" variable (:type ("Sadd_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40594 40616])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40640 40644]))                  
                :type "int")
                nil [40540 41183])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fremove_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41596 41621])
                    ("" variable (:type ("Sremove_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41622 41647])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41671 41675]))                  
                :type "int")
                nil [41562 41877])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_variable_watchers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42275 42298])
                    ("" variable (:type ("Sget_variable_watchers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42299 42322])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42346 42350]))                  
                :type "int")
                nil [42243 42424])
            ("notify_variable_watchers" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42592 42611])
                    ("newval" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42638 42657])
                    ("operation" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42684 42706])
                    ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42733 42751]))                  
                :type "void")
                nil [42561 43770])
            ("default_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43977 43996]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43943 45256])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_boundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45283 45299])
                    ("" variable (:type ("Sdefault_boundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45300 45316])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45333 45337]))                  
                :type "int")
                nil [45258 45512])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45652 45667])
                    ("" variable (:type ("Sdefault_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45668 45683])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45700 45704]))                  
                :type "int")
                nil [45628 45948])
            ("set_default_internal" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46112 46131])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46132 46150])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [46173 46205]))                  
                :type "void")
                nil [46085 48820])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48844 48857])
                    ("" variable (:type ("Sset_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48858 48871])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48888 48892]))                  
                :type "int")
                nil [48822 49102])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetq_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49205 49219])
                    ("" variable (:type ("Ssetq_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49220 49234])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49238 49248])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49259 49263]))                  
                :type "int")
                nil [49182 49845])
            ("Lisp_Val_Fwd" type
               (:members 
                  ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [50231 50249])
                    ("fwd" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol classsubparts) [50254 50274]))                  
                :type "union")
                nil [50204 50279])
            ("make_blv" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("sym" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [50331 50355])
                    ("forwarded" variable (:type "bool") (reparse-symbol arg-sub-list) [50356 50371])
                    ("valcontents" variable (:type ("Lisp_Val_Fwd" type (:type "union") nil nil)) (reparse-symbol arg-sub-list) [50375 50406]))                  
                :type ("Lisp_Buffer_Local_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [50281 51119])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_variable_buffer_local" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51158 51186])
                    ("" variable (:type ("Smake_variable_buffer_local" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51194 51222])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51269 51273]))                  
                :type "int")
                nil [51121 52161])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53346 53367])
                    ("" variable (:type ("Smake_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53368 53389])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53436 53440]))                  
                :type "int")
                nil [53316 54186])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56362 56383])
                    ("" variable (:type ("Skill_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56384 56405])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56452 56456]))                  
                :type "int")
                nil [56332 56642])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocal_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58365 58383])
                    ("" variable (:type ("Slocal_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58384 58402])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58426 58430]))                  
                :type "int")
                nil [58338 58580])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocal_variable_if_set_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59766 59791])
                    ("" variable (:type ("Slocal_variable_if_set_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59792 59817])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59841 59845]))                  
                :type "int")
                nil [59732 60177])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvariable_binding_locus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60890 60914])
                    ("" variable (:type ("Svariable_binding_locus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60915 60939])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60963 60967]))                  
                :type "int")
                nil [60857 61219])
            ("indirect_function" function
               (:arguments 
                  ( ("object" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [62673 62701]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [62642 63124])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Findirect_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63154 63173])
                    ("" variable (:type ("Sindirect_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63174 63193])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63210 63214]))                  
                :type "int")
                nil [63126 63568])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Faref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63931 63937])
                    ("" variable (:type ("Saref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63938 63944])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63961 63965]))                  
                :type "int")
                nil [63916 64176])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Faset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65310 65316])
                    ("" variable (:type ("Saset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65317 65323])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65340 65344]))                  
                :type "int")
                nil [65295 65581])
            ("" type
               (:members 
                  ( ("GMP_NLIMBS_MAX" variable
                       (:constant-flag t
                        :default-value (68250 68290)
                        :type "int")
                        (reparse-symbol enumsubparts) [68233 68290]))                  
                :type "enum")
                nil [68226 68293])
            ("" type
               (:members 
                  ( ("NLIMBS_LIMIT" variable
                       (:constant-flag t
                        :default-value (68649 68928)
                        :type "int")
                        (reparse-symbol enumsubparts) [68634 68928]))                  
                :type "enum")
                nil [68622 68933])
            ("emacs_mpz_size" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("op" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69040 69055]))                  
                :type "int")
                nil [69013 69150])
            ("emacs_mpz_mul" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("rop" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69505 69515])
                    ("op1" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69516 69532])
                    ("op2" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69533 69549]))                  
                :type "void")
                nil [69478 69669])
            ("emacs_mpz_mul_2exp" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("rop" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69703 69713])
                    ("op1" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69714 69730])
                    ("op2" variable (:type ("mp_bitcnt_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69731 69747]))                  
                :type "void")
                nil [69671 70137])
            ("emacs_mpz_pow_ui" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("rop" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70169 70179])
                    ("base" variable
                       (:constant-flag t
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70180 70197])
                    ("exp" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [70198 70216]))                  
                :type "void")
                nil [70139 70610])
            ("arithcompare" function
               (:arguments 
                  ( ("num1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70668 70685])
                    ("num2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70686 70703])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [70711 70744]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [70642 73772])
            ("arithcompare_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73814 73830])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [73831 73849])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [73871 73904]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [73774 74044])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feqlsign" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74058 74067])
                    ("" variable (:type ("Seqlsign" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74068 74077])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74081 74086])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74097 74101]))                  
                :type "int")
                nil [74046 74254])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flss" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74329 74334])
                    ("" variable (:type ("Slss" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74335 74340])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74344 74349])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74360 74364]))                  
                :type "int")
                nil [74317 74534])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgtr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74608 74613])
                    ("" variable (:type ("Sgtr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74614 74619])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74623 74628])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74639 74643]))                  
                :type "int")
                nil [74596 74815])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fleq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74890 74895])
                    ("" variable (:type ("Sleq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74896 74901])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74905 74910])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74921 74925]))                  
                :type "int")
                nil [74877 75103])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgeq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75187 75192])
                    ("" variable (:type ("Sgeq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75193 75198])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75202 75207])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75218 75222]))                  
                :type "int")
                nil [75174 75403])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fneq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75487 75492])
                    ("" variable (:type ("Sneq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75493 75498])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75515 75519]))                  
                :type "int")
                nil [75474 75659])
            ("cons_to_unsigned" function
               (:arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76182 76196])
                    ("max" variable (:type ("uintmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76197 76211]))                  
                :type ("uintmax_t" type (:type "class") nil nil))
                nil [76154 77298])
            ("cons_to_signed" function
               (:arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77820 77834])
                    ("min" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77835 77848])
                    ("max" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77849 77862]))                  
                :type ("intmax_t" type (:type "class") nil nil))
                nil [77795 79019])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumber_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79049 79067])
                    ("" variable (:type ("Snumber_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79068 79086])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79103 79107]))                  
                :type "int")
                nil [79022 79279])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79683 79701])
                    ("" variable (:type ("Sstring_to_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79702 79720])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79737 79741]))                  
                :type "int")
                nil [79656 80193])
            ("arithop" type
               (:members 
                  ( ("Aadd" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80642 80647])
                    ("Asub" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80652 80657])
                    ("Amult" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80662 80668])
                    ("Adiv" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80673 80678])
                    ("Alogand" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80683 80691])
                    ("Alogior" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80696 80704])
                    ("Alogxor" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [80709 80720]))                  
                :type "enum")
                nil [80621 80721])
            ("floating_point_op" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [80753 80771]))                  
                :type "bool")
                nil [80722 80798])
            ("floatop_arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [81147 81165])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81166 81182])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81183 81201])
                    ("argnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81210 81227])
                    ("accum" variable (:type "double") (reparse-symbol arg-sub-list) [81228 81241])
                    ("next" variable (:type "double") (reparse-symbol arg-sub-list) [81242 81254]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81106 81823])
            ("float_arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [82004 82022])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82023 82039])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82040 82058])
                    ("argnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82065 82082])
                    ("accum" variable (:type "double") (reparse-symbol arg-sub-list) [82083 82096])
                    ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82097 82114]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [81965 82302])
            ("bignum_arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [82648 82666])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82667 82683])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82684 82702])
                    ("argnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82710 82727])
                    ("iaccum" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82728 82744])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82745 82761]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82608 83835])
            ("arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [84107 84125])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84126 84142])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84143 84161])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84169 84185]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [84074 85612])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fplus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85627 85633])
                    ("" variable (:type ("Splus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85634 85640])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85644 85649])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85660 85664]))                  
                :type "int")
                nil [85615 85816])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fminus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86004 86011])
                    ("" variable (:type ("Sminus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86012 86019])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86023 86028])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86039 86043]))                  
                :type "int")
                nil [85992 86321])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftimes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86717 86724])
                    ("" variable (:type ("Stimes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86725 86732])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86736 86741])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86752 86756]))                  
                :type "int")
                nil [86705 86912])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fquo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87101 87106])
                    ("" variable (:type ("Squo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87107 87112])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87116 87121])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87132 87136]))                  
                :type "int")
                nil [87089 87431])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frem" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88177 88182])
                    ("" variable (:type ("Srem" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88183 88188])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88205 88209]))                  
                :type "int")
                nil [88165 88329])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88783 88788])
                    ("" variable (:type ("Smod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88789 88794])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88811 88815]))                  
                :type "int")
                nil [88769 88986])
            ("minmax_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89970 89986])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [89987 90005])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [90014 90047]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [89936 90423])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90439 90444])
                    ("" variable (:type ("Smax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90445 90450])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90454 90459])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90470 90474]))                  
                :type "int")
                nil [90425 90712])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90782 90787])
                    ("" variable (:type ("Smin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90788 90793])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90797 90802])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90813 90817]))                  
                :type "int")
                nil [90768 91056])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91129 91137])
                    ("" variable (:type ("Slogand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91138 91146])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91150 91155])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91166 91170]))                  
                :type "int")
                nil [91112 91357])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogior" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91555 91563])
                    ("" variable (:type ("Slogior" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91564 91572])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91576 91581])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91592 91596]))                  
                :type "int")
                nil [91538 91782])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogxor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91979 91987])
                    ("" variable (:type ("Slogxor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91988 91996])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92000 92005])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92016 92020]))                  
                :type "int")
                nil [91962 92216])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogcount" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92415 92425])
                    ("" variable (:type ("Slogcount" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92426 92436])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92453 92457]))                  
                :type "int")
                nil [92396 92678])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93244 93249])
                    ("" variable (:type ("Sash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93250 93255])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93272 93276]))                  
                :type "int")
                nil [93230 93474])
            ("expt_integer" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94491 94505])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94506 94520]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [94465 94887])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fadd1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94902 94908])
                    ("" variable (:type ("Sadd1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94909 94915])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94932 94936]))                  
                :type "int")
                nil [94889 95072])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsub1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95357 95363])
                    ("" variable (:type ("Ssub1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95364 95370])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95387 95391]))                  
                :type "int")
                nil [95344 95528])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flognot" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95818 95826])
                    ("" variable (:type ("Slognot" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95827 95835])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95852 95856]))                  
                :type "int")
                nil [95801 95965])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyteorder" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96160 96171])
                    ("" variable (:type ("Sbyteorder" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96172 96183])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96200 96204])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96366 96377]))                  
                :type "int")
                nil [96140 96393])
            ("bool_vector_spare_mask" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nr_bits" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96733 96751]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [96692 96821])
            ("" type
               (:members 
                  ( ("ULL_WIDTH" variable
                       (:constant-flag t
                        :default-value (97079 97090)
                        :type "int")
                        (reparse-symbol enumsubparts) [97067 97090]))                  
                :type "enum")
                nil [97060 97093])
            ("ULL_MAX" variable (:constant-flag t) nil [97103 97110])
            ("count_one_bits_ll" variable (:constant-flag t) nil [97130 97147])
            ("count_trailing_zeros_ll" variable (:constant-flag t) nil [97174 97197])
            ("shift_right_ull" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97377 97389]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [97343 97554])
            ("count_one_bits_word" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97630 97642]))                  
                :type "int")
                nil [97598 97965])
            ("bool_vector_op" type
               (:members 
                  ( ("bool_vector_exclusive_or" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [97989 98014])
                    ("bool_vector_union" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [98037 98055])
                    ("bool_vector_intersection" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [98078 98103])
                    ("bool_vector_set_difference" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [98126 98153])
                    ("bool_vector_subsetp" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [98176 98197]))                  
                :type "enum")
                nil [97967 98198])
            ("bool_vector_binop_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98245 98259])
                    ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98286 98300])
                    ("dest" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98327 98344])
                    ("op" variable (:type ("bool_vector_op" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [98371 98394]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [98200 100345])
            ("pre_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("precondition" variable (:type "bool") (reparse-symbol arg-sub-list) [100513 100531])
                    ("value" variable (:type "int") (reparse-symbol arg-sub-list) [100532 100542]))                  
                :type "int")
                nil [100491 100607])
            ("count_trailing_zero_bits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100756 100770]))                  
                :type "int")
                nil [100719 101804])
            ("bits_word_to_host_endian" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101849 101863]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [101806 102311])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_exclusive_or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102348 102374])
                    ("" variable (:type ("Sbool_vector_exclusive_or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102382 102408])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102425 102429]))                  
                :type "int")
                nil [102313 102696])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_union" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102801 102820])
                    ("" variable (:type ("Sbool_vector_union" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102828 102847])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102864 102868]))                  
                :type "int")
                nil [102773 103125])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_intersection" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103230 103256])
                    ("" variable (:type ("Sbool_vector_intersection" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103264 103290])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103307 103311]))                  
                :type "int")
                nil [103195 103569])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_set_difference" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103683 103711])
                    ("" variable (:type ("Sbool_vector_set_difference" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103719 103747])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103764 103768]))                  
                :type "int")
                nil [103646 104030])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_subsetp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104139 104160])
                    ("" variable (:type ("Sbool_vector_subsetp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104168 104189])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104206 104210]))                  
                :type "int")
                nil [104109 104362])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104460 104477])
                    ("" variable (:type ("Sbool_vector_not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104485 104502])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104519 104523]))                  
                :type "int")
                nil [104434 104733])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_count_population" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105496 105526])
                    ("" variable (:type ("Sbool_vector_count_population" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105534 105564])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105581 105585]))                  
                :type "int")
                nil [105457 105738])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_count_consecutive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106121 106152])
                    ("" variable (:type ("Sbool_vector_count_consecutive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106160 106191])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106208 106212]))                  
                :type "int")
                nil [106081 106393])
            ("syms_of_data" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [108510 108515]))                  
                :type "void")
                nil [108491 118798]))          
      :file "data.c"
      :pointmax 118827
      :fsize 118826
      :lastmodtime '(23451 3115 759715 314000)
      :unmatched-syntax '((punctuation 118824 . 118825) (semantic-list 118799 . 118824) (semantic-list 106394 . 108487) (punctuation 106211 . 106212) (number 106198 . 106199) (number 106195 . 106196) (number 106192 . 106193) (string 106088 . 106119) (semantic-list 105739 . 106079) (punctuation 105584 . 105585) (number 105571 . 105572) (number 105568 . 105569) (number 105565 . 105566) (string 105464 . 105494) (semantic-list 104734 . 105455) (punctuation 104522 . 104523) (number 104509 . 104510) (number 104506 . 104507) (number 104503 . 104504) (string 104441 . 104458) (semantic-list 104363 . 104432) (punctuation 104209 . 104210) (number 104196 . 104197) (number 104193 . 104194) (number 104190 . 104191) (string 104116 . 104137) (semantic-list 104031 . 104107) (punctuation 103767 . 103768) (number 103754 . 103755) (number 103751 . 103752) (number 103748 . 103749) (string 103653 . 103681) (semantic-list 103570 . 103644) (punctuation 103310 . 103311) (number 103297 . 103298) (number 103294 . 103295) (number 103291 . 103292) (string 103202 . 103228) (semantic-list 103126 . 103193) (punctuation 102867 . 102868) (number 102854 . 102855) (number 102851 . 102852) (number 102848 . 102849) (string 102780 . 102799) (semantic-list 102697 . 102771) (punctuation 102428 . 102429) (number 102415 . 102416) (number 102412 . 102413) (number 102409 . 102410) (string 102320 . 102346) (semantic-list 96394 . 96498) (CONST 96378 . 96383) (punctuation 96376 . 96377) (punctuation 96203 . 96204) (number 96190 . 96191) (number 96187 . 96188) (number 96184 . 96185) (string 96147 . 96158) (semantic-list 95966 . 96138) (punctuation 95855 . 95856) (number 95842 . 95843) (number 95839 . 95840) (number 95836 . 95837) (string 95808 . 95816) (semantic-list 95529 . 95799) (punctuation 95390 . 95391) (number 95377 . 95378) (number 95374 . 95375) (number 95371 . 95372) (string 95351 . 95355) (semantic-list 95073 . 95342) (punctuation 94935 . 94936) (number 94922 . 94923) (number 94919 . 94920) (number 94916 . 94917) (string 94896 . 94900) (semantic-list 93475 . 94369) (punctuation 93275 . 93276) (number 93262 . 93263) (number 93259 . 93260) (number 93256 . 93257) (string 93237 . 93242) (semantic-list 92679 . 93228) (punctuation 92456 . 92457) (number 92443 . 92444) (number 92440 . 92441) (number 92437 . 92438) (string 92403 . 92413) (semantic-list 92217 . 92394) (punctuation 92019 . 92020) (number 92006 . 92007) (number 91997 . 91998) (string 91969 . 91977) (semantic-list 91783 . 91960) (punctuation 91595 . 91596) (number 91582 . 91583) (number 91573 . 91574) (string 91545 . 91553) (semantic-list 91358 . 91536) (punctuation 91169 . 91170) (number 91156 . 91157) (number 91147 . 91148) (string 91119 . 91127) (semantic-list 91057 . 91110) (punctuation 90816 . 90817) (number 90803 . 90804) (number 90794 . 90795) (string 90775 . 90780) (semantic-list 90713 . 90766) (punctuation 90473 . 90474) (number 90460 . 90461) (number 90451 . 90452) (string 90432 . 90437) (semantic-list 88987 . 89934) (punctuation 88814 . 88815) (number 88801 . 88802) (number 88798 . 88799) (number 88795 . 88796) (string 88776 . 88781) (semantic-list 88330 . 88767) (punctuation 88208 . 88209) (number 88195 . 88196) (number 88192 . 88193) (number 88189 . 88190) (string 88172 . 88175) (semantic-list 87432 . 88163) (punctuation 87135 . 87136) (number 87122 . 87123) (number 87113 . 87114) (string 87096 . 87099) (semantic-list 86913 . 87087) (punctuation 86755 . 86756) (number 86742 . 86743) (number 86733 . 86734) (string 86712 . 86715) (semantic-list 86322 . 86703) (punctuation 86042 . 86043) (number 86029 . 86030) (number 86020 . 86021) (string 85999 . 86002) (semantic-list 85817 . 85990) (punctuation 85663 . 85664) (number 85650 . 85651) (number 85641 . 85642) (string 85622 . 85625) (semantic-list 80194 . 80618) (punctuation 79740 . 79741) (number 79727 . 79728) (number 79724 . 79725) (number 79721 . 79722) (string 79663 . 79681) (semantic-list 79280 . 79654) (punctuation 79106 . 79107) (number 79093 . 79094) (number 79090 . 79091) (number 79087 . 79088) (string 79029 . 79047) (semantic-list 75660 . 75715) (punctuation 75518 . 75519) (number 75505 . 75506) (number 75502 . 75503) (number 75499 . 75500) (string 75481 . 75485) (semantic-list 75404 . 75472) (punctuation 75221 . 75222) (number 75208 . 75209) (number 75199 . 75200) (string 75181 . 75185) (semantic-list 75104 . 75172) (punctuation 74924 . 74925) (number 74911 . 74912) (number 74902 . 74903) (string 74884 . 74888) (semantic-list 74816 . 74875) (punctuation 74642 . 74643) (number 74629 . 74630) (number 74620 . 74621) (string 74603 . 74606) (semantic-list 74535 . 74594) (punctuation 74363 . 74364) (number 74350 . 74351) (number 74341 . 74342) (string 74324 . 74327) (semantic-list 74255 . 74315) (punctuation 74100 . 74101) (number 74087 . 74088) (number 74078 . 74079) (string 74053 . 74056) (semantic-list 65582 . 68085) (punctuation 65343 . 65344) (number 65330 . 65331) (number 65327 . 65328) (number 65324 . 65325) (string 65302 . 65308) (semantic-list 64177 . 65293) (punctuation 63964 . 63965) (number 63951 . 63952) (number 63948 . 63949) (number 63945 . 63946) (string 63923 . 63929) (semantic-list 63569 . 63861) (punctuation 63213 . 63214) (number 63200 . 63201) (number 63197 . 63198) (number 63194 . 63195) (string 63133 . 63152) (semantic-list 61220 . 62208) (punctuation 60966 . 60967) (number 60953 . 60954) (number 60950 . 60951) (number 60947 . 60948) (string 60864 . 60888) (semantic-list 60178 . 60855) (punctuation 59844 . 59845) (number 59831 . 59832) (number 59828 . 59829) (number 59825 . 59826) (string 59739 . 59764) (semantic-list 58581 . 59730) (punctuation 58429 . 58430) (number 58416 . 58417) (number 58413 . 58414) (number 58410 . 58411) (string 58345 . 58363) (semantic-list 56643 . 58263) (punctuation 56455 . 56456) (string 56419 . 56443) (number 56416 . 56417) (number 56413 . 56414) (string 56339 . 56360) (semantic-list 54187 . 56330) (punctuation 53439 . 53440) (string 53403 . 53427) (number 53400 . 53401) (number 53397 . 53398) (string 53323 . 53344) (semantic-list 52162 . 53314) (punctuation 51272 . 51273) (string 51229 . 51260) (number 51226 . 51227) (number 51223 . 51224) (string 51128 . 51156) (semantic-list 49846 . 50128) (punctuation 49262 . 49263) (number 49249 . 49250) (number 49235 . 49236) (string 49189 . 49203) (semantic-list 49103 . 49180) (punctuation 48891 . 48892) (number 48878 . 48879) (number 48875 . 48876) (number 48872 . 48873) (string 48829 . 48842) (semantic-list 45949 . 46083) (punctuation 45703 . 45704) (number 45690 . 45691) (number 45687 . 45688) (number 45684 . 45685) (string 45635 . 45650) (semantic-list 45513 . 45626) (punctuation 45336 . 45337) (number 45323 . 45324) (number 45320 . 45321) (number 45317 . 45318) (string 45265 . 45281) (semantic-list 42425 . 42559) (punctuation 42349 . 42350) (number 42336 . 42337) (number 42333 . 42334) (number 42330 . 42331) (string 42250 . 42273) (semantic-list 41878 . 42241) (punctuation 41674 . 41675) (number 41661 . 41662) (number 41658 . 41659) (number 41655 . 41656) (string 41569 . 41594) (semantic-list 41184 . 41560) (punctuation 40643 . 40644) (number 40630 . 40631) (number 40627 . 40628) (number 40624 . 40625) (string 40547 . 40569) (semantic-list 34661 . 34738) (punctuation 34550 . 34551) (number 34537 . 34538) (number 34534 . 34535) (number 34531 . 34532) (string 34512 . 34517) (semantic-list 34363 . 34503) (punctuation 34178 . 34179) (number 34165 . 34166) (number 34162 . 34163) (number 34159 . 34160) (string 34113 . 34127) (semantic-list 25640 . 25798) (punctuation 25245 . 25246) (number 25232 . 25233) (number 25229 . 25230) (number 25226 . 25227) (string 25165 . 25184) (semantic-list 23142 . 24292) (punctuation 22962 . 22963) (number 22949 . 22950) (number 22946 . 22947) (number 22943 . 22944) (string 22885 . 22903) (semantic-list 22766 . 22876) (punctuation 22669 . 22670) (number 22656 . 22657) (number 22653 . 22654) (number 22650 . 22651) (string 22613 . 22624) (semantic-list 22321 . 22604) (punctuation 22000 . 22001) (number 21987 . 21988) (number 21984 . 21985) (number 21981 . 21982) (string 21941 . 21953) (semantic-list 21846 . 21932) (punctuation 21721 . 21722) (number 21708 . 21709) (number 21705 . 21706) (number 21702 . 21703) (string 21668 . 21678) (semantic-list 20486 . 21659) (punctuation 19951 . 19952) (number 19938 . 19939) (number 19935 . 19936) (number 19932 . 19933) (string 19898 . 19908) (semantic-list 19185 . 19889) (punctuation 19048 . 19049) (number 19035 . 19036) (number 19032 . 19033) (number 19029 . 19030) (string 19007 . 19013) (semantic-list 18894 . 18998) (punctuation 18820 . 18821) (number 18807 . 18808) (number 18804 . 18805) (number 18801 . 18802) (string 18758 . 18771) (semantic-list 18683 . 18749) (punctuation 18619 . 18620) (number 18606 . 18607) (number 18603 . 18604) (number 18600 . 18601) (string 18554 . 18568) (semantic-list 18476 . 18545) (punctuation 18382 . 18383) (number 18369 . 18370) (number 18366 . 18367) (number 18363 . 18364) (string 18308 . 18325) (semantic-list 18134 . 18299) (punctuation 18035 . 18036) (number 18022 . 18023) (number 18019 . 18020) (number 18016 . 18017) (string 17973 . 17986) (semantic-list 17816 . 17964) (punctuation 17730 . 17731) (number 17717 . 17718) (number 17714 . 17715) (number 17711 . 17712) (string 17671 . 17683) (semantic-list 17574 . 17662) (punctuation 17487 . 17488) (number 17474 . 17475) (number 17471 . 17472) (number 17468 . 17469) (string 17437 . 17446) (semantic-list 16331 . 17161) (punctuation 16142 . 16143) (number 16129 . 16130) (number 16126 . 16127) (number 16123 . 16124) (string 16095 . 16103) (semantic-list 15934 . 16038) (punctuation 15823 . 15824) (number 15810 . 15811) (number 15807 . 15808) (number 15804 . 15805) (string 15776 . 15784) (semantic-list 15663 . 15767) (punctuation 15552 . 15553) (number 15539 . 15540) (number 15536 . 15537) (number 15533 . 15534) (string 15505 . 15513) (semantic-list 15465 . 15496) (punctuation 15372 . 15373) (number 15359 . 15360) (number 15356 . 15357) (number 15353 . 15354) (string 15319 . 15329) (semantic-list 15286 . 15310) (punctuation 15006 . 15007) (number 14993 . 14994) (number 14990 . 14991) (number 14987 . 14988) (string 14968 . 14973) (semantic-list 14928 . 14959) (punctuation 14835 . 14836) (number 14822 . 14823) (number 14819 . 14820) (number 14816 . 14817) (string 14782 . 14792) (semantic-list 14749 . 14773) (punctuation 14469 . 14470) (number 14456 . 14457) (number 14453 . 14454) (number 14450 . 14451) (string 14431 . 14436) (semantic-list 14318 . 14376) (punctuation 14241 . 14242) (number 14228 . 14229) (number 14225 . 14226) (number 14222 . 14223) (string 14145 . 14167) (semantic-list 14080 . 14136) (punctuation 14016 . 14017) (number 14003 . 14004) (number 14000 . 14001) (number 13997 . 13998) (string 13969 . 13977) (semantic-list 13903 . 13960) (punctuation 13838 . 13839) (number 13825 . 13826) (number 13822 . 13823) (number 13819 . 13820) (string 13788 . 13797) (semantic-list 13723 . 13779) (CONST 13693 . 13698) (punctuation 13691 . 13692) (punctuation 13618 . 13619) (number 13605 . 13606) (number 13602 . 13603) (number 13599 . 13600) (string 13571 . 13579) (semantic-list 13485 . 13562) (punctuation 13408 . 13409) (number 13395 . 13396) (number 13392 . 13393) (number 13389 . 13390) (string 13318 . 13338) (semantic-list 13243 . 13309) (CONST 13213 . 13218) (punctuation 13211 . 13212) (punctuation 13125 . 13126) (number 13112 . 13113) (number 13109 . 13110) (number 13106 . 13107) (string 13075 . 13084) (semantic-list 12928 . 13066) (CONST 12898 . 12903) (punctuation 12896 . 12897) (punctuation 12825 . 12826) (number 12812 . 12813) (number 12809 . 12810) (number 12806 . 12807) (string 12775 . 12784) (semantic-list 12688 . 12766) (punctuation 12583 . 12584) (number 12570 . 12571) (number 12567 . 12568) (number 12564 . 12565) (string 12497 . 12518) (semantic-list 12430 . 12488) (CONST 12400 . 12405) (punctuation 12398 . 12399) (punctuation 12338 . 12339) (number 12325 . 12326) (number 12322 . 12323) (number 12319 . 12320) (string 12285 . 12295) (semantic-list 12195 . 12275) (CONST 12156 . 12161) (punctuation 12154 . 12155) (punctuation 12081 . 12082) (number 12068 . 12069) (number 12065 . 12066) (number 12062 . 12063) (string 12004 . 12022) (semantic-list 11944 . 11995) (CONST 11914 . 11919) (punctuation 11912 . 11913) (punctuation 11823 . 11824) (number 11804 . 11805) (number 11801 . 11802) (string 11740 . 11759) (semantic-list 11672 . 11731) (punctuation 11584 . 11585) (number 11571 . 11572) (number 11568 . 11569) (number 11565 . 11566) (string 11488 . 11510) (semantic-list 11424 . 11479) (punctuation 11348 . 11349) (number 11335 . 11336) (number 11332 . 11333) (number 11329 . 11330) (string 11304 . 11311) (semantic-list 11006 . 11063) (punctuation 10924 . 10925) (number 10911 . 10912) (number 10908 . 10909) (number 10905 . 10906) (string 10874 . 10883) (semantic-list 10808 . 10865) (punctuation 10735 . 10736) (number 10722 . 10723) (number 10719 . 10720) (number 10716 . 10717) (string 10685 . 10694) (semantic-list 10585 . 10676) (punctuation 10493 . 10494) (number 10480 . 10481) (number 10477 . 10478) (number 10474 . 10475) (string 10437 . 10448) (semantic-list 10372 . 10428) (punctuation 10288 . 10289) (number 10275 . 10276) (number 10272 . 10273) (number 10269 . 10270) (string 10241 . 10249) (semantic-list 10169 . 10232) (punctuation 10099 . 10100) (number 10086 . 10087) (number 10083 . 10084) (number 10080 . 10081) (string 10031 . 10046) (semantic-list 9940 . 10022) (punctuation 9861 . 9862) (number 9848 . 9849) (number 9845 . 9846) (number 9842 . 9843) (string 9759 . 9783) (semantic-list 9688 . 9750) (punctuation 9619 . 9620) (number 9606 . 9607) (number 9603 . 9604) (number 9600 . 9601) (string 9554 . 9568) (semantic-list 9459 . 9545) (punctuation 9318 . 9319) (number 9305 . 9306) (number 9302 . 9303) (number 9299 . 9300) (string 9228 . 9248) (semantic-list 9162 . 9219) (CONST 9132 . 9137) (punctuation 9130 . 9131) (punctuation 9072 . 9073) (number 9059 . 9060) (number 9056 . 9057) (number 9053 . 9054) (string 9022 . 9031) (semantic-list 8956 . 9013) (punctuation 8891 . 8892) (number 8878 . 8879) (number 8875 . 8876) (number 8872 . 8873) (string 8841 . 8850) (semantic-list 8775 . 8832) (punctuation 8710 . 8711) (number 8697 . 8698) (number 8694 . 8695) (number 8691 . 8692) (string 8660 . 8669) (semantic-list 8492 . 8651) (punctuation 8325 . 8326) (number 8312 . 8313) (number 8309 . 8310) (number 8306 . 8307) (string 8272 . 8282) (semantic-list 8128 . 8185) (CONST 8098 . 8103) (punctuation 8096 . 8097) (punctuation 8038 . 8039) (number 8025 . 8026) (number 8022 . 8023) (number 8019 . 8020) (string 7988 . 7997) (semantic-list 7906 . 7978) (CONST 7876 . 7881) (punctuation 7874 . 7875) (punctuation 7794 . 7795) (number 7781 . 7782) (number 7778 . 7779) (number 7775 . 7776) (string 7747 . 7755) (semantic-list 7666 . 7738) (CONST 7636 . 7641) (punctuation 7634 . 7635) (punctuation 7526 . 7527) (number 7513 . 7514) (number 7510 . 7511) (number 7507 . 7508) (string 7482 . 7489) (semantic-list 7418 . 7473) (CONST 7388 . 7393) (punctuation 7386 . 7387) (punctuation 7301 . 7302) (number 7288 . 7289) (number 7285 . 7286) (number 7282 . 7283) (string 7260 . 7266) (semantic-list 7196 . 7251) (CONST 7166 . 7171) (punctuation 7164 . 7165) (punctuation 7103 . 7104) (number 7090 . 7091) (number 7087 . 7088) (number 7084 . 7085) (string 7059 . 7066) (semantic-list 4880 . 7050) (punctuation 4703 . 4704) (number 4690 . 4691) (number 4687 . 4688) (number 4684 . 4685) (string 4653 . 4662) (semantic-list 4590 . 4644) (CONST 4560 . 4565) (punctuation 4558 . 4559) (punctuation 4479 . 4480) (number 4466 . 4467) (number 4463 . 4464) (number 4460 . 4461) (string 4438 . 4444) (semantic-list 4373 . 4429) (CONST 4327 . 4332) (punctuation 4325 . 4326) (punctuation 4248 . 4249) (number 4235 . 4236) (number 4232 . 4233) (number 4229 . 4230) (string 4213 . 4217) (punctuation 118824 . 118825) (semantic-list 118799 . 118824) (semantic-list 106394 . 108487) (punctuation 106211 . 106212) (number 106198 . 106199) (number 106195 . 106196) (number 106192 . 106193) (string 106088 . 106119) (semantic-list 105739 . 106079) (punctuation 105584 . 105585) (number 105571 . 105572) (number 105568 . 105569) (number 105565 . 105566) (string 105464 . 105494) (semantic-list 104734 . 105455) (punctuation 104522 . 104523) (number 104509 . 104510) (number 104506 . 104507) (number 104503 . 104504) (string 104441 . 104458) (semantic-list 104363 . 104432) (punctuation 104209 . 104210) (number 104196 . 104197) (number 104193 . 104194) (number 104190 . 104191) (string 104116 . 104137) (semantic-list 104031 . 104107) (punctuation 103767 . 103768) (number 103754 . 103755) (number 103751 . 103752) (number 103748 . 103749) (string 103653 . 103681) (semantic-list 103570 . 103644) (punctuation 103310 . 103311) (number 103297 . 103298) (number 103294 . 103295) (number 103291 . 103292) (string 103202 . 103228) (semantic-list 103126 . 103193) (punctuation 102867 . 102868) (number 102854 . 102855) (number 102851 . 102852) (number 102848 . 102849) (string 102780 . 102799) (semantic-list 102697 . 102771) (punctuation 102428 . 102429) (number 102415 . 102416) (number 102412 . 102413) (number 102409 . 102410) (string 102320 . 102346) (semantic-list 96394 . 96498) (CONST 96378 . 96383) (punctuation 96376 . 96377) (punctuation 96203 . 96204) (number 96190 . 96191) (number 96187 . 96188) (number 96184 . 96185) (string 96147 . 96158) (semantic-list 95966 . 96138) (punctuation 95855 . 95856) (number 95842 . 95843) (number 95839 . 95840) (number 95836 . 95837) (string 95808 . 95816) (semantic-list 95529 . 95799) (punctuation 95390 . 95391) (number 95377 . 95378) (number 95374 . 95375) (number 95371 . 95372) (string 95351 . 95355) (semantic-list 95073 . 95342) (punctuation 94935 . 94936) (number 94922 . 94923) (number 94919 . 94920) (number 94916 . 94917) (string 94896 . 94900) (semantic-list 93475 . 94369) (punctuation 93275 . 93276) (number 93262 . 93263) (number 93259 . 93260) (number 93256 . 93257) (string 93237 . 93242) (semantic-list 92679 . 93228) (punctuation 92456 . 92457) (number 92443 . 92444) (number 92440 . 92441) (number 92437 . 92438) (string 92403 . 92413) (semantic-list 92217 . 92394) (punctuation 92019 . 92020) (number 92006 . 92007) (number 91997 . 91998) (string 91969 . 91977) (semantic-list 91783 . 91960) (punctuation 91595 . 91596) (number 91582 . 91583) (number 91573 . 91574) (string 91545 . 91553) (semantic-list 91358 . 91536) (punctuation 91169 . 91170) (number 91156 . 91157) (number 91147 . 91148) (string 91119 . 91127) (semantic-list 91057 . 91110) (punctuation 90816 . 90817) (number 90803 . 90804) (number 90794 . 90795) (string 90775 . 90780) (semantic-list 90713 . 90766) (punctuation 90473 . 90474) (number 90460 . 90461) (number 90451 . 90452) (string 90432 . 90437) (semantic-list 88987 . 89934) (punctuation 88814 . 88815) (number 88801 . 88802) (number 88798 . 88799) (number 88795 . 88796) (string 88776 . 88781) (semantic-list 88330 . 88767) (punctuation 88208 . 88209) (number 88195 . 88196) (number 88192 . 88193) (number 88189 . 88190) (string 88172 . 88175) (semantic-list 87432 . 88163) (punctuation 87135 . 87136) (number 87122 . 87123) (number 87113 . 87114) (string 87096 . 87099) (semantic-list 86913 . 87087) (punctuation 86755 . 86756) (number 86742 . 86743) (number 86733 . 86734) (string 86712 . 86715) (semantic-list 86322 . 86703) (punctuation 86042 . 86043) (number 86029 . 86030) (number 86020 . 86021) (string 85999 . 86002) (semantic-list 85817 . 85990) (punctuation 85663 . 85664) (number 85650 . 85651) (number 85641 . 85642) (string 85622 . 85625) (semantic-list 80194 . 80618) (punctuation 79740 . 79741) (number 79727 . 79728) (number 79724 . 79725) (number 79721 . 79722) (string 79663 . 79681) (semantic-list 79280 . 79654) (punctuation 79106 . 79107) (number 79093 . 79094) (number 79090 . 79091) (number 79087 . 79088) (string 79029 . 79047) (semantic-list 75660 . 75715) (punctuation 75518 . 75519) (number 75505 . 75506) (number 75502 . 75503) (number 75499 . 75500) (string 75481 . 75485) (semantic-list 75404 . 75472) (punctuation 75221 . 75222) (number 75208 . 75209) (number 75199 . 75200) (string 75181 . 75185) (semantic-list 75104 . 75172) (punctuation 74924 . 74925) (number 74911 . 74912) (number 74902 . 74903) (string 74884 . 74888) (semantic-list 74816 . 74875) (punctuation 74642 . 74643) (number 74629 . 74630) (number 74620 . 74621) (string 74603 . 74606) (semantic-list 74535 . 74594) (punctuation 74363 . 74364) (number 74350 . 74351) (number 74341 . 74342) (string 74324 . 74327) (semantic-list 74255 . 74315) (punctuation 74100 . 74101) (number 74087 . 74088) (number 74078 . 74079) (string 74053 . 74056) (semantic-list 65582 . 68085) (punctuation 65343 . 65344) (number 65330 . 65331) (number 65327 . 65328) (number 65324 . 65325) (string 65302 . 65308) (semantic-list 64177 . 65293) (punctuation 63964 . 63965) (number 63951 . 63952) (number 63948 . 63949) (number 63945 . 63946) (string 63923 . 63929) (semantic-list 63569 . 63861) (punctuation 63213 . 63214) (number 63200 . 63201) (number 63197 . 63198) (number 63194 . 63195) (string 63133 . 63152) (semantic-list 61220 . 62208) (punctuation 60966 . 60967) (number 60953 . 60954) (number 60950 . 60951) (number 60947 . 60948) (string 60864 . 60888) (semantic-list 60178 . 60855) (punctuation 59844 . 59845) (number 59831 . 59832) (number 59828 . 59829) (number 59825 . 59826) (string 59739 . 59764) (semantic-list 58581 . 59730) (punctuation 58429 . 58430) (number 58416 . 58417) (number 58413 . 58414) (number 58410 . 58411) (string 58345 . 58363) (semantic-list 56643 . 58263) (punctuation 56455 . 56456) (string 56419 . 56443) (number 56416 . 56417) (number 56413 . 56414) (string 56339 . 56360) (semantic-list 54187 . 56330) (punctuation 53439 . 53440) (string 53403 . 53427) (number 53400 . 53401) (number 53397 . 53398) (string 53323 . 53344) (semantic-list 52162 . 53314) (punctuation 51272 . 51273) (string 51229 . 51260) (number 51226 . 51227) (number 51223 . 51224) (string 51128 . 51156) (semantic-list 49846 . 50128) (punctuation 49262 . 49263) (number 49249 . 49250) (number 49235 . 49236) (string 49189 . 49203) (semantic-list 49103 . 49180) (punctuation 48891 . 48892) (number 48878 . 48879) (number 48875 . 48876) (number 48872 . 48873) (string 48829 . 48842) (semantic-list 45949 . 46083) (punctuation 45703 . 45704) (number 45690 . 45691) (number 45687 . 45688) (number 45684 . 45685) (string 45635 . 45650) (semantic-list 45513 . 45626) (punctuation 45336 . 45337) (number 45323 . 45324) (number 45320 . 45321) (number 45317 . 45318) (string 45265 . 45281) (semantic-list 42425 . 42559) (punctuation 42349 . 42350) (number 42336 . 42337) (number 42333 . 42334) (number 42330 . 42331) (string 42250 . 42273) (semantic-list 41878 . 42241) (punctuation 41674 . 41675) (number 41661 . 41662) (number 41658 . 41659) (number 41655 . 41656) (string 41569 . 41594) (semantic-list 41184 . 41560) (punctuation 40643 . 40644) (number 40630 . 40631) (number 40627 . 40628) (number 40624 . 40625) (string 40547 . 40569) (semantic-list 34661 . 34738) (punctuation 34550 . 34551) (number 34537 . 34538) (number 34534 . 34535) (number 34531 . 34532) (string 34512 . 34517) (semantic-list 34363 . 34503) (punctuation 34178 . 34179) (number 34165 . 34166) (number 34162 . 34163) (number 34159 . 34160) (string 34113 . 34127) (semantic-list 25640 . 25798) (punctuation 25245 . 25246) (number 25232 . 25233) (number 25229 . 25230) (number 25226 . 25227) (string 25165 . 25184) (semantic-list 23142 . 24292) (punctuation 22962 . 22963) (number 22949 . 22950) (number 22946 . 22947) (number 22943 . 22944) (string 22885 . 22903) (semantic-list 22766 . 22876) (punctuation 22669 . 22670) (number 22656 . 22657) (number 22653 . 22654) (number 22650 . 22651) (string 22613 . 22624) (semantic-list 22321 . 22604) (punctuation 22000 . 22001) (number 21987 . 21988) (number 21984 . 21985) (number 21981 . 21982) (string 21941 . 21953) (semantic-list 21846 . 21932) (punctuation 21721 . 21722) (number 21708 . 21709) (number 21705 . 21706) (number 21702 . 21703) (string 21668 . 21678) (semantic-list 20486 . 21659) (punctuation 19951 . 19952) (number 19938 . 19939) (number 19935 . 19936) (number 19932 . 19933) (string 19898 . 19908) (semantic-list 19185 . 19889) (punctuation 19048 . 19049) (number 19035 . 19036) (number 19032 . 19033) (number 19029 . 19030) (string 19007 . 19013) (semantic-list 18894 . 18998) (punctuation 18820 . 18821) (number 18807 . 18808) (number 18804 . 18805) (number 18801 . 18802) (string 18758 . 18771) (semantic-list 18683 . 18749) (punctuation 18619 . 18620) (number 18606 . 18607) (number 18603 . 18604) (number 18600 . 18601) (string 18554 . 18568) (semantic-list 18476 . 18545) (punctuation 18382 . 18383) (number 18369 . 18370) (number 18366 . 18367) (number 18363 . 18364) (string 18308 . 18325) (semantic-list 18134 . 18299) (punctuation 18035 . 18036) (number 18022 . 18023) (number 18019 . 18020) (number 18016 . 18017) (string 17973 . 17986) (semantic-list 17816 . 17964) (punctuation 17730 . 17731) (number 17717 . 17718) (number 17714 . 17715) (number 17711 . 17712) (string 17671 . 17683) (semantic-list 17574 . 17662) (punctuation 17487 . 17488) (number 17474 . 17475) (number 17471 . 17472) (number 17468 . 17469) (string 17437 . 17446) (semantic-list 16331 . 17161) (punctuation 16142 . 16143) (number 16129 . 16130) (number 16126 . 16127) (number 16123 . 16124) (string 16095 . 16103) (semantic-list 15934 . 16038) (punctuation 15823 . 15824) (number 15810 . 15811) (number 15807 . 15808) (number 15804 . 15805) (string 15776 . 15784) (semantic-list 15663 . 15767) (punctuation 15552 . 15553) (number 15539 . 15540) (number 15536 . 15537) (number 15533 . 15534) (string 15505 . 15513) (semantic-list 15465 . 15496) (punctuation 15372 . 15373) (number 15359 . 15360) (number 15356 . 15357) (number 15353 . 15354) (string 15319 . 15329) (semantic-list 15286 . 15310) (punctuation 15006 . 15007) (number 14993 . 14994) (number 14990 . 14991) (number 14987 . 14988) (string 14968 . 14973) (semantic-list 14928 . 14959) (punctuation 14835 . 14836) (number 14822 . 14823) (number 14819 . 14820) (number 14816 . 14817) (string 14782 . 14792) (semantic-list 14749 . 14773) (punctuation 14469 . 14470) (number 14456 . 14457) (number 14453 . 14454) (number 14450 . 14451) (string 14431 . 14436) (semantic-list 14318 . 14376) (punctuation 14241 . 14242) (number 14228 . 14229) (number 14225 . 14226) (number 14222 . 14223) (string 14145 . 14167) (semantic-list 14080 . 14136) (punctuation 14016 . 14017) (number 14003 . 14004) (number 14000 . 14001) (number 13997 . 13998) (string 13969 . 13977) (semantic-list 13903 . 13960) (punctuation 13838 . 13839) (number 13825 . 13826) (number 13822 . 13823) (number 13819 . 13820) (string 13788 . 13797) (semantic-list 13723 . 13779) (CONST 13693 . 13698) (punctuation 13691 . 13692) (punctuation 13618 . 13619) (number 13605 . 13606) (number 13602 . 13603) (number 13599 . 13600) (string 13571 . 13579) (semantic-list 13485 . 13562) (punctuation 13408 . 13409) (number 13395 . 13396) (number 13392 . 13393) (number 13389 . 13390) (string 13318 . 13338) (semantic-list 13243 . 13309) (CONST 13213 . 13218) (punctuation 13211 . 13212) (punctuation 13125 . 13126) (number 13112 . 13113) (number 13109 . 13110) (number 13106 . 13107) (string 13075 . 13084) (semantic-list 12928 . 13066) (CONST 12898 . 12903) (punctuation 12896 . 12897) (punctuation 12825 . 12826) (number 12812 . 12813) (number 12809 . 12810) (number 12806 . 12807) (string 12775 . 12784) (semantic-list 12688 . 12766) (punctuation 12583 . 12584) (number 12570 . 12571) (number 12567 . 12568) (number 12564 . 12565) (string 12497 . 12518) (semantic-list 12430 . 12488) (CONST 12400 . 12405) (punctuation 12398 . 12399) (punctuation 12338 . 12339) (number 12325 . 12326) (number 12322 . 12323) (number 12319 . 12320) (string 12285 . 12295) (semantic-list 12195 . 12275) (CONST 12156 . 12161) (punctuation 12154 . 12155) (punctuation 12081 . 12082) (number 12068 . 12069) (number 12065 . 12066) (number 12062 . 12063) (string 12004 . 12022) (semantic-list 11944 . 11995) (CONST 11914 . 11919) (punctuation 11912 . 11913) (punctuation 11823 . 11824) (number 11804 . 11805) (number 11801 . 11802) (string 11740 . 11759) (semantic-list 11672 . 11731) (punctuation 11584 . 11585) (number 11571 . 11572) (number 11568 . 11569) (number 11565 . 11566) (string 11488 . 11510) (semantic-list 11424 . 11479) (punctuation 11348 . 11349) (number 11335 . 11336) (number 11332 . 11333) (number 11329 . 11330) (string 11304 . 11311) (semantic-list 11006 . 11063) (punctuation 10924 . 10925) (number 10911 . 10912) (number 10908 . 10909) (number 10905 . 10906) (string 10874 . 10883) (semantic-list 10808 . 10865) (punctuation 10735 . 10736) (number 10722 . 10723) (number 10719 . 10720) (number 10716 . 10717) (string 10685 . 10694) (semantic-list 10585 . 10676) (punctuation 10493 . 10494) (number 10480 . 10481) (number 10477 . 10478) (number 10474 . 10475) (string 10437 . 10448) (semantic-list 10372 . 10428) (punctuation 10288 . 10289) (number 10275 . 10276) (number 10272 . 10273) (number 10269 . 10270) (string 10241 . 10249) (semantic-list 10169 . 10232) (punctuation 10099 . 10100) (number 10086 . 10087) (number 10083 . 10084) (number 10080 . 10081) (string 10031 . 10046) (semantic-list 9940 . 10022) (punctuation 9861 . 9862) (number 9848 . 9849) (number 9845 . 9846) (number 9842 . 9843) (string 9759 . 9783) (semantic-list 9688 . 9750) (punctuation 9619 . 9620) (number 9606 . 9607) (number 9603 . 9604) (number 9600 . 9601) (string 9554 . 9568) (semantic-list 9459 . 9545) (punctuation 9318 . 9319) (number 9305 . 9306) (number 9302 . 9303) (number 9299 . 9300) (string 9228 . 9248) (semantic-list 9162 . 9219) (CONST 9132 . 9137) (punctuation 9130 . 9131) (punctuation 9072 . 9073) (number 9059 . 9060) (number 9056 . 9057) (number 9053 . 9054) (string 9022 . 9031) (semantic-list 8956 . 9013) (punctuation 8891 . 8892) (number 8878 . 8879) (number 8875 . 8876) (number 8872 . 8873) (string 8841 . 8850) (semantic-list 8775 . 8832) (punctuation 8710 . 8711) (number 8697 . 8698) (number 8694 . 8695) (number 8691 . 8692) (string 8660 . 8669) (semantic-list 8492 . 8651) (punctuation 8325 . 8326) (number 8312 . 8313) (number 8309 . 8310) (number 8306 . 8307) (string 8272 . 8282) (semantic-list 8128 . 8185) (CONST 8098 . 8103) (punctuation 8096 . 8097) (punctuation 8038 . 8039) (number 8025 . 8026) (number 8022 . 8023) (number 8019 . 8020) (string 7988 . 7997) (semantic-list 7906 . 7978) (CONST 7876 . 7881) (punctuation 7874 . 7875) (punctuation 7794 . 7795) (number 7781 . 7782) (number 7778 . 7779) (number 7775 . 7776) (string 7747 . 7755) (semantic-list 7666 . 7738) (CONST 7636 . 7641) (punctuation 7634 . 7635) (punctuation 7526 . 7527) (number 7513 . 7514) (number 7510 . 7511) (number 7507 . 7508) (string 7482 . 7489) (semantic-list 7418 . 7473) (CONST 7388 . 7393) (punctuation 7386 . 7387) (punctuation 7301 . 7302) (number 7288 . 7289) (number 7285 . 7286) (number 7282 . 7283) (string 7260 . 7266) (semantic-list 7196 . 7251) (CONST 7166 . 7171) (punctuation 7164 . 7165) (punctuation 7103 . 7104) (number 7090 . 7091) (number 7087 . 7088) (number 7084 . 7085) (string 7059 . 7066) (semantic-list 4880 . 7050) (punctuation 4703 . 4704) (number 4690 . 4691) (number 4687 . 4688) (number 4684 . 4685) (string 4653 . 4662) (semantic-list 4590 . 4644) (CONST 4560 . 4565) (punctuation 4558 . 4559) (punctuation 4479 . 4480) (number 4466 . 4467) (number 4463 . 4464) (number 4460 . 4461) (string 4438 . 4444) (semantic-list 4373 . 4429) (CONST 4327 . 4332) (punctuation 4325 . 4326) (punctuation 4248 . 4249) (number 4235 . 4236) (number 4232 . 4233) (number 4229 . 4230) (string 4213 . 4217) (semantic-list 92679 . 93228) (punctuation 92456 . 92457) (number 92443 . 92444) (number 92440 . 92441) (number 92437 . 92438) (string 92403 . 92413) (semantic-list 92217 . 92394) (punctuation 92019 . 92020) (number 92006 . 92007) (number 91997 . 91998) (string 91969 . 91977) (semantic-list 91783 . 91960) (punctuation 91595 . 91596) (number 91582 . 91583) (number 91573 . 91574) (string 91545 . 91553) (semantic-list 91358 . 91536) (punctuation 91169 . 91170) (number 91156 . 91157) (number 91147 . 91148) (string 91119 . 91127) (semantic-list 91057 . 91110) (punctuation 90816 . 90817) (number 90803 . 90804) (number 90794 . 90795) (string 90775 . 90780) (semantic-list 90713 . 90766) (punctuation 90473 . 90474) (number 90460 . 90461) (number 90451 . 90452) (string 90432 . 90437) (semantic-list 88987 . 89934) (punctuation 88814 . 88815) (number 88801 . 88802) (number 88798 . 88799) (number 88795 . 88796) (string 88776 . 88781) (semantic-list 88330 . 88767) (punctuation 88208 . 88209) (number 88195 . 88196) (number 88192 . 88193) (number 88189 . 88190) (string 88172 . 88175) (semantic-list 87432 . 88163) (punctuation 87135 . 87136) (number 87122 . 87123) (number 87113 . 87114) (string 87096 . 87099) (semantic-list 86913 . 87087) (punctuation 86755 . 86756) (number 86742 . 86743) (number 86733 . 86734) (string 86712 . 86715) (semantic-list 86322 . 86703) (punctuation 86042 . 86043) (number 86029 . 86030) (number 86020 . 86021) (string 85999 . 86002) (semantic-list 85817 . 85990) (punctuation 85663 . 85664) (number 85650 . 85651) (number 85641 . 85642) (string 85622 . 85625) (semantic-list 80194 . 80618) (punctuation 79740 . 79741) (number 79727 . 79728) (number 79724 . 79725) (number 79721 . 79722) (string 79663 . 79681) (semantic-list 79280 . 79654) (punctuation 79106 . 79107) (number 79093 . 79094) (number 79090 . 79091) (number 79087 . 79088) (string 79029 . 79047) (semantic-list 75660 . 75715) (punctuation 75518 . 75519) (number 75505 . 75506) (number 75502 . 75503) (number 75499 . 75500) (string 75481 . 75485) (semantic-list 75404 . 75472) (punctuation 75221 . 75222) (number 75208 . 75209) (number 75199 . 75200) (string 75181 . 75185) (semantic-list 75104 . 75172) (punctuation 74924 . 74925) (number 74911 . 74912) (number 74902 . 74903) (string 74884 . 74888) (semantic-list 74816 . 74875) (punctuation 74642 . 74643) (number 74629 . 74630) (number 74620 . 74621) (string 74603 . 74606) (semantic-list 74535 . 74594) (punctuation 74363 . 74364) (number 74350 . 74351) (number 74341 . 74342) (string 74324 . 74327) (semantic-list 74255 . 74315) (punctuation 74100 . 74101) (number 74087 . 74088) (number 74078 . 74079) (string 74053 . 74056) (semantic-list 65582 . 68085) (punctuation 65343 . 65344) (number 65330 . 65331) (number 65327 . 65328) (number 65324 . 65325) (string 65302 . 65308) (semantic-list 64177 . 65293) (punctuation 63964 . 63965) (number 63951 . 63952) (number 63948 . 63949) (number 63945 . 63946) (string 63923 . 63929) (semantic-list 63569 . 63861) (punctuation 63213 . 63214) (number 63200 . 63201) (number 63197 . 63198) (number 63194 . 63195) (string 63133 . 63152) (semantic-list 61220 . 62208) (punctuation 60966 . 60967) (number 60953 . 60954) (number 60950 . 60951) (number 60947 . 60948) (string 60864 . 60888) (semantic-list 60178 . 60855) (punctuation 59844 . 59845) (number 59831 . 59832) (number 59828 . 59829) (number 59825 . 59826) (string 59739 . 59764) (semantic-list 58581 . 59730) (punctuation 58429 . 58430) (number 58416 . 58417) (number 58413 . 58414) (number 58410 . 58411) (string 58345 . 58363) (semantic-list 56643 . 58263) (punctuation 56455 . 56456) (string 56419 . 56443) (number 56416 . 56417) (number 56413 . 56414) (string 56339 . 56360) (semantic-list 54187 . 56330) (punctuation 53439 . 53440) (string 53403 . 53427) (number 53400 . 53401) (number 53397 . 53398) (string 53323 . 53344) (semantic-list 52162 . 53314) (punctuation 51272 . 51273) (string 51229 . 51260) (number 51226 . 51227) (number 51223 . 51224) (string 51128 . 51156) (semantic-list 49846 . 50128) (punctuation 49262 . 49263) (number 49249 . 49250) (number 49235 . 49236) (string 49189 . 49203) (semantic-list 49103 . 49180) (punctuation 48891 . 48892) (number 48878 . 48879) (number 48875 . 48876) (number 48872 . 48873) (string 48829 . 48842) (semantic-list 45949 . 46083) (punctuation 45703 . 45704) (number 45690 . 45691) (number 45687 . 45688) (number 45684 . 45685) (string 45635 . 45650) (semantic-list 45513 . 45626) (punctuation 45336 . 45337) (number 45323 . 45324) (number 45320 . 45321) (number 45317 . 45318) (string 45265 . 45281) (semantic-list 42425 . 42559) (punctuation 42349 . 42350) (number 42336 . 42337) (number 42333 . 42334) (number 42330 . 42331) (string 42250 . 42273) (semantic-list 41878 . 42241) (punctuation 41674 . 41675) (number 41661 . 41662) (number 41658 . 41659) (number 41655 . 41656) (string 41569 . 41594) (semantic-list 41184 . 41560) (punctuation 40643 . 40644) (number 40630 . 40631) (number 40627 . 40628) (number 40624 . 40625) (string 40547 . 40569) (semantic-list 34661 . 34738) (punctuation 34550 . 34551) (number 34537 . 34538) (number 34534 . 34535) (number 34531 . 34532) (string 34512 . 34517) (semantic-list 34363 . 34503) (punctuation 34178 . 34179) (number 34165 . 34166) (number 34162 . 34163) (number 34159 . 34160) (string 34113 . 34127) (semantic-list 25640 . 25798) (punctuation 25245 . 25246) (number 25232 . 25233) (number 25229 . 25230) (number 25226 . 25227) (string 25165 . 25184) (semantic-list 23142 . 24292) (punctuation 22962 . 22963) (number 22949 . 22950) (number 22946 . 22947) (number 22943 . 22944) (string 22885 . 22903) (semantic-list 22766 . 22876) (punctuation 22669 . 22670) (number 22656 . 22657) (number 22653 . 22654) (number 22650 . 22651) (string 22613 . 22624) (semantic-list 22321 . 22604) (punctuation 22000 . 22001) (number 21987 . 21988) (number 21984 . 21985) (number 21981 . 21982) (string 21941 . 21953) (semantic-list 21846 . 21932) (punctuation 21721 . 21722) (number 21708 . 21709) (number 21705 . 21706) (number 21702 . 21703) (string 21668 . 21678) (semantic-list 20486 . 21659) (punctuation 19951 . 19952) (number 19938 . 19939) (number 19935 . 19936) (number 19932 . 19933) (string 19898 . 19908) (semantic-list 19185 . 19889) (punctuation 19048 . 19049) (number 19035 . 19036) (number 19032 . 19033) (number 19029 . 19030) (string 19007 . 19013) (semantic-list 18894 . 18998) (punctuation 18820 . 18821) (number 18807 . 18808) (number 18804 . 18805) (number 18801 . 18802) (string 18758 . 18771) (semantic-list 18683 . 18749) (punctuation 18619 . 18620) (number 18606 . 18607) (number 18603 . 18604) (number 18600 . 18601) (string 18554 . 18568) (semantic-list 18476 . 18545) (punctuation 18382 . 18383) (number 18369 . 18370) (number 18366 . 18367) (number 18363 . 18364) (string 18308 . 18325) (semantic-list 18134 . 18299) (punctuation 18035 . 18036) (number 18022 . 18023) (number 18019 . 18020) (number 18016 . 18017) (string 17973 . 17986) (semantic-list 17816 . 17964) (punctuation 17730 . 17731) (number 17717 . 17718) (number 17714 . 17715) (number 17711 . 17712) (string 17671 . 17683) (semantic-list 17574 . 17662) (punctuation 17487 . 17488) (number 17474 . 17475) (number 17471 . 17472) (number 17468 . 17469) (string 17437 . 17446) (semantic-list 16331 . 17161) (punctuation 16142 . 16143) (number 16129 . 16130) (number 16126 . 16127) (number 16123 . 16124) (string 16095 . 16103) (semantic-list 15934 . 16038) (punctuation 15823 . 15824) (number 15810 . 15811) (number 15807 . 15808) (number 15804 . 15805) (string 15776 . 15784) (semantic-list 15663 . 15767) (punctuation 15552 . 15553) (number 15539 . 15540) (number 15536 . 15537) (number 15533 . 15534) (string 15505 . 15513) (semantic-list 15465 . 15496) (punctuation 15372 . 15373) (number 15359 . 15360) (number 15356 . 15357) (number 15353 . 15354) (string 15319 . 15329) (semantic-list 15286 . 15310) (punctuation 15006 . 15007) (number 14993 . 14994) (number 14990 . 14991) (number 14987 . 14988) (string 14968 . 14973) (semantic-list 14928 . 14959) (punctuation 14835 . 14836) (number 14822 . 14823) (number 14819 . 14820) (number 14816 . 14817) (string 14782 . 14792) (semantic-list 14749 . 14773) (punctuation 14469 . 14470) (number 14456 . 14457) (number 14453 . 14454) (number 14450 . 14451) (string 14431 . 14436) (semantic-list 14318 . 14376) (punctuation 14241 . 14242) (number 14228 . 14229) (number 14225 . 14226) (number 14222 . 14223) (string 14145 . 14167) (semantic-list 14080 . 14136) (punctuation 14016 . 14017) (number 14003 . 14004) (number 14000 . 14001) (number 13997 . 13998) (string 13969 . 13977) (semantic-list 13903 . 13960) (punctuation 13838 . 13839) (number 13825 . 13826) (number 13822 . 13823) (number 13819 . 13820) (string 13788 . 13797) (semantic-list 13723 . 13779) (CONST 13693 . 13698) (punctuation 13691 . 13692) (punctuation 13618 . 13619) (number 13605 . 13606) (number 13602 . 13603) (number 13599 . 13600) (string 13571 . 13579) (semantic-list 13485 . 13562) (punctuation 13408 . 13409) (number 13395 . 13396) (number 13392 . 13393) (number 13389 . 13390) (string 13318 . 13338) (semantic-list 13243 . 13309) (CONST 13213 . 13218) (punctuation 13211 . 13212) (punctuation 13125 . 13126) (number 13112 . 13113) (number 13109 . 13110) (number 13106 . 13107) (string 13075 . 13084) (semantic-list 12928 . 13066) (CONST 12898 . 12903) (punctuation 12896 . 12897) (punctuation 12825 . 12826) (number 12812 . 12813) (number 12809 . 12810) (number 12806 . 12807) (string 12775 . 12784) (semantic-list 12688 . 12766) (punctuation 12583 . 12584) (number 12570 . 12571) (number 12567 . 12568) (number 12564 . 12565) (string 12497 . 12518) (semantic-list 12430 . 12488) (CONST 12400 . 12405) (punctuation 12398 . 12399) (punctuation 12338 . 12339) (number 12325 . 12326) (number 12322 . 12323) (number 12319 . 12320) (string 12285 . 12295) (semantic-list 12195 . 12275) (CONST 12156 . 12161) (punctuation 12154 . 12155) (punctuation 12081 . 12082) (number 12068 . 12069) (number 12065 . 12066) (number 12062 . 12063) (string 12004 . 12022) (semantic-list 11944 . 11995) (CONST 11914 . 11919) (punctuation 11912 . 11913) (punctuation 11823 . 11824) (number 11804 . 11805) (number 11801 . 11802) (string 11740 . 11759) (semantic-list 11672 . 11731) (punctuation 11584 . 11585) (number 11571 . 11572) (number 11568 . 11569) (number 11565 . 11566) (string 11488 . 11510) (semantic-list 11424 . 11479) (punctuation 11348 . 11349) (number 11335 . 11336) (number 11332 . 11333) (number 11329 . 11330) (string 11304 . 11311) (semantic-list 11006 . 11063) (punctuation 10924 . 10925) (number 10911 . 10912) (number 10908 . 10909) (number 10905 . 10906) (string 10874 . 10883) (semantic-list 10808 . 10865) (punctuation 10735 . 10736) (number 10722 . 10723) (number 10719 . 10720) (number 10716 . 10717) (string 10685 . 10694) (semantic-list 10585 . 10676) (punctuation 10493 . 10494) (number 10480 . 10481) (number 10477 . 10478) (number 10474 . 10475) (string 10437 . 10448) (semantic-list 10372 . 10428) (punctuation 10288 . 10289) (number 10275 . 10276) (number 10272 . 10273) (number 10269 . 10270) (string 10241 . 10249) (semantic-list 10169 . 10232) (punctuation 10099 . 10100) (number 10086 . 10087) (number 10083 . 10084) (number 10080 . 10081) (string 10031 . 10046) (semantic-list 9940 . 10022) (punctuation 9861 . 9862) (number 9848 . 9849) (number 9845 . 9846) (number 9842 . 9843) (string 9759 . 9783) (semantic-list 9688 . 9750) (punctuation 9619 . 9620) (number 9606 . 9607) (number 9603 . 9604) (number 9600 . 9601) (string 9554 . 9568) (semantic-list 9459 . 9545) (punctuation 9318 . 9319) (number 9305 . 9306) (number 9302 . 9303) (number 9299 . 9300) (string 9228 . 9248) (semantic-list 9162 . 9219) (CONST 9132 . 9137) (punctuation 9130 . 9131) (punctuation 9072 . 9073) (number 9059 . 9060) (number 9056 . 9057) (number 9053 . 9054) (string 9022 . 9031) (semantic-list 8956 . 9013) (punctuation 8891 . 8892) (number 8878 . 8879) (number 8875 . 8876) (number 8872 . 8873) (string 8841 . 8850) (semantic-list 8775 . 8832) (punctuation 8710 . 8711) (number 8697 . 8698) (number 8694 . 8695) (number 8691 . 8692) (string 8660 . 8669) (semantic-list 8492 . 8651) (punctuation 8325 . 8326) (number 8312 . 8313) (number 8309 . 8310) (number 8306 . 8307) (string 8272 . 8282) (semantic-list 8128 . 8185) (CONST 8098 . 8103) (punctuation 8096 . 8097) (punctuation 8038 . 8039) (number 8025 . 8026) (number 8022 . 8023) (number 8019 . 8020) (string 7988 . 7997) (semantic-list 7906 . 7978) (CONST 7876 . 7881) (punctuation 7874 . 7875) (punctuation 7794 . 7795) (number 7781 . 7782) (number 7778 . 7779) (number 7775 . 7776) (string 7747 . 7755) (semantic-list 7666 . 7738) (CONST 7636 . 7641) (punctuation 7634 . 7635) (punctuation 7526 . 7527) (number 7513 . 7514) (number 7510 . 7511) (number 7507 . 7508) (string 7482 . 7489) (semantic-list 7418 . 7473) (CONST 7388 . 7393) (punctuation 7386 . 7387) (punctuation 7301 . 7302) (number 7288 . 7289) (number 7285 . 7286) (number 7282 . 7283) (string 7260 . 7266) (semantic-list 7196 . 7251) (CONST 7166 . 7171) (punctuation 7164 . 7165) (punctuation 7103 . 7104) (number 7090 . 7091) (number 7087 . 7088) (number 7084 . 7085) (string 7059 . 7066) (semantic-list 4880 . 7050) (punctuation 4703 . 4704) (number 4690 . 4691) (number 4687 . 4688) (number 4684 . 4685) (string 4653 . 4662) (semantic-list 4590 . 4644) (CONST 4560 . 4565) (punctuation 4558 . 4559) (punctuation 4479 . 4480) (number 4466 . 4467) (number 4463 . 4464) (number 4460 . 4461) (string 4438 . 4444) (semantic-list 4373 . 4429) (CONST 4327 . 4332) (punctuation 4325 . 4326) (punctuation 4248 . 4249) (number 4235 . 4236) (number 4232 . 4233) (number 4229 . 4230) (string 4213 . 4217))
      :lexical-table 
        '(("ULL_MAX" . ((symbol "ULONG_MAX" 97111 . 97120)))
          ("count_trailing_zeros_ll" . ((symbol "count_trailing_zeros_l" 97198 . 97220)))
          ("count_one_bits_ll" . ((symbol "count_one_bits_l" 97148 . 97164)))
          )
)
    (semanticdb-table "semanticdb-table-1afb000"
      :major-mode c-mode
      :tags 
        '( ("BIGNUM_H" variable (:constant-flag t) nil [816 824])
            ("mini-gmp.h" include nil nil [866 888])
            ("lisp.h" include nil nil [897 914])
            ("" type
               (:members 
                  ( ("GMP_NUMB_BITS" variable
                       (:constant-flag t
                        :default-value (999 1021)
                        :type "int")
                        (reparse-symbol enumsubparts) [983 1021]))                  
                :type "enum")
                nil [976 1024])
            ("GCALIGNED_STRUCT" variable (:type ("Lisp_Bignum" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [1033 1122])
            ("Lisp_Bignum" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [1056 1087])
                    ("value" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1090 1102]))                  
                :type "struct")
                nil [1033 1122])
            ("mpz" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type ("mpz_t" type (:type "class") nil nil))
                nil [1124 1144])
            ("init_bignum" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1171 1176]))                  
                :type "void")
                nil [1146 1177])
            ("make_integer_mpz" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1215 1220]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1178 1221])
            ("ARG_NONNULL" function
               (:prototype-flag t
                :type "int")
                nil [1272 1290])
            ("XBIGNUM" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1350 1364]))                  
                :type ("Lisp_Bignum" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1320 1451])
            ("mpz_set_intmax" function
               (:arguments 
                  ( ("result" variable (:type ("mpz_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1499 1512])
                    ("v" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1513 1524]))                  
                :type "int")
                nil [1483 1791])
            ("bignum_integer" function
               (:pointer 1
                :arguments 
                  ( ("tmp" variable
                       (:pointer 1
                        :type ("mpz_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2021 2032])
                    ("i" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2033 2047]))                  
                :type ("mpz_t" type (:type "class") nil nil))
                nil [1997 2172]))          
      :file "bignum.h"
      :pointmax 2215
      :fsize 2214
      :lastmodtime '(23443 29226 319917 989000)
      :unmatched-syntax '((symbol 2174 . 2191) (symbol 1990 . 1996) (semantic-list 1477 . 1482) (symbol 1465 . 1476) (semantic-list 1478 . 1481) (VOID 1460 . 1464) (semantic-list 1478 . 1481) (symbol 1453 . 1459) (symbol 1313 . 1319) (symbol 1292 . 1311) (semantic-list 1285 . 1288) (semantic-list 1254 . 1271) (symbol 1234 . 1253) (VOID 1229 . 1233) (EXTERN 1222 . 1228))
      :lexical-table 
        '(("BIGNUM_H")
          )
)
    (semanticdb-table "semanticdb-table-1afb020"
      :major-mode c-mode
      :tags 
        '( ("EMACS_PURESIZE_H" variable (:constant-flag t) nil [798 814])
            ("lisp.h" include nil nil [816 833])
            ("SYSTEM_PURESIZE_EXTRA" variable (:constant-flag t) nil [1598 1619])
            ("SITELOAD_PURESIZE_EXTRA" variable (:constant-flag t) nil [1670 1693])
            ("BASE_PURESIZE" variable (:constant-flag t) nil [1734 1747])
            ("PURESIZE_RATIO" variable (:constant-flag t) nil [2126 2140])
            ("PURESIZE_CHECKING_RATIO" variable (:constant-flag t) nil [2467 2490])
            ("PURESIZE" variable (:constant-flag t) nil [2579 2587])
            ("pure_write_error" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2696 2708]))                  
                :type "void")
                nil [2656 2709])
            ("pure" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2711 2735])
            ("puresize_h_PURE_P" variable (:constant-flag t) nil [2840 2857])
            ("PURE_P" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [2939 2949]))                  
                :type "bool")
                nil [2926 2987])
            ("puresize_h_CHECK_IMPURE" variable (:constant-flag t) nil [3059 3082])
            ("CHECK_IMPURE" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3175 3191])
                    ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [3192 3202]))                  
                :type "void")
                nil [3156 3244]))          
      :file "puresize.h"
      :pointmax 3444
      :fsize 3443
      :lastmodtime '(23443 29226 323249 937000)
      :unmatched-syntax '((symbol 3395 . 3412) (symbol 3149 . 3155) (symbol 2919 . 2925) (symbol 835 . 854))
      :lexical-table 
        '(("BASE_PURESIZE" . ((semantic-list "(2000000 + SYSTEM_PURESIZE_EXTRA + SITELOAD_PURESIZE_EXTRA)" 1748 . 1807)))
          ("SITELOAD_PURESIZE_EXTRA" . ((number "0" 1694 . 1695)))
          ("EMACS_PURESIZE_H")
          ("SYSTEM_PURESIZE_EXTRA" . ((number "0" 1620 . 1621)))
          ("PURESIZE_RATIO" . ((number "1" 2141 . 2142)))
          ("puresize_h_PURE_P" (spp-arg-list ("ptr") 2857 . 2862) . ((semantic-list "((uintptr_t) (ptr) - (uintptr_t) pure <= PURESIZE)" 2867 . 2917)))
          ("PURESIZE_CHECKING_RATIO" . ((number "1" 2491 . 2492)))
          ("PURESIZE" . ((semantic-list "(BASE_PURESIZE * PURESIZE_RATIO * PURESIZE_CHECKING_RATIO)" 2589 . 2647)))
          ("puresize_h_CHECK_IMPURE" (spp-arg-list ("obj" "ptr") 3082 . 3092) . ((semantic-list "(PURE_P (ptr) ? pure_write_error (obj) : (void) 0)" 3097 . 3147)))
          )
)
    (semanticdb-table "semanticdb-table-1afb040"
      :major-mode c-mode
      :tags nil
      :file "process.h"
      :pointmax 9915
      :fsize 9914
      :lastmodtime '(23443 29226 323249 937000)
      :unmatched-syntax '((symbol 9867 . 9884) (TYPEDEF 9283 . 9290) (symbol 8094 . 8100) (symbol 8004 . 8010) (symbol 7626 . 7632) (symbol 7536 . 7542) (symbol 7452 . 7458) (symbol 948 . 967))
      :lexical-table 
        '(("ChannelMask" (spp-arg-list ("n") 7902 . 7905) . ((semantic-list "(1 << (n))" 7906 . 7916)))
          ("EMACS_PROCESS_H")
          )
)
    (semanticdb-table "semanticdb-table-1afb060"
      :major-mode c-mode
      :tags nil
      :file "frame.h"
      :pointmax 55799
      :fsize 55798
      :lastmodtime '(23443 29226 319917 989000)
      :unmatched-syntax '((symbol 55456 . 55473) (symbol 54544 . 54550) (symbol 44566 . 44572) (symbol 44455 . 44461) (symbol 44297 . 44303) (symbol 44124 . 44130) (symbol 43973 . 43979) (symbol 43867 . 43873) (symbol 43722 . 43728) (symbol 43294 . 43300) (symbol 41632 . 41638) (symbol 40409 . 40415) (symbol 22732 . 22738) (symbol 22510 . 22516) (symbol 22425 . 22431) (symbol 21719 . 21725) (symbol 21639 . 21645) (symbol 21539 . 21545) (symbol 21447 . 21453) (symbol 21355 . 21361) (symbol 21263 . 21269) (symbol 21185 . 21191) (symbol 20897 . 20903) (symbol 20799 . 20805) (symbol 20711 . 20717) (symbol 20619 . 20625) (symbol 20395 . 20401) (symbol 20283 . 20289) (symbol 20177 . 20183) (symbol 20085 . 20091) (semantic-list 11571 . 11586) (symbol 11563 . 11570) (semantic-list 11571 . 11586) (symbol 11563 . 11570) (symbol 840 . 859))
      :lexical-table 
        '(("FRAME_W32_P" (spp-arg-list ("f") 23656 . 23659) . ((symbol "false" 23660 . 23665)))
          ("FRAME_PIXEL_WIDTH" (spp-arg-list ("f") 25999 . 26002) . ((semantic-list "((f)->pixel_width)" 26003 . 26021)))
          ("FRAME_HAS_HORIZONTAL_SCROLL_BARS" (spp-arg-list ("f") 32878 . 32881) . ((semantic-list "((void) (f), 0)" 32882 . 32897)))
          ("FRAME_TOTAL_COLS" (spp-arg-list ("f") 35956 . 35959) . ((semantic-list "((f)->total_cols)" 35960 . 35977)))
          ("FRAME_CONDEMNED_SCROLL_BARS" (spp-arg-list ("f") 37648 . 37651) . ((semantic-list "(f->condemned_scroll_bars)" 37652 . 37678)))
          ("FRAME_BLINK_OFF_CURSOR" (spp-arg-list ("f") 37883 . 37886) . ((semantic-list "((f)->blink_off_cursor)" 37887 . 37910)))
          ("FRAME_MESSAGE_BUF_SIZE" (spp-arg-list ("f") 38449 . 38452) . ((semantic-list "(((int) FRAME_COLS (f)) * 4)" 38453 . 38481)))
          ("FRAME_SMALLEST_CHAR_WIDTH" (spp-arg-list ("f") 50165 . 50168) . 
              ((symbol "FRAME_DISPLAY_INFO" 50174 . 50192) (semantic-list "(f)" 50193 . 50196) (punctuation "-" 50196 . 50197) (punctuation ">" 50197 . 50198) (symbol "smallest_char_width" 50198 . 50217)))
          ("XSETFRAME" (spp-arg-list ("a" "b") 23222 . 23228) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_FRAME))" 23229 . 23266)))
          ("FRAME_WINDOW_P" (spp-arg-list ("f") 24350 . 24353) . ((semantic-list "((void) (f), false)" 24354 . 24373)))
          ("FRAME_EXTERNAL_TOOL_BAR" (spp-arg-list ("f") 27300 . 27303) . ((symbol "false" 27304 . 27309)))
          ("FRAME_EXTERNAL_MENU_BAR" (spp-arg-list ("f") 28290 . 28293) . ((symbol "false" 28294 . 28299)))
          ("FRAME_DELETEN_COST" (spp-arg-list ("f") 29895 . 29898) . 
              ((semantic-list "(f)" 29899 . 29902) (punctuation "-" 29902 . 29903) (punctuation ">" 29903 . 29904) (symbol "delete_n_lines_cost" 29904 . 29923)))
          ("FRAME_NO_FOCUS_ON_MAP" (spp-arg-list ("f") 32249 . 32252) . ((semantic-list "((void) (f), 0)" 32253 . 32268)))
          ("SET_FRAME_COLS" (spp-arg-list ("f" "width") 36253 . 36263) . ((semantic-list "((f)->text_cols = (width),						\\
   (f)->total_cols = ((width)						\\
		      + FRAME_SCROLL_BAR_COLS (f)			\\
		      + FRAME_FRINGE_COLS (f)))" 36272 . 36416)))
          ("FRAME_TEXT_TO_PIXEL_HEIGHT" (spp-arg-list ("f" "height") 49098 . 49109) . ((semantic-list "((height)					     \\
   + FRAME_TOP_MARGIN_HEIGHT (f)		     \\
   + FRAME_SCROLL_BAR_AREA_HEIGHT (f)		     \\
   + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 49119 . 49268)))
          ("FRAME_PIXEL_TO_TEXT_HEIGHT" (spp-arg-list ("f" "height") 49580 . 49591) . ((semantic-list "((height)						\\
   - FRAME_TOP_MARGIN_HEIGHT (f)			\\
   - FRAME_SCROLL_BAR_AREA_HEIGHT (f)			\\
   - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 49597 . 49734)))
          ("FRAME_SMALLEST_FONT_HEIGHT" (spp-arg-list ("f") 50313 . 50316) . 
              ((symbol "FRAME_DISPLAY_INFO" 50322 . 50340) (semantic-list "(f)" 50341 . 50344) (punctuation "-" 50344 . 50345) (punctuation ">" 50345 . 50346) (symbol "smallest_font_height" 50346 . 50366)))
          ("FRAME_VISIBLE_P" (spp-arg-list ("f") 28376 . 28379) . 
              ((semantic-list "(f)" 28380 . 28383) (punctuation "-" 28383 . 28384) (punctuation ">" 28384 . 28385) (symbol "visible" 28385 . 28392)))
          ("FRAME_HAS_VERTICAL_SCROLL_BARS" (spp-arg-list ("f") 30740 . 30743) . ((semantic-list "((void) (f), 0)" 30744 . 30759)))
          ("FRAME_OVERRIDE_REDIRECT" (spp-arg-list ("f") 32105 . 32108) . ((semantic-list "((void) (f), 0)" 32109 . 32124)))
          ("FRAME_NO_ACCEPT_FOCUS" (spp-arg-list ("f") 32298 . 32301) . ((semantic-list "((void) (f), 0)" 32302 . 32317)))
          ("FRAME_CONFIG_SCROLL_BAR_WIDTH" (spp-arg-list ("f") 33095 . 33098) . ((semantic-list "((f)->config_scroll_bar_width)" 33099 . 33129)))
          ("FRAME_LEFT_SCROLL_BAR_COLS" (spp-arg-list ("f") 34531 . 34534) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_LEFT (f)		\\
   ? FRAME_CONFIG_SCROLL_BAR_COLS (f)			\\
   : 0)" 34541 . 34637)))
          ("FRAME_CURSOR_WIDTH" (spp-arg-list ("f") 37937 . 37940) . ((semantic-list "((f)->cursor_width)" 37941 . 37960)))
          ("CHECK_LIVE_FRAME" (spp-arg-list ("x") 38571 . 38574) . ((symbol "CHECK_TYPE" 38579 . 38589) (semantic-list "(FRAMEP (x) && FRAME_LIVE_P (XFRAME (x)), Qframe_live_p, x)" 38590 . 38649)))
          ("SET_FRAME_ICONIFIED" (spp-arg-list ("f" "i") 40719 . 40725) . 
              ((semantic-list "(f)" 40732 . 40735) (punctuation "-" 40735 . 40736) (punctuation ">" 40736 . 40737) (symbol "iconified" 40737 . 40746) (punctuation "=" 40747 . 40748) (semantic-list "(eassert (0 <= (i) && (i) <= 1), (i))" 40749 . 40786)))
          ("FRAME_PIXEL_X_FROM_CANON_X" (spp-arg-list ("F" "X") 45278 . 45284) . ((semantic-list "((int) (XFLOATINT (X) * FRAME_COLUMN_WIDTH (F)))" 45290 . 45338)))
          ("MOUSE_HL_INFO" (spp-arg-list ("F") 25339 . 25342) . ((semantic-list "(&(F)->output_data.tty->display_info->mouse_highlight)" 25351 . 25405)))
          ("FRAME_HAS_MINIBUF_P" (spp-arg-list ("f") 25834 . 25837) . ((semantic-list "(WINDOWP (f->minibuffer_window)				\\
   && XFRAME (XWINDOW (f->minibuffer_window)->frame) == f)" 25846 . 25941)))
          ("FRAME_MINIBUF_WINDOW" (spp-arg-list ("f") 29466 . 29469) . 
              ((symbol "f" 29470 . 29471) (punctuation "-" 29471 . 29472) (punctuation ">" 29472 . 29473) (symbol "minibuffer_window" 29473 . 29490)))
          ("FRAME_ROOT_WINDOW" (spp-arg-list ("f") 29571 . 29574) . 
              ((symbol "f" 29575 . 29576) (punctuation "-" 29576 . 29577) (punctuation ">" 29577 . 29578) (symbol "root_window" 29578 . 29589)))
          ("FRAME_LEFT_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("f") 33938 . 33941) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_LEFT (f)				\\
   ? FRAME_CONFIG_SCROLL_BAR_WIDTH (f)					\\
   : 0)" 33949 . 34050)))
          ("FRAME_RIGHT_SCROLL_BAR_COLS" (spp-arg-list ("f") 34894 . 34897) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_RIGHT (f)		\\
   ? FRAME_CONFIG_SCROLL_BAR_COLS (f)			\\
   : 0)" 34904 . 35001)))
          ("FRAME_DESIRED_CURSOR" (spp-arg-list ("f") 37827 . 37830) . ((semantic-list "((f)->desired_cursor)" 37831 . 37852)))
          ("FRAME_CANON_Y_FROM_PIXEL_Y" (spp-arg-list ("F" "Y") 46314 . 46320) . ((semantic-list "((Y) % FRAME_LINE_HEIGHT (F)					\\
   ? make_float ((double) (Y) / FRAME_LINE_HEIGHT (F))		\\
   : make_fixnum ((Y) / FRAME_LINE_HEIGHT (F)))" 46327 . 46467)))
          ("FRAME_KBOARD" (spp-arg-list ("f") 22974 . 22977) . ((semantic-list "((f)->terminal->kboard)" 22978 . 23001)))
          ("FRAME_NS_P" (spp-arg-list ("f") 23895 . 23898) . ((symbol "false" 23899 . 23904)))
          ("FRAME_WINDOW_CONFIGURATION_CHANGED" (spp-arg-list ("f") 29324 . 29327) . 
              ((semantic-list "(f)" 29332 . 29335) (punctuation "-" 29335 . 29336) (punctuation ">" 29336 . 29337) (symbol "window_configuration_changed" 29337 . 29365)))
          ("CHECK_FRAME" (spp-arg-list ("x") 38502 . 38505) . ((symbol "CHECK_TYPE" 38510 . 38520) (semantic-list "(FRAMEP (x), Qframep, x)" 38521 . 38545)))
          ("WINDOW_SYSTEM_RETURN" . ((symbol "_Noreturn" 41009 . 41018)))
          ("FRAME_COL_TO_PIXEL_X" (spp-arg-list ("f" "col") 46922 . 46930) . ((semantic-list "(FRAME_INTERNAL_BORDER_WIDTH (f)		\\
   + (col) * FRAME_COLUMN_WIDTH (f))" 46936 . 47008)))
          ("FRAME_WINDOWS_WIDTH" (spp-arg-list ("f") 49831 . 49834) . ((semantic-list "(FRAME_PIXEL_WIDTH (f)			\\
   - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 49841 . 49909)))
          ("FRAME_WINDOWS_HEIGHT" (spp-arg-list ("f") 49939 . 49942) . ((semantic-list "(FRAME_PIXEL_HEIGHT (f)			\\
   - FRAME_TOP_MARGIN_HEIGHT (f)		\\
   - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 49949 . 50054)))
          ("WINDOW_FRAME" (spp-arg-list ("w") 23346 . 23349) . ((semantic-list "((w)->frame)" 23350 . 23362)))
          ("FRAME_MINIBUF_ONLY_P" (spp-arg-list ("f") 25592 . 25595) . ((symbol "EQ" 25600 . 25602) (semantic-list "(FRAME_ROOT_WINDOW (f), FRAME_MINIBUF_WINDOW (f))" 25603 . 25652)))
          ("FRAME_WINDOWS_FROZEN" (spp-arg-list ("f") 29135 . 29138) . 
              ((semantic-list "(f)" 29139 . 29142) (punctuation "-" 29142 . 29143) (punctuation ">" 29143 . 29144) (symbol "frozen_window_starts" 29144 . 29164)))
          ("FRAME_RIGHT_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("f") 34163 . 34166) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_RIGHT (f)				\\
   ? FRAME_CONFIG_SCROLL_BAR_WIDTH (f)					\\
   : 0)" 34174 . 34276)))
          ("FRAME_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("f") 35116 . 35119) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS (f)		\\
   ? FRAME_CONFIG_SCROLL_BAR_WIDTH (f)		\\
   : 0)" 35125 . 35213)))
          ("FRAME_SCROLL_BAR_AREA_HEIGHT" (spp-arg-list ("f") 35330 . 35333) . ((semantic-list "(FRAME_HAS_HORIZONTAL_SCROLL_BARS (f) \\
   ? FRAME_CONFIG_SCROLL_BAR_HEIGHT (f) \\
   : 0)" 35338 . 35427)))
          ("SET_FRAME_LINES" (spp-arg-list ("f" "height") 36540 . 36551) . ((semantic-list "((f)->text_lines = (height),						\\
   (f)->total_lines = ((height)						\\
		       + FRAME_TOP_MARGIN (f)				\\
		       + FRAME_SCROLL_BAR_LINES (f)))" 36560 . 36711)))
          ("FRAME_BLINK_OFF_CURSOR_WIDTH" (spp-arg-list ("f") 37997 . 38000) . ((semantic-list "((f)->blink_off_cursor_width)" 38001 . 38030)))
          ("FRAME_FOREGROUND_PIXEL" (spp-arg-list ("f") 38062 . 38065) . ((semantic-list "((f)->foreground_pixel)" 38066 . 38089)))
          ("FRAME_BACKGROUND_PIXEL" (spp-arg-list ("f") 38120 . 38123) . ((semantic-list "((f)->background_pixel)" 38124 . 38147)))
          ("FRAME_MOUSE_UPDATE" (spp-arg-list ("frame") 39565 . 39572) . 
              ((DO "do" 39580 . 39582) (semantic-list "{								\\
    Mouse_HLInfo *hlinfo = MOUSE_HL_INFO (frame);		\\
    if (frame == hlinfo->mouse_face_mouse_frame)		\\
      {								\\
	block_input ();						\\
	note_mouse_highlight (hlinfo->mouse_face_mouse_frame,	\\
			      hlinfo->mouse_face_mouse_x,	\\
			      hlinfo->mouse_face_mouse_y);	\\
	unblock_input ();					\\
      }								\\
  }" 39583 . 39921) (WHILE "while" 39922 . 39927) (semantic-list "(false)" 39928 . 39935)))
          ("EMACS_FRAME_H")
          ("XFRAME" (spp-arg-list ("p") 23131 . 23134) . ((semantic-list "(eassert (FRAMEP (p)), XUNTAG (p, Lisp_Vectorlike, struct frame))" 23139 . 23204)))
          ("FRAME_MSDOS_P" (spp-arg-list ("f") 23772 . 23775) . ((symbol "false" 23776 . 23781)))
          ("FRAME_OBSCURED_P" (spp-arg-list ("f") 28474 . 28477) . ((semantic-list "((f)->visible > 1)" 28478 . 28496)))
          ("FRAME_GARBAGED_P" (spp-arg-list ("f") 28805 . 28808) . 
              ((semantic-list "(f)" 28809 . 28812) (punctuation "-" 28812 . 28813) (punctuation ">" 28813 . 28814) (symbol "garbaged" 28814 . 28822)))
          ("FRAME_UNDECORATED" (spp-arg-list ("f") 32054 . 32057) . ((semantic-list "((void) (f), 0)" 32058 . 32073)))
          ("FRAME_SKIP_TASKBAR" (spp-arg-list ("f") 32200 . 32203) . ((semantic-list "((void) (f), 0)" 32204 . 32219)))
          ("FRAME_TOOLTIP_P" (spp-arg-list ("f") 32595 . 32598) . ((semantic-list "((void) f, false)" 32599 . 32616)))
          ("FRAME_CONFIG_SCROLL_BAR_COLS" (spp-arg-list ("f") 33561 . 33564) . ((semantic-list "((f)->config_scroll_bar_cols)" 33565 . 33594)))
          ("FRAME_TOTAL_LINES" (spp-arg-list ("f") 36111 . 36114) . ((semantic-list "((f)->total_lines)" 36115 . 36133)))
          ("FRAME_COST_BAUD_RATE" (spp-arg-list ("f") 37760 . 37763) . ((semantic-list "((f)->cost_calculation_baud_rate)" 37764 . 37797)))
          ("FRAME_PIXEL_Y_FROM_CANON_Y" (spp-arg-list ("F" "Y") 45547 . 45553) . ((semantic-list "((int) (XFLOATINT (Y) * FRAME_LINE_HEIGHT (F)))" 45559 . 45606)))
          ("FRAME_TERMCAP_P" (spp-arg-list ("f") 23514 . 23517) . ((semantic-list "((f)->output_method == output_termcap)" 23518 . 23556)))
          ("FRAME_COLS" (spp-arg-list ("f") 26227 . 26230) . 
              ((semantic-list "(f)" 26231 . 26234) (punctuation "-" 26234 . 26235) (punctuation ">" 26235 . 26236) (symbol "text_cols" 26236 . 26245)))
          ("FRAME_HAS_VERTICAL_SCROLL_BARS_ON_LEFT" (spp-arg-list ("f") 30806 . 30809) . ((semantic-list "((void) (f), 0)" 30810 . 30825)))
          ("FRAME_CURSOR_X_LIMIT" (spp-arg-list ("f") 37465 . 37468) . ((semantic-list "(FRAME_COLS (f) + FRAME_LEFT_SCROLL_BAR_COLS (f))" 37473 . 37522)))
          ("FRAME_MENU_BAR_ITEMS" (spp-arg-list ("f") 37708 . 37711) . ((semantic-list "(f->menu_bar_items)" 37712 . 37731)))
          ("FOR_EACH_FRAME" (spp-arg-list ("list_var" "frame_var") 39296 . 39317) . ((FOR "for" 39322 . 39325) (semantic-list "((list_var) = Vframe_list;		\\
       (CONSP (list_var)			\\
	&& (frame_var = XCAR (list_var), true)); \\
       list_var = XCDR (list_var))" 39326 . 39463)))
          ("AUTO_FRAME_ARG" (spp-arg-list ("name" "parameter" "value") 40033 . 40057) . ((symbol "AUTO_LIST1" 40062 . 40072) (semantic-list "(name, AUTO_CONS_EXPR (parameter, value))" 40073 . 40114)))
          ("FRAME_PIXEL_HEIGHT" (spp-arg-list ("f") 26081 . 26084) . ((semantic-list "((f)->pixel_height)" 26085 . 26104)))
          ("FRAME_TEXT_WIDTH" (spp-arg-list ("f") 26550 . 26553) . 
              ((semantic-list "(f)" 26554 . 26557) (punctuation "-" 26557 . 26558) (punctuation ">" 26558 . 26559) (symbol "text_width" 26559 . 26569)))
          ("FRAME_TOP_MARGIN_HEIGHT" (spp-arg-list ("F") 27928 . 27931) . ((semantic-list "(FRAME_MENU_BAR_HEIGHT (F) + FRAME_TOOL_BAR_HEIGHT (F))" 27939 . 27994)))
          ("FRAME_WANTS_MODELINE_P" (spp-arg-list ("f") 28990 . 28993) . 
              ((semantic-list "(f)" 28994 . 28997) (punctuation "-" 28997 . 28998) (punctuation ">" 28998 . 28999) (symbol "wants_modeline" 28999 . 29013)))
          ("FRAME_PARENT_FRAME" (spp-arg-list ("f") 32151 . 32154) . ((semantic-list "((void) (f), NULL)" 32155 . 32173)))
          ("FRAME_Z_GROUP" (spp-arg-list ("f") 32390 . 32393) . ((semantic-list "((void) (f), z_group_none)" 32394 . 32420)))
          ("FRAME_SCROLL_BAR_LINES" (spp-arg-list ("f") 35727 . 35730) . ((semantic-list "(FRAME_HAS_HORIZONTAL_SCROLL_BARS (f) \\
   ? FRAME_CONFIG_SCROLL_BAR_LINES (f)	\\
   : 0)" 35735 . 35823)))
          ("SET_FRAME_WIDTH" (spp-arg-list ("f" "width") 36818 . 36828) . ((semantic-list "((f)->text_width = (width),						\\
   (f)->pixel_width = ((width)						\\
		       + FRAME_SCROLL_BAR_AREA_WIDTH (f)		\\
		       + FRAME_TOTAL_FRINGE_WIDTH (f)			\\
		       + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)))" 36837 . 37048)))
          ("SET_FRAME_HEIGHT" (spp-arg-list ("f" "height") 37159 . 37170) . ((semantic-list "((f)->text_height = (height),						\\
   (f)->pixel_height = ((height)					\\
    			+ FRAME_TOP_MARGIN_HEIGHT (f)			\\
			+ FRAME_SCROLL_BAR_AREA_HEIGHT (f)		\\
			+ 2 * FRAME_INTERNAL_BORDER_WIDTH (f)))" 37179 . 37379)))
          ("FRAME_PIXEL_WIDTH_TO_TEXT_COLS" (spp-arg-list ("f" "width") 48342 . 48352) . ((semantic-list "(((width)								\\
    - FRAME_TOTAL_FRINGE_WIDTH (f)					\\
    - FRAME_SCROLL_BAR_AREA_WIDTH (f)					\\
    - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))				\\
   / FRAME_COLUMN_WIDTH (f))" 48359 . 48539)))
          ("FRAME_RES_X" (spp-arg-list ("f") 24753 . 24756) . ((symbol "default_pixels_per_inch_x" 24757 . 24782) (semantic-list "()" 24783 . 24785)))
          ("FRAME_TEXT_HEIGHT" (spp-arg-list ("f") 26706 . 26709) . 
              ((semantic-list "(f)" 26710 . 26713) (punctuation "-" 26713 . 26714) (punctuation ">" 26714 . 26715) (symbol "text_height" 26715 . 26726)))
          ("FRAME_TOP_MARGIN" (spp-arg-list ("F") 27789 . 27792) . ((semantic-list "(FRAME_MENU_BAR_LINES (F) + FRAME_TOOL_BAR_LINES (F))" 27797 . 27850)))
          ("FRAME_SELECTED_WINDOW" (spp-arg-list ("f") 29688 . 29691) . 
              ((symbol "f" 29692 . 29693) (punctuation "-" 29693 . 29694) (punctuation ">" 29694 . 29695) (symbol "selected_window" 29695 . 29710)))
          ("FRAME_FOCUS_FRAME" (spp-arg-list ("f") 29949 . 29952) . 
              ((symbol "f" 29953 . 29954) (punctuation "-" 29954 . 29955) (punctuation ">" 29955 . 29956) (symbol "focus_frame" 29956 . 29967)))
          ("FRAME_VERTICAL_SCROLL_BAR_TYPE" (spp-arg-list ("f") 30655 . 30658) . ((semantic-list "((void) (f), vertical_scroll_bar_none)" 30663 . 30701)))
          ("FRAME_HAS_VERTICAL_SCROLL_BARS_ON_RIGHT" (spp-arg-list ("f") 30873 . 30876) . ((semantic-list "((void) (f), 0)" 30877 . 30892)))
          ("FRAME_SCROLL_BAR_COLS" (spp-arg-list ("f") 35527 . 35530) . ((semantic-list "(FRAME_HAS_VERTICAL_SCROLL_BARS (f) \\
   ? FRAME_CONFIG_SCROLL_BAR_COLS (f) \\
   : 0)" 35540 . 35625)))
          ("FRAME_TEXT_LINES_TO_PIXEL_HEIGHT" (spp-arg-list ("f" "lines") 47344 . 47354) . ((semantic-list "((lines) * FRAME_LINE_HEIGHT (f)		   \\
   + FRAME_TOP_MARGIN_HEIGHT (f)		   \\
   + FRAME_SCROLL_BAR_AREA_HEIGHT (f)		   \\
   + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 47359 . 47522)))
          ("FRAME_TEXT_TO_PIXEL_WIDTH" (spp-arg-list ("f" "width") 48906 . 48916) . ((semantic-list "((width)					  \\
   + FRAME_SCROLL_BAR_AREA_WIDTH (f)		  \\
   + FRAME_TOTAL_FRINGE_WIDTH (f)		  \\
   + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 48923 . 49062)))
          ("FRAME_PIXEL_TO_TEXT_WIDTH" (spp-arg-list ("f" "width") 49388 . 49398) . ((semantic-list "((width)					  \\
   - FRAME_SCROLL_BAR_AREA_WIDTH (f)		  \\
   - FRAME_TOTAL_FRINGE_WIDTH (f)		  \\
   - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 49405 . 49544)))
          ("FRAME_IMAGE_CACHE" (spp-arg-list ("F") 23083 . 23086) . ((semantic-list "((F)->terminal->image_cache)" 23087 . 23115)))
          ("FRAME_INITIAL_P" (spp-arg-list ("f") 23448 . 23451) . ((semantic-list "((f)->output_method == output_initial)" 23452 . 23490)))
          ("FRAME_RES_Y" (spp-arg-list ("f") 24805 . 24808) . ((symbol "default_pixels_per_inch_y" 24809 . 24834) (semantic-list "()" 24835 . 24837)))
          ("FRAME_LINES" (spp-arg-list ("f") 26387 . 26390) . 
              ((semantic-list "(f)" 26391 . 26394) (punctuation "-" 26394 . 26395) (punctuation ">" 26395 . 26396) (symbol "text_lines" 26396 . 26406)))
          ("FRAME_MENU_BAR_LINES" (spp-arg-list ("f") 26941 . 26944) . 
              ((semantic-list "(f)" 26945 . 26948) (punctuation "-" 26948 . 26949) (punctuation ">" 26949 . 26950) (symbol "menu_bar_lines" 26950 . 26964)))
          ("FRAME_TOOL_BAR_LINES" (spp-arg-list ("f") 27591 . 27594) . 
              ((semantic-list "(f)" 27595 . 27598) (punctuation "-" 27598 . 27599) (punctuation ">" 27599 . 27600) (symbol "tool_bar_lines" 27600 . 27614)))
          ("FRAME_NO_SPECIAL_GLYPHS" (spp-arg-list ("f") 32349 . 32352) . ((semantic-list "((void) (f), 0)" 32353 . 32368)))
          ("FRAME_Z_GROUP_ABOVE" (spp-arg-list ("f") 32497 . 32500) . ((semantic-list "((void) (f), false)" 32501 . 32520)))
          ("SELECTED_FRAME" (spp-arg-list nil 42500 . 42502) . ((semantic-list "((FRAMEP (selected_frame)				\\
       && FRAME_LIVE_P (XFRAME (selected_frame)))	\\
      ? XFRAME (selected_frame)				\\
      : (emacs_abort (), (struct frame *) 0))" 42513 . 42678)))
          ("FRAME_LINE_HEIGHT" (spp-arg-list ("F") 43028 . 43031) . ((semantic-list "((F)->line_height)" 43032 . 43050)))
          ("FRAME_PIXEL_HEIGHT_TO_TEXT_LINES" (spp-arg-list ("f" "height") 48588 . 48599) . ((semantic-list "(((height)								\\
    - FRAME_TOP_MARGIN_HEIGHT (f)					\\
    - FRAME_SCROLL_BAR_AREA_HEIGHT (f)					\\
    - 2 * FRAME_INTERNAL_BORDER_WIDTH (f))				\\
   / FRAME_LINE_HEIGHT (f))" 48606 . 48786)))
          ("FRAME_LIVE_P" (spp-arg-list ("f") 25487 . 25490) . ((semantic-list "((f)->terminal != 0)" 25491 . 25511)))
          ("FRAME_MENU_BAR_HEIGHT" (spp-arg-list ("f") 27038 . 27041) . 
              ((semantic-list "(f)" 27042 . 27045) (punctuation "-" 27045 . 27046) (punctuation ">" 27046 . 27047) (symbol "menu_bar_height" 27047 . 27062)))
          ("FRAME_TOOL_BAR_HEIGHT" (spp-arg-list ("f") 27688 . 27691) . 
              ((semantic-list "(f)" 27692 . 27695) (punctuation "-" 27695 . 27696) (punctuation ">" 27696 . 27697) (symbol "tool_bar_height" 27697 . 27712)))
          ("FRAME_ICONIFIED_P" (spp-arg-list ("f") 28570 . 28573) . 
              ((semantic-list "(f)" 28574 . 28577) (punctuation "-" 28577 . 28578) (punctuation ">" 28578 . 28579) (symbol "iconified" 28579 . 28588)))
          ("FRAME_INSERT_COST" (spp-arg-list ("f") 29737 . 29740) . 
              ((semantic-list "(f)" 29741 . 29744) (punctuation "-" 29744 . 29745) (punctuation ">" 29745 . 29746) (symbol "insert_line_cost" 29746 . 29762)))
          ("FRAME_INSERTN_COST" (spp-arg-list ("f") 29840 . 29843) . 
              ((semantic-list "(f)" 29844 . 29847) (punctuation "-" 29847 . 29848) (punctuation ">" 29848 . 29849) (symbol "insert_n_lines_cost" 29849 . 29868)))
          ("FRAME_SCROLL_BARS" (spp-arg-list ("f") 37592 . 37595) . ((semantic-list "(f->scroll_bars)" 37596 . 37612)))
          ("FRAME_FACE_CACHE" (spp-arg-list ("F") 38228 . 38231) . 
              ((semantic-list "(F)" 38232 . 38235) (punctuation "-" 38235 . 38236) (punctuation ">" 38236 . 38237) (symbol "face_cache" 38237 . 38247)))
          ("FRAME_LINE_TO_PIXEL_Y" (spp-arg-list ("f" "row") 46768 . 46776) . ((semantic-list "(((row) < FRAME_TOP_MARGIN (f) ? 0 : FRAME_INTERNAL_BORDER_WIDTH (f))	\\
   + (row) * FRAME_LINE_HEIGHT (f))" 46785 . 46892)))
          ("FRAME_PIXEL_Y_TO_LINE" (spp-arg-list ("f" "y") 47658 . 47664) . ((semantic-list "(((y) < FRAME_TOP_MARGIN_HEIGHT (f)					\\
    ? (y)								\\
    : ((y) < (FRAME_TOP_MARGIN_HEIGHT (f)				\\
	      + FRAME_INTERNAL_BORDER_WIDTH (f))			\\
       ? (y) - (FRAME_TOP_MARGIN_HEIGHT (f)				\\
		+ FRAME_INTERNAL_BORDER_WIDTH (f)			\\
		/* Arrange for the division to round down.  */		\\
		+ FRAME_LINE_HEIGHT (f) - 1)				\\
       : (y) - FRAME_INTERNAL_BORDER_WIDTH (f)))			\\
   / FRAME_LINE_HEIGHT (f))" 47673 . 48084)))
          ("FRAME_PIXEL_X_TO_COL" (spp-arg-list ("f" "x") 48114 . 48120) . ((semantic-list "(((x) - FRAME_INTERNAL_BORDER_WIDTH (f))	\\
   / FRAME_COLUMN_WIDTH (f))" 48126 . 48197)))
          ("FRAME_X_P" (spp-arg-list ("f") 23574 . 23577) . ((semantic-list "((f)->output_method == output_x_window)" 23578 . 23617)))
          ("FRAME_TOOL_BAR_POSITION" (spp-arg-list ("f") 27475 . 27478) . ((semantic-list "((void) (f), Qtop)" 27479 . 27497)))
          ("SET_FRAME_GARBAGED" (spp-arg-list ("f") 28659 . 28662) . ((semantic-list "(frame_garbaged = true, fset_redisplay (f), f->garbaged = true)" 28670 . 28733)))
          ("FRAME_NO_SPLIT_P" (spp-arg-list ("f") 28910 . 28913) . 
              ((semantic-list "(f)" 28914 . 28917) (punctuation "-" 28917 . 28918) (punctuation ">" 28918 . 28919) (symbol "no_split" 28919 . 28927)))
          ("FRAME_DELETE_COST" (spp-arg-list ("f") 29788 . 29791) . 
              ((semantic-list "(f)" 29792 . 29795) (punctuation "-" 29795 . 29796) (punctuation ">" 29796 . 29797) (symbol "delete_line_cost" 29797 . 29813)))
          ("FRAME_Z_GROUP_NONE" (spp-arg-list ("f") 32447 . 32450) . ((semantic-list "((void) (f), true)" 32451 . 32469)))
          ("FRAME_Z_GROUP_BELOW" (spp-arg-list ("f") 32548 . 32551) . ((semantic-list "((void) (f), false)" 32552 . 32571)))
          ("FRAME_CONFIG_SCROLL_BAR_HEIGHT" (spp-arg-list ("f") 33322 . 33325) . ((semantic-list "((f)->config_scroll_bar_height)" 33326 . 33357)))
          ("FRAME_CONFIG_SCROLL_BAR_LINES" (spp-arg-list ("f") 33798 . 33801) . ((semantic-list "((f)->config_scroll_bar_lines)" 33802 . 33832)))
          ("FRAME_COLUMN_WIDTH" (spp-arg-list ("F") 43189 . 43192) . ((semantic-list "((F)->column_width)" 43193 . 43212)))
          ("FRAME_CANON_X_FROM_PIXEL_X" (spp-arg-list ("F" "X") 45880 . 45886) . ((semantic-list "((X) % FRAME_COLUMN_WIDTH (F) != 0				\\
   ? make_float ((double) (X) / FRAME_COLUMN_WIDTH (F))		\\
   : make_fixnum ((X) / FRAME_COLUMN_WIDTH (F)))" 45893 . 46040)))
          ("FRAME_TEXT_COLS_TO_PIXEL_WIDTH" (spp-arg-list ("f" "cols") 47134 . 47143) . ((semantic-list "((cols) * FRAME_COLUMN_WIDTH (f)		\\
   + FRAME_SCROLL_BAR_AREA_WIDTH (f)		\\
   + FRAME_TOTAL_FRINGE_WIDTH (f)		\\
   + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))" 47148 . 47302)))
          )
)
    (semanticdb-table "semanticdb-table-1afb080"
      :major-mode c-mode
      :tags nil
      :file "keymap.h"
      :pointmax 2303
      :fsize 2302
      :lastmodtime '(23443 29220 53166 949000)
      :unmatched-syntax '((TYPEDEF 1974 . 1981))
      :lexical-table 
        '(("KEYMAPP" (spp-arg-list ("m") 1290 . 1293) . ((semantic-list "(!NILP (get_keymap (m, false, false)))" 1294 . 1332)))
          ("KEYMAP_H")
          ("KEY_DESCRIPTION_SIZE" . ((semantic-list "((2 * 6) + 1 + (CHARACTERBITS / 3) + 1 + 1)" 1230 . 1273)))
          )
)
    (semanticdb-table "semanticdb-table-1afb0a0"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [818 837])
            ("stdio.h" include (:system-flag t) nil [839 857])
            ("lisp.h" include nil nil [859 876])
            ("buffer.h" include nil nil [877 896])
            ("keyboard.h" include nil nil [897 918])
            ("keymap.h" include nil nil [919 938])
            ("frame.h" include nil nil [939 957])
            ("window.h" include nil nil [958 977])
            ("commands.h" include nil nil [978 999])
            ("indent.h" include nil nil [1000 1019])
            ("termchar.h" include nil nil [1020 1041])
            ("disptab.h" include nil nil [1042 1062])
            ("dispextern.h" include nil nil [1063 1086])
            ("blockinput.h" include nil nil [1087 1110])
            ("termhooks.h" include nil nil [1111 1133])
            ("xwidget.h" include nil nil [1162 1182])
            ("count_windows" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1334 1350]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [1302 1351])
            ("get_leaf_windows" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1387 1403])
                    ("" variable
                       (:pointer 2
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1404 1421])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1429 1439]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [1352 1440])
            ("window_scroll_pixel_based" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1480 1492])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [1493 1497])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1498 1503])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1504 1509]))                  
                :type "void")
                nil [1441 1510])
            ("window_scroll_line_based" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1549 1561])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [1562 1566])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1567 1572])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1573 1578]))                  
                :type "void")
                nil [1511 1579])
            ("foreach_window" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1608 1623])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1644 1660])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [1661 1668]))                          
                        :type "bool")
                        nil nil)
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1698 1705]))                  
                :type "void")
                nil [1580 1706])
            ("foreach_window_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1737 1753])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1776 1792])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [1793 1800]))                          
                        :type "bool")
                        nil nil)
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1811 1818]))                  
                :type "bool")
                nil [1707 1819])
            ("window_resize_check" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1853 1869])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1870 1875]))                  
                :type "bool")
                nil [1820 1876])
            ("window_resize_apply" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1910 1926])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1927 1932]))                  
                :type "void")
                nil [1877 1933])
            ("select_window_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1963 1975])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [1976 1981]))                  
                :type "void")
                nil [1934 1982])
            ("run_window_configuration_change_hook" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2033 2048]))                  
                :type "void")
                nil [1983 2049])
            ("set_window_fringes" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2093 2109])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2110 2122])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2130 2142])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2143 2155]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2051 2156])
            ("set_window_margins" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2199 2215])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2216 2228])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2236 2248]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2157 2249])
            ("set_window_scroll_bars" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2296 2312])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2313 2325])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2337 2349])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2350 2362])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2374 2386]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2250 2387])
            ("apply_window_adjustment" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2425 2441]))                  
                :type "void")
                nil [2388 2442])
            ("selected_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2762 2790])
            ("Vwindow_list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2958 2983])
            ("minibuf_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3204 3231])
            ("minibuf_selected_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3362 3398])
            ("sequence_number" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3444 3477])
            ("window_scroll_pixel_based_preserve_x" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3534 3582])
            ("window_scroll_pixel_based_preserve_y" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3583 3631])
            ("window_scroll_preserve_hpos" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3675 3720])
            ("window_scroll_preserve_vpos" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3721 3766])
            ("CHECK_WINDOW_CONFIGURATION" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3809 3823]))                  
                :type "void")
                nil [3769 3897])
            ("wset_combination_limit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4008 4025])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4026 4042]))                  
                :type "void")
                nil [3972 4076])
            ("wset_dedicated" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4106 4123])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4124 4140]))                  
                :type "void")
                nil [4078 4166])
            ("wset_display_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4200 4217])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4218 4234]))                  
                :type "void")
                nil [4168 4264])
            ("wset_new_normal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4295 4312])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4313 4329]))                  
                :type "void")
                nil [4266 4356])
            ("wset_new_total" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4386 4403])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4404 4420]))                  
                :type "void")
                nil [4358 4446])
            ("wset_normal_cols" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4478 4495])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4496 4512]))                  
                :type "void")
                nil [4448 4540])
            ("wset_normal_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4573 4590])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4591 4607]))                  
                :type "void")
                nil [4542 4636])
            ("wset_parent" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4663 4680])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4681 4697]))                  
                :type "void")
                nil [4638 4720])
            ("wset_pointm" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4747 4764])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4765 4781]))                  
                :type "void")
                nil [4722 4804])
            ("wset_old_pointm" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4835 4852])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4853 4869]))                  
                :type "void")
                nil [4806 4896])
            ("wset_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4922 4939])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4940 4956]))                  
                :type "void")
                nil [4898 4978])
            ("wset_temslot" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5006 5023])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5024 5040]))                  
                :type "void")
                nil [4980 5064])
            ("wset_vertical_scroll_bar_type" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5109 5126])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5127 5143]))                  
                :type "void")
                nil [5066 5184])
            ("wset_window_parameters" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5222 5239])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5240 5256]))                  
                :type "void")
                nil [5186 5290])
            ("wset_combination" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5322 5339])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [5340 5353])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5354 5370]))                  
                :type "void")
                nil [5292 5735])
            ("wset_update_mode_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5772 5789]))                  
                :type "void")
                nil [5737 6200])
            ("window_outdated" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6346 6363]))                  
                :type "bool")
                nil [6324 6513])
            ("decode_live_window" function
               (:pointer 1
                :arguments 
                  ( ("window" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6551 6579]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6515 6700])
            ("decode_any_window" function
               (:pointer 1
                :arguments 
                  ( ("window" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6737 6765]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6702 6911])
            ("decode_valid_window" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("window" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6957 6985]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6913 7137])
            ("adjust_window_count" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7325 7342])
                    ("arg" variable (:type "int") (reparse-symbol arg-sub-list) [7343 7351]))                  
                :type "void")
                nil [7292 7713])
            ("wset_buffer" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7834 7851])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7852 7868]))                  
                :type "void")
                nil [7816 8116])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindowp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8136 8145])
                    ("" variable (:type ("Swindowp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8146 8155])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8172 8176]))                  
                :type "int")
                nil [8118 8257])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_valid_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8327 8343])
                    ("" variable (:type ("Swindow_valid_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8344 8360])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8377 8381]))                  
                :type "int")
                nil [8302 8595])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_live_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8671 8686])
                    ("" variable (:type ("Swindow_live_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8687 8702])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8719 8723]))                  
                :type "int")
                nil [8647 8910])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_frame" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9012 9026])
                    ("" variable (:type ("Swindow_frame" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9027 9041])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9058 9062]))                  
                :type "int")
                nil [8989 9200])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fframe_root_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9280 9299])
                    ("" variable (:type ("Sframe_root_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9300 9319])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9336 9340]))                  
                :type "int")
                nil [9252 9620])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fminibuffer_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10001 10020])
                    ("" variable (:type ("Sminibuffer_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10021 10040])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10057 10061]))                  
                :type "int")
                nil [9973 10200])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_minibuffer_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10295 10316])
                    ("" variable (:type ("Swindow_minibuffer_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10324 10345])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10362 10366]))                  
                :type "int")
                nil [10265 10510])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fframe_first_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10679 10699])
                    ("" variable (:type ("Sframe_first_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10700 10720])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10737 10741]))                  
                :type "int")
                nil [10650 11089])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fframe_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11569 11592])
                    ("" variable (:type ("Sframe_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11600 11623])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11640 11644]))                  
                :type "int")
                nil [11537 11984])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_frame_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12391 12418])
                    ("" variable (:type ("Sset_frame_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12426 12453])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12470 12474]))                  
                :type "int")
                nil [12355 12889])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fselected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13326 13343])
                    ("" variable (:type ("Sselected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13344 13361])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13378 13382]))                  
                :type "int")
                nil [13300 13553])
            ("window_select_count" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [13585 13615])
            ("select_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13973 13992])
                    ("norecord" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13993 14014])
                    ("inhibit_point_swap" variable (:type "bool") (reparse-symbol arg-sub-list) [14023 14047]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13939 15880])
            ("select_window_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16092 16111])
                    ("inhibit_point_swap" variable (:type "bool") (reparse-symbol arg-sub-list) [16112 16136]))                  
                :type "void")
                nil [16063 16917])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fselect_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16943 16958])
                    ("" variable (:type ("Sselect_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16959 16974])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16991 16995]))                  
                :type "int")
                nil [16919 18248])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18329 18344])
                    ("" variable (:type ("Swindow_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18345 18360])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18377 18381]))                  
                :type "int")
                nil [18305 18578])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_parent" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18706 18721])
                    ("" variable (:type ("Swindow_parent" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18722 18737])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18754 18758]))                  
                :type "int")
                nil [18682 18957])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_top_child" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19037 19055])
                    ("" variable (:type ("Swindow_top_child" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19056 19074])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19091 19095]))                  
                :type "int")
                nil [19010 19400])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_left_child" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19550 19569])
                    ("" variable (:type ("Swindow_left_child" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19570 19589])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19606 19610]))                  
                :type "int")
                nil [19522 19914])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_next_sibling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20068 20089])
                    ("" variable (:type ("Swindow_next_sibling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20090 20111])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20128 20132]))                  
                :type "int")
                nil [20038 20318])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_prev_sibling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20399 20420])
                    ("" variable (:type ("Swindow_prev_sibling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20421 20442])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20459 20463]))                  
                :type "int")
                nil [20369 20657])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_combination_limit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20743 20769])
                    ("" variable (:type ("Swindow_combination_limit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20770 20796])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20813 20817]))                  
                :type "int")
                nil [20708 21163])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_combination_limit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21413 21443])
                    ("" variable (:type ("Sset_window_combination_limit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21444 21474])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21491 21495]))                  
                :type "int")
                nil [21374 21901])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_use_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22160 22177])
                    ("" variable (:type ("Swindow_use_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22178 22195])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22212 22216]))                  
                :type "int")
                nil [22134 22493])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22591 22611])
                    ("" variable (:type ("Swindow_pixel_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22612 22632])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22649 22653]))                  
                :type "int")
                nil [22562 23034])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23136 23157])
                    ("" variable (:type ("Swindow_pixel_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23158 23179])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23196 23200]))                  
                :type "int")
                nil [23106 23540])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_width_before_size_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23668 23707])
                    ("" variable (:type ("Swindow_pixel_width_before_size_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23715 23754])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23771 23775]))                  
                :type "int")
                nil [23613 24078])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_height_before_size_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24230 24270])
                    ("" variable (:type ("Swindow_pixel_height_before_size_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24278 24318])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24335 24339]))                  
                :type "int")
                nil [24174 24644])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_total_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24771 24792])
                    ("" variable (:type ("Swindow_total_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24793 24814])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24831 24835]))                  
                :type "int")
                nil [24741 25891])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_total_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26274 26294])
                    ("" variable (:type ("Swindow_total_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26295 26315])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26332 26336]))                  
                :type "int")
                nil [26245 27395])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_new_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27774 27792])
                    ("" variable (:type ("Swindow_new_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27793 27811])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27828 27832]))                  
                :type "int")
                nil [27747 28215])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_normal_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28300 28320])
                    ("" variable (:type ("Swindow_normal_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28321 28341])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28358 28362]))                  
                :type "int")
                nil [28271 29526])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_new_normal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29675 29694])
                    ("" variable (:type ("Swindow_new_normal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29695 29714])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29731 29735]))                  
                :type "int")
                nil [29647 30067])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_new_pixel" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30151 30169])
                    ("" variable (:type ("Swindow_new_pixel" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30170 30188])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30205 30209]))                  
                :type "int")
                nil [30124 30588])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_left" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30672 30691])
                    ("" variable (:type ("Swindow_pixel_left" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30692 30711])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30728 30732]))                  
                :type "int")
                nil [30644 30868])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_pixel_top" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30966 30984])
                    ("" variable (:type ("Swindow_pixel_top" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30985 31003])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31020 31024]))                  
                :type "int")
                nil [30939 31159])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_left_column" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31258 31278])
                    ("" variable (:type ("Swindow_left_column" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31279 31299])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31316 31320]))                  
                :type "int")
                nil [31229 31647])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_top_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31742 31759])
                    ("" variable (:type ("Swindow_top_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31760 31777])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31794 31798]))                  
                :type "int")
                nil [31716 32099])
            ("window_body_height" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32383 32400])
                    ("pixelwise" variable (:type "bool") (reparse-symbol arg-sub-list) [32401 32416]))                  
                :type "int")
                nil [32352 32798])
            ("window_body_width" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33121 33138])
                    ("pixelwise" variable (:type "bool") (reparse-symbol arg-sub-list) [33139 33154]))                  
                :type "int")
                nil [33098 33759])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_body_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33790 33810])
                    ("" variable (:type ("Swindow_body_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33811 33831])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33848 33852]))                  
                :type "int")
                nil [33761 34441])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_body_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34574 34593])
                    ("" variable (:type ("Swindow_body_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34594 34613])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34630 34634]))                  
                :type "int")
                nil [34546 35297])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_mode_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35434 35459])
                    ("" variable (:type ("Swindow_mode_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35467 35492])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35509 35513]))                  
                :type "int")
                nil [35400 35658])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_header_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35780 35807])
                    ("" variable (:type ("Swindow_header_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35815 35842])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35859 35863]))                  
                :type "int")
                nil [35744 36010])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_right_divider_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36135 36163])
                    ("" variable (:type ("Swindow_right_divider_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36171 36199])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36216 36220]))                  
                :type "int")
                nil [36098 36368])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_bottom_divider_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36495 36524])
                    ("" variable (:type ("Swindow_bottom_divider_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36532 36561])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36578 36582]))                  
                :type "int")
                nil [36457 36731])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_scroll_bar_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36855 36880])
                    ("" variable (:type ("Swindow_scroll_bar_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36888 36913])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36930 36934]))                  
                :type "int")
                nil [36821 37087])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_scroll_bar_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37213 37239])
                    ("" variable (:type ("Swindow_scroll_bar_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37247 37273])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37290 37294]))                  
                :type "int")
                nil [37178 37450])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_hscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37567 37583])
                    ("" variable (:type ("Swindow_hscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37584 37600])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37617 37621]))                  
                :type "int")
                nil [37542 37790])
            ("set_window_hscroll" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38019 38036])
                    ("hscroll" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38037 38055]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [37980 38850])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_hscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38881 38901])
                    ("" variable (:type ("Sset_window_hscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38902 38922])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38939 38943]))                  
                :type "int")
                nil [38852 39360])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_redisplay_end_trigger" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39503 39533])
                    ("" variable (:type ("Swindow_redisplay_end_trigger" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39541 39571])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39588 39592]))                  
                :type "int")
                nil [39464 39792])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_redisplay_end_trigger" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39902 39936])
                    ("" variable (:type ("Sset_window_redisplay_end_trigger" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39944 39978])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39995 39999]))                  
                :type "int")
                nil [39859 40494])
            ("coordinates_in_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [41482 41508])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [41509 41515])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [41516 41522]))                  
                :type ("window_part" type (:type "enum") nil nil))
                nil [41435 46072])
            ("window_relative_x_coord" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [46224 46241])
                    ("part" variable (:type ("window_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [46242 46264])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [46265 46271]))                  
                :type "int")
                nil [46195 47274])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcoordinates_in_window_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47311 47336])
                    ("" variable (:type ("Scoordinates_in_window_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47344 47369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47386 47390]))                  
                :type "int")
                nil [47277 48496])
            ("check_window_data" type
               (:members 
                  ( ("window" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [50506 50526])
                    ("x" variable (:type "int") (reparse-symbol classsubparts) [50529 50538])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [50529 50538])
                    ("part" variable
                       (:pointer 1
                        :type ("window_part" type (:type "enum") nil nil))
                        (reparse-symbol classsubparts) [50541 50564]))                  
                :type "struct")
                nil [50477 50567])
            ("check_window_containing" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [50606 50623])
                    ("user_data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [50624 50640]))                  
                :type "bool")
                nil [50569 50899])
            ("window_from_coordinates" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [51739 51755])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [51756 51762])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [51763 51769])
                    ("part" variable
                       (:pointer 1
                        :type ("window_part" type (:type "enum") nil nil))
                        (reparse-symbol arg-sub-list) [51774 51797])
                    ("tool_bar_p" variable (:type "bool") (reparse-symbol arg-sub-list) [51798 51814]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [51702 52559])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52581 52592])
                    ("" variable (:type ("Swindow_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52593 52604])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52621 52625]))                  
                :type "int")
                nil [52561 52871])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53211 53225])
                    ("" variable (:type ("Swindow_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53226 53240])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53257 53261]))                  
                :type "int")
                nil [53188 53750])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_old_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53986 54004])
                    ("" variable (:type ("Swindow_old_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54005 54023])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54040 54044]))                  
                :type "int")
                nil [53959 54175])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54273 54287])
                    ("" variable (:type ("Swindow_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54288 54302])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54319 54323]))                  
                :type "int")
                nil [54250 54541])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55080 55092])
                    ("" variable (:type ("Swindow_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55093 55105])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55122 55126]))                  
                :type "int")
                nil [55059 55655])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57485 57503])
                    ("" variable (:type ("Sset_window_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57504 57522])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57539 57543]))                  
                :type "int")
                nil [57458 57732])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58523 58541])
                    ("" variable (:type ("Sset_window_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58542 58560])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58577 58581]))                  
                :type "int")
                nil [58496 58924])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpos_visible_in_window_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59346 59371])
                    ("" variable (:type ("Spos_visible_in_window_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59379 59404])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59421 59425]))                  
                :type "int")
                nil [59312 60640])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61947 61967])
                    ("" variable (:type ("Swindow_line_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61975 61995])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62012 62016]))                  
                :type "int")
                nil [61918 62951])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_lines_pixel_dimensions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64881 64912])
                    ("" variable (:type ("Swindow_lines_pixel_dimensions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64913 64944])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64961 64965]))                  
                :type "int")
                nil [64841 67288])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_dedicated_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69508 69528])
                    ("" variable (:type ("Swindow_dedicated_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69529 69549])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69573 69577]))                  
                :type "int")
                nil [69479 70500])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_dedicated_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70588 70612])
                    ("" variable (:type ("Sset_window_dedicated_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70620 70644])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70661 70665]))                  
                :type "int")
                nil [70555 71640])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_prev_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71745 71766])
                    ("" variable (:type ("Swindow_prev_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71767 71788])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71812 71816]))                  
                :type "int")
                nil [71715 72155])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_prev_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72247 72272])
                    ("" variable (:type ("Sset_window_prev_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72280 72305])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72322 72326]))                  
                :type "int")
                nil [72213 72700])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_next_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72824 72845])
                    ("" variable (:type ("Swindow_next_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72846 72867])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72891 72895]))                  
                :type "int")
                nil [72794 73045])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_next_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73137 73162])
                    ("" variable (:type ("Sset_window_next_buffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73170 73195])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73212 73216]))                  
                :type "int")
                nil [73103 73424])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_parameters" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73546 73565])
                    ("" variable (:type ("Swindow_parameters" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73566 73585])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73609 73613]))                  
                :type "int")
                nil [73518 73831])
            ("window_parameter" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [73939 73956])
                    ("parameter" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73957 73979]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [73909 74076])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_parameter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74106 74124])
                    ("" variable (:type ("Swindow_parameter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74125 74143])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74167 74171]))                  
                :type "int")
                nil [74079 74322])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_parameter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74451 74473])
                    ("" variable (:type ("Sset_window_parameter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74481 74503])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74520 74524]))                  
                :type "int")
                nil [74420 74712])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_display_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75077 75099])
                    ("" variable (:type ("Swindow_display_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75100 75122])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75146 75150]))                  
                :type "int")
                nil [75046 75291])
            ("window_display_table" function
               (:pointer 1
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [75616 75633]))                  
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [75569 76059])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_display_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76096 76122])
                    ("" variable (:type ("Sset_window_display_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76123 76149])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76166 76170]))                  
                :type "int")
                nil [76061 76329])
            ("unshow_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [76543 76569]))                  
                :type "void")
                nil [76516 78375])
            ("replace_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78574 78590])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78591 78606])
                    ("setflag" variable (:type "bool") (reparse-symbol arg-sub-list) [78608 78621]))                  
                :type "void")
                nil [78546 80246])
            ("recombine_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80434 80453]))                  
                :type "void")
                nil [80403 81818])
            ("delete_deletable_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81901 81920]))                  
                :type "void")
                nil [81864 82011])
            ("add_window_to_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [82385 82402])
                    ("user_data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [82403 82419]))                  
                :type "bool")
                nil [82353 82552])
            ("window_list" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [82767 82772]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82742 83294])
            ("candidate_window_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83954 83973])
                    ("owindow" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83974 83994])
                    ("minibuf" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84001 84021])
                    ("all_frames" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84022 84045]))                  
                :type "bool")
                nil [83922 85954])
            ("decode_next_window_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86165 86185])
                    ("minibuf" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86186 86207])
                    ("all_frames" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86208 86232]))                  
                :type "void")
                nil [86128 87089])
            ("next_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87343 87362])
                    ("minibuf" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87363 87383])
                    ("all_frames" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87384 87407])
                    ("next_p" variable (:type "bool") (reparse-symbol arg-sub-list) [87414 87426]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87311 89132])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnext_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89157 89170])
                    ("" variable (:type ("Snext_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89171 89184])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89201 89205]))                  
                :type "int")
                nil [89135 90681])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprevious_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90772 90789])
                    ("" variable (:type ("Sprevious_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90790 90807])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90824 90828]))                  
                :type "int")
                nil [90746 92306])
            ("window_list_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92501 92520])
                    ("minibuf" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92521 92541])
                    ("all_frames" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92542 92565]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [92467 93160])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93185 93198])
                    ("" variable (:type ("Swindow_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93199 93212])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93229 93233]))                  
                :type "int")
                nil [93163 93699])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_list_1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94046 94061])
                    ("" variable (:type ("Swindow_list_1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94062 94077])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94094 94098]))                  
                :type "int")
                nil [94022 95356])
            ("window_loop" type
               (:members 
                  ( ("WINDOW_LOOP_UNUSED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [95777 95796])
                    ("GET_BUFFER_WINDOW" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [95799 95817])
                    ("REPLACE_BUFFER_IN_WINDOWS_SAFELY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [95845 95878])
                    ("REDISPLAY_BUFFER_WINDOWS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [95901 95926])
                    ("CHECK_ALL_WINDOWS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [95953 96009]))                  
                :type "enum")
                nil [95756 96010])
            ("window_loop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("type" variable (:type ("window_loop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [96044 96066])
                    ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96067 96083])
                    ("mini" variable (:type "bool") (reparse-symbol arg-sub-list) [96084 96094])
                    ("frames" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96101 96120]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [96012 99863])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [99970 99989])
            ("check_all_windows" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [100014 100019]))                  
                :type "void")
                nil [99990 100074])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_buffer_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100104 100123])
                    ("" variable (:type ("Sget_buffer_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100124 100143])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100160 100164]))                  
                :type "int")
                nil [100076 100814])
            ("resize_root_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101114 101133])
                    ("delta" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101134 101152])
                    ("horizontal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101159 101182])
                    ("ignore" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101183 101202])
                    ("pixelwise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101209 101231]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101075 101329])
            ("sanitize_window_sizes" function
               (:arguments 
                  ( ("horizontal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101359 101382]))                  
                :type "void")
                nil [101331 101569])
            ("window_pixel_to_total" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101614 101632])
                    ("horizontal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101633 101656]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101572 101721])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_other_windows_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101764 101795])
                    ("" variable (:type ("Sdelete_other_windows_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101803 101834])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101852 101856]))                  
                :type "int")
                nil [101724 102587])
            ("replace_buffer_in_windows" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109338 109357]))                  
                :type "void")
                nil [109306 109407])
            ("replace_buffer_in_windows_safely" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109593 109612]))                  
                :type "void")
                nil [109554 109984])
            ("run_funs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("funs" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110109 110126]))                  
                :type "void")
                nil [110087 110231])
            ("select_window_norecord" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110269 110288]))                  
                :type "void")
                nil [110233 110355])
            ("select_frame_norecord" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110392 110410]))                  
                :type "void")
                nil [110357 110482])
            ("run_window_configuration_change_hook" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110534 110550]))                  
                :type "void")
                nil [110484 111881])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_window_configuration_change_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111930 111968])
                    ("" variable (:type ("Srun_window_configuration_change_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111976 112014])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112031 112035]))                  
                :type "int")
                nil [111883 112178])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_window_scroll_functions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112305 112334])
                    ("" variable (:type ("Srun_window_scroll_functions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112342 112371])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112388 112392]))                  
                :type "int")
                nil [112267 112530])
            ("window_size_changed" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112880 112897]))                  
                :type "bool")
                nil [112847 113252])
            ("window_set_before_size_change_sizes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [113410 113427]))                  
                :type "void")
                nil [113361 113729])
            ("run_window_size_change_functions" function
               (:arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113771 113789]))                  
                :type "void")
                nil [113732 115824])
            ("set_window_buffer" function
               (:arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116138 116157])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116158 116177])
                    ("run_hooks_p" variable (:type "bool") (reparse-symbol arg-sub-list) [116183 116200])
                    ("keep_margins_p" variable (:type "bool") (reparse-symbol arg-sub-list) [116201 116221]))                  
                :type "void")
                nil [116114 118850])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118880 118899])
                    ("" variable (:type ("Sset_window_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118900 118919])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118936 118940]))                  
                :type "int")
                nil [118852 119727])
            ("display_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120636 120655])
                    ("not_this_window_p" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120656 120686])
                    ("override_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120687 120714]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120601 120795])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fforce_window_update" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120827 120848])
                    ("" variable (:type ("Sforce_window_update" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120849 120870])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120894 120898]))                  
                :type "int")
                nil [120797 121146])
            ("temp_output_buffer_show" function
               (:arguments 
                  ( ("buf" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [122276 122301]))                  
                :type "void")
                nil [122246 124071])
            ("allocate_window" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [124160 124165]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [124120 124257])
            ("make_parent_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124456 124475])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [124476 124489]))                  
                :type "void")
                nil [124424 125288])
            ("make_window" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [125352 125357]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [125327 126882])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_new_pixel" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126916 126938])
                    ("" variable (:type ("Sset_window_new_pixel" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126939 126961])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126978 126982]))                  
                :type "int")
                nil [126885 127494])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_new_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127929 127951])
                    ("" variable (:type ("Sset_window_new_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127952 127974])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127991 127995]))                  
                :type "int")
                nil [127898 128510])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_new_normal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128781 128804])
                    ("" variable (:type ("Sset_window_new_normal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128805 128828])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128845 128849]))                  
                :type "int")
                nil [128749 129207])
            ("window_resize_check" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129699 129716])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [129717 129730]))                  
                :type "bool")
                nil [129666 131841])
            ("window_resize_apply" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [132250 132267])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [132268 132281]))                  
                :type "void")
                nil [132217 133989])
            ("window_resize_apply_total" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [134260 134277])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [134278 134291]))                  
                :type "void")
                nil [134221 135377])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_resize_apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135409 135430])
                    ("" variable (:type ("Swindow_resize_apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135431 135452])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135469 135473]))                  
                :type "int")
                nil [135379 136333])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_resize_apply_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136798 136825])
                    ("" variable (:type ("Swindow_resize_apply_total" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136826 136853])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136870 136874]))                  
                :type "int")
                nil [136762 137316])
            ("resize_frame_windows" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [138341 138357])
                    ("size" variable (:type "int") (reparse-symbol arg-sub-list) [138358 138367])
                    ("horflag" variable (:type "bool") (reparse-symbol arg-sub-list) [138368 138381])
                    ("pixelwise" variable (:type "bool") (reparse-symbol arg-sub-list) [138382 138397]))                  
                :type "void")
                nil [138314 141550])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsplit_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141585 141608])
                    ("" variable (:type ("Ssplit_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141609 141632])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141649 141653]))                  
                :type "int")
                nil [141553 142725])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148865 148889])
                    ("" variable (:type ("Sdelete_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148890 148914])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148931 148935]))                  
                :type "int")
                nil [148832 149113])
            ("grow_mini_window" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [153995 154012])
                    ("delta" variable (:type "int") (reparse-symbol arg-sub-list) [154013 154023])
                    ("pixelwise" variable (:type "bool") (reparse-symbol arg-sub-list) [154024 154039]))                  
                :type "void")
                nil [153972 155506])
            ("shrink_mini_window" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [155574 155591])
                    ("pixelwise" variable (:type "bool") (reparse-symbol arg-sub-list) [155592 155607]))                  
                :type "void")
                nil [155549 156921])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fresize_mini_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156961 156990])
                    ("" variable (:type ("Sresize_mini_window_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156991 157020])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157037 157041]))                  
                :type "int")
                nil [156923 157108])
            ("mark_window_cursors_off" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [158394 158411]))                  
                :type "void")
                nil [158364 158614])
            ("window_wants_mode_line" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [159112 159129]))                  
                :type "bool")
                nil [159083 159538])
            ("window_wants_header_line" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [160128 160145]))                  
                :type "bool")
                nil [160097 160648])
            ("window_internal_height" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [160749 160766]))                  
                :type "int")
                nil [160721 161039])
            ("window_scroll" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [161586 161605])
                    ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [161606 161618])
                    ("whole" variable (:type "bool") (reparse-symbol arg-sub-list) [161619 161630])
                    ("noerror" variable (:type "bool") (reparse-symbol arg-sub-list) [161631 161644]))                  
                :type "void")
                nil [161559 162276])
            ("window_scroll_margin" function
               (:arguments 
                  ( ("window" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [162518 162540])
                    ("unit" variable (:type ("margin_unit" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [162541 162563]))                  
                :type "int")
                nil [162492 163253])
            ("window_scroll_pixel_based" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163443 163462])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [163463 163469])
                    ("whole" variable (:type "bool") (reparse-symbol arg-sub-list) [163470 163481])
                    ("noerror" variable (:type "bool") (reparse-symbol arg-sub-list) [163482 163495]))                  
                :type "void")
                nil [163404 177634])
            ("window_scroll_line_based" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [177813 177832])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [177833 177839])
                    ("whole" variable (:type "bool") (reparse-symbol arg-sub-list) [177840 177851])
                    ("noerror" variable (:type "bool") (reparse-symbol arg-sub-list) [177852 177865]))                  
                :type "void")
                nil [177775 183092])
            ("scroll_command" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [183423 183442])
                    ("n" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [183443 183457])
                    ("direction" variable (:type "int") (reparse-symbol arg-sub-list) [183458 183472]))                  
                :type "void")
                nil [183395 184905])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_up" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [184927 184938])
                    ("" variable (:type ("Sscroll_up" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [184939 184950])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [184970 184974]))                  
                :type "int")
                nil [184907 185359])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_down" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [185446 185459])
                    ("" variable (:type ("Sscroll_down" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [185460 185473])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [185493 185497]))                  
                :type "int")
                nil [185424 185874])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fother_window_for_scrolling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [185978 186006])
                    ("" variable (:type ("Sother_window_for_scrolling" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [186007 186035])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [186052 186056]))                  
                :type "int")
                nil [185941 186464])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_other_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [187496 187517])
                    ("" variable (:type ("Sscroll_other_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [187518 187539])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [187558 187562]))                  
                :type "int")
                nil [187466 188097])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_other_window_down" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188269 188295])
                    ("" variable (:type ("Sscroll_other_window_down" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188303 188329])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188348 188352]))                  
                :type "int")
                nil [188234 188517])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_left" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188678 188691])
                    ("" variable (:type ("Sscroll_left" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188692 188705])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [188728 188732]))                  
                :type "int")
                nil [188656 189216])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fscroll_right" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [189611 189625])
                    ("" variable (:type ("Sscroll_right" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [189626 189640])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [189663 189667]))                  
                :type "int")
                nil [189588 190152])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fminibuffer_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [190561 190589])
                    ("" variable (:type ("Sminibuffer_selected_window" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [190590 190618])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [190635 190639]))                  
                :type "int")
                nil [190524 190785])
            ("displayed_window_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [191101 191118]))                  
                :type "int")
                nil [191066 192162])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecenter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192184 192194])
                    ("" variable (:type ("Srecenter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192195 192205])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192227 192231]))                  
                :type "int")
                nil [192165 193128])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_text_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198808 198827])
                    ("" variable (:type ("Swindow_text_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198828 198847])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198871 198875]))                  
                :type "int")
                nil [198780 199269])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_text_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199546 199566])
                    ("" variable (:type ("Swindow_text_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199567 199587])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199611 199615]))                  
                :type "int")
                nil [199517 200012])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmove_to_window_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200270 200291])
                    ("" variable (:type ("Smove_to_window_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200292 200313])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200339 200343]))                  
                :type "int")
                nil [200240 200739])
            ("GCALIGNED_STRUCT" variable (:type ("save_window_data" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [202716 203703])
            ("save_window_data" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [202748 202779])
                    ("selected_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202784 202811])
                    ("current_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202816 202843])
                    ("f_current_buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202848 202877])
                    ("minibuf_scroll_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202882 202916])
                    ("minibuf_selected_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202921 202957])
                    ("root_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202962 202986])
                    ("focus_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [202991 203015])
                    ("saved_windows" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203112 203138])
                    ("frame_cols" variable (:type "int") (reparse-symbol classsubparts) [203321 203349])
                    ("frame_lines" variable (:type "int") (reparse-symbol classsubparts) [203321 203349])
                    ("frame_menu_bar_lines" variable (:type "int") (reparse-symbol classsubparts) [203442 203489])
                    ("frame_tool_bar_lines" variable (:type "int") (reparse-symbol classsubparts) [203442 203489])
                    ("frame_text_width" variable (:type "int") (reparse-symbol classsubparts) [203494 203534])
                    ("frame_text_height" variable (:type "int") (reparse-symbol classsubparts) [203494 203534])
                    ("frame_menu_bar_height" variable (:type "int") (reparse-symbol classsubparts) [203632 203681])
                    ("frame_tool_bar_height" variable (:type "int") (reparse-symbol classsubparts) [203632 203681]))                  
                :type "struct")
                nil [202716 203703])
            ("saved_window" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [203768 203799])
                    ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203803 203857])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203803 203857])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203803 203857])
                    ("pointm" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203803 203857])
                    ("old_pointm" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203803 203857])
                    ("pixel_left" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203860 203921])
                    ("pixel_top" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203860 203921])
                    ("pixel_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203860 203921])
                    ("pixel_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203860 203921])
                    ("pixel_height_before_size_change" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203924 204000])
                    ("pixel_width_before_size_change" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [203924 204000])
                    ("left_col" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204003 204059])
                    ("top_line" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204003 204059])
                    ("total_cols" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204003 204059])
                    ("total_lines" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204003 204059])
                    ("normal_cols" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204062 204100])
                    ("normal_lines" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204062 204100])
                    ("hscroll" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204103 204173])
                    ("min_hscroll" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204103 204173])
                    ("hscroll_whole" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204103 204173])
                    ("suspend_auto_hscroll" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204103 204173])
                    ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204176 204201])
                    ("prev" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204176 204201])
                    ("start_at_line_beg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204204 204234])
                    ("display_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204237 204263])
                    ("left_margin_cols" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204266 204314])
                    ("right_margin_cols" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204266 204314])
                    ("left_fringe_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204317 204392])
                    ("right_fringe_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204317 204392])
                    ("fringes_outside_margins" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204317 204392])
                    ("scroll_bar_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204395 204461])
                    ("vertical_scroll_bar_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204395 204461])
                    ("dedicated" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204395 204461])
                    ("scroll_bar_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204464 204522])
                    ("horizontal_scroll_bar_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204464 204522])
                    ("combination_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204525 204574])
                    ("window_parameters" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [204525 204574]))                  
                :type "struct")
                nil [203744 204577])
            ("SAVED_WINDOW_N" variable (:constant-flag t) nil [204587 204601])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_configuration_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204706 204730])
                    ("" variable (:type ("Swindow_configuration_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204731 204755])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204772 204776]))                  
                :type "int")
                nil [204673 204860])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_configuration_frame" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204956 204984])
                    ("" variable (:type ("Swindow_configuration_frame" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204985 205013])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205030 205034]))                  
                :type "int")
                nil [204919 205136])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_configuration" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205470 205496])
                    ("" variable (:type ("Sset_window_configuration" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205504 205530])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205547 205551]))                  
                :type "int")
                nil [205435 205936])
            ("restore_window_configuration" function
               (:arguments 
                  ( ("configuration" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [221763 221789]))                  
                :type "void")
                nil [221728 221838])
            ("delete_all_child_windows" function
               (:arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [222057 222076]))                  
                :type "void")
                nil [222026 222883])
            ("count_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [222918 222940]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [222886 223155])
            ("get_leaf_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [223293 223310])
                    ("flat" variable
                       (:pointer 2
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [223311 223332])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [223333 223345]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [223258 223553])
            ("get_phys_cursor_glyph" function
               (:pointer 1
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [223758 223775]))                  
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [223720 224542])
            ("save_window_save" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [224580 224599])
                    ("vector" variable
                       (:pointer 1
                        :type ("Lisp_Vector" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [224600 224627])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [224628 224640]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [224545 229129])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_window_configuration" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [229170 229200])
                    ("" variable (:type ("Scurrent_window_configuration" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [229208 229238])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [229255 229259]))                  
                :type "int")
                nil [229131 229861])
            ("apply_window_adjustment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [231396 231413]))                  
                :type "void")
                nil [231359 231578])
            ("extract_dimension" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dimension" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [231782 231804]))                  
                :type "int")
                nil [231752 231925])
            ("set_window_margins" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [231970 231987])
                    ("left_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [231988 232011])
                    ("right_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [232018 232042]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [231927 232678])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_margins" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [232709 232729])
                    ("" variable (:type ("Sset_window_margins" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [232730 232750])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [232774 232778]))                  
                :type "int")
                nil [232680 233248])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_margins" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [233437 233453])
                    ("" variable (:type ("Swindow_margins" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [233454 233470])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [233494 233498]))                  
                :type "int")
                nil [233412 233765])
            ("set_window_fringes" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [234183 234200])
                    ("left_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [234201 234224])
                    ("right_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [234231 234255])
                    ("outside_margins" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [234256 234284]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [234140 235127])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_fringes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [235158 235178])
                    ("" variable (:type ("Sset_window_fringes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [235179 235199])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [235223 235227]))                  
                :type "int")
                nil [235129 235993])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_fringes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236202 236218])
                    ("" variable (:type ("Swindow_fringes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236219 236235])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236259 236263]))                  
                :type "int")
                nil [236177 236467])
            ("set_window_scroll_bars" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [236903 236920])
                    ("width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236921 236939])
                    ("vertical_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236943 236969])
                    ("height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236970 236989])
                    ("horizontal_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236993 237021]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [236856 238628])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_scroll_bars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [238663 238687])
                    ("" variable (:type ("Sset_window_scroll_bars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [238695 238719])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [238736 238740]))                  
                :type "int")
                nil [238630 239787])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_scroll_bars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [240013 240033])
                    ("" variable (:type ("Swindow_scroll_bars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [240034 240054])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [240078 240082]))                  
                :type "int")
                nil [239984 240439])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_vscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241061 241077])
                    ("" variable (:type ("Swindow_vscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241078 241094])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241111 241115]))                  
                :type "int")
                nil [241036 241430])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_window_vscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241778 241798])
                    ("" variable (:type ("Sset_window_vscroll" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241799 241819])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241843 241847]))                  
                :type "int")
                nil [241749 242402])
            ("foreach_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [243358 243374])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [243387 243403])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [243404 243411]))                          
                        :type "bool")
                        nil nil)
                    ("user_data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [243415 243431]))                  
                :type "void")
                nil [243330 243606])
            ("foreach_window_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [243916 243933])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [243946 243962])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [243963 243970]))                          
                        :type "bool")
                        nil nil)
                    ("user_data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [243976 243992]))                  
                :type "bool")
                nil [243886 244258])
            ("compare_window_configurations" function
               (:arguments 
                  ( ("configuration1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [244832 244859])
                    ("configuration2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [244870 244897])
                    ("ignore_positions" variable (:type "bool") (reparse-symbol arg-sub-list) [244908 244930]))                  
                :type "bool")
                nil [244796 247857])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcompare_window_configurations" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [247899 247930])
                    ("" variable (:type ("Scompare_window_configurations" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [247938 247969])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [247986 247990]))                  
                :type "int")
                nil [247859 248185])
            ("init_window_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [248295 248300]))                  
                :type "void")
                nil [248272 248497])
            ("init_window" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [248517 248522]))                  
                :type "void")
                nil [248499 248549])
            ("syms_of_window" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [248572 248577]))                  
                :type "void")
                nil [248551 263086])
            ("keys_of_window" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [263109 263114]))                  
                :type "void")
                nil [263088 263431]))          
      :file "window.c"
      :pointmax 263432
      :fsize 263431
      :lastmodtime '(23451 3115 769715 852000)
      :unmatched-syntax '((semantic-list 248186 . 248269) (punctuation 247989 . 247990) (number 247976 . 247977) (number 247973 . 247974) (number 247970 . 247971) (string 247866 . 247897) (semantic-list 242403 . 243131) (punctuation 241846 . 241847) (number 241833 . 241834) (number 241830 . 241831) (number 241827 . 241828) (string 241756 . 241776) (semantic-list 241431 . 241746) (punctuation 241114 . 241115) (number 241101 . 241102) (number 241098 . 241099) (number 241095 . 241096) (string 241043 . 241059) (semantic-list 240440 . 240862) (punctuation 240081 . 240082) (number 240068 . 240069) (number 240065 . 240066) (number 240062 . 240063) (string 239991 . 240011) (semantic-list 239788 . 239981) (punctuation 238739 . 238740) (number 238726 . 238727) (number 238723 . 238724) (number 238720 . 238721) (string 238637 . 238661) (semantic-list 236468 . 236684) (punctuation 236262 . 236263) (number 236249 . 236250) (number 236246 . 236247) (number 236243 . 236244) (string 236184 . 236200) (semantic-list 235994 . 236174) (punctuation 235226 . 235227) (number 235213 . 235214) (number 235210 . 235211) (number 235207 . 235208) (string 235136 . 235156) (semantic-list 233766 . 233972) (punctuation 233497 . 233498) (number 233484 . 233485) (number 233481 . 233482) (number 233478 . 233479) (string 233419 . 233435) (semantic-list 233249 . 233409) (punctuation 232777 . 232778) (number 232764 . 232765) (number 232761 . 232762) (number 232758 . 232759) (string 232687 . 232707) (semantic-list 229862 . 231286) (punctuation 229258 . 229259) (number 229245 . 229246) (number 229242 . 229243) (number 229239 . 229240) (string 229138 . 229168) (semantic-list 205937 . 221725) (punctuation 205550 . 205551) (number 205537 . 205538) (number 205534 . 205535) (number 205531 . 205532) (string 205442 . 205468) (semantic-list 205137 . 205433) (punctuation 205033 . 205034) (number 205020 . 205021) (number 205017 . 205018) (number 205014 . 205015) (string 204926 . 204954) (semantic-list 204861 . 204917) (punctuation 204775 . 204776) (number 204762 . 204763) (number 204759 . 204760) (number 204756 . 204757) (string 204680 . 204704) (semantic-list 200740 . 202538) (punctuation 200342 . 200343) (string 200327 . 200330) (number 200324 . 200325) (number 200321 . 200322) (string 200247 . 200268) (semantic-list 200013 . 200237) (punctuation 199614 . 199615) (number 199601 . 199602) (number 199598 . 199599) (number 199595 . 199596) (string 199524 . 199544) (semantic-list 199270 . 199515) (punctuation 198874 . 198875) (number 198861 . 198862) (number 198858 . 198859) (number 198855 . 198856) (string 198787 . 198806) (semantic-list 193129 . 198778) (punctuation 192230 . 192231) (string 192212 . 192218) (number 192209 . 192210) (number 192206 . 192207) (string 192172 . 192182) (semantic-list 190786 . 190966) (punctuation 190638 . 190639) (number 190625 . 190626) (number 190622 . 190623) (number 190619 . 190620) (string 190531 . 190559) (semantic-list 190153 . 190522) (punctuation 189666 . 189667) (string 189647 . 189654) (number 189644 . 189645) (number 189641 . 189642) (string 189595 . 189609) (semantic-list 189217 . 189586) (punctuation 188731 . 188732) (string 188712 . 188719) (number 188709 . 188710) (number 188706 . 188707) (string 188663 . 188676) (semantic-list 188518 . 188653) (punctuation 188351 . 188352) (string 188336 . 188339) (number 188333 . 188334) (number 188330 . 188331) (string 188241 . 188267) (semantic-list 188098 . 188232) (punctuation 187561 . 187562) (string 187546 . 187549) (number 187543 . 187544) (number 187540 . 187541) (string 187473 . 187494) (semantic-list 186465 . 187464) (punctuation 186055 . 186056) (number 186042 . 186043) (number 186039 . 186040) (number 186036 . 186037) (string 185948 . 185976) (semantic-list 185875 . 185938) (punctuation 185496 . 185497) (string 185480 . 185484) (number 185477 . 185478) (number 185474 . 185475) (string 185431 . 185444) (semantic-list 185360 . 185422) (punctuation 184973 . 184974) (string 184957 . 184961) (number 184954 . 184955) (number 184951 . 184952) (string 184914 . 184925) (semantic-list 157109 . 158124) (punctuation 157040 . 157041) (number 157027 . 157028) (number 157024 . 157025) (number 157021 . 157022) (string 156930 . 156959) (semantic-list 149114 . 153717) (punctuation 148934 . 148935) (number 148921 . 148922) (number 148918 . 148919) (number 148915 . 148916) (string 148839 . 148863) (semantic-list 142726 . 148829) (punctuation 141652 . 141653) (number 141639 . 141640) (number 141636 . 141637) (number 141633 . 141634) (string 141560 . 141583) (semantic-list 137317 . 137988) (punctuation 136873 . 136874) (number 136860 . 136861) (number 136857 . 136858) (number 136854 . 136855) (string 136769 . 136796) (semantic-list 136334 . 136759) (punctuation 135472 . 135473) (number 135459 . 135460) (number 135456 . 135457) (number 135453 . 135454) (string 135386 . 135407) (semantic-list 129208 . 129282) (punctuation 128848 . 128849) (number 128835 . 128836) (number 128832 . 128833) (number 128829 . 128830) (string 128756 . 128779) (semantic-list 128511 . 128747) (punctuation 127994 . 127995) (number 127981 . 127982) (number 127978 . 127979) (number 127975 . 127976) (string 127905 . 127927) (semantic-list 127495 . 127896) (punctuation 126981 . 126982) (number 126968 . 126969) (number 126965 . 126966) (number 126962 . 126963) (string 126892 . 126914) (semantic-list 121147 . 122216) (punctuation 120897 . 120898) (number 120884 . 120885) (number 120881 . 120882) (number 120878 . 120879) (string 120804 . 120825) (semantic-list 119728 . 120598) (punctuation 118939 . 118940) (number 118926 . 118927) (number 118923 . 118924) (number 118920 . 118921) (string 118859 . 118878) (semantic-list 112531 . 112711) (punctuation 112391 . 112392) (number 112378 . 112379) (number 112375 . 112376) (number 112372 . 112373) (string 112274 . 112303) (semantic-list 112179 . 112265) (punctuation 112034 . 112035) (number 112021 . 112022) (number 112018 . 112019) (number 112015 . 112016) (string 111890 . 111928) (semantic-list 102588 . 109303) (punctuation 101855 . 101856) (string 101841 . 101843) (number 101838 . 101839) (number 101835 . 101836) (string 101731 . 101762) (semantic-list 100815 . 101072) (punctuation 100163 . 100164) (number 100150 . 100151) (number 100147 . 100148) (number 100144 . 100145) (string 100083 . 100102) (semantic-list 99963 . 99969) (symbol 99945 . 99962) (VOID 99940 . 99944) (EXTERN 99933 . 99939) (semantic-list 95357 . 95414) (punctuation 94097 . 94098) (number 94084 . 94085) (number 94081 . 94082) (number 94078 . 94079) (string 94029 . 94044) (semantic-list 93700 . 94019) (punctuation 93232 . 93233) (number 93219 . 93220) (number 93216 . 93217) (number 93213 . 93214) (string 93170 . 93183) (semantic-list 92307 . 92369) (punctuation 90827 . 90828) (number 90814 . 90815) (number 90811 . 90812) (number 90808 . 90809) (string 90753 . 90770) (semantic-list 90682 . 90743) (punctuation 89204 . 89205) (number 89191 . 89192) (number 89188 . 89189) (number 89185 . 89186) (string 89142 . 89155) (NEW 78603 . 78606) (semantic-list 76330 . 76408) (punctuation 76169 . 76170) (number 76156 . 76157) (number 76153 . 76154) (number 76150 . 76151) (string 76068 . 76094) (semantic-list 75292 . 75348) (punctuation 75149 . 75150) (number 75136 . 75137) (number 75133 . 75134) (number 75130 . 75131) (string 75053 . 75075) (semantic-list 74713 . 75044) (punctuation 74523 . 74524) (number 74510 . 74511) (number 74507 . 74508) (number 74504 . 74505) (string 74427 . 74449) (semantic-list 74323 . 74418) (punctuation 74170 . 74171) (number 74157 . 74158) (number 74154 . 74155) (number 74151 . 74152) (string 74086 . 74104) (semantic-list 73832 . 73907) (punctuation 73612 . 73613) (number 73599 . 73600) (number 73596 . 73597) (number 73593 . 73594) (string 73525 . 73544) (semantic-list 73425 . 73516) (punctuation 73215 . 73216) (number 73202 . 73203) (number 73199 . 73200) (number 73196 . 73197) (string 73110 . 73135) (semantic-list 73046 . 73101) (punctuation 72894 . 72895) (number 72881 . 72882) (number 72878 . 72879) (number 72875 . 72876) (string 72801 . 72822) (semantic-list 72701 . 72792) (punctuation 72325 . 72326) (number 72312 . 72313) (number 72309 . 72310) (number 72306 . 72307) (string 72220 . 72245) (semantic-list 72156 . 72211) (punctuation 71815 . 71816) (number 71802 . 71803) (number 71799 . 71800) (number 71796 . 71797) (string 71722 . 71743) (semantic-list 71641 . 71713) (punctuation 70664 . 70665) (number 70651 . 70652) (number 70648 . 70649) (number 70645 . 70646) (string 70562 . 70586) (semantic-list 70501 . 70553) (punctuation 69576 . 69577) (number 69563 . 69564) (number 69560 . 69561) (number 69557 . 69558) (string 69486 . 69506) (semantic-list 67289 . 69477) (punctuation 64964 . 64965) (number 64951 . 64952) (number 64948 . 64949) (number 64945 . 64946) (string 64848 . 64879) (semantic-list 62952 . 64839) (punctuation 62015 . 62016) (number 62002 . 62003) (number 61999 . 62000) (number 61996 . 61997) (string 61925 . 61945) (semantic-list 60641 . 61916) (punctuation 59424 . 59425) (number 59411 . 59412) (number 59408 . 59409) (number 59405 . 59406) (string 59319 . 59344) (semantic-list 58925 . 59310) (punctuation 58580 . 58581) (number 58567 . 58568) (number 58564 . 58565) (number 58561 . 58562) (string 58503 . 58521) (semantic-list 57733 . 58494) (punctuation 57542 . 57543) (number 57529 . 57530) (number 57526 . 57527) (number 57523 . 57524) (string 57465 . 57483) (semantic-list 55656 . 57456) (punctuation 55125 . 55126) (number 55112 . 55113) (number 55109 . 55110) (number 55106 . 55107) (string 55066 . 55078) (semantic-list 54542 . 54609) (punctuation 54322 . 54323) (number 54309 . 54310) (number 54306 . 54307) (number 54303 . 54304) (string 54257 . 54271) (semantic-list 54176 . 54248) (punctuation 54043 . 54044) (number 54030 . 54031) (number 54027 . 54028) (number 54024 . 54025) (string 53966 . 53984) (semantic-list 53751 . 53957) (punctuation 53260 . 53261) (number 53247 . 53248) (number 53244 . 53245) (number 53241 . 53242) (string 53195 . 53209) (semantic-list 52872 . 53186) (punctuation 52624 . 52625) (number 52611 . 52612) (number 52608 . 52609) (number 52605 . 52606) (string 52568 . 52579) (semantic-list 48497 . 50012) (punctuation 47389 . 47390) (number 47376 . 47377) (number 47373 . 47374) (number 47370 . 47371) (string 47284 . 47309) (semantic-list 40495 . 40581) (punctuation 39998 . 39999) (number 39985 . 39986) (number 39982 . 39983) (number 39979 . 39980) (string 39866 . 39900) (semantic-list 39793 . 39857) (punctuation 39591 . 39592) (number 39578 . 39579) (number 39575 . 39576) (number 39572 . 39573) (string 39471 . 39501) (semantic-list 39361 . 39462) (punctuation 38942 . 38943) (number 38929 . 38930) (number 38926 . 38927) (number 38923 . 38924) (string 38859 . 38879) (semantic-list 37791 . 37855) (punctuation 37620 . 37621) (number 37607 . 37608) (number 37604 . 37605) (number 37601 . 37602) (string 37549 . 37565) (semantic-list 37451 . 37540) (punctuation 37293 . 37294) (number 37280 . 37281) (number 37277 . 37278) (number 37274 . 37275) (string 37185 . 37211) (semantic-list 37088 . 37176) (punctuation 36933 . 36934) (number 36920 . 36921) (number 36917 . 36918) (number 36914 . 36915) (string 36828 . 36853) (semantic-list 36732 . 36819) (punctuation 36581 . 36582) (number 36568 . 36569) (number 36565 . 36566) (number 36562 . 36563) (string 36464 . 36493) (semantic-list 36369 . 36455) (punctuation 36219 . 36220) (number 36206 . 36207) (number 36203 . 36204) (number 36200 . 36201) (string 36105 . 36133) (semantic-list 36011 . 36096) (punctuation 35862 . 35863) (number 35849 . 35850) (number 35846 . 35847) (number 35843 . 35844) (string 35751 . 35778) (semantic-list 35659 . 35742) (punctuation 35512 . 35513) (number 35499 . 35500) (number 35496 . 35497) (number 35493 . 35494) (string 35407 . 35432) (semantic-list 35298 . 35398) (punctuation 34633 . 34634) (number 34620 . 34621) (number 34617 . 34618) (number 34614 . 34615) (string 34553 . 34572) (semantic-list 34442 . 34544) (punctuation 33851 . 33852) (number 33838 . 33839) (number 33835 . 33836) (number 33832 . 33833) (string 33768 . 33788) (semantic-list 32100 . 32166) (punctuation 31797 . 31798) (number 31784 . 31785) (number 31781 . 31782) (number 31778 . 31779) (string 31723 . 31740) (semantic-list 31648 . 31714) (punctuation 31319 . 31320) (number 31306 . 31307) (number 31303 . 31304) (number 31300 . 31301) (string 31236 . 31256) (semantic-list 31160 . 31227) (punctuation 31023 . 31024) (number 31010 . 31011) (number 31007 . 31008) (number 31004 . 31005) (string 30946 . 30964) (semantic-list 30869 . 30937) (punctuation 30731 . 30732) (number 30718 . 30719) (number 30715 . 30716) (number 30712 . 30713) (string 30651 . 30670) (semantic-list 30589 . 30642) (punctuation 30208 . 30209) (number 30195 . 30196) (number 30192 . 30193) (number 30189 . 30190) (string 30131 . 30149) (semantic-list 30068 . 30122) (punctuation 29734 . 29735) (number 29721 . 29722) (number 29718 . 29719) (number 29715 . 29716) (string 29654 . 29673) (semantic-list 29527 . 29645) (punctuation 28361 . 28362) (number 28348 . 28349) (number 28345 . 28346) (number 28342 . 28343) (string 28278 . 28298) (semantic-list 28216 . 28269) (punctuation 27831 . 27832) (number 27818 . 27819) (number 27815 . 27816) (number 27812 . 27813) (string 27754 . 27772) (semantic-list 27396 . 27745) (punctuation 26335 . 26336) (number 26322 . 26323) (number 26319 . 26320) (number 26316 . 26317) (string 26252 . 26272) (semantic-list 25892 . 26243) (punctuation 24834 . 24835) (number 24821 . 24822) (number 24818 . 24819) (number 24815 . 24816) (string 24748 . 24769) (semantic-list 24645 . 24739) (punctuation 24338 . 24339) (number 24325 . 24326) (number 24322 . 24323) (number 24319 . 24320) (string 24181 . 24221) (semantic-list 24079 . 24172) (punctuation 23774 . 23775) (number 23761 . 23762) (number 23758 . 23759) (number 23755 . 23756) (string 23620 . 23659) (semantic-list 23541 . 23611) (punctuation 23199 . 23200) (number 23186 . 23187) (number 23183 . 23184) (number 23180 . 23181) (string 23113 . 23134) (semantic-list 23035 . 23104) (punctuation 22652 . 22653) (number 22639 . 22640) (number 22636 . 22637) (number 22633 . 22634) (string 22569 . 22589) (semantic-list 22494 . 22559) (punctuation 22215 . 22216) (number 22202 . 22203) (number 22199 . 22200) (number 22196 . 22197) (string 22141 . 22158) (semantic-list 21902 . 22132) (punctuation 21494 . 21495) (number 21481 . 21482) (number 21478 . 21479) (number 21475 . 21476) (string 21381 . 21411) (semantic-list 21164 . 21372) (punctuation 20816 . 20817) (number 20803 . 20804) (number 20800 . 20801) (number 20797 . 20798) (string 20715 . 20741) (semantic-list 20658 . 20706) (punctuation 20462 . 20463) (number 20449 . 20450) (number 20446 . 20447) (number 20443 . 20444) (string 20376 . 20397) (semantic-list 20319 . 20367) (punctuation 20131 . 20132) (number 20118 . 20119) (number 20115 . 20116) (number 20112 . 20113) (string 20045 . 20066) (semantic-list 19915 . 20036) (punctuation 19609 . 19610) (number 19596 . 19597) (number 19593 . 19594) (number 19590 . 19591) (string 19529 . 19548) (semantic-list 19401 . 19520) (punctuation 19094 . 19095) (number 19081 . 19082) (number 19078 . 19079) (number 19075 . 19076) (string 19017 . 19035) (semantic-list 18958 . 19008) (punctuation 18757 . 18758) (number 18744 . 18745) (number 18741 . 18742) (number 18738 . 18739) (string 18689 . 18704) (semantic-list 18579 . 18680) (punctuation 18380 . 18381) (number 18367 . 18368) (number 18364 . 18365) (number 18361 . 18362) (string 18312 . 18327) (semantic-list 18249 . 18302) (punctuation 16994 . 16995) (number 16981 . 16982) (number 16978 . 16979) (number 16975 . 16976) (string 16926 . 16941) (semantic-list 13554 . 13583) (punctuation 13381 . 13382) (number 13368 . 13369) (number 13365 . 13366) (number 13362 . 13363) (string 13307 . 13324) (semantic-list 12890 . 13298) (punctuation 12473 . 12474) (number 12460 . 12461) (number 12457 . 12458) (number 12454 . 12455) (string 12362 . 12389) (semantic-list 11985 . 12353) (punctuation 11643 . 11644) (number 11630 . 11631) (number 11627 . 11628) (number 11624 . 11625) (string 11544 . 11567) (semantic-list 11090 . 11535) (punctuation 10740 . 10741) (number 10727 . 10728) (number 10724 . 10725) (number 10721 . 10722) (string 10657 . 10677) (semantic-list 10511 . 10581) (punctuation 10365 . 10366) (number 10352 . 10353) (number 10349 . 10350) (number 10346 . 10347) (string 10272 . 10293) (semantic-list 10201 . 10263) (punctuation 10060 . 10061) (number 10047 . 10048) (number 10044 . 10045) (number 10041 . 10042) (string 9980 . 9999) (semantic-list 9621 . 9971) (punctuation 9339 . 9340) (number 9326 . 9327) (number 9323 . 9324) (number 9320 . 9321) (string 9259 . 9278) (semantic-list 9201 . 9250) (punctuation 9061 . 9062) (number 9048 . 9049) (number 9045 . 9046) (number 9042 . 9043) (string 8996 . 9010) (semantic-list 8911 . 8959) (punctuation 8722 . 8723) (number 8709 . 8710) (number 8706 . 8707) (number 8703 . 8704) (string 8654 . 8669) (semantic-list 8596 . 8645) (punctuation 8380 . 8381) (number 8367 . 8368) (number 8364 . 8365) (number 8361 . 8362) (string 8309 . 8325) (semantic-list 8258 . 8300) (punctuation 8175 . 8176) (number 8162 . 8163) (number 8159 . 8160) (number 8156 . 8157) (string 8125 . 8134))
      :lexical-table 
        '(("SAVED_WINDOW_N" (spp-arg-list ("swv" "n") 204601 . 204608) . ((semantic-list "((struct saved_window *) (XVECTOR ((swv)->contents[(n)])))" 204613 . 204671)))
          )
)
    (semanticdb-table "semanticdb-table-1afb0c0"
      :major-mode c-mode
      :tags 
        '( ("WINDOW_H_INCLUDED" variable (:constant-flag t) nil [799 816])
            ("dispextern.h" include nil nil [818 841])
            ("cursor_pos" type
               (:members 
                  ( ("x" variable (:type "int") (reparse-symbol classsubparts) [3453 3462])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [3453 3462])
                    ("hpos" variable (:type "int") (reparse-symbol classsubparts) [3498 3513])
                    ("vpos" variable (:type "int") (reparse-symbol classsubparts) [3498 3513]))                  
                :type "struct")
                nil [3371 3516])
            ("GCALIGNED_STRUCT" variable (:type ("window" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [3518 15123])
            ("window" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) (reparse-symbol classsubparts) [3609 3640])
                    ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3686 3704])
                    ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3816 3833])
                    ("prev" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3838 3855])
                    ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3907 3926])
                    ("normal_lines" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4126 4151])
                    ("normal_cols" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4156 4180])
                    ("new_total" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4330 4352])
                    ("new_normal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4357 4380])
                    ("new_pixel" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4385 4407])
                    ("contents" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4455 4476])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4755 4773])
                    ("pointm" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5018 5037])
                    ("old_pointm" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5212 5235])
                    ("temslot" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5326 5346])
                    ("vertical_scroll_bar" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5702 5734])
                    ("vertical_scroll_bar_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5861 5898])
                    ("horizontal_scroll_bar" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6256 6290])
                    ("horizontal_scroll_bar_type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6419 6458])
                    ("display_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6586 6612])
                    ("dedicated" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6789 6811])
                    ("redisplay_end_trigger" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6938 6972])
                    ("combination_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7048 7078])
                    ("window_parameters" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7121 7151])
                    ("mode_line_help_echo" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7227 7259])
                    ("current_matrix" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [7462 7498])
                    ("desired_matrix" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [7503 7539])
                    ("prev_buffers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7798 7823])
                    ("next_buffers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7880 7905])
                    ("use_time" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7970 7989])
                    ("sequence_number" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8060 8086])
                    ("pixel_left" variable (:type "int") (reparse-symbol classsubparts) [8225 8240])
                    ("pixel_top" variable (:type "int") (reparse-symbol classsubparts) [8245 8259])
                    ("left_col" variable (:type "int") (reparse-symbol classsubparts) [8380 8393])
                    ("top_line" variable (:type "int") (reparse-symbol classsubparts) [8398 8411])
                    ("pixel_width" variable (:type "int") (reparse-symbol classsubparts) [8458 8474])
                    ("pixel_height" variable (:type "int") (reparse-symbol classsubparts) [8479 8496])
                    ("pixel_width_before_size_change" variable (:type "int") (reparse-symbol classsubparts) [8607 8642])
                    ("pixel_height_before_size_change" variable (:type "int") (reparse-symbol classsubparts) [8647 8683])
                    ("total_cols" variable (:type "int") (reparse-symbol classsubparts) [8724 8739])
                    ("total_lines" variable (:type "int") (reparse-symbol classsubparts) [8744 8760])
                    ("hscroll" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8846 8864])
                    ("min_hscroll" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9002 9024])
                    ("hscroll_whole" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9155 9179])
                    ("last_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9290 9314])
                    ("last_overlay_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9422 9454])
                    ("last_point" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9569 9590])
                    ("base_line_number" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9748 9775])
                    ("base_line_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [9957 9981])
                    ("column_number_displayed" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10120 10154])
                    ("nrows_scale_factor" variable (:type "int") (reparse-symbol classsubparts) [10377 10420])
                    ("ncols_scale_factor" variable (:type "int") (reparse-symbol classsubparts) [10377 10420])
                    ("cursor" variable (:type ("cursor_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [10516 10541])
                    ("phys_cursor" variable (:type ("cursor_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [10588 10618])
                    ("output_cursor" variable (:type ("cursor_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [10675 10707])
                    ("last_cursor_vpos" variable (:type "int") (reparse-symbol classsubparts) [10841 10862])
                    ("left_fringe_width" variable (:type "int") (reparse-symbol classsubparts) [11299 11321])
                    ("right_fringe_width" variable (:type "int") (reparse-symbol classsubparts) [11326 11349])
                    ("left_margin_cols" variable (:type "int") (reparse-symbol classsubparts) [11600 11621])
                    ("right_margin_cols" variable (:type "int") (reparse-symbol classsubparts) [11626 11648])
                    ("scroll_bar_width" variable (:type "int") (reparse-symbol classsubparts) [11738 11759])
                    ("scroll_bar_height" variable (:type "int") (reparse-symbol classsubparts) [11850 11872])
                    ("mode_line_height" variable (:type "int") (reparse-symbol classsubparts) [11944 11965])
                    ("header_line_height" variable (:type "int") (reparse-symbol classsubparts) [12039 12062])
                    ("window_end_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [12197 12222])
                    ("window_end_vpos" variable (:type "int") (reparse-symbol classsubparts) [12350 12370])
                    ("mini" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12431 12448])
                    ("horizontal" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12605 12628])
                    ("update_mode_line" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12698 12727])
                    ("last_had_star" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12819 12845])
                    ("start_at_line_beg" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12953 12983])
                    ("force_start" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13115 13139])
                    ("optional_new_start" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13416 13447])
                    ("phys_cursor_on_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13586 13615])
                    ("cursor_off_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13723 13748])
                    ("last_cursor_off_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13813 13843])
                    ("must_be_updated_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13952 13982])
                    ("pseudo_window_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14147 14175])
                    ("fringes_outside_margins" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14304 14340])
                    ("window_end_valid" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14565 14594])
                    ("redisplay" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14647 14669])
                    ("suspend_auto_hscroll" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [14756 14789])
                    ("vscroll" variable (:type "int") (reparse-symbol classsubparts) [14898 14910])
                    ("window_end_bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15072 15101]))                  
                :type "struct")
                nil [3518 15123])
            ("WINDOWP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15146 15160]))                  
                :type "bool")
                nil [15132 15205])
            ("CHECK_WINDOW" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15233 15247]))                  
                :type "void")
                nil [15214 15292])
            ("XWINDOW" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15326 15340]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15301 15422])
            ("wset_frame" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15532 15549])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15550 15566]))                  
                :type "void")
                nil [15515 15588])
            ("wset_next" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15613 15630])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15631 15647]))                  
                :type "void")
                nil [15597 15668])
            ("wset_prev" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15693 15710])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15711 15727]))                  
                :type "void")
                nil [15677 15748])
            ("wset_redisplay_end_trigger" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15790 15807])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15808 15824]))                  
                :type "void")
                nil [15757 15862])
            ("wset_mode_line_help_echo" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15902 15919])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15920 15936]))                  
                :type "void")
                nil [15871 15972])
            ("wset_new_pixel" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16002 16019])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16020 16036]))                  
                :type "void")
                nil [15981 16062])
            ("wset_vertical_scroll_bar" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16102 16119])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16120 16136]))                  
                :type "void")
                nil [16071 16172])
            ("wset_horizontal_scroll_bar" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16214 16231])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16232 16248]))                  
                :type "void")
                nil [16181 16286])
            ("wset_horizontal_scroll_bar_type" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16333 16350])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16351 16367]))                  
                :type "void")
                nil [16295 16410])
            ("wset_prev_buffers" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16443 16460])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16461 16477]))                  
                :type "void")
                nil [16419 16506])
            ("wset_next_buffers" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16539 16556])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16557 16573]))                  
                :type "void")
                nil [16515 16602])
            ("MINI_WINDOW_P" variable (:constant-flag t) nil [16653 16666])
            ("MINI_NON_ONLY_WINDOW_P" variable (:constant-flag t) nil [16786 16808])
            ("MINI_ONLY_WINDOW_P" variable (:constant-flag t) nil [16935 16953])
            ("WINDOW_LEAF_P" variable (:constant-flag t) nil [17966 17979])
            ("WINDOW_INTERNAL_P" variable (:constant-flag t) nil [18083 18100])
            ("WINDOW_HORIZONTAL_COMBINATION_P" variable (:constant-flag t) nil [18207 18238])
            ("WINDOW_VERTICAL_COMBINATION_P" variable (:constant-flag t) nil [18360 18389])
            ("WINDOW_XFRAME" variable (:constant-flag t) nil [18476 18489])
            ("WINDOW_PSEUDO_P" variable (:constant-flag t) nil [18576 18591])
            ("WINDOW_BUFFER" variable (:constant-flag t) nil [18653 18666])
            ("WINDOW_FRAME_COLUMN_WIDTH" variable (:constant-flag t) nil [18816 18841])
            ("WINDOW_FRAME_LINE_HEIGHT" variable (:constant-flag t) nil [18967 18991])
            ("WINDOW_PIXEL_WIDTH" variable (:constant-flag t) nil [19163 19181])
            ("WINDOW_PIXEL_HEIGHT" variable (:constant-flag t) nil [19327 19346])
            ("WINDOW_TOTAL_COLS" variable (:constant-flag t) nil [19633 19650])
            ("WINDOW_TOTAL_LINES" variable (:constant-flag t) nil [19938 19956])
            ("MIN_SAFE_WINDOW_WIDTH" variable (:constant-flag t) nil [20082 20103])
            ("MIN_SAFE_WINDOW_PIXEL_WIDTH" variable (:constant-flag t) nil [20117 20144])
            ("MIN_SAFE_WINDOW_HEIGHT" variable (:constant-flag t) nil [20197 20219])
            ("MIN_SAFE_WINDOW_PIXEL_HEIGHT" variable (:constant-flag t) nil [20233 20261])
            ("WINDOW_LEFTMOST_P" variable (:constant-flag t) nil [20380 20397])
            ("WINDOW_TOPMOST_P" variable (:constant-flag t) nil [20518 20534])
            ("WINDOW_RIGHTMOST_P" variable (:constant-flag t) nil [20658 20676])
            ("WINDOW_BOTTOMMOST_P" variable (:constant-flag t) nil [20998 21017])
            ("WINDOW_FULL_WIDTH_P" variable (:constant-flag t) nil [21235 21254])
            ("WINDOW_RIGHT_DIVIDER_WIDTH" variable (:constant-flag t) nil [21441 21467])
            ("WINDOW_BOTTOM_DIVIDER_WIDTH" variable (:constant-flag t) nil [21617 21644])
            ("WINDOW_LEFT_EDGE_COL" variable (:constant-flag t) nil [22056 22076])
            ("WINDOW_RIGHT_EDGE_COL" variable (:constant-flag t) nil [22222 22243])
            ("WINDOW_TOP_EDGE_LINE" variable (:constant-flag t) nil [22416 22436])
            ("WINDOW_BOTTOM_EDGE_LINE" variable (:constant-flag t) nil [22568 22591])
            ("WINDOW_LEFT_PIXEL_EDGE" variable (:constant-flag t) nil [22769 22791])
            ("WINDOW_RIGHT_PIXEL_EDGE" variable (:constant-flag t) nil [22933 22956])
            ("WINDOW_TOP_PIXEL_EDGE" variable (:constant-flag t) nil [23126 23147])
            ("WINDOW_BOTTOM_PIXEL_EDGE" variable (:constant-flag t) nil [23277 23301])
            ("WINDOW_LEFT_EDGE_X" variable (:constant-flag t) nil [23482 23500])
            ("WINDOW_RIGHT_EDGE_X" variable (:constant-flag t) nil [23715 23734])
            ("WINDOW_MENU_BAR_P" variable (:constant-flag t) nil [24153 24170])
            ("WINDOW_TOOL_BAR_P" variable (:constant-flag t) nil [24460 24477])
            ("WINDOW_TOP_EDGE_Y" variable (:constant-flag t) nil [24564 24581])
            ("WINDOW_BOTTOM_EDGE_Y" variable (:constant-flag t) nil [24807 24827])
            ("WINDOW_BOX_LEFT_PIXEL_EDGE" variable (:constant-flag t) nil [25087 25113])
            ("WINDOW_BOX_RIGHT_PIXEL_EDGE" variable (:constant-flag t) nil [25424 25451])
            ("WINDOW_BOX_LEFT_EDGE_X" variable (:constant-flag t) nil [25736 25758])
            ("WINDOW_BOX_RIGHT_EDGE_X" variable (:constant-flag t) nil [26037 26060])
            ("WINDOW_LEFT_MARGIN_COLS" variable (:constant-flag t) nil [26214 26237])
            ("WINDOW_RIGHT_MARGIN_COLS" variable (:constant-flag t) nil [26272 26296])
            ("WINDOW_MARGINS_COLS" variable (:constant-flag t) nil [26332 26351])
            ("WINDOW_LEFT_MARGIN_WIDTH" variable (:constant-flag t) nil [26481 26505])
            ("WINDOW_RIGHT_MARGIN_WIDTH" variable (:constant-flag t) nil [26578 26603])
            ("WINDOW_MARGINS_WIDTH" variable (:constant-flag t) nil [26678 26698])
            ("WINDOW_LEFT_FRINGE_WIDTH" variable (:constant-flag t) nil [26819 26843])
            ("WINDOW_RIGHT_FRINGE_WIDTH" variable (:constant-flag t) nil [26975 27000])
            ("WINDOW_FRINGES_WIDTH" variable (:constant-flag t) nil [27135 27155])
            ("WINDOW_HAS_FRINGES_OUTSIDE_MARGINS" variable (:constant-flag t) nil [27292 27326])
            ("WINDOW_VERTICAL_SCROLL_BAR_TYPE" variable (:constant-flag t) nil [27481 27512])
            ("WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT" variable (:constant-flag t) nil [27894 27932])
            ("WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT" variable (:constant-flag t) nil [28017 28056])
            ("WINDOW_HAS_VERTICAL_SCROLL_BAR" variable (:constant-flag t) nil [28142 28172])
            ("USE_HORIZONTAL_SCROLL_BARS" variable (:constant-flag t) nil [28451 28477])
            ("WINDOW_HAS_HORIZONTAL_SCROLL_BAR" variable (:constant-flag t) nil [28989 29021])
            ("WINDOW_CONFIG_SCROLL_BAR_WIDTH" variable (:constant-flag t) nil [29201 29231])
            ("WINDOW_CONFIG_SCROLL_BAR_COLS" variable (:constant-flag t) nil [29534 29563])
            ("WINDOW_LEFT_SCROLL_BAR_COLS" variable (:constant-flag t) nil [29963 29990])
            ("WINDOW_RIGHT_SCROLL_BAR_COLS" variable (:constant-flag t) nil [30292 30320])
            ("WINDOW_SCROLL_BAR_COLS" variable (:constant-flag t) nil [30498 30520])
            ("WINDOW_LEFT_SCROLL_BAR_AREA_WIDTH" variable (:constant-flag t) nil [30717 30750])
            ("WINDOW_RIGHT_SCROLL_BAR_AREA_WIDTH" variable (:constant-flag t) nil [30946 30980])
            ("WINDOW_SCROLL_BAR_AREA_WIDTH" variable (:constant-flag t) nil [31169 31197])
            ("WINDOW_SCROLL_BAR_AREA_X" variable (:constant-flag t) nil [31400 31424])
            ("WINDOW_CONFIG_SCROLL_BAR_HEIGHT" variable (:constant-flag t) nil [31709 31740])
            ("WINDOW_CONFIG_SCROLL_BAR_LINES" variable (:constant-flag t) nil [32048 32078])
            ("WINDOW_SCROLL_BAR_LINES" variable (:constant-flag t) nil [32369 32392])
            ("WINDOW_SCROLL_BAR_AREA_HEIGHT" variable (:constant-flag t) nil [32586 32615])
            ("WINDOW_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [32812 32835])
            ("WINDOW_MODE_LINE_LINES" variable (:constant-flag t) nil [32929 32951])
            ("WINDOW_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [33080 33105])
            ("WINDOW_HEADER_LINE_LINES" variable (:constant-flag t) nil [33201 33225])
            ("WINDOW_BOX_HEIGHT_NO_MODE_LINE" variable (:constant-flag t) nil [33363 33393])
            ("WINDOW_BOX_TEXT_HEIGHT" variable (:constant-flag t) nil [33639 33661])
            ("WINDOW_SCROLL_BAR_AREA_Y" variable (:constant-flag t) nil [33947 33971])
            ("WINDOW_TO_FRAME_PIXEL_X" variable (:constant-flag t) nil [34182 34205])
            ("WINDOW_TO_FRAME_PIXEL_Y" variable (:constant-flag t) nil [34331 34354])
            ("FRAME_TO_WINDOW_PIXEL_X" variable (:constant-flag t) nil [34471 34494])
            ("FRAME_TO_WINDOW_PIXEL_Y" variable (:constant-flag t) nil [34618 34641])
            ("WINDOW_TEXT_TO_FRAME_PIXEL_X" variable (:constant-flag t) nil [34784 34812])
            ("selected_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35178 35213])
            ("window_select_count" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [35389 35426])
            ("minibuf_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35619 35653])
            ("minibuf_selected_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35785 35828])
            ("make_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [35862 35867]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35830 35868])
            ("window_from_coordinates" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35913 35928])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [35929 35933])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [35934 35938])
                    ("" variable
                       (:pointer 1
                        :type ("window_part" type (:type "enum") nil nil))
                        (reparse-symbol arg-sub-list) [35983 36002])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36003 36008]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35869 36009])
            ("resize_frame_windows" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36044 36059])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [36060 36064])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36065 36070])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36071 36076]))                  
                :type "void")
                nil [36010 36077])
            ("restore_window_configuration" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36120 36132]))                  
                :type "void")
                nil [36078 36133])
            ("delete_all_child_windows" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36172 36184]))                  
                :type "void")
                nil [36134 36185])
            ("grow_mini_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36216 36232])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [36233 36237])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36238 36243]))                  
                :type "void")
                nil [36186 36244])
            ("shrink_mini_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36277 36293])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36294 36299]))                  
                :type "void")
                nil [36245 36300])
            ("window_relative_x_coord" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36337 36353])
                    ("" variable (:type ("window_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [36354 36371])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [36372 36376]))                  
                :type "int")
                nil [36301 36377])
            ("run_window_size_change_functions" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36418 36430]))                  
                :type "void")
                nil [36379 36431])
            ("set_window_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36593 36612])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36613 36632])
                    ("run_hooks_p" variable (:type "bool") (reparse-symbol arg-sub-list) [36657 36674])
                    ("keep_margins_p" variable (:type "bool") (reparse-symbol arg-sub-list) [36675 36695]))                  
                :type "void")
                nil [36569 36696])
            ("echo_area_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36877 36913])
            ("command_loop_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [36949 36985])
            ("minibuf_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [37028 37059])
            ("update_mode_lines" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [37265 37294])
            ("windows_or_buffers_changed" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [37523 37561])
            ("wset_redisplay" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37818 37835]))                  
                :type "void")
                nil [37790 37836])
            ("fset_redisplay" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37865 37881]))                  
                :type "void")
                nil [37837 37882])
            ("bset_redisplay" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37911 37928]))                  
                :type "void")
                nil [37883 37929])
            ("bset_update_mode_line" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37965 37982]))                  
                :type "void")
                nil [37930 37983])
            ("redisplay_other_windows" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [38244 38249]))                  
                :type "void")
                nil [38207 38250])
            ("get_phys_cursor_glyph" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38454 38471]))                  
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [38417 38472])
            ("WINDOW_VALID_P" variable (:constant-flag t) nil [38523 38537])
            ("CHECK_VALID_WINDOW" variable (:constant-flag t) nil [38716 38734])
            ("WINDOW_LIVE_P" variable (:constant-flag t) nil [38861 38874])
            ("CHECK_LIVE_WINDOW" variable (:constant-flag t) nil [39019 39036])
            ("Vwindow_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39148 39180])
            ("window_list" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [39214 39219]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39182 39220])
            ("window_parameter" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39258 39274])
                    ("parameter" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39275 39297]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39221 39298])
            ("decode_live_window" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39341 39353]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [39299 39354])
            ("decode_any_window" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39396 39408]))                  
                :type ("window" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [39355 39409])
            ("compare_window_configurations" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39453 39465])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39466 39478])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [39479 39484]))                  
                :type "bool")
                nil [39410 39485])
            ("mark_window_cursors_off" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39523 39539]))                  
                :type "void")
                nil [39486 39540])
            ("window_wants_mode_line" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39577 39593]))                  
                :type "bool")
                nil [39541 39594])
            ("window_wants_header_line" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39633 39649]))                  
                :type "bool")
                nil [39595 39650])
            ("window_internal_height" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39686 39702]))                  
                :type "int")
                nil [39651 39703])
            ("window_body_width" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39734 39751])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [39752 39757]))                  
                :type "int")
                nil [39704 39758])
            ("margin_unit" type
               (:members 
                  ( ("MARGIN_IN_LINES" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [39778 39794])
                    ("MARGIN_IN_PIXELS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [39795 39813]))                  
                :type "enum")
                nil [39759 39814])
            ("window_scroll_margin" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39848 39864])
                    ("" variable (:type ("margin_unit" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [39865 39882]))                  
                :type "int")
                nil [39815 39883])
            ("temp_output_buffer_show" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39921 39933]))                  
                :type "void")
                nil [39884 39934])
            ("replace_buffer_in_windows" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39974 39986]))                  
                :type "void")
                nil [39935 39987])
            ("replace_buffer_in_windows_safely" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40034 40046]))                  
                :type "void")
                nil [39988 40047])
            ("sanitize_window_sizes" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("horizontal" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40083 40106]))                  
                :type "void")
                nil [40048 40107])
            ("wset_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40191 40207])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40208 40220]))                  
                :type "void")
                nil [40166 40221])
            ("window_outdated" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40251 40267]))                  
                :type "bool")
                nil [40222 40268])
            ("init_window_once" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40299 40304]))                  
                :type "void")
                nil [40269 40305])
            ("init_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40331 40336]))                  
                :type "void")
                nil [40306 40337])
            ("syms_of_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40366 40371]))                  
                :type "void")
                nil [40338 40372])
            ("keys_of_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40401 40406]))                  
                :type "void")
                nil [40373 40407])
            ("output_cursor_to" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40753 40770])
                    ("vpos" variable (:type "int") (reparse-symbol arg-sub-list) [40771 40780])
                    ("hpos" variable (:type "int") (reparse-symbol arg-sub-list) [40781 40790])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [40791 40797])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [40798 40804]))                  
                :type "void")
                nil [40730 40939]))          
      :file "window.h"
      :pointmax 40995
      :fsize 40994
      :lastmodtime '(23443 29226 323249 937000)
      :unmatched-syntax '((symbol 40941 . 40958) (symbol 40723 . 40729) (symbol 16508 . 16514) (symbol 16412 . 16418) (symbol 16288 . 16294) (symbol 16174 . 16180) (symbol 16064 . 16070) (symbol 15974 . 15980) (symbol 15864 . 15870) (symbol 15750 . 15756) (symbol 15670 . 15676) (symbol 15590 . 15596) (symbol 15508 . 15514) (symbol 15294 . 15300) (symbol 15207 . 15213) (symbol 15125 . 15131) (symbol 843 . 862))
      :lexical-table 
        '(("WINDOW_XFRAME" (spp-arg-list ("W") 18489 . 18492) . ((semantic-list "(XFRAME (WINDOW_FRAME ((W))))" 18493 . 18522)))
          ("WINDOW_PIXEL_HEIGHT" (spp-arg-list ("W") 19346 . 19349) . 
              ((semantic-list "(W)" 19350 . 19353) (punctuation "-" 19353 . 19354) (punctuation ">" 19354 . 19355) (symbol "pixel_height" 19355 . 19367)))
          ("WINDOW_LEFTMOST_P" (spp-arg-list ("W") 20397 . 20400) . ((semantic-list "(WINDOW_LEFT_PIXEL_EDGE (W) == 0)" 20407 . 20440)))
          ("WINDOW_TOP_EDGE_Y" (spp-arg-list ("W") 24581 . 24584) . ((semantic-list "(((WINDOW_MENU_BAR_P (W) || WINDOW_TOOL_BAR_P (W)) \\
    ? 0 : FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W))) \\
   + WINDOW_TOP_PIXEL_EDGE (W))" 24589 . 24734)))
          ("WINDOW_BOX_RIGHT_PIXEL_EDGE" (spp-arg-list ("W") 25451 . 25454) . ((semantic-list "(WINDOW_RIGHT_PIXEL_EDGE (W)			\\
   - WINDOW_RIGHT_DIVIDER_WIDTH (W)		\\
   - WINDOW_RIGHT_SCROLL_BAR_AREA_WIDTH (W))" 25460 . 25576)))
          ("WINDOW_LEFT_MARGIN_COLS" (spp-arg-list ("W") 26237 . 26240) . ((semantic-list "(W->left_margin_cols)" 26241 . 26262)))
          ("WINDOW_CONFIG_SCROLL_BAR_WIDTH" (spp-arg-list ("W") 29231 . 29234) . ((semantic-list "(W->scroll_bar_width >= 0				\\
   ? W->scroll_bar_width				\\
   : FRAME_CONFIG_SCROLL_BAR_WIDTH (WINDOW_XFRAME (W)))" 29240 . 29356)))
          ("WINDOW_LEFT_SCROLL_BAR_COLS" (spp-arg-list ("W") 29990 . 29993) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT (W)  \\
   ? (WINDOW_CONFIG_SCROLL_BAR_COLS (W))       \\
   : 0)" 30005 . 30108)))
          ("WINDOW_SCROLL_BAR_AREA_HEIGHT" (spp-arg-list ("W") 32615 . 32618) . ((semantic-list "(WINDOW_HAS_HORIZONTAL_SCROLL_BAR (W)		\\
   ? WINDOW_CONFIG_SCROLL_BAR_HEIGHT (W)	\\
   : 0)" 32623 . 32714)))
          ("MINI_ONLY_WINDOW_P" (spp-arg-list ("W") 16953 . 16956) . ((semantic-list "(MINI_WINDOW_P (W) && NILP ((W)->prev))" 16963 . 17002)))
          ("WINDOW_PSEUDO_P" (spp-arg-list ("W") 18591 . 18594) . ((semantic-list "((W)->pseudo_window_p)" 18595 . 18617)))
          ("WINDOW_LEFT_EDGE_X" (spp-arg-list ("W") 23500 . 23503) . ((semantic-list "(FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W)) \\
   + WINDOW_LEFT_PIXEL_EDGE (W))" 23508 . 23591)))
          ("WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT" (spp-arg-list ("W") 28056 . 28059) . ((semantic-list "(WINDOW_VERTICAL_SCROLL_BAR_TYPE (W) == vertical_scroll_bar_right)" 28066 . 28132)))
          ("USE_HORIZONTAL_SCROLL_BARS" . ((symbol "false" 28478 . 28483)))
          ("WINDOW_CONFIG_SCROLL_BAR_COLS" (spp-arg-list ("W") 29563 . 29566) . ((semantic-list "(W->scroll_bar_width >= 0				\\
   ? ((W->scroll_bar_width				\\
       + WINDOW_FRAME_COLUMN_WIDTH (W) - 1)		\\
      / WINDOW_FRAME_COLUMN_WIDTH (W))			\\
   : FRAME_CONFIG_SCROLL_BAR_COLS (WINDOW_XFRAME (W)))" 29572 . 29779)))
          ("WINDOW_TOP_EDGE_LINE" (spp-arg-list ("W") 22436 . 22439) . 
              ((semantic-list "(W)" 22440 . 22443) (punctuation "-" 22443 . 22444) (punctuation ">" 22444 . 22445) (symbol "top_line" 22445 . 22453)))
          ("WINDOW_RIGHT_MARGIN_COLS" (spp-arg-list ("W") 26296 . 26299) . ((semantic-list "(W->right_margin_cols)" 26300 . 26322)))
          ("WINDOW_SCROLL_BAR_AREA_X" (spp-arg-list ("W") 31424 . 31427) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT (W)	\\
   ? WINDOW_BOX_RIGHT_EDGE_X (W)		\\
   : WINDOW_LEFT_EDGE_X (W))" 31433 . 31544)))
          ("WINDOW_MODE_LINE_HEIGHT" (spp-arg-list ("W") 32835 . 32838) . ((semantic-list "(window_wants_mode_line ((W))		\\
   ? CURRENT_MODE_LINE_HEIGHT (W)	\\
   : 0)" 32843 . 32919)))
          ("WINDOW_VERTICAL_SCROLL_BAR_TYPE" (spp-arg-list ("W") 27512 . 27515) . ((semantic-list "(WINDOW_PSEUDO_P (W)					\\
   ? vertical_scroll_bar_none				\\
   : EQ (W->vertical_scroll_bar_type, Qt)		\\
   ? FRAME_VERTICAL_SCROLL_BAR_TYPE (WINDOW_XFRAME (W))	\\
   : EQ (W->vertical_scroll_bar_type, Qleft)		\\
   ? vertical_scroll_bar_left				\\
   : EQ (W->vertical_scroll_bar_type, Qright)		\\
   ? vertical_scroll_bar_right				\\
   : vertical_scroll_bar_none)" 27521 . 27884)))
          ("WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT" (spp-arg-list ("W") 27932 . 27935) . ((semantic-list "(WINDOW_VERTICAL_SCROLL_BAR_TYPE (W) == vertical_scroll_bar_left)" 27942 . 28007)))
          ("WINDOW_SCROLL_BAR_COLS" (spp-arg-list ("W") 30520 . 30523) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR (W)	       \\
   ? WINDOW_CONFIG_SCROLL_BAR_COLS (W)	       \\
   : 0)" 30535 . 30635)))
          ("WINDOW_SCROLL_BAR_LINES" (spp-arg-list ("W") 32392 . 32395) . ((semantic-list "(WINDOW_HAS_HORIZONTAL_SCROLL_BAR (W)	       \\
   ? WINDOW_CONFIG_SCROLL_BAR_LINES (W)	       \\
   : 0)" 32407 . 32510)))
          ("WINDOW_HEADER_LINE_HEIGHT" (spp-arg-list ("W") 33105 . 33108) . ((semantic-list "(window_wants_header_line (W)		\\
   ? CURRENT_HEADER_LINE_HEIGHT (W)	\\
   : 0)" 33113 . 33191)))
          ("WINDOW_SCROLL_BAR_AREA_Y" (spp-arg-list ("W") 33971 . 33974) . ((semantic-list "(WINDOW_TOP_EDGE_Y (W)				\\
   + (WINDOW_HAS_HORIZONTAL_SCROLL_BAR (W)		\\
      ? WINDOW_BOX_HEIGHT_NO_MODE_LINE (W) : 0))" 33981 . 34103)))
          ("WINDOW_TO_FRAME_PIXEL_X" (spp-arg-list ("W" "X") 34205 . 34211) . ((semantic-list "((X) + WINDOW_BOX_LEFT_EDGE_X ((W)))" 34216 . 34252)))
          ("MIN_SAFE_WINDOW_WIDTH" . ((semantic-list "(2)" 20104 . 20107)))
          ("WINDOW_BOX_LEFT_EDGE_X" (spp-arg-list ("W") 25758 . 25761) . ((semantic-list "(FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W)) \\
   + WINDOW_BOX_LEFT_PIXEL_EDGE (W))" 25770 . 25857)))
          ("WINDOW_BOX_RIGHT_EDGE_X" (spp-arg-list ("W") 26060 . 26063) . ((semantic-list "(FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W)) \\
   + WINDOW_BOX_RIGHT_PIXEL_EDGE (W))" 26072 . 26160)))
          ("WINDOW_HAS_HORIZONTAL_SCROLL_BAR" (spp-arg-list ("W") 29021 . 29024) . ((symbol "false" 29025 . 29030)))
          ("WINDOW_RIGHT_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("W") 30980 . 30983) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT (W)				\\
   ? WINDOW_CONFIG_SCROLL_BAR_WIDTH (W)					\\
   : 0)" 30991 . 31094)))
          ("WINDOW_TO_FRAME_PIXEL_Y" (spp-arg-list ("W" "Y") 34354 . 34360) . ((semantic-list "((Y) + WINDOW_TOP_EDGE_Y (W))" 34366 . 34395)))
          ("WINDOW_INTERNAL_P" (spp-arg-list ("W") 18100 . 18103) . ((semantic-list "(WINDOWP ((W)->contents))" 18108 . 18133)))
          ("WINDOW_FRAME_LINE_HEIGHT" (spp-arg-list ("W") 18991 . 18994) . ((semantic-list "(FRAME_LINE_HEIGHT (WINDOW_XFRAME ((W))))" 18999 . 19040)))
          ("WINDOW_TOTAL_LINES" (spp-arg-list ("W") 19956 . 19959) . 
              ((semantic-list "(W)" 19960 . 19963) (punctuation "-" 19963 . 19964) (punctuation ">" 19964 . 19965) (symbol "total_lines" 19965 . 19976)))
          ("WINDOW_LEFT_PIXEL_EDGE" (spp-arg-list ("W") 22791 . 22794) . 
              ((semantic-list "(W)" 22795 . 22798) (punctuation "-" 22798 . 22799) (punctuation ">" 22799 . 22800) (symbol "pixel_left" 22800 . 22810)))
          ("WINDOW_LEFT_MARGIN_WIDTH" (spp-arg-list ("W") 26505 . 26508) . ((semantic-list "(W->left_margin_cols * WINDOW_FRAME_COLUMN_WIDTH (W))" 26515 . 26568)))
          ("WINDOW_H_INCLUDED")
          ("WINDOW_TOTAL_COLS" (spp-arg-list ("W") 19650 . 19653) . 
              ((semantic-list "(W)" 19654 . 19657) (punctuation "-" 19657 . 19658) (punctuation ">" 19658 . 19659) (symbol "total_cols" 19659 . 19669)))
          ("WINDOW_TOPMOST_P" (spp-arg-list ("W") 20534 . 20537) . ((semantic-list "(WINDOW_TOP_PIXEL_EDGE (W) == 0)" 20544 . 20576)))
          ("WINDOW_LEFT_FRINGE_WIDTH" (spp-arg-list ("W") 26843 . 26846) . ((semantic-list "(W->left_fringe_width >= 0				\\
   ? W->left_fringe_width				\\
   : FRAME_LEFT_FRINGE_WIDTH (WINDOW_XFRAME (W)))" 26853 . 26965)))
          ("WINDOW_CONFIG_SCROLL_BAR_HEIGHT" (spp-arg-list ("W") 31740 . 31743) . ((semantic-list "(W->scroll_bar_height >= 0					\\
   ? W->scroll_bar_height					\\
   : FRAME_CONFIG_SCROLL_BAR_HEIGHT (WINDOW_XFRAME (W)))" 31750 . 31871)))
          ("WINDOW_HEADER_LINE_LINES" (spp-arg-list ("W") 33225 . 33228) . ((symbol "window_wants_header_line" 33233 . 33257) (semantic-list "(W)" 33258 . 33261)))
          ("WINDOW_BOX_HEIGHT_NO_MODE_LINE" (spp-arg-list ("W") 33393 . 33396) . ((semantic-list "(WINDOW_PIXEL_HEIGHT (W)			\\
   - WINDOW_BOTTOM_DIVIDER_WIDTH (W)		\\
   - WINDOW_SCROLL_BAR_AREA_HEIGHT (W)		\\
   - WINDOW_MODE_LINE_HEIGHT (W))" 33401 . 33545)))
          ("WINDOW_LIVE_P" (spp-arg-list ("WINDOW") 38874 . 38882) . ((semantic-list "(WINDOWP (WINDOW) && BUFFERP (XWINDOW (WINDOW)->contents))" 38891 . 38949)))
          ("WINDOW_HORIZONTAL_COMBINATION_P" (spp-arg-list ("W") 18238 . 18241) . ((semantic-list "(WINDOW_INTERNAL_P (W) && (W)->horizontal)" 18246 . 18288)))
          ("WINDOW_FULL_WIDTH_P" (spp-arg-list ("W") 21254 . 21257) . ((semantic-list "(WINDOW_PIXEL_WIDTH (W)					\\
   == (WINDOW_PIXEL_WIDTH					\\
       (XWINDOW (FRAME_ROOT_WINDOW (WINDOW_XFRAME (W))))))" 21266 . 21386)))
          ("WINDOW_RIGHT_PIXEL_EDGE" (spp-arg-list ("W") 22956 . 22959) . ((semantic-list "(WINDOW_LEFT_PIXEL_EDGE (W) + WINDOW_PIXEL_WIDTH (W))" 22964 . 23017)))
          ("WINDOW_BOX_LEFT_PIXEL_EDGE" (spp-arg-list ("W") 25113 . 25116) . ((semantic-list "(WINDOW_LEFT_PIXEL_EDGE (W)			\\
   + WINDOW_LEFT_SCROLL_BAR_AREA_WIDTH (W))" 25122 . 25197)))
          ("WINDOW_MARGINS_COLS" (spp-arg-list ("W") 26351 . 26354) . ((semantic-list "(WINDOW_LEFT_MARGIN_COLS (W)			\\
   + WINDOW_RIGHT_MARGIN_COLS (W))" 26361 . 26428)))
          ("WINDOW_LEFT_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("W") 30750 . 30753) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT (W)				\\
   ? WINDOW_CONFIG_SCROLL_BAR_WIDTH (W)					\\
   : 0)" 30761 . 30863)))
          ("FRAME_TO_WINDOW_PIXEL_X" (spp-arg-list ("W" "X") 34494 . 34500) . ((semantic-list "((X) - WINDOW_BOX_LEFT_EDGE_X ((W)))" 34506 . 34542)))
          ("WINDOW_VALID_P" (spp-arg-list ("WINDOW") 38537 . 38545) . ((semantic-list "(WINDOWP (WINDOW) && !NILP (XWINDOW (WINDOW)->contents))" 38554 . 38610)))
          ("MINI_WINDOW_P" (spp-arg-list ("W") 16666 . 16669) . ((semantic-list "((W)->mini)" 16670 . 16681)))
          ("WINDOW_LEAF_P" (spp-arg-list ("W") 17979 . 17982) . ((semantic-list "(BUFFERP ((W)->contents))" 17987 . 18012)))
          ("WINDOW_RIGHTMOST_P" (spp-arg-list ("W") 20676 . 20679) . ((semantic-list "(WINDOW_RIGHT_PIXEL_EDGE (W)					\\
   == (WINDOW_RIGHT_PIXEL_EDGE					\\
       (XWINDOW (FRAME_ROOT_WINDOW (WINDOW_XFRAME (W))))))" 20688 . 20818)))
          ("WINDOW_BOTTOMMOST_P" (spp-arg-list ("W") 21017 . 21020) . ((semantic-list "(WINDOW_BOTTOM_PIXEL_EDGE (W)					\\
   == (WINDOW_BOTTOM_PIXEL_EDGE					\\
       (XWINDOW (FRAME_ROOT_WINDOW (WINDOW_XFRAME (W))))))" 21029 . 21161)))
          ("WINDOW_RIGHT_DIVIDER_WIDTH" (spp-arg-list ("W") 21467 . 21470) . ((semantic-list "(WINDOW_RIGHTMOST_P (W)					\\
   ? 0 : FRAME_RIGHT_DIVIDER_WIDTH (WINDOW_XFRAME (W)))" 21478 . 21563)))
          ("WINDOW_BOTTOM_EDGE_LINE" (spp-arg-list ("W") 22591 . 22594) . ((semantic-list "(WINDOW_TOP_EDGE_LINE (W) + WINDOW_TOTAL_LINES (W))" 22599 . 22650)))
          ("WINDOW_MARGINS_WIDTH" (spp-arg-list ("W") 26698 . 26701) . ((semantic-list "(WINDOW_LEFT_MARGIN_WIDTH (W)			\\
   + WINDOW_RIGHT_MARGIN_WIDTH (W))" 26708 . 26777)))
          ("FRAME_TO_WINDOW_PIXEL_Y" (spp-arg-list ("W" "Y") 34641 . 34647) . ((semantic-list "((Y) - WINDOW_TOP_EDGE_Y (W))" 34653 . 34682)))
          ("MIN_SAFE_WINDOW_HEIGHT" . ((semantic-list "(1)" 20220 . 20223)))
          ("WINDOW_RIGHT_EDGE_COL" (spp-arg-list ("W") 22243 . 22246) . ((semantic-list "(WINDOW_LEFT_EDGE_COL (W) + WINDOW_TOTAL_COLS (W))" 22251 . 22301)))
          ("WINDOW_MENU_BAR_P" (spp-arg-list ("W") 24170 . 24173) . ((symbol "false" 24174 . 24179)))
          ("WINDOW_TOOL_BAR_P" (spp-arg-list ("W") 24477 . 24480) . ((symbol "false" 24481 . 24486)))
          ("CHECK_VALID_WINDOW" (spp-arg-list ("WINDOW") 38734 . 38742) . ((symbol "CHECK_TYPE" 38750 . 38760) (semantic-list "(WINDOW_VALID_P (WINDOW), Qwindow_valid_p, WINDOW)" 38761 . 38811)))
          ("WINDOW_VERTICAL_COMBINATION_P" (spp-arg-list ("W") 18389 . 18392) . ((semantic-list "(WINDOW_INTERNAL_P (W) && !(W)->horizontal)" 18397 . 18440)))
          ("WINDOW_FRAME_COLUMN_WIDTH" (spp-arg-list ("W") 18841 . 18844) . ((semantic-list "(FRAME_COLUMN_WIDTH (WINDOW_XFRAME ((W))))" 18849 . 18891)))
          ("MIN_SAFE_WINDOW_PIXEL_HEIGHT" (spp-arg-list ("W") 20261 . 20264) . ((semantic-list "(WINDOW_FRAME_LINE_HEIGHT (W))" 20269 . 20299)))
          ("WINDOW_BOTTOM_DIVIDER_WIDTH" (spp-arg-list ("W") 21644 . 21647) . ((semantic-list "(((WINDOW_BOTTOMMOST_P (W)						\\
     && NILP ((XWINDOW (FRAME_ROOT_WINDOW				\\
			(WINDOW_XFRAME (W))))->next))			\\
    || EQ ((W)->prev, FRAME_ROOT_WINDOW (WINDOW_XFRAME (W)))		\\
    || (W)->pseudo_window_p)						\\
   ? 0 : FRAME_BOTTOM_DIVIDER_WIDTH (WINDOW_XFRAME (W)))" 21656 . 21930)))
          ("WINDOW_BOTTOM_PIXEL_EDGE" (spp-arg-list ("W") 23301 . 23304) . ((semantic-list "(WINDOW_TOP_PIXEL_EDGE (W) + WINDOW_PIXEL_HEIGHT (W))" 23309 . 23362)))
          ("WINDOW_RIGHT_EDGE_X" (spp-arg-list ("W") 23734 . 23737) . ((semantic-list "(FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W)) \\
   + WINDOW_RIGHT_PIXEL_EDGE (W))" 23742 . 23826)))
          ("WINDOW_BOTTOM_EDGE_Y" (spp-arg-list ("W") 24827 . 24830) . ((semantic-list "(((WINDOW_MENU_BAR_P (W) || WINDOW_TOOL_BAR_P (W))	   \\
    ? 0 : FRAME_INTERNAL_BORDER_WIDTH (WINDOW_XFRAME (W))) \\
   + WINDOW_BOTTOM_PIXEL_EDGE (W))" 24841 . 24992)))
          ("WINDOW_HAS_FRINGES_OUTSIDE_MARGINS" (spp-arg-list ("W") 27326 . 27329) . ((semantic-list "((W)->fringes_outside_margins)" 27334 . 27364)))
          ("WINDOW_RIGHT_SCROLL_BAR_COLS" (spp-arg-list ("W") 30320 . 30323) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT (W)	\\
   ? WINDOW_CONFIG_SCROLL_BAR_COLS (W)		\\
   : 0)" 30329 . 30425)))
          ("WINDOW_CONFIG_SCROLL_BAR_LINES" (spp-arg-list ("W") 32078 . 32081) . ((semantic-list "(W->scroll_bar_height >= 0				\\
   ? ((W->scroll_bar_height				\\
       + WINDOW_FRAME_LINE_HEIGHT (W) - 1)		\\
      / WINDOW_FRAME_LINE_HEIGHT (W))			\\
   : FRAME_CONFIG_SCROLL_BAR_LINES (WINDOW_XFRAME (W)))" 32087 . 32295)))
          ("MINI_NON_ONLY_WINDOW_P" (spp-arg-list ("W") 16808 . 16811) . ((semantic-list "(MINI_WINDOW_P (W) && !NILP ((W)->prev))" 16817 . 16857)))
          ("MIN_SAFE_WINDOW_PIXEL_WIDTH" (spp-arg-list ("W") 20144 . 20147) . ((semantic-list "(2 * WINDOW_FRAME_COLUMN_WIDTH (W))" 20152 . 20187)))
          ("WINDOW_TOP_PIXEL_EDGE" (spp-arg-list ("W") 23147 . 23150) . 
              ((semantic-list "(W)" 23151 . 23154) (punctuation "-" 23154 . 23155) (punctuation ">" 23155 . 23156) (symbol "pixel_top" 23156 . 23165)))
          ("WINDOW_RIGHT_MARGIN_WIDTH" (spp-arg-list ("W") 26603 . 26606) . ((semantic-list "(W->right_margin_cols * WINDOW_FRAME_COLUMN_WIDTH (W))" 26614 . 26668)))
          ("WINDOW_FRINGES_WIDTH" (spp-arg-list ("W") 27155 . 27158) . ((semantic-list "(WINDOW_LEFT_FRINGE_WIDTH (W) + WINDOW_RIGHT_FRINGE_WIDTH (W))" 27164 . 27226)))
          ("WINDOW_HAS_VERTICAL_SCROLL_BAR" (spp-arg-list ("W") 28172 . 28175) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT (W)		\\
   || WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT (W))" 28181 . 28278)))
          ("WINDOW_MODE_LINE_LINES" (spp-arg-list ("W") 32951 . 32954) . ((symbol "window_wants_mode_line" 32959 . 32981) (semantic-list "(W)" 32982 . 32985)))
          ("WINDOW_BOX_TEXT_HEIGHT" (spp-arg-list ("W") 33661 . 33664) . ((semantic-list "(WINDOW_PIXEL_HEIGHT ((W))		\\
   - WINDOW_BOTTOM_DIVIDER_WIDTH (W)	\\
   - WINDOW_SCROLL_BAR_AREA_HEIGHT (W)	\\
   - WINDOW_MODE_LINE_HEIGHT (W)	\\
   - WINDOW_HEADER_LINE_HEIGHT (W))" 33669 . 33849)))
          ("WINDOW_TEXT_TO_FRAME_PIXEL_X" (spp-arg-list ("W" "X") 34812 . 34818) . ((semantic-list "(window_box_left ((W), TEXT_AREA) + (X))" 34823 . 34863)))
          ("CHECK_LIVE_WINDOW" (spp-arg-list ("WINDOW") 39036 . 39044) . ((symbol "CHECK_TYPE" 39052 . 39062) (semantic-list "(WINDOW_LIVE_P (WINDOW), Qwindow_live_p, WINDOW)" 39063 . 39111)))
          ("WINDOW_BUFFER" (spp-arg-list ("W") 18666 . 18669) . ((semantic-list "(WINDOW_LEAF_P(W)				\\
   ? (W)->contents				\\
   : Qnil)" 18676 . 18733)))
          ("WINDOW_PIXEL_WIDTH" (spp-arg-list ("W") 19181 . 19184) . 
              ((semantic-list "(W)" 19185 . 19188) (punctuation "-" 19188 . 19189) (punctuation ">" 19189 . 19190) (symbol "pixel_width" 19190 . 19201)))
          ("WINDOW_LEFT_EDGE_COL" (spp-arg-list ("W") 22076 . 22079) . 
              ((semantic-list "(W)" 22080 . 22083) (punctuation "-" 22083 . 22084) (punctuation ">" 22084 . 22085) (symbol "left_col" 22085 . 22093)))
          ("WINDOW_RIGHT_FRINGE_WIDTH" (spp-arg-list ("W") 27000 . 27003) . ((semantic-list "(W->right_fringe_width >= 0				\\
   ? W->right_fringe_width				\\
   : FRAME_RIGHT_FRINGE_WIDTH (WINDOW_XFRAME (W)))" 27010 . 27125)))
          ("WINDOW_SCROLL_BAR_AREA_WIDTH" (spp-arg-list ("W") 31197 . 31200) . ((semantic-list "(WINDOW_HAS_VERTICAL_SCROLL_BAR (W)					\\
   ? WINDOW_CONFIG_SCROLL_BAR_WIDTH (W)					\\
   : 0)" 31209 . 31304)))
          )
)
    (semanticdb-table "semanticdb-table-1afb224"
      :major-mode c-mode
      :tags 
        '( ("EMACS_COMMANDS_H" variable (:constant-flag t) nil [795 811])
            ("lisp.h" include nil nil [813 830])
            ("Ctl" variable (:constant-flag t) nil [840 843])
            ("global_map" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1091 1121])
            ("meta_map" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1122 1150])
            ("control_x_map" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1151 1184])
            ("unread_switch_frame" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1584 1623])
            ("INTERACTIVE" variable (:constant-flag t) nil [1687 1698]))          
      :file "commands.h"
      :pointmax 1779
      :fsize 1778
      :lastmodtime '(23443 29219 986541 894000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMACS_COMMANDS_H")
          ("Ctl" (spp-arg-list ("c") 843 . 846) . ((semantic-list "((c)&037)" 847 . 856)))
          ("INTERACTIVE" . ((semantic-list "(NILP (Vexecuting_kbd_macro) && !noninteractive)" 1699 . 1747)))
          )
)
    (semanticdb-table "semanticdb-table-1afb244"
      :file "indent.h"
      :fsize 2172
      :lastmodtime '(23443 29220 23185 323000))
    (semanticdb-table "semanticdb-table-1afb264"
      :file "termchar.h"
      :fsize 9142
      :lastmodtime '(23443 29220 126455 369000))
    (semanticdb-table "semanticdb-table-1afb284"
      :file "disptab.h"
      :fsize 3795
      :lastmodtime '(23443 29219 993204 205000))
    (semanticdb-table "semanticdb-table-1afb2a4"
      :major-mode c-mode
      :tags 
        '( ("DISPEXTERN_H_INCLUDED" variable (:constant-flag t) nil [862 883])
            ("character.h" include nil nil [885 907])
            ("XColor" type
               (:typedef ("" type
                     (:members 
                        ( ("pixel" variable (:type "unsigned long") (reparse-symbol classsubparts) [1126 1146])
                          ("red" variable (:type "unsigned short") (reparse-symbol classsubparts) [1149 1181])
                          ("green" variable (:type "unsigned short") (reparse-symbol classsubparts) [1149 1181])
                          ("blue" variable (:type "unsigned short") (reparse-symbol classsubparts) [1149 1181])
                          ("flags" variable (:type "char") (reparse-symbol classsubparts) [1184 1195])
                          ("pad" variable (:type "char") (reparse-symbol classsubparts) [1198 1207]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [1107 1217])
            ("c-strcase.h" include (:system-flag t) nil [1309 1331])
            ("xstrcasecmp" function
               (:arguments 
                  ( ("a" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1356 1370])
                    ("b" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1371 1385]))                  
                :type "int")
                nil [1339 1419])
            ("Cursor" type
               (:typedef ("int")
                :type "typedef")
                nil [2122 2141])
            ("No_Cursor" variable (:constant-flag t) nil [2150 2159])
            ("NativeRectangle" variable (:constant-flag t) nil [2204 2219])
            ("text_cursor_kinds" type
               (:members 
                  ( ("DEFAULT_CURSOR" variable
                       (:constant-flag t
                        :default-value (2303 2305)
                        :type "int")
                        (reparse-symbol enumsubparts) [2286 2305])
                    ("NO_CURSOR" variable
                       (:constant-flag t
                        :default-value (2321 2323)
                        :type "int")
                        (reparse-symbol enumsubparts) [2309 2323])
                    ("FILLED_BOX_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2327 2345])
                    ("HOLLOW_BOX_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2348 2366])
                    ("BAR_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2369 2380])
                    ("HBAR_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2383 2396]))                  
                :type "enum")
                nil [2259 2397])
            ("window_part" type
               (:members 
                  ( ("ON_NOTHING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2472 2483])
                    ("ON_TEXT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2486 2494])
                    ("ON_MODE_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2497 2510])
                    ("ON_VERTICAL_BORDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2513 2532])
                    ("ON_HEADER_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2535 2550])
                    ("ON_LEFT_FRINGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2553 2568])
                    ("ON_RIGHT_FRINGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2571 2587])
                    ("ON_LEFT_MARGIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2590 2605])
                    ("ON_RIGHT_MARGIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2608 2624])
                    ("ON_VERTICAL_SCROLL_BAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2627 2650])
                    ("ON_HORIZONTAL_SCROLL_BAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2653 2678])
                    ("ON_RIGHT_DIVIDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2681 2698])
                    ("ON_BOTTOM_DIVIDER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2701 2720]))                  
                :type "enum")
                nil [2451 2721])
            ("FRINGE_ID_BITS" variable (:constant-flag t) nil [2795 2809])
            ("FRINGE_HEIGHT_BITS" variable (:constant-flag t) nil [2886 2904])
            ("IF_DEBUG" variable (:constant-flag t) nil [3274 3282])
            ("TRACE" variable (:constant-flag t) nil [3753 3758])
            ("text_pos" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4219 4237])
                    ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4279 4297]))                  
                :type "struct")
                nil [4170 4300])
            ("BYTEPOS" variable (:constant-flag t) nil [4382 4389])
            ("CHARPOS" variable (:constant-flag t) nil [4417 4424])
            ("SET_TEXT_POS" variable (:constant-flag t) nil [4529 4541])
            ("INC_TEXT_POS" variable (:constant-flag t) nil [4671 4683])
            ("DEC_TEXT_POS" variable (:constant-flag t) nil [4938 4950])
            ("SET_TEXT_POS_FROM_MARKER" variable (:constant-flag t) nil [5218 5242])
            ("CLIP_TEXT_POS_FROM_MARKER" variable (:constant-flag t) nil [5424 5449])
            ("SET_MARKER_FROM_TEXT_POS" variable (:constant-flag t) nil [5701 5725])
            ("TEXT_POS_EQUAL_P" variable (:constant-flag t) nil [5911 5927])
            ("display_pos" type
               (:members 
                  ( ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [6330 6350])
                    ("overlay_string_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6631 6662])
                    ("string_pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [6771 6798])
                    ("dpvec_index" variable (:type "int") (reparse-symbol classsubparts) [7080 7096]))                  
                :type "struct")
                nil [6271 7099])
            ("GLYPH" type
               (:typedef ("" type
                     (:members 
                        ( ("ch" variable (:type "int") (reparse-symbol classsubparts) [7400 7407])
                          ("face_id" variable (:type "int") (reparse-symbol classsubparts) [7410 7422]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [7381 7431])
            ("GLYPH_CHAR" function
               (:arguments 
                  ( ("glyph" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7496 7508]))                  
                :type "int")
                nil [7480 7529])
            ("GLYPH_FACE" function
               (:arguments 
                  ( ("glyph" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7587 7599]))                  
                :type "int")
                nil [7571 7625])
            ("SET_GLYPH_CHAR" variable (:constant-flag t) nil [7635 7649])
            ("SET_GLYPH_FACE" variable (:constant-flag t) nil [7693 7707])
            ("SET_GLYPH" variable (:constant-flag t) nil [7756 7765])
            ("GLYPH_CODE_CHAR" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7925 7940]))                  
                :type "int")
                nil [7904 8021])
            ("GLYPH_CODE_FACE" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8051 8066]))                  
                :type "int")
                nil [8030 8145])
            ("SET_GLYPH_FROM_GLYPH_CODE" variable (:constant-flag t) nil [8155 8180])
            ("" type
               (:members 
                  ( ("GLYPH_MODE_LINE_FACE" variable
                       (:constant-flag t
                        :default-value (8563 8564)
                        :type "int")
                        (reparse-symbol enumsubparts) [8540 8564]))                  
                :type "enum")
                nil [8533 8567])
            ("glyph_type" type
               (:members 
                  ( ("CHAR_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8753 8764])
                    ("COMPOSITE_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8815 8831])
                    ("GLYPHLESS_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8883 8899])
                    ("IMAGE_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [8938 8950])
                    ("STRETCH_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9015 9029])
                    ("XWIDGET_GLYPH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [9096 9111]))                  
                :type "enum")
                nil [8695 9112])
            ("glyph_slice" type
               (:members 
                  ( ("x" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [9209 9225])
                    ("y" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [9228 9244])
                    ("width" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [9247 9267])
                    ("height" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [9270 9291]))                  
                :type "struct")
                nil [9186 9294])
            ("glyph" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10444 10462])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10807 10826])
                    ("pixel_width" variable (:type "short") (reparse-symbol classsubparts) [10856 10874])
                    ("ascent" variable (:type "short") (reparse-symbol classsubparts) [10917 10939])
                    ("descent" variable (:type "short") (reparse-symbol classsubparts) [10917 10939])
                    ("voffset" variable (:type "short") (reparse-symbol classsubparts) [11053 11067])
                    ("type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [11193 11211])
                    ("multibyte_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11402 11426])
                    ("left_box_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11583 11611])
                    ("right_box_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11614 11643])
                    ("overlaps_vertically_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11819 11853])
                    ("padding_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12483 12505])
                    ("glyph_not_available_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12715 12749])
                    ("avoid_cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12800 12827])
                    ("resolved_level" variable
                       (:suffix ":7"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [12897 12925])
                    ("bidi_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [13222 13245])
                    ("FACE_ID_BITS" variable (:constant-flag t) (reparse-symbol classsubparts) [13255 13267])
                    ("face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [13377 13409])
                    ("font_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [13692 13715])
                    ("slice" variable (:type ("" type
                         (:members 
                            ( ("img" variable (:type ("glyph_slice" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [13868 13891])
                              ("cmp" variable (:type ("" type
                                   (:members 
                                      ( ("from" variable (:type "int") (reparse-symbol classsubparts) [14021 14034])
                                        ("to" variable (:type "int") (reparse-symbol classsubparts) [14021 14034]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [14012 14041])
                              ("glyphless" variable (:type ("" type
                                   (:members 
                                      ( ("upper_xoff" variable (:type "short") (reparse-symbol classsubparts) [14127 14156])
                                        ("upper_yoff" variable (:type "short") (reparse-symbol classsubparts) [14127 14156])
                                        ("lower_xoff" variable (:type "short") (reparse-symbol classsubparts) [14163 14192])
                                        ("lower_yoff" variable (:type "short") (reparse-symbol classsubparts) [14163 14192]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [14112 14209]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [13781 14220])
                    ("u" variable (:type ("" type
                         (:members 
                            ( ("ch" variable (:type "unsigned int") (reparse-symbol classsubparts) [14369 14381])
                              ("cmp" variable (:type ("" type
                                   (:members 
                                      ( ("automatic" variable
                                           (:suffix ":1"
                                            :type ("bool_bf" type (:type "class") nil nil))
                                            (reparse-symbol classsubparts) [14527 14549])
                                        ("id" variable
                                           (:suffix ":31"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [14592 14612]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [14442 14623])
                              ("img_id" variable (:type "int") (reparse-symbol classsubparts) [14689 14700])
                              ("stretch" variable (:type ("" type
                                   (:members 
                                      ( ("height" variable
                                           (:suffix ":16"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [14927 14949])
                                        ("ascent" variable
                                           (:suffix ":16"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [14995 15017]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [14870 15036])
                              ("glyphless" variable (:type ("" type
                                   (:members 
                                      ( ("method" variable
                                           (:suffix ":2"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [15181 15201])
                                        ("for_no_font" variable
                                           (:suffix ":1"
                                            :type ("bool_bf" type (:type "class") nil nil))
                                            (reparse-symbol classsubparts) [15271 15295])
                                        ("len" variable
                                           (:suffix ":4"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [15373 15390])
                                        ("ch" variable
                                           (:suffix ":25"
                                            :type "unsigned int")
                                            (reparse-symbol classsubparts) [15464 15481]))                                      
                                    :type "struct")
                                    nil nil)) (reparse-symbol classsubparts) [15094 15498])
                              ("val" variable (:type "unsigned int") (reparse-symbol classsubparts) [15565 15578]))                            
                          :type "union")
                          nil nil)) (reparse-symbol classsubparts) [14286 15585]))                  
                :type "struct")
                nil [9626 15588])
            ("FONT_TYPE_UNKNOWN" variable (:constant-flag t) nil [15651 15668])
            ("CHAR_GLYPH_SPACE_P" variable (:constant-flag t) nil [15706 15724])
            ("GLYPH_SLICE_EQUAL_P" variable (:constant-flag t) nil [16070 16089])
            ("GLYPH_EQUAL_P" variable (:constant-flag t) nil [16497 16510])
            ("GLYPH_CHAR_AND_FACE_EQUAL_P" variable (:constant-flag t) nil [17016 17043])
            ("SET_CHAR_GLYPH" variable (:constant-flag t) nil [17302 17316])
            ("SET_CHAR_GLYPH_FROM_GLYPH" variable (:constant-flag t) nil [17645 17670])
            ("SET_GLYPH_FROM_CHAR_GLYPH" variable (:constant-flag t) nil [17976 18001])
            ("GLYPH_INVALID_P" variable (:constant-flag t) nil [18224 18239])
            ("CHAR_GLYPH_PADDING_P" variable (:constant-flag t) nil [18315 18335])
            ("glyph_pool" type
               (:members 
                  ( ("glyphs" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [19082 19103])
                    ("nglyphs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19144 19162])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [19215 19235])
                    ("ncolumns" variable (:type "int") (reparse-symbol classsubparts) [19215 19235]))                  
                :type "struct")
                nil [19009 19238])
            ("glyph_matrix" type
               (:members 
                  ( ("pool" variable
                       (:pointer 1
                        :type ("glyph_pool" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [20844 20868])
                    ("rows" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [20971 20994])
                    ("rows_allocated" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21063 21088])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [21217 21227])
                    ("matrix_x" variable (:type "int") (reparse-symbol classsubparts) [21392 21415])
                    ("matrix_y" variable (:type "int") (reparse-symbol classsubparts) [21392 21415])
                    ("matrix_w" variable (:type "int") (reparse-symbol classsubparts) [21480 21503])
                    ("matrix_h" variable (:type "int") (reparse-symbol classsubparts) [21480 21503])
                    ("window_pixel_left" variable (:type "int") (reparse-symbol classsubparts) [21901 21941])
                    ("window_pixel_top" variable (:type "int") (reparse-symbol classsubparts) [21901 21941])
                    ("window_height" variable (:type "int") (reparse-symbol classsubparts) [21944 21976])
                    ("window_width" variable (:type "int") (reparse-symbol classsubparts) [21944 21976])
                    ("window_vscroll" variable (:type "int") (reparse-symbol classsubparts) [21979 21998])
                    ("left_margin_glyphs" variable (:type "int") (reparse-symbol classsubparts) [22111 22155])
                    ("right_margin_glyphs" variable (:type "int") (reparse-symbol classsubparts) [22111 22155])
                    ("no_scrolling_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [22327 22354])
                    ("header_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [22434 22460])
                    ("buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [22667 22689])
                    ("begv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22791 22810])
                    ("zv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22791 22810]))                  
                :type "struct")
                nil [20661 22813])
            ("CHECK_MATRIX" variable (:constant-flag t) nil [23098 23110])
            ("glyph_row_area" type
               (:members 
                  ( ("ANY_AREA" variable
                       (:constant-flag t
                        :default-value (23482 23484)
                        :type "int")
                        (reparse-symbol enumsubparts) [23471 23484])
                    ("LEFT_MARGIN_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [23488 23505])
                    ("TEXT_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [23508 23518])
                    ("RIGHT_MARGIN_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [23521 23539])
                    ("LAST_AREA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [23542 23553]))                  
                :type "enum")
                nil [23447 23554])
            ("glyph_row" type
               (:members 
                  ( ("glyphs" variable
                       (:pointer 1
                        :dereference 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [25581 25617])
                    ("used" variable
                       (:dereference 1
                        :type "short")
                        (reparse-symbol classsubparts) [25767 25793])
                    ("hash" variable (:type "unsigned int") (reparse-symbol classsubparts) [25921 25935])
                    ("x" variable (:type "int") (reparse-symbol classsubparts) [26309 26318])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [26309 26318])
                    ("pixel_width" variable (:type "int") (reparse-symbol classsubparts) [26519 26535])
                    ("ascent" variable (:type "int") (reparse-symbol classsubparts) [26654 26673])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [26654 26673])
                    ("phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [26887 26916])
                    ("phys_height" variable (:type "int") (reparse-symbol classsubparts) [26887 26916])
                    ("visible_height" variable (:type "int") (reparse-symbol classsubparts) [27123 27142])
                    ("extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [27274 27297])
                    ("start" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [27702 27727])
                    ("end" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [28160 28183])
                    ("minpos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [28560 28591])
                    ("maxpos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [28560 28591])
                    ("overlay_arrow_bitmap" variable (:type "int") (reparse-symbol classsubparts) [28761 28786])
                    ("left_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [28852 28902])
                    ("right_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [28969 29020])
                    ("left_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29086 29131])
                    ("right_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29198 29244])
                    ("left_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29288 29337])
                    ("right_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29382 29432])
                    ("left_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29476 29520])
                    ("right_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [29565 29610])
                    ("left_fringe_offset" variable
                       (:suffix ":8"
                        :type "signed int")
                        (reparse-symbol classsubparts) [29666 29713])
                    ("right_fringe_offset" variable
                       (:suffix ":8"
                        :type "signed int")
                        (reparse-symbol classsubparts) [29770 29818])
                    ("fringe_bitmap_periodic_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [29961 29998])
                    ("redraw_fringe_bitmaps_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30065 30101])
                    ("enabled_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30334 30356])
                    ("truncated_on_left_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30455 30487])
                    ("truncated_on_right_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30490 30523])
                    ("continued_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30644 30668])
                    ("displays_text_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30794 30822])
                    ("ends_at_zv_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [30873 30898])
                    ("fill_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31101 31125])
                    ("indicate_empty_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31242 31276])
                    ("contains_overlapping_glyphs_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31387 31429])
                    ("full_width_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31632 31657])
                    ("mode_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31711 31735])
                    ("overlapped_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31815 31840])
                    ("ends_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32034 32071])
                    ("starts_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32264 32303])
                    ("overlapping_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32370 32396])
                    ("mouse_face_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32473 32498])
                    ("ends_in_newline_from_string_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32569 32611])
                    ("exact_window_width_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32754 32792])
                    ("cursor_in_fringe_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32873 32904])
                    ("ends_in_ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [32978 33009])
                    ("indicate_bob_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33118 33145])
                    ("indicate_top_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33281 33313])
                    ("indicate_eob_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33421 33448])
                    ("indicate_bottom_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33585 33620])
                    ("reversed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [33716 33739])
                    ("continuation_lines_width" variable (:type "int") (reparse-symbol classsubparts) [33802 33831]))                  
                :type "struct")
                nil [24790 34027])
            ("MATRIX_ROW" variable (:constant-flag t) nil [34365 34375])
            ("MATRIX_MODE_LINE_ROW" variable (:constant-flag t) nil [34569 34589])
            ("MATRIX_HEADER_LINE_ROW" variable (:constant-flag t) nil [34839 34861])
            ("MATRIX_FIRST_TEXT_ROW" variable (:constant-flag t) nil [34965 34986])
            ("MATRIX_ROW_GLYPH_START" variable (:constant-flag t) nil [35229 35251])
            ("MATRIX_ROW_USED" variable (:constant-flag t) nil [35399 35414])
            ("MATRIX_ROW_START_CHARPOS" variable (:constant-flag t) nil [35782 35806])
            ("MATRIX_ROW_START_BYTEPOS" variable (:constant-flag t) nil [35844 35868])
            ("MATRIX_ROW_END_CHARPOS" variable (:constant-flag t) nil [36174 36196])
            ("MATRIX_ROW_END_BYTEPOS" variable (:constant-flag t) nil [36234 36256])
            ("MATRIX_ROW_VPOS" variable (:constant-flag t) nil [36350 36365])
            ("MATRIX_BOTTOM_TEXT_ROW" variable (:constant-flag t) nil [36568 36590])
            ("MATRIX_ROW_EXTENDS_FACE_P" variable (:constant-flag t) nil [36833 36858])
            ("SET_MATRIX_ROW_ENABLED_P" variable (:constant-flag t) nil [36963 36987])
            ("MATRIX_ROW_ENABLED_P" variable (:constant-flag t) nil [37072 37092])
            ("MATRIX_ROW_DISPLAYS_TEXT_P" variable (:constant-flag t) nil [37266 37292])
            ("MR_PARTIALLY_VISIBLE" variable (:constant-flag t) nil [37354 37374])
            ("MR_PARTIALLY_VISIBLE_AT_TOP" variable (:constant-flag t) nil [37434 37461])
            ("MR_PARTIALLY_VISIBLE_AT_BOTTOM" variable (:constant-flag t) nil [37529 37559])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_P" variable (:constant-flag t) nil [37746 37776])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_TOP_P" variable (:constant-flag t) nil [38012 38049])
            ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_BOTTOM_P" variable (:constant-flag t) nil [38228 38268])
            ("MATRIX_ROW_BOTTOM_Y" variable (:constant-flag t) nil [38418 38437])
            ("MATRIX_ROW_LAST_VISIBLE_P" variable (:constant-flag t) nil [38588 38613])
            ("MATRIX_ROW_CONTINUATION_LINE_P" variable (:constant-flag t) nil [38747 38777])
            ("MATRIX_ROW_ENDS_IN_MIDDLE_OF_CHAR_P" variable (:constant-flag t) nil [39024 39059])
            ("MATRIX_ROW_ENDS_IN_OVERLAY_STRING_P" variable (:constant-flag t) nil [39269 39304])
            ("MATRIX_ROW_STARTS_IN_MIDDLE_OF_CHAR_P" variable (:constant-flag t) nil [39438 39475])
            ("MATRIX_ROW_OVERLAPS_PRED_P" variable (:constant-flag t) nil [39721 39747])
            ("MATRIX_ROW_OVERLAPS_SUCC_P" variable (:constant-flag t) nil [39853 39879])
            ("space_glyph" variable
               (:typemodifiers ("extern")
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [40007 40039])
            ("display_completed" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [40115 40145])
            ("draw_glyphs_face" type
               (:members 
                  ( ("DRAW_NORMAL_TEXT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40443 40460])
                    ("DRAW_INVERSE_VIDEO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40463 40482])
                    ("DRAW_CURSOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40485 40497])
                    ("DRAW_MOUSE_FACE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40500 40516])
                    ("DRAW_IMAGE_RAISED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40519 40537])
                    ("DRAW_IMAGE_SUNKEN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [40540 40559]))                  
                :type "enum")
                nil [40417 40560])
            ("MATRIX_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [45383 45406])
            ("MATRIX_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [45709 45734])
            ("CURRENT_MODE_LINE_FACE_ID_3" variable (:constant-flag t) nil [46410 46437])
            ("CURRENT_MODE_LINE_FACE_ID" variable (:constant-flag t) nil [46897 46922])
            ("CURRENT_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [47227 47251])
            ("CURRENT_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [47806 47832])
            ("DESIRED_MODE_LINE_HEIGHT" variable (:constant-flag t) nil [48212 48236])
            ("DESIRED_HEADER_LINE_HEIGHT" variable (:constant-flag t) nil [48368 48394])
            ("VCENTER_BASELINE_OFFSET" variable (:constant-flag t) nil [49516 49539])
            ("FONT_TOO_HIGH" variable (:constant-flag t) nil [50046 50059])
            ("lface_attribute_index" type
               (:members 
                  ( ("LFACE_FAMILY_INDEX" variable
                       (:constant-flag t
                        :default-value (50455 50456)
                        :type "int")
                        (reparse-symbol enumsubparts) [50434 50456])
                    ("LFACE_FOUNDRY_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50460 50480])
                    ("LFACE_SWIDTH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50483 50502])
                    ("LFACE_HEIGHT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50505 50524])
                    ("LFACE_WEIGHT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50527 50546])
                    ("LFACE_SLANT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50549 50567])
                    ("LFACE_UNDERLINE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50570 50592])
                    ("LFACE_INVERSE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50595 50615])
                    ("LFACE_FOREGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50618 50641])
                    ("LFACE_BACKGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50644 50667])
                    ("LFACE_STIPPLE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50670 50690])
                    ("LFACE_OVERLINE_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50693 50714])
                    ("LFACE_STRIKE_THROUGH_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50717 50744])
                    ("LFACE_BOX_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50747 50763])
                    ("LFACE_FONT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50766 50783])
                    ("LFACE_INHERIT_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50786 50806])
                    ("LFACE_FONTSET_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50809 50829])
                    ("LFACE_DISTANT_FOREGROUND_INDEX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50832 50863])
                    ("LFACE_VECTOR_SIZE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50866 50885]))                  
                :type "enum")
                nil [50403 50886])
            ("face_box_type" type
               (:members 
                  ( ("FACE_NO_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [50969 50981])
                    ("FACE_SIMPLE_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [51116 51132])
                    ("FACE_RAISED_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [51242 51258])
                    ("FACE_SUNKEN_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [51261 51278]))                  
                :type "enum")
                nil [50917 51279])
            ("face_underline_type" type
               (:members 
                  ( ("FACE_UNDER_LINE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [51333 51349])
                    ("FACE_UNDER_WAVE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [51352 51369]))                  
                :type "enum")
                nil [51304 51370])
            ("face" type
               (:members 
                  ( ("lface" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [51792 51829])
                    ("id" variable (:type "int") (reparse-symbol classsubparts) [51951 51958])
                    ("foreground" variable (:type "unsigned long") (reparse-symbol classsubparts) [52373 52398])
                    ("background" variable (:type "unsigned long") (reparse-symbol classsubparts) [52459 52484])
                    ("underline_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [52544 52574])
                    ("overline_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [52663 52692])
                    ("strike_through_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [52695 52730])
                    ("box_color" variable (:type "unsigned long") (reparse-symbol classsubparts) [52733 52757])
                    ("font" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [52761 52779])
                    ("fontset" variable (:type "int") (reparse-symbol classsubparts) [52909 52921])
                    ("box_line_width" variable (:type "int") (reparse-symbol classsubparts) [53319 53338])
                    ("box" variable
                       (:suffix ":2"
                        :type "int")
                        (reparse-symbol classsubparts) [53716 53724])
                    ("underline_type" variable
                       (:suffix ":1"
                        :type "int")
                        (reparse-symbol classsubparts) [53788 53807])
                    ("use_box_color_for_shadows_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [53907 53947])
                    ("underline_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54074 54098])
                    ("overline_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54101 54124])
                    ("strike_through_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54127 54156])
                    ("foreground_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54316 54351])
                    ("background_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54354 54389])
                    ("underline_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54573 54607])
                    ("overline_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54806 54845])
                    ("strike_through_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54848 54893])
                    ("box_color_defaulted_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [54896 54930])
                    ("tty_bold_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55056 55079])
                    ("tty_italic_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55082 55107])
                    ("tty_underline_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55110 55138])
                    ("tty_reverse_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55141 55167])
                    ("colors_copied_bitwise_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55320 55356])
                    ("overstrike" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [55422 55445])
                    ("hash" variable (:type "unsigned int") (reparse-symbol classsubparts) [55710 55724])
                    ("next" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [55798 55823])
                    ("prev" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [55798 55823])
                    ("ascii_face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [55996 56020]))                  
                :type "struct")
                nil [51673 56147])
            ("FACE_TTY_DEFAULT_COLOR" variable (:constant-flag t) nil [56232 56254])
            ("FACE_TTY_DEFAULT_FG_COLOR" variable (:constant-flag t) nil [56360 56385])
            ("FACE_TTY_DEFAULT_BG_COLOR" variable (:constant-flag t) nil [56491 56516])
            ("face_tty_specified_color" function
               (:arguments 
                  ( ("color" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [56683 56703]))                  
                :type "bool")
                nil [56652 56751])
            ("FACE_UNIBYTE_P" variable (:constant-flag t) nil [56816 56830])
            ("face_id" type
               (:members 
                  ( ("DEFAULT_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [56989 57005])
                    ("MODE_LINE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57008 57026])
                    ("MODE_LINE_INACTIVE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57029 57056])
                    ("TOOL_BAR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57059 57076])
                    ("FRINGE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57079 57094])
                    ("HEADER_LINE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57097 57117])
                    ("SCROLL_BAR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57120 57139])
                    ("BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57142 57157])
                    ("CURSOR_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57160 57175])
                    ("MOUSE_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57178 57192])
                    ("MENU_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57195 57208])
                    ("VERTICAL_BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57211 57235])
                    ("WINDOW_DIVIDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57238 57261])
                    ("WINDOW_DIVIDER_FIRST_PIXEL_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57264 57299])
                    ("WINDOW_DIVIDER_LAST_PIXEL_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57302 57336])
                    ("INTERNAL_BORDER_FACE_ID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57339 57363])
                    ("BASIC_FACE_ID_SENTINEL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [57366 57390]))                  
                :type "enum")
                nil [56972 57391])
            ("MAX_FACE_ID" variable (:constant-flag t) nil [57401 57412])
            ("face_cache" type
               (:members 
                  ( ("buckets" variable
                       (:pointer 2
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [57638 57660])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [57722 57738])
                    ("faces_by_id" variable
                       (:pointer 2
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [57811 57837])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [57911 57926])
                    ("used" variable (:type "int") (reparse-symbol classsubparts) [57929 57938])
                    ("menu_face_changed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [58026 58058]))                  
                :type "struct")
                nil [57570 58061])
            ("FACE_FROM_ID" variable (:constant-flag t) nil [58144 58156])
            ("FACE_FROM_ID_OR_NULL" variable (:constant-flag t) nil [58384 58404])
            ("FACE_SUITABLE_FOR_ASCII_CHAR_P" function
               (:arguments 
                  ( ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [58637 58655]))                  
                :type "bool")
                nil [58600 58748])
            ("FACE_FOR_CHAR" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59064 59080])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59081 59099])
                    ("character" variable (:type "int") (reparse-symbol arg-sub-list) [59100 59114])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59123 59137])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59138 59157]))                  
                :type "int")
                nil [59045 59277])
            ("GLYPH_CHAR_VALID_P" function
               (:arguments 
                  ( ("g" variable (:type ("GLYPH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59368 59376]))                  
                :type "bool")
                nil [59343 59420])
            ("GLYPH_CODE_P" function
               (:arguments 
                  ( ("gc" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59666 59681]))                  
                :type "bool")
                nil [59647 59991])
            ("face_change" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [60104 60128])
            ("BIDI_MAXDEPTH" variable (:constant-flag t) nil [60216 60229])
            ("bidi_type_t" type
               (:typedef ("" type
                     (:members 
                        ( ("UNKNOWN_BT" variable
                             (:constant-flag t
                              :default-value (60723 60724)
                              :type "int")
                              (reparse-symbol enumsubparts) [60710 60724])
                          ("STRONG_L" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60728 60737])
                          ("STRONG_R" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60767 60776])
                          ("WEAK_EN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60806 60814])
                          ("WEAK_AN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60839 60847])
                          ("WEAK_BN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60870 60878])
                          ("NEUTRAL_B" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60904 60914])
                          ("STRONG_AL" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60943 60953])
                          ("LRE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [60990 60994])
                          ("LRO" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61028 61032])
                          ("RLE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61065 61069])
                          ("RLO" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61103 61107])
                          ("PDF" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61140 61144])
                          ("LRI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61177 61181])
                          ("RLI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61213 61217])
                          ("FSI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61249 61253])
                          ("PDI" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61284 61288])
                          ("WEAK_ES" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61322 61330])
                          ("WEAK_ET" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61365 61373])
                          ("WEAK_CS" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61409 61417])
                          ("WEAK_NSM" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61443 61452])
                          ("NEUTRAL_S" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61478 61488])
                          ("NEUTRAL_WS" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61515 61526])
                          ("NEUTRAL_ON" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61546 61579]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [60693 61592])
            ("bidi_bracket_type_t" type
               (:typedef ("" type
                     (:members 
                        ( ("BIDI_BRACKET_NONE" variable
                             (:constant-flag t
                              :default-value (61893 61894)
                              :type "int")
                              (reparse-symbol enumsubparts) [61873 61894])
                          ("BIDI_BRACKET_OPEN" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61898 61916])
                          ("BIDI_BRACKET_CLOSE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [61919 61939]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [61856 61960])
            ("bidi_dir_t" type
               (:typedef ("" type
                     (:members 
                        ( ("NEUTRAL_DIR" variable
                             (:constant-flag t
                              :default-value (62034 62035)
                              :type "int")
                              (reparse-symbol enumsubparts) [62020 62035])
                          ("L2R" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [62037 62041])
                          ("R2L" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [62042 62047]))                        
                      :type "enum")
                      nil nil)
                :type "typedef")
                nil [62005 62059])
            ("bidi_saved_info" type
               (:members 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [62170 62188])
                    ("type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [62226 62243])
                    ("orig_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [62284 62306]))                  
                :type "struct")
                nil [62143 62354])
            ("bidi_stack" type
               (:members 
                  ( ("next_for_neutral_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [62712 62743])
                    ("next_for_neutral_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [62746 62781])
                    ("last_strong_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [62784 62814])
                    ("prev_for_neutral_type" variable
                       (:suffix ":3"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [62817 62852])
                    ("level" variable (:type "unsigned char") (reparse-symbol classsubparts) [62855 62875])
                    ("flags" variable (:type "unsigned char") (reparse-symbol classsubparts) [62878 62898]))                  
                :type "struct")
                nil [62690 62938])
            ("bidi_string_data" type
               (:members 
                  ( ("lstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63043 63063])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [63104 63127])
                    ("schars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63178 63195])
                    ("bufpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63283 63300])
                    ("from_disp_str" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [63350 63376])
                    ("unibyte" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [63444 63464]))                  
                :type "struct")
                nil [63015 63507])
            ("bidi_it" type
               (:members 
                  ( ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63580 63598])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63645 63663])
                    ("ch" variable (:type "int") (reparse-symbol classsubparts) [63666 63673])
                    ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63821 63838])
                    ("ch_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63941 63958])
                    ("type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63988 64005])
                    ("type_after_wn" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64096 64122])
                    ("orig_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64164 64186])
                    ("resolved_level" variable (:type "signed char") (reparse-symbol classsubparts) [64238 64265])
                    ("isolate_level" variable (:type "signed char") (reparse-symbol classsubparts) [64313 64339])
                    ("invalid_levels" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64393 64418])
                    ("invalid_isolates" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64451 64478])
                    ("prev" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [64511 64539])
                    ("last_strong" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [64578 64613])
                    ("next_for_neutral" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [64656 64696])
                    ("prev_for_neutral" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [64735 64775])
                    ("next_for_ws" variable (:type ("bidi_saved_info" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [64806 64841])
                    ("bracket_pairing_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64881 64911])
                    ("bracket_enclosed_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [64948 64982])
                    ("next_en_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65019 65041])
                    ("next_en_type" variable (:type ("bidi_type_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65092 65117])
                    ("sos" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65154 65169])
                    ("scan_dir" variable (:type "int") (reparse-symbol classsubparts) [65220 65233])
                    ("disp_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65286 65305])
                    ("disp_prop" variable (:type "int") (reparse-symbol classsubparts) [65351 65365])
                    ("stack_idx" variable (:type "int") (reparse-symbol classsubparts) [65496 65510])
                    ("level_stack" variable
                       (:dereference 1
                        :type ("bidi_stack" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [65753 65802])
                    ("string" variable (:type ("bidi_string_data" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [65836 65867])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [65894 65911])
                    ("paragraph_dir" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65948 65973])
                    ("separator_limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66010 66036])
                    ("first_elt" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [66082 66104])
                    ("new_paragraph" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [66149 66175])
                    ("frame_window_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [66219 66246]))                  
                :type "struct")
                nil [63561 66289])
            ("BIDI_AT_BASE_LEVEL" variable (:constant-flag t) nil [66388 66406])
            ("draw_fringe_bitmap_params" type
               (:members 
                  ( ("which" variable (:type "int") (reparse-symbol classsubparts) [67161 67171])
                    ("bits" variable
                       (:pointer 1
                        :type "unsigned short")
                        (reparse-symbol classsubparts) [67205 67226])
                    ("wd" variable (:type "int") (reparse-symbol classsubparts) [67229 67243])
                    ("h" variable (:type "int") (reparse-symbol classsubparts) [67229 67243])
                    ("dh" variable (:type "int") (reparse-symbol classsubparts) [67229 67243])
                    ("x" variable (:type "int") (reparse-symbol classsubparts) [67246 67255])
                    ("y" variable (:type "int") (reparse-symbol classsubparts) [67246 67255])
                    ("bx" variable (:type "int") (reparse-symbol classsubparts) [67258 67277])
                    ("nx" variable (:type "int") (reparse-symbol classsubparts) [67258 67277])
                    ("by" variable (:type "int") (reparse-symbol classsubparts) [67258 67277])
                    ("ny" variable (:type "int") (reparse-symbol classsubparts) [67258 67277])
                    ("cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [67280 67301])
                    ("overlay_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [67304 67326])
                    ("face" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [67329 67347]))                  
                :type "struct")
                nil [67124 67350])
            ("MAX_FRINGE_BITMAPS" variable (:constant-flag t) nil [67360 67378])
            ("display_element_type" type
               (:members 
                  ( ("IT_CHARACTER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69419 69432])
                    ("IT_COMPOSITION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69483 69498])
                    ("IT_GLYPHLESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69551 69564])
                    ("IT_IMAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69587 69596])
                    ("IT_STRETCH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69644 69655])
                    ("IT_EOB" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69693 69700])
                    ("IT_TRUNCATION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69863 69877])
                    ("IT_CONTINUATION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69947 69963])
                    ("IT_XWIDGET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [69985 69997]))                  
                :type "enum")
                nil [69360 69998])
            ("prop_idx" type
               (:members 
                  ( ("FONTIFIED_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70108 70127])
                    ("FACE_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70130 70144])
                    ("INVISIBLE_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70147 70166])
                    ("DISPLAY_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70169 70186])
                    ("COMPOSITION_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70189 70210])
                    ("OVERLAY_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70278 70295])
                    ("LAST_PROP_IDX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70318 70333]))                  
                :type "enum")
                nil [70090 70334])
            ("line_wrap_method" type
               (:members 
                  ( ("TRUNCATE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70423 70432])
                    ("WORD_WRAP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70435 70445])
                    ("WINDOW_WRAP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70448 70461]))                  
                :type "enum")
                nil [70397 70462])
            ("glyphless_display_method" type
               (:members 
                  ( ("GLYPHLESS_DISPLAY_THIN_SPACE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70677 70706])
                    ("GLYPHLESS_DISPLAY_EMPTY_BOX" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70760 70788])
                    ("GLYPHLESS_DISPLAY_ACRONYM" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70840 70866])
                    ("GLYPHLESS_DISPLAY_HEX_CODE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [70938 70968]))                  
                :type "enum")
                nil [70537 70969])
            ("it_slice" type
               (:members 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [70991 71005])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [71008 71022])
                    ("width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [71025 71043])
                    ("height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [71046 71065]))                  
                :type "struct")
                nil [70971 71068])
            ("it_method" type
               (:members 
                  ( ("GET_FROM_BUFFER" variable
                       (:constant-flag t
                        :default-value (71225 71226)
                        :type "int")
                        (reparse-symbol enumsubparts) [71207 71226])
                    ("GET_FROM_DISPLAY_VECTOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71230 71254])
                    ("GET_FROM_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71257 71273])
                    ("GET_FROM_C_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71276 71294])
                    ("GET_FROM_IMAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71297 71312])
                    ("GET_FROM_STRETCH" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71315 71332])
                    ("GET_FROM_XWIDGET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71335 71352])
                    ("NUM_IT_METHODS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [71355 71371]))                  
                :type "enum")
                nil [71188 71372])
            ("IT_STACK_SIZE" variable (:constant-flag t) nil [71418 71431])
            ("composition_it" type
               (:members 
                  ( ("stop_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [71584 71603])
                    ("id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [71725 71738])
                    ("ch" variable (:type "int") (reparse-symbol classsubparts) [72020 72027])
                    ("rule_idx" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72269 72288])
                    ("lookback" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72451 72470])
                    ("nglyphs" variable (:type "int") (reparse-symbol classsubparts) [72537 72549])
                    ("reversed_p" variable (:type "bool") (reparse-symbol classsubparts) [72725 72741])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72913 72931])
                    ("nchars" variable (:type "int") (reparse-symbol classsubparts) [73007 73026])
                    ("nbytes" variable (:type "int") (reparse-symbol classsubparts) [73007 73026])
                    ("from" variable (:type "int") (reparse-symbol classsubparts) [73094 73107])
                    ("to" variable (:type "int") (reparse-symbol classsubparts) [73094 73107])
                    ("width" variable (:type "int") (reparse-symbol classsubparts) [73230 73240]))                  
                :type "struct")
                nil [71500 73243])
            ("it" type
               (:members 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [73334 73353])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [73356 73373])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [73406 73422])
                    ("method" variable (:type ("it_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [73503 73525])
                    ("stop_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [73659 73682])
                    ("prev_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [73793 73813])
                    ("base_level_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [73951 73977])
                    ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74298 74320])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [74483 74506])
                    ("string_nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74718 74742])
                    ("redisplay_end_trigger_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [74820 74860])
                    ("multibyte_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [74918 74942])
                    ("header_line_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75001 75027])
                    ("string_from_display_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75160 75199])
                    ("string_from_prefix_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75291 75329])
                    ("from_disp_prop_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75433 75462])
                    ("ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75594 75617])
                    ("avoid_cursor_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [75677 75704])
                    ("dp" variable
                       (:pointer 1
                        :type ("Lisp_Char_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [75759 75786])
                    ("dpvec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [76138 76165])
                    ("dpend" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [76138 76165])
                    ("dpvec_char_len" variable (:type "int") (reparse-symbol classsubparts) [76431 76450])
                    ("dpvec_face_id" variable (:type "int") (reparse-symbol classsubparts) [76530 76548])
                    ("saved_face_id" variable (:type "int") (reparse-symbol classsubparts) [76715 76733])
                    ("ctl_chars" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [77059 77085])
                    ("start" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [77214 77239])
                    ("current" variable (:type ("display_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [77351 77378])
                    ("n_overlay_strings" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77739 77767])
                    ("overlay_strings_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [78021 78055])
                    ("OVERLAY_STRING_CHUNK_SIZE" variable (:constant-flag t) (reparse-symbol classsubparts) [78178 78203])
                    ("overlay_strings" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78209 78264])
                    ("string_overlays" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [78328 78383])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [78647 78666])
                    ("from_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [78780 78805])
                    ("stack" variable
                       (:dereference 1
                        :type ("iterator_stack_entry" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [79051 80394])
                    ("iterator_stack_entry" type
                       (:members 
                          ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79087 79106])
                            ("string_nchars" variable (:type "int") (reparse-symbol classsubparts) [79111 79129])
                            ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79134 79156])
                            ("stop_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79161 79184])
                            ("prev_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79189 79209])
                            ("base_level_stop" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79214 79240])
                            ("cmp_it" variable (:type ("composition_it" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [79245 79274])
                            ("face_id" variable (:type "int") (reparse-symbol classsubparts) [79279 79291])
                            ("u" variable (:type ("" type
                                 (:members 
                                    ( ("image" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79409 79428])
                                                ("slice" variable (:type ("it_slice" type
                                                     (:prototype t
                                                      :type "struct")
                                                      nil nil)) (reparse-symbol classsubparts) [79430 79452])
                                                ("image_id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79454 79473]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [79399 79488])
                                      ("stretch" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79544 79563]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [79534 79580])
                                      ("xwidget" variable (:type ("" type
                                           (:members 
                                              ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79636 79655]))                                              
                                            :type "struct")
                                            nil nil)) (reparse-symbol classsubparts) [79626 79672]))                                    
                                  :type "union")
                                  nil nil)) (reparse-symbol classsubparts) [79348 79681])
                            ("position" variable (:type ("text_pos" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [79734 79759])
                            ("current" variable (:type ("display_pos" type
                                 (:prototype t
                                  :type "struct")
                                  nil nil)) (reparse-symbol classsubparts) [79764 79791])
                            ("from_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79796 79821])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [79826 79851])
                            ("method" variable (:type ("it_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [79856 79878])
                            ("paragraph_embedding" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [79883 79914])
                            ("multibyte_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [79919 79943])
                            ("string_from_display_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [79948 79987])
                            ("string_from_prefix_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [79992 80030])
                            ("display_ellipsis_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [80035 80066])
                            ("avoid_cursor_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [80071 80098])
                            ("bidi_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [80103 80122])
                            ("from_disp_prop_p" variable
                               (:suffix ":1"
                                :type ("bool_bf" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [80127 80156])
                            ("line_wrap" variable (:type ("line_wrap_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [80161 80193])
                            ("voffset" variable (:type "short") (reparse-symbol classsubparts) [80294 80308])
                            ("space_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [80313 80337])
                            ("font_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [80342 80366]))                          
                        :type "struct")
                        (reparse-symbol classsubparts) [79051 80394])
                    ("sp" variable (:type "int") (reparse-symbol classsubparts) [80422 80429])
                    ("selective" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [80578 80598])
                    ("what" variable (:type ("display_element_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [80717 80748])
                    ("face_id" variable (:type "int") (reparse-symbol classsubparts) [80774 80786])
                    ("selective_display_ellipsis_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [80860 80901])
                    ("ctl_arrow_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81039 81063])
                    ("face_box_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81120 81143])
                    ("start_of_box_run_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81254 81285])
                    ("end_of_box_run_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81391 81420])
                    ("overlay_strings_at_end_processed_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81496 81543])
                    ("ignore_overlay_strings_at_pos_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81651 81695])
                    ("glyph_not_available_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [81781 81815])
                    ("starts_in_middle_of_char_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [82006 82045])
                    ("face_before_selective_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [82165 82201])
                    ("constrain_row_ascent_descent_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [82349 82392])
                    ("line_number_produced_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [82493 82528])
                    ("line_wrap" variable (:type ("line_wrap_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [82532 82564])
                    ("base_face_id" variable (:type "int") (reparse-symbol classsubparts) [82703 82720])
                    ("c" variable (:type "int") (reparse-symbol classsubparts) [83554 83565])
                    ("len" variable (:type "int") (reparse-symbol classsubparts) [83554 83565])
                    ("cmp_it" variable (:type ("composition_it" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [83653 83682])
                    ("char_to_display" variable (:type "int") (reparse-symbol classsubparts) [84010 84030])
                    ("glyphless_method" variable (:type ("glyphless_display_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [84113 84160])
                    ("image_id" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [84226 84245])
                    ("xwidget" variable
                       (:pointer 1
                        :type ("xwidget" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [84281 84305])
                    ("slice" variable (:type ("it_slice" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [84348 84370])
                    ("space_width" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [84441 84465])
                    ("voffset" variable (:type "short") (reparse-symbol classsubparts) [84527 84541])
                    ("tab_width" variable (:type "short") (reparse-symbol classsubparts) [84580 84596])
                    ("font_height" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [84662 84686])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [85903 85922])
                    ("position" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [85925 85950])
                    ("truncation_pixel_width" variable (:type "short") (reparse-symbol classsubparts) [86018 86073])
                    ("continuation_pixel_width" variable (:type "short") (reparse-symbol classsubparts) [86018 86073])
                    ("first_visible_x" variable (:type "int") (reparse-symbol classsubparts) [86441 86477])
                    ("last_visible_x" variable (:type "int") (reparse-symbol classsubparts) [86441 86477])
                    ("last_visible_y" variable (:type "int") (reparse-symbol classsubparts) [86587 86606])
                    ("extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [86710 86733])
                    ("max_extra_line_spacing" variable (:type "int") (reparse-symbol classsubparts) [86788 86815])
                    ("override_ascent" variable (:type "int") (reparse-symbol classsubparts) [86939 86992])
                    ("override_descent" variable (:type "int") (reparse-symbol classsubparts) [86939 86992])
                    ("override_boff" variable (:type "int") (reparse-symbol classsubparts) [86939 86992])
                    ("glyph_row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [87090 87118])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [87180 87205])
                    ("nglyphs" variable (:type "int") (reparse-symbol classsubparts) [87328 87340])
                    ("pixel_width" variable (:type "int") (reparse-symbol classsubparts) [87425 87441])
                    ("ascent" variable (:type "int") (reparse-symbol classsubparts) [87558 87603])
                    ("descent" variable (:type "int") (reparse-symbol classsubparts) [87558 87603])
                    ("max_ascent" variable (:type "int") (reparse-symbol classsubparts) [87558 87603])
                    ("max_descent" variable (:type "int") (reparse-symbol classsubparts) [87558 87603])
                    ("phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [87606 87671])
                    ("phys_descent" variable (:type "int") (reparse-symbol classsubparts) [87606 87671])
                    ("max_phys_ascent" variable (:type "int") (reparse-symbol classsubparts) [87606 87671])
                    ("max_phys_descent" variable (:type "int") (reparse-symbol classsubparts) [87606 87671])
                    ("current_x" variable (:type "int") (reparse-symbol classsubparts) [87934 87948])
                    ("continuation_lines_width" variable (:type "int") (reparse-symbol classsubparts) [88152 88181])
                    ("eol_pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [88558 88582])
                    ("current_y" variable (:type "int") (reparse-symbol classsubparts) [88706 88720])
                    ("first_vpos" variable (:type "int") (reparse-symbol classsubparts) [88788 88803])
                    ("vpos" variable (:type "int") (reparse-symbol classsubparts) [88930 88939])
                    ("hpos" variable (:type "int") (reparse-symbol classsubparts) [89118 89127])
                    ("lnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [89173 89188])
                    ("lnum_bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [89242 89265])
                    ("lnum_width" variable (:type "int") (reparse-symbol classsubparts) [89385 89400])
                    ("lnum_pixel_width" variable (:type "int") (reparse-symbol classsubparts) [89403 89424])
                    ("pt_lnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [89499 89517])
                    ("tab_offset" variable (:type "int") (reparse-symbol classsubparts) [89762 89777])
                    ("left_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [89843 89893])
                    ("right_user_fringe_bitmap" variable
                       (:suffix ":16"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [89960 90011])
                    ("left_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [90055 90104])
                    ("right_user_fringe_face_id" variable
                       (:suffix ":20"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [90149 90199])
                    ("bidi_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [90299 90318])
                    ("bidi_it" variable (:type ("bidi_it" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [90370 90393])
                    ("paragraph_embedding" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [90396 90427]))                  
                :type "struct")
                nil [73245 90430])
            ("IT_CHARPOS" variable (:constant-flag t) nil [90485 90495])
            ("IT_BYTEPOS" variable (:constant-flag t) nil [90536 90546])
            ("IT_STRING_CHARPOS" variable (:constant-flag t) nil [90587 90604])
            ("IT_STRING_BYTEPOS" variable (:constant-flag t) nil [90651 90668])
            ("ITERATOR_AT_END_P" variable (:constant-flag t) nil [90852 90869])
            ("ITERATOR_AT_END_OF_LINE_P" variable (:constant-flag t) nil [91080 91105])
            ("PRODUCE_GLYPHS" variable (:constant-flag t) nil [91352 91366])
            ("move_operation_enum" type
               (:members 
                  ( ("MOVE_TO_X" variable
                       (:constant-flag t
                        :default-value (92101 92105)
                        :type "int")
                        (reparse-symbol enumsubparts) [92089 92105])
                    ("MOVE_TO_Y" variable
                       (:constant-flag t
                        :default-value (92172 92176)
                        :type "int")
                        (reparse-symbol enumsubparts) [92160 92176])
                    ("MOVE_TO_VPOS" variable
                       (:constant-flag t
                        :default-value (92240 92244)
                        :type "int")
                        (reparse-symbol enumsubparts) [92225 92244])
                    ("MOVE_TO_POS" variable
                       (:constant-flag t
                        :default-value (92328 92332)
                        :type "int")
                        (reparse-symbol enumsubparts) [92314 92332]))                  
                :type "enum")
                nil [92010 92335])
            ("Mouse_HLInfo" type
               (:typedef ("" type
                     (:members 
                        ( ("mouse_face_beg_row" variable (:type "int") (reparse-symbol classsubparts) [92880 92941])
                          ("mouse_face_beg_col" variable (:type "int") (reparse-symbol classsubparts) [92880 92941])
                          ("mouse_face_beg_x" variable (:type "int") (reparse-symbol classsubparts) [92880 92941])
                          ("mouse_face_end_row" variable (:type "int") (reparse-symbol classsubparts) [92944 93005])
                          ("mouse_face_end_col" variable (:type "int") (reparse-symbol classsubparts) [92944 93005])
                          ("mouse_face_end_x" variable (:type "int") (reparse-symbol classsubparts) [92944 93005])
                          ("mouse_face_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [93008 93038])
                          ("mouse_face_face_id" variable (:type "int") (reparse-symbol classsubparts) [93041 93064])
                          ("mouse_face_overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [93067 93098])
                          ("mouse_face_mouse_frame" variable
                             (:pointer 1
                              :type ("frame" type
                                   (:prototype t
                                    :type "struct")
                                    nil nil))
                              (reparse-symbol classsubparts) [93241 93278])
                          ("mouse_face_mouse_x" variable (:type "int") (reparse-symbol classsubparts) [93281 93324])
                          ("mouse_face_mouse_y" variable (:type "int") (reparse-symbol classsubparts) [93281 93324])
                          ("mouse_face_past_end" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [93430 93462])
                          ("mouse_face_defer" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [93519 93548])
                          ("mouse_face_hidden" variable
                             (:suffix ":1"
                              :type ("bool_bf" type (:type "class") nil nil))
                              (reparse-symbol classsubparts) [93618 93648]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [92556 93664])
            ("reset_mouse_highlight" function
               (:arguments 
                  ( ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93701 93722]))                  
                :type "void")
                nil [93673 94273])
            ("run" type
               (:members 
                  ( ("desired_y" variable (:type "int") (reparse-symbol classsubparts) [94598 94623])
                    ("current_y" variable (:type "int") (reparse-symbol classsubparts) [94598 94623])
                    ("desired_vpos" variable (:type "int") (reparse-symbol classsubparts) [94675 94706])
                    ("current_vpos" variable (:type "int") (reparse-symbol classsubparts) [94675 94706])
                    ("height" variable (:type "int") (reparse-symbol classsubparts) [94759 94777])
                    ("nrows" variable (:type "int") (reparse-symbol classsubparts) [94759 94777]))                  
                :type "struct")
                nil [94533 94780])
            ("frame_parm_handler" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [94866 94881])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94882 94894])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94895 94907]))                  
                :type "void")
                nil [94838 94908])
            ("redisplay_interface" type
               (:members 
                  ( ("frame_parm_handlers" variable
                       (:pointer 1
                        :type ("frame_parm_handler" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [95091 95131])
                    ("produce_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("it" variable
                               (:pointer 1
                                :type ("it" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95251 95265]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [95227 95266])
                    ("write_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95377 95394])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95395 95417])
                            ("string" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95421 95442])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [95443 95468])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [95472 95480]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [95355 95481])
                    ("insert_glyphs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95507 95524])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95525 95547])
                            ("start" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95552 95572])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [95573 95598])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [95603 95611]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [95484 95612])
                    ("clear_end_of_line" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95742 95759])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95760 95782])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [95791 95816])
                            ("x" variable (:type "int") (reparse-symbol arg-sub-list) [95817 95823]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [95715 95824])
                    ("scroll_run_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95939 95956])
                            ("run" variable
                               (:pointer 1
                                :type ("run" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [95957 95973]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [95914 95974])
                    ("after_update_window_line_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [96206 96223])
                            ("desired_row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [96230 96260]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [96167 96261])
                    ("update_window_begin_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [96393 96410]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [96359 96411])
                    ("update_window_end_hook" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [96747 96764])
                            ("cursor_on_p" variable (:type "bool") (reparse-symbol arg-sub-list) [96765 96782])
                            ("mouse_face_overwritten_p" variable (:type "bool") (reparse-symbol arg-sub-list) [96817 96847]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [96715 96848])
                    ("flush_display" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [96938 96954]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [96915 96955])
                    ("clear_window_mouse_face" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [97057 97074]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [97024 97075])
                    ("get_glyph_overhangs" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("glyph" variable
                               (:pointer 1
                                :type ("glyph" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [97195 97215])
                            ("f" variable
                               (:pointer 1
                                :type ("frame" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [97216 97232])
                            ("left" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [97264 97274])
                            ("right" variable
                               (:pointer 1
                                :type "int")
                                (reparse-symbol arg-sub-list) [97275 97286]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [97166 97287])
                    ("fix_overlapping_area" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("w" variable
                               (:pointer 1
                                :type ("window" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [97501 97518])
                            ("row" variable
                               (:pointer 1
                                :type ("glyph_row" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [97519 97541])
                            ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [97574 97599])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [97600 97604]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [97471 97605]))                  
                :type "struct")
                nil [95012 99987])
            ("tool_bar_item_idx" type
               (:members 
                  ( ("TOOL_BAR_ITEM_KEY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [105971 105989])
                    ("TOOL_BAR_ITEM_ENABLED_P" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106030 106054])
                    ("TOOL_BAR_ITEM_SELECTED_P" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106106 106131])
                    ("TOOL_BAR_ITEM_CAPTION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106153 106175])
                    ("TOOL_BAR_ITEM_IMAGES" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106290 106311])
                    ("TOOL_BAR_ITEM_BINDING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106337 106359])
                    ("TOOL_BAR_ITEM_TYPE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106499 106518])
                    ("TOOL_BAR_ITEM_HELP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106544 106563])
                    ("TOOL_BAR_ITEM_RTL_IMAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106642 106666])
                    ("TOOL_BAR_ITEM_LABEL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106723 106743])
                    ("TOOL_BAR_ITEM_VERT_ONLY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106822 106846])
                    ("TOOL_BAR_ITEM_NSLOTS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [106940 106962]))                  
                :type "enum")
                nil [105837 106963])
            ("tool_bar_item_image" type
               (:members 
                  ( ("TOOL_BAR_IMAGE_ENABLED_SELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [107089 107121])
                    ("TOOL_BAR_IMAGE_ENABLED_DESELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [107124 107158])
                    ("TOOL_BAR_IMAGE_DISABLED_SELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [107161 107194])
                    ("TOOL_BAR_IMAGE_DISABLED_DESELECTED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [107197 107233]))                  
                :type "enum")
                nil [107060 107234])
            ("DEFAULT_TOOL_BAR_LABEL_SIZE" variable (:constant-flag t) nil [107244 107271])
            ("DEFAULT_TOOL_BAR_BUTTON_MARGIN" variable (:constant-flag t) nil [107331 107361])
            ("DEFAULT_TOOL_BAR_BUTTON_RELIEF" variable (:constant-flag t) nil [107372 107402])
            ("DEFAULT_TOOL_BAR_IMAGE_HEIGHT" variable (:constant-flag t) nil [107475 107504])
            ("TTY_CAP_INVERSE" variable (:constant-flag t) nil [107957 107972])
            ("TTY_CAP_UNDERLINE" variable (:constant-flag t) nil [107987 108004])
            ("TTY_CAP_BOLD" variable (:constant-flag t) nil [108018 108030])
            ("TTY_CAP_DIM" variable (:constant-flag t) nil [108045 108056])
            ("TTY_CAP_ITALIC" variable (:constant-flag t) nil [108071 108085])
            ("bidi_init_it" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108320 108330])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108331 108341])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [108342 108347])
                    ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108348 108365]))                  
                :type "void")
                nil [108294 108366])
            ("bidi_move_to_visually_next" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108407 108424]))                  
                :type "void")
                nil [108367 108425])
            ("bidi_paragraph_init" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("bidi_dir_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108459 108470])
                    ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108471 108488])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [108489 108494]))                  
                :type "void")
                nil [108426 108495])
            ("bidi_mirror_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [108526 108530]))                  
                :type "int")
                nil [108496 108531])
            ("bidi_push_it" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108558 108575]))                  
                :type "void")
                nil [108532 108576])
            ("bidi_pop_it" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108602 108619]))                  
                :type "void")
                nil [108577 108620])
            ("bidi_shelve_cache" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [108653 108658]))                  
                :type "void")
                nil [108621 108659])
            ("bidi_unshelve_cache" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [108693 108700])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [108701 108706]))                  
                :type "void")
                nil [108660 108707])
            ("bidi_find_first_overridden" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108753 108770]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [108708 108771])
            ("row_containing_pos" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108837 108853])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108854 108864])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108903 108922])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [108961 108980])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [108981 108985]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108799 108986])
            ("line_bottom_y" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109006 109018]))                  
                :type "int")
                nil [108987 109019])
            ("default_line_pixel_height" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109051 109067]))                  
                :type "int")
                nil [109020 109068])
            ("display_prop_intangible_p" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109101 109113])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109114 109126])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109127 109137])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109138 109148]))                  
                :type "bool")
                nil [109069 109149])
            ("resize_echo_area_exactly" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [109181 109186]))                  
                :type "void")
                nil [109150 109187])
            ("resize_mini_window" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109213 109229])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [109230 109235]))                  
                :type "bool")
                nil [109188 109236])
            ("set_vertical_scroll_bar" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109267 109283]))                  
                :type "void")
                nil [109237 109284])
            ("set_horizontal_scroll_bar" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109317 109333]))                  
                :type "void")
                nil [109285 109334])
            ("try_window" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109351 109363])
                    ("" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [109364 109380])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109381 109385]))                  
                :type "int")
                nil [109335 109386])
            ("window_box" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109404 109420])
                    ("" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109421 109441])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109445 109451])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109452 109458])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109459 109465])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109466 109472]))                  
                :type "void")
                nil [109387 109473])
            ("window_box_height" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109497 109513]))                  
                :type "int")
                nil [109474 109514])
            ("window_text_bottom_y" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109541 109557]))                  
                :type "int")
                nil [109515 109558])
            ("window_box_width" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109581 109597])
                    ("" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109598 109618]))                  
                :type "int")
                nil [109559 109619])
            ("window_box_left" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109641 109657])
                    ("" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109658 109678]))                  
                :type "int")
                nil [109620 109679])
            ("window_box_left_offset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109708 109724])
                    ("" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109725 109745]))                  
                :type "int")
                nil [109680 109746])
            ("window_box_right" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109769 109785])
                    ("" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109786 109806]))                  
                :type "int")
                nil [109747 109807])
            ("estimate_mode_line_height" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109839 109854])
                    ("" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [109855 109868]))                  
                :type "int")
                nil [109808 109869])
            ("move_it_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109886 109898])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109899 109909])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109910 109914])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109915 109919])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109920 109924])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109925 109929]))                  
                :type "int")
                nil [109870 109930])
            ("pixel_to_glyph_coords" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109959 109974])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109975 109979])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [109980 109984])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109985 109991])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [109992 109998])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [110027 110045])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [110046 110051]))                  
                :type "void")
                nil [109931 110052])
            ("remember_mouse_glyph" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110080 110095])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [110096 110100])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [110101 110105])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [110106 110124]))                  
                :type "void")
                nil [110053 110125])
            ("mark_window_display_accurate" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110162 110174])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [110175 110180]))                  
                :type "void")
                nil [110127 110181])
            ("redisplay_preserve_echo_area" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [110217 110221]))                  
                :type "void")
                nil [110182 110222])
            ("init_iterator" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110243 110255])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110256 110272])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110273 110283])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110304 110314])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110315 110334])
                    ("" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [110335 110348]))                  
                :type "void")
                nil [110223 110349])
            ("init_iterator_to_row_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110383 110395])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110396 110412])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110446 110465]))                  
                :type "void")
                nil [110350 110466])
            ("start_display" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110487 110499])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110500 110516])
                    ("" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [110517 110533]))                  
                :type "void")
                nil [110467 110534])
            ("move_it_vertically" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110560 110572])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [110573 110577]))                  
                :type "void")
                nil [110535 110578])
            ("move_it_vertically_backward" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110613 110625])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [110626 110630]))                  
                :type "void")
                nil [110579 110631])
            ("move_it_by_lines" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110655 110667])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110668 110678]))                  
                :type "void")
                nil [110632 110679])
            ("move_it_past_eol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110703 110715]))                  
                :type "void")
                nil [110680 110716])
            ("move_it_in_display_line" function
               (:prototype-flag t
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110747 110761])
                    ("to_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110771 110792])
                    ("to_x" variable (:type "int") (reparse-symbol arg-sub-list) [110793 110802])
                    ("op" variable (:type ("move_operation_enum" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [110812 110840]))                  
                :type "void")
                nil [110717 110841])
            ("partial_line_height" function
               (:prototype-flag t
                :arguments 
                  ( ("it_origin" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110867 110888]))                  
                :type "int")
                nil [110842 110889])
            ("in_display_vector_p" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110916 110928]))                  
                :type "bool")
                nil [110890 110929])
            ("frame_mode_line_height" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110958 110973]))                  
                :type "int")
                nil [110930 110974])
            ("redisplaying_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [110975 111002])
            ("help_echo_showing_p" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [111003 111035])
            ("help_echo_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111036 111090])
            ("help_echo_window" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111036 111090])
            ("help_echo_object" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111091 111154])
            ("previous_help_echo_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111091 111154])
            ("help_echo_pos" variable
               (:typemodifiers ("extern")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [111155 111186])
            ("last_tool_bar_item" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [111187 111217])
            ("reseat_at_previous_visible_line_start" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111269 111281]))                  
                :type "void")
                nil [111218 111282])
            ("lookup_glyphless_char_display" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [111333 111337])
                    ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111338 111350]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111283 111351])
            ("compute_display_string_pos" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111397 111415])
                    ("" variable
                       (:pointer 1
                        :type ("bidi_string_data" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111426 111452])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111463 111479])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [111480 111485])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [111486 111492]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [111352 111493])
            ("compute_display_string_end" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111539 111549])
                    ("" variable
                       (:pointer 1
                        :type ("bidi_string_data" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111560 111586]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [111494 111587])
            ("produce_stretch_glyph" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111623 111635]))                  
                :type "void")
                nil [111588 111636])
            ("merge_glyphless_glyph_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111676 111688]))                  
                :type "int")
                nil [111637 111689])
            ("forget_escape_and_glyphless_faces" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [111737 111742]))                  
                :type "void")
                nil [111690 111743])
            ("get_font_ascent_descent" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111782 111796])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [111797 111803])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [111804 111810]))                  
                :type "void")
                nil [111745 111811])
            ("note_mouse_highlight" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [113931 113946])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [113947 113951])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [113952 113956]))                  
                :type "void")
                nil [113897 113957])
            ("x_clear_window_mouse_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [113997 114013]))                  
                :type "void")
                nil [113958 114014])
            ("cancel_mouse_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114046 114061]))                  
                :type "void")
                nil [114015 114062])
            ("clear_mouse_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114093 114108]))                  
                :type "bool")
                nil [114063 114109])
            ("cursor_in_mouse_face_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114146 114163]))                  
                :type "bool")
                nil [114110 114164])
            ("tty_draw_row_with_mouse_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114207 114223])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114224 114243])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114251 114255])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114256 114260])
                    ("" variable (:type ("draw_glyphs_face" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [114261 114283]))                  
                :type "void")
                nil [114165 114284])
            ("display_tty_menu_item" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [114320 114333])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114334 114338])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114339 114343])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114344 114348])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114349 114353])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [114354 114359]))                  
                :type "void")
                nil [114285 114360])
            ("TRY_WINDOW_CHECK_MARGINS" variable (:constant-flag t) nil [114405 114429])
            ("TRY_WINDOW_IGNORE_FONTS_CHANGE" variable (:constant-flag t) nil [114447 114477])
            ("lookup_fringe_bitmap" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114514 114526]))                  
                :type "int")
                nil [114488 114527])
            ("draw_fringe_bitmap" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114553 114569])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114570 114589])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [114590 114594]))                  
                :type "void")
                nil [114528 114595])
            ("draw_row_fringe_bitmaps" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114626 114642])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114643 114662]))                  
                :type "void")
                nil [114596 114663])
            ("draw_window_fringes" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114690 114706])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [114707 114712]))                  
                :type "bool")
                nil [114664 114713])
            ("update_window_fringes" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114742 114758])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [114759 114764]))                  
                :type "bool")
                nil [114714 114765])
            ("row_hash" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114981 115000]))                  
                :type "unsigned int")
                nil [114955 115001])
            ("buffer_flipping_blocked_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [115042 115047]))                  
                :type "bool")
                nil [115003 115048])
            ("get_tty_size" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [116717 116721])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [116722 116728])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [116729 116735]))                  
                :type "void")
                nil [116698 116736])
            ("request_sigio" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [116757 116762]))                  
                :type "void")
                nil [116737 116763])
            ("unrequest_sigio" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [116786 116791]))                  
                :type "void")
                nil [116764 116792])
            ("tabs_safe_p" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [116811 116815]))                  
                :type "bool")
                nil [116793 116816])
            ("init_baud_rate" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [116838 116842]))                  
                :type "void")
                nil [116817 116843])
            ("init_sigio" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [116861 116865]))                  
                :type "void")
                nil [116844 116866])
            ("update_face_from_frame_parameter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117076 117091])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117092 117104])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117144 117156]))                  
                :type "void")
                nil [117037 117157])
            ("tty_color_name" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117186 117201])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117202 117206]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117158 117207])
            ("clear_face_cache" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [117231 117236]))                  
                :type "void")
                nil [117208 117237])
            ("load_color" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117264 117279])
                    ("" variable
                       (:pointer 1
                        :type ("face" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117280 117294])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117295 117307])
                    ("" variable (:type ("lface_attribute_index" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [117334 117361]))                  
                :type "unsigned long")
                nil [117238 117362])
            ("choose_face_font" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117387 117402])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [117403 117417])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117418 117430])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [117455 117461]))                  
                :type "char")
                nil [117363 117462])
            ("lookup_named_face" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117582 117598])
                    ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117599 117614])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117615 117627])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [117628 117633]))                  
                :type "int")
                nil [117559 117634])
            ("lookup_basic_face" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117658 117674])
                    ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117675 117690])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117691 117695]))                  
                :type "int")
                nil [117635 117696])
            ("smaller_face" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117715 117730])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117731 117735])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117736 117740]))                  
                :type "int")
                nil [117697 117741])
            ("face_with_height" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117764 117779])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117780 117784])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117785 117789]))                  
                :type "int")
                nil [117742 117790])
            ("lookup_derived_face" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117816 117832])
                    ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117833 117848])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117874 117886])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [117887 117891])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [117892 117897]))                  
                :type "int")
                nil [117791 117898])
            ("init_frame_faces" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117922 117937]))                  
                :type "void")
                nil [117899 117938])
            ("free_frame_faces" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117962 117977]))                  
                :type "void")
                nil [117939 117978])
            ("recompute_basic_faces" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118007 118022]))                  
                :type "void")
                nil [117979 118023])
            ("face_at_buffer_position" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118053 118069])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118070 118080])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118081 118093])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118094 118104])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [118134 118139])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [118140 118144]))                  
                :type "int")
                nil [118024 118145])
            ("face_for_overlay_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118175 118191])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118192 118202])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118203 118215])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118216 118226])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [118256 118261])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118262 118274]))                  
                :type "int")
                nil [118146 118275])
            ("face_at_string_position" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118305 118321])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118322 118334])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118335 118345])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118346 118356])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118386 118398])
                    ("" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [118399 118412])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [118413 118418]))                  
                :type "int")
                nil [118276 118419])
            ("merge_faces" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118437 118453])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118454 118466])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [118467 118471])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [118472 118476]))                  
                :type "int")
                nil [118420 118477])
            ("compute_char_face" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [118501 118516])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [118517 118521])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118522 118534]))                  
                :type "int")
                nil [118478 118535])
            ("free_all_realized_faces" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118566 118578]))                  
                :type "void")
                nil [118536 118579])
            ("unspecified_fg" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [118580 118627])
            ("unspecified_bg" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [118580 118627])
            ("popup_activated" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [119902 119907]))                  
                :type "int")
                nil [119881 119908])
            ("buffer_posn_from_coords" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [119984 120000])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120045 120051])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120052 120058])
                    ("" variable
                       (:pointer 1
                        :type ("display_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120103 120124])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120169 120183])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120228 120234])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120235 120241])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120242 120248])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120249 120255]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [119940 120256])
            ("mode_line_string" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120294 120310])
                    ("" variable (:type ("window_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [120311 120328])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120366 120372])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120373 120379])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120380 120392])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120430 120444])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120482 120488])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120489 120495])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120496 120502])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120503 120509]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120257 120510])
            ("marginal_area_string" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120552 120568])
                    ("" variable (:type ("window_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [120569 120586])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120628 120634])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120635 120641])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120642 120654])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120696 120710])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120752 120758])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120759 120765])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120766 120772])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [120773 120779]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120511 120780])
            ("redraw_frame" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120807 120822]))                  
                :type "void")
                nil [120781 120823])
            ("update_frame" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120850 120865])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [120866 120871])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [120872 120877]))                  
                :type "bool")
                nil [120824 120878])
            ("update_frame_with_menu" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120915 120930])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [120931 120935])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [120936 120940]))                  
                :type "void")
                nil [120879 120941])
            ("bitch_at_user" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [120969 120974]))                  
                :type "void")
                nil [120942 120975])
            ("adjust_frame_glyphs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121009 121024]))                  
                :type "void")
                nil [120976 121025])
            ("free_glyphs" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121044 121059]))                  
                :type "void")
                nil [121026 121060])
            ("free_window_matrices" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121088 121104]))                  
                :type "void")
                nil [121061 121105])
            ("check_glyph_memory" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [121131 121136]))                  
                :type "void")
                nil [121106 121137])
            ("mirrored_line_dance" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121164 121186])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121187 121191])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121192 121196])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [121197 121203])
                    ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [121204 121211]))                  
                :type "void")
                nil [121138 121212])
            ("clear_glyph_matrix" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121238 121260]))                  
                :type "void")
                nil [121213 121261])
            ("clear_current_matrices" function
               (:prototype-flag t
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121291 121307]))                  
                :type "void")
                nil [121262 121308])
            ("clear_desired_matrices" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121338 121353]))                  
                :type "void")
                nil [121309 121354])
            ("shift_glyph_matrix" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121380 121396])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121397 121419])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121445 121449])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121450 121454])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121455 121459]))                  
                :type "void")
                nil [121355 121460])
            ("rotate_matrix" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121481 121503])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121504 121508])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121509 121513])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121514 121518]))                  
                :type "void")
                nil [121461 121519])
            ("increment_matrix_positions" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121553 121575])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121609 121613])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121614 121618])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121619 121629])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121630 121640]))                  
                :type "void")
                nil [121520 121641])
            ("blank_row" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121658 121674])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121675 121694])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121695 121699]))                  
                :type "void")
                nil [121642 121700])
            ("clear_glyph_matrix_rows" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121731 121753])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121754 121758])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [121759 121763]))                  
                :type "void")
                nil [121701 121764])
            ("clear_glyph_row" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121787 121806]))                  
                :type "void")
                nil [121765 121807])
            ("prepare_desired_row" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121834 121850])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121851 121870])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [121871 121876]))                  
                :type "void")
                nil [121808 121877])
            ("update_single_window" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121905 121921]))                  
                :type "void")
                nil [121878 121922])
            ("do_pending_window_change" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [121954 121959]))                  
                :type "void")
                nil [121923 121960])
            ("change_frame_size" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121985 122000])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122001 122005])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122006 122010])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [122011 122016])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [122017 122022])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [122023 122028])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [122029 122034]))                  
                :type "void")
                nil [121961 122035])
            ("init_display" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [122055 122060]))                  
                :type "void")
                nil [122036 122061])
            ("syms_of_display" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [122084 122089]))                  
                :type "void")
                nil [122062 122090])
            ("spec_glyph_lookup_face" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122127 122143])
                    ("" variable
                       (:pointer 1
                        :type ("GLYPH" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [122144 122152]))                  
                :type "void")
                nil [122091 122153])
            ("fill_up_frame_row_with_spaces" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122197 122216])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122217 122221]))                  
                :type "void")
                nil [122154 122222])
            ("ring_bell" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122278 122293]))                  
                :type "void")
                nil [122255 122294])
            ("update_begin" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122321 122336]))                  
                :type "void")
                nil [122295 122337])
            ("update_end" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122362 122377]))                  
                :type "void")
                nil [122338 122378])
            ("set_terminal_window" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122412 122427])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122428 122432]))                  
                :type "void")
                nil [122379 122433])
            ("cursor_to" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122457 122472])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122473 122477])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122478 122482]))                  
                :type "void")
                nil [122434 122483])
            ("raw_cursor_to" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122511 122526])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122527 122531])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122532 122536]))                  
                :type "void")
                nil [122484 122537])
            ("clear_to_end" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122564 122579]))                  
                :type "void")
                nil [122538 122580])
            ("clear_frame" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122606 122621]))                  
                :type "void")
                nil [122581 122622])
            ("clear_end_of_line" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122654 122669])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122670 122674]))                  
                :type "void")
                nil [122623 122675])
            ("write_glyphs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122702 122717])
                    ("" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122718 122733])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122734 122738]))                  
                :type "void")
                nil [122676 122739])
            ("insert_glyphs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122767 122782])
                    ("" variable
                       (:pointer 1
                        :type ("glyph" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122783 122798])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122799 122803]))                  
                :type "void")
                nil [122740 122804])
            ("delete_glyphs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122832 122847])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122848 122852]))                  
                :type "void")
                nil [122805 122853])
            ("ins_del_lines" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122881 122896])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122897 122901])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [122902 122906]))                  
                :type "void")
                nil [122854 122907])
            ("init_initial_terminal" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [122956 122961]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122909 122962])
            ("tty_turn_off_insert" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tty_display_info" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123023 123049]))                  
                :type "void")
                nil [122990 123050])
            ("string_cost" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123075 123088]))                  
                :type "int")
                nil [123051 123089])
            ("per_line_cost" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123116 123129]))                  
                :type "int")
                nil [123090 123130])
            ("calculate_costs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123160 123175]))                  
                :type "void")
                nil [123131 123176])
            ("produce_glyphs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123205 123217]))                  
                :type "void")
                nil [123177 123218])
            ("tty_capable_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tty_display_info" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123246 123272])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [123273 123282]))                  
                :type "bool")
                nil [123219 123283])
            ("set_tty_color_mode" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tty_display_info" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123316 123342])
                    ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123343 123358]))                  
                :type "void")
                nil [123284 123359])
            ("create_tty_output" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123391 123406]))                  
                :type "void")
                nil [123360 123407])
            ("init_tty" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123442 123455])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123456 123469])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [123470 123475]))                  
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [123408 123476])
            ("tty_append_glyph" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123507 123519]))                  
                :type "void")
                nil [123477 123520])
            ("" type
               (:members 
                  ( ("SCROLL_INFINITY" variable
                       (:constant-flag t
                        :default-value (123726 123733)
                        :type "int")
                        (reparse-symbol enumsubparts) [123708 123733]))                  
                :type "enum")
                nil [123701 123736])
            ("scrolling_max_lines_saved" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [123803 123807])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [123808 123812])
                    ("" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol arg-sub-list) [123813 123824])
                    ("" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol arg-sub-list) [123825 123836])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [123837 123843]))                  
                :type "int")
                nil [123765 123844])
            ("do_line_insertion_deletion_costs" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123891 123906])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123907 123920])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123967 123980])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123981 123994])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [124006 124019])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [124020 124033])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [124045 124058])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [124059 124063]))                  
                :type "void")
                nil [123845 124064])
            ("scrolling_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [124083 124098])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [124099 124103])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [124104 124108])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [124109 124113])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [124114 124120])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [124121 124127])
                    ("" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol arg-sub-list) [124128 124139])
                    ("" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol arg-sub-list) [124158 124169])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [124170 124174]))                  
                :type "void")
                nil [124065 124175]))          
      :file "dispextern.h"
      :pointmax 125542
      :fsize 125541
      :lastmodtime '(23443 29219 989873 50000)
      :unmatched-syntax '((symbol 125484 . 125501) (TYPEDEF 94830 . 94837) (symbol 93666 . 93672) (symbol 59640 . 59646) (symbol 59336 . 59342) (symbol 59038 . 59044) (symbol 58593 . 58599) (symbol 56645 . 56651) (semantic-list 53766 . 53787) (symbol 53758 . 53765) (semantic-list 53700 . 53715) (symbol 53692 . 53699) (symbol 8023 . 8029) (symbol 7897 . 7903) (symbol 7564 . 7570) (symbol 7473 . 7479) (symbol 1332 . 1338) (symbol 1288 . 1307))
      :lexical-table 
        '(("CLIP_TEXT_POS_FROM_MARKER" (spp-arg-list ("POS" "MARKER") 5449 . 5462) . ((semantic-list "(CHARPOS (POS) = clip_to_bounds			\\
   (BEGV, marker_position (MARKER), ZV),		\\
   BYTEPOS (POS) = clip_to_bounds			\\
   (BEGV_BYTE, marker_byte_position (MARKER), ZV_BYTE))" 5468 . 5641)))
          ("MATRIX_BOTTOM_TEXT_ROW" (spp-arg-list ("MATRIX" "W") 36590 . 36601) . ((semantic-list "((MATRIX)->rows					\\
      + (MATRIX)->nrows					\\
      - (window_wants_mode_line ((W)) ? 1 : 0))" 36610 . 36709)))
          ("MATRIX_ROW_ENDS_IN_OVERLAY_STRING_P" (spp-arg-list ("ROW") 39304 . 39309) . ((semantic-list "((ROW)->end.overlay_string_index >= 0)" 39317 . 39355)))
          ("MATRIX_ROW_STARTS_IN_MIDDLE_OF_CHAR_P" (spp-arg-list ("ROW") 39475 . 39480) . ((semantic-list "((ROW)->start.dpvec_index > 0			\\
      || (ROW)->starts_in_middle_of_char_p		\\
      || ((ROW)->start.overlay_string_index >= 0	\\
	  && (ROW)->start.string_pos.charpos > 0))" 39488 . 39662)))
          ("DESIRED_MODE_LINE_HEIGHT" (spp-arg-list ("W") 48236 . 48239) . ((symbol "MATRIX_MODE_LINE_HEIGHT" 48247 . 48270) (semantic-list "((W)->desired_matrix)" 48271 . 48292)))
          ("VCENTER_BASELINE_OFFSET" (spp-arg-list ("FONT" "F") 49539 . 49548) . ((semantic-list "(FONT_DESCENT (FONT)						\\
   + (FRAME_LINE_HEIGHT ((F)) - FONT_HEIGHT ((FONT))		\\
      + (FRAME_LINE_HEIGHT ((F)) > FONT_HEIGHT ((FONT)))) / 2	\\
   - (FONT_DESCENT (FRAME_FONT (F)) - FRAME_BASELINE_OFFSET (F)))" 49555 . 49768)))
          ("FACE_TTY_DEFAULT_FG_COLOR" . ((semantic-list "((unsigned long) -2)" 56386 . 56406)))
          ("IT_CHARPOS" (spp-arg-list ("IT") 90495 . 90499) . ((symbol "CHARPOS" 90501 . 90508) (semantic-list "((IT).current.pos)" 90509 . 90527)))
          ("TRY_WINDOW_IGNORE_FONTS_CHANGE" . ((semantic-list "(1 << 1)" 114478 . 114486)))
          ("No_Cursor" . ((semantic-list "(0)" 2160 . 2163)))
          ("GLYPH_SLICE_EQUAL_P" (spp-arg-list ("X" "Y") 16089 . 16095) . ((semantic-list "((X)->type == IMAGE_GLYPH					\\
   ? ((X)->slice.img.x == (Y)->slice.img.x			\\
      && (X)->slice.img.y == (Y)->slice.img.y			\\
      && (X)->slice.img.width == (Y)->slice.img.width		\\
      && (X)->slice.img.height == (Y)->slice.img.height)	\\
   : ((X)->type != COMPOSITE_GLYPH				\\
      || (X)->slice.cmp.from == (Y)->slice.cmp.from))" 16103 . 16441)))
          ("FACE_TTY_DEFAULT_BG_COLOR" . ((semantic-list "((unsigned long) -3)" 56517 . 56537)))
          ("IT_BYTEPOS" (spp-arg-list ("IT") 90546 . 90550) . ((symbol "BYTEPOS" 90552 . 90559) (semantic-list "((IT).current.pos)" 90560 . 90578)))
          ("TTY_CAP_UNDERLINE" . ((number "0x02" 108005 . 108009)))
          ("FRINGE_ID_BITS" . ((number "16" 2811 . 2813)))
          ("MATRIX_FIRST_TEXT_ROW" (spp-arg-list ("MATRIX") 34986 . 34994) . ((semantic-list "((MATRIX)->rows->mode_line_p ? (MATRIX)->rows + 1 : (MATRIX)->rows)" 35002 . 35069)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_P" (spp-arg-list ("W" "ROW") 37776 . 37784) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))				\\
   && (MR_PARTIALLY_VISIBLE_AT_TOP ((W), (ROW))		\\
       || MR_PARTIALLY_VISIBLE_AT_BOTTOM ((W), (ROW))))" 37790 . 37931)))
          ("CURRENT_MODE_LINE_FACE_ID_3" (spp-arg-list ("SELW" "MBW" "SCRW") 46437 . 46454) . ((semantic-list "((!mode_line_in_non_selected_windows			\\
       || (SELW) == XWINDOW (selected_window)			\\
       || (minibuf_level > 0					\\
           && !NILP (minibuf_selected_window)			\\
           && (MBW) == XWINDOW (minibuf_window)			\\
           && (SCRW) == XWINDOW (minibuf_selected_window)))	\\
      ? MODE_LINE_FACE_ID					\\
      : MODE_LINE_INACTIVE_FACE_ID)" 46463 . 46820)))
          ("TTY_CAP_DIM" . ((number "0x08" 108058 . 108062)))
          ("DEC_TEXT_POS" (spp-arg-list ("POS" "MULTIBYTE_P") 4950 . 4968) . 
              ((DO "do" 4977 . 4979) (semantic-list "{					\\
	 --(POS).charpos;			\\
         if (MULTIBYTE_P)			\\
	   DEC_POS ((POS).bytepos);		\\
	 else					\\
	   --(POS).bytepos;			\\
       }" 4994 . 5133) (WHILE "while" 5145 . 5150) (semantic-list "(false)" 5151 . 5158)))
          ("SET_GLYPH_FACE" (spp-arg-list ("glyph" "face") 7707 . 7720) . ((semantic-list "((glyph).face_id = (face))" 7721 . 7747)))
          ("GLYPH_EQUAL_P" (spp-arg-list ("X" "Y") 16510 . 16516) . ((semantic-list "((X)->type == (Y)->type					\\
      && (X)->u.val == (Y)->u.val				\\
      && GLYPH_SLICE_EQUAL_P (X, Y)				\\
      && (X)->face_id == (Y)->face_id				\\
      && (X)->padding_p == (Y)->padding_p			\\
      && (X)->left_box_line_p == (Y)->left_box_line_p		\\
      && (X)->right_box_line_p == (Y)->right_box_line_p		\\
      && (X)->voffset == (Y)->voffset				\\
      && (X)->pixel_width == (Y)->pixel_width)" 16528 . 16932)))
          ("GLYPH_CHAR_AND_FACE_EQUAL_P" (spp-arg-list ("X" "Y") 17043 . 17049) . ((semantic-list "((X)->u.ch == (Y)->u.ch			\\
   && (X)->face_id == (Y)->face_id		\\
   && (X)->padding_p == (Y)->padding_p)" 17054 . 17159)))
          ("MATRIX_ROW_USED" (spp-arg-list ("MATRIX" "ROW") 35414 . 35427) . ((semantic-list "(MATRIX_ROW ((MATRIX), (ROW))->used[TEXT_AREA])" 35435 . 35482)))
          ("MATRIX_ROW_END_CHARPOS" (spp-arg-list ("ROW") 36196 . 36201) . ((semantic-list "((ROW)->maxpos.charpos)" 36202 . 36225)))
          ("MATRIX_ROW_DISPLAYS_TEXT_P" (spp-arg-list ("ROW") 37292 . 37297) . ((semantic-list "((ROW)->displays_text_p)" 37298 . 37322)))
          ("MR_PARTIALLY_VISIBLE_AT_TOP" (spp-arg-list ("W" "ROW") 37461 . 37469) . ((semantic-list "((ROW)->y < WINDOW_HEADER_LINE_HEIGHT ((W)))" 37475 . 37519)))
          ("MR_PARTIALLY_VISIBLE_AT_BOTTOM" (spp-arg-list ("W" "ROW") 37559 . 37567) . ((semantic-list "(((ROW)->y + (ROW)->height - (ROW)->extra_line_spacing) \\
   > WINDOW_BOX_HEIGHT_NO_MODE_LINE ((W)))" 37573 . 37673)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_TOP_P" (spp-arg-list ("W" "ROW") 38049 . 38057) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))					\\
   && MR_PARTIALLY_VISIBLE_AT_TOP ((W), (ROW)))" 38063 . 38146)))
          ("IT_STACK_SIZE" . ((number "5" 71432 . 71433)))
          ("PRODUCE_GLYPHS" (spp-arg-list ("IT") 91366 . 91370) . 
              ((DO "do" 91404 . 91406) (semantic-list "{                                                  \\
    if ((IT)->glyph_row != NULL && (IT)->bidi_p)	\\
      (IT)->glyph_row->reversed_p = (IT)->bidi_it.paragraph_dir == R2L; \\
    if (FRAME_RIF ((IT)->f) != NULL)                    \\
      FRAME_RIF ((IT)->f)->produce_glyphs ((IT));       \\
    else                                                \\
      produce_glyphs ((IT));                            \\
    if ((IT)->glyph_row != NULL)                        \\
      inhibit_free_realized_faces = true;		\\
  }" 91407 . 91923) (WHILE "while" 91924 . 91929) (semantic-list "(false)" 91930 . 91937)))
          ("CHARPOS" (spp-arg-list ("POS") 4424 . 4429) . 
              ((semantic-list "(POS)" 4430 . 4435) (punctuation "." 4435 . 4436) (symbol "charpos" 4436 . 4443)))
          ("GLYPH_INVALID_P" (spp-arg-list ("GLYPH") 18239 . 18246) . ((semantic-list "(GLYPH_CHAR (GLYPH) < 0)" 18247 . 18271)))
          ("CHAR_GLYPH_PADDING_P" (spp-arg-list ("GLYPH") 18335 . 18342) . 
              ((semantic-list "(GLYPH)" 18343 . 18350) (punctuation "." 18350 . 18351) (symbol "padding_p" 18351 . 18360)))
          ("MATRIX_ROW_START_CHARPOS" (spp-arg-list ("ROW") 35806 . 35811) . ((semantic-list "((ROW)->minpos.charpos)" 35812 . 35835)))
          ("MATRIX_ROW_END_BYTEPOS" (spp-arg-list ("ROW") 36256 . 36261) . ((semantic-list "((ROW)->maxpos.bytepos)" 36262 . 36285)))
          ("MATRIX_ROW_ENABLED_P" (spp-arg-list ("MATRIX" "ROW") 37092 . 37105) . ((semantic-list "(MATRIX_ROW (MATRIX, ROW)->enabled_p)" 37113 . 37150)))
          ("MR_PARTIALLY_VISIBLE" (spp-arg-list ("ROW") 37374 . 37379) . ((semantic-list "((ROW)->height != (ROW)->visible_height)" 37384 . 37424)))
          ("MATRIX_HEADER_LINE_HEIGHT" (spp-arg-list ("MATRIX") 45734 . 45742) . ((semantic-list "((MATRIX) && (MATRIX)->rows		\\
      ? MATRIX_HEADER_LINE_ROW (MATRIX)->height	\\
      : 0)" 45750 . 45841)))
          ("CURRENT_MODE_LINE_HEIGHT" (spp-arg-list ("W") 47251 . 47254) . ((semantic-list "(W->mode_line_height >= 0						\\
   ? W->mode_line_height						\\
   : (W->mode_line_height						\\
      = (MATRIX_MODE_LINE_HEIGHT (W->current_matrix)			\\
	 ? MATRIX_MODE_LINE_HEIGHT (W->current_matrix)			\\
	 : estimate_mode_line_height					\\
	     (XFRAME (W->frame), CURRENT_MODE_LINE_FACE_ID (W)))))" 47263 . 47565)))
          ("TRY_WINDOW_CHECK_MARGINS" . ((semantic-list "(1 << 0)" 114430 . 114438)))
          ("FACE_ID_BITS" . ((number "20" 13268 . 13270)))
          ("BYTEPOS" (spp-arg-list ("POS") 4389 . 4394) . 
              ((semantic-list "(POS)" 4395 . 4400) (punctuation "." 4400 . 4401) (symbol "bytepos" 4401 . 4408)))
          ("SET_GLYPH_CHAR" (spp-arg-list ("glyph" "char") 7649 . 7662) . ((semantic-list "((glyph).ch = (char))" 7663 . 7684)))
          ("CHAR_GLYPH_SPACE_P" (spp-arg-list ("GLYPH") 15724 . 15731) . ((semantic-list "((GLYPH).u.ch == SPACEGLYPH && (GLYPH).face_id == DEFAULT_FACE_ID)" 15736 . 15802)))
          ("MATRIX_ROW_START_BYTEPOS" (spp-arg-list ("ROW") 35868 . 35873) . ((semantic-list "((ROW)->minpos.bytepos)" 35874 . 35897)))
          ("MATRIX_ROW_EXTENDS_FACE_P" (spp-arg-list ("ROW") 36858 . 36863) . ((semantic-list "((ROW)->fill_line_p)" 36864 . 36884)))
          ("MATRIX_ROW_CONTINUATION_LINE_P" (spp-arg-list ("ROW") 38777 . 38782) . ((semantic-list "((ROW)->continuation_lines_width > 0)" 38790 . 38827)))
          ("MATRIX_MODE_LINE_HEIGHT" (spp-arg-list ("MATRIX") 45406 . 45414) . ((semantic-list "((MATRIX) && (MATRIX)->rows		\\
      ? MATRIX_MODE_LINE_ROW (MATRIX)->height	\\
      : 0)" 45423 . 45512)))
          ("FONT_TOO_HIGH" (spp-arg-list ("ft") 50059 . 50063) . ((semantic-list "((ft)->pixel_size > 0 && (ft)->ascent + (ft)->descent > 3*(ft)->pixel_size)" 50073 . 50148)))
          ("TRACE" (spp-arg-list ("X") 3758 . 3761) . ((semantic-list "((void) 0)" 3762 . 3772)))
          ("SET_GLYPH" (spp-arg-list ("glyph" "char" "face") 7765 . 7784) . ((semantic-list "((glyph).ch = (char), (glyph).face_id = (face))" 7789 . 7836)))
          ("SET_CHAR_GLYPH" (spp-arg-list ("GLYPH" "CODE" "FACE_ID" "PADDING_P") 17316 . 17349) . 
              ((DO "do" 17357 . 17359) (semantic-list "{						\\
         (GLYPH).u.ch = (CODE);				\\
         (GLYPH).face_id = (FACE_ID);			\\
         (GLYPH).padding_p = (PADDING_P);		\\
       }" 17375 . 17516) (WHILE "while" 17529 . 17534) (semantic-list "(false)" 17535 . 17542)))
          ("SET_GLYPH_FROM_CHAR_GLYPH" (spp-arg-list ("G" "GLYPH") 18001 . 18011) . 
              ((DO "do" 18018 . 18020) (semantic-list "{								\\
      if ((GLYPH).u.ch < 256)					\\
	SET_GLYPH ((G), (GLYPH).u.ch, ((GLYPH).face_id));	\\
      else							\\
	SET_GLYPH ((G), -1, 0);					\\
    }" 18034 . 18189) (WHILE "while" 18201 . 18206) (semantic-list "(false)" 18207 . 18214)))
          ("CHECK_MATRIX" (spp-arg-list ("MATRIX") 23110 . 23118) . ((semantic-list "((void) 0)" 23119 . 23129)))
          ("MATRIX_ROW" (spp-arg-list ("MATRIX" "ROW") 34375 . 34388) . ((semantic-list "((MATRIX)->rows + (ROW))" 34391 . 34415)))
          ("MATRIX_HEADER_LINE_ROW" (spp-arg-list ("MATRIX") 34861 . 34869) . 
              ((semantic-list "(MATRIX)" 34870 . 34878) (punctuation "-" 34878 . 34879) (punctuation ">" 34879 . 34880) (symbol "rows" 34880 . 34884)))
          ("FACE_TTY_DEFAULT_COLOR" . ((semantic-list "((unsigned long) -1)" 56255 . 56275)))
          ("FACE_FROM_ID" (spp-arg-list ("F" "ID") 58156 . 58163) . ((semantic-list "(eassert (UNSIGNED_CMP (ID, <, FRAME_FACE_CACHE (F)->used)),	\\
   FRAME_FACE_CACHE (F)->faces_by_id[ID])" 58172 . 58276)))
          ("BIDI_AT_BASE_LEVEL" (spp-arg-list ("BIDI_IT") 66406 . 66415) . ((semantic-list "((BIDI_IT).resolved_level == (BIDI_IT).level_stack[0].level)" 66420 . 66480)))
          ("MAX_FRINGE_BITMAPS" . ((semantic-list "(1<<FRINGE_ID_BITS)" 67379 . 67398)))
          ("DEFAULT_TOOL_BAR_LABEL_SIZE" . ((number "14" 107272 . 107274)))
          ("TTY_CAP_BOLD" . ((number "0x04" 108032 . 108036)))
          ("FONT_TYPE_UNKNOWN" . ((number "0" 15669 . 15670)))
          ("MATRIX_ROW_LAST_VISIBLE_P" (spp-arg-list ("ROW" "IT") 38613 . 38622) . ((semantic-list "(MATRIX_ROW_BOTTOM_Y ((ROW)) >= (IT)->last_visible_y)" 38630 . 38683)))
          ("MATRIX_ROW_OVERLAPS_SUCC_P" (spp-arg-list ("ROW") 39879 . 39884) . ((semantic-list "((ROW)->phys_height - (ROW)->phys_ascent	\\
       > (ROW)->height - (ROW)->ascent)" 39894 . 39976)))
          ("TEXT_POS_EQUAL_P" (spp-arg-list ("POS1" "POS2") 5927 . 5939) . ((semantic-list "((POS1).charpos == (POS2).charpos		\\
      && (POS1).bytepos == (POS2).bytepos)" 5948 . 6027)))
          ("MATRIX_ROW_GLYPH_START" (spp-arg-list ("MATRIX" "ROW") 35251 . 35264) . ((semantic-list "(MATRIX_ROW ((MATRIX), (ROW))->glyphs[TEXT_AREA])" 35272 . 35321)))
          ("MATRIX_ROW_OVERLAPS_PRED_P" (spp-arg-list ("ROW") 39747 . 39752) . ((semantic-list "((ROW)->phys_ascent > (ROW)->ascent)" 39760 . 39796)))
          ("CURRENT_HEADER_LINE_HEIGHT" (spp-arg-list ("W") 47832 . 47835) . ((semantic-list "(W->header_line_height >= 0					\\
   ? W->header_line_height					\\
   : (W->header_line_height					\\
      = (MATRIX_HEADER_LINE_HEIGHT (W->current_matrix)		\\
	 ? MATRIX_HEADER_LINE_HEIGHT (W->current_matrix)	\\
	 : estimate_mode_line_height				\\
	     (XFRAME (W->frame), HEADER_LINE_FACE_ID))))" 47843 . 48138)))
          ("MAX_FACE_ID" . ((semantic-list "((1 << FACE_ID_BITS) - 1)" 57414 . 57439)))
          ("ITERATOR_AT_END_OF_LINE_P" (spp-arg-list ("IT") 91105 . 91109) . ((semantic-list "((IT)->what == IT_CHARACTER			\\
      && ((IT)->c == '\\n'				\\
	  || ((IT)->c == '\\r' && (IT)->selective)))" 91119 . 91226)))
          ("DEFAULT_TOOL_BAR_BUTTON_RELIEF" . ((number "1" 107403 . 107404)))
          ("DISPEXTERN_H_INCLUDED")
          ("SET_TEXT_POS_FROM_MARKER" (spp-arg-list ("POS" "MARKER") 5242 . 5255) . ((semantic-list "(CHARPOS (POS) = marker_position (MARKER),		\\
   BYTEPOS (POS) = marker_byte_position (MARKER))" 5261 . 5356)))
          ("SET_CHAR_GLYPH_FROM_GLYPH" (spp-arg-list ("GLYPH" "FROM") 17670 . 17683) . ((symbol "SET_CHAR_GLYPH" 17693 . 17707) (semantic-list "((GLYPH),					\\
	 	     GLYPH_CHAR ((FROM)),			\\
		     GLYPH_FACE ((FROM)),			\\
		     false)" 17708 . 17802)))
          ("MATRIX_ROW_VPOS" (spp-arg-list ("ROW" "MATRIX") 36365 . 36378) . ((semantic-list "((ROW) - (MATRIX)->rows)" 36379 . 36403)))
          ("MATRIX_ROW_ENDS_IN_MIDDLE_OF_CHAR_P" (spp-arg-list ("ROW") 39059 . 39064) . ((semantic-list "((ROW)->end.dpvec_index > 0			\\
      || (ROW)->end.overlay_string_index >= 0		\\
      || (ROW)->ends_in_middle_of_char_p)" 39072 . 39194)))
          ("BIDI_MAXDEPTH" . ((number "125" 60230 . 60233)))
          ("IT_STRING_CHARPOS" (spp-arg-list ("IT") 90604 . 90608) . ((symbol "CHARPOS" 90609 . 90616) (semantic-list "((IT).current.string_pos)" 90617 . 90642)))
          ("FRINGE_HEIGHT_BITS" . ((number "8" 2905 . 2906)))
          ("IF_DEBUG" (spp-arg-list ("X") 3282 . 3285) . ((semantic-list "((void) 0)" 3286 . 3296)))
          ("INC_TEXT_POS" (spp-arg-list ("POS" "MULTIBYTE_P") 4683 . 4701) . 
              ((DO "do" 4710 . 4712) (semantic-list "{					\\
	 ++(POS).charpos;			\\
         if (MULTIBYTE_P)			\\
	   INC_POS ((POS).bytepos);		\\
	 else					\\
	   ++(POS).bytepos;			\\
       }" 4727 . 4866) (WHILE "while" 4878 . 4883) (semantic-list "(false)" 4884 . 4891)))
          ("CURRENT_MODE_LINE_FACE_ID" (spp-arg-list ("W") 46922 . 46925) . ((semantic-list "(CURRENT_MODE_LINE_FACE_ID_3((W), XWINDOW (selected_window), (W)))" 46930 . 46996)))
          ("FACE_UNIBYTE_P" (spp-arg-list ("FACE") 56830 . 56836) . ((semantic-list "((FACE)->charset < 0)" 56837 . 56858)))
          ("IT_STRING_BYTEPOS" (spp-arg-list ("IT") 90668 . 90672) . ((symbol "BYTEPOS" 90673 . 90680) (semantic-list "((IT).current.string_pos)" 90681 . 90706)))
          ("ITERATOR_AT_END_P" (spp-arg-list ("IT") 90869 . 90873) . ((semantic-list "((IT)->what == IT_EOB)" 90874 . 90896)))
          ("DEFAULT_TOOL_BAR_IMAGE_HEIGHT" . ((number "24" 107505 . 107507)))
          ("NativeRectangle" . ((INT "int" 2220 . 2223)))
          ("SET_MATRIX_ROW_ENABLED_P" (spp-arg-list ("MATRIX" "ROW" "VALUE") 36987 . 37007) . ((semantic-list "(MATRIX_ROW (MATRIX, ROW)->enabled_p = (VALUE))" 37015 . 37062)))
          ("DESIRED_HEADER_LINE_HEIGHT" (spp-arg-list ("W") 48394 . 48397) . ((symbol "MATRIX_HEADER_LINE_HEIGHT" 48405 . 48430) (semantic-list "((W)->desired_matrix)" 48431 . 48452)))
          ("FACE_FROM_ID_OR_NULL" (spp-arg-list ("F" "ID") 58404 . 58411) . ((semantic-list "(UNSIGNED_CMP (ID, <, FRAME_FACE_CACHE (F)->used)	\\
   ? FRAME_FACE_CACHE (F)->faces_by_id[ID]		\\
   : NULL)" 58418 . 58526)))
          ("DEFAULT_TOOL_BAR_BUTTON_MARGIN" . ((number "4" 107362 . 107363)))
          ("TTY_CAP_ITALIC" . ((number "0x10" 108088 . 108092)))
          ("SET_TEXT_POS" (spp-arg-list ("POS" "CHARPOS" "BYTEPOS") 4541 . 4564) . ((semantic-list "((POS).charpos = (CHARPOS), (POS).bytepos = BYTEPOS)" 4572 . 4624)))
          ("SET_MARKER_FROM_TEXT_POS" (spp-arg-list ("MARKER" "POS") 5725 . 5738) . ((symbol "set_marker_both" 5746 . 5761) (semantic-list "((MARKER), Qnil, CHARPOS ((POS)), BYTEPOS ((POS)))" 5762 . 5812)))
          ("SET_GLYPH_FROM_GLYPH_CODE" (spp-arg-list ("glyph" "gc") 8180 . 8191) . 
              ((DO "do" 8199 . 8201) (semantic-list "{									\\
      if (CONSP (gc))							\\
	SET_GLYPH (glyph, XFIXNUM (XCAR (gc)), XFIXNUM (XCDR (gc)));		\\
      else								\\
	SET_GLYPH (glyph, (XFIXNUM (gc) & ((1 << CHARACTERBITS)-1)),	\\
		   (XFIXNUM (gc) >> CHARACTERBITS));			\\
    }" 8216 . 8455) (WHILE "while" 8468 . 8473) (semantic-list "(false)" 8474 . 8481)))
          ("MATRIX_MODE_LINE_ROW" (spp-arg-list ("MATRIX") 34589 . 34597) . ((semantic-list "((MATRIX)->rows + (MATRIX)->nrows - 1)" 34605 . 34643)))
          ("MATRIX_ROW_PARTIALLY_VISIBLE_AT_BOTTOM_P" (spp-arg-list ("W" "ROW") 38268 . 38276) . ((semantic-list "(MR_PARTIALLY_VISIBLE ((ROW))					\\
   && MR_PARTIALLY_VISIBLE_AT_BOTTOM ((W), (ROW)))" 38281 . 38367)))
          ("MATRIX_ROW_BOTTOM_Y" (spp-arg-list ("ROW") 38437 . 38442) . ((semantic-list "((ROW)->y + (ROW)->height)" 38443 . 38469)))
          ("TTY_CAP_INVERSE" . ((number "0x01" 107974 . 107978)))
          ("OVERLAY_STRING_CHUNK_SIZE" . ((number "16" 78204 . 78206)))
          )
)
    (semanticdb-table "semanticdb-table-1afb2c4"
      :major-mode c-mode
      :tags 
        '( ("EMACS_BLOCKINPUT_H" variable (:constant-flag t) nil [825 843])
            ("interrupt_input_blocked" variable
               (:typemodifiers ("extern" "volatile")
                :type "int")
                nil [1912 1956])
            ("block_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2014 2019]))                  
                :type "void")
                nil [1996 2052])
            ("unblock_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2081 2086]))                  
                :type "void")
                nil [2054 2087])
            ("totally_unblock_input" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2123 2128]))                  
                :type "void")
                nil [2088 2129])
            ("unblock_input_to" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [2160 2164]))                  
                :type "void")
                nil [2130 2165])
            ("input_blocked_p" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2225 2230]))                  
                :type "bool")
                nil [2203 2272]))          
      :file "blockinput.h"
      :pointmax 2325
      :fsize 2324
      :lastmodtime '(23443 29219 979879 583000)
      :unmatched-syntax '((symbol 2274 . 2291) (symbol 2196 . 2202) (symbol 1989 . 1995) (symbol 845 . 864))
      :lexical-table 
        '(("EMACS_BLOCKINPUT_H")
          )
)
    (semanticdb-table "semanticdb-table-1afb2e4"
      :major-mode c-mode
      :tags 
        '( ("XWIDGET_H_INCLUDED" variable (:constant-flag t) nil [794 812])
            ("lisp.h" include nil nil [814 831])
            ("glyph_matrix" type
               (:prototype t
                :type "struct")
                nil [833 853])
            ("glyph_string" type
               (:prototype t
                :type "struct")
                nil [854 874])
            ("xwidget" type
               (:prototype t
                :type "struct")
                nil [875 890])
            ("xwidget_view" type
               (:prototype t
                :type "struct")
                nil [891 911])
            ("window" type
               (:prototype t
                :type "struct")
                nil [912 926])
            ("XWIDGETP" variable (:constant-flag t) nil [2194 2202])
            ("XXWIDGET" variable (:constant-flag t) nil [2246 2254])
            ("CHECK_XWIDGET" variable (:constant-flag t) nil [2346 2359])
            ("XWIDGET_VIEW_P" variable (:constant-flag t) nil [2459 2473])
            ("XXWIDGET_VIEW" variable (:constant-flag t) nil [2522 2535])
            ("CHECK_XWIDGET_VIEW" variable (:constant-flag t) nil [2636 2654])
            ("XG_XWIDGET" variable (:constant-flag t) nil [2723 2733])
            ("XG_XWIDGET_VIEW" variable (:constant-flag t) nil [2758 2773])
            ("syms_of_xwidget" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3219 3224]))                  
                :type "void")
                nil [3197 3227])
            ("valid_xwidget_spec_p" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3262 3278]))                  
                :type "bool")
                nil [3235 3296])
            ("xwidget_view_delete_all_in_window" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3344 3361]))                  
                :type "void")
                nil [3304 3364])
            ("x_draw_xwidget_glyph_string" function
               (:arguments 
                  ( ("s" variable
                       (:pointer 1
                        :type ("glyph_string" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3406 3429]))                  
                :type "void")
                nil [3372 3446])
            ("lookup_xwidget" function
               (:pointer 1
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3486 3502]))                  
                :type ("xwidget" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [3454 3519])
            ("xwidget_end_redisplay" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3555 3572])
                    ("m" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3573 3596]))                  
                :type "void")
                nil [3527 3599])
            ("kill_buffer_xwidgets" function
               (:arguments 
                  ( ("buf" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3634 3650]))                  
                :type "void")
                nil [3607 3653]))          
      :file "xwidget.h"
      :pointmax 3712
      :fsize 3711
      :lastmodtime '(23443 29226 323249 937000)
      :unmatched-syntax '((symbol 3654 . 3671) (symbol 3600 . 3606) (symbol 3520 . 3526) (symbol 3447 . 3453) (symbol 3365 . 3371) (symbol 3297 . 3303) (symbol 3228 . 3234) (symbol 3190 . 3196) (symbol 3170 . 3189))
      :lexical-table 
        '(("XWIDGETP" (spp-arg-list ("x") 2202 . 2205) . ((symbol "PSEUDOVECTORP" 2206 . 2219) (semantic-list "(x, PVEC_XWIDGET)" 2220 . 2237)))
          ("XXWIDGET_VIEW" (spp-arg-list ("a") 2535 . 2538) . ((semantic-list "(eassert (XWIDGET_VIEW_P (a)), \\
			  XUNTAG (a, Lisp_Vectorlike, struct xwidget_view))" 2539 . 2626)))
          ("XWIDGET_VIEW_P" (spp-arg-list ("x") 2473 . 2476) . ((symbol "PSEUDOVECTORP" 2477 . 2490) (semantic-list "(x, PVEC_XWIDGET_VIEW)" 2491 . 2513)))
          ("XG_XWIDGET" . ((string "\"emacs_xwidget\"" 2734 . 2749)))
          ("CHECK_XWIDGET" (spp-arg-list ("x") 2359 . 2362) . ((symbol "CHECK_TYPE" 2367 . 2377) (semantic-list "(XWIDGETP (x), Qxwidgetp, x)" 2378 . 2406)))
          ("XWIDGET_H_INCLUDED")
          ("XG_XWIDGET_VIEW" . ((string "\"emacs_xwidget_view\"" 2774 . 2794)))
          ("XXWIDGET" (spp-arg-list ("a") 2254 . 2257) . ((semantic-list "(eassert (XWIDGETP (a)), \\
		     XUNTAG (a, Lisp_Vectorlike, struct xwidget))" 2258 . 2336)))
          ("CHECK_XWIDGET_VIEW" (spp-arg-list ("x") 2654 . 2657) . ((symbol "CHECK_TYPE" 2662 . 2672) (semantic-list "(XWIDGET_VIEW_P (x), Qxwidget_view_p, x)" 2673 . 2713)))
          )
)
    (semanticdb-table "semanticdb-table-1afb304"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [15663 15682])
            ("stdio.h" include (:system-flag t) nil [15683 15701])
            ("stdlib.h" include (:system-flag t) nil [15702 15721])
            ("limits.h" include (:system-flag t) nil [15722 15741])
            ("math.h" include (:system-flag t) nil [15742 15759])
            ("lisp.h" include nil nil [15761 15778])
            ("atimer.h" include nil nil [15779 15798])
            ("composite.h" include nil nil [15799 15821])
            ("keyboard.h" include nil nil [15822 15843])
            ("systime.h" include nil nil [15844 15864])
            ("frame.h" include nil nil [15865 15883])
            ("window.h" include nil nil [15884 15903])
            ("termchar.h" include nil nil [15904 15925])
            ("dispextern.h" include nil nil [15926 15949])
            ("character.h" include nil nil [15950 15972])
            ("buffer.h" include nil nil [15973 15992])
            ("charset.h" include nil nil [15993 16013])
            ("indent.h" include nil nil [16014 16033])
            ("commands.h" include nil nil [16034 16055])
            ("keymap.h" include nil nil [16056 16075])
            ("disptab.h" include nil nil [16076 16096])
            ("termhooks.h" include nil nil [16097 16119])
            ("termopts.h" include nil nil [16120 16141])
            ("intervals.h" include nil nil [16142 16164])
            ("coding.h" include nil nil [16165 16184])
            ("region-cache.h" include nil nil [16185 16210])
            ("font.h" include nil nil [16211 16228])
            ("fontset.h" include nil nil [16229 16249])
            ("blockinput.h" include nil nil [16250 16273])
            ("xwidget.h" include nil nil [16274 16294])
            ("FRAME_X_OUTPUT" variable (:constant-flag t) nil [16406 16420])
            ("DISP_INFINITY" variable (:constant-flag t) nil [16461 16474])
            ("list_of_error" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16516 16549])
            ("IT_OVERFLOW_NEWLINE_INTO_FRINGE" variable (:constant-flag t) nil [17078 17109])
            ("IT_DISPLAYING_WHITESPACE" variable (:constant-flag t) nil [17352 17376])
            ("noninteractive_need_newline" variable (:type "bool") nil [17963 17996])
            ("message_log_need_newline" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [18067 18104])
            ("message_dolog_marker1" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [18245 18286])
            ("message_dolog_marker2" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [18287 18328])
            ("message_dolog_marker3" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [18329 18370])
            ("this_line_start_pos" variable
               (:typemodifiers ("static")
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18630 18673])
            ("this_line_end_pos" variable
               (:typemodifiers ("static")
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18774 18815])
            ("this_line_vpos" variable
               (:typemodifiers ("static")
                :type "int")
                nil [18877 18903])
            ("this_line_y" variable
               (:typemodifiers ("static")
                :type "int")
                nil [18904 18927])
            ("this_line_pixel_height" variable
               (:typemodifiers ("static")
                :type "int")
                nil [18928 18962])
            ("this_line_start_x" variable
               (:typemodifiers ("static")
                :type "int")
                nil [19086 19115])
            ("this_line_min_pos" variable
               (:typemodifiers ("static")
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [19302 19343])
            ("this_line_buffer" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [19406 19445])
            ("overlay_arrow_seen" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [19515 19546])
            ("default_invis_vector" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [19604 19647])
            ("echo_area_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [19830 19859])
            ("Vmessage_stack" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [19969 20003])
            ("message_enable_multibyte" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [20103 20140])
            ("windows_or_buffers_changed" variable (:type "int") nil [22053 22084])
            ("update_mode_lines" variable (:type "int") nil [23201 23223])
            ("line_number_displayed" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [23312 23346])
            ("Vmessages_buffer_name" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [23401 23442])
            ("echo_area_buffer" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [23577 23609])
            ("echo_buffer" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [23665 23699])
            ("Vwith_echo_area_save_vector" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [23768 23815])
            ("display_last_displayed_message_p" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [23944 23989])
            ("message_buf_print" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [24076 24106])
            ("message_cleared_p" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [24206 24236])
            ("MAX_SCRATCH_GLYPHS" variable (:constant-flag t) nil [24370 24388])
            ("scratch_glyph_row" variable
               (:typemodifiers ("static")
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24393 24435])
            ("scratch_glyphs" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24436 24491])
            ("last_height" variable
               (:typemodifiers ("static")
                :type "int")
                nil [24561 24584])
            ("help_echo_showing_p" variable (:type "bool") nil [24640 24665])
            ("TEXT_PROP_DISTANCE_LIMIT" variable (:constant-flag t) nil [25006 25030])
            ("SAVE_IT" variable (:constant-flag t) nil [25496 25503])
            ("RESTORE_IT" variable (:constant-flag t) nil [25698 25708])
            ("" type
               (:members 
                  ( ("REDISPLAY_SOME" variable
                       (:constant-flag t
                        :default-value (25982 25983)
                        :type "int")
                        (reparse-symbol enumsubparts) [25965 25983]))                  
                :type "enum")
                nil [25958 25985])
            ("redisplay_other_windows" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [26042 26047]))                  
                :type "void")
                nil [26012 26135])
            ("wset_redisplay" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26158 26175]))                  
                :type "void")
                nil [26137 26364])
            ("fset_redisplay" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26387 26403]))                  
                :type "void")
                nil [26366 26460])
            ("bset_redisplay" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26483 26500]))                  
                :type "void")
                nil [26462 26940])
            ("bset_update_mode_line" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26970 26987]))                  
                :type "void")
                nil [26942 27086])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_buffer_redisplay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27119 27141])
                    ("" variable (:type ("Sset_buffer_redisplay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27149 27171])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27188 27192]))                  
                :type "int")
                nil [27088 27372])
            ("TRACE_MOVE" variable (:constant-flag t) nil [27829 27839])
            ("displayed_buffer" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [27924 27963])
            ("prop_handled" type
               (:members 
                  ( ("HANDLED_NORMALLY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28051 28068])
                    ("HANDLED_RECOMPUTE_PROPS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28071 28095])
                    ("HANDLED_OVERLAY_STRING_CONSUMED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28098 28130])
                    ("HANDLED_RETURN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28133 28149]))                  
                :type "enum")
                nil [28029 28150])
            ("props" type
               (:members 
                  ( ("name" variable (:type "short") (reparse-symbol classsubparts) [28301 28312])
                    ("idx" variable (:type ("prop_idx" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [28358 28376])
                    ("handler" function
                       (:prototype-flag t
                        :function-pointer t
                        :arguments 
                          ( ("it" variable
                               (:pointer 1
                                :type ("it" type
                                     (:prototype t
                                      :type "struct")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [28553 28567]))                          
                        :type ("prop_handled" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [28528 28568]))                  
                :type "struct")
                nil [28229 28571])
            ("handle_face_prop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28616 28628]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28573 28629])
            ("handle_invisible_prop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28678 28690]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28630 28691])
            ("handle_display_prop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28738 28750]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28692 28751])
            ("handle_composition_prop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28802 28814]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28752 28815])
            ("handle_overlay_change" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28864 28876]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28816 28877])
            ("handle_fontified_prop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28926 28938]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [28878 28939])
            ("it_props" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
  {SYMBOL_INDEX (Qfontified),	FONTIFIED_PROP_IDX,	handle_fontified_prop},
  /* Handle `face' before `display' because some sub-properties of
     `display' need to know the face.  */
  {SYMBOL_INDEX (Qface),	FACE_PROP_IDX,		handle_face_prop},
  {SYMBOL_INDEX (Qdisplay),	DISPLAY_PROP_IDX,	handle_display_prop},
  {SYMBOL_INDEX (Qinvisible),	INVISIBLE_PROP_IDX,	handle_invisible_prop},
  {SYMBOL_INDEX (Qcomposition),	COMPOSITION_PROP_IDX, handle_composition_prop},
  {0,				0,			NULL}
}"
                :type ("props" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [28982 29504])
            ("COERCE_MARKER" variable (:constant-flag t) nil [29641 29654])
            ("move_it_result" type
               (:members 
                  ( ("MOVE_UNDEFINED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [29835 29850])
                    ("MOVE_POS_MATCH_OR_ZV" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [29914 29935])
                    ("MOVE_X_REACHED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [29994 30009])
                    ("MOVE_LINE_CONTINUED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [30097 30117])
                    ("MOVE_LINE_TRUNCATED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [30216 30236])
                    ("MOVE_NEWLINE_OR_CR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [30289 30309]))                  
                :type "enum")
                nil [29774 30310])
            ("CLEAR_FACE_CACHE_COUNT" variable (:constant-flag t) nil [30539 30561])
            ("clear_face_cache_count" variable
               (:typemodifiers ("static")
                :type "int")
                nil [30566 30600])
            ("redisplaying_p" variable (:type "bool") nil [30886 30906])
            ("help_echo_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [31025 31054])
            ("help_echo_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [31055 31084])
            ("help_echo_object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [31085 31114])
            ("help_echo_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [31115 31139])
            ("previous_help_echo_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [31187 31225])
            ("DEFAULT_HOURGLASS_DELAY" variable (:constant-flag t) nil [31687 31710])
            ("setup_for_ellipsis" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [31922 31934])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [31935 31939]))                  
                :type "void")
                nil [31890 31940])
            ("set_iterator_to_next" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [31975 31987])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [31988 31993]))                  
                :type "void")
                nil [31941 31994])
            ("mark_window_display_accurate_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32039 32055])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [32056 32061]))                  
                :type "void")
                nil [31995 32062])
            ("row_for_charpos_p" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32094 32113])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32114 32124]))                  
                :type "bool")
                nil [32063 32125])
            ("cursor_row_p" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32152 32171]))                  
                :type "bool")
                nil [32126 32172])
            ("redisplay_mode_lines" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32206 32218])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [32219 32224]))                  
                :type "int")
                nil [32173 32225])
            ("handle_line_prefix" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32259 32271]))                  
                :type "void")
                nil [32227 32272])
            ("handle_stop_backwards" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32309 32321])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32322 32332]))                  
                :type "void")
                nil [32274 32333])
            ("unwind_with_echo_area_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32376 32388]))                  
                :type "void")
                nil [32334 32389])
            ("with_echo_area_buffer_unwind_data" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32444 32460]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32390 32461])
            ("current_message_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32493 32503])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32504 32516]))                  
                :type "bool")
                nil [32462 32517])
            ("truncate_message_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32550 32560])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32561 32573]))                  
                :type "bool")
                nil [32518 32574])
            ("set_message" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32600 32612]))                  
                :type "void")
                nil [32575 32613])
            ("set_message_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32641 32651])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32652 32664]))                  
                :type "bool")
                nil [32614 32665])
            ("display_echo_area_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32699 32709])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32710 32722]))                  
                :type "bool")
                nil [32666 32723])
            ("resize_mini_window_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32758 32768])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32769 32781]))                  
                :type "bool")
                nil [32724 32782])
            ("unwind_redisplay" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [32813 32818]))                  
                :type "void")
                nil [32783 32819])
            ("extend_face_to_end_of_line" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32860 32872]))                  
                :type "void")
                nil [32820 32873])
            ("message_log_check_duplicate" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32919 32929])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32930 32940]))                  
                :type ("intmax_t" type (:type "class") nil nil))
                nil [32874 32941])
            ("push_it" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32963 32975])
                    ("" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32976 32994]))                  
                :type "void")
                nil [32942 32995])
            ("iterate_out_of_display_property" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33041 33053]))                  
                :type "void")
                nil [32996 33054])
            ("pop_it" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33075 33087]))                  
                :type "void")
                nil [33055 33088])
            ("redisplay_internal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [33121 33126]))                  
                :type "void")
                nil [33089 33127])
            ("echo_area_display" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33159 33164]))                  
                :type "void")
                nil [33128 33165])
            ("block_buffer_flips" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [33198 33203]))                  
                :type "void")
                nil [33166 33204])
            ("unblock_buffer_flips" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [33239 33244]))                  
                :type "void")
                nil [33205 33245])
            ("redisplay_windows" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33277 33289]))                  
                :type "void")
                nil [33246 33290])
            ("redisplay_window" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33321 33333])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33334 33339]))                  
                :type "void")
                nil [33291 33340])
            ("redisplay_window_error" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33384 33396]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33341 33397])
            ("redisplay_window_0" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33437 33449]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33398 33450])
            ("redisplay_window_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33490 33502]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33451 33503])
            ("set_cursor_from_row" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33537 33553])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33554 33573])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33579 33601])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33602 33612])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33613 33623])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [33629 33633])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [33634 33638]))                  
                :type "bool")
                nil [33504 33639])
            ("cursor_row_fully_visible_p" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33680 33696])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33697 33702])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33703 33708]))                  
                :type "bool")
                nil [33640 33709])
            ("update_menu_bar" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33739 33754])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33755 33760])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [33761 33766]))                  
                :type "bool")
                nil [33710 33767])
            ("try_window_reusing_current_matrix" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33815 33831]))                  
                :type "bool")
                nil [33768 33832])
            ("try_window_id" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33859 33875]))                  
                :type "int")
                nil [33833 33876])
            ("maybe_produce_line_number" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33916 33928]))                  
                :type "void")
                nil [33877 33929])
            ("should_produce_line_number" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33970 33982]))                  
                :type "bool")
                nil [33930 33983])
            ("display_line" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34010 34022])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34023 34027]))                  
                :type "bool")
                nil [33984 34028])
            ("display_mode_lines" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34060 34076]))                  
                :type "int")
                nil [34029 34077])
            ("display_mode_line" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34108 34124])
                    ("" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [34125 34138])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34139 34151]))                  
                :type "int")
                nil [34078 34152])
            ("display_mode_element" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34186 34198])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34199 34203])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34204 34208])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34209 34213])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34214 34226])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34232 34244])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [34245 34250]))                  
                :type "int")
                nil [34153 34251])
            ("store_mode_line_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [34287 34300])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34301 34313])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [34314 34319])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34320 34324])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34325 34329])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34337 34349]))                  
                :type "int")
                nil [34252 34350])
            ("decode_mode_spec" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :constant-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34388 34404])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34405 34409])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34410 34414])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34415 34429]))                  
                :type "char")
                nil [34351 34430])
            ("display_menu_bar" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34461 34477]))                  
                :type "void")
                nil [34431 34478])
            ("display_count_lines" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34517 34527])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34528 34538])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34539 34549])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34560 34572]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [34479 34573])
            ("pint2str" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type "char")
                        (reparse-symbol arg-sub-list) [34596 34612])
                    ("" variable
                       (:typemodifiers ("register")
                        :type "int")
                        (reparse-symbol arg-sub-list) [34613 34626])
                    ("" variable
                       (:typemodifiers ("register")
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34627 34646]))                  
                :type "void")
                nil [34574 34647])
            ("display_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [34676 34689])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34690 34702])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34703 34715])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34743 34753])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34754 34764])
                    ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34765 34777])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34778 34782])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34783 34787])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34788 34792])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [34793 34797]))                  
                :type "int")
                nil [34649 34798])
            ("compute_line_metrics" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34833 34845]))                  
                :type "void")
                nil [34799 34846])
            ("run_redisplay_end_trigger_hook" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34891 34903]))                  
                :type "void")
                nil [34847 34904])
            ("get_overlay_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34938 34950])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34951 34961]))                  
                :type "bool")
                nil [34905 34962])
            ("get_overlay_strings_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34998 35010])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35011 35021])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [35022 35027]))                  
                :type "bool")
                nil [34963 35028])
            ("next_overlay_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35062 35074]))                  
                :type "void")
                nil [35029 35075])
            ("reseat" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35096 35108])
                    ("" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [35109 35125])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [35126 35131]))                  
                :type "void")
                nil [35076 35132])
            ("reseat_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35155 35167])
                    ("" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [35168 35184])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [35185 35190]))                  
                :type "void")
                nil [35133 35191])
            ("next_element_from_display_vector" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35238 35250]))                  
                :type "bool")
                nil [35192 35251])
            ("next_element_from_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35290 35302]))                  
                :type "bool")
                nil [35252 35303])
            ("next_element_from_c_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35344 35356]))                  
                :type "bool")
                nil [35304 35357])
            ("next_element_from_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35396 35408]))                  
                :type "bool")
                nil [35358 35409])
            ("next_element_from_composition" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35453 35465]))                  
                :type "bool")
                nil [35410 35466])
            ("next_element_from_image" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35504 35516]))                  
                :type "bool")
                nil [35467 35517])
            ("next_element_from_stretch" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35557 35569]))                  
                :type "bool")
                nil [35518 35570])
            ("next_element_from_xwidget" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35610 35622]))                  
                :type "bool")
                nil [35571 35623])
            ("load_overlay_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35658 35670])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35671 35681]))                  
                :type "void")
                nil [35624 35682])
            ("get_next_display_element" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35721 35733]))                  
                :type "bool")
                nil [35683 35734])
            ("move_it_in_display_line_to" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35797 35809])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35810 35820])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [35821 35825])
                    ("" variable (:type ("move_operation_enum" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [35833 35858]))                  
                :type ("move_it_result" type (:type "enum") nil nil))
                nil [35735 35859])
            ("get_visually_first_element" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35900 35912]))                  
                :type "void")
                nil [35860 35913])
            ("compute_stop_pos" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35944 35956]))                  
                :type "void")
                nil [35914 35957])
            ("face_before_or_after_it_pos" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [35998 36010])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36011 36016]))                  
                :type "int")
                nil [35958 36017])
            ("next_overlay_change" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36056 36066]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [36018 36067])
            ("handle_display_spec" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36100 36112])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36113 36125])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36126 36138])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36143 36155])
                    ("" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36156 36174])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36175 36185])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36186 36191]))                  
                :type "int")
                nil [36068 36192])
            ("handle_single_display_spec" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36232 36244])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36245 36257])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36258 36270])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36282 36294])
                    ("" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36295 36313])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36325 36335])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [36336 36340])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36341 36346])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [36347 36352]))                  
                :type "int")
                nil [36193 36353])
            ("underlying_face_id" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36385 36397]))                  
                :type "int")
                nil [36354 36398])
            ("face_before_it_pos" variable (:constant-flag t) nil [36408 36426])
            ("face_after_it_pos" variable (:constant-flag t) nil [36478 36495])
            ("produce_special_glyphs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37334 37346])
                    ("" variable (:type ("display_element_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [37347 37373]))                  
                :type "void")
                nil [37298 37374])
            ("show_mouse_face" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37404 37419])
                    ("" variable (:type ("draw_glyphs_face" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [37420 37442]))                  
                :type "void")
                nil [37375 37443])
            ("coords_in_mouse_face_p" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37480 37496])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [37497 37501])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [37502 37506]))                  
                :type "bool")
                nil [37444 37507])
            ("window_text_bottom_y" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37969 37986]))                  
                :type "int")
                nil [37943 38221])
            ("window_box_width" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38419 38436])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [38437 38462]))                  
                :type "int")
                nil [38397 39025])
            ("window_box_height" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39158 39175]))                  
                :type "int")
                nil [39135 40528])
            ("window_box_left_offset" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40757 40774])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [40775 40800]))                  
                :type "int")
                nil [40729 41480])
            ("window_box_right_offset" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [41720 41737])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [41738 41763]))                  
                :type "int")
                nil [41684 41926])
            ("window_box_left" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [42147 42164])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [42165 42190]))                  
                :type "int")
                nil [42126 42401])
            ("window_box_right" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [42626 42643])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [42644 42669]))                  
                :type "int")
                nil [42604 42738])
            ("window_box" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [43161 43178])
                    ("area" variable (:type ("glyph_row_area" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [43179 43204])
                    ("box_x" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [43205 43216])
                    ("box_y" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [43222 43233])
                    ("box_width" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [43234 43249])
                    ("box_height" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [43250 43266]))                  
                :type "void")
                nil [43144 43590])
            ("line_bottom_y" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [44584 44598]))                  
                :type "int")
                nil [44565 45278])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fline_pixel_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45308 45327])
                    ("" variable (:type ("Sline_pixel_height" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45335 45354])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45371 45375]))                  
                :type "int")
                nil [45280 45506])
            ("default_line_pixel_height" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [47035 47052]))                  
                :type "int")
                nil [47004 47675])
            ("string_from_display_spec" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47848 47865]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [47803 48143])
            ("window_hscroll_limited" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [48367 48384])
                    ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [48385 48401]))                  
                :type "int")
                nil [48332 48709])
            ("pos_visible_p" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [49072 49089])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49090 49108])
                    ("x" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49109 49116])
                    ("y" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49117 49124])
                    ("rtop" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49133 49143])
                    ("rbot" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49144 49154])
                    ("rowh" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49155 49165])
                    ("vpos" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [49166 49176]))                  
                :type "bool")
                nil [49052 63899])
            ("string_char_and_length" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [64192 64217])
                    ("len" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [64218 64227]))                  
                :type "int")
                nil [64157 64494])
            ("string_pos_nchars_ahead" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [64684 64704])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64705 64724])
                    ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64725 64742]))                  
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [64636 65137])
            ("string_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65290 65308])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65309 65328]))                  
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65255 65495])
            ("c_string_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65706 65724])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [65725 65739])
                    ("multibyte_p" variable (:type "bool") (reparse-symbol arg-sub-list) [65740 65757]))                  
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [65669 66130])
            ("number_of_chars" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [66278 66292])
                    ("multibyte_p" variable (:type "bool") (reparse-symbol arg-sub-list) [66293 66310]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [66244 66637])
            ("compute_string_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("newpos" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [66841 66865])
                    ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [66866 66886])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66887 66906]))                  
                :type "void")
                nil [66809 67171])
            ("estimate_mode_line_height" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [67354 67370])
                    ("face_id" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [67371 67392]))                  
                :type "int")
                nil [67323 67951])
            ("pixel_to_glyph_coords" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [68213 68229])
                    ("pix_x" variable (:type "int") (reparse-symbol arg-sub-list) [68230 68240])
                    ("pix_y" variable (:type "int") (reparse-symbol arg-sub-list) [68241 68251])
                    ("x" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [68252 68259])
                    ("y" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [68260 68267])
                    ("bounds" variable
                       (:pointer 1
                        :type ("NativeRectangle" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68277 68301])
                    ("noclip" variable (:type "bool") (reparse-symbol arg-sub-list) [68302 68314]))                  
                :type "void")
                nil [68185 69263])
            ("x_y_to_hpos_vpos" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [69725 69742])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [69743 69749])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [69750 69756])
                    ("hpos" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [69757 69767])
                    ("vpos" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [69768 69778])
                    ("dx" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [69783 69791])
                    ("dy" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [69792 69800])
                    ("area" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [69801 69811]))                  
                :type ("glyph" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [69685 71237])
            ("frame_to_window_pixel_xy" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [71387 71404])
                    ("x" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [71405 71412])
                    ("y" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [71413 71420]))                  
                :type "void")
                nil [71349 71809])
            ("adjust_window_ends" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [85360 85377])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [85378 85400])
                    ("current" variable (:type "bool") (reparse-symbol arg-sub-list) [85401 85414]))                  
                :type "void")
                nil [85328 85653])
            ("hscrolling_current_line_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [85694 85711]))                  
                :type "bool")
                nil [85655 85835])
            ("safe_eval_handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86098 86114])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86115 86131])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86132 86150]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86060 86259])
            ("safe__call" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("inhibit_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [86467 86485])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86486 86502])
                    ("func" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86503 86520])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86521 86532]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86436 87231])
            ("safe_call" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87256 87272])
                    ("func" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87273 87290])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [87291 87295]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87233 87439])
            ("safe_call1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87567 87582])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87583 87599]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87543 87636])
            ("safe__call1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("inhibit_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [87670 87688])
                    ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87689 87704])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [87705 87709]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87638 87852])
            ("safe_eval" function
               (:arguments 
                  ( ("sexpr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87877 87895]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87854 87943])
            ("safe__eval" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("inhibit_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [87976 87994])
                    ("sexpr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87995 88013]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87945 88068])
            ("safe_call2" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88207 88222])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88223 88240])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88241 88258]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [88183 88302])
            ("CHECK_IT" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [88624 88638]))                  
                :type "void")
                nil [88602 89138])
            ("CHECK_WINDOW_END" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [89301 89318]))                  
                :type "void")
                nil [89271 89654])
            ("init_iterator" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [90746 90760])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [90761 90778])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90787 90805])
                    ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90806 90824])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [90833 90855])
                    ("base_face_id" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [90856 90882]))                  
                :type "void")
                nil [90726 101689])
            ("start_display" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [101785 101799])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [101800 101817])
                    ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [101818 101838]))                  
                :type "void")
                nil [101765 104787])
            ("in_ellipses_for_invisible_text_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable
                       (:pointer 1
                        :type ("display_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [104977 105001])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [105002 105019]))                  
                :type "bool")
                nil [104931 105847])
            ("init_from_display_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106158 106172])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106173 106190])
                    ("pos" variable
                       (:pointer 1
                        :type ("display_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106191 106215]))                  
                :type "bool")
                nil [106123 111470])
            ("init_to_row_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111601 111615])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111616 111633])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111634 111656]))                  
                :type "void")
                nil [111570 111813])
            ("init_to_row_end" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112068 112082])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112083 112100])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112101 112123]))                  
                :type "bool")
                nil [112039 112387])
            ("handle_stop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112744 112758]))                  
                :type "void")
                nil [112719 117617])
            ("compute_stop_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117763 117777]))                  
                :type "void")
                nil [117733 120691])
            ("next_overlay_change" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120936 120950]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [120898 121494])
            ("MAX_DISP_SCAN" variable (:constant-flag t) nil [121686 121699])
            ("compute_display_string_pos" function
               (:arguments 
                  ( ("position" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122518 122544])
                    ("string" variable
                       (:pointer 1
                        :type ("bidi_string_data" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122552 122584])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122592 122609])
                    ("frame_window_p" variable (:type "bool") (reparse-symbol arg-sub-list) [122617 122637])
                    ("disp_prop" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [122638 122653]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [122480 125048])
            ("compute_display_string_end" function
               (:arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125389 125407])
                    ("string" variable
                       (:pointer 1
                        :type ("bidi_string_data" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [125408 125440]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [125351 126836])
            ("handle_fontified_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [127221 127235]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [127173 130484])
            ("handle_face_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [130791 130805]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [130748 136128])
            ("underlying_face_id" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [136404 136418]))                  
                :type "int")
                nil [136373 136624])
            ("face_before_or_after_it_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [136937 136951])
                    ("before_p" variable (:type "bool") (reparse-symbol arg-sub-list) [136952 136966]))                  
                :type "int")
                nil [136897 143020])
            ("handle_invisible_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [143350 143364]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [143302 154210])
            ("setup_for_ellipsis" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [154329 154343])
                    ("len" variable (:type "int") (reparse-symbol arg-sub-list) [154344 154352]))                  
                :type "void")
                nil [154297 155766])
            ("handle_display_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [156253 156267]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [156207 157716])
            ("handle_display_spec" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [158624 158638])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158639 158656])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158657 158676])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158684 158704])
                    ("position" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [158705 158731])
                    ("bufpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158739 158756])
                    ("frame_window_p" variable (:type "bool") (reparse-symbol arg-sub-list) [158757 158777]))                  
                :type "int")
                nil [158592 160718])
            ("display_prop_end" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [160864 160878])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160879 160898])
                    ("start_pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [160899 160925]))                  
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [160823 161286])
            ("handle_single_display_spec" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [162493 162507])
                    ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162508 162525])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162526 162545])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162553 162573])
                    ("position" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [162574 162600])
                    ("bufpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162608 162625])
                    ("display_replaced" variable (:type "int") (reparse-symbol arg-sub-list) [162626 162647])
                    ("frame_window_p" variable (:type "bool") (reparse-symbol arg-sub-list) [162655 162675])
                    ("enable_eval_p" variable (:type "bool") (reparse-symbol arg-sub-list) [162676 162695]))                  
                :type "int")
                nil [162454 176010])
            ("display_prop_intangible_p" function
               (:arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [176299 176316])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [176317 176337])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [176344 176362])
                    ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [176363 176381]))                  
                :type "bool")
                nil [176267 176639])
            ("single_display_spec_string_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [177030 177047])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [177048 177067]))                  
                :type "bool")
                nil [176988 178192])
            ("display_prop_string_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [178300 178317])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [178318 178337]))                  
                :type "bool")
                nil [178265 178943])
            ("string_buffer_position_lim" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [179444 179463])
                    ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [179471 179486])
                    ("to" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [179487 179500])
                    ("back_p" variable (:type "bool") (reparse-symbol arg-sub-list) [179501 179513]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [179399 180371])
            ("string_buffer_position" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [180886 180905])
                    ("around_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [180906 180931]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [180845 181229])
            ("handle_composition_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [181567 181581]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [181517 183092])
            ("overlay_entry" type
               (:members 
                  ( ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [183404 183424])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [183427 183446])
                    ("priority" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [183449 183468])
                    ("after_string_p" variable (:type "bool") (reparse-symbol classsubparts) [183471 183491]))                  
                :type "struct")
                nil [183379 183494])
            ("handle_overlay_change" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [183646 183660]))                  
                :type ("prop_handled" type (:type "enum") nil nil))
                nil [183598 183796])
            ("next_overlay_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [184194 184208]))                  
                :type "void")
                nil [184161 187979])
            ("compare_overlay_entries" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("e1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [188593 188608])
                    ("e2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [188609 188624]))                  
                :type "int")
                nil [188557 189432])
            ("load_overlay_strings" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [190635 190649])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [190650 190668]))                  
                :type "void")
                nil [190601 195685])
            ("get_overlay_strings_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [195896 195910])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [195911 195929])
                    ("compute_stop_p" variable (:type "bool") (reparse-symbol arg-sub-list) [195930 195950]))                  
                :type "bool")
                nil [195861 199041])
            ("get_overlay_strings" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [199076 199090])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199091 199109]))                  
                :type "bool")
                nil [199043 199326])
            ("push_it" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [199853 199867])
                    ("position" variable
                       (:pointer 1
                        :type ("text_pos" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [199868 199894]))                  
                :type "void")
                nil [199832 201586])
            ("iterate_out_of_display_property" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [201633 201647]))                  
                :type "void")
                nil [201588 202946])
            ("pop_it" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [203308 203322]))                  
                :type "void")
                nil [203288 206819])
            ("back_to_previous_line_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [207098 207112]))                  
                :type "void")
                nil [207057 207271])
            ("forward_to_next_line_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [208241 208255])
                    ("skipped_p" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [208256 208272])
                    ("bidi_it_prev" variable
                       (:pointer 1
                        :type ("bidi_it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [208280 208309]))                  
                :type "bool")
                nil [208201 211318])
            ("back_to_previous_visible_line_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [211599 211613]))                  
                :type "void")
                nil [211550 213698])
            ("reseat_at_previous_visible_line_start" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [213976 213990]))                  
                :type "void")
                nil [213932 214093])
            ("reseat_at_next_visible_line_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [214524 214538])
                    ("on_newline_p" variable (:type "bool") (reparse-symbol arg-sub-list) [214539 214557]))                  
                :type "void")
                nil [214477 216252])
            ("reseat" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [216688 216702])
                    ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [216703 216723])
                    ("force_p" variable (:type "bool") (reparse-symbol arg-sub-list) [216724 216737]))                  
                :type "void")
                nil [216668 217998])
            ("reseat_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [218119 218133])
                    ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [218134 218154])
                    ("set_stop_p" variable (:type "bool") (reparse-symbol arg-sub-list) [218155 218171]))                  
                :type "void")
                nil [218097 219597])
            ("reseat_to_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [220305 220319])
                    ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [220320 220334])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [220335 220354])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [220359 220377])
                    ("precision" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [220378 220398])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [220399 220415])
                    ("multibyte" variable (:type "int") (reparse-symbol arg-sub-list) [220420 220434]))                  
                :type "void")
                nil [220275 224449])
            ("next_element_function" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [224739 224751]))                  
                :type "bool")
                nil [224708 224752])
            ("get_next_element" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
  next_element_from_buffer,
  next_element_from_display_vector,
  next_element_from_string,
  next_element_from_c_string,
  next_element_from_image,
  next_element_from_stretch,
  next_element_from_xwidget,
}"
                :type ("next_element_function" type (:type "class") nil nil))
                nil [224754 225035])
            ("GET_NEXT_DISPLAY_ELEMENT" variable (:constant-flag t) nil [225045 225069])
            ("CHAR_COMPOSED_P" variable (:constant-flag t) nil [225241 225256])
            ("lookup_glyphless_char_display" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [225977 225983])
                    ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [225984 225998]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [225934 227524])
            ("last_escape_glyph_frame" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("frame" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [227580 227632])
            ("last_escape_glyph_face_id" variable
               (:typemodifiers ("static")
                :default-value "(1 << FACE_ID_BITS)"
                :type "int")
                nil [227633 227692])
            ("last_escape_glyph_merged_face_id" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type "int")
                nil [227693 227741])
            ("merge_escape_glyph_face" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [227779 227793]))                  
                :type "int")
                nil [227743 228258])
            ("last_glyphless_glyph_frame" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("frame" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [228303 228358])
            ("last_glyphless_glyph_face_id" variable
               (:typemodifiers ("static")
                :default-value "(1 << FACE_ID_BITS)"
                :type "int")
                nil [228359 228421])
            ("last_glyphless_glyph_merged_face_id" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type "int")
                nil [228422 228473])
            ("merge_glyphless_glyph_face" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [228507 228521]))                  
                :type "int")
                nil [228475 229008])
            ("forget_escape_and_glyphless_faces" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [229211 229216]))                  
                :type "void")
                nil [229171 229396])
            ("get_next_display_element" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [229623 229637]))                  
                :type "bool")
                nil [229585 242591])
            ("set_iterator_to_next" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [243371 243385])
                    ("reseat_p" variable (:type "bool") (reparse-symbol arg-sub-list) [243386 243400]))                  
                :type "void")
                nil [243344 253887])
            ("next_element_from_display_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [254344 254358]))                  
                :type "bool")
                nil [254298 256999])
            ("get_visually_first_element" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [257175 257189]))                  
                :type "void")
                nil [257135 259883])
            ("next_element_from_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [260153 260167]))                  
                :type "bool")
                nil [260115 265011])
            ("next_element_from_c_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [265418 265432]))                  
                :type "bool")
                nil [265378 266610])
            ("next_element_from_ellipsis" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [266908 266922]))                  
                :type "bool")
                nil [266868 267493])
            ("next_element_from_image" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [267694 267708]))                  
                :type "bool")
                nil [267657 267750])
            ("next_element_from_xwidget" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [267791 267805]))                  
                :type "bool")
                nil [267752 267849])
            ("next_element_from_stretch" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [268049 268063]))                  
                :type "bool")
                nil [268010 268107])
            ("compute_stop_pos_backwards" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [268385 268399]))                  
                :type "void")
                nil [268345 269484])
            ("handle_stop_backwards" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [269938 269952])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [269953 269971]))                  
                :type "void")
                nil [269903 270960])
            ("next_element_from_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [271219 271233]))                  
                :type "bool")
                nil [271181 276905])
            ("run_redisplay_end_trigger_hook" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [277003 277017]))                  
                :type "void")
                nil [276959 277641])
            ("next_element_from_composition" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [277938 277952]))                  
                :type "bool")
                nil [277895 279097])
            ("IT_POS_VALID_AFTER_MOVE_P" variable (:constant-flag t) nil [279421 279446])
            ("move_it_in_display_line_to" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [280699 280713])
                    ("to_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [280721 280742])
                    ("to_x" variable (:type "int") (reparse-symbol arg-sub-list) [280743 280752])
                    ("op" variable (:type ("move_operation_enum" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [280760 280788]))                  
                :type ("move_it_result" type (:type "enum") nil nil))
                nil [280644 301749])
            ("move_it_in_display_line" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [301806 301820])
                    ("to_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [301825 301846])
                    ("to_x" variable (:type "int") (reparse-symbol arg-sub-list) [301847 301856])
                    ("op" variable (:type ("move_operation_enum" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [301861 301889]))                  
                :type "void")
                nil [301776 302645])
            ("move_it_to" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [303254 303268])
                    ("to_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [303269 303290])
                    ("to_x" variable (:type "int") (reparse-symbol arg-sub-list) [303291 303300])
                    ("to_y" variable (:type "int") (reparse-symbol arg-sub-list) [303301 303310])
                    ("to_vpos" variable (:type "int") (reparse-symbol arg-sub-list) [303311 303323])
                    ("op" variable (:type "int") (reparse-symbol arg-sub-list) [303324 303331]))                  
                :type "int")
                nil [303238 312333])
            ("move_it_vertically_backward" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [312758 312772])
                    ("dy" variable (:type "int") (reparse-symbol arg-sub-list) [312773 312780]))                  
                :type "void")
                nil [312724 318352])
            ("move_it_vertically" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [318577 318591])
                    ("dy" variable (:type "int") (reparse-symbol arg-sub-list) [318592 318599]))                  
                :type "void")
                nil [318552 319154])
            ("move_it_past_eol" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [319245 319259]))                  
                :type "void")
                nil [319222 319419])
            ("move_it_by_lines" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [319747 319761])
                    ("dvpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [319762 319778]))                  
                :type "void")
                nil [319724 324586])
            ("partial_line_height" function
               (:arguments 
                  ( ("it_origin" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [324613 324634]))                  
                :type "int")
                nil [324588 325281])
            ("in_display_vector_p" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [325379 325393]))                  
                :type "bool")
                nil [325353 325536])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwindow_text_pixel_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325571 325595])
                    ("" variable (:type ("Swindow_text_pixel_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325596 325620])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325637 325641]))                  
                :type "int")
                nil [325538 327829])
            ("format_nargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [332244 332263]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [332213 332421])
            ("add_to_log" function
               (:arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [332530 332549])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [332550 332554]))                  
                :type "void")
                nil [332513 332640])
            ("vadd_to_log" function
               (:arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [332660 332679])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [332680 332691]))                  
                :type "void")
                nil [332642 333249])
            ("message_log_maybe_newline" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [333350 333355]))                  
                :type "void")
                nil [333318 333431])
            ("message_dolog" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [333882 333896])
                    ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [333897 333914])
                    ("nlflag" variable (:type "bool") (reparse-symbol arg-sub-list) [333915 333927])
                    ("multibyte" variable (:type "bool") (reparse-symbol arg-sub-list) [333928 333943]))                  
                :type "void")
                nil [333862 339272])
            ("message_log_check_duplicate" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("prev_bol_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [339665 339689])
                    ("this_bol_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [339690 339714]))                  
                :type ("intmax_t" type (:type "class") nil nil))
                nil [339620 340400])
            ("message3" function
               (:arguments 
                  ( ("m" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [340682 340696]))                  
                :type "void")
                nil [340667 341164])
            ("message_to_stderr" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("m" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [341275 341289]))                  
                :type "void")
                nil [341244 341843])
            ("message3_nolog" function
               (:arguments 
                  ( ("m" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [342068 342082]))                  
                :type "void")
                nil [342047 343254])
            ("message1" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [343649 343663]))                  
                :type "void")
                nil [343634 343717])
            ("message1_nolog" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [343790 343804]))                  
                :type "void")
                nil [343769 343864])
            ("message_with_string" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [343983 343997])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [343998 344017])
                    ("log" variable (:type "bool") (reparse-symbol arg-sub-list) [344018 344027]))                  
                :type "void")
                nil [343957 345255])
            ("vmessage" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [345835 345849])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [345850 345861]))                  
                :type "int")
                nil [345825 347294])
            ("message" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [347375 347389])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [347390 347394]))                  
                :type "void")
                nil [347361 347467])
            ("update_echo_area" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [347644 347649]))                  
                :type "void")
                nil [347621 347787])
            ("ensure_echo_area_buffers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [347926 347931]))                  
                :type "void")
                nil [347888 348619])
            ("with_echo_area_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [349274 349291])
                    ("which" variable (:type "int") (reparse-symbol arg-sub-list) [349292 349302])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [349324 349334])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [349335 349347]))                          
                        :type "bool")
                        nil nil)
                    ("a1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [349358 349371])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [349372 349387]))                  
                :type "bool")
                nil [349239 351778])
            ("with_echo_area_buffer_unwind_data" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [351950 351967]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [351896 353139])
            ("unwind_with_echo_area_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [353284 353303]))                  
                :type "void")
                nil [353242 354056])
            ("setup_echo_area_for_printing" function
               (:arguments 
                  ( ("multibyte_p" variable (:type "bool") (reparse-symbol arg-sub-list) [354198 354215]))                  
                :type "void")
                nil [354163 356416])
            ("display_echo_area" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [356672 356689]))                  
                :type "bool")
                nil [356641 357871])
            ("display_echo_area_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [358227 358240])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [358241 358256]))                  
                :type "bool")
                nil [358194 359099])
            ("resize_echo_area_exactly" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [359302 359307]))                  
                :type "void")
                nil [359271 359750])
            ("resize_mini_window_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [360072 360085])
                    ("exactly" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [360086 360106]))                  
                :type "bool")
                nil [360038 360199])
            ("resize_mini_window" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [360725 360742])
                    ("exact_p" variable (:type "bool") (reparse-symbol arg-sub-list) [360743 360756]))                  
                :type "bool")
                nil [360700 365043])
            ("current_message" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [365165 365170]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [365136 365419])
            ("current_message_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [365453 365466])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [365467 365482]))                  
                :type "bool")
                nil [365422 365649])
            ("push_message" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [365898 365903]))                  
                :type "bool")
                nil [365879 366019])
            ("restore_message" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [366108 366113]))                  
                :type "void")
                nil [366086 366195])
            ("pop_message_unwind" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [366279 366284]))                  
                :type "void")
                nil [366254 366418])
            ("check_message_stack" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [366603 366608]))                  
                :type "void")
                nil [366577 366662])
            ("truncate_echo_area" function
               (:arguments 
                  ( ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [366818 366835]))                  
                :type "void")
                nil [366793 367305])
            ("truncate_message_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [367451 367468])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [367469 367484]))                  
                :type "bool")
                nil [367419 367609])
            ("set_message" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [367679 367698]))                  
                :type "void")
                nil [367654 368075])
            ("set_message_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [368305 368318])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [368319 368338]))                  
                :type "bool")
                nil [368278 369517])
            ("clear_message" function
               (:arguments 
                  ( ("current_p" variable (:type "bool") (reparse-symbol arg-sub-list) [369668 369683])
                    ("last_displayed_p" variable (:type "bool") (reparse-symbol arg-sub-list) [369684 369706]))                  
                :type "void")
                nil [369648 369892])
            ("clear_garbaged_frames" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [370343 370348]))                  
                :type "void")
                nil [370308 371267])
            ("echo_area_display" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("update_frame_p" variable (:type "bool") (reparse-symbol arg-sub-list) [371402 371422]))                  
                :type "void")
                nil [371371 375103])
            ("window_buffer_changed" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [375194 375211]))                  
                :type "bool")
                nil [375159 375361])
            ("mode_line_update_needed" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [375481 375498]))                  
                :type "bool")
                nil [375444 375656])
            ("window_frozen_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [375775 375792]))                  
                :type "bool")
                nil [375746 376235])
            ("mode_line_noprop_buf" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [376610 376644])
            ("mode_line_noprop_buf_end" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [376709 376747])
            ("mode_line_noprop_ptr" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [376748 376782])
            ("MODE_LINE_NOPROP_LEN" variable (:constant-flag t) nil [376792 376812])
            ("mode_line_target" variable
               (:typemodifiers ("static")
                :type ("" type
                     (:members 
                        ( ("MODE_LINE_DISPLAY" variable
                             (:constant-flag t
                              :default-value (376917 376918)
                              :type "int")
                              (reparse-symbol enumsubparts) [376897 376918])
                          ("MODE_LINE_TITLE" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [376922 376938])
                          ("MODE_LINE_NOPROP" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [376941 376958])
                          ("MODE_LINE_STRING" variable
                             (:constant-flag t
                              :type "int")
                              (reparse-symbol enumsubparts) [376961 376979]))                        
                      :type "enum")
                      nil nil))
                nil [376881 376997])
            ("mode_line_proptrans_alist" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377109 377154])
            ("mode_line_string_list" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377204 377245])
            ("mode_line_string_face" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377317 377358])
            ("mode_line_string_face_prop" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377359 377405])
            ("Vmode_line_unwind_vector" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377449 377493])
            ("format_mode_line_unwind_data" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("target_frame" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [377544 377571])
                    ("obuf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [377581 377601])
                    ("owin" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [377611 377628])
                    ("save_proptrans" variable (:type "bool") (reparse-symbol arg-sub-list) [377638 377658]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [377495 378736])
            ("unwind_format_mode_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [378775 378794]))                  
                :type "void")
                nil [378738 380127])
            ("store_mode_line_noprop_char" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "char") (reparse-symbol arg-sub-list) [380301 380308]))                  
                :type "void")
                nil [380260 380808])
            ("store_mode_line_noprop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [381282 381301])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [381302 381318])
                    ("precision" variable (:type "int") (reparse-symbol arg-sub-list) [381319 381333]))                  
                :type "int")
                nil [381247 381822])
            ("REDISPLAY_SOME_P" variable (:constant-flag t) nil [385085 385101])
            ("prepare_menu_bars" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [385423 385428]))                  
                :type "void")
                nil [385392 388600])
            ("update_menu_bar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [389071 389087])
                    ("save_match_data" variable (:type "bool") (reparse-symbol arg-sub-list) [389088 389109])
                    ("hooks_run" variable (:type "bool") (reparse-symbol arg-sub-list) [389110 389125]))                  
                :type "bool")
                nil [389042 392202])
            ("hscroll_window_tree" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [420264 420283]))                  
                :type "bool")
                nil [420231 429005])
            ("hscroll_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [429341 429360]))                  
                :type "bool")
                nil [429312 429527])
            ("text_outside_line_unchanged_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [431567 431584])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [431595 431611])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [431612 431626]))                  
                :type "bool")
                nil [431524 433618])
            ("redisplay" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [433937 433942]))                  
                :type "void")
                nil [433921 433971])
            ("overlay_arrow_string_or_property" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("var" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [434027 434043]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [433974 434178])
            ("overlay_arrow_in_current_buffer_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [434297 434302]))                  
                :type "bool")
                nil [434250 434673])
            ("overlay_arrows_changed_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("set_redisplay" variable (:type "bool") (reparse-symbol arg-sub-list) [434913 434932]))                  
                :type "bool")
                nil [434875 435819])
            ("update_overlay_arrows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("up_to_date" variable (:type "int") (reparse-symbol arg-sub-list) [435917 435932]))                  
                :type "void")
                nil [435882 436572])
            ("overlay_arrow_at_row" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [436773 436787])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [436788 436810]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [436732 437780])
            ("check_point_in_composition" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("prev_buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [438035 438059])
                    ("prev_pt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [438060 438078])
                    ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [438086 438105])
                    ("pt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [438106 438119]))                  
                :type "bool")
                nil [437995 439016])
            ("reconsider_clip_changes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [439126 439143]))                  
                :type "void")
                nil [439089 440011])
            ("propagate_buffer_redisplay" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [440053 440058]))                  
                :type "void")
                nil [440013 440864])
            ("STOP_POLLING" variable (:constant-flag t) nil [440874 440886])
            ("RESUME_POLLING" variable (:constant-flag t) nil [441006 441020])
            ("redisplay_internal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [441285 441290]))                  
                :type "void")
                nil [441253 469234])
            ("unwind_redisplay_preserve_echo_area" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [469285 469290]))                  
                :type "void")
                nil [469236 469321])
            ("redisplay_preserve_echo_area" function
               (:arguments 
                  ( ("from_where" variable (:type "int") (reparse-symbol arg-sub-list) [469835 469850]))                  
                :type "void")
                nil [469800 470476])
            ("unwind_redisplay" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [470587 470592]))                  
                :type "void")
                nil [470557 470849])
            ("mark_window_display_accurate_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [471112 471129])
                    ("accurate_p" variable (:type "bool") (reparse-symbol arg-sub-list) [471130 471146]))                  
                :type "void")
                nil [471068 472440])
            ("mark_window_display_accurate" function
               (:arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [472738 472757])
                    ("accurate_p" variable (:type "bool") (reparse-symbol arg-sub-list) [472758 472774]))                  
                :type "void")
                nil [472703 473305])
            ("disp_char_vector" function
               (:arguments 
                  ( ("dp" variable
                       (:pointer 1
                        :type ("Lisp_Char_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [473577 473604])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [473605 473611]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [473547 473943])
            ("buffer_flip_blocked_depth" variable
               (:typemodifiers ("static")
                :type "int")
                nil [473945 473982])
            ("block_buffer_flips" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [474016 474021]))                  
                :type "void")
                nil [473984 474100])
            ("unblock_buffer_flips" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [474136 474141]))                  
                :type "void")
                nil [474102 474553])
            ("buffer_flipping_blocked_p" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [474587 474592]))                  
                :type "bool")
                nil [474555 474636])
            ("redisplay_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [474914 474933]))                  
                :type "void")
                nil [474883 475419])
            ("redisplay_window_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ignore" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [475464 475483]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [475421 475576])
            ("redisplay_window_0" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [475617 475636]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [475578 475771])
            ("redisplay_window_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [475812 475831]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [475773 475965])
            ("set_cursor_from_row" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [476262 476279])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [476280 476302])
                    ("matrix" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [476310 476338])
                    ("delta" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [476346 476362])
                    ("delta_bytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [476363 476385])
                    ("dy" variable (:type "int") (reparse-symbol arg-sub-list) [476393 476400])
                    ("dvpos" variable (:type "int") (reparse-symbol arg-sub-list) [476401 476411]))                  
                :type "bool")
                nil [476229 496938])
            ("run_window_scroll_functions" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [497191 497210])
                    ("startp" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [497211 497234]))                  
                :type ("text_pos" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [497139 497709])
            ("cursor_row_fully_visible_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [498278 498295])
                    ("force_p" variable (:type "bool") (reparse-symbol arg-sub-list) [498296 498309])
                    ("current_matrix_p" variable (:type "bool") (reparse-symbol arg-sub-list) [498317 498339]))                  
                :type "bool")
                nil [498238 499240])
            ("" type
               (:members 
                  ( ("SCROLLING_SUCCESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [499906 499924])
                    ("SCROLLING_FAILED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [499927 499944])
                    ("SCROLLING_NEED_LARGER_MATRICES" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [499947 499979]))                  
                :type "enum")
                nil [499897 499980])
            ("SCROLL_LIMIT" variable (:constant-flag t) nil [500171 500183])
            ("try_scrolling" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [500215 500234])
                    ("just_this_one_p" variable (:type "bool") (reparse-symbol arg-sub-list) [500235 500256])
                    ("arg_scroll_conservatively" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [500265 500301])
                    ("scroll_step" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [500302 500324])
                    ("temp_scroll_step" variable (:type "bool") (reparse-symbol arg-sub-list) [500333 500355])
                    ("last_line_misfit" variable (:type "bool") (reparse-symbol arg-sub-list) [500356 500378]))                  
                :type "int")
                nil [500189 511086])
            ("compute_window_start_on_continuation_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [511606 511623]))                  
                :type "bool")
                nil [511551 515107])
            ("" type
               (:members 
                  ( ("CURSOR_MOVEMENT_SUCCESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [515697 515721])
                    ("CURSOR_MOVEMENT_CANNOT_BE_USED" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [515724 515755])
                    ("CURSOR_MOVEMENT_MUST_SCROLL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [515758 515786])
                    ("CURSOR_MOVEMENT_NEED_LARGER_MATRICES" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [515789 515827]))                  
                :type "enum")
                nil [515688 515828])
            ("try_cursor_movement" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [515862 515881])
                    ("startp" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [515882 515905])
                    ("scroll_step" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [515913 515931]))                  
                :type "int")
                nil [515830 527142])
            ("set_vertical_scroll_bar" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [527175 527192]))                  
                :type "void")
                nil [527145 528387])
            ("set_horizontal_scroll_bar" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [528422 528439]))                  
                :type "void")
                nil [528390 530203])
            ("redisplay_window" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [532806 532825])
                    ("just_this_one_p" variable (:type "bool") (reparse-symbol arg-sub-list) [532826 532847]))                  
                :type "void")
                nil [532776 567423])
            ("try_window" function
               (:arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [567881 567900])
                    ("pos" variable (:type ("text_pos" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [567901 567921])
                    ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [567922 567932]))                  
                :type "int")
                nil [567865 570502])
            ("try_window_reusing_current_matrix" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [571008 571025]))                  
                :type "bool")
                nil [570961 585048])
            ("find_last_unchanged_at_beg_row" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585327 585343]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [585270 585344])
            ("find_first_unchanged_at_end_row" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585403 585419])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [585478 585490])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [585491 585503]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [585345 585504])
            ("find_last_row_displaying_text" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585562 585584])
                    ("" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585585 585597])
                    ("" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585629 585648]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [585505 585649])
            ("find_last_row_displaying_text" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("matrix" variable
                       (:pointer 1
                        :type ("glyph_matrix" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585951 585979])
                    ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [585980 585994])
                    ("start" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [586005 586029]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [585894 586510])
            ("find_last_unchanged_at_beg_row" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [587105 587122]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [587047 588610])
            ("find_first_unchanged_at_end_row" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [589124 589141])
                    ("delta" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [589147 589164])
                    ("delta_bytes" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [589165 589188]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [589065 591568])
            ("sync_frame_with_window_matrix_rows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [591918 591935]))                  
                :type "void")
                nil [591870 593234])
            ("row_containing_pos" function
               (:pointer 1
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [593517 593534])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [593535 593553])
                    ("start" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [593560 593584])
                    ("end" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [593585 593607])
                    ("dy" variable (:type "int") (reparse-symbol arg-sub-list) [593608 593615]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [593478 595653])
            ("try_window_id" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [597383 597400]))                  
                :type "int")
                nil [597357 624082])
            ("get_overlay_arrow_glyph_row" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [635641 635658])
                    ("overlay_arrow_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [635659 635692]))                  
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [635586 637403])
            ("insert_left_trunc_glyphs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [637576 637590]))                  
                :type "void")
                nil [637538 642104])
            ("row_hash" function
               (:arguments 
                  ( ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [642163 642185]))                  
                :type "unsigned int")
                nil [642144 642561])
            ("compute_line_metrics" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [643262 643276]))                  
                :type "void")
                nil [643228 645623])
            ("append_space_for_newline" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [646227 646241])
                    ("default_face_p" variable (:type "bool") (reparse-symbol arg-sub-list) [646242 646262]))                  
                :type "bool")
                nil [646189 651052])
            ("extend_face_to_end_of_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [651478 651492]))                  
                :type "void")
                nil [651438 660260])
            ("trailing_whitespace_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [660393 660411]))                  
                :type "bool")
                nil [660358 660704])
            ("highlight_trailing_whitespace" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [660811 660825]))                  
                :type "void")
                nil [660768 662695])
            ("row_for_charpos_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [662829 662851])
                    ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [662852 662870]))                  
                :type "bool")
                nil [662798 665313])
            ("cursor_row_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [665418 665440]))                  
                :type "bool")
                nil [665392 665482])
            ("push_prefix_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [665769 665783])
                    ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [665784 665801]))                  
                :type "bool")
                nil [665739 668054])
            ("get_it_property" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [668166 668180])
                    ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [668181 668198]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [668130 668522])
            ("handle_line_prefix" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [668629 668643]))                  
                :type "void")
                nil [668597 669265])
            ("unproduce_glyphs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [669575 669589])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [669590 669596]))                  
                :type "void")
                nil [669545 670042])
            ("find_row_edges" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [670166 670180])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [670181 670203])
                    ("min_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [670206 670224])
                    ("min_bpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [670225 670244])
                    ("max_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [670247 670265])
                    ("max_bpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [670266 670285]))                  
                :type "void")
                nil [670138 675687])
            ("display_count_lines_logically" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [675837 675858])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [675859 675880])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [675891 675907])
                    ("byte_pos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [675908 675932]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [675789 676348])
            ("display_count_lines_visually" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [676541 676555]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [676494 677919])
            ("maybe_produce_line_number" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [678105 678119]))                  
                :type "void")
                nil [678066 686852])
            ("should_produce_line_number" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [686977 686991]))                  
                :type "bool")
                nil [686937 688012])
            ("row_text_area_empty" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [688282 688304]))                  
                :type "bool")
                nil [688249 688747])
            ("display_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [689156 689170])
                    ("cursor_vpos" variable (:type "int") (reparse-symbol arg-sub-list) [689171 689187]))                  
                :type "bool")
                nil [689130 722084])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_bidi_paragraph_direction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [722129 722163])
                    ("" variable (:type ("Scurrent_bidi_paragraph_direction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [722171 722205])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [722222 722226]))                  
                :type "int")
                nil [722086 722756])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbidi_find_overridden_directionality" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [725262 725299])
                    ("" variable (:type ("Sbidi_find_overridden_directionality" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [725307 725344])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [725361 725365]))                  
                :type "int")
                nil [725209 726617])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmove_point_visually" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [729850 729871])
                    ("" variable (:type ("Smove_point_visually" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [729879 729900])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [729917 729921]))                  
                :type "int")
                nil [729820 730140])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbidi_resolved_levels" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [743628 743650])
                    ("" variable (:type ("Sbidi_resolved_levels" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [743658 743680])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [743697 743701]))                  
                :type "int")
                nil [743597 745070])
            ("display_menu_bar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [747619 747636]))                  
                :type "void")
                nil [747589 750196])
            ("deep_copy_glyph_row" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("to" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [750286 750307])
                    ("from" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [750308 750331]))                  
                :type "void")
                nil [750253 751015])
            ("display_tty_menu_item" function
               (:arguments 
                  ( ("item_text" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [751954 751976])
                    ("width" variable (:type "int") (reparse-symbol arg-sub-list) [751977 751987])
                    ("face_id" variable (:type "int") (reparse-symbol arg-sub-list) [751988 752000])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [752010 752016])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [752017 752023])
                    ("submenu" variable (:type "bool") (reparse-symbol arg-sub-list) [752024 752037]))                  
                :type "void")
                nil [751926 754563])
            ("redisplay_mode_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [755016 755035])
                    ("force" variable (:type "bool") (reparse-symbol arg-sub-list) [755036 755047]))                  
                :type "int")
                nil [754983 756186])
            ("display_mode_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [756347 756364]))                  
                :type "int")
                nil [756316 758571])
            ("display_mode_line" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [758875 758892])
                    ("face_id" variable (:type ("face_id" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [758893 758914])
                    ("format" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [758915 758934]))                  
                :type "int")
                nil [758845 760641])
            ("move_elt_to_front" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("elt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [760764 760780])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [760781 760798]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [760726 761317])
            ("safe_set_text_properties" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [761512 761528])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [761529 761547]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [761467 761643])
            ("display_mode_element" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [762583 762597])
                    ("depth" variable (:type "int") (reparse-symbol arg-sub-list) [762598 762608])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [762609 762625])
                    ("precision" variable (:type "int") (reparse-symbol arg-sub-list) [762626 762640])
                    ("elt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [762649 762665])
                    ("props" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [762666 762684])
                    ("risky" variable (:type "bool") (reparse-symbol arg-sub-list) [762685 762696]))                  
                :type "int")
                nil [762550 774592])
            ("store_mode_line_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [775331 775350])
                    ("lisp_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [775351 775375])
                    ("copy_string" variable (:type "bool") (reparse-symbol arg-sub-list) [775379 775396])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [775400 775416])
                    ("precision" variable (:type "int") (reparse-symbol arg-sub-list) [775417 775431])
                    ("props" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [775432 775450]))                  
                :type "int")
                nil [775296 777360])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat_mode_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [777390 777408])
                    ("" variable (:type ("Sformat_mode_line" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [777409 777427])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [777451 777455]))                  
                :type "int")
                nil [777363 778350])
            ("pint2str" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type "char")
                        (reparse-symbol arg-sub-list) [780892 780911])
                    ("width" variable
                       (:typemodifiers ("register")
                        :type "int")
                        (reparse-symbol arg-sub-list) [780912 780931])
                    ("d" variable
                       (:typemodifiers ("register")
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [780932 780953]))                  
                :type "void")
                nil [780870 781261])
            ("power_letter" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
    0,	 /* no letter */
    'k', /* kilo */
    'M', /* mega */
    'G', /* giga */
    'T', /* tera */
    'P', /* peta */
    'E', /* exa */
    'Z', /* zetta */
    'Y'	 /* yotta */
  }"
                :type "char")
                nil [781468 781696])
            ("pint2hrstr" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [781722 781732])
                    ("width" variable (:type "int") (reparse-symbol arg-sub-list) [781733 781743])
                    ("d" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [781744 781756]))                  
                :type "void")
                nil [781698 783368])
            ("invalid_eol_type" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "\"(*invalid*)\""
                :type "unsigned char")
                nil [783565 783621])
            ("decode_mode_spec_coding" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("coding_system" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [783662 783688])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [783689 783699])
                    ("eol_flag" variable (:type "bool") (reparse-symbol arg-sub-list) [783700 783714]))                  
                :type "char")
                nil [783623 785393])
            ("percent99" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("n" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [785564 785576])
                    ("d" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [785577 785589]))                  
                :type "int")
                nil [785542 785662])
            ("lots_of_dashes" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "\"--------------------------------------------------------------------------------------------------------------------------------------------\""
                :type "char")
                nil [785998 786172])
            ("decode_mode_spec" function
               (:pointer 1
                :typemodifiers ("static")
                :constant-flag t
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [786212 786229])
                    ("c" variable
                       (:typemodifiers ("register")
                        :type "int")
                        (reparse-symbol arg-sub-list) [786230 786245])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [786246 786262])
                    ("string" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [786267 786287]))                  
                :type "char")
                nil [786174 797300])
            ("display_count_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [797781 797802])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [797810 797831])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [797832 797848])
                    ("byte_pos_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [797856 797880]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [797743 800009])
            ("display_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [801669 801688])
                    ("lisp_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [801689 801713])
                    ("face_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [801714 801738])
                    ("face_string_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [801741 801767])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [801768 801784])
                    ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [801785 801799])
                    ("field_width" variable (:type "int") (reparse-symbol arg-sub-list) [801802 801818])
                    ("precision" variable (:type "int") (reparse-symbol arg-sub-list) [801819 801833])
                    ("max_x" variable (:type "int") (reparse-symbol arg-sub-list) [801834 801844])
                    ("multibyte" variable (:type "int") (reparse-symbol arg-sub-list) [801845 801859]))                  
                :type "int")
                nil [801642 807493])
            ("invisible_prop" function
               (:arguments 
                  ( ("propval" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [807972 807992])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [807993 808010]))                  
                :type "int")
                nil [807952 808738])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvisible_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [808762 808775])
                    ("" variable (:type ("Sinvisible_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [808776 808789])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [808806 808810]))                  
                :type "int")
                nil [808740 809507])
            ("calc_pixel_width_or_height" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("res" variable
                       (:pointer 1
                        :type "double")
                        (reparse-symbol arg-sub-list) [812758 812770])
                    ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [812771 812785])
                    ("prop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [812786 812803])
                    ("font" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [812811 812829])
                    ("width_p" variable (:type "bool") (reparse-symbol arg-sub-list) [812830 812843])
                    ("align_to" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [812844 812858]))                  
                :type "bool")
                nil [812718 819099])
            ("get_font_ascent_descent" function
               (:arguments 
                  ( ("font" variable
                       (:pointer 1
                        :type ("font" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [819131 819149])
                    ("ascent" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [819150 819162])
                    ("descent" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [819163 819176]))                  
                :type "void")
                nil [819101 819308])
            ("produce_stretch_glyph" function
               (:arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [879814 879828]))                  
                :type "void")
                nil [879786 884545])
            ("produce_special_glyphs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("it" variable
                       (:pointer 1
                        :type ("it" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [884891 884905])
                    ("what" variable (:type ("display_element_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [884906 884937]))                  
                :type "void")
                nil [884855 887625])
            ("get_specified_cursor_type" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [925072 925088])
                    ("width" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [925089 925100]))                  
                :type ("text_cursor_kinds" type (:type "enum") nil nil))
                nil [925015 926018])
            ("set_frame_cursor_types" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [926106 926122])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [926123 926139]))                  
                :type "void")
                nil [926077 926707])
            ("draw_row_with_mouse_face" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [946477 946494])
                    ("start_x" variable (:type "int") (reparse-symbol arg-sub-list) [946495 946507])
                    ("row" variable
                       (:pointer 1
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [946508 946530])
                    ("start_hpos" variable (:type "int") (reparse-symbol arg-sub-list) [946536 946551])
                    ("end_hpos" variable (:type "int") (reparse-symbol arg-sub-list) [946552 946565])
                    ("draw" variable (:type ("draw_glyphs_face" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [946571 946598]))                  
                :type "void")
                nil [946439 946923])
            ("show_mouse_face" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [947033 947054])
                    ("draw" variable (:type ("draw_glyphs_face" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [947055 947082]))                  
                :type "void")
                nil [947004 950922])
            ("clear_mouse_face" function
               (:arguments 
                  ( ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [951114 951135]))                  
                :type "bool")
                nil [951091 951507])
            ("coords_in_mouse_face_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [951655 951672])
                    ("hpos" variable (:type "int") (reparse-symbol arg-sub-list) [951673 951682])
                    ("vpos" variable (:type "int") (reparse-symbol arg-sub-list) [951683 951692]))                  
                :type "bool")
                nil [951619 952954])
            ("cursor_in_mouse_face_p" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [953063 953080]))                  
                :type "bool")
                nil [953034 953577])
            ("rows_from_pos_range" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [954006 954023])
                    ("start_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [954031 954055])
                    ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [954056 954078])
                    ("disp_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [954086 954110])
                    ("start" variable
                       (:pointer 2
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [954118 954143])
                    ("end" variable
                       (:pointer 2
                        :type ("glyph_row" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [954144 954167]))                  
                :type "void")
                nil [953973 958892])
            ("mouse_face_from_buffer_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959442 959461])
                    ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [959469 959490])
                    ("mouse_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959498 959522])
                    ("start_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959530 959554])
                    ("end_charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959562 959584])
                    ("before_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959592 959618])
                    ("after_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959626 959651])
                    ("disp_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [959659 959683]))                  
                :type "void")
                nil [959402 970197])
            ("mouse_face_from_string_pos" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [972662 972679])
                    ("hlinfo" variable
                       (:pointer 1
                        :type ("Mouse_HLInfo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [972680 972701])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [972709 972728])
                    ("startpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [972736 972755])
                    ("endpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [972756 972773]))                  
                :type "void")
                nil [972622 975603])
            ("define_frame_cursor1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [979724 979740])
                    ("cursor" variable (:type ("Cursor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [979741 979755])
                    ("pointer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [979756 979776]))                  
                :type "void")
                nil [979690 980900])
            ("note_mode_line_or_margin_highlight" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [981283 981302])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [981303 981309])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [981310 981316])
                    ("area" variable (:type ("window_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [981325 981347]))                  
                :type "void")
                nil [981235 990541])
            ("note_mouse_highlight" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [990972 990988])
                    ("x" variable (:type "int") (reparse-symbol arg-sub-list) [990989 990995])
                    ("y" variable (:type "int") (reparse-symbol arg-sub-list) [990996 991002]))                  
                :type "void")
                nil [990945 1008268])
            ("x_clear_window_mouse_face" function
               (:arguments 
                  ( ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1008514 1008531]))                  
                :type "void")
                nil [1008482 1008759])
            ("cancel_mouse_face" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1008913 1008929]))                  
                :type "void")
                nil [1008889 1009138])
            ("syms_of_xdisp" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1027162 1027167]))                  
                :type "void")
                nil [1027142 1061531])
            ("init_xdisp" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1061601 1061606]))                  
                :type "void")
                nil [1061584 1063207]))          
      :file "xdisp.c"
      :pointmax 1065368
      :fsize 1065760
      :lastmodtime '(23454 65442 4444 864000)
      :unmatched-syntax '((semantic-list 809508 . 809759) (punctuation 808809 . 808810) (number 808796 . 808797) (number 808793 . 808794) (number 808790 . 808791) (string 808747 . 808760) (semantic-list 778351 . 780725) (punctuation 777454 . 777455) (number 777441 . 777442) (number 777438 . 777439) (number 777435 . 777436) (string 777370 . 777388) (semantic-list 745071 . 747012) (punctuation 743700 . 743701) (number 743687 . 743688) (number 743684 . 743685) (number 743681 . 743682) (string 743604 . 743626) (semantic-list 730141 . 743595) (punctuation 729920 . 729921) (number 729907 . 729908) (number 729904 . 729905) (number 729901 . 729902) (string 729827 . 729848) (semantic-list 726618 . 729818) (punctuation 725364 . 725365) (number 725351 . 725352) (number 725348 . 725349) (number 725345 . 725346) (string 725216 . 725253) (semantic-list 722757 . 725207) (punctuation 722225 . 722226) (number 722212 . 722213) (number 722209 . 722210) (number 722206 . 722207) (string 722093 . 722127) (semantic-list 345818 . 345824) (symbol 345794 . 345817) (number 345822 . 345823) (number 345819 . 345820) (VOID 345789 . 345793) (number 345822 . 345823) (number 345819 . 345820) (STATIC 345782 . 345788) (number 345822 . 345823) (number 345819 . 345820) (semantic-list 327830 . 331972) (punctuation 325640 . 325641) (number 325627 . 325628) (number 325624 . 325625) (number 325621 . 325622) (string 325545 . 325569) (TYPEDEF 224700 . 224707) (semantic-list 45507 . 46222) (punctuation 45374 . 45375) (number 45361 . 45362) (number 45358 . 45359) (number 45355 . 45356) (string 45287 . 45306) (ENUM 28523 . 28527) (close-paren 28550 . 28551) (punctuation 28542 . 28543) (open-paren 28541 . 28542) (close-paren 28550 . 28551) (punctuation 28542 . 28543) (open-paren 28541 . 28542) (semantic-list 27373 . 27493) (punctuation 27191 . 27192) (number 27178 . 27179) (number 27175 . 27176) (number 27172 . 27173) (string 27095 . 27117))
      :lexical-table 
        '(("IT_POS_VALID_AFTER_MOVE_P" (spp-arg-list ("it") 279446 . 279450) . ((semantic-list "((it)->method != GET_FROM_STRING || IT_STRING_CHARPOS (*it) == 0)" 279457 . 279522)))
          ("FRAME_X_OUTPUT" (spp-arg-list ("f") 16420 . 16423) . ((semantic-list "((f)->output_data.x)" 16424 . 16444)))
          ("CLEAR_FACE_CACHE_COUNT" . ((number "500" 30562 . 30565)))
          ("RESUME_POLLING" . 
              ((DO "do" 441027 . 441029) (semantic-list "{ if (polling_stopped_here) start_polling ();	\\
       polling_stopped_here = false; }" 441030 . 441116) (WHILE "while" 441117 . 441122) (semantic-list "(false)" 441123 . 441130)))
          ("MAX_SCRATCH_GLYPHS" . ((number "100" 24389 . 24392)))
          ("TEXT_PROP_DISTANCE_LIMIT" . ((number "100" 25031 . 25034)))
          ("face_before_it_pos" (spp-arg-list ("IT") 36426 . 36430) . ((symbol "face_before_or_after_it_pos" 36431 . 36458) (semantic-list "(IT, true)" 36459 . 36469)))
          ("IT_OVERFLOW_NEWLINE_INTO_FRINGE" (spp-arg-list ("it") 17109 . 17113) . ((symbol "false" 17114 . 17119)))
          ("COERCE_MARKER" (spp-arg-list ("X") 29654 . 29657) . ((semantic-list "(MARKERP ((X)) ? Fmarker_position (X) : (X))" 29658 . 29702)))
          ("face_after_it_pos" (spp-arg-list ("IT") 36495 . 36499) . ((symbol "face_before_or_after_it_pos" 36501 . 36528) (semantic-list "(IT, false)" 36529 . 36540)))
          ("GET_NEXT_DISPLAY_ELEMENT" (spp-arg-list ("it") 225069 . 225073) . ((semantic-list "(*get_next_element[(it)->method])" 225074 . 225107) (semantic-list "(it)" 225108 . 225112)))
          ("STOP_POLLING" . 
              ((DO "do" 440893 . 440895) (semantic-list "{ if (! polling_stopped_here) stop_polling ();	\\
       polling_stopped_here = true; }" 440896 . 440982) (WHILE "while" 440983 . 440988) (semantic-list "(false)" 440989 . 440996)))
          ("SAVE_IT" (spp-arg-list ("ITCOPY" "ITORIG" "CACHE") 25503 . 25526) . 
              ((DO "do" 25532 . 25534) (semantic-list "{						\\
    if (CACHE)					\\
      bidi_unshelve_cache (CACHE, true);	\\
    ITCOPY = ITORIG;				\\
    CACHE = bidi_shelve_cache ();		\\
  }" 25535 . 25674) (WHILE "while" 25675 . 25680) (semantic-list "(false)" 25681 . 25688)))
          ("MODE_LINE_NOPROP_LEN" (spp-arg-list ("start") 376812 . 376819) . ((semantic-list "((mode_line_noprop_ptr - mode_line_noprop_buf) - start)" 376824 . 376879)))
          ("RESTORE_IT" (spp-arg-list ("pITORIG" "pITCOPY" "CACHE") 25708 . 25733) . 
              ((DO "do" 25738 . 25740) (semantic-list "{						\\
    if (pITORIG != pITCOPY)			\\
      *(pITORIG) = *(pITCOPY);			\\
    bidi_unshelve_cache (CACHE, false);		\\
    CACHE = NULL;				\\
  }" 25741 . 25886) (WHILE "while" 25887 . 25892) (semantic-list "(false)" 25893 . 25900)))
          ("REDISPLAY_SOME_P" (spp-arg-list nil 385101 . 385103) . ((semantic-list "((windows_or_buffers_changed == 0			\\
    || windows_or_buffers_changed == REDISPLAY_SOME)	\\
   && (update_mode_lines == 0				\\
       || update_mode_lines == REDISPLAY_SOME))" 385111 . 385286)))
          ("DISP_INFINITY" . ((number "10000000" 16475 . 16483)))
          ("IT_DISPLAYING_WHITESPACE" (spp-arg-list ("it") 17376 . 17380) . ((semantic-list "((it->what == IT_CHARACTER && (it->c == ' ' || it->c == '\\t'))	\\
   || ((STRINGP (it->string)						\\
	&& (SREF (it->string, IT_STRING_BYTEPOS (*it)) == ' '		\\
	    || SREF (it->string, IT_STRING_BYTEPOS (*it)) == '\\t'))	\\
       || (it->s							\\
	   && (it->s[IT_BYTEPOS (*it)] == ' '				\\
	       || it->s[IT_BYTEPOS (*it)] == '\\t'))			\\
       || (IT_BYTEPOS (*it) < ZV_BYTE					\\
	   && (*BYTE_POS_ADDR (IT_BYTEPOS (*it)) == ' '			\\
	       || *BYTE_POS_ADDR (IT_BYTEPOS (*it)) == '\\t'))))" 17389 . 17882)))
          ("DEFAULT_HOURGLASS_DELAY" . ((number "1" 31711 . 31712)))
          ("CHAR_COMPOSED_P" (spp-arg-list ("IT" "CHARPOS" "BYTEPOS" "END_CHARPOS") 225256 . 225288) . ((semantic-list "((IT)->cmp_it.id >= 0							\\
   || ((IT)->cmp_it.stop_pos == (CHARPOS)				\\
       && composition_reseat_it (&(IT)->cmp_it, CHARPOS, BYTEPOS,	\\
				 END_CHARPOS, (IT)->w,			\\
				 FACE_FROM_ID_OR_NULL ((IT)->f,		\\
						       (IT)->face_id),	\\
				 (IT)->string)))" 225295 . 225561)))
          ("TRACE_MOVE" (spp-arg-list ("x") 27839 . 27842) . ((semantic-list "(void)" 27843 . 27849) (number "0" 27850 . 27851)))
          ("SCROLL_LIMIT" . ((number "100" 500184 . 500187)))
          ("MAX_DISP_SCAN" . ((number "250" 121700 . 121703)))
          )
)
    (semanticdb-table "semanticdb-table-1afb324"
      :major-mode c-mode
      :tags 
        '( ("EMACS_ATIMER_H" variable (:constant-flag t) nil [757 771])
            ("time.h" include (:system-flag t) nil [773 790])
            ("atimer" type
               (:prototype t
                :type "struct")
                nil [821 835])
            ("atimer_type" type
               (:members 
                  ( ("ATIMER_ABSOLUTE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [929 945])
                    ("ATIMER_RELATIVE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [995 1011])
                    ("ATIMER_CONTINUOUS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1049 1068]))                  
                :type "enum")
                nil [862 1069])
            ("atimer_callback" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("atimer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1147 1168]))                  
                :type "void")
                nil [1121 1169])
            ("atimer" type
               (:members 
                  ( ("type" variable (:type ("atimer_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [1274 1296])
                    ("expiration" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1339 1366])
                    ("interval" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1403 1428])
                    ("fn" variable (:type ("atimer_callback" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1562 1581])
                    ("client_data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [1640 1658])
                    ("next" variable
                       (:pointer 1
                        :type ("atimer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [1711 1731]))                  
                :type "struct")
                nil [1223 1734])
            ("start_atimer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable (:type ("atimer_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [1794 1811])
                    ("" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [1812 1828])
                    ("" variable (:type ("atimer_callback" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1858 1874])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [1875 1882]))                  
                :type ("atimer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1765 1883])
            ("cancel_atimer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("atimer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1904 1920]))                  
                :type "void")
                nil [1884 1921])
            ("do_pending_atimers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1947 1952]))                  
                :type "void")
                nil [1922 1953])
            ("init_atimer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1972 1977]))                  
                :type "void")
                nil [1954 1978])
            ("turn_on_atimers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [2001 2006]))                  
                :type "void")
                nil [1979 2007])
            ("stop_other_atimers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("atimer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2033 2049]))                  
                :type "void")
                nil [2008 2050])
            ("run_all_atimers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2073 2078]))                  
                :type "void")
                nil [2051 2079]))          
      :file "atimer.h"
      :pointmax 2173
      :fsize 2172
      :lastmodtime '(23443 29219 979879 583000)
      :unmatched-syntax '((TYPEDEF 1113 . 1120))
      :lexical-table 
        '(("EMACS_ATIMER_H")
          )
)
    (semanticdb-table "semanticdb-table-1afb344"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CHARSET_H" variable (:constant-flag t) nil [1135 1150])
            ("verify.h" include (:system-flag t) nil [1152 1171])
            ("lisp.h" include nil nil [1172 1189])
            ("define_charset_arg_index" type
               (:members 
                  ( ("charset_arg_name" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1306 1323])
                    ("charset_arg_dimension" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1328 1350])
                    ("charset_arg_code_space" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1355 1378])
                    ("charset_arg_min_code" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1383 1404])
                    ("charset_arg_max_code" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1409 1430])
                    ("charset_arg_iso_final" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1435 1457])
                    ("charset_arg_iso_revision" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1462 1487])
                    ("charset_arg_emacs_mule_id" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1492 1518])
                    ("charset_arg_ascii_compatible_p" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1523 1554])
                    ("charset_arg_supplementary_p" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1559 1587])
                    ("charset_arg_invalid_code" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1592 1617])
                    ("charset_arg_code_offset" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1622 1646])
                    ("charset_arg_map" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1651 1667])
                    ("charset_arg_subset" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1672 1691])
                    ("charset_arg_superset" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1696 1717])
                    ("charset_arg_unify_map" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1722 1744])
                    ("charset_arg_plist" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1749 1767])
                    ("charset_arg_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1772 1791]))                  
                :type "enum")
                nil [1268 1792])
            ("charset_attr_index" type
               (:members 
                  ( ("charset_id" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1910 1921])
                    ("charset_name" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1968 1981])
                    ("charset_plist" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2028 2042])
                    ("charset_map" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2204 2216])
                    ("charset_decoder" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2511 2527])
                    ("charset_encoder" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2675 2691])
                    ("charset_subset" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3133 3148])
                    ("charset_superset" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3486 3503])
                    ("charset_unify_map" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3768 3786])
                    ("charset_deunifier" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3990 4008])
                    ("charset_attr_max" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4069 4089]))                  
                :type "enum")
                nil [1841 4090])
            ("charset_method" type
               (:members 
                  ( ("CHARSET_METHOD_OFFSET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4374 4396])
                    ("CHARSET_METHOD_MAP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4554 4573])
                    ("CHARSET_METHOD_SUBSET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4647 4669])
                    ("CHARSET_METHOD_SUPERSET" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4744 4771]))                  
                :type "enum")
                nil [4163 4772])
            ("charset" type
               (:members 
                  ( ("id" variable (:type "int") (reparse-symbol classsubparts) [4826 4833])
                    ("hash_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4876 4897])
                    ("dimension" variable (:type "int") (reparse-symbol classsubparts) [4951 4965])
                    ("code_space" variable
                       (:dereference 1
                        :type "int")
                        (reparse-symbol classsubparts) [5451 5470])
                    ("code_space_mask" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [5662 5693])
                    ("code_linear_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5745 5771])
                    ("iso_chars_96" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5868 5893])
                    ("ascii_compatible_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5952 5983])
                    ("supplementary_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [6034 6062])
                    ("compact_codes_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [6134 6162])
                    ("unified_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [6220 6242])
                    ("iso_final" variable (:type "int") (reparse-symbol classsubparts) [6358 6372])
                    ("iso_revision" variable (:type "int") (reparse-symbol classsubparts) [6421 6438])
                    ("emacs_mule_id" variable (:type "int") (reparse-symbol classsubparts) [6615 6633])
                    ("method" variable (:type ("charset_method" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [6706 6733])
                    ("min_code" variable (:type "unsigned int") (reparse-symbol classsubparts) [6794 6822])
                    ("max_code" variable (:type "unsigned int") (reparse-symbol classsubparts) [6794 6822])
                    ("char_index_offset" variable (:type "unsigned int") (reparse-symbol classsubparts) [6914 6941])
                    ("min_char" variable (:type "int") (reparse-symbol classsubparts) [7248 7271])
                    ("max_char" variable (:type "int") (reparse-symbol classsubparts) [7248 7271])
                    ("invalid_code" variable (:type "unsigned int") (reparse-symbol classsubparts) [7370 7392])
                    ("fast_map" variable
                       (:dereference 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [7933 7961])
                    ("code_offset" variable (:type "int") (reparse-symbol classsubparts) [8055 8071]))                  
                :type "struct")
                nil [4774 8074])
            ("Vcharset_hash_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8157 8196])
            ("charset_table" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("charset" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [8230 8267])
            ("CHARSET_FROM_ID" variable (:constant-flag t) nil [8277 8292])
            ("Vcharset_ordered_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8321 8362])
            ("Vcharset_non_preferred_head" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8363 8410])
            ("charset_ordered_list_tick" variable
               (:typemodifiers ("extern")
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [8412 8456])
            ("Viso_2022_charset_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8458 8500])
            ("Vemacs_mule_charset_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [8501 8545])
            ("emacs_mule_charset" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "int")
                nil [8547 8582])
            ("CHARSET_SYMBOL_ATTRIBUTES" variable (:constant-flag t) nil [8714 8739])
            ("CHARSET_ATTR_ID" variable (:constant-flag t) nil [8808 8823])
            ("CHARSET_ATTR_NAME" variable (:constant-flag t) nil [8867 8884])
            ("CHARSET_ATTR_PLIST" variable (:constant-flag t) nil [8929 8947])
            ("CHARSET_ATTR_MAP" variable (:constant-flag t) nil [8993 9009])
            ("CHARSET_ATTR_DECODER" variable (:constant-flag t) nil [9054 9074])
            ("CHARSET_ATTR_ENCODER" variable (:constant-flag t) nil [9122 9142])
            ("CHARSET_ATTR_SUBSET" variable (:constant-flag t) nil [9190 9209])
            ("CHARSET_ATTR_SUPERSET" variable (:constant-flag t) nil [9256 9277])
            ("CHARSET_ATTR_UNIFY_MAP" variable (:constant-flag t) nil [9326 9348])
            ("CHARSET_ATTR_DEUNIFIER" variable (:constant-flag t) nil [9398 9420])
            ("CHARSET_SYMBOL_ID" variable (:constant-flag t) nil [9471 9488])
            ("CHARSET_SYMBOL_HASH_INDEX" variable (:constant-flag t) nil [9651 9676])
            ("CHARSET_ATTRIBUTES" variable (:constant-flag t) nil [9807 9825])
            ("CHARSET_ID" variable (:constant-flag t) nil [9920 9930])
            ("CHARSET_HASH_INDEX" variable (:constant-flag t) nil [9965 9983])
            ("CHARSET_DIMENSION" variable (:constant-flag t) nil [10025 10042])
            ("CHARSET_CODE_SPACE" variable (:constant-flag t) nil [10083 10101])
            ("CHARSET_CODE_LINEAR_P" variable (:constant-flag t) nil [10143 10164])
            ("CHARSET_ISO_CHARS_96" variable (:constant-flag t) nil [10209 10229])
            ("CHARSET_ISO_FINAL" variable (:constant-flag t) nil [10273 10290])
            ("CHARSET_ISO_PLANE" variable (:constant-flag t) nil [10331 10348])
            ("CHARSET_ISO_REVISION" variable (:constant-flag t) nil [10389 10409])
            ("CHARSET_EMACS_MULE_ID" variable (:constant-flag t) nil [10453 10474])
            ("CHARSET_ASCII_COMPATIBLE_P" variable (:constant-flag t) nil [10519 10545])
            ("CHARSET_COMPACT_CODES_P" variable (:constant-flag t) nil [10595 10618])
            ("CHARSET_METHOD" variable (:constant-flag t) nil [10665 10679])
            ("CHARSET_MIN_CODE" variable (:constant-flag t) nil [10718 10734])
            ("CHARSET_MAX_CODE" variable (:constant-flag t) nil [10774 10790])
            ("CHARSET_INVALID_CODE" variable (:constant-flag t) nil [10830 10850])
            ("CHARSET_MIN_CHAR" variable (:constant-flag t) nil [10894 10910])
            ("CHARSET_MAX_CHAR" variable (:constant-flag t) nil [10950 10966])
            ("CHARSET_CODE_OFFSET" variable (:constant-flag t) nil [11006 11025])
            ("CHARSET_UNIFIED_P" variable (:constant-flag t) nil [11068 11085])
            ("CHARSET_NAME" variable (:constant-flag t) nil [11127 11139])
            ("CHARSET_MAP" variable (:constant-flag t) nil [11213 11224])
            ("CHARSET_DECODER" variable (:constant-flag t) nil [11296 11311])
            ("CHARSET_ENCODER" variable (:constant-flag t) nil [11387 11402])
            ("CHARSET_SUBSET" variable (:constant-flag t) nil [11478 11492])
            ("CHARSET_SUPERSET" variable (:constant-flag t) nil [11567 11583])
            ("CHARSET_UNIFY_MAP" variable (:constant-flag t) nil [11660 11677])
            ("CHARSET_DEUNIFIER" variable (:constant-flag t) nil [11755 11772])
            ("set_charset_attr" function
               (:arguments 
                  ( ("charset" variable
                       (:pointer 1
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11873 11897])
                    ("idx" variable (:type ("charset_attr_index" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [11898 11926])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11931 11947]))                  
                :type "void")
                nil [11850 12000])
            ("CHARSETP" variable (:constant-flag t) nil [12060 12068])
            ("CHECK_CHARSET" variable (:constant-flag t) nil [12193 12206])
            ("CHECK_CHARSET_GET_ID" variable (:constant-flag t) nil [12497 12517])
            ("CHECK_CHARSET_GET_ATTR" variable (:constant-flag t) nil [12970 12992])
            ("CHECK_CHARSET_GET_CHARSET" variable (:constant-flag t) nil [13172 13197])
            ("CHAR_CHARSET" variable (:constant-flag t) nil [13453 13465])
            ("DECODE_CHAR" variable (:constant-flag t) nil [14124 14135])
            ("charset_work" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [14934 14966])
            ("ENCODE_CHAR" variable (:constant-flag t) nil [15077 15088])
            ("charset_map_loaded" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [16254 16285])
            ("SPLIT_CHAR" variable (:constant-flag t) nil [16396 16406])
            ("ISO_MAX_DIMENSION" variable (:constant-flag t) nil [16487 16504])
            ("ISO_MAX_CHARS" variable (:constant-flag t) nil [16515 16528])
            ("ISO_MAX_FINAL" variable (:constant-flag t) nil [16539 16552])
            ("iso_charset_table" variable
               (:dereference 3
                :typemodifiers ("extern")
                :type "int")
                nil [16789 16867])
            ("ISO_CHARSET_TABLE" variable (:constant-flag t) nil [16971 16988])
            ("CHARSET_FAST_MAP_REF" variable (:constant-flag t) nil [17144 17164])
            ("CHARSET_FAST_MAP_SET" variable (:constant-flag t) nil [17326 17346])
            ("CHAR_CHARSET_P" variable (:constant-flag t) nil [17629 17643])
            ("EMACS_MULE_LEADING_CODE_PRIVATE_11" variable (:constant-flag t) nil [18539 18573])
            ("EMACS_MULE_LEADING_CODE_PRIVATE_12" variable (:constant-flag t) nil [18597 18631])
            ("EMACS_MULE_LEADING_CODE_PRIVATE_21" variable (:constant-flag t) nil [18655 18689])
            ("EMACS_MULE_LEADING_CODE_PRIVATE_22" variable (:constant-flag t) nil [18713 18747])
            ("charset_ascii" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18767 18811])
            ("charset_eight_bit" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18767 18811])
            ("charset_unicode" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18812 18839])
            ("charset_jisx0201_roman" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18840 18874])
            ("charset_jisx0208_1978" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18875 18908])
            ("charset_jisx0208" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18909 18937])
            ("charset_ksc5601" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18938 18965])
            ("charset_unibyte" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [18967 18994])
            ("char_charset" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [19033 19037])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19038 19050])
                    ("" variable
                       (:pointer 1
                        :type "unsigned int")
                        (reparse-symbol arg-sub-list) [19051 19062]))                  
                :type ("charset" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18996 19063])
            ("charset_attributes" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [19103 19107]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [19064 19108])
            ("decode_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19134 19151])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [19152 19161]))                  
                :type "int")
                nil [19110 19162])
            ("encode_char" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19192 19209])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [19210 19214]))                  
                :type "unsigned int")
                nil [19163 19215])
            ("string_xstring_p" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19245 19257]))                  
                :type "int")
                nil [19216 19258])
            ("map_charset_chars" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19301 19313])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19314 19326]))                          
                        :type "void")
                        nil nil)
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19359 19371])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19372 19384])
                    ("" variable
                       (:pointer 1
                        :type ("charset" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19416 19433])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [19434 19443])
                    ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [19444 19453]))                  
                :type "void")
                nil [19260 19454]))          
      :file "charset.h"
      :pointmax 19504
      :fsize 19503
      :lastmodtime '(23443 29219 986541 894000)
      :unmatched-syntax '((symbol 19456 . 19473) (symbol 11843 . 11849) (symbol 1191 . 1210))
      :lexical-table 
        '(("CHARSET_ATTR_ID" (spp-arg-list ("attrs") 8823 . 8830) . ((symbol "AREF" 8832 . 8836) (semantic-list "((attrs), charset_id)" 8837 . 8858)))
          ("CHARSET_ATTR_SUBSET" (spp-arg-list ("attrs") 9209 . 9216) . ((symbol "AREF" 9217 . 9221) (semantic-list "((attrs), charset_subset)" 9222 . 9247)))
          ("CHARSET_ID" (spp-arg-list ("charset") 9930 . 9939) . ((semantic-list "((charset)->id)" 9941 . 9956)))
          ("CHARSET_ISO_FINAL" (spp-arg-list ("charset") 10290 . 10299) . ((semantic-list "((charset)->iso_final)" 10300 . 10322)))
          ("CHARSET_ISO_PLANE" (spp-arg-list ("charset") 10348 . 10357) . ((semantic-list "((charset)->iso_plane)" 10358 . 10380)))
          ("CHECK_CHARSET_GET_ID" (spp-arg-list ("x" "id") 12517 . 12524) . 
              ((DO "do" 12533 . 12535) (semantic-list "{									\\
    ptrdiff_t idx;							\\
									\\
    if (! SYMBOLP (x) || (idx = CHARSET_SYMBOL_HASH_INDEX (x)) < 0)	\\
      wrong_type_argument (Qcharsetp, (x));				\\
    id = XFIXNUM (AREF (HASH_VALUE (XHASH_TABLE (Vcharset_hash_table), idx), \\
		     charset_id));					\\
  }" 12536 . 12814) (WHILE "while" 12815 . 12820) (semantic-list "(false)" 12821 . 12828)))
          ("CHARSET_ATTR_ENCODER" (spp-arg-list ("attrs") 9142 . 9149) . ((symbol "AREF" 9150 . 9154) (semantic-list "((attrs), charset_encoder)" 9155 . 9181)))
          ("CHARSET_ATTR_DEUNIFIER" (spp-arg-list ("attrs") 9420 . 9427) . ((symbol "AREF" 9428 . 9432) (semantic-list "((attrs), charset_deunifier)" 9433 . 9461)))
          ("CHARSET_COMPACT_CODES_P" (spp-arg-list ("charset") 10618 . 10627) . ((semantic-list "((charset)->compact_codes_p)" 10628 . 10656)))
          ("CHARSET_CODE_OFFSET" (spp-arg-list ("charset") 11025 . 11034) . ((semantic-list "((charset)->code_offset)" 11035 . 11059)))
          ("CHARSET_UNIFIED_P" (spp-arg-list ("charset") 11085 . 11094) . ((semantic-list "((charset)->unified_p)" 11095 . 11117)))
          ("CHARSET_UNIFY_MAP" (spp-arg-list ("charset") 11677 . 11686) . ((semantic-list "(CHARSET_ATTR_UNIFY_MAP (CHARSET_ATTRIBUTES (charset)))" 11691 . 11746)))
          ("CHECK_CHARSET" (spp-arg-list ("x") 12206 . 12209) . 
              ((DO "do" 12218 . 12220) (semantic-list "{								\\
    if (! SYMBOLP (x) || CHARSET_SYMBOL_HASH_INDEX (x) < 0)	\\
      wrong_type_argument (Qcharsetp, (x));			\\
  }" 12221 . 12345) (WHILE "while" 12346 . 12351) (semantic-list "(false)" 12352 . 12359)))
          ("ISO_MAX_FINAL" . ((number "0x80" 16553 . 16557)))
          ("CHARSET_FAST_MAP_REF" (spp-arg-list ("c" "fast_map") 17164 . 17177) . ((semantic-list "((c) < 0x10000					\\
   ? fast_map[(c) >> 10] & (1 << (((c) >> 7) & 7))	\\
   : fast_map[((c) >> 15) + 62] & (1 << (((c) >> 12) & 7)))" 17183 . 17316)))
          ("CHARSET_DECODER" (spp-arg-list ("charset") 11311 . 11320) . ((semantic-list "(CHARSET_ATTR_DECODER (CHARSET_ATTRIBUTES (charset)))" 11325 . 11378)))
          ("ISO_MAX_DIMENSION" . ((number "3" 16505 . 16506)))
          ("EMACS_CHARSET_H")
          ("CHARSET_MAX_CHAR" (spp-arg-list ("charset") 10966 . 10975) . ((semantic-list "((charset)->max_char)" 10976 . 10997)))
          ("CHARSET_MAP" (spp-arg-list ("charset") 11224 . 11233) . ((semantic-list "(CHARSET_ATTR_MAP (CHARSET_ATTRIBUTES (charset)))" 11238 . 11287)))
          ("CHECK_CHARSET_GET_ATTR" (spp-arg-list ("x" "attr") 12992 . 13001) . 
              ((DO "do" 13009 . 13011) (semantic-list "{									\\
    if (!SYMBOLP (x) || NILP (attr = CHARSET_SYMBOL_ATTRIBUTES (x)))	\\
      wrong_type_argument (Qcharsetp, (x));				\\
  }" 13012 . 13147) (WHILE "while" 13148 . 13153) (semantic-list "(false)" 13154 . 13161)))
          ("EMACS_MULE_LEADING_CODE_PRIVATE_11" . ((number "0x9A" 18574 . 18578)))
          ("CHARSET_ATTRIBUTES" (spp-arg-list ("charset") 9825 . 9834) . ((semantic-list "(HASH_VALUE (XHASH_TABLE (Vcharset_hash_table), (charset)->hash_index))" 9839 . 9910)))
          ("CHARSET_HASH_INDEX" (spp-arg-list ("charset") 9983 . 9992) . ((semantic-list "((charset)->hash_index)" 9993 . 10016)))
          ("CHARSET_ISO_CHARS_96" (spp-arg-list ("charset") 10229 . 10238) . ((semantic-list "((charset)->iso_chars_96)" 10239 . 10264)))
          ("SPLIT_CHAR" (spp-arg-list ("c" "charset" "code") 16406 . 16424) . ((semantic-list "((charset) = char_charset ((c), Qnil, &(code)))" 16429 . 16476)))
          ("EMACS_MULE_LEADING_CODE_PRIVATE_12" . ((number "0x9B" 18632 . 18636)))
          ("CHARSET_SYMBOL_ID" (spp-arg-list ("symbol") 9488 . 9496) . ((symbol "CHARSET_ATTR_ID" 9501 . 9516) (semantic-list "(CHARSET_SYMBOL_ATTRIBUTES (symbol))" 9517 . 9553)))
          ("CHARSET_CODE_SPACE" (spp-arg-list ("charset") 10101 . 10110) . ((semantic-list "((charset)->code_space)" 10111 . 10134)))
          ("CHARSET_ASCII_COMPATIBLE_P" (spp-arg-list ("charset") 10545 . 10554) . ((semantic-list "((charset)->ascii_compatible_p)" 10555 . 10586)))
          ("CHARSET_NAME" (spp-arg-list ("charset") 11139 . 11148) . ((semantic-list "(CHARSET_ATTR_NAME (CHARSET_ATTRIBUTES (charset)))" 11154 . 11204)))
          ("CHARSET_DEUNIFIER" (spp-arg-list ("charset") 11772 . 11781) . ((semantic-list "(CHARSET_ATTR_DEUNIFIER (CHARSET_ATTRIBUTES (charset)))" 11786 . 11841)))
          ("CHECK_CHARSET_GET_CHARSET" (spp-arg-list ("x" "charset") 13197 . 13209) . 
              ((DO "do" 13214 . 13216) (semantic-list "{						\\
    int csid;					\\
    CHECK_CHARSET_GET_ID (x, csid);		\\
    charset = CHARSET_FROM_ID (csid);		\\
  }" 13217 . 13329) (WHILE "while" 13330 . 13335) (semantic-list "(false)" 13336 . 13343)))
          ("CHARSET_FROM_ID" (spp-arg-list ("id") 8292 . 8296) . ((semantic-list "(charset_table + (id))" 8297 . 8319)))
          ("CHARSET_ATTR_NAME" (spp-arg-list ("attrs") 8884 . 8891) . ((symbol "AREF" 8892 . 8896) (semantic-list "((attrs), charset_name)" 8897 . 8920)))
          ("CHARSET_MIN_CODE" (spp-arg-list ("charset") 10734 . 10743) . ((semantic-list "((charset)->min_code)" 10744 . 10765)))
          ("CHARSET_ENCODER" (spp-arg-list ("charset") 11402 . 11411) . ((semantic-list "(CHARSET_ATTR_ENCODER (CHARSET_ATTRIBUTES (charset)))" 11416 . 11469)))
          ("CHARSET_SUPERSET" (spp-arg-list ("charset") 11583 . 11592) . ((semantic-list "(CHARSET_ATTR_SUPERSET (CHARSET_ATTRIBUTES (charset)))" 11597 . 11651)))
          ("EMACS_MULE_LEADING_CODE_PRIVATE_21" . ((number "0x9C" 18690 . 18694)))
          ("CHARSET_SYMBOL_ATTRIBUTES" (spp-arg-list ("symbol") 8739 . 8747) . ((symbol "Fgethash" 8752 . 8760) (semantic-list "((symbol), Vcharset_hash_table, Qnil)" 8761 . 8798)))
          ("CHARSET_SYMBOL_HASH_INDEX" (spp-arg-list ("symbol") 9676 . 9684) . ((symbol "hash_lookup" 9689 . 9700) (semantic-list "(XHASH_TABLE (Vcharset_hash_table), symbol, NULL)" 9701 . 9750)))
          ("CHARSET_INVALID_CODE" (spp-arg-list ("charset") 10850 . 10859) . ((semantic-list "((charset)->invalid_code)" 10860 . 10885)))
          ("EMACS_MULE_LEADING_CODE_PRIVATE_22" . ((number "0x9D" 18748 . 18752)))
          ("CHARSET_ATTR_MAP" (spp-arg-list ("attrs") 9009 . 9016) . ((symbol "AREF" 9018 . 9022) (semantic-list "((attrs), charset_map)" 9023 . 9045)))
          ("CHARSET_DIMENSION" (spp-arg-list ("charset") 10042 . 10051) . ((semantic-list "((charset)->dimension)" 10052 . 10074)))
          ("CHARSET_CODE_LINEAR_P" (spp-arg-list ("charset") 10164 . 10173) . ((semantic-list "((charset)->code_linear_p)" 10174 . 10200)))
          ("CHARSETP" (spp-arg-list ("obj") 12068 . 12073) . ((semantic-list "(CHARSET_SYMBOL_HASH_INDEX (obj) >= 0)" 12074 . 12112)))
          ("CHARSET_ISO_REVISION" (spp-arg-list ("charset") 10409 . 10418) . ((semantic-list "((charset)->iso_revision)" 10419 . 10444)))
          ("CHARSET_EMACS_MULE_ID" (spp-arg-list ("charset") 10474 . 10483) . ((semantic-list "((charset)->emacs_mule_id)" 10484 . 10510)))
          ("ISO_CHARSET_TABLE" (spp-arg-list ("dimension" "chars_96" "final") 16988 . 17016) . 
              ((symbol "iso_charset_table" 17021 . 17038) (semantic-list "[(dimension) - 1]" 17038 . 17055) (semantic-list "[chars_96]" 17055 . 17065) (semantic-list "[final]" 17065 . 17072)))
          ("CHAR_CHARSET_P" (spp-arg-list ("c" "charset") 17643 . 17655) . ((semantic-list "((ASCII_CHAR_P (c) && (charset)->ascii_compatible_p)			 \\
   || ((CHARSET_UNIFIED_P (charset)					 \\
	|| (charset)->method == CHARSET_METHOD_SUBSET			 \\
	|| (charset)->method == CHARSET_METHOD_SUPERSET)		 \\
       ? encode_char ((charset), (c)) != (charset)->invalid_code	 \\
       : (CHARSET_FAST_MAP_REF ((c), (charset)->fast_map)		 \\
	  && ((charset)->method == CHARSET_METHOD_OFFSET		 \\
	      ? (c) >= (charset)->min_char && (c) <= (charset)->max_char \\
	      : ((charset)->method == CHARSET_METHOD_MAP		 \\
		 && (charset)->compact_codes_p				 \\
		 && CHAR_TABLE_P (CHARSET_ENCODER (charset)))		 \\
	      ? ! NILP (CHAR_TABLE_REF (CHARSET_ENCODER (charset), (c))) \\
	      : encode_char ((charset), (c)) != (charset)->invalid_code))))" 17665 . 18405)))
          ("CHARSET_ATTR_PLIST" (spp-arg-list ("attrs") 8947 . 8954) . ((symbol "AREF" 8955 . 8959) (semantic-list "((attrs), charset_plist)" 8960 . 8984)))
          ("CHARSET_ATTR_DECODER" (spp-arg-list ("attrs") 9074 . 9081) . ((symbol "AREF" 9082 . 9086) (semantic-list "((attrs), charset_decoder)" 9087 . 9113)))
          ("CHARSET_ATTR_UNIFY_MAP" (spp-arg-list ("attrs") 9348 . 9355) . ((symbol "AREF" 9356 . 9360) (semantic-list "((attrs), charset_unify_map)" 9361 . 9389)))
          ("CHARSET_METHOD" (spp-arg-list ("charset") 10679 . 10688) . ((semantic-list "((charset)->method)" 10690 . 10709)))
          ("CHARSET_MAX_CODE" (spp-arg-list ("charset") 10790 . 10799) . ((semantic-list "((charset)->max_code)" 10800 . 10821)))
          ("CHARSET_SUBSET" (spp-arg-list ("charset") 11492 . 11501) . ((semantic-list "(CHARSET_ATTR_SUBSET (CHARSET_ATTRIBUTES (charset)))" 11506 . 11558)))
          ("ENCODE_CHAR" (spp-arg-list ("charset" "c") 15088 . 15100) . ((semantic-list "(verify_expr								\\
   (sizeof (c) <= sizeof (int),						\\
    (ASCII_CHAR_P (c) && (charset)->ascii_compatible_p			\\
     ? (unsigned) (c)							\\
     : ((charset)->unified_p						\\
	|| (charset)->method == CHARSET_METHOD_SUBSET			\\
	|| (charset)->method == CHARSET_METHOD_SUPERSET)		\\
     ? encode_char (charset, c)						\\
     : (c) < (charset)->min_char || (c) > (charset)->max_char		\\
     ? (charset)->invalid_code						\\
     : (charset)->method == CHARSET_METHOD_OFFSET			\\
     ? ((charset)->code_linear_p					\\
	? (unsigned) ((c) - (charset)->code_offset) + (charset)->min_code \\
	: encode_char (charset, c))					\\
     : (charset)->method == CHARSET_METHOD_MAP				\\
     ? (((charset)->compact_codes_p					\\
	 && CHAR_TABLE_P (CHARSET_ENCODER (charset)))			\\
	? (charset_work = CHAR_TABLE_REF (CHARSET_ENCODER (charset), c), \\
	   (NILP (charset_work)						\\
	    ? (charset)->invalid_code					\\
	    : (unsigned) XFIXNAT (charset_work)))			\\
	: encode_char (charset, c))					\\
     : encode_char (charset, c))))" 15110 . 16137)))
          ("ISO_MAX_CHARS" . ((number "2" 16529 . 16530)))
          ("CHARSET_ATTR_SUPERSET" (spp-arg-list ("attrs") 9277 . 9284) . ((symbol "AREF" 9285 . 9289) (semantic-list "((attrs), charset_superset)" 9290 . 9317)))
          ("CHAR_CHARSET" (spp-arg-list ("c") 13465 . 13468) . ((semantic-list "((c) < 0x80 ? CHARSET_FROM_ID (charset_ascii)	\\
   : char_charset ((c), Qnil, NULL))" 13476 . 13560)))
          ("DECODE_CHAR" (spp-arg-list ("charset" "code") 14135 . 14150) . ((semantic-list "((ASCII_CHAR_P (code) && (charset)->ascii_compatible_p)		\\
   ? (code)								\\
   : ((code) < (charset)->min_code || (code) > (charset)->max_code)	\\
   ? -1									\\
   : (charset)->unified_p						\\
   ? decode_char ((charset), (code))					\\
   : (charset)->method == CHARSET_METHOD_OFFSET				\\
   ? ((charset)->code_linear_p						\\
      ? (int) ((code) - (charset)->min_code) + (charset)->code_offset	\\
      : decode_char ((charset), (code)))				\\
   : (charset)->method == CHARSET_METHOD_MAP				\\
   ? (((charset)->code_linear_p						\\
       && VECTORP (CHARSET_DECODER (charset)))				\\
      ? XFIXNUM (AREF (CHARSET_DECODER (charset),				\\
		    (code) - (charset)->min_code))			\\
      : decode_char ((charset), (code)))				\\
   : decode_char ((charset), (code)))" 14159 . 14932)))
          ("CHARSET_FAST_MAP_SET" (spp-arg-list ("c" "fast_map") 17346 . 17359) . 
              ((DO "do" 17366 . 17368) (semantic-list "{								\\
    if ((c) < 0x10000)						\\
      (fast_map)[(c) >> 10] |= 1 << (((c) >> 7) & 7);		\\
    else							\\
      (fast_map)[((c) >> 15) + 62] |= 1 << (((c) >> 12) & 7);	\\
  }" 17369 . 17551) (WHILE "while" 17552 . 17557) (semantic-list "(false)" 17558 . 17565)))
          ("CHARSET_MIN_CHAR" (spp-arg-list ("charset") 10910 . 10919) . ((semantic-list "((charset)->min_char)" 10920 . 10941)))
          )
)
    (semanticdb-table "semanticdb-table-1afb364"
      :file "termopts.h"
      :fsize 1065
      :lastmodtime '(23443 29220 126455 369000))
    (semanticdb-table "semanticdb-table-1afb384"
      :file "fontset.h"
      :fsize 1871
      :lastmodtime '(23443 29220 16522 739000))
    (semanticdb-table "semanticdb-table-1afb3a4"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [756 775])
            ("stdlib.h" include (:system-flag t) nil [777 796])
            ("unistd.h" include (:system-flag t) nil [797 816])
            ("filevercmp.h" include (:system-flag t) nil [817 840])
            ("intprops.h" include (:system-flag t) nil [841 862])
            ("vla.h" include (:system-flag t) nil [863 879])
            ("errno.h" include (:system-flag t) nil [880 898])
            ("lisp.h" include nil nil [900 917])
            ("bignum.h" include nil nil [918 937])
            ("character.h" include nil nil [938 960])
            ("coding.h" include nil nil [961 980])
            ("composite.h" include nil nil [981 1003])
            ("buffer.h" include nil nil [1004 1023])
            ("intervals.h" include nil nil [1024 1046])
            ("window.h" include nil nil [1047 1066])
            ("puresize.h" include nil nil [1067 1088])
            ("gnutls.h" include nil nil [1089 1108])
            ("sort_vector_copy" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1229 1241])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1242 1252])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1262 1283])
                    ("" variable (:type ("restrict" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1275 1284])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1285 1306])
                    ("" variable (:type ("restrict" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1298 1307]))                  
                :type "void")
                nil [1199 1308])
            ("equal_kind" type
               (:members 
                  ( ("EQUAL_NO_QUIT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1327 1341])
                    ("EQUAL_PLAIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1342 1354])
                    ("EQUAL_INCLUDING_PROPERTIES" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1355 1383]))                  
                :type "enum")
                nil [1309 1384])
            ("internal_equal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1413 1425])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1426 1438])
                    ("" variable (:type ("equal_kind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [1446 1462])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [1463 1467])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1468 1480]))                  
                :type "bool")
                nil [1385 1481])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fidentity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1502 1512])
                    ("" variable (:type ("Sidentity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1513 1523])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1540 1544])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1590 1601]))                  
                :type "int")
                nil [1483 1628])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frandom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1665 1673])
                    ("" variable (:type ("Srandom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1674 1682])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1699 1703]))                  
                :type "int")
                nil [1648 2173])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flength" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2818 2826])
                    ("" variable (:type ("Slength" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2827 2835])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2852 2856]))                  
                :type "int")
                nil [2801 3181])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsafe_length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3991 4004])
                    ("" variable (:type ("Ssafe_length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4005 4018])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4035 4039]))                  
                :type "int")
                nil [3969 4366])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fproper_list_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4486 4501])
                    ("" variable (:type ("Sproper_list_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4502 4517])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4534 4538])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4689 4700]))                  
                :type "int")
                nil [4462 4730])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5087 5101])
                    ("" variable (:type ("Sstring_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5102 5116])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5133 5137]))                  
                :type "int")
                nil [5064 5277])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_distance" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5374 5391])
                    ("" variable (:type ("Sstring_distance" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5392 5409])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5426 5430]))                  
                :type "int")
                nil [5348 5878])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7510 7524])
                    ("" variable (:type ("Sstring_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7525 7539])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7556 7560]))                  
                :type "int")
                nil [7487 7777])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcompare_strings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8100 8117])
                    ("" variable (:type ("Scompare_strings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8118 8135])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8152 8156]))                  
                :type "int")
                nil [8074 9473])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11026 11040])
                    ("" variable (:type ("Sstring_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11041 11055])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11072 11076]))                  
                :type "int")
                nil [11003 11292])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_version_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12057 12079])
                    ("" variable (:type ("Sstring_version_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12087 12109])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12126 12130]))                  
                :type "int")
                nil [12026 12670])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_collate_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13403 13425])
                    ("" variable (:type ("Sstring_collate_lessp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13426 13448])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13465 13469]))                  
                :type "int")
                nil [13372 14634])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_collate_equalp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15131 15154])
                    ("" variable (:type ("Sstring_collate_equalp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15155 15178])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15195 15199]))                  
                :type "int")
                nil [15099 16404])
            ("concat" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16898 16914])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16915 16933])
                    ("target_type" variable (:type ("Lisp_Type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [16940 16967])
                    ("last_special" variable (:type "bool") (reparse-symbol arg-sub-list) [16968 16986]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16871 16987])
            ("concat2" function
               (:arguments 
                  ( ("s1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17025 17040])
                    ("s2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17041 17056]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [17004 17126])
            ("concat3" function
               (:arguments 
                  ( ("s1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17164 17179])
                    ("s2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17180 17195])
                    ("s3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17196 17211]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [17143 17285])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fappend" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17304 17312])
                    ("" variable (:type ("Sappend" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17313 17321])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17325 17330])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17341 17345]))                  
                :type "int")
                nil [17287 17676])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17744 17752])
                    ("" variable (:type ("Sconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17753 17761])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17765 17770])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17781 17785]))                  
                :type "int")
                nil [17727 18077])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18148 18157])
                    ("" variable (:type ("Svconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18158 18167])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18171 18176])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18187 18191]))                  
                :type "int")
                nil [18130 18456])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcopy_sequence" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18538 18553])
                    ("" variable (:type ("Scopy_sequence" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18554 18569])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18586 18590]))                  
                :type "int")
                nil [18514 18876])
            ("textprop_rec" type
               (:members 
                  ( ("argnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19662 19679])
                    ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19727 19742])
                    ("to" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19792 19805]))                  
                :type "struct")
                nil [19638 19849])
            ("concat" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19878 19894])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19895 19913])
                    ("target_type" variable (:type ("Lisp_Type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [19915 19942])
                    ("last_special" variable (:type "bool") (reparse-symbol arg-sub-list) [19943 19961]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [19851 27412])
            ("string_char_byte_cache_string" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [27415 27464])
            ("string_char_byte_cache_charpos" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [27465 27513])
            ("string_char_byte_cache_bytepos" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [27514 27562])
            ("clear_string_char_byte_cache" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [27599 27604]))                  
                :type "void")
                nil [27564 27648])
            ("string_char_to_byte" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27750 27769])
                    ("char_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27770 27791]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [27719 29033])
            ("string_byte_to_char" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29141 29160])
                    ("byte_index" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29161 29182]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [29110 30551])
            ("string_make_multibyte" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30642 30661]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30600 31260])
            ("string_to_multibyte" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31470 31489]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [31437 32121])
            ("string_make_unibyte" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32205 32224]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32172 32571])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_make_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32605 32628])
                    ("" variable (:type ("Sstring_make_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32629 32652])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32676 32680]))                  
                :type "int")
                nil [32573 33291])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_make_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33394 33415])
                    ("" variable (:type ("Sstring_make_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33416 33437])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33461 33465]))                  
                :type "int")
                nil [33364 33781])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_as_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33880 33899])
                    ("" variable (:type ("Sstring_as_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33900 33919])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33943 33947]))                  
                :type "int")
                nil [33852 34282])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_as_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34614 34635])
                    ("" variable (:type ("Sstring_as_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34636 34657])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34681 34685]))                  
                :type "int")
                nil [34584 35356])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35962 35983])
                    ("" variable (:type ("Sstring_to_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35984 36005])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36029 36033]))                  
                :type "int")
                nil [35932 36552])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36651 36670])
                    ("" variable (:type ("Sstring_to_unibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36671 36690])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36714 36718]))                  
                :type "int")
                nil [36623 37085])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcopy_alist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37538 37550])
                    ("" variable (:type ("Scopy_alist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37551 37563])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37580 37584]))                  
                :type "int")
                nil [37517 37901])
            ("validate_subarray" function
               (:arguments 
                  ( ("array" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38457 38475])
                    ("from" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38476 38493])
                    ("to" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38494 38509])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38515 38530])
                    ("ifrom" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38531 38548])
                    ("ito" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38549 38564]))                  
                :type "void")
                nil [38433 39043])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39065 39076])
                    ("" variable (:type ("Ssubstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39077 39088])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39105 39109]))                  
                :type "int")
                nil [39045 39794])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubstring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40531 40556])
                    ("" variable (:type ("Ssubstring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40557 40582])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40599 40603]))                  
                :type "int")
                nil [40497 41036])
            ("substring_both" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41658 41677])
                    ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41678 41693])
                    ("from_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41694 41714])
                    ("to" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41717 41730])
                    ("to_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41731 41749]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41630 42309])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnthcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42329 42337])
                    ("" variable (:type ("Snthcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42338 42346])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42363 42367]))                  
                :type "int")
                nil [42312 42456])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnth" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44644 44649])
                    ("" variable (:type ("Snth" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44650 44655])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44672 44676]))                  
                :type "int")
                nil [44630 44816])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Felt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44871 44876])
                    ("" variable (:type ("Selt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44877 44882])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44899 44903]))                  
                :type "int")
                nil [44857 44990])
            ("" type
               (:members 
                  ( ("WORDS_PER_DOUBLE" variable
                       (:constant-flag t
                        :default-value (45234 45346)
                        :type "int")
                        (reparse-symbol enumsubparts) [45215 45346]))                  
                :type "enum")
                nil [45208 45349])
            ("double_and_words" type
               (:members 
                  ( ("val" variable (:type "double") (reparse-symbol classsubparts) [45377 45388])
                    ("word" variable
                       (:dereference 1
                        :type ("EMACS_UINT" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [45391 45425]))                  
                :type "union")
                nil [45350 45428])
            ("same_float" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45632 45646])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45647 45661]))                  
                :type "bool")
                nil [45608 45885])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmember" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45904 45912])
                    ("" variable (:type ("Smember" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45913 45921])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45938 45942]))                  
                :type "int")
                nil [45887 46121])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmemq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46301 46307])
                    ("" variable (:type ("Smemq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46308 46314])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46331 46335]))                  
                :type "int")
                nil [46286 46511])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmemql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46679 46686])
                    ("" variable (:type ("Smemql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46687 46694])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46711 46715]))                  
                :type "int")
                nil [46663 46892])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fassq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47173 47179])
                    ("" variable (:type ("Sassq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47180 47186])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47203 47207]))                  
                :type "int")
                nil [47158 47433])
            ("assq_no_quit" function
               (:arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47772 47788])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47789 47806]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [47746 47956])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fassoc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47974 47981])
                    ("" variable (:type ("Sassoc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47982 47989])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48006 48010]))                  
                :type "int")
                nil [47958 48278])
            ("assoc_no_quit" function
               (:arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48835 48851])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48852 48869]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48808 49081])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frassq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49099 49106])
                    ("" variable (:type ("Srassq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49107 49114])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49131 49135]))                  
                :type "int")
                nil [49083 49311])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frassoc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49517 49525])
                    ("" variable (:type ("Srassoc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49526 49534])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49551 49555]))                  
                :type "int")
                nil [49500 49738])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50006 50012])
                    ("" variable (:type ("Sdelq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50013 50019])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50036 50040]))                  
                :type "int")
                nil [49991 50516])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50841 50849])
                    ("" variable (:type ("Sdelete" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50850 50858])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50875 50879]))                  
                :type "int")
                nil [50824 51512])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnreverse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53470 53480])
                    ("" variable (:type ("Snreverse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53481 53491])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53508 53512]))                  
                :type "int")
                nil [53451 53708])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Freverse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54826 54835])
                    ("" variable (:type ("Sreverse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54836 54845])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54862 54866]))                  
                :type "int")
                nil [54808 55011])
            ("sort_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56420 56437])
                    ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56438 56460]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [56390 56858])
            ("inorder" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pred" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57005 57022])
                    ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57023 57037])
                    ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57038 57052]))                  
                :type "bool")
                nil [56984 57092])
            ("merge_vectors" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pred" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57313 57330])
                    ("alen" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57339 57354])
                    ("a" variable
                       (:dereference 1
                        :constant-flag t
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57355 57402])
                    ("blen" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57411 57426])
                    ("b" variable
                       (:dereference 1
                        :constant-flag t
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57427 57465])
                    ("dest" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57474 57516]))                  
                :type "void")
                nil [57286 57972])
            ("sort_vector_inplace" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pred" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58128 58145])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58146 58160])
                    ("vec" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58168 58210])
                    ("tmp" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58218 58265]))                  
                :type "void")
                nil [58095 58534])
            ("sort_vector_copy" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pred" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58656 58673])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58674 58688])
                    ("src" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58693 58735])
                    ("dest" variable
                       (:dereference 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58740 58783]))                  
                :type "void")
                nil [58626 59144])
            ("sort_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59279 59298])
                    ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59299 59321]))                  
                :type "void")
                nil [59254 59653])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsort" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59670 59676])
                    ("" variable (:type ("Ssort" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59677 59683])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59700 59704]))                  
                :type "int")
                nil [59655 60030])
            ("merge" function
               (:arguments 
                  ( ("org_l1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60253 60272])
                    ("org_l2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60273 60292])
                    ("pred" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60293 60310]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [60234 60933])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fplist_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61035 61046])
                    ("" variable (:type ("Splist_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61047 61058])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61075 61079]))                  
                :type "int")
                nil [61015 61414])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61689 61694])
                    ("" variable (:type ("Sget" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61695 61700])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61717 61721]))                  
                :type "int")
                nil [61675 61888])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fplist_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62179 62190])
                    ("" variable (:type ("Splist_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62191 62202])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62219 62223]))                  
                :type "int")
                nil [62159 62703])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fput" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63263 63268])
                    ("" variable (:type ("Sput" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63269 63274])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63291 63295]))                  
                :type "int")
                nil [63249 63468])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flax_plist_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63632 63647])
                    ("" variable (:type ("Slax_plist_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63648 63663])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63680 63684]))                  
                :type "int")
                nil [63608 64004])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flax_plist_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64358 64373])
                    ("" variable (:type ("Slax_plist_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64374 64389])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64406 64410]))                  
                :type "int")
                nil [64334 64908])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65428 65433])
                    ("" variable (:type ("Seql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65434 65439])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65456 65460]))                  
                :type "int")
                nil [65414 65786])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fequal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66019 66026])
                    ("" variable (:type ("Sequal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66027 66034])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66051 66055]))                  
                :type "int")
                nil [66003 66468])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fequal_including_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66579 66607])
                    ("" variable (:type ("Sequal_including_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66608 66636])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66653 66657]))                  
                :type "int")
                nil [66542 66879])
            ("equal_no_quit" function
               (:arguments 
                  ( ("o1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67177 67192])
                    ("o2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67193 67208]))                  
                :type "bool")
                nil [67157 67270])
            ("internal_equal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("o1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67842 67857])
                    ("o2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67858 67873])
                    ("equal_kind" variable (:type ("equal_kind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [67874 67901])
                    ("depth" variable (:type "int") (reparse-symbol arg-sub-list) [67904 67914])
                    ("ht" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67915 67930]))                  
                :type "bool")
                nil [67814 71729])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffillarray" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71753 71764])
                    ("" variable (:type ("Sfillarray" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71765 71776])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71793 71797]))                  
                :type "int")
                nil [71733 71939])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fclear_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73112 73126])
                    ("" variable (:type ("Sclear_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73127 73141])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73165 73169]))                  
                :type "int")
                nil [73089 73283])
            ("nconc2" function
               (:arguments 
                  ( ("s1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73507 73522])
                    ("s2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73523 73538]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [73487 73575])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnconc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73593 73600])
                    ("" variable (:type ("Snconc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73601 73608])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73612 73617])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73628 73632]))                  
                :type "int")
                nil [73577 73819])
            ("mapcar1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("leni" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74683 74698])
                    ("vals" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [74699 74717])
                    ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74718 74733])
                    ("seq" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74734 74750]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [74657 75708])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75730 75741])
                    ("" variable (:type ("Smapconcat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75742 75753])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75770 75774]))                  
                :type "int")
                nil [75710 76129])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76767 76775])
                    ("" variable (:type ("Smapcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76776 76784])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76801 76805]))                  
                :type "int")
                nil [76750 77045])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77400 77406])
                    ("" variable (:type ("Smapc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77407 77413])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77430 77434]))                  
                :type "int")
                nil [77385 77682])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapcan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77908 77916])
                    ("" variable (:type ("Smapcan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77917 77925])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77942 77946]))                  
                :type "int")
                nil [77891 78171])
            ("do_yes_or_no_p" function
               (:arguments 
                  ( ("prompt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78627 78646]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78599 78699])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fyes_or_no_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78723 78736])
                    ("" variable (:type ("Syes_or_no_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78737 78750])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78767 78771]))                  
                :type "int")
                nil [78701 79224])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fload_average" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80228 80242])
                    ("" variable (:type ("Sload_average" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80243 80257])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80274 80278]))                  
                :type "int")
                nil [80205 80924])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffeaturep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81334 81344])
                    ("" variable (:type ("Sfeaturep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81345 81355])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81372 81376]))                  
                :type "int")
                nil [81315 81803])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprovide" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82055 82064])
                    ("" variable (:type ("Sprovide" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82065 82074])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82091 82095]))                  
                :type "int")
                nil [82037 82340])
            ("require_nesting_list" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83038 83078])
            ("require_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83108 83130]))                  
                :type "void")
                nil [83080 83170])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frequire" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83190 83199])
                    ("" variable (:type ("Srequire" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83200 83209])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83226 83230]))                  
                :type "int")
                nil [83172 84127])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fplist_member" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87116 87130])
                    ("" variable (:type ("Splist_member" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87131 87145])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87162 87166]))                  
                :type "int")
                nil [87093 87540])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwidget_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87854 87866])
                    ("" variable (:type ("Swidget_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87867 87879])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87896 87900]))                  
                :type "int")
                nil [87833 88058])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwidget_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88189 88201])
                    ("" variable (:type ("Swidget_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88202 88214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88231 88235]))                  
                :type "int")
                nil [88168 88419])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwidget_apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88786 88800])
                    ("" variable (:type ("Swidget_apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88801 88815])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88819 88824])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88835 88839]))                  
                :type "int")
                nil [88763 89046])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocale_info" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89402 89415])
                    ("" variable (:type ("Slocale_info" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89416 89429])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89446 89450]))                  
                :type "int")
                nil [89380 90188])
            ("MIME_LINE_LENGTH" variable (:constant-flag t) nil [91963 91979])
            ("IS_ASCII" variable (:constant-flag t) nil [91992 92000])
            ("IS_BASE64" variable (:constant-flag t) nil [92044 92053])
            ("IS_BASE64_IGNORABLE" variable (:constant-flag t) nil [92140 92159])
            ("READ_QUADRUPLET_BYTE" variable (:constant-flag t) nil [92444 92464])
            ("base64_value_to_char" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',	/*  0- 9 */
  'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',	/* 10-19 */
  'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',	/* 20-29 */
  'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',	/* 30-39 */
  'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',	/* 40-49 */
  'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',	/* 50-59 */
  '8', '9', '+', '/'					/* 60-63 */
}"
                :type "char")
                nil [92742 93212])
            ("base64_char_to_value" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,	/*   0-  9 */
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,	/*  10- 19 */
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,	/*  20- 29 */
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,	/*  30- 39 */
  -1,  -1,  -1,  62,  -1,  -1,  -1,  63,  52,  53,	/*  40- 49 */
  54,  55,  56,  57,  58,  59,  60,  61,  -1,  -1,	/*  50- 59 */
  -1,  -1,  -1,  -1,  -1,  0,   1,   2,   3,   4,	/*  60- 69 */
  5,   6,   7,   8,   9,   10,  11,  12,  13,  14,	/*  70- 79 */
  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,	/*  80- 89 */
  25,  -1,  -1,  -1,  -1,  -1,  -1,  26,  27,  28,	/*  90- 99 */
  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,	/* 100-109 */
  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,	/* 110-119 */
  49,  50,  51,  -1,  -1,  -1,  -1,  -1			/* 120-127 */
}"
                :type "short")
                nil [93270 94156])
            ("base64_encode_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [94854 94867])
                    ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [94868 94875])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94876 94886])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [94887 94892])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [94893 94898]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [94820 94899])
            ("base64_decode_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [94934 94947])
                    ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [94948 94955])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94956 94966])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [94967 94972])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94979 94991]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [94900 94992])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbase64_encode_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95025 95047])
                    ("" variable (:type ("Sbase64_encode_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95048 95070])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95096 95100]))                  
                :type "int")
                nil [94994 95345])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbase64_encode_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97062 97084])
                    ("" variable (:type ("Sbase64_encode_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97085 97107])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97131 97135]))                  
                :type "int")
                nil [97031 97326])
            ("base64_encode_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [98324 98341])
                    ("to" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [98342 98351])
                    ("length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98352 98369])
                    ("line_break" variable (:type "bool") (reparse-symbol arg-sub-list) [98373 98389])
                    ("multibyte" variable (:type "bool") (reparse-symbol arg-sub-list) [98390 98405]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [98290 100058])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbase64_decode_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100092 100114])
                    ("" variable (:type ("Sbase64_decode_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100115 100137])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100163 100167]))                  
                :type "int")
                nil [100061 100374])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbase64_decode_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102191 102213])
                    ("" variable (:type ("Sbase64_decode_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102214 102236])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102260 102264]))                  
                :type "int")
                nil [102160 102339])
            ("base64_decode_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [103290 103307])
                    ("to" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [103308 103317])
                    ("length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103318 103335])
                    ("multibyte" variable (:type "bool") (reparse-symbol arg-sub-list) [103339 103354])
                    ("nchars_return" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103355 103380]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [103256 104783])
            ("weak_hash_tables" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105774 105822])
            ("CHECK_HASH_TABLE" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106024 106038]))                  
                :type "void")
                nil [105994 106093])
            ("set_hash_key_and_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106131 106157])
                    ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106158 106184]))                  
                :type "void")
                nil [106095 106224])
            ("set_hash_next" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106252 106278])
                    ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106279 106296]))                  
                :type "void")
                nil [106225 106318])
            ("set_hash_next_slot" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106351 106377])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106378 106392])
                    ("val" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106393 106407]))                  
                :type "void")
                nil [106319 106456])
            ("set_hash_hash" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106484 106510])
                    ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106511 106528]))                  
                :type "void")
                nil [106457 106550])
            ("set_hash_hash_slot" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106583 106609])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106610 106624])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106625 106641]))                  
                :type "void")
                nil [106551 106676])
            ("set_hash_index" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106705 106731])
                    ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106732 106750]))                  
                :type "void")
                nil [106677 106774])
            ("set_hash_index_slot" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106808 106834])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106835 106849])
                    ("val" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106850 106864]))                  
                :type "void")
                nil [106775 106914])
            ("check_hash_table" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107083 107099]))                  
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [107033 107157])
            ("next_almost_prime" function
               (:arguments 
                  ( ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107402 107414]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [107373 107549])
            ("get_key_arg" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107886 107902])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107903 107919])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107920 107938])
                    ("used" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [107939 107950]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [107856 108119])
            ("larger_vecalloc" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108440 108456])
                    ("incr_min" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108457 108476])
                    ("nitems_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108477 108498]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [108404 109181])
            ("larger_vector" function
               (:arguments 
                  ( ("vec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109283 109299])
                    ("incr_min" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109300 109319])
                    ("nitems_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109320 109341]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109256 109577])
            ("HASH_NEXT" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [109872 109898])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109899 109913]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [109844 109957])
            ("HASH_INDEX" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110129 110155])
                    ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110156 110170]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [110100 110215])
            ("cmpfn_eql" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110380 110407])
                    ("key1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110412 110429])
                    ("key2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110434 110451]))                  
                :type "bool")
                nil [110357 110663])
            ("cmpfn_equal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [110802 110829])
                    ("key1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110836 110853])
                    ("key2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110860 110877]))                  
                :type "bool")
                nil [110777 110919])
            ("cmpfn_user_defined" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111078 111105])
                    ("key1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111112 111129])
                    ("key2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111136 111153]))                  
                :type "bool")
                nil [111046 111217])
            ("hashfn_eq" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111412 111439])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111440 111456]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [111383 111496])
            ("hashfn_equal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111697 111724])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111725 111741]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [111665 111771])
            ("hashfn_eql" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [111968 111995])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111996 112012]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [111938 112113])
            ("hashfn_user_defined" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112338 112365])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112366 112382]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [112299 112475])
            ("hashtest_eq" variable
               (:default-value "{ LISPSYM_INITIALLY (Qeq), LISPSYM_INITIALLY (Qnil),
		  LISPSYM_INITIALLY (Qnil), 0, hashfn_eq }"
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [112477 112884])
            ("hashtest_eql" variable
               (:default-value "{ LISPSYM_INITIALLY (Qeql), LISPSYM_INITIALLY (Qnil),
		   LISPSYM_INITIALLY (Qnil), cmpfn_eql, hashfn_eql }"
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [112477 112884])
            ("hashtest_equal" variable
               (:default-value "{ LISPSYM_INITIALLY (Qequal), LISPSYM_INITIALLY (Qnil),
		     LISPSYM_INITIALLY (Qnil), cmpfn_equal, hashfn_equal }"
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [112477 112884])
            ("allocate_hash_table" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [112990 112995]))                  
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [112937 113084])
            ("INDEX_SIZE_BOUND" variable (:constant-flag t) nil [113209 113225])
            ("make_hash_table" function
               (:arguments 
                  ( ("test" variable (:type ("hash_table_test" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [114475 114503])
                    ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114504 114519])
                    ("rehash_size" variable (:type "float") (reparse-symbol arg-sub-list) [114523 114541])
                    ("rehash_threshold" variable (:type "float") (reparse-symbol arg-sub-list) [114542 114565])
                    ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114569 114586])
                    ("pure" variable (:type "bool") (reparse-symbol arg-sub-list) [114587 114597]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [114446 116174])
            ("copy_hash_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h1" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [116315 116342]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116279 116842])
            ("maybe_resize_hash_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [117003 117029]))                  
                :type "void")
                nil [116966 119323])
            ("hash_lookup" function
               (:arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [119523 119549])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119550 119566])
                    ("hash" variable
                       (:pointer 1
                        :type ("EMACS_UINT" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [119567 119584]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [119500 120078])
            ("hash_put" function
               (:arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120277 120303])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120304 120320])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120321 120339])
                    ("hash" variable (:type ("EMACS_UINT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120343 120359]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [120257 121022])
            ("hash_remove_from_table" function
               (:arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [121128 121154])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121155 121171]))                  
                :type "void")
                nil [121099 122153])
            ("hash_clear" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122208 122234]))                  
                :type "void")
                nil [122184 122652])
            ("sweep_weak_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123084 123110])
                    ("remove_entries_p" variable (:type "bool") (reparse-symbol arg-sub-list) [123111 123133]))                  
                :type "bool")
                nil [123054 124923])
            ("sweep_weak_hash_tables" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [125183 125188]))                  
                :type "void")
                nil [125154 126263])
            ("SXHASH_MAX_DEPTH" variable (:constant-flag t) nil [126513 126529])
            ("SXHASH_MAX_LEN" variable (:constant-flag t) nil [126626 126640])
            ("hash_string" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [126777 126793])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126794 126808]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [126753 127009])
            ("sxhash_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [127170 127186])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127187 127201]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [127137 127280])
            ("sxhash_float" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type "double") (reparse-symbol arg-sub-list) [127370 127381]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [127338 127574])
            ("sxhash_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127742 127759])
                    ("depth" variable (:type "int") (reparse-symbol arg-sub-list) [127760 127770]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [127711 128186])
            ("sxhash_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128325 128341])
                    ("depth" variable (:type "int") (reparse-symbol arg-sub-list) [128342 128352]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [128292 128651])
            ("sxhash_bool_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("vec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128737 128753]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [128699 129012])
            ("sxhash_bignum" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("bignum" variable
                       (:pointer 1
                        :type ("Lisp_Bignum" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129083 129110]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [129050 129315])
            ("sxhash" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129477 129493])
                    ("depth" variable (:type "int") (reparse-symbol arg-sub-list) [129494 129504]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [129458 130698])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsxhash_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130893 130904])
                    ("" variable (:type ("Ssxhash_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130905 130916])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130933 130937]))                  
                :type "int")
                nil [130873 131071])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsxhash_eql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131144 131156])
                    ("" variable (:type ("Ssxhash_eql" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131157 131169])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131186 131190]))                  
                :type "int")
                nil [131123 131328])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsxhash_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131404 131418])
                    ("" variable (:type ("Ssxhash_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131419 131433])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131450 131454]))                  
                :type "int")
                nil [131381 131600])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_hash_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131681 131698])
                    ("" variable (:type ("Smake_hash_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131699 131716])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131720 131725])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131736 131740]))                  
                :type "int")
                nil [131655 133366])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcopy_hash_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136415 136432])
                    ("" variable (:type ("Scopy_hash_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136433 136450])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136467 136471]))                  
                :type "int")
                nil [136389 136536])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136623 136641])
                    ("" variable (:type ("Shash_table_count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136642 136660])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136677 136681]))                  
                :type "int")
                nil [136596 136751])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_rehash_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136847 136871])
                    ("" variable (:type ("Shash_table_rehash_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136879 136903])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136920 136924]))                  
                :type "int")
                nil [136814 136995])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_rehash_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137277 137306])
                    ("" variable (:type ("Shash_table_rehash_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137314 137343])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137360 137364]))                  
                :type "int")
                nil [137239 137440])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137539 137556])
                    ("" variable (:type ("Shash_table_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137557 137574])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137591 137595]))                  
                :type "int")
                nil [137513 137804])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_test" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137937 137954])
                    ("" variable (:type ("Shash_table_test" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137955 137972])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137989 137993]))                  
                :type "int")
                nil [137911 138051])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_weakness" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138134 138155])
                    ("" variable (:type ("Shash_table_weakness" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138156 138177])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138201 138205]))                  
                :type "int")
                nil [138104 138265])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fhash_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138336 138350])
                    ("" variable (:type ("Shash_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138351 138365])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138382 138386]))                  
                :type "int")
                nil [138313 138459])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fclrhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138525 138534])
                    ("" variable (:type ("Sclrhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138535 138544])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138561 138565]))                  
                :type "int")
                nil [138507 138633])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgethash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138811 138820])
                    ("" variable (:type ("Sgethash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138821 138830])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138847 138851]))                  
                :type "int")
                nil [138793 139026])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fputhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139195 139204])
                    ("" variable (:type ("Sputhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139205 139214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139231 139235]))                  
                :type "int")
                nil [139177 139449])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fremhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139740 139749])
                    ("" variable (:type ("Sremhash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139750 139759])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139776 139780]))                  
                :type "int")
                nil [139722 139850])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmaphash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140008 140017])
                    ("" variable (:type ("Smaphash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140018 140027])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140044 140048]))                  
                :type "int")
                nil [139990 140235])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefine_hash_table_test" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140496 140520])
                    ("" variable (:type ("Sdefine_hash_table_test" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140528 140552])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140569 140573]))                  
                :type "int")
                nil [140463 141151])
            ("md5.h" include nil nil [141395 141411])
            ("sha1.h" include nil nil [141412 141429])
            ("sha256.h" include nil nil [141430 141449])
            ("sha512.h" include nil nil [141450 141469])
            ("make_digest_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("digest" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141510 141529])
                    ("digest_size" variable (:type "int") (reparse-symbol arg-sub-list) [141530 141546]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [141471 141822])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsecure_hash_algorithms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141857 141881])
                    ("" variable (:type ("Ssecure_hash_algorithms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141889 141913])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141930 141934]))                  
                :type "int")
                nil [141824 142011])
            ("extract_data_from_object" function
               (:pointer 1
                :arguments 
                  ( ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142465 142482])
                    ("start_byte" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142509 142531])
                    ("end_byte" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142558 142578]))                  
                :type "char")
                nil [142432 147350])
            ("secure_hash" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("algorithm" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147444 147466])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147467 147486])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147487 147505])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147512 147528])
                    ("coding_system" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147529 147555])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147556 147576])
                    ("binary" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147583 147602]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [147412 149187])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmd5" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149203 149208])
                    ("" variable (:type ("Smd5" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149209 149214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149231 149235]))                  
                :type "int")
                nil [149189 150535])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsecure_hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150642 150655])
                    ("" variable (:type ("Ssecure_hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150656 150669])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150686 150690]))                  
                :type "int")
                nil [150620 151237])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151339 151352])
                    ("" variable (:type ("Sbuffer_hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151353 151366])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151383 151387]))                  
                :type "int")
                nil [151317 151607])
            ("syms_of_fns" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [152459 152464]))                  
                :type "void")
                nil [152441 157997]))          
      :file "fns.c"
      :pointmax 157998
      :fsize 157997
      :lastmodtime '(23446 2094 652232 411000)
      :unmatched-syntax '((semantic-list 151608 . 152437) (punctuation 151386 . 151387) (number 151373 . 151374) (number 151370 . 151371) (number 151367 . 151368) (string 151324 . 151337) (semantic-list 151238 . 151315) (punctuation 150689 . 150690) (number 150676 . 150677) (number 150673 . 150674) (number 150670 . 150671) (string 150627 . 150640) (semantic-list 150536 . 150618) (punctuation 149234 . 149235) (number 149221 . 149222) (number 149218 . 149219) (number 149215 . 149216) (string 149196 . 149201) (semantic-list 142012 . 142195) (punctuation 141933 . 141934) (number 141920 . 141921) (number 141917 . 141918) (number 141914 . 141915) (string 141831 . 141855) (semantic-list 141152 . 141215) (punctuation 140572 . 140573) (number 140559 . 140560) (number 140556 . 140557) (number 140553 . 140554) (string 140470 . 140494) (semantic-list 140236 . 140460) (punctuation 140047 . 140048) (number 140034 . 140035) (number 140031 . 140032) (number 140028 . 140029) (string 139997 . 140006) (semantic-list 139851 . 139987) (punctuation 139779 . 139780) (number 139766 . 139767) (number 139763 . 139764) (number 139760 . 139761) (string 139729 . 139738) (semantic-list 139450 . 139719) (punctuation 139234 . 139235) (number 139221 . 139222) (number 139218 . 139219) (number 139215 . 139216) (string 139184 . 139193) (semantic-list 139027 . 139174) (punctuation 138850 . 138851) (number 138837 . 138838) (number 138834 . 138835) (number 138831 . 138832) (string 138800 . 138809) (semantic-list 138634 . 138790) (punctuation 138564 . 138565) (number 138551 . 138552) (number 138548 . 138549) (number 138545 . 138546) (string 138514 . 138523) (semantic-list 138460 . 138504) (punctuation 138385 . 138386) (number 138372 . 138373) (number 138369 . 138370) (number 138366 . 138367) (string 138320 . 138334) (semantic-list 138266 . 138310) (punctuation 138204 . 138205) (number 138191 . 138192) (number 138188 . 138189) (number 138185 . 138186) (string 138111 . 138132) (semantic-list 138052 . 138101) (punctuation 137992 . 137993) (number 137979 . 137980) (number 137976 . 137977) (number 137973 . 137974) (string 137918 . 137935) (semantic-list 137805 . 137908) (punctuation 137594 . 137595) (number 137581 . 137582) (number 137578 . 137579) (number 137575 . 137576) (string 137520 . 137537) (semantic-list 137441 . 137510) (punctuation 137363 . 137364) (number 137350 . 137351) (number 137347 . 137348) (number 137344 . 137345) (string 137246 . 137275) (semantic-list 136996 . 137236) (punctuation 136923 . 136924) (number 136910 . 136911) (number 136907 . 136908) (number 136904 . 136905) (string 136821 . 136845) (semantic-list 136752 . 136811) (punctuation 136680 . 136681) (number 136667 . 136668) (number 136664 . 136665) (number 136661 . 136662) (string 136603 . 136621) (semantic-list 136537 . 136593) (punctuation 136470 . 136471) (number 136457 . 136458) (number 136454 . 136455) (number 136451 . 136452) (string 136396 . 136413) (semantic-list 133367 . 136386) (punctuation 131739 . 131740) (number 131726 . 131727) (number 131717 . 131718) (string 131662 . 131679) (semantic-list 131601 . 131653) (punctuation 131453 . 131454) (number 131440 . 131441) (number 131437 . 131438) (number 131434 . 131435) (string 131388 . 131402) (semantic-list 131329 . 131379) (punctuation 131189 . 131190) (number 131176 . 131177) (number 131173 . 131174) (number 131170 . 131171) (string 131130 . 131142) (semantic-list 131072 . 131121) (punctuation 130936 . 130937) (number 130923 . 130924) (number 130920 . 130921) (number 130917 . 130918) (string 130880 . 130891) (symbol 125114 . 125123) (semantic-list 102340 . 103028) (punctuation 102263 . 102264) (number 102250 . 102251) (number 102247 . 102248) (number 102244 . 102245) (string 102167 . 102189) (semantic-list 100375 . 102158) (punctuation 100166 . 100167) (string 100151 . 100154) (number 100148 . 100149) (number 100145 . 100146) (string 100068 . 100090) (semantic-list 97327 . 98288) (punctuation 97134 . 97135) (number 97121 . 97122) (number 97118 . 97119) (number 97115 . 97116) (string 97038 . 97060) (semantic-list 95346 . 97029) (punctuation 95099 . 95100) (string 95084 . 95087) (number 95081 . 95082) (number 95078 . 95079) (string 95001 . 95023) (semantic-list 90189 . 91868) (punctuation 89449 . 89450) (number 89436 . 89437) (number 89433 . 89434) (number 89430 . 89431) (string 89387 . 89400) (semantic-list 89047 . 89319) (punctuation 88838 . 88839) (number 88825 . 88826) (number 88816 . 88817) (string 88770 . 88784) (semantic-list 88420 . 88761) (punctuation 88234 . 88235) (number 88221 . 88222) (number 88218 . 88219) (number 88215 . 88216) (string 88175 . 88187) (semantic-list 88059 . 88166) (punctuation 87899 . 87900) (number 87886 . 87887) (number 87883 . 87884) (number 87880 . 87881) (string 87840 . 87852) (semantic-list 87541 . 87831) (punctuation 87165 . 87166) (number 87152 . 87153) (number 87149 . 87150) (number 87146 . 87147) (string 87100 . 87114) (semantic-list 84128 . 86726) (punctuation 83229 . 83230) (number 83216 . 83217) (number 83213 . 83214) (number 83210 . 83211) (string 83179 . 83188) (semantic-list 82341 . 82927) (punctuation 82094 . 82095) (number 82081 . 82082) (number 82078 . 82079) (number 82075 . 82076) (string 82044 . 82053) (semantic-list 81804 . 82035) (punctuation 81375 . 81376) (number 81362 . 81363) (number 81359 . 81360) (number 81356 . 81357) (string 81322 . 81332) (semantic-list 80925 . 81312) (punctuation 80277 . 80278) (number 80264 . 80265) (number 80261 . 80262) (number 80258 . 80259) (string 80212 . 80226) (semantic-list 79225 . 80202) (punctuation 78770 . 78771) (number 78757 . 78758) (number 78754 . 78755) (number 78751 . 78752) (string 78708 . 78721) (semantic-list 78172 . 78510) (punctuation 77945 . 77946) (number 77932 . 77933) (number 77929 . 77930) (number 77926 . 77927) (string 77898 . 77906) (semantic-list 77683 . 77889) (punctuation 77433 . 77434) (number 77420 . 77421) (number 77417 . 77418) (number 77414 . 77415) (string 77392 . 77398) (semantic-list 77046 . 77383) (punctuation 76804 . 76805) (number 76791 . 76792) (number 76788 . 76789) (number 76785 . 76786) (string 76757 . 76765) (semantic-list 76130 . 76748) (punctuation 75773 . 75774) (number 75760 . 75761) (number 75757 . 75758) (number 75754 . 75755) (string 75717 . 75728) (semantic-list 73820 . 74278) (punctuation 73631 . 73632) (number 73618 . 73619) (number 73609 . 73610) (string 73584 . 73591) (semantic-list 73284 . 73469) (punctuation 73168 . 73169) (number 73155 . 73156) (number 73152 . 73153) (number 73149 . 73150) (string 73096 . 73110) (semantic-list 71940 . 73087) (punctuation 71796 . 71797) (number 71783 . 71784) (number 71780 . 71781) (number 71777 . 71778) (string 71740 . 71751) (semantic-list 66880 . 66971) (punctuation 66656 . 66657) (number 66643 . 66644) (number 66640 . 66641) (number 66637 . 66638) (string 66549 . 66577) (semantic-list 66469 . 66540) (punctuation 66054 . 66055) (number 66041 . 66042) (number 66038 . 66039) (number 66035 . 66036) (string 66010 . 66017) (semantic-list 65787 . 66001) (punctuation 65459 . 65460) (number 65446 . 65447) (number 65443 . 65444) (number 65440 . 65441) (string 65421 . 65426) (semantic-list 64909 . 65411) (punctuation 64409 . 64410) (number 64396 . 64397) (number 64393 . 64394) (number 64390 . 64391) (string 64341 . 64356) (semantic-list 64005 . 64332) (punctuation 63683 . 63684) (number 63670 . 63671) (number 63667 . 63668) (number 63664 . 63665) (string 63615 . 63630) (semantic-list 63469 . 63605) (punctuation 63294 . 63295) (number 63281 . 63282) (number 63278 . 63279) (number 63275 . 63276) (string 63256 . 63261) (semantic-list 62704 . 63247) (punctuation 62222 . 62223) (number 62209 . 62210) (number 62206 . 62207) (number 62203 . 62204) (string 62166 . 62177) (semantic-list 61889 . 62157) (punctuation 61720 . 61721) (number 61707 . 61708) (number 61704 . 61705) (number 61701 . 61702) (string 61682 . 61687) (semantic-list 61415 . 61673) (punctuation 61078 . 61079) (number 61065 . 61066) (number 61062 . 61063) (number 61059 . 61060) (string 61022 . 61033) (semantic-list 60031 . 60232) (punctuation 59703 . 59704) (number 59690 . 59691) (number 59687 . 59688) (number 59684 . 59685) (string 59662 . 59668) (semantic-list 55012 . 56291) (punctuation 54865 . 54866) (number 54852 . 54853) (number 54849 . 54850) (number 54846 . 54847) (string 54815 . 54824) (semantic-list 53709 . 54806) (punctuation 53511 . 53512) (number 53498 . 53499) (number 53495 . 53496) (number 53492 . 53493) (string 53458 . 53468) (semantic-list 51513 . 53449) (punctuation 50878 . 50879) (number 50865 . 50866) (number 50862 . 50863) (number 50859 . 50860) (string 50831 . 50839) (semantic-list 50517 . 50822) (punctuation 50039 . 50040) (number 50026 . 50027) (number 50023 . 50024) (number 50020 . 50021) (string 49998 . 50004) (semantic-list 49739 . 49988) (punctuation 49554 . 49555) (number 49541 . 49542) (number 49538 . 49539) (number 49535 . 49536) (string 49507 . 49515) (semantic-list 49312 . 49498) (punctuation 49134 . 49135) (number 49121 . 49122) (number 49118 . 49119) (number 49115 . 49116) (string 49090 . 49097) (semantic-list 48279 . 48608) (punctuation 48009 . 48010) (number 47996 . 47997) (number 47993 . 47994) (number 47990 . 47991) (string 47965 . 47972) (semantic-list 47434 . 47620) (punctuation 47206 . 47207) (number 47193 . 47194) (number 47190 . 47191) (number 47187 . 47188) (string 47165 . 47171) (semantic-list 46893 . 47156) (punctuation 46714 . 46715) (number 46701 . 46702) (number 46698 . 46699) (number 46695 . 46696) (string 46670 . 46677) (semantic-list 46512 . 46661) (punctuation 46334 . 46335) (number 46321 . 46322) (number 46318 . 46319) (number 46315 . 46316) (string 46293 . 46299) (semantic-list 46122 . 46284) (punctuation 45941 . 45942) (number 45928 . 45929) (number 45925 . 45926) (number 45922 . 45923) (string 45894 . 45902) (semantic-list 44991 . 45206) (punctuation 44902 . 44903) (number 44889 . 44890) (number 44886 . 44887) (number 44883 . 44884) (string 44864 . 44869) (semantic-list 44817 . 44855) (punctuation 44675 . 44676) (number 44662 . 44663) (number 44659 . 44660) (number 44656 . 44657) (string 44637 . 44642) (semantic-list 42457 . 44628) (punctuation 42366 . 42367) (number 42353 . 42354) (number 42350 . 42351) (number 42347 . 42348) (string 42319 . 42327) (semantic-list 41037 . 41522) (punctuation 40602 . 40603) (number 40589 . 40590) (number 40586 . 40587) (number 40583 . 40584) (string 40504 . 40529) (semantic-list 39795 . 40494) (punctuation 39108 . 39109) (number 39095 . 39096) (number 39092 . 39093) (number 39089 . 39090) (string 39052 . 39063) (semantic-list 37902 . 38189) (punctuation 37583 . 37584) (number 37570 . 37571) (number 37567 . 37568) (number 37564 . 37565) (string 37524 . 37536) (semantic-list 37086 . 37513) (punctuation 36717 . 36718) (number 36704 . 36705) (number 36701 . 36702) (number 36698 . 36699) (string 36630 . 36649) (semantic-list 36553 . 36621) (punctuation 36032 . 36033) (number 36019 . 36020) (number 36016 . 36017) (number 36013 . 36014) (string 35939 . 35960) (semantic-list 35357 . 35930) (punctuation 34684 . 34685) (number 34671 . 34672) (number 34668 . 34669) (number 34665 . 34666) (string 34591 . 34612) (semantic-list 34283 . 34582) (punctuation 33946 . 33947) (number 33933 . 33934) (number 33930 . 33931) (number 33927 . 33928) (string 33859 . 33878) (semantic-list 33782 . 33850) (punctuation 33464 . 33465) (number 33451 . 33452) (number 33448 . 33449) (number 33445 . 33446) (string 33371 . 33392) (semantic-list 33292 . 33362) (punctuation 32679 . 32680) (number 32666 . 32667) (number 32663 . 32664) (number 32660 . 32661) (string 32580 . 32603) (semantic-list 18877 . 19511) (punctuation 18589 . 18590) (number 18576 . 18577) (number 18573 . 18574) (number 18570 . 18571) (string 18521 . 18536) (semantic-list 18457 . 18511) (punctuation 18190 . 18191) (number 18177 . 18178) (number 18168 . 18169) (string 18137 . 18146) (semantic-list 18078 . 18128) (punctuation 17784 . 17785) (number 17771 . 17772) (number 17762 . 17763) (string 17734 . 17742) (semantic-list 17677 . 17725) (punctuation 17344 . 17345) (number 17331 . 17332) (number 17322 . 17323) (string 17294 . 17302) (semantic-list 16405 . 16868) (punctuation 15198 . 15199) (number 15185 . 15186) (number 15182 . 15183) (number 15179 . 15180) (string 15106 . 15129) (semantic-list 14635 . 15097) (punctuation 13468 . 13469) (number 13455 . 13456) (number 13452 . 13453) (number 13449 . 13450) (string 13379 . 13401) (semantic-list 12671 . 13370) (punctuation 12129 . 12130) (number 12116 . 12117) (number 12113 . 12114) (number 12110 . 12111) (string 12033 . 12055) (semantic-list 11293 . 12024) (punctuation 11075 . 11076) (number 11062 . 11063) (number 11059 . 11060) (number 11056 . 11057) (string 11010 . 11024) (semantic-list 9474 . 11001) (punctuation 8155 . 8156) (number 8142 . 8143) (number 8139 . 8140) (number 8136 . 8137) (string 8081 . 8098) (semantic-list 7778 . 8072) (punctuation 7559 . 7560) (number 7546 . 7547) (number 7543 . 7544) (number 7540 . 7541) (string 7494 . 7508) (semantic-list 5880 . 7485) (punctuation 5429 . 5430) (number 5416 . 5417) (number 5413 . 5414) (number 5410 . 5411) (string 5355 . 5372) (semantic-list 5278 . 5346) (punctuation 5136 . 5137) (number 5123 . 5124) (number 5120 . 5121) (number 5117 . 5118) (string 5071 . 5085) (semantic-list 4731 . 5062) (CONST 4701 . 4706) (punctuation 4699 . 4700) (punctuation 4537 . 4538) (number 4524 . 4525) (number 4521 . 4522) (number 4518 . 4519) (string 4469 . 4484) (semantic-list 4367 . 4460) (punctuation 4038 . 4039) (number 4025 . 4026) (number 4022 . 4023) (number 4019 . 4020) (string 3976 . 3989) (semantic-list 3182 . 3967) (punctuation 2855 . 2856) (number 2842 . 2843) (number 2839 . 2840) (number 2836 . 2837) (string 2808 . 2816) (semantic-list 2174 . 2757) (punctuation 1702 . 1703) (number 1689 . 1690) (number 1686 . 1687) (number 1683 . 1684) (string 1655 . 1663) (semantic-list 1629 . 1646) (CONST 1602 . 1607) (punctuation 1600 . 1601) (punctuation 1543 . 1544) (number 1530 . 1531) (number 1527 . 1528) (number 1524 . 1525) (string 1490 . 1500))
      :lexical-table 
        '(("INDEX_SIZE_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, PTRDIFF_MAX / word_size))" 113230 . 113295)))
          ("SXHASH_MAX_LEN" . ((number "7" 126643 . 126644)))
          ("IS_ASCII" (spp-arg-list ("Character") 92000 . 92011) . ((semantic-list "((Character) < 128)" 92016 . 92035)))
          ("IS_BASE64" (spp-arg-list ("Character") 92053 . 92064) . ((semantic-list "(IS_ASCII (Character) && base64_char_to_value[Character] >= 0)" 92069 . 92131)))
          ("MIME_LINE_LENGTH" . ((number "76" 91980 . 91982)))
          ("READ_QUADRUPLET_BYTE" (spp-arg-list ("retval") 92464 . 92472) . 
              ((DO "do" 92477 . 92479) (semantic-list "{					\\
      if (i == length)			\\
	{				\\
	  if (nchars_return)		\\
	    *nchars_return = nchars;	\\
	  return (retval);		\\
	}				\\
      c = from[i++];			\\
    }" 92490 . 92651) (WHILE "while" 92660 . 92665) (semantic-list "(IS_BASE64_IGNORABLE (c))" 92666 . 92691)))
          ("IS_BASE64_IGNORABLE" (spp-arg-list ("Character") 92159 . 92170) . ((semantic-list "((Character) == ' ' || (Character) == '\\t' || (Character) == '\\n' \\
   || (Character) == '\\f' || (Character) == '\\r')" 92175 . 92292)))
          ("SXHASH_MAX_DEPTH" . ((number "3" 126530 . 126531)))
          )
)
    (semanticdb-table "semanticdb-table-1afb3c4"
      :major-mode c-mode
      :tags 
        '( ("EMACS_GNUTLS_DEFINED" variable (:constant-flag t) nil [769 789])
            ("syms_of_gnutls" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3132 3137]))                  
                :type "void")
                nil [3104 3138]))          
      :file "gnutls.h"
      :pointmax 3147
      :fsize 3146
      :lastmodtime '(23443 29220 19854 31000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMACS_GNUTLS_DEFINED")
          )
)
    (semanticdb-table "semanticdb-table-1afb3e4"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [789 808])
            ("errno.h" include (:system-flag t) nil [810 828])
            ("stdio.h" include (:system-flag t) nil [829 847])
            ("stdlib.h" include (:system-flag t) nil [848 867])
            ("limits.h" include (:system-flag t) nil [868 887])
            ("signal.h" include (:system-flag t) nil [910 929])
            ("lisp.h" include nil nil [1012 1029])
            ("bignum.h" include nil nil [1030 1049])
            ("dispextern.h" include nil nil [1050 1073])
            ("intervals.h" include nil nil [1074 1096])
            ("ptr-bounds.h" include nil nil [1097 1120])
            ("puresize.h" include nil nil [1121 1142])
            ("sheap.h" include nil nil [1143 1161])
            ("systime.h" include nil nil [1162 1182])
            ("character.h" include nil nil [1183 1205])
            ("buffer.h" include nil nil [1206 1225])
            ("window.h" include nil nil [1226 1245])
            ("keyboard.h" include nil nil [1246 1267])
            ("frame.h" include nil nil [1268 1286])
            ("blockinput.h" include nil nil [1287 1310])
            ("termhooks.h" include nil nil [1311 1333])
            ("flexmember.h" include (:system-flag t) nil [1443 1466])
            ("verify.h" include (:system-flag t) nil [1467 1486])
            ("execinfo.h" include (:system-flag t) nil [1487 1508])
            ("unistd.h" include (:system-flag t) nil [2578 2597])
            ("fcntl.h" include (:system-flag t) nil [2598 2616])
            ("alloc_unexec_pre" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4754 4759]))                  
                :type "void")
                nil [4731 4976])
            ("alloc_unexec_post" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5002 5007]))                  
                :type "void")
                nil [4978 5131])
            ("MARK_STRING" variable (:constant-flag t) nil [5252 5263])
            ("UNMARK_STRING" variable (:constant-flag t) nil [5311 5324])
            ("STRING_MARKED_P" variable (:constant-flag t) nil [5372 5387])
            ("VECTOR_MARK" variable (:constant-flag t) nil [5441 5452])
            ("VECTOR_UNMARK" variable (:constant-flag t) nil [5503 5516])
            ("VECTOR_MARKED_P" variable (:constant-flag t) nil [5567 5582])
            ("GC_DEFAULT_THRESHOLD" variable (:constant-flag t) nil [5695 5715])
            ("globals" variable (:type ("emacs_globals" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [5763 5792])
            ("consing_since_gc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5853 5880])
            ("gc_relative_threshold" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5942 5974])
            ("memory_full_cons_threshold" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [6068 6105])
            ("gc_in_progress" variable (:type "bool") nil [6131 6151])
            ("total_conses" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6197 6257])
            ("total_symbols" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6197 6257])
            ("total_buffers" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6197 6257])
            ("total_free_conses" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6258 6313])
            ("total_free_symbols" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6258 6313])
            ("total_free_floats" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6314 6363])
            ("total_floats" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6314 6363])
            ("spare_memory" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :type "char")
                nil [6528 6557])
            ("SPARE_MEMORY" variable (:constant-flag t) nil [6713 6725])
            ("pure" variable
               (:dereference 1
                :default-value "{1,}"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [7069 7149])
            ("PUREBEG" variable (:constant-flag t) nil [7158 7165])
            ("purebeg" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [7229 7250])
            ("pure_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7251 7278])
            ("pure_bytes_used_before_overflow" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7421 7470])
            ("pure_bytes_used_lisp" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7545 7583])
            ("pure_bytes_used_non_lisp" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7657 7699])
            ("pending_malloc_warning" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [7785 7820])
            ("SUSPICIOUS_OBJECT_CHECKING" variable (:constant-flag t) nil [8058 8084])
            ("suspicious_free_record" type
               (:members 
                  ( ("suspicious_object" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [8156 8180])
                    ("backtrace" variable
                       (:pointer 1
                        :dereference 1
                        :type "void")
                        (reparse-symbol classsubparts) [8183 8204]))                  
                :type "struct")
                nil [8122 8207])
            ("suspicious_objects" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :type "void")
                nil [8208 8244])
            ("suspicious_object_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [8245 8280])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [8339 8358])
            ("suspicious_free_history_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [8359 8400])
            ("find_suspicious_object_in_range" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("begin" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8567 8579])
                    ("end" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8580 8590]))                  
                :type "void")
                nil [8521 8591])
            ("detect_suspicious_free" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8628 8638]))                  
                :type "void")
                nil [8592 8639])
            ("MAX_SAVE_STACK" variable (:constant-flag t) nil [8848 8862])
            ("stack_copy" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [8966 8990])
            ("stack_copy_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [8991 9024])
            ("no_sanitize_memcpy" function
               (:arguments 
                  ( ("dest" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [9196 9207])
                    ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [9208 9224])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9225 9237]))                  
                :type ("ATTRIBUTE_NO_SANITIZE_ADDRESS" type (:type "class") nil nil))
                nil [9146 9455])
            ("unchain_finalizer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Finalizer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9521 9545]))                  
                :type "void")
                nil [9490 9546])
            ("mark_terminals" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9575 9580]))                  
                :type "void")
                nil [9547 9581])
            ("gc_sweep" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9604 9609]))                  
                :type "void")
                nil [9582 9610])
            ("make_pure_vector" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9648 9658]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9611 9659])
            ("mark_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9685 9701]))                  
                :type "void")
                nil [9660 9702])
            ("refill_memory_reserve" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9812 9817]))                  
                :type "void")
                nil [9777 9818])
            ("compact_small_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9861 9866]))                  
                :type "void")
                nil [9826 9867])
            ("free_large_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9900 9905]))                  
                :type "void")
                nil [9868 9906])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [9965 9984])
            ("mem_type" type
               (:members 
                  ( ("MEM_TYPE_NON_LISP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10226 10244])
                    ("MEM_TYPE_BUFFER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10247 10263])
                    ("MEM_TYPE_CONS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10266 10280])
                    ("MEM_TYPE_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10283 10299])
                    ("MEM_TYPE_SYMBOL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10302 10318])
                    ("MEM_TYPE_FLOAT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10321 10336])
                    ("MEM_TYPE_VECTORLIKE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10521 10541])
                    ("MEM_TYPE_VECTOR_BLOCK" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10591 10613])
                    ("MEM_TYPE_SPARE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10665 10681]))                  
                :type "enum")
                nil [10208 10682])
            ("Vdead" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10792 10817])
            ("DEADP" variable (:constant-flag t) nil [10826 10831])
            ("mem_node" type
               (:members 
                  ( ("left" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [12088 12118])
                    ("right" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [12088 12118])
                    ("parent" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [12189 12213])
                    ("start" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [12261 12279])
                    ("end" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [12261 12279])
                    ("color" variable (:type ("" type
                         (:members 
                            ( ("MEM_BLACK" variable
                                 (:constant-flag t
                                  :type "int")
                                  (reparse-symbol enumsubparts) [12310 12320])
                              ("MEM_RED" variable
                                 (:constant-flag t
                                  :type "int")
                                  (reparse-symbol enumsubparts) [12321 12329]))                            
                          :type "enum")
                          nil nil)) (reparse-symbol classsubparts) [12304 12336])
                    ("type" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [12362 12381]))                  
                :type "struct")
                nil [11922 12384])
            ("mem_root" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12445 12478])
            ("min_heap_address" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "void")
                nil [12534 12583])
            ("max_heap_address" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "void")
                nil [12534 12583])
            ("mem_z" variable
               (:typemodifiers ("static")
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12620 12649])
            ("MEM_NIL" variable (:constant-flag t) nil [12658 12665])
            ("mem_insert" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [12710 12717])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [12718 12725])
                    ("" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [12726 12740]))                  
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12674 12741])
            ("mem_insert_fixup" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12772 12790]))                  
                :type "void")
                nil [12742 12791])
            ("mem_rotate_left" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12821 12839]))                  
                :type "void")
                nil [12792 12840])
            ("mem_rotate_right" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12871 12889]))                  
                :type "void")
                nil [12841 12890])
            ("mem_delete" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12915 12933]))                  
                :type "void")
                nil [12891 12934])
            ("mem_delete_fixup" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12965 12983]))                  
                :type "void")
                nil [12935 12984])
            ("mem_find" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13019 13026]))                  
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12985 13027])
            ("" type
               (:members 
                  ( ("NSTATICS" variable
                       (:constant-flag t
                        :default-value (13213 13217)
                        :type "int")
                        (reparse-symbol enumsubparts) [13202 13217]))                  
                :type "enum")
                nil [13195 13220])
            ("staticvec" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :default-value "{&Vpurify_flag}"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13221 13279])
            ("staticidx" variable
               (:typemodifiers ("static")
                :type "int")
                nil [13329 13350])
            ("pure_alloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13377 13384])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [13385 13389]))                  
                :type "void")
                nil [13352 13390])
            ("POWER_OF_2" variable (:constant-flag t) nil [13458 13468])
            ("ROUNDUP" variable (:constant-flag t) nil [13736 13743])
            ("pointer_align" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13964 13974])
                    ("alignment" variable (:type "int") (reparse-symbol arg-sub-list) [13975 13989]))                  
                :type "void")
                nil [13935 14049])
            ("macro_PNTR_ADD" variable (:constant-flag t) nil [14447 14461])
            ("PNTR_ADD" function
               (:pointer 1
                :arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [14554 14562])
                    ("i" variable (:type ("EMACS_UINT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14563 14576]))                  
                :type "char")
                nil [14537 14612])
            ("macro_XPNTR" variable (:constant-flag t) nil [14750 14761])
            ("XPNTR" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15078 15092]))                  
                :type "void")
                nil [15064 15122])
            ("XFLOAT_INIT" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15220 15234])
                    ("n" variable (:type "double") (reparse-symbol arg-sub-list) [15235 15244]))                  
                :type "void")
                nil [15195 15274])
            ("finalizers" variable
               (:typemodifiers ("static")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15861 15901])
            ("doomed_finalizers" variable
               (:typemodifiers ("static")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [16138 16185])
            ("malloc_warning" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16527 16543]))                  
                :type "void")
                nil [16506 16579])
            ("display_malloc_warning" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16669 16674]))                  
                :type "void")
                nil [16640 16831])
            ("buffer_memory_full" function
               (:arguments 
                  ( ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16927 16944]))                  
                :type "void")
                nil [16902 17519])
            ("COMMON_MULTIPLE" variable (:constant-flag t) nil [17743 17758])
            ("" type
               (:members 
                  ( ("LISP_ALIGNMENT" variable
                       (:constant-flag t
                        :default-value (18471 18534)
                        :type "int")
                        (reparse-symbol enumsubparts) [18454 18534]))                  
                :type "enum")
                nil [18447 18537])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LISP_ALIGNMENT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18546 18562])
                    ("" variable (:type ("GCALIGNMENT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18563 18576]))                  
                :type "int")
                nil [18538 18581])
            ("" type
               (:members 
                  ( ("MALLOC_IS_LISP_ALIGNED" variable
                       (:constant-flag t
                        :default-value (19150 19188)
                        :type "int")
                        (reparse-symbol enumsubparts) [19125 19188]))                  
                :type "enum")
                nil [19118 19196])
            ("XMALLOC_OVERRUN_CHECK_OVERHEAD" variable (:constant-flag t) nil [19236 19266])
            ("MALLOC_BLOCK_INPUT" variable (:constant-flag t) nil [25077 25095])
            ("MALLOC_UNBLOCK_INPUT" variable (:constant-flag t) nil [25116 25136])
            ("MALLOC_PROBE" variable (:constant-flag t) nil [25164 25176])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:prototype-flag t
                :type "int")
                nil [25313 25341])
            ("lrealloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [25365 25372])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25373 25380]))                  
                :type "void")
                nil [25342 25381])
            ("xmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25470 25482]))                  
                :type "void")
                nil [25454 25652])
            ("xzalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25736 25748]))                  
                :type "void")
                nil [25720 25943])
            ("xrealloc" function
               (:pointer 1
                :arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [26035 26047])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26048 26060]))                  
                :type "void")
                nil [26018 26385])
            ("xfree" function
               (:arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [26445 26457]))                  
                :type "void")
                nil [26433 26667])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26834 26843])
                    ("" variable (:type ("PTRDIFF_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26845 26857]))                  
                :type "int")
                nil [26826 26858])
            ("xnmalloc" function
               (:pointer 1
                :arguments 
                  ( ("nitems" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27013 27030])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27031 27051]))                  
                :type "void")
                nil [26996 27248])
            ("xnrealloc" function
               (:pointer 1
                :arguments 
                  ( ("pa" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [27420 27429])
                    ("nitems" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27430 27447])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27448 27468]))                  
                :type "void")
                nil [27402 27670])
            ("xpalloc" function
               (:pointer 1
                :arguments 
                  ( ("pa" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28686 28695])
                    ("nitems" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28696 28714])
                    ("nitems_incr_min" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28715 28741])
                    ("nitems_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28744 28765])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28766 28786]))                  
                :type "void")
                nil [28670 30138])
            ("xstrdup" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [30196 30210]))                  
                :type "char")
                nil [30180 30315])
            ("xlispstrdup" function
               (:pointer 1
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30397 30416]))                  
                :type "char")
                nil [30377 30517])
            ("dupstring" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [30761 30772])
                    ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [30773 30792]))                  
                :type "void")
                nil [30745 30871])
            ("xputenv" function
               (:arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [30991 31010]))                  
                :type "void")
                nil [30977 31072])
            ("record_xmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31199 31211]))                  
                :type "void")
                nil [31176 31295])
            ("EXTERNALLY_VISIBLE" variable (:type ("lisp_malloc_loser" type (:type "class") nil nil)) nil [31521 31558])
            ("lisp_malloc" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("nbytes" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31594 31608])
                    ("type" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [31609 31628]))                  
                :type "void")
                nil [31567 32433])
            ("lisp_free" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [32555 32567]))                  
                :type "void")
                nil [32532 32697])
            ("BLOCK_ALIGN" variable (:constant-flag t) nil [32975 32986])
            ("verify" function
               (:prototype-flag t
                :type "int")
                nil [32997 33031])
            ("USE_ALIGNED_ALLOC" variable (:constant-flag t) nil [33439 33456])
            ("BLOCK_PADDING" variable (:constant-flag t) nil [34918 34931])
            ("BLOCK_BYTES" variable (:constant-flag t) nil [34942 34953])
            ("ABLOCKS_SIZE" variable (:constant-flag t) nil [35073 35085])
            ("x" variable (:type ("" type
                 (:members 
                    ( ("payload" variable
                         (:dereference 1
                          :type "char")
                          (reparse-symbol classsubparts) [35157 35183])
                      ("next_free" variable
                         (:pointer 1
                          :type ("ablock" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [35188 35213]))                    
                  :type "union")
                  nil nil)) nil [35143 35220])
            ("abase" variable
               (:pointer 1
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [35793 35815])
            ("blocks" variable
               (:dereference 1
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [36070 36105])
            ("ABLOCKS_BYTES" variable (:constant-flag t) nil [36183 36196])
            ("ABLOCK_ABASE" variable (:constant-flag t) nil [36248 36260])
            ("ABLOCKS_BUSY" variable (:constant-flag t) nil [36427 36439])
            ("ABLOCKS_BASE" variable (:constant-flag t) nil [36572 36584])
            ("free_ablock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [36751 36785])
            ("base" variable
               (:pointer 1
                :type "void")
                nil [37007 37024])
            ("val" variable
               (:pointer 1
                :type "void")
                nil [37007 37024])
            ("abase" variable
               (:pointer 1
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37027 37049])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37062 37070]))                  
                :type "int")
                nil [37053 37085])
            ("abase" variable
               (:default-value "ABLOCK_ABASE (free_ablock)"
                :type "int")
                nil [39069 39104])
            ("val" variable
               (:default-value "free_ablock"
                :type "int")
                nil [39194 39212])
            ("free_ablock" variable
               (:default-value "free_ablock->x.next_free;"
                :type "int")
                nil [39215 39254])
            ("mem_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39329 39333])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39343 39348])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39349 39356])
                    ("" variable (:type ("type" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39357 39362]))                  
                :type "int")
                nil [39317 39363])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [39425 39472])
            ("val" variable (:type "int") nil [39482 39486])
            ("ablock" variable
               (:pointer 1
                :default-value "block"
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [39536 39566])
            ("abase" variable
               (:pointer 1
                :default-value "ABLOCK_ABASE (ablock)"
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [39569 39615])
            ("mem_delete" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("mem_find" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39677 39693]))                  
                :type "int")
                nil [39665 39695])
            ("next_free" variable
               (:default-value "free_ablock"
                :type "int")
                nil [39742 39766])
            ("free_ablock" variable
               (:default-value "ablock"
                :type "int")
                nil [39769 39790])
            ("busy" variable
               (:default-value "(intptr_t) ABLOCKS_BUSY (abase) - 2"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [39821 39873])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("busy" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39890 39897])
                    ("" variable (:type ("busy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39898 39904]))                  
                :type "int")
                nil [39876 39928])
            ("busy" variable (:type "int") nil [39973 39978])
            ("aligned_alloc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LISP_ALIGNMENT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42071 42086])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42087 42092]))                  
                :type "int")
                nil [42056 42093])
            ("INTERVAL_BLOCK_SIZE" variable (:constant-flag t) nil [42835 42854])
            ("intervals" variable
               (:dereference 1
                :type ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [43103 43150])
            ("next" variable
               (:pointer 1
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [43153 43181])
            ("interval_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [43265 43310])
            ("interval_block_index" variable
               (:typemodifiers ("static")
                :default-value "INTERVAL_BLOCK_SIZE"
                :type "int")
                nil [43392 43446])
            ("total_free_intervals" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [43491 43546])
            ("total_intervals" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [43491 43546])
            ("interval_free_list" variable
               (:typemodifiers ("static")
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [43580 43615])
            ("val" variable (:type ("INTERVAL" type (:type "class") nil nil)) nil [43682 43695])
            ("RESET_INTERVAL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44360 44364]))                  
                :type "int")
                nil [44344 44365])
            ("gcmarkbit" variable
               (:default-value "0"
                :type "int")
                nil [44373 44387])
            ("val" variable (:type "int") nil [44397 44401])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44662 44664])
                    ("" variable (:type ("gcmarkbit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44665 44675]))                  
                :type "int")
                nil [44652 44676])
            ("gcmarkbit" variable
               (:default-value "1"
                :type "int")
                nil [44682 44696])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44712 44714])
                    ("" variable (:type ("plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44715 44721]))                  
                :type "int")
                nil [44699 44722])
            ("MARK_INTERVAL_TREE" variable (:constant-flag t) nil [44778 44796])
            ("SBLOCK_SIZE" variable (:constant-flag t) nil [46411 46422])
            ("LARGE_STRING_BYTES" variable (:constant-flag t) nil [46572 46590])
            ("string" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47156 47183])
            ("data" variable
               (:dereference 1
                :type "unsigned char")
                nil [47244 47286])
            ("string" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47443 47470])
            ("n" variable (:type ("" type
                 (:members 
                    ( ("string" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [48038 48065])
                      ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [48070 48087]))                    
                  :type "struct")
                  nil nil)) nil [48023 48094])
            ("sdata" variable (:type "int") nil [48097 48103])
            ("SDATA_NBYTES" variable (:constant-flag t) nil [48113 48125])
            ("SDATA_DATA" variable (:constant-flag t) nil [48151 48161])
            ("next" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48570 48590])
            ("next_free" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [48731 48748])
            ("data" variable
               (:dereference 1
                :type ("sdata" type (:type "class") nil nil))
                nil [48774 48808])
            ("STRING_BLOCK_SIZE" variable (:constant-flag t) nil [48925 48942])
            ("strings" variable
               (:dereference 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49188 49234])
            ("next" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49237 49263])
            ("oldest_sblock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49481 49534])
            ("current_sblock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49481 49534])
            ("large_sblocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49579 49615])
            ("string_blocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49658 49700])
            ("string_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49737 49781])
            ("total_strings" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49829 49880])
            ("total_free_strings" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49829 49880])
            ("total_string_bytes" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49928 49964])
            ("NEXT_FREE_LISP_STRING" variable (:constant-flag t) nil [50119 50140])
            ("SDATA_OF_STRING" variable (:constant-flag t) nil [50437 50452])
            ("GC_STRING_OVERRUN_COOKIE_SIZE" variable (:constant-flag t) nil [50915 50944])
            ("SDATA_SIZE" variable (:constant-flag t) nil [51586 51596])
            ("GC_STRING_EXTRA" variable (:constant-flag t) nil [52012 52027])
            ("empty_unibyte_string" variable
               (:default-value "make_pure_string (\"\", 0, 0, 0)"
                :type "int")
                nil [52703 52757])
            ("empty_multibyte_string" variable
               (:default-value "make_pure_string (\"\", 0, 0, 1)"
                :type "int")
                nil [52760 52816])
            ("check_string_bytes" variable (:constant-flag t) nil [54526 54544])
            ("check_string_free_list" variable (:constant-flag t) nil [55038 55060])
            ("s" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [55160 55182])
            ("s" variable
               (:default-value "string_free_list"
                :type "int")
                nil [55920 55941])
            ("string_free_list" variable
               (:default-value "NEXT_FREE_LISP_STRING (s)"
                :type "int")
                nil [55944 55989])
            ("total_free_strings" variable (:type "int") nil [56020 56039])
            ("total_strings" variable (:type "int") nil [56044 56058])
            ("strings_consed" variable (:type "int") nil [56063 56078])
            ("s" variable
               (:pointer 1
                :type "int")
                nil [56108 56111])
            ("s" variable (:type "int") nil [56369 56371])
            ("data" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [56819 56842])
            ("old_data" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [56819 56842])
            ("b" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [56845 56862])
            ("needed" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [56865 56894])
            ("old_nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [56865 56894])
            ("string_overflow" function
               (:prototype-flag t
                :type "int")
                nil [56933 56952])
            ("needed" variable
               (:default-value "SDATA_SIZE (nbytes)"
                :type "int")
                nil [57045 57074])
            ("old_data" variable
               (:default-value "NULL"
                :type "int")
                nil [57192 57208])
            ("string" variable
               (:default-value "s"
                :type "int")
                nil [58270 58281])
            ("next_free" variable
               (:default-value "(sdata *) ((char *) data + needed + GC_STRING_EXTRA)"
                :type "int")
                nil [58287 58352])
            ("data" variable
               (:default-value "ptr_bounds_clip (SDATA_DATA (data), nbytes + 1)"
                :type "int")
                nil [58388 58443])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [58521 58535])
            ("size_byte" variable
               (:default-value "nbytes"
                :type "int")
                nil [58545 58564])
            ("data" variable
               (:dereference 1
                :default-value "'\\0'"
                :type "int")
                nil [58574 58594])
            ("needed" variable (:type "int") nil [59064 59071])
            ("b" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [59188 59218])
            ("next" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [59188 59218])
            ("live_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [59221 59261])
            ("string_free_list" variable
               (:default-value "NULL"
                :type "int")
                nil [59265 59289])
            ("total_free_strings" variable
               (:default-value "0"
                :type "int")
                nil [59308 59331])
            ("total_string_bytes" variable
               (:default-value "0"
                :type "int")
                nil [59334 59357])
            ("string_blocks" variable
               (:default-value "live_blocks"
                :type "int")
                nil [61371 61399])
            ("free_large_strings" function
               (:prototype-flag t
                :type "int")
                nil [61402 61424])
            ("compact_small_strings" function
               (:prototype-flag t
                :type "int")
                nil [61427 61452])
            ("b" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61562 61586])
            ("next" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61562 61586])
            ("live_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61589 61623])
            ("large_sblocks" variable
               (:default-value "live_blocks"
                :type "int")
                nil [61818 61846])
            ("tb" variable
               (:pointer 1
                :default-value "oldest_sblock"
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [62120 62154])
            ("current_sblock" variable
               (:default-value "tb"
                :type "int")
                nil [64597 64617])
            ("error" function
               (:prototype-flag t
                :type "int")
                nil [64653 64692])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65115 65140])
            ("c" variable (:type "int") nil [65143 65149])
            ("nbytes" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [65152 65169])
            ("CHECK_FIXNAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65187 65194]))                  
                :type "int")
                nil [65173 65195])
            ("CHECK_CHARACTER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("init" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65215 65220]))                  
                :type "int")
                nil [65198 65221])
            ("c" variable
               (:default-value "XFIXNAT (init)"
                :type "int")
                nil [65225 65244])
            ("val" variable (:type "int") nil [66220 66224])
            ("nbits" variable
               (:default-value "bool_vector_size (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [66382 66421])
            ("a" variable (:type "int") nil [66812 66814])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66951 66967])
            ("words" variable
               (:default-value "bool_vector_words (nbits)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [66970 67014])
            ("needed_elements" variable
               (:default-value "((bool_header_size - header_size + word_bytes
				+ word_size - 1)
			       / word_size)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [67070 67188])
            ("p" variable
               (:pointer 1
                :default-value "(struct Lisp_Bool_Vector *) allocate_vector (needed_elements)"
                :type ("Lisp_Bool_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [67191 67286])
            ("XSETVECTOR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67301 67305])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67306 67308]))                  
                :type "int")
                nil [67289 67309])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67330 67343])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67345 67362]))                  
                :type "int")
                nil [67312 67369])
            ("size" variable
               (:default-value "nbits"
                :type "int")
                nil [67375 67388])
            ("data" variable
               (:dereference 1
                :default-value "0"
                :type "int")
                nil [67445 67465])
            ("val" variable (:type "int") nil [67476 67480])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67766 67782])
            ("CHECK_FIXNAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67800 67807]))                  
                :type "int")
                nil [67786 67808])
            ("val" variable
               (:default-value "make_uninit_bool_vector (XFIXNAT (length))"
                :type "int")
                nil [67811 67860])
            ("bool_vector_fill" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67888 67892])
                    ("" variable (:type ("init" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67893 67898]))                  
                :type "int")
                nil [67870 67899])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68185 68197])
            ("vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68200 68219])
            ("vector" variable
               (:default-value "make_uninit_bool_vector (nargs)"
                :type "int")
                nil [68223 68264])
            ("bool_vector_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68316 68323])
                    ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68324 68326])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68328 68342]))                  
                :type "int")
                nil [68299 68344])
            ("vector" variable (:type "int") nil [68355 68362])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68619 68644])
            ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68647 68682])
            ("multibyte_nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68647 68682])
            ("parse_str_as_multibyte" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68734 68743])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68744 68751])
                    ("" variable (:type ("nchars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68758 68765])
                    ("" variable (:type ("multibyte_nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68767 68784]))                  
                :type "int")
                nil [68686 68785])
            ("val" variable
               (:default-value "make_unibyte_string (contents, nbytes)"
                :type "int")
                nil [68976 69021])
            ("val" variable
               (:default-value "make_multibyte_string (contents, nchars, nbytes)"
                :type "int")
                nil [69033 69088])
            ("val" variable (:type "int") nil [69098 69102])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69244 69269])
            ("val" variable
               (:default-value "make_uninit_string (length)"
                :type "int")
                nil [69272 69306])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69317 69328])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69330 69339])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69340 69347]))                  
                :type "int")
                nil [69309 69348])
            ("val" variable (:type "int") nil [69358 69362])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69567 69592])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [69595 69647])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69658 69669])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69671 69680])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69681 69688]))                  
                :type "int")
                nil [69650 69689])
            ("val" variable (:type "int") nil [69699 69703])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69940 69965])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [69968 70020])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70031 70042])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70044 70053])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70054 70061]))                  
                :type "int")
                nil [70023 70062])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70123 70127]))                  
                :type "int")
                nil [70103 70128])
            ("val" variable (:type "int") nil [70138 70142])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70504 70520])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [70689 70741])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70752 70763])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70765 70774])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70775 70782]))                  
                :type "int")
                nil [70744 70783])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70826 70830]))                  
                :type "int")
                nil [70806 70831])
            ("val" variable (:type "int") nil [70841 70845])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71001 71017])
            ("empty_unibyte_string" variable (:type "int") nil [71045 71066])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (length, length)"
                :type "int")
                nil [71069 71121])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71144 71148]))                  
                :type "int")
                nil [71124 71149])
            ("val" variable (:type "int") nil [71159 71163])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71352 71371])
            ("s" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [71374 71396])
            ("emacs_abort" function
               (:prototype-flag t
                :type "int")
                nil [71420 71435])
            ("empty_multibyte_string" variable (:type "int") nil [71462 71485])
            ("s" variable
               (:default-value "allocate_string ()"
                :type "int")
                nil [71489 71512])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [71522 71539])
            ("allocate_string_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71564 71566])
                    ("" variable (:type ("nchars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71567 71574])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71575 71582]))                  
                :type "int")
                nil [71542 71583])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71598 71605])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71606 71608]))                  
                :type "int")
                nil [71586 71609])
            ("nbytes" variable (:type "int") nil [71635 71642])
            ("string" variable (:type "int") nil [71652 71659])
            ("ap" variable (:type ("va_list" type (:type "class") nil nil)) nil [71857 71868])
            ("length" variable (:type "int") nil [71871 71882])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71896 71899])
                    ("" variable (:type ("format" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71900 71907]))                  
                :type "int")
                nil [71886 71908])
            ("length" variable
               (:default-value "vsprintf (buf, format, ap)"
                :type "int")
                nil [71911 71947])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71958 71961]))                  
                :type "int")
                nil [71950 71962])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71985 71989])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71990 71997]))                  
                :type "int")
                nil [71972 71998])
            ("FLOAT_BLOCK_SIZE" variable (:constant-flag t) nil [72443 72459])
            ("GETMARKBIT" variable (:constant-flag t) nil [72707 72717])
            ("SETMARKBIT" variable (:constant-flag t) nil [72840 72850])
            ("UNSETMARKBIT" variable (:constant-flag t) nil [72976 72988])
            ("FLOAT_BLOCK" variable (:constant-flag t) nil [73117 73128])
            ("FLOAT_INDEX" variable (:constant-flag t) nil [73217 73228])
            ("floats" variable
               (:dereference 1
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73409 73452])
            ("gcmarkbits" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [73455 73519])
            ("next" variable
               (:pointer 1
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73522 73547])
            ("FLOAT_MARKED_P" variable (:constant-flag t) nil [73560 73574])
            ("FLOAT_MARK" variable (:constant-flag t) nil [73648 73658])
            ("FLOAT_UNMARK" variable (:constant-flag t) nil [73732 73744])
            ("float_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73841 73880])
            ("float_block_index" variable
               (:typemodifiers ("static")
                :default-value "FLOAT_BLOCK_SIZE"
                :type "int")
                nil [73951 73999])
            ("float_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [74035 74077])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74185 74210])
            ("XFLOAT_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74823 74827])
                    ("" variable (:type ("float_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74828 74840]))                  
                :type "int")
                nil [74810 74841])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [74844 74885])
            ("val" variable (:type "int") nil [74987 74991])
            ("CONS_BLOCK_SIZE" variable (:constant-flag t) nil [75430 75445])
            ("CONS_BLOCK" variable (:constant-flag t) nil [75692 75702])
            ("CONS_INDEX" variable (:constant-flag t) nil [75788 75798])
            ("conses" variable
               (:dereference 1
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [75974 76015])
            ("gcmarkbits" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [76018 76081])
            ("next" variable
               (:pointer 1
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76084 76108])
            ("CONS_MARKED_P" variable (:constant-flag t) nil [76121 76134])
            ("CONS_MARK" variable (:constant-flag t) nil [76206 76215])
            ("CONS_UNMARK" variable (:constant-flag t) nil [76287 76298])
            ("cons_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76392 76429])
            ("cons_block_index" variable
               (:typemodifiers ("static")
                :default-value "CONS_BLOCK_SIZE"
                :type "int")
                nil [76493 76539])
            ("cons_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76584 76624])
            ("chain" variable
               (:default-value "cons_free_list"
                :type "int")
                nil [76748 76771])
            ("car" variable
               (:default-value "Vdead"
                :type "int")
                nil [76783 76795])
            ("cons_free_list" variable
               (:default-value "ptr"
                :type "int")
                nil [76798 76819])
            ("ptr" variable
               (:pointer 1
                :type "int")
                nil [76849 76854])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [77049 77074])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77670 77674])
                    ("" variable (:type ("car" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77675 77679]))                  
                :type "int")
                nil [77661 77680])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77692 77696])
                    ("" variable (:type ("cdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77697 77701]))                  
                :type "int")
                nil [77683 77702])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [77705 77744])
            ("val" variable (:type "int") nil [77849 77853])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78192 78197])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78198 78203]))                  
                :type "int")
                nil [78185 78204])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78281 78286])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78287 78305]))                  
                :type "int")
                nil [78274 78307])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78403 78408])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78409 78441]))                  
                :type "int")
                nil [78396 78443])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78557 78562])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78563 78609]))                  
                :type "int")
                nil [78550 78611])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78743 78748])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78749 78822]))                  
                :type "int")
                nil [78736 78824])
            ("cons" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79114 79126])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79127 79139]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79093 79140])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79308 79314]))                  
                :type "int")
                nil [79295 79315])
            ("val" variable
               (:default-value "cons (arg, Qnil)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79318 79353])
            ("tail" variable
               (:default-value "val"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79356 79379])
            ("ap" variable (:type ("va_list" type (:type "class") nil nil)) nil [79383 79394])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79407 79410])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79411 79415]))                  
                :type "int")
                nil [79397 79416])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79590 79593]))                  
                :type "int")
                nil [79582 79594])
            ("val" variable (:type "int") nil [79605 79609])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79870 79895])
            ("val" variable
               (:default-value "Qnil"
                :type "int")
                nil [79898 79909])
            ("val" variable (:type "int") nil [80005 80009])
            ("val" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [80208 80231])
            ("CHECK_FIXNAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80248 80255]))                  
                :type "int")
                nil [80234 80256])
            ("val" variable (:type "int") nil [80397 80401])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80902 80904])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80905 80916])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80918 80928])
                    ("" variable (:type ("Lisp_Vector" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [80929 80948]))                  
                :type "int")
                nil [80894 80949])
            ("contents" variable
               (:dereference 1
                :default-value "make_lisp_ptr (p, Lisp_Int0)"
                :type "int")
                nil [81035 81078])
            ("vroundup_ct" variable (:constant-flag t) nil [81688 81699])
            ("vroundup" variable (:constant-flag t) nil [81807 81815])
            ("vv" variable
               (:pointer 1
                :default-value "v"
                :type "void")
                nil [82672 82685])
            ("cv" variable
               (:pointer 1
                :default-value "vv"
                :type "char")
                nil [82688 82702])
            ("p" variable
               (:pointer 1
                :default-value "cv + nbytes"
                :type "void")
                nil [82705 82727])
            ("p" variable (:type "int") nil [82737 82739])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VBLOCK_BYTES_MIN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82878 82896])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82898 82905]))                  
                :type "int")
                nil [82869 82906])
            ("roundup_size" variable (:type "int") nil [82946 82959])
            ("next" variable
               (:pointer 1
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83493 83519])
            ("data" variable
               (:dereference 1
                :type "char")
                nil [83872 83902])
            ("next" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83905 83931])
            ("vector_blocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83968 84010])
            ("large_vectors" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84263 84305])
            ("zero_vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84372 84396])
            ("total_vectors" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [84430 84461])
            ("total_vector_slots" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [84530 84591])
            ("total_free_vector_slots" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [84530 84591])
            ("v" variable
               (:default-value "ptr_bounds_clip (v, nbytes)"
                :type "int")
                nil [84726 84758])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("header_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84770 84783])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84785 84792]))                  
                :type "int")
                nil [84761 84793])
            ("nwords" variable
               (:default-value "(nbytes - header_size) / word_size"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [84796 84850])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84871 84873])
                    ("" variable (:type ("PVEC_FREE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84874 84884])
                    ("" variable (:type ("nwords" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84888 84895]))                  
                :type "int")
                nil [84853 84896])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84908 84916])
                    ("" variable (:type ("roundup_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84917 84931]))                  
                :type "int")
                nil [84899 84936])
            ("vindex" variable
               (:default-value "VINDEX (nbytes)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [84939 84974])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vindex" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84986 84994])
                    ("" variable (:type ("VECTOR_MAX_FREE_LIST_INDEX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84995 85022]))                  
                :type "int")
                nil [84977 85023])
            ("set_next_vector" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85043 85045])
                    ("" variable (:type ("vector_free_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85046 85071]))                  
                :type "int")
                nil [85026 85073])
            ("vector_free_lists" variable
               (:dereference 1
                :default-value "v"
                :type "int")
                nil [85076 85106])
            ("word_size" variable (:type "int") nil [85145 85155])
            ("block" variable
               (:pointer 1
                :default-value "xmalloc (sizeof *block)"
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [85253 85306])
            ("mem_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("block" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85346 85352])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85353 85358])
                    ("" variable (:type ("block" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85359 85365])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85366 85372])
                    ("" variable (:type ("VECTOR_BLOCK_BYTES" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85373 85392])
                    ("" variable (:type ("MEM_TYPE_VECTOR_BLOCK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85400 85422]))                  
                :type "int")
                nil [85334 85423])
            ("next" variable
               (:default-value "vector_blocks"
                :type "int")
                nil [85441 85462])
            ("vector_blocks" variable
               (:default-value "block"
                :type "int")
                nil [85465 85487])
            ("block" variable (:type "int") nil [85497 85503])
            ("zero_vector" variable
               (:default-value "make_pure_vector (0)"
                :type "int")
                nil [85596 85631])
            ("vector" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [85758 85785])
            ("block" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [85788 85815])
            ("index" variable (:type ("size_t" type (:type "class") nil nil)) nil [85818 85842])
            ("restbytes" variable (:type ("size_t" type (:type "class") nil nil)) nil [85818 85842])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VBLOCK_BYTES_MIN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85855 85873])
                    ("" variable
                       (:reference 1
                        :type ("nbytes" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85875 85884])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85885 85893])
                    ("" variable (:type ("VBLOCK_BYTES_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85895 85912]))                  
                :type "int")
                nil [85846 85913])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85925 85933])
                    ("" variable (:type ("roundup_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85934 85948]))                  
                :type "int")
                nil [85916 85953])
            ("index" variable
               (:default-value "VINDEX (nbytes)"
                :type "int")
                nil [86053 86077])
            ("block" variable
               (:default-value "allocate_vector_block ()"
                :type "int")
                nil [87143 87176])
            ("vector" variable
               (:default-value "(struct Lisp_Vector *) block->data;"
                :type "int")
                nil [87240 87284])
            ("restbytes" variable
               (:default-value "VECTOR_BLOCK_BYTES - nbytes"
                :type "int")
                nil [87411 87451])
            ("vector" variable (:type "int") nil [87621 87628])
            ("VECTOR_IN_BLOCK" variable (:constant-flag t) nil [87705 87720])
            ("ARRAY_MARK_FLAG" variable (:type "int") nil [87970 87986])
            ("nwords" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [87989 88006])
            ("nwords" variable
               (:default-value "size"
                :type "int")
                nil [88605 88619])
            ("PSEUDOVEC_STRUCT" variable (:constant-flag t) nil [88867 88883])
            ("detect_suspicious_free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89194 89201]))                  
                :type "int")
                nil [89170 89202])
            ("mpz_clear" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verify_expr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89276 89314])
                    ("" variable (:type ("value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89316 89322]))                  
                :type "int")
                nil [89265 89323])
            ("unchain_finalizer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verify_expr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89412 89453]))                  
                :type "int")
                nil [89393 89455])
            ("finalize_one_thread" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verify_expr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90077 90116]))                  
                :type "int")
                nil [90056 90118])
            ("finalize_one_mutex" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verify_expr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90204 90241]))                  
                :type "int")
                nil [90184 90243])
            ("finalize_one_condvar" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verify_expr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90333 90372]))                  
                :type "int")
                nil [90311 90374])
            ("block" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [90956 91009])
            ("bprev" variable
               (:pointer 2
                :default-value "&vector_blocks"
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [90956 91009])
            ("lv" variable
               (:pointer 1
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [91012 91063])
            ("lvprev" variable
               (:pointer 2
                :default-value "&large_vectors"
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [91012 91063])
            ("vector" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [91066 91100])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [91066 91100])
            ("total_free_vector_slots" variable
               (:default-value "0"
                :type "int")
                nil [91141 91169])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector_free_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91180 91198]))                  
                :type "int")
                nil [91172 91230])
            ("XVECTOR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("zero_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93389 93401]))                  
                :type "int")
                nil [93380 93402])
            ("v" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [94407 94429])
            ("nbytes_max" variable
               (:default-value "min (PTRDIFF_MAX, SIZE_MAX)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [94432 94483])
            ("memory_full" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94582 94591]))                  
                :type "int")
                nil [94569 94592])
            ("v" variable
               (:default-value "allocate_vectorlike (len)"
                :type "int")
                nil [94595 94625])
            ("size" variable
               (:default-value "len"
                :type "int")
                nil [94651 94662])
            ("v" variable (:type "int") nil [94672 94674])
            ("v" variable
               (:pointer 1
                :default-value "allocate_vectorlike (memlen)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [94841 94894])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("tag" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94941 94947])
                    ("" variable (:type ("tag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94948 94953])
                    ("" variable (:type ("PVEC_FONT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94955 94965]))                  
                :type "int")
                nil [94927 94966])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("lisplen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94983 94993])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94994 95003])
                    ("" variable
                       (:reference 1
                        :type ("zerolen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95005 95015])
                    ("" variable (:type ("zerolen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95016 95025])
                    ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95027 95034]))                  
                :type "int")
                nil [94969 95035])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95047 95055])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95056 95065]))                  
                :type "int")
                nil [95038 95102])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95114 95123])
                    ("" variable (:type ("PSEUDOVECTOR_SIZE_MASK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95125 95148]))                  
                :type "int")
                nil [95105 95149])
            ("memclear" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95236 95238])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95239 95248])
                    ("word_size" variable
                       (:pointer 1
                        :type ("zerolen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95249 95269]))                  
                :type "int")
                nil [95226 95270])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95291 95293])
                    ("" variable (:type ("tag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95294 95298])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95299 95307])
                    ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95308 95316])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95317 95325]))                  
                :type "int")
                nil [95273 95326])
            ("v" variable (:type "int") nil [95336 95338])
            ("b" variable
               (:pointer 1
                :default-value "lisp_malloc (sizeof *b, MEM_TYPE_BUFFER)"
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [95385 95445])
            ("BUFFER_PVEC_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95467 95469]))                  
                :type "int")
                nil [95449 95470])
            ("next" variable
               (:default-value "all_buffers"
                :type "int")
                nil [95542 95561])
            ("all_buffers" variable
               (:default-value "b"
                :type "int")
                nil [95564 95580])
            ("b" variable (:type "int") nil [95651 95653])
            ("error" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pI" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95906 95928])
                    ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95934 95940])
                    ("" variable (:type ("PSEUDOVECTOR_SIZE_MASK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95941 95964]))                  
                :type "int")
                nil [95864 95965])
            ("p" variable
               (:pointer 1
                :default-value "allocate_vectorlike (count)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [95968 96020])
            ("size" variable
               (:default-value "count"
                :type "int")
                nil [96033 96046])
            ("XSETPVECTYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96063 96065])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96066 96078]))                  
                :type "int")
                nil [96049 96079])
            ("p" variable (:type "int") nil [96089 96091])
            ("CHECK_FIXNAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96432 96438]))                  
                :type "int")
                nil [96418 96439])
            ("size" variable
               (:default-value "XFIXNAT (slots) + 1"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [96442 96479])
            ("p" variable
               (:pointer 1
                :default-value "allocate_record (size)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96482 96529])
            ("contents" variable
               (:dereference 1
                :default-value "type"
                :type "int")
                nil [96535 96554])
            ("contents" variable
               (:dereference 1
                :default-value "init"
                :type "int")
                nil [96601 96620])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96645 96647])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96648 96664]))                  
                :type "int")
                nil [96630 96665])
            ("p" variable
               (:pointer 1
                :default-value "allocate_record (nargs)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [97011 97059])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97070 97072])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97073 97082])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97083 97088])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97089 97103])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97105 97110]))                  
                :type "int")
                nil [97062 97111])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97136 97138])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97139 97155]))                  
                :type "int")
                nil [97121 97156])
            ("CHECK_FIXNAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97409 97416]))                  
                :type "int")
                nil [97395 97417])
            ("p" variable
               (:pointer 1
                :default-value "allocate_vector (XFIXNAT (length))"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [97420 97479])
            ("contents" variable
               (:dereference 1
                :default-value "init"
                :type "int")
                nil [97538 97557])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97582 97584])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97585 97601]))                  
                :type "int")
                nil [97567 97602])
            ("val" variable
               (:default-value "make_uninit_vector (nargs)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97873 97918])
            ("p" variable
               (:pointer 1
                :default-value "XVECTOR (val)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [97921 97959])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97970 97972])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97973 97982])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97983 97988])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97989 98003])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98005 98010]))                  
                :type "int")
                nil [97962 98011])
            ("val" variable (:type "int") nil [98021 98025])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98164 98166])
                    ("" variable (:type ("header" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98167 98174])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98174 98179]))                  
                :type "int")
                nil [98151 98180])
            ("contents" variable
               (:dereference 1
                :default-value "Fstring_as_unibyte (v->contents[1])"
                :type "int")
                nil [98627 98677])
            ("XSETPVECTYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98694 98696])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98697 98711]))                  
                :type "int")
                nil [98680 98712])
            ("val" variable
               (:default-value "make_uninit_vector (nargs)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [99840 99885])
            ("p" variable
               (:pointer 1
                :default-value "XVECTOR (val)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99888 99926])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100421 100423])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100424 100433])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100434 100439])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [100440 100454])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100456 100461]))                  
                :type "int")
                nil [100413 100462])
            ("make_byte_code" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100481 100483]))                  
                :type "int")
                nil [100465 100484])
            ("XSETCOMPILED" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100501 100505])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100506 100508]))                  
                :type "int")
                nil [100487 100509])
            ("val" variable (:type "int") nil [100519 100523])
            ("SYMBOL_BLOCK_SIZE" variable (:constant-flag t) nil [100868 100885])
            ("symbols" variable
               (:dereference 1
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [101042 101088])
            ("next" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [101091 101117])
            ("symbol_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [101209 101250])
            ("symbol_block_index" variable
               (:typemodifiers ("static")
                :default-value "SYMBOL_BLOCK_SIZE"
                :type "int")
                nil [101251 101301])
            ("symbol_block_pinned" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [101725 101773])
            ("symbol_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [101805 101849])
            ("name" variable
               (:default-value "name"
                :type "int")
                nil [101938 101950])
            ("p" variable
               (:pointer 1
                :default-value "XSYMBOL (val)"
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [102011 102049])
            ("set_symbol_name" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102069 102073])
                    ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102074 102079]))                  
                :type "int")
                nil [102052 102080])
            ("set_symbol_plist" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102101 102105])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102106 102111]))                  
                :type "int")
                nil [102083 102112])
            ("redirect" variable
               (:default-value "SYMBOL_PLAINVAL"
                :type "int")
                nil [102122 102149])
            ("SET_SYMBOL_VAL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102168 102170])
                    ("" variable (:type ("Qunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102171 102180]))                  
                :type "int")
                nil [102152 102181])
            ("set_symbol_function" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102205 102209])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102210 102215]))                  
                :type "int")
                nil [102184 102216])
            ("set_symbol_next" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102236 102240])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102241 102246]))                  
                :type "int")
                nil [102219 102247])
            ("gcmarkbit" variable
               (:default-value "false"
                :type "int")
                nil [102257 102275])
            ("interned" variable
               (:default-value "SYMBOL_UNINTERNED"
                :type "int")
                nil [102285 102314])
            ("trapped_write" variable
               (:default-value "SYMBOL_UNTRAPPED_WRITE"
                :type "int")
                nil [102324 102363])
            ("declared_special" variable
               (:default-value "false"
                :type "int")
                nil [102373 102398])
            ("pinned" variable
               (:default-value "false"
                :type "int")
                nil [102408 102423])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [102668 102684])
            ("CHECK_STRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102702 102707]))                  
                :type "int")
                nil [102688 102708])
            ("init_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103279 103283])
                    ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103284 103289]))                  
                :type "int")
                nil [103266 103290])
            ("val" variable (:type "int") nil [103395 103399])
            ("p" variable
               (:pointer 1
                :default-value "ALLOCATE_PSEUDOVECTOR (struct Lisp_Misc_Ptr, pointer,
						   PVEC_MISC_PTR)"
                :type ("Lisp_Misc_Ptr" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [103446 103550])
            ("pointer" variable
               (:default-value "a"
                :type "int")
                nil [103556 103568])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103593 103595])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103596 103612]))                  
                :type "int")
                nil [103578 103613])
            ("p" variable
               (:pointer 1
                :default-value "ALLOCATE_PSEUDOVECTOR (struct Lisp_Overlay, next,
						  PVEC_OVERLAY)"
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [103769 103866])
            ("overlay" variable
               (:default-value "make_lisp_ptr (p, Lisp_Vectorlike)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [103869 103926])
            ("start" variable (:type "int") nil [103955 103961])
            ("end" variable (:type "int") nil [103988 103992])
            ("set_overlay_plist" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104014 104022])
                    ("" variable (:type ("plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104023 104029]))                  
                :type "int")
                nil [103995 104030])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [104036 104048])
            ("overlay" variable (:type "int") nil [104058 104066])
            ("p" variable
               (:pointer 1
                :default-value "ALLOCATE_PSEUDOVECTOR (struct Lisp_Marker, buffer,
						 PVEC_MARKER)"
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104229 104324])
            ("buffer" variable
               (:default-value "0"
                :type "int")
                nil [104330 104341])
            ("bytepos" variable
               (:default-value "0"
                :type "int")
                nil [104347 104359])
            ("charpos" variable
               (:default-value "0"
                :type "int")
                nil [104365 104377])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [104383 104395])
            ("insertion_type" variable
               (:default-value "0"
                :type "int")
                nil [104401 104420])
            ("need_adjustment" variable
               (:default-value "0"
                :type "int")
                nil [104426 104446])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104471 104473])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104474 104490]))                  
                :type "int")
                nil [104456 104491])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BUFFER_LIVE_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104745 104764]))                  
                :type "int")
                nil [104736 104766])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("charpos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104826 104835])
                    ("" variable (:type ("bytepos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104837 104845]))                  
                :type "int")
                nil [104817 104846])
            ("m" variable
               (:pointer 1
                :default-value "ALLOCATE_PSEUDOVECTOR (struct Lisp_Marker, buffer,
						 PVEC_MARKER)"
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104850 104945])
            ("buffer" variable
               (:default-value "buf"
                :type "int")
                nil [104951 104964])
            ("charpos" variable
               (:default-value "charpos"
                :type "int")
                nil [104970 104988])
            ("bytepos" variable
               (:default-value "bytepos"
                :type "int")
                nil [104994 105012])
            ("insertion_type" variable
               (:default-value "0"
                :type "int")
                nil [105018 105037])
            ("need_adjustment" variable
               (:default-value "0"
                :type "int")
                nil [105043 105063])
            ("next" variable
               (:default-value "BUF_MARKERS (buf)"
                :type "int")
                nil [105069 105094])
            ("m" variable (:type "int") nil [105117 105119])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("m" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105144 105146])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105147 105163]))                  
                :type "int")
                nil [105129 105164])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [105509 105521])
            ("Fvector" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nargs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105801 105807])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105808 105813]))                  
                :type "int")
                nil [105792 105814])
            ("next" variable
               (:default-value "head"
                :type "int")
                nil [106722 106734])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106906 106916])
                    ("" variable (:type ("prev" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106917 106923])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106925 106930]))                  
                :type "int")
                nil [106897 106931])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106943 106953])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106954 106960])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106962 106967]))                  
                :type "int")
                nil [106934 106968])
            ("next" variable
               (:default-value "element"
                :type "int")
                nil [106982 106997])
            ("prev" variable
               (:default-value "element->prev;"
                :type "int")
                nil [107011 107032])
            ("next" variable
               (:default-value "finalizer"
                :type "int")
                nil [107052 107069])
            ("prev" variable
               (:default-value "finalizer"
                :type "int")
                nil [107081 107098])
            ("finalizer" variable
               (:pointer 1
                :default-value "src->next;"
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [107947 107992])
            ("add_to_log" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108391 108396]))                  
                :type "int")
                nil [108355 108397])
            ("Qnil" variable (:type "int") nil [108407 108412])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [108478 108513])
            ("specbind" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qinhibit_quit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108527 108541])
                    ("" variable (:type ("Qt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108542 108545]))                  
                :type "int")
                nil [108517 108546])
            ("internal_condition_case_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("call0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108576 108582])
                    ("" variable (:type ("function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108583 108592])
                    ("" variable (:type ("Qt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108593 108596])
                    ("" variable (:type ("run_finalizer_handler" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108597 108619]))                  
                :type "int")
                nil [108549 108620])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108634 108640])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108641 108646]))                  
                :type "int")
                nil [108623 108647])
            ("finalizer" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108718 108751])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [108754 108775])
            ("finalizer" variable
               (:pointer 1
                :default-value "ALLOCATE_PSEUDOVECTOR (struct Lisp_Finalizer, prev, PVEC_FINALIZER)"
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [109529 109636])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [109650 109670])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [109702 109714])
            ("finalizer_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109736 109747])
                    ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109748 109758]))                  
                :type "int")
                nil [109717 109759])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109784 109794])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109795 109811]))                  
                :type "int")
                nil [109769 109812])
            ("enough_free_memory" variable
               (:default-value "0"
                :type "bool")
                nil [110459 110487])
            ("xsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111322 111327])
                    ("" variable (:type ("Vmemory_signal_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111328 111348]))                  
                :type "int")
                nil [111313 111349])
            ("spare_memory" variable
               (:dereference 1
                :default-value "malloc (SPARE_MEMORY)"
                :type "int")
                nil [111790 111830])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
						  MEM_TYPE_SPARE)"
                :type "int")
                nil [111863 111952])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [111985 112072])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [112105 112192])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [112225 112312])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_malloc (sizeof (struct string_block),
				   MEM_TYPE_SPARE)"
                :type "int")
                nil [112345 112429])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_malloc (sizeof (struct string_block),
				   MEM_TYPE_SPARE)"
                :type "int")
                nil [112462 112546])
            ("Vmemory_full" variable
               (:default-value "Qnil"
                :type "int")
                nil [112612 112632])
            ("right" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [113555 113571])
            ("parent" variable
               (:default-value "NULL"
                :type "int")
                nil [113580 113594])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [113603 113621])
            ("end" variable
               (:default-value "NULL"
                :type "int")
                nil [113644 113655])
            ("mem_root" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [113658 113677])
            ("p" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [113866 113885])
            ("mem_z" variable (:type "int") nil [113958 113966])
            ("start" variable
               (:default-value "start"
                :type "int")
                nil [114047 114061])
            ("end" variable
               (:default-value "(char *) start + 1"
                :type "int")
                nil [114070 114095])
            ("p" variable
               (:default-value "mem_root"
                :type "int")
                nil [114099 114112])
            ("right" variable (:type "int") nil [114199 114205])
            ("p" variable (:type "int") nil [114215 114217])
            ("c" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [114484 114516])
            ("parent" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [114484 114516])
            ("x" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [114484 114516])
            ("min_heap_address" variable
               (:default-value "start"
                :type "int")
                nil [114582 114607])
            ("max_heap_address" variable
               (:default-value "end"
                :type "int")
                nil [114670 114693])
            ("c" variable
               (:default-value "mem_root"
                :type "int")
                nil [114892 114905])
            ("parent" variable
               (:default-value "NULL"
                :type "int")
                nil [114908 114922])
            ("x" variable
               (:default-value "xmalloc (sizeof *x)"
                :type "int")
                nil [115149 115173])
            ("start" variable
               (:default-value "start"
                :type "int")
                nil [115186 115200])
            ("end" variable
               (:default-value "end"
                :type "int")
                nil [115206 115216])
            ("type" variable
               (:default-value "type"
                :type "int")
                nil [115222 115234])
            ("parent" variable
               (:default-value "parent"
                :type "int")
                nil [115240 115256])
            ("right" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [115272 115288])
            ("color" variable
               (:default-value "MEM_RED"
                :type "int")
                nil [115294 115310])
            ("mem_root" variable
               (:default-value "x"
                :type "int")
                nil [115493 115506])
            ("mem_insert_fixup" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115577 115579]))                  
                :type "int")
                nil [115559 115580])
            ("x" variable (:type "int") nil [115591 115593])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [117519 117537])
            ("y" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [117753 117772])
            ("y" variable
               (:default-value "x->right;"
                :type "int")
                nil [117833 117846])
            ("right" variable
               (:default-value "y->left;"
                :type "int")
                nil [117852 117868])
            ("parent" variable
               (:default-value "x"
                :type "int")
                nil [117908 117919])
            ("parent" variable
               (:default-value "x->parent;"
                :type "int")
                nil [117984 118003])
            ("mem_root" variable
               (:default-value "y"
                :type "int")
                nil [118185 118198])
            ("left" variable
               (:default-value "x"
                :type "int")
                nil [118233 118242])
            ("parent" variable
               (:default-value "y"
                :type "int")
                nil [118270 118281])
            ("y" variable
               (:pointer 1
                :default-value "x->left;"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [118502 118531])
            ("left" variable
               (:default-value "y->right;"
                :type "int")
                nil [118538 118554])
            ("parent" variable
               (:default-value "x"
                :type "int")
                nil [118596 118607])
            ("parent" variable
               (:default-value "x->parent;"
                :type "int")
                nil [118636 118655])
            ("mem_root" variable
               (:default-value "y"
                :type "int")
                nil [118785 118798])
            ("right" variable
               (:default-value "x"
                :type "int")
                nil [118805 118815])
            ("parent" variable
               (:default-value "y"
                :type "int")
                nil [118843 118854])
            ("x" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [118982 119005])
            ("y" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [118982 119005])
            ("y" variable
               (:default-value "z"
                :type "int")
                nil [119099 119105])
            ("x" variable
               (:default-value "y->left;"
                :type "int")
                nil [119223 119235])
            ("x" variable
               (:default-value "y->right;"
                :type "int")
                nil [119247 119260])
            ("parent" variable
               (:default-value "y->parent;"
                :type "int")
                nil [119267 119286])
            ("mem_root" variable
               (:default-value "x"
                :type "int")
                nil [119415 119428])
            ("mem_delete_fixup" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119583 119585]))                  
                :type "int")
                nil [119565 119586])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119638 119640]))                  
                :type "int")
                nil [119631 119641])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [121371 121389])
            ("Qnil" variable (:type "int") nil [122359 122364])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_string_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122442 122468]))                  
                :type "int")
                nil [122436 122470])
            ("Qnil" variable (:type "int") nil [123335 123340])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_cons_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123416 123440]))                  
                :type "int")
                nil [123410 123442])
            ("Qnil" variable (:type "int") nil [124331 124336])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_symbol_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124414 124440]))                  
                :type "int")
                nil [124408 124442])
            ("vp" variable
               (:pointer 1
                :default-value "p"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [125356 125383])
            ("Qnil" variable (:type "int") nil [126539 126544])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_vector_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126622 126648]))                  
                :type "int")
                nil [126616 126650])
            ("Qnil" variable (:type "int") nil [127242 127247])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_buffer_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127325 127351]))                  
                :type "int")
                nil [127319 127353])
            ("po" variable
               (:pointer 1
                :default-value "XPNTR (obj)"
                :type "void")
                nil [127591 127614])
            ("m" variable
               (:pointer 1
                :default-value "mem_find (po)"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [127617 127652])
            ("mark_maybe_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("array" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128396 128402]))                  
                :type "int")
                nil [128376 128403])
            ("m" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [129003 129022])
            ("m" variable
               (:default-value "mem_find (p)"
                :type "int")
                nil [129462 129479])
            ("GC_POINTER_ALIGNMENT" variable (:constant-flag t) nil [130441 130461])
            ("pp" variable
               (:pointer 1
                :type "char")
                nil [130666 130675])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("alignof" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130896 130916]))                  
                :type "int")
                nil [130865 130923])
            ("setjmp_tested_p" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [131977 132005])
            ("longjmps_done" variable
               (:typemodifiers ("static")
                :type "int")
                nil [132006 132031])
            ("SETJMP_WILL_LIKELY_WORK" variable (:constant-flag t) nil [132043 132066])
            ("SETJMP_WILL_NOT_WORK" variable (:constant-flag t) nil [132561 132581])
            ("setjmp_tested_p" variable
               (:default-value "true"
                :type "int")
                nil [133515 133538])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [133541 133554])
            ("x" variable
               (:typemodifiers ("register")
                :type "int")
                nil [133557 133572])
            ("jbuf" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [133575 133592])
            ("sprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133653 133657]))                  
                :type "int")
                nil [133644 133663])
            ("x" variable
               (:default-value "strlen (buf)"
                :type "int")
                nil [133666 133683])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("jbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133716 133721]))                  
                :type "int")
                nil [133704 133722])
            ("longjmps_done" variable (:type "int") nil [134313 134327])
            ("x" variable
               (:default-value "2"
                :type "int")
                nil [134330 134336])
            ("sys_longjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("jbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134380 134385]))                  
                :type "int")
                nil [134367 134389])
            ("o" variable (:type ("max_align_t" type (:type "class") nil nil)) nil [134719 134733])
            ("j" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [134771 134785])
            ("c" variable (:type "char") nil [134788 134795])
            ("stacktop_sentry" variable (:type "int") nil [134805 134821])
            ("__builtin_unwind_init" variable (:constant-flag t) nil [135642 135663])
            ("NEAR_STACK_TOP" variable (:constant-flag t) nil [135976 135990])
            ("SET_STACK_TOP_ADDRESS" variable (:constant-flag t) nil [136456 136477])
            ("mark_memory" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("bottom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138533 138540])
                    ("" variable (:type ("end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138541 138545]))                  
                :type "int")
                nil [138520 138546])
            ("end" variable
               (:pointer 1
                :type "void")
                nil [139225 139235])
            ("self" variable
               (:pointer 1
                :default-value "current_thread"
                :type ("thread_state" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [139238 139281])
            ("sentry" variable (:type ("stacktop_sentry" type (:type "class") nil nil)) nil [139284 139312])
            ("test_setjmp" function
               (:prototype-flag t
                :type "int")
                nil [139284 139312])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("j" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [139284 139312])
            ("stack_top" variable
               (:default-value "end"
                :type "int")
                nil [139322 139338])
            ("func" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139347 139351]))                  
                :type "int")
                nil [139341 139352])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("current_thread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139364 139380])
                    ("" variable (:type ("self" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139382 139387]))                  
                :type "int")
                nil [139355 139388])
            ("lispsym_ptr" variable
               (:pointer 1
                :default-value "(char *) lispsym"
                :type "char")
                nil [139445 139482])
            ("sym_ptr" variable
               (:pointer 1
                :default-value "(char *) sym"
                :type "char")
                nil [139485 139514])
            ("lispsym_offset" variable
               (:default-value "sym_ptr - lispsym_ptr"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [139517 139566])
            ("lispsym" variable (:type "int") nil [139623 139631])
            ("fd" variable
               (:dereference 1
                :type "int")
                nil [139854 139864])
            ("p" variable
               (:pointer 1
                :default-value "XPNTR (obj)"
                :type "void")
                nil [140619 140641])
            ("m" variable
               (:pointer 1
                :default-value "mem_find (p)"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [140860 140894])
            ("result" variable
               (:pointer 1
                :type "void")
                nil [142045 142058])
            ("pure_bytes_used" variable
               (:default-value "pure_bytes_used_lisp + pure_bytes_used_non_lisp"
                :type "int")
                nil [142575 142641])
            ("ptr_bounds_clip" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("result" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142707 142714])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142715 142720]))                  
                :type "int")
                nil [142690 142721])
            ("purebeg" variable
               (:default-value "xmalloc (10000)"
                :type "int")
                nil [142850 142876])
            ("pure_size" variable
               (:default-value "10000"
                :type "int")
                nil [142879 142897])
            ("size" variable (:type "int") nil [142953 142958])
            ("pure_bytes_used" variable
               (:default-value "0"
                :type "int")
                nil [142961 142981])
            ("pure_bytes_used_non_lisp" variable
               (:default-value "0"
                :type "int")
                nil [143007 143036])
            ("again" variable (:type ("goto" type (:type "class") nil nil)) nil [143039 143050])
            ("message" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pure_bytes_used" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [143294 143311])
                    ("" variable (:type ("pure_bytes_used_before_overflow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [143312 143344]))                  
                :type "int")
                nil [143199 143345])
            ("i" variable (:type "int") nil [143617 143623])
            ("skip" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [143626 143699])
            ("bm_skip" variable
               (:dereference 1
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [143626 143699])
            ("last_char_skip" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [143626 143699])
            ("infinity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [143626 143699])
            ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [143626 143699])
            ("start_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [143626 143699])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "unsigned char")
                nil [143702 143725])
            ("non_lisp_beg" variable
               (:pointer 1
                :type "char")
                nil [143728 143747])
            ("NULL" variable (:type "int") nil [143802 143807])
            ("skip" variable
               (:default-value "nbytes + 1"
                :type "int")
                nil [143850 143868])
            ("bm_skip" variable
               (:dereference 1
                :default-value "skip"
                :type "int")
                nil [143901 143919])
            ("p" variable
               (:default-value "(const unsigned char *) data"
                :type "int")
                nil [143923 143956])
            ("bm_skip" variable
               (:dereference 1
                :default-value "skip"
                :type "int")
                nil [143982 144003])
            ("last_char_skip" variable
               (:default-value "bm_skip['\\0']"
                :type "int")
                nil [144007 144038])
            ("pure_bytes_used_non_lisp" variable (:type "int") nil [144079 144104])
            ("start_max" variable
               (:default-value "pure_bytes_used_non_lisp - (nbytes + 1)"
                :type "int")
                nil [144107 144159])
            ("infinity" variable
               (:default-value "pure_bytes_used_non_lisp + 1"
                :type "int")
                nil [144262 144302])
            ("bm_skip" variable
               (:dereference 1
                :default-value "infinity"
                :type "int")
                nil [144305 144330])
            ("p" variable
               (:default-value "(const unsigned char *) non_lisp_beg + nbytes"
                :type "int")
                nil [144334 144384])
            ("start" variable
               (:default-value "0"
                :type "int")
                nil [144387 144397])
            ("NULL" variable (:type "int") nil [145016 145021])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [145509 145528])
            ("s" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *s, Lisp_String)"
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [145531 145591])
            ("data" variable
               (:default-value "(unsigned char *) find_string_data_in_pure (data, nbytes)"
                :type "int")
                nil [145601 145666])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [145840 145854])
            ("size_byte" variable
               (:default-value "multibyte ? nbytes : -1"
                :type "int")
                nil [145864 145900])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [145910 145927])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [145942 145949])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [145950 145952]))                  
                :type "int")
                nil [145930 145953])
            ("string" variable (:type "int") nil [145963 145970])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [146152 146171])
            ("s" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *s, Lisp_String)"
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [146174 146234])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [146244 146258])
            ("size_byte" variable
               (:default-value "-1"
                :type "int")
                nil [146268 146283])
            ("data" variable
               (:default-value "(unsigned char *) data"
                :type "int")
                nil [146293 146323])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [146333 146350])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146365 146372])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146373 146375]))                  
                :type "int")
                nil [146353 146376])
            ("string" variable (:type "int") nil [146386 146393])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *p, Lisp_Cons)"
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [146628 146684])
            ("XSETCONS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146702 146704]))                  
                :type "int")
                nil [146687 146705])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("purecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146722 146736]))                  
                :type "int")
                nil [146708 146738])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("purecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146755 146769]))                  
                :type "int")
                nil [146741 146771])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *p, Lisp_Float)"
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [146935 146993])
            ("XSETFLOAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147012 147014]))                  
                :type "int")
                nil [146996 147015])
            ("XFLOAT_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("num" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147036 147040]))                  
                :type "int")
                nil [147018 147041])
            ("i" variable (:type ("size_t" type (:type "class") nil nil)) nil [147207 147250])
            ("nlimbs" variable
               (:default-value "mpz_size (value->value)"
                :type ("size_t" type (:type "class") nil nil))
                nil [147207 147250])
            ("pure_limbs" variable
               (:pointer 1
                :type ("mp_limb_t" type (:type "class") nil nil))
                nil [147300 147322])
            ("new_size" variable (:type ("mp_size_t" type (:type "class") nil nil)) nil [147325 147344])
            ("b" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *b, Lisp_Vectorlike)"
                :type ("Lisp_Bignum" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [147348 147412])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147433 147435])
                    ("" variable (:type ("PVEC_BIGNUM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147436 147448])
                    ("" variable (:type ("VECSIZE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147452 147480]))                  
                :type "int")
                nil [147415 147482])
            ("pure_limbs" variable
               (:default-value "pure_alloc (nbytes, -1)"
                :type "int")
                nil [147486 147523])
            ("pure_limbs" variable
               (:dereference 1
                :default-value "mpz_getlimbn (value->value, i)"
                :type "int")
                nil [147559 147606])
            ("new_size" variable
               (:default-value "nlimbs"
                :type "int")
                nil [147610 147628])
            ("new_size" variable
               (:default-value "-new_size"
                :type "int")
                nil [147667 147688])
            ("mpz_roinit_n" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147706 147708])
                    ("" variable (:type ("value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147709 147715])
                    ("" variable (:type ("pure_limbs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147716 147727])
                    ("" variable (:type ("new_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147728 147737]))                  
                :type "int")
                nil [147692 147738])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147764 147766])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147767 147783]))                  
                :type "int")
                nil [147749 147784])
            ("word_size" variable
               (:pointer 1
                :type ("len" type (:type "class") nil nil))
                nil [147976 147992])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (size, Lisp_Vectorlike)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [147995 148054])
            ("XSETVECTOR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148074 148076]))                  
                :type "int")
                nil [148057 148077])
            ("size" variable
               (:default-value "len"
                :type "int")
                nil [148102 148113])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148349 148367]))                  
                :type "int")
                nil [148340 148369])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148381 148387])
                    ("" variable (:type ("pure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148388 148393]))                  
                :type "int")
                nil [148372 148394])
            ("pure" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *pure, Lisp_Vectorlike)"
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [148398 148472])
            ("pure_test" variable
               (:default-value "table->test;"
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [148475 148522])
            ("name" variable
               (:default-value "purecopy (table->test.name)"
                :type "int")
                nil [148575 148610])
            ("user_hash_function" variable
               (:default-value "purecopy (table->test.user_hash_function)"
                :type "int")
                nil [148623 148686])
            ("user_cmp_function" variable
               (:default-value "purecopy (table->test.user_cmp_function)"
                :type "int")
                nil [148699 148760])
            ("header" variable
               (:default-value "table->header;"
                :type "int")
                nil [148770 148793])
            ("weak" variable
               (:default-value "purecopy (Qnil)"
                :type "int")
                nil [148802 148825])
            ("hash" variable
               (:default-value "purecopy (table->hash)"
                :type "int")
                nil [148834 148864])
            ("next" variable
               (:default-value "purecopy (table->next)"
                :type "int")
                nil [148873 148903])
            ("index" variable
               (:default-value "purecopy (table->index)"
                :type "int")
                nil [148912 148944])
            ("count" variable
               (:default-value "table->count;"
                :type "int")
                nil [148953 148974])
            ("next_free" variable
               (:default-value "table->next_free;"
                :type "int")
                nil [148983 149012])
            ("pure" variable
               (:default-value "table->pure;"
                :type "int")
                nil [149021 149040])
            ("rehash_threshold" variable
               (:default-value "table->rehash_threshold;"
                :type "int")
                nil [149049 149092])
            ("rehash_size" variable
               (:default-value "table->rehash_size;"
                :type "int")
                nil [149101 149134])
            ("key_and_value" variable
               (:default-value "purecopy (table->key_and_value)"
                :type "int")
                nil [149143 149191])
            ("test" variable
               (:default-value "pure_test"
                :type "int")
                nil [149200 149217])
            ("pure" variable (:type "int") nil [149228 149233])
            ("obj" variable (:type "int") nil [149538 149542])
            ("obj" variable (:type "int") nil [149646 149650])
            ("purecopy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149679 149683]))                  
                :type "int")
                nil [149669 149684])
            ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [149776 149795])
            ("next" variable
               (:pointer 1
                :type ("pinned_object" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [149798 149825])
            ("pinned_objects" variable
               (:pointer 1
                :type "int")
                nil [149828 149844])
            ("obj" variable (:type "int") nil [149998 150002])
            ("message_with_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150168 150172])
                    ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150173 150178]))                  
                :type "int")
                nil [150085 150179])
            ("obj" variable
               (:default-value "pure_cons (XCAR (obj), XCDR (obj))"
                :type "int")
                nil [150369 150410])
            ("obj" variable
               (:default-value "make_pure_float (XFLOAT_DATA (obj))"
                :type "int")
                nil [150440 150482])
            ("obj" variable
               (:default-value "make_pure_string (SSDATA (obj), SCHARS (obj),
			    SBYTES (obj),
			    STRING_MULTIBYTE (obj))"
                :type "int")
                nil [150513 150617])
            ("obj" variable
               (:default-value "make_pure_bignum (XBIGNUM (obj))"
                :type "int")
                nil [152293 152332])
            ("Fputhash" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152539 152543])
                    ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152544 152548])
                    ("" variable (:type ("Vpurify_flag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152549 152562]))                  
                :type "int")
                nil [152529 152563])
            ("obj" variable (:type "int") nil [152574 152578])
            ("fatal" function
               (:prototype-flag t
                :type "int")
                nil [152921 152989])
            ("staticvec" variable
               (:dereference 1
                :default-value "varaddress"
                :type "int")
                nil [152992 153028])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [153302 153337])
            ("specbind" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qgc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153351 153370])
                    ("" variable (:type ("make_fixnum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153371 153405]))                  
                :type "int")
                nil [153341 153407])
            ("count" variable (:type "int") nil [153417 153423])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153589 153623]))                  
                :type "int")
                nil [153576 153625])
            ("tot" variable
               (:default-value "0"
                :type ("size_t" type (:type "class") nil nil))
                nil [153729 153744])
            ("total_string_bytes" variable (:type "int") nil [153860 153879])
            ("word_size" variable
               (:pointer 1
                :type ("total_vector_slots" type (:type "class") nil nil))
                nil [153889 153920])
            ("tot" variable (:type "int") nil [154090 154094])
            ("compact_font_caches" variable (:constant-flag t) nil [156835 156854])
            ("tail" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [157071 157103])
            ("prev" variable
               (:pointer 1
                :default-value "&list"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [157071 157103])
            ("list" variable (:type "int") nil [157359 157364])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pobj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157503 157508])
                    ("" variable (:type ("object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157509 157516]))                  
                :type "int")
                nil [157490 157517])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [157564 157590])
            ("lim" variable
               (:default-value "(symbol_block_pinned == symbol_block
	     ? symbol_block_index : SYMBOL_BLOCK_SIZE)"
                :type "int")
                nil [157593 157688])
            ("nextb" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [158475 158496])
            ("stack_top_variable" variable (:type "char") nil [158499 158523])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [158526 158538])
            ("message_p" variable (:type "bool") nil [158541 158556])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [158559 158594])
            ("start" variable (:type ("timespec" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [158597 158619])
            ("retval" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [158622 158648])
            ("tot_before" variable
               (:default-value "0"
                :type ("size_t" type (:type "class") nil nil))
                nil [158651 158673])
            ("Qnil" variable (:type "int") nil [158840 158845])
            ("record_in_backtrace" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("QAutomatic_GC" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158945 158959]))                  
                :type "int")
                nil [158924 158966])
            ("check_cons_list" function
               (:prototype-flag t
                :type "int")
                nil [158970 158989])
            ("compact_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nextb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [159152 159158]))                  
                :type "int")
                nil [159136 159159])
            ("tot_before" variable
               (:default-value "total_bytes_of_live_objects ()"
                :type "int")
                nil [159196 159240])
            ("start" variable
               (:default-value "current_timespec ()"
                :type "int")
                nil [159244 159272])
            ("consing_since_gc" variable
               (:default-value "0"
                :type "int")
                nil [159369 159390])
            ("message_p" variable
               (:default-value "false"
                :type "int")
                nil [159734 159752])
            ("message1_nolog" function
               (:prototype-flag t
                :type "int")
                nil [160522 160563])
            ("block_input" function
               (:prototype-flag t
                :type "int")
                nil [160567 160582])
            ("shrink_regexp_cache" function
               (:prototype-flag t
                :type "int")
                nil [160586 160609])
            ("gc_in_progress" variable
               (:default-value "1"
                :type "int")
                nil [160613 160632])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer_defaults" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160729 160745]))                  
                :type "int")
                nil [160715 160746])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer_local_symbols" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160763 160784]))                  
                :type "int")
                nil [160749 160785])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("builtin_lisp_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160848 160871]))                  
                :type "int")
                nil [160835 160873])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("staticvec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160927 160939]))                  
                :type "int")
                nil [160913 160941])
            ("mark_pinned_objects" function
               (:prototype-flag t
                :type "int")
                nil [160945 160968])
            ("mark_pinned_symbols" function
               (:prototype-flag t
                :type "int")
                nil [160971 160994])
            ("mark_terminals" function
               (:prototype-flag t
                :type "int")
                nil [160997 161015])
            ("mark_kboards" function
               (:prototype-flag t
                :type "int")
                nil [161018 161034])
            ("mark_threads" function
               (:prototype-flag t
                :type "int")
                nil [161037 161053])
            ("FOR_EACH_BUFFER" function
               (:arguments 
                  ( ("" variable (:type ("nextb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [161441 161447]))                  
                :type "int")
                nil [161424 161747])
            ("queue_doomed_finalizers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162149 162167])
                    ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162169 162180]))                  
                :type "int")
                nil [162123 162181])
            ("mark_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162206 162224]))                  
                :type "int")
                nil [162184 162225])
            ("gc_sweep" function
               (:prototype-flag t
                :type "int")
                nil [162229 162241])
            ("check_cons_list" function
               (:prototype-flag t
                :type "int")
                nil [162387 162406])
            ("gc_in_progress" variable
               (:default-value "0"
                :type "int")
                nil [162410 162429])
            ("unblock_input" function
               (:prototype-flag t
                :type "int")
                nil [162433 162450])
            ("consing_since_gc" variable
               (:default-value "0"
                :type "int")
                nil [162454 162475])
            ("gc_cons_threshold" variable
               (:default-value "GC_DEFAULT_THRESHOLD / 10"
                :type "int")
                nil [162533 162579])
            ("gc_relative_threshold" variable
               (:default-value "0"
                :type "int")
                nil [162583 162609])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163164 163170])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163171 163176]))                  
                :type "int")
                nil [163153 163177])
            ("total" variable
               (:dereference 1
                :default-value "{
    list4 (Qconses, make_fixnum (sizeof (struct Lisp_Cons)),
	   bounded_number (total_conses),
	   bounded_number (total_free_conses)),
    list4 (Qsymbols, make_fixnum (sizeof (struct Lisp_Symbol)),
	   bounded_number (total_symbols),
	   bounded_number (total_free_symbols)),
    list4 (Qstrings, make_fixnum (sizeof (struct Lisp_String)),
	   bounded_number (total_strings),
	   bounded_number (total_free_strings)),
    list3 (Qstring_bytes, make_fixnum (1),
	   bounded_number (total_string_bytes)),
    list3 (Qvectors,
	   make_fixnum (header_size + sizeof (Lisp_Object)),
	   bounded_number (total_vectors)),
    list4 (Qvector_slots, make_fixnum (word_size),
	   bounded_number (total_vector_slots),
	   bounded_number (total_free_vector_slots)),
    list4 (Qfloats, make_fixnum (sizeof (struct Lisp_Float)),
	   bounded_number (total_floats),
	   bounded_number (total_free_floats)),
    list4 (Qintervals, make_fixnum (sizeof (struct interval)),
	   bounded_number (total_intervals),
	   bounded_number (total_free_intervals)),
    list3 (Qbuffers, make_fixnum (sizeof (struct buffer)),
	   bounded_number (total_buffers)),

#ifdef DOUG_LEA_MALLOC
    list4 (Qheap, make_fixnum (1024),
	   bounded_number ((mallinfo ().uordblks + 1023) >> 10),
	   bounded_number ((mallinfo ().fordblks + 1023) >> 10)),
#endif
  }"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [163181 164531])
            ("retval" variable
               (:default-value "CALLMANY (Flist, total)"
                :type "int")
                nil [164534 164567])
            ("run_finalizers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [164653 164671]))                  
                :type "int")
                nil [164636 164672])
            ("retval" variable (:type "int") nil [165367 165374])
            ("end" variable
               (:pointer 1
                :type "void")
                nil [166356 166366])
            ("sentry" variable (:type ("stacktop_sentry" type (:type "class") nil nil)) nil [166369 166397])
            ("test_setjmp" function
               (:prototype-flag t
                :type "int")
                nil [166369 166397])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("j" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [166369 166397])
            ("garbage_collect_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [166427 166431]))                  
                :type "int")
                nil [166408 166432])
            ("row" variable
               (:pointer 1
                :default-value "matrix->rows;"
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [166629 166666])
            ("end" variable
               (:pointer 1
                :default-value "row + matrix->nrows;"
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [166669 166713])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [167230 167249])
            ("last_marked_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [167250 167279])
            ("EXTERNALLY_VISIBLE" variable (:type ("mark_object_loop_halt" type (:type "class") nil nil)) nil [167501 167542])
            ("size" variable
               (:default-value "ptr->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [167602 167636])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [167639 167651])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [167655 167688])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [167776 167799])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168145 168149])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [168150 168161]))                  
                :type "int")
                nil [168132 168163])
            ("size" variable
               (:default-value "ptr->header.size & PSEUDOVECTOR_SIZE_MASK"
                :type "int")
                nil [168396 168449])
            ("i" variable (:type "int") nil [168522 168597])
            ("idx" variable
               (:default-value "(pvectype == PVEC_SUB_CHAR_TABLE ? SUB_CHAR_TABLE_OFFSET : 0)"
                :type "int")
                nil [168522 168597])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [168601 168634])
            ("i" variable (:type "int") nil [169122 169178])
            ("size" variable
               (:default-value "ptr->header.size & PSEUDOVECTOR_SIZE_MASK"
                :type "int")
                nil [169122 169178])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [169282 169286])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [169287 169298]))                  
                :type "int")
                nil [169269 169300])
            ("Qnil" variable (:type "int") nil [169374 169379])
            ("mark_vectorlike" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [169974 169981]))                  
                :type "int")
                nil [169934 169982])
            ("mark_overlay" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170304 170311])
                    ("" variable (:type ("overlays_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170312 170328]))                  
                :type "int")
                nil [170290 170329])
            ("mark_overlay" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170346 170353])
                    ("" variable (:type ("overlays_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170354 170369]))                  
                :type "int")
                nil [170332 170370])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170520 170527])
                    ("" variable (:type ("base_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [170528 170540]))                  
                :type "int")
                nil [170507 170541])
            ("blv" variable
               (:pointer 1
                :default-value "SYMBOL_BLV (ptr)"
                :type ("Lisp_Buffer_Local_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [171173 171228])
            ("where" variable
               (:default-value "blv->where;"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [171231 171262])
            ("swap_in_global_binding" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171432 171436]))                  
                :type "int")
                nil [171408 171437])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171453 171457])
                    ("" variable (:type ("where" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171458 171464]))                  
                :type "int")
                nil [171440 171465])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171481 171485])
                    ("" variable (:type ("valcell" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171486 171494]))                  
                :type "int")
                nil [171468 171495])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171511 171515])
                    ("" variable (:type ("defcell" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171516 171524]))                  
                :type "int")
                nil [171498 171525])
            ("tail" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [171742 171774])
            ("prev" variable
               (:pointer 1
                :default-value "&list"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [171742 171774])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tail" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [172161 172166]))                  
                :type "int")
                nil [172148 172167])
            ("list" variable (:type "int") nil [172177 172182])
            ("obj" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [172622 172647])
            ("po" variable
               (:pointer 1
                :type "void")
                nil [172650 172659])
            ("cdr_count" variable
               (:default-value "0"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [172719 172743])
            ("obj" variable
               (:default-value "arg"
                :type "int")
                nil [172747 172757])
            ("po" variable
               (:default-value "XPNTR (obj)"
                :type "int")
                nil [172768 172785])
            ("last_marked" variable
               (:dereference 1
                :default-value "obj"
                :type "int")
                nil [172820 172859])
            ("CHECK_LIVE" variable (:constant-flag t) nil [174055 174065])
            ("CHECK_ALLOCATED_AND_LIVE" variable (:constant-flag t) nil [174094 174118])
            ("CHECK_ALLOCATED_AND_LIVE_SYMBOL" variable (:constant-flag t) nil [174146 174177])
            ("t" variable
               (:pointer 1
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [180056 180075])
            ("survives_p" variable (:type "bool") nil [180678 180694])
            ("PURE_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XPNTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [181300 181311]))                  
                :type "int")
                nil [181292 181313])
            ("cblk" variable
               (:pointer 1
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [181397 181421])
            ("cprev" variable
               (:pointer 2
                :default-value "&cons_block"
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [181424 181464])
            ("lim" variable
               (:default-value "cons_block_index"
                :type "int")
                nil [181467 181494])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [181497 181534])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [181497 181534])
            ("cons_free_list" variable
               (:default-value "0"
                :type "int")
                nil [181538 181557])
            ("total_conses" variable
               (:default-value "num_used"
                :type "int")
                nil [183605 183629])
            ("total_free_conses" variable
               (:default-value "num_free"
                :type "int")
                nil [183632 183661])
            ("fblk" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [183741 183775])
            ("fprev" variable
               (:pointer 2
                :default-value "&float_block"
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [183778 183820])
            ("lim" variable
               (:typemodifiers ("register")
                :default-value "float_block_index"
                :type "int")
                nil [183823 183860])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [183863 183900])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [183863 183900])
            ("float_free_list" variable
               (:default-value "0"
                :type "int")
                nil [183904 183924])
            ("total_floats" variable
               (:default-value "num_used"
                :type "int")
                nil [184922 184946])
            ("total_free_floats" variable
               (:default-value "num_free"
                :type "int")
                nil [184949 184978])
            ("iblk" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [185061 185098])
            ("iprev" variable
               (:pointer 2
                :default-value "&interval_block"
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [185101 185149])
            ("lim" variable
               (:typemodifiers ("register")
                :default-value "interval_block_index"
                :type "int")
                nil [185152 185192])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [185195 185232])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [185195 185232])
            ("interval_free_list" variable
               (:default-value "0"
                :type "int")
                nil [185236 185259])
            ("total_intervals" variable
               (:default-value "num_used"
                :type "int")
                nil [186347 186374])
            ("total_free_intervals" variable
               (:default-value "num_free"
                :type "int")
                nil [186377 186409])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [186490 186516])
            ("sprev" variable
               (:pointer 2
                :default-value "&symbol_block"
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [186519 186563])
            ("lim" variable
               (:default-value "symbol_block_index"
                :type "int")
                nil [186566 186595])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [186598 186653])
            ("num_used" variable
               (:default-value "ARRAYELTS (lispsym)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [186598 186653])
            ("symbol_free_list" variable
               (:default-value "NULL"
                :type "int")
                nil [186657 186681])
            ("gcmarkbit" variable
               (:default-value "0"
                :type "int")
                nil [186750 186764])
            ("total_symbols" variable
               (:default-value "num_used"
                :type "int")
                nil [188530 188555])
            ("total_free_symbols" variable
               (:default-value "num_free"
                :type "int")
                nil [188558 188588])
            ("this" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [188801 188858])
            ("prev" variable
               (:pointer 2
                :default-value "&BUF_MARKERS (buffer)"
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [188801 188858])
            ("prev" variable
               (:default-value "&this->next;"
                :type "int")
                nil [188923 188942])
            ("buffer" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [189105 189160])
            ("bprev" variable
               (:pointer 2
                :typemodifiers ("register")
                :default-value "&all_buffers"
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [189105 189160])
            ("total_buffers" variable
               (:default-value "0"
                :type "int")
                nil [189164 189182])
            ("sweep_weak_hash_tables" function
               (:prototype-flag t
                :type "int")
                nil [189840 189866])
            ("sweep_strings" function
               (:prototype-flag t
                :type "int")
                nil [189870 189887])
            ("sweep_conses" function
               (:prototype-flag t
                :type "int")
                nil [189930 189946])
            ("sweep_floats" function
               (:prototype-flag t
                :type "int")
                nil [189949 189965])
            ("sweep_intervals" function
               (:prototype-flag t
                :type "int")
                nil [189968 189987])
            ("sweep_symbols" function
               (:prototype-flag t
                :type "int")
                nil [189990 190007])
            ("sweep_buffers" function
               (:prototype-flag t
                :type "int")
                nil [190010 190027])
            ("sweep_vectors" function
               (:prototype-flag t
                :type "int")
                nil [190030 190047])
            ("Qnil" variable (:type "int") nil [191541 191546])
            ("listn" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSTYPE_HEAP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192366 192380])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192386 192420])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192424 192454])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192458 192494])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192498 192529])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192533 192569])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192573 192606])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [192610 192641]))                  
                :type "int")
                nil [192359 192643])
            ("sym" variable
               (:pointer 1
                :default-value "XSYMBOL (symbol)"
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [192717 192760])
            ("val" variable
               (:default-value "find_symbol_value (symbol)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [192763 192808])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [193311 193337])
            ("gc_count" variable
               (:default-value "inhibit_garbage_collection ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [193341 193392])
            ("found" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [193396 193421])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gc_count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194173 194182])
                    ("" variable (:type ("found" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194183 194189]))                  
                :type "int")
                nil [194162 194190])
            ("begin_a" variable
               (:pointer 1
                :default-value "begin"
                :type "char")
                nil [194304 194326])
            ("end_a" variable
               (:pointer 1
                :default-value "end"
                :type "char")
                nil [194329 194347])
            ("i" variable (:type "int") nil [194350 194356])
            ("NULL" variable (:type "int") nil [194586 194591])
            ("rec" variable
               (:pointer 1
                :type ("suspicious_free_record" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [194644 194679])
            ("rec" variable
               (:default-value "&suspicious_free_history[suspicious_free_history_index++]"
                :type "int")
                nil [194683 194747])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("rec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194894 194898]))                  
                :type "int")
                nil [194886 194917])
            ("suspicious_object" variable
               (:default-value "ptr"
                :type "int")
                nil [194925 194949])
            ("backtrace" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("rec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194964 194968])
                    ("" variable (:type ("backtrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194969 194981])
                    ("" variable (:type ("ARRAYELTS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194983 195009]))                  
                :type "int")
                nil [194952 195011])
            ("i" variable (:type "int") nil [195066 195072])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [195085 195090])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [195092 195097]))                  
                :type "int")
                nil [195076 195098])
            ("obj" variable (:type "int") nil [195986 195990])
            ("verify_alloca" variable (:constant-flag t) nil [196821 196834])
            ("Vpurify_flag" variable
               (:default-value "Qt"
                :type "int")
                nil [197034 197052])
            ("purebeg" variable
               (:default-value "PUREBEG"
                :type "int")
                nil [197056 197074])
            ("pure_size" variable
               (:default-value "PURESIZE"
                :type "int")
                nil [197077 197098])
            ("init_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [197144 197155]))                  
                :type "int")
                nil [197122 197156])
            ("init_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [197181 197199]))                  
                :type "int")
                nil [197159 197200])
            ("mem_init" function
               (:prototype-flag t
                :type "int")
                nil [197204 197216])
            ("Vdead" variable
               (:default-value "make_pure_string (\"DEAD\", 4, 4, 0)"
                :type "int")
                nil [197219 197262])
            ("init_strings" function
               (:prototype-flag t
                :type "int")
                nil [197505 197521])
            ("init_vectors" function
               (:prototype-flag t
                :type "int")
                nil [197524 197540])
            ("refill_memory_reserve" function
               (:prototype-flag t
                :type "int")
                nil [197544 197569])
            ("gc_cons_threshold" variable
               (:default-value "GC_DEFAULT_THRESHOLD"
                :type "int")
                nil [197572 197613])
            ("Vgc_elapsed" variable
               (:default-value "make_float (0.0)"
                :type "int")
                nil [197644 197675])
            ("gcs_done" variable
               (:default-value "0"
                :type "int")
                nil [197678 197691])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [197824 197842])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [197850 197854]))                  
                :type "int")
                nil [197791 198288])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vgc_cons_percentage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198327 198347])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198356 198360]))                  
                :type "int")
                nil [198292 198608])
            ("Vgc_cons_percentage" variable
               (:default-value "make_float (0.1)"
                :type "int")
                nil [198611 198650])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pure_bytes_used" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198685 198701])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198709 198713]))                  
                :type "int")
                nil [198654 198779])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cons_cells_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198816 198834])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198842 198846]))                  
                :type "int")
                nil [198783 198906])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("floats_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198939 198953])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198961 198965]))                  
                :type "int")
                nil [198910 199021])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector_cells_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199060 199080])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199088 199092]))                  
                :type "int")
                nil [199025 199154])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("symbols_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199188 199203])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199211 199215]))                  
                :type "int")
                nil [199158 199272])
            ("ARRAYELTS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199304 199312]))                  
                :type "int")
                nil [199293 199313])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string_chars_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199352 199372])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199380 199384]))                  
                :type "int")
                nil [199317 199451])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intervals_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199487 199504])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199512 199516]))                  
                :type "int")
                nil [199455 199575])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("strings_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199609 199624])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199632 199636]))                  
                :type "int")
                nil [199579 199693])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vpurify_flag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199725 199738])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199747 199751]))                  
                :type "int")
                nil [199697 200028])
            ("DEFVAR_BOOL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("garbage_collection_messages" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200076 200104])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200113 200117]))                  
                :type "int")
                nil [200032 200197])
            ("garbage_collection_messages" variable
               (:default-value "0"
                :type "int")
                nil [200200 200232])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vpost_gc_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200265 200279])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200288 200292]))                  
                :type "int")
                nil [200236 200349])
            ("Vpost_gc_hook" variable
               (:default-value "Qnil"
                :type "int")
                nil [200352 200373])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qpost_gc_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200384 200398]))                  
                :type "int")
                nil [200376 200415])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vmemory_signal_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200454 200474])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200483 200487]))                  
                :type "int")
                nil [200419 200549])
            ("Vmemory_signal_data" variable
               (:default-value "listn (CONSTYPE_PURE, 2, Qerror,
	     build_pure_c_string (\"Memory exhausted--use M-x save-some-buffers then exit and restart Emacs\"))"
                :type "int")
                nil [200684 200846])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vmemory_full" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200878 200891])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200900 200904]))                  
                :type "int")
                nil [200850 200967])
            ("Vmemory_full" variable
               (:default-value "Qnil"
                :type "int")
                nil [200970 200990])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qconses" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201002 201010]))                  
                :type "int")
                nil [200994 201021])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qsymbols" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201032 201041]))                  
                :type "int")
                nil [201024 201053])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qstrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201064 201073]))                  
                :type "int")
                nil [201056 201085])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qvectors" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201096 201105]))                  
                :type "int")
                nil [201088 201117])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qfloats" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201128 201136]))                  
                :type "int")
                nil [201120 201147])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qintervals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201158 201169]))                  
                :type "int")
                nil [201150 201183])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qbuffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201194 201203]))                  
                :type "int")
                nil [201186 201215])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qstring_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201226 201240]))                  
                :type "int")
                nil [201218 201257])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qvector_slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201268 201282]))                  
                :type "int")
                nil [201260 201299])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qheap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201310 201316]))                  
                :type "int")
                nil [201302 201325])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("QAutomatic_GC" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201336 201350]))                  
                :type "int")
                nil [201328 201367])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qgc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201379 201398]))                  
                :type "int")
                nil [201371 201420])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qchar_table_extra_slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201431 201455]))                  
                :type "int")
                nil [201423 201482])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vgc_elapsed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201513 201525])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201534 201538]))                  
                :type "int")
                nil [201486 201646])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gcs_done" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201673 201682])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201697 201701]))                  
                :type "int")
                nil [201649 201758])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("integer_width" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201791 201805])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201813 201817]))                  
                :type "int")
                nil [201762 202002])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Scons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202016 202022]))                  
                :type "int")
                nil [202006 202023])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Slist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202036 202042]))                  
                :type "int")
                nil [202026 202043])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Svector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202056 202064]))                  
                :type "int")
                nil [202046 202065])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Srecord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202078 202086]))                  
                :type "int")
                nil [202068 202087])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Sbool_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202100 202113]))                  
                :type "int")
                nil [202090 202114])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_byte_code" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202127 202143]))                  
                :type "int")
                nil [202117 202144])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202157 202168]))                  
                :type "int")
                nil [202147 202169])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202182 202195]))                  
                :type "int")
                nil [202172 202196])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_record" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202209 202222]))                  
                :type "int")
                nil [202199 202223])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202236 202249]))                  
                :type "int")
                nil [202226 202250])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_bool_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202263 202281]))                  
                :type "int")
                nil [202253 202282])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202295 202308]))                  
                :type "int")
                nil [202285 202309])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202322 202335]))                  
                :type "int")
                nil [202312 202336])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202349 202365]))                  
                :type "int")
                nil [202339 202366])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Spurecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202379 202389]))                  
                :type "int")
                nil [202369 202390])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Sgarbage_collect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202403 202420]))                  
                :type "int")
                nil [202393 202421])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smemory_info" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202434 202447]))                  
                :type "int")
                nil [202424 202448])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smemory_use_counts" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202461 202480]))                  
                :type "int")
                nil [202451 202481])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Ssuspicious_object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202494 202513]))                  
                :type "int")
                nil [202484 202514])
            ("CHARTAB_SIZE_BITS" variable (:type ("CHARTAB_SIZE_BITS" type (:type "enum") nil nil)) nil [202816 202857])
            ("char_table_specials" variable (:type ("char_table_specials" type (:type "enum") nil nil)) nil [202860 202905])
            ("char_bits" variable (:type ("char_bits" type (:type "enum") nil nil)) nil [202908 202933])
            ("CHECK_LISP_OBJECT_TYPE" variable (:type ("CHECK_LISP_OBJECT_TYPE" type (:type "enum") nil nil)) nil [202936 202987])
            ("DEFAULT_HASH_SIZE" variable (:type ("DEFAULT_HASH_SIZE" type (:type "enum") nil nil)) nil [202990 203031])
            ("Lisp_Bits" variable (:type ("Lisp_Bits" type (:type "enum") nil nil)) nil [203034 203059])
            ("Lisp_Compiled" variable (:type ("Lisp_Compiled" type (:type "enum") nil nil)) nil [203062 203095])
            ("maxargs" variable (:type ("maxargs" type (:type "enum") nil nil)) nil [203098 203119])
            ("MAX_ALLOCA" variable (:type ("MAX_ALLOCA" type (:type "enum") nil nil)) nil [203122 203149])
            ("More_Lisp_Bits" variable (:type ("More_Lisp_Bits" type (:type "enum") nil nil)) nil [203152 203187])
            ("pvec_type" variable (:type ("pvec_type" type (:type "enum") nil nil)) nil [203190 203215]))          
      :file "alloc.c"
      :pointmax 203295
      :fsize 203294
      :lastmodtime '(23451 3115 759715 314000)
      :unmatched-syntax nil
      :lexical-table 
        '(("GC_DEFAULT_THRESHOLD" . ((semantic-list "(100000 * word_size)" 5716 . 5736)))
          ("COMMON_MULTIPLE" (spp-arg-list ("a" "b") 17758 . 17764) . ((semantic-list "((a) % (b) == 0 ? (a) : (b) % (a) == 0 ? (b) : (a) * (b))" 17769 . 17826)))
          ("XMALLOC_OVERRUN_CHECK_OVERHEAD" . ((number "0" 19267 . 19268)))
          ("BLOCK_PADDING" . ((number "0" 34932 . 34933)))
          ("NEXT_FREE_LISP_STRING" (spp-arg-list ("S") 50140 . 50143) . ((semantic-list "((S)->u.next)" 50144 . 50157)))
          ("UNSETMARKBIT" (spp-arg-list ("block" "n") 72988 . 72997) . ((semantic-list "((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
   &= ~((bits_word) 1 << ((n) % BITS_PER_BITS_WORD)))" 73005 . 73107)))
          ("CONS_BLOCK" (spp-arg-list ("fptr") 75702 . 75708) . ((semantic-list "((struct cons_block *) ((uintptr_t) (fptr) & ~(BLOCK_ALIGN - 1)))" 75713 . 75778)))
          ("MARK_INTERVAL_TREE" (spp-arg-list ("i") 44796 . 44799) . 
              ((DO "do" 44808 . 44810) (semantic-list "{								\\
    if (i && !i->gcmarkbit)					\\
      traverse_intervals_noorder (i, mark_interval, NULL);	\\
  }" 44811 . 44920) (WHILE "while" 44921 . 44926) (semantic-list "(0)" 44927 . 44930)))
          ("SBLOCK_SIZE" . ((number "8188" 46423 . 46427)))
          ("SDATA_NBYTES" (spp-arg-list ("S") 48125 . 48128) . 
              ((semantic-list "(S)" 48129 . 48132) (punctuation "-" 48132 . 48133) (punctuation ">" 48133 . 48134) (symbol "n" 48134 . 48135) (punctuation "." 48135 . 48136) (symbol "nbytes" 48136 . 48142)))
          ("SETMARKBIT" (spp-arg-list ("block" "n") 72850 . 72859) . ((semantic-list "((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
   |= (bits_word) 1 << ((n) % BITS_PER_BITS_WORD))" 72867 . 72966)))
          ("vroundup" (spp-arg-list ("x") 81815 . 81818) . ((semantic-list "(eassume ((x) >= 0), vroundup_ct (x))" 81819 . 81856)))
          ("CHECK_ALLOCATED_AND_LIVE_SYMBOL" (spp-arg-list nil 174177 . 174179) . ((semantic-list "((void) 0)" 174180 . 174190)))
          ("STRING_MARKED_P" (spp-arg-list ("S") 5387 . 5390) . ((semantic-list "(((S)->u.s.size & ARRAY_MARK_FLAG) != 0)" 5391 . 5431)))
          ("POWER_OF_2" (spp-arg-list ("n") 13468 . 13471) . ((semantic-list "(((n) & ((n) - 1)) == 0)" 13472 . 13496)))
          ("GETMARKBIT" (spp-arg-list ("block" "n") 72717 . 72726) . ((semantic-list "(((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
    >> ((n) % BITS_PER_BITS_WORD))			\\
   & 1)" 72734 . 72830)))
          ("FLOAT_MARKED_P" (spp-arg-list ("fptr") 73574 . 73580) . ((symbol "GETMARKBIT" 73585 . 73595) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 73596 . 73638)))
          ("FLOAT_UNMARK" (spp-arg-list ("fptr") 73744 . 73750) . ((symbol "UNSETMARKBIT" 73755 . 73767) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 73768 . 73810)))
          ("__builtin_unwind_init" (spp-arg-list nil 135663 . 135665) . ((semantic-list "((void) 0)" 135666 . 135676)))
          ("MARK_STRING" (spp-arg-list ("S") 5263 . 5266) . ((semantic-list "((S)->u.s.size |= ARRAY_MARK_FLAG)" 5268 . 5302)))
          ("VECTOR_MARK" (spp-arg-list ("V") 5452 . 5455) . ((semantic-list "((V)->header.size |= ARRAY_MARK_FLAG)" 5457 . 5494)))
          ("PUREBEG" . ((semantic-list "(char *)" 7166 . 7174) (symbol "pure" 7175 . 7179)))
          ("SUSPICIOUS_OBJECT_CHECKING" . ((number "1" 8085 . 8086)))
          ("BLOCK_BYTES" . ((semantic-list "(BLOCK_ALIGN - sizeof (struct ablocks *) - BLOCK_PADDING)" 34958 . 35015)))
          ("ABLOCK_ABASE" (spp-arg-list ("block") 36260 . 36267) . ((semantic-list "(((uintptr_t) (block)->abase) <= (1 + 2 * ABLOCKS_SIZE)	\\
   ? (struct ablocks *) (block)					\\
   : (block)->abase)" 36272 . 36388)))
          ("ABLOCKS_BUSY" (spp-arg-list ("a_base") 36439 . 36447) . ((semantic-list "((a_base)->blocks[0].abase)" 36448 . 36475)))
          ("CONS_MARKED_P" (spp-arg-list ("fptr") 76134 . 76140) . ((symbol "GETMARKBIT" 76145 . 76155) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 76156 . 76196)))
          ("SETJMP_WILL_NOT_WORK" . ((string "\"\\
\\n\\
Emacs garbage collector has been changed to use conservative stack\\n\\
marking.  Emacs has determined that the default method it uses to do the\\n\\
marking will not work on your system.  We will need a system-dependent\\n\\
solution for your system.\\n\\
\\n\\
Please take a look at the function mark_stack in alloc.c, and\\n\\
try to find a way to make it work on your system.\\n\\
\\n\\
Note that you may get false negatives, depending on the compiler.\\n\\
In particular, you need to use -O with GCC for this test.\\n\\
\\n\\
Please mail the result to <emacs-devel@gnu.org>.\\n\\
\"" 132582 . 133151)))
          ("VECTOR_MARKED_P" (spp-arg-list ("V") 5582 . 5585) . ((semantic-list "(((V)->header.size & ARRAY_MARK_FLAG) != 0)" 5586 . 5629)))
          ("ABLOCKS_SIZE" . ((number "16" 35086 . 35088)))
          ("SETJMP_WILL_LIKELY_WORK" . ((string "\"\\
\\n\\
Emacs garbage collector has been changed to use conservative stack\\n\\
marking.  Emacs has determined that the method it uses to do the\\n\\
marking will likely work on your system, but this isn't sure.\\n\\
\\n\\
If you are a system-programmer, or can get the help of a local wizard\\n\\
who is, please take a look at the function mark_stack in alloc.c, and\\n\\
verify that the methods used are appropriate for your system.\\n\\
\\n\\
Please mail the result to <emacs-devel@gnu.org>.\\n\\
\"" 132067 . 132549)))
          ("MEM_NIL" . ((punctuation "&" 12666 . 12667) (symbol "mem_z" 12667 . 12672)))
          ("ROUNDUP" (spp-arg-list ("x" "y") 13743 . 13749) . ((semantic-list "(POWER_OF_2 (y)					\\
		       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
		       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 13750 . 13868)))
          ("SDATA_DATA" (spp-arg-list ("S") 48161 . 48164) . 
              ((semantic-list "((struct sdata *) (S))" 48165 . 48187) (punctuation "-" 48187 . 48188) (punctuation ">" 48188 . 48189) (symbol "data" 48189 . 48193)))
          ("CONS_UNMARK" (spp-arg-list ("fptr") 76298 . 76304) . ((symbol "UNSETMARKBIT" 76309 . 76321) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 76322 . 76362)))
          ("SPARE_MEMORY" . ((semantic-list "(1 << 14)" 6726 . 6735)))
          ("macro_PNTR_ADD" (spp-arg-list ("p" "i") 14461 . 14467) . ((semantic-list "((p) + (i))" 14468 . 14479)))
          ("MALLOC_UNBLOCK_INPUT" . ((semantic-list "((void) 0)" 25137 . 25147)))
          ("BLOCK_ALIGN" . ((semantic-list "(1 << 10)" 32987 . 32996)))
          ("USE_ALIGNED_ALLOC" . ((number "1" 33457 . 33458)))
          ("check_string_bytes" (spp-arg-list ("all") 54544 . 54549) . ((semantic-list "((void) 0)" 54550 . 54560)))
          ("check_string_free_list" (spp-arg-list nil 55060 . 55062))
          ("FLOAT_INDEX" (spp-arg-list ("fptr") 73228 . 73234) . ((semantic-list "((((uintptr_t) (fptr)) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Float))" 73239 . 73312)))
          ("SYMBOL_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct symbol_block *)) / sizeof (struct Lisp_Symbol))" 100890 . 100961)))
          ("GC_STRING_EXTRA" . ((semantic-list "(GC_STRING_OVERRUN_COOKIE_SIZE)" 52028 . 52059)))
          ("FLOAT_BLOCK_SIZE" . ((semantic-list "(((BLOCK_BYTES - sizeof (struct float_block *)		\\
     /* The compiler might add padding at the end.  */		\\
     - (sizeof (struct Lisp_Float) - sizeof (bits_word))) * CHAR_BIT) \\
   / (sizeof (struct Lisp_Float) * CHAR_BIT + 1))" 72468 . 72697)))
          ("CONS_INDEX" (spp-arg-list ("fptr") 75798 . 75804) . ((semantic-list "(((uintptr_t) (fptr) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Cons))" 75809 . 75879)))
          ("CONS_MARK" (spp-arg-list ("fptr") 76215 . 76221) . ((symbol "SETMARKBIT" 76226 . 76236) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 76237 . 76277)))
          ("VECTOR_UNMARK" (spp-arg-list ("V") 5516 . 5519) . ((semantic-list "((V)->header.size &= ~ARRAY_MARK_FLAG)" 5520 . 5558)))
          ("MALLOC_BLOCK_INPUT" . ((semantic-list "((void) 0)" 25096 . 25106)))
          ("ABLOCKS_BYTES" . ((semantic-list "(sizeof (struct ablocks) - BLOCK_PADDING)" 36197 . 36238)))
          ("STRING_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct string_block *)) / sizeof (struct Lisp_String))" 48947 . 49018)))
          ("vroundup_ct" (spp-arg-list ("x") 81699 . 81702) . ((symbol "ROUNDUP" 81703 . 81710) (semantic-list "(x, roundup_size)" 81711 . 81728)))
          ("VECTOR_IN_BLOCK" (spp-arg-list ("vector" "block") 87720 . 87735) . ((semantic-list "((char *) (vector) <= (block)->data		\\
   + VECTOR_BLOCK_BYTES - VBLOCK_BYTES_MIN)" 87741 . 87823)))
          ("PSEUDOVEC_STRUCT" (spp-arg-list ("p" "t") 88883 . 88889) . ((symbol "verify_expr" 88894 . 88905) (semantic-list "((header_size + VECSIZE (struct t) * word_size \\
		<= VBLOCK_BYTES_MAX), \\
	       (struct t *) (p))" 88906 . 89006)))
          ("GC_POINTER_ALIGNMENT" . ((symbol "alignof" 130462 . 130469) (semantic-list "(void *)" 130470 . 130478)))
          ("MAX_SAVE_STACK" . ((number "16000" 8863 . 8868)))
          ("INTERVAL_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct interval_block *)) / sizeof (struct interval))" 42859 . 42929)))
          ("SET_STACK_TOP_ADDRESS" (spp-arg-list ("p") 136477 . 136480) . 
              ((symbol "stacktop_sentry" 136487 . 136502) (symbol "sentry" 136503 . 136509) (punctuation ";" 136509 . 136510) (symbol "__builtin_unwind_init" 136518 . 136539) (semantic-list "()" 136540 . 136542) (punctuation ";" 136542 . 136543) (symbol "test_setjmp" 136551 . 136562) (semantic-list "()" 136563 . 136565) (punctuation ";" 136565 . 136566) (symbol "sys_setjmp" 136575 . 136585) (semantic-list "(sentry.j)" 136586 . 136596) (punctuation ";" 136596 . 136597) (punctuation "*" 136605 . 136606) (semantic-list "(p)" 136606 . 136609) (punctuation "=" 136610 . 136611) (symbol "NEAR_STACK_TOP" 136612 . 136626) (semantic-list "(&sentry + (stack_bottom < &sentry.c))" 136627 . 136665)))
          ("compact_font_caches" (spp-arg-list nil 156854 . 156856) . ((semantic-list "(void)" 156857 . 156863) (semantic-list "(0)" 156863 . 156866)))
          ("verify_alloca" (spp-arg-list nil 196834 . 196836) . ((semantic-list "((void) 0)" 196837 . 196847)))
          ("UNMARK_STRING" (spp-arg-list ("S") 5324 . 5327) . ((semantic-list "((S)->u.s.size &= ~ARRAY_MARK_FLAG)" 5328 . 5363)))
          ("DEADP" (spp-arg-list ("x") 10831 . 10834) . ((symbol "EQ" 10835 . 10837) (semantic-list "(x, Vdead)" 10838 . 10848)))
          ("SDATA_SIZE" (spp-arg-list ("NBYTES") 51596 . 51604) . ((semantic-list "((SDATA_DATA_OFFSET				      \\
       + (SDATA_DATA_OFFSET % FLEXALIGNOF (struct sdata) == 0 \\
	  ? NBYTES					      \\
	  : max (NBYTES, FLEXALIGNOF (struct sdata) - 1))     \\
       + 1						      \\
       + FLEXALIGNOF (struct sdata) - 1)		      \\
      & ~(FLEXALIGNOF (struct sdata) - 1))" 51621 . 51913)))
          ("macro_XPNTR" (spp-arg-list ("o") 14761 . 14764) . ((semantic-list "((void *) \\
   (SYMBOLP (o)							       \\
    ? PNTR_ADD ((char *) lispsym,				       \\
		(XLI (o)						\\
		 - ((EMACS_UINT) Lisp_Symbol << (USE_LSB_TAG ? 0 : VALBITS)))) \\
    : (char *) XLP (o) - (XLI (o) & ~VALMASK)))" 14817 . 15038)))
          ("MALLOC_PROBE" (spp-arg-list ("size") 25176 . 25182) . 
              ((DO "do" 25189 . 25191) (semantic-list "{						\\
    if (profiler_memory_running)		\\
      malloc_probe (size);			\\
  }" 25192 . 25271) (WHILE "while" 25272 . 25277) (semantic-list "(0)" 25278 . 25281)))
          ("ABLOCKS_BASE" (spp-arg-list ("abase") 36584 . 36591) . ((semantic-list "(abase)" 36592 . 36599)))
          ("LARGE_STRING_BYTES" . ((number "1024" 46591 . 46595)))
          ("SDATA_OF_STRING" (spp-arg-list ("S") 50452 . 50455) . ((semantic-list "((sdata *) ptr_bounds_init ((S)->u.s.data \\
						       - SDATA_DATA_OFFSET))" 50456 . 50534)))
          ("GC_STRING_OVERRUN_COOKIE_SIZE" . ((number "0" 50945 . 50946)))
          ("FLOAT_BLOCK" (spp-arg-list ("fptr") 73128 . 73134) . ((semantic-list "((struct float_block *) (((uintptr_t) (fptr)) & ~(BLOCK_ALIGN - 1)))" 73139 . 73207)))
          ("FLOAT_MARK" (spp-arg-list ("fptr") 73658 . 73664) . ((symbol "SETMARKBIT" 73669 . 73679) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 73680 . 73722)))
          ("CONS_BLOCK_SIZE" . ((semantic-list "(((BLOCK_BYTES - sizeof (struct cons_block *)			\\
     /* The compiler might add padding at the end.  */		\\
     - (sizeof (struct Lisp_Cons) - sizeof (bits_word))) * CHAR_BIT)	\\
   / (sizeof (struct Lisp_Cons) * CHAR_BIT + 1))" 75455 . 75682)))
          ("NEAR_STACK_TOP" (spp-arg-list ("addr") 135990 . 135996) . ((semantic-list "(addr)" 135997 . 136003)))
          )
)
    (semanticdb-table "semanticdb-table-1afb404"
      :major-mode c-mode
      :tags 
        '( ("PTR_BOUNDS_H" variable (:constant-flag t) nil [1382 1394])
            ("stddef.h" include (:system-flag t) nil [1396 1415])
            ("ptr_bounds_clip" variable (:constant-flag t) nil [1829 1844])
            ("ptr_bounds_copy" variable (:constant-flag t) nil [2038 2053])
            ("ptr_bounds_init" variable (:constant-flag t) nil [2297 2312])
            ("ptr_bounds_set" variable (:constant-flag t) nil [2532 2546]))          
      :file "ptr-bounds.h"
      :pointmax 2631
      :fsize 2630
      :lastmodtime '(23443 29220 116461 494000)
      :unmatched-syntax '((symbol 2586 . 2603) (symbol 1600 . 1619))
      :lexical-table 
        '(("ptr_bounds_init" (spp-arg-list ("p") 2312 . 2315) . ((semantic-list "(p)" 2316 . 2319)))
          ("PTR_BOUNDS_H")
          ("ptr_bounds_copy" (spp-arg-list ("p" "q") 2053 . 2059) . ((semantic-list "((void) (void const *) {q}, p)" 2060 . 2090)))
          ("ptr_bounds_set" (spp-arg-list ("p" "n") 2546 . 2552) . ((semantic-list "((void) (size_t) {n}, p)" 2553 . 2577)))
          ("ptr_bounds_clip" (spp-arg-list ("p" "n") 1844 . 1850) . ((semantic-list "((void) (size_t) {n}, p)" 1851 . 1875)))
          )
)
    (semanticdb-table "semanticdb-table-1afb424"
      :major-mode c-mode
      :tags 
        '( ("stddef.h" include (:system-flag t) nil [737 756])
            ("lisp.h" include nil nil [757 774])
            ("" type
               (:members 
                  ( ("STATIC_HEAP_SIZE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [967 985]))                  
                :type "enum")
                nil [960 1015])
            ("bss_sbrk_buffer" variable
               (:dereference 1
                :typemodifiers ("extern")
                :type "char")
                nil [1017 1063])
            ("max_bss_sbrk_ptr" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [1064 1094])
            ("bss_sbrk_did_unexec" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [1095 1127])
            ("bss_sbrk" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1151 1161]))                  
                :type "void")
                nil [1128 1162]))          
      :file "sheap.h"
      :pointmax 1163
      :fsize 1162
      :lastmodtime '(23443 29220 119792 786000)
      :unmatched-syntax '((number 1010 . 1012) (punctuation 1008 . 1009) (punctuation 1007 . 1008) (semantic-list 993 . 1006) (SIZEOF 986 . 992) (punctuation 984 . 985)))
    (semanticdb-table "semanticdb-table-1e259f8"
      :major-mode c-mode
      :tags 
        '( ("INLINE" variable (:constant-flag t) nil [803 809])
            ("config.h" include (:system-flag t) nil [824 843])
            ("errno.h" include (:system-flag t) nil [845 863])
            ("fcntl.h" include (:system-flag t) nil [864 882])
            ("stdlib.h" include (:system-flag t) nil [883 902])
            ("sys/file.h" include (:system-flag t) nil [904 925])
            ("unistd.h" include (:system-flag t) nil [926 945])
            ("close-stream.h" include (:system-flag t) nil [947 972])
            ("MAIN_PROGRAM" variable (:constant-flag t) nil [982 994])
            ("lisp.h" include nil nil [995 1012])
            ("sysstdio.h" include nil nil [1013 1034])
            ("bignum.h" include nil nil [1562 1581])
            ("intervals.h" include nil nil [1582 1604])
            ("character.h" include nil nil [1605 1627])
            ("buffer.h" include nil nil [1628 1647])
            ("window.h" include nil nil [1648 1667])
            ("xwidget.h" include nil nil [1668 1688])
            ("atimer.h" include nil nil [1689 1708])
            ("blockinput.h" include nil nil [1709 1732])
            ("syssignal.h" include nil nil [1733 1755])
            ("process.h" include nil nil [1756 1776])
            ("frame.h" include nil nil [1777 1795])
            ("termhooks.h" include nil nil [1796 1818])
            ("keyboard.h" include nil nil [1819 1840])
            ("keymap.h" include nil nil [1841 1860])
            ("category.h" include nil nil [1861 1882])
            ("charset.h" include nil nil [1883 1903])
            ("composite.h" include nil nil [1904 1926])
            ("dispextern.h" include nil nil [1927 1950])
            ("ptr-bounds.h" include nil nil [1951 1974])
            ("regex-emacs.h" include nil nil [1975 1999])
            ("sheap.h" include nil nil [2000 2018])
            ("syntax.h" include nil nil [2019 2038])
            ("sysselect.h" include nil nil [2039 2061])
            ("systime.h" include nil nil [2062 2082])
            ("puresize.h" include nil nil [2083 2104])
            ("getpagesize.h" include nil nil [2106 2130])
            ("gnutls.h" include nil nil [2131 2150])
            ("emacs_version" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_VERSION"
                :type "char")
                nil [2504 2556])
            ("emacs_copyright" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "COPYRIGHT"
                :type "char")
                nil [2557 2605])
            ("emacs_bugreport" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_BUGREPORT"
                :type "char")
                nil [2606 2662])
            ("empty_unibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2729 2786])
            ("empty_multibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2729 2786])
            ("initialized" variable (:type "bool") nil [3025 3042])
            ("might_dump" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [3146 3177])
            ("inhibit_window_system" variable (:type "bool") nil [3333 3360])
            ("running_asynch_code" variable (:type "bool") nil [3507 3532])
            ("noninteractive" variable (:type "bool") nil [4511 4531])
            ("no_site_lisp" variable (:type "bool") nil [4596 4614])
            ("build_details" variable (:type "bool") nil [4676 4695])
            ("daemon_name" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4745 4770])
            ("daemon_type" variable (:type "int") nil [4847 4863])
            ("daemon_pipe" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "int")
                nil [5017 5043])
            ("initial_argv" variable
               (:pointer 2
                :type "char")
                nil [5110 5130])
            ("initial_argc" variable (:type "int") nil [5131 5148])
            ("sort_args" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [5173 5182])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [5183 5195]))                  
                :type "void")
                nil [5150 5196])
            ("syms_of_emacs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5224 5229]))                  
                :type "void")
                nil [5197 5230])
            ("usage_message" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :default-value "{ \"\\
\\n\\
Run Emacs, the extensible, customizable, self-documenting real-time\\n\\
display editor.  The recommended way to start Emacs for normal editing\\n\\
is with no options at all.\\n\\
\\n\\
Run M-x info RET m emacs RET m emacs invocation RET inside Emacs to\\n\\
read the main documentation for these command-line arguments.\\n\\
\\n\\
Initialization options:\\n\\
\\n\\
\",
    \"\\
--batch                     do not do interactive display; implies -q\\n\\
--chdir DIR                 change to directory DIR\\n\\
--daemon, --bg-daemon[=NAME] start a (named) server in the background\\n\\
--fg-daemon[=NAME]          start a (named) server in the foreground\\n\\
--debug-init                enable Emacs Lisp debugger for init file\\n\\
--display, -d DISPLAY       use X server DISPLAY\\n\\
\",
#ifdef HAVE_MODULES
    \"\\
--module-assertions         assert behavior of dynamic modules\\n\\
\",
#endif
    \"\\
--no-build-details          do not add build details such as time stamps\\n\\
--no-desktop                do not load a saved desktop\\n\\
--no-init-file, -q          load neither ~/.emacs nor default.el\\n\\
--no-loadup, -nl            do not load loadup.el into bare Emacs\\n\\
--no-site-file              do not load site-start.el\\n\\
--no-x-resources            do not load X resources\\n\\
--no-site-lisp, -nsl        do not add site-lisp directories to load-path\\n\\
--no-splash                 do not display a splash screen on startup\\n\\
--no-window-system, -nw     do not communicate with X, ignoring $DISPLAY\\n\\
\",
    \"\\
--quick, -Q                 equivalent to:\\n\\
                              -q --no-site-file --no-site-lisp --no-splash\\n\\
                              --no-x-resources\\n\\
--script FILE               run FILE as an Emacs Lisp script\\n\\
--terminal, -t DEVICE       use DEVICE for terminal I/O\\n\\
--user, -u USER             load ~USER/.emacs instead of your own\\n\\
\\n\\
\",
    \"\\
Action options:\\n\\
\\n\\
FILE                    visit FILE\\n\\
+LINE                   go to line LINE in next FILE\\n\\
+LINE:COLUMN            go to line LINE, column COLUMN, in next FILE\\n\\
--directory, -L DIR     prepend DIR to load-path (with :DIR, append DIR)\\n\\
--eval EXPR             evaluate Emacs Lisp expression EXPR\\n\\
--execute EXPR          evaluate Emacs Lisp expression EXPR\\n\\
\",
    \"\\
--file FILE             visit FILE\\n\\
--find-file FILE        visit FILE\\n\\
--funcall, -f FUNC      call Emacs Lisp function FUNC with no arguments\\n\\
--insert FILE           insert contents of FILE into current buffer\\n\\
--kill                  exit without asking for confirmation\\n\\
--load, -l FILE         load Emacs Lisp FILE using the load function\\n\\
--visit FILE            visit FILE\\n\\
\\n\\
\",
    \"\\
Display options:\\n\\
\\n\\
--background-color, -bg COLOR   window background color\\n\\
--basic-display, -D             disable many display features;\\n\\
                                  used for debugging Emacs\\n\\
--border-color, -bd COLOR       main border color\\n\\
--border-width, -bw WIDTH       width of main border\\n\\
\",
    \"\\
--color, --color=MODE           override color mode for character terminals;\\n\\
                                  MODE defaults to `auto', and\\n\\
                                  can also be `never', `always',\\n\\
                                  or a mode name like `ansi8'\\n\\
--cursor-color, -cr COLOR       color of the Emacs cursor indicating point\\n\\
--font, -fn FONT                default font; must be fixed-width\\n\\
--foreground-color, -fg COLOR   window foreground color\\n\\
\",
    \"\\
--fullheight, -fh               make the first frame high as the screen\\n\\
--fullscreen, -fs               make the first frame fullscreen\\n\\
--fullwidth, -fw                make the first frame wide as the screen\\n\\
--maximized, -mm                make the first frame maximized\\n\\
--geometry, -g GEOMETRY         window geometry\\n\\
\",
    \"\\
--no-bitmap-icon, -nbi          do not use picture of gnu for Emacs icon\\n\\
--iconic                        start Emacs in iconified state\\n\\
--internal-border, -ib WIDTH    width between text and main border\\n\\
--line-spacing, -lsp PIXELS     additional space to put between lines\\n\\
--mouse-color, -ms COLOR        mouse cursor color in Emacs window\\n\\
--name NAME                     title for initial Emacs frame\\n\\
\",
    \"\\
--no-blinking-cursor, -nbc      disable blinking cursor\\n\\
--reverse-video, -r, -rv        switch foreground and background\\n\\
--title, -T TITLE               title for initial Emacs frame\\n\\
--vertical-scroll-bars, -vb     enable vertical scroll bars\\n\\
--xrm XRESOURCES                set additional X resources\\n\\
--parent-id XID                 set parent window\\n\\
--help                          display this help and exit\\n\\
--version                       output version information and exit\\n\\
\\n\\
\",
    \"\\
You can generally also specify long option names with a single -; for\\n\\
example, -batch as well as --batch.  You can use any unambiguous\\n\\
abbreviation for a --option.\\n\\
\\n\\
Various environment variables and window system resources also affect\\n\\
the operation of Emacs.  See the main documentation.\\n\\
\\n\\
Report bugs to \" PACKAGE_BUGREPORT \".  First, please see the Bugs\\n\\
section of the Emacs manual or the file BUGS.\\n\"
  }"
                :type "char")
                nil [5361 10644])
            ("fatal_error_in_progress" variable (:type "bool") nil [10695 10724])
            ("setlocale" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("cat" variable (:type "int") (reparse-symbol arg-sub-list) [10866 10874])
                    ("locale" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10875 10894]))                  
                :type "char")
                nil [10841 10910])
            ("using_utf8" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11005 11010]))                  
                :type "bool")
                nil [10981 11167])
            ("terminate_due_to_signal" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [11323 11331])
                    ("backtrace_limit" variable (:type "int") (reparse-symbol arg-sub-list) [11332 11352]))                  
                :type "void")
                nil [11293 12301])
            ("init_cmdargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [12398 12407])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [12408 12420])
                    ("skip_args" variable (:type "int") (reparse-symbol arg-sub-list) [12421 12435])
                    ("original_pwd" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12436 12455]))                  
                :type "void")
                nil [12372 17344])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17372 17389])
                    ("" variable (:type ("Sinvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17390 17407])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17424 17428]))                  
                :type "int")
                nil [17346 17530])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17611 17633])
                    ("" variable (:type ("Sinvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17634 17656])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17680 17684]))                  
                :type "int")
                nil [17580 17770])
            ("argmatch" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18353 18365])
                    ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [18366 18375])
                    ("sstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18376 18393])
                    ("lstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18394 18411])
                    ("minlen" variable (:type "int") (reparse-symbol arg-sub-list) [18422 18433])
                    ("valptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18434 18448])
                    ("skipptr" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [18449 18462]))                  
                :type "bool")
                nil [18331 19344])
            ("close_output_streams" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [19514 19519]))                  
                :type "void")
                nil [19480 19880])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [19907 19916])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [19917 19929]))                  
                :type "int")
                nil [19897 51386])
            ("standard_args" type
               (:members 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51563 51580])
                    ("longname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51583 51604])
                    ("priority" variable (:type "int") (reparse-symbol classsubparts) [51607 51620])
                    ("nargs" variable (:type "int") (reparse-symbol classsubparts) [51623 51633]))                  
                :type "struct")
                nil [51538 51636])
            ("standard_args" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  { \"-version\", \"--version\", 150, 0 },
  { \"-chdir\", \"--chdir\", 130, 1 },
  { \"-t\", \"--terminal\", 120, 1 },
  { \"-nw\", \"--no-window-system\", 110, 0 },
  { \"-nw\", \"--no-windows\", 110, 0 },
  { \"-batch\", \"--batch\", 100, 0 },
  { \"-script\", \"--script\", 100, 1 },
  { \"-daemon\", \"--daemon\", 99, 0 },
  { \"-bg-daemon\", \"--bg-daemon\", 99, 0 },
  { \"-fg-daemon\", \"--fg-daemon\", 99, 0 },
  { \"-help\", \"--help\", 90, 0 },
  { \"-nl\", \"--no-loadup\", 70, 0 },
  { \"-nsl\", \"--no-site-lisp\", 65, 0 },
  { \"-no-build-details\", \"--no-build-details\", 63, 0 },
#ifdef HAVE_MODULES
  { \"-module-assertions\", \"--module-assertions\", 62, 0 },
#endif
  /* -d must come last before the options handled in startup.el.  */
  { \"-d\", \"--display\", 60, 1 },
  { \"-display\", 0, 60, 1 },
  /* Now for the options handled in `command-line' (startup.el).  */
  /* (Note that to imply -nsl, -Q is partially handled here.)  */
  { \"-Q\", \"--quick\", 55, 0 },
  { \"-quick\", 0, 55, 0 },
  { \"-q\", \"--no-init-file\", 50, 0 },
  { \"-no-init-file\", 0, 50, 0 },
  { \"-no-x-resources\", \"--no-x-resources\", 40, 0 },
  { \"-no-site-file\", \"--no-site-file\", 40, 0 },
  { \"-u\", \"--user\", 30, 1 },
  { \"-user\", 0, 30, 1 },
  { \"-debug-init\", \"--debug-init\", 20, 0 },
  { \"-iconic\", \"--iconic\", 15, 0 },
  { \"-D\", \"--basic-display\", 12, 0},
  { \"-basic-display\", 0, 12, 0},
  { \"-nbc\", \"--no-blinking-cursor\", 12, 0 },
  /* Now for the options handled in `command-line-1' (startup.el).  */
  { \"-nbi\", \"--no-bitmap-icon\", 10, 0 },
  { \"-bg\", \"--background-color\", 10, 1 },
  { \"-background\", 0, 10, 1 },
  { \"-fg\", \"--foreground-color\", 10, 1 },
  { \"-foreground\", 0, 10, 1 },
  { \"-bd\", \"--border-color\", 10, 1 },
  { \"-bw\", \"--border-width\", 10, 1 },
  { \"-ib\", \"--internal-border\", 10, 1 },
  { \"-ms\", \"--mouse-color\", 10, 1 },
  { \"-cr\", \"--cursor-color\", 10, 1 },
  { \"-fn\", \"--font\", 10, 1 },
  { \"-font\", 0, 10, 1 },
  { \"-fs\", \"--fullscreen\", 10, 0 },
  { \"-fw\", \"--fullwidth\", 10, 0 },
  { \"-fh\", \"--fullheight\", 10, 0 },
  { \"-mm\", \"--maximized\", 10, 0 },
  { \"-g\", \"--geometry\", 10, 1 },
  { \"-geometry\", 0, 10, 1 },
  { \"-T\", \"--title\", 10, 1 },
  { \"-title\", 0, 10, 1 },
  { \"-name\", \"--name\", 10, 1 },
  { \"-xrm\", \"--xrm\", 10, 1 },
  { \"-parent-id\", \"--parent-id\", 10, 1 },
  { \"-r\", \"--reverse-video\", 5, 0 },
  { \"-rv\", 0, 5, 0 },
  { \"-reverse\", 0, 5, 0 },
  { \"-hb\", \"--horizontal-scroll-bars\", 5, 0 },
  { \"-vb\", \"--vertical-scroll-bars\", 5, 0 },
  { \"-color\", \"--color\", 5, 0},
  { \"-no-splash\", \"--no-splash\", 3, 0 },
  { \"-no-desktop\", \"--no-desktop\", 3, 0 },
#ifdef HAVE_NS
  { \"-NSAutoLaunch\", 0, 5, 1 },
  { \"-NXAutoLaunch\", 0, 5, 1 },
  { \"-_NSMachLaunch\", 0, 85, 1 },
  { \"-MachLaunch\", 0, 85, 1 },
  { \"-macosx\", 0, 85, 0 },
  { \"-NSHost\", 0, 85, 1 },
#endif
  /* These have the same priority as ordinary file name args,
     so they are not reordered with respect to those.  */
  { \"-L\", \"--directory\", 0, 1 },
  { \"-directory\", 0, 0, 1 },
  { \"-l\", \"--load\", 0, 1 },
  { \"-load\", 0, 0, 1 },
  /* This has no longname, because using --scriptload confuses sort_args,
     because then the --script long option seems to match twice; ie
     you can't have a long option which is a prefix of another long
     option.  In any case, this is entirely an internal option.  */
  { \"-scriptload\", NULL, 0, 1 },
  { \"-f\", \"--funcall\", 0, 1 },
  { \"-funcall\", 0, 0, 1 },
  { \"-eval\", \"--eval\", 0, 1 },
  { \"-execute\", \"--execute\", 0, 1 },
  { \"-find-file\", \"--find-file\", 0, 1 },
  { \"-visit\", \"--visit\", 0, 1 },
  { \"-file\", \"--file\", 0, 1 },
  { \"-insert\", \"--insert\", 0, 1 },
#ifdef HAVE_NS
  { \"-NXOpen\", 0, 0, 1 },
  { \"-NXOpenTemp\", 0, 0, 1 },
  { \"-NSOpen\", 0, 0, 1 },
  { \"-NSOpenTemp\", 0, 0, 1 },
  { \"-GSFilePath\", 0, 0, 1 },
#endif
  /* This should be processed after ordinary file name args and the like.  */
  { \"-kill\", \"--kill\", -10, 0 },
}"
                :type ("standard_args" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [51638 55514])
            ("sort_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [55886 55895])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [55896 55908]))                  
                :type "void")
                nil [55863 60115])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60139 60151])
                    ("" variable (:type ("Skill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60152 60164])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60183 60187])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60584 60595])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60596 60605]))                  
                :type "int")
                nil [60118 60625])
            ("shut_down_emacs" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [62248 62256])
                    ("stuff" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62257 62275]))                  
                :type "void")
                nil [62226 63763])
            ("unexec.h" include nil nil [63789 63808])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63831 63843])
                    ("" variable (:type ("Sdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63844 63856])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63873 63877]))                  
                :type "int")
                nil [63810 64178])
            ("emacs_strerror" function
               (:pointer 1
                :arguments 
                  ( ("error_number" variable (:type "int") (reparse-symbol arg-sub-list) [68803 68820]))                  
                :type "char")
                nil [68780 68899])
            ("decode_env_path" function
               (:arguments 
                  ( ("evarname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68932 68953])
                    ("defalt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68954 68973])
                    ("empty" variable (:type "bool") (reparse-symbol arg-sub-list) [68974 68985]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68903 72667])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72687 72696])
                    ("" variable (:type ("Sdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72697 72706])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72723 72727]))                  
                :type "int")
                nil [72669 72859])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73023 73043])
                    ("" variable (:type ("Sdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73044 73064])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73081 73085]))                  
                :type "int")
                nil [72994 73277])
            ("syms_of_emacs" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [75117 75122]))                  
                :type "void")
                nil [75097 82210]))          
      :file "emacs.c"
      :pointmax 82211
      :fsize 82210
      :lastmodtime '(23443 29219 999866 517000)
      :unmatched-syntax '((semantic-list 73278 . 75095) (punctuation 73084 . 73085) (number 73071 . 73072) (number 73068 . 73069) (number 73065 . 73066) (string 73001 . 73021) (semantic-list 72860 . 72992) (punctuation 72726 . 72727) (number 72713 . 72714) (number 72710 . 72711) (number 72707 . 72708) (string 72676 . 72685) (semantic-list 64179 . 66977) (punctuation 63876 . 63877) (number 63863 . 63864) (number 63860 . 63861) (number 63857 . 63858) (string 63817 . 63829) (semantic-list 60626 . 61743) (punctuation 60594 . 60595) (punctuation 60186 . 60187) (string 60171 . 60174) (number 60168 . 60169) (number 60165 . 60166) (string 60125 . 60137) (semantic-list 17771 . 17823) (punctuation 17683 . 17684) (number 17670 . 17671) (number 17667 . 17668) (number 17664 . 17665) (string 17587 . 17609) (semantic-list 17531 . 17578) (punctuation 17427 . 17428) (number 17414 . 17415) (number 17411 . 17412) (number 17408 . 17409) (string 17353 . 17370))
      :lexical-table 
        '(("MAIN_PROGRAM")
          ("INLINE" . ((symbol "EXTERN_INLINE" 810 . 823)))
          )
)
    (semanticdb-table "semanticdb-table-1f6e900"
      :major-mode c-mode
      :tags 
        '( ("EMACS_SYSSTDIO_H" variable (:constant-flag t) nil [756 772])
            ("fcntl.h" include (:system-flag t) nil [774 792])
            ("stdio.h" include (:system-flag t) nil [793 811])
            ("emacs_fopen" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [839 852])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [853 866]))                  
                :type ("FILE" type (:type "class") nil nil))
                nil [813 867])
            ("FOPEN_BINARY" variable (:constant-flag t) nil [947 959])
            ("FOPEN_TEXT" variable (:constant-flag t) nil [972 982])
            ("clearerr_unlocked" variable (:constant-flag t) nil [1112 1129])
            ("feof_unlocked" variable (:constant-flag t) nil [1191 1204])
            ("ferror_unlocked" variable (:constant-flag t) nil [1264 1279])
            ("fflush_unlocked" variable (:constant-flag t) nil [1341 1356])
            ("fgets_unlocked" variable (:constant-flag t) nil [1417 1431])
            ("fputc_unlocked" variable (:constant-flag t) nil [1499 1513])
            ("fputs_unlocked" variable (:constant-flag t) nil [1577 1591])
            ("fread_unlocked" variable (:constant-flag t) nil [1655 1669])
            ("fwrite_unlocked" variable (:constant-flag t) nil [1742 1757])
            ("getc_unlocked" variable (:constant-flag t) nil [1829 1842])
            ("getchar_unlocked" variable (:constant-flag t) nil [1903 1919])
            ("putc_unlocked" variable (:constant-flag t) nil [1978 1991])
            ("putchar_unlocked" variable (:constant-flag t) nil [2056 2072]))          
      :file "sysstdio.h"
      :pointmax 2126
      :fsize 2125
      :lastmodtime '(23443 29220 123124 78000)
      :unmatched-syntax nil
      :lexical-table 
        '(("fputs_unlocked" (spp-arg-list ("x" "y") 1591 . 1596) . ((symbol "fputs" 1597 . 1602) (semantic-list "(x,y)" 1603 . 1608)))
          ("FOPEN_BINARY" . ((string "\"\"" 960 . 962)))
          ("clearerr_unlocked" (spp-arg-list ("x") 1129 . 1132) . ((symbol "clearerr" 1133 . 1141) (semantic-list "(x)" 1142 . 1145)))
          ("ferror_unlocked" (spp-arg-list ("x") 1279 . 1282) . ((symbol "ferror" 1283 . 1289) (semantic-list "(x)" 1290 . 1293)))
          ("fflush_unlocked" (spp-arg-list ("x") 1356 . 1359) . ((symbol "fflush" 1360 . 1366) (semantic-list "(x)" 1367 . 1370)))
          ("fgets_unlocked" (spp-arg-list ("x" "y" "z") 1431 . 1438) . ((symbol "fgets" 1439 . 1444) (semantic-list "(x,y,z)" 1445 . 1452)))
          ("putc_unlocked" (spp-arg-list ("x" "y") 1991 . 1996) . ((symbol "putc" 1997 . 2001) (semantic-list "(x,y)" 2002 . 2007)))
          ("fwrite_unlocked" (spp-arg-list ("w" "x" "y" "z") 1757 . 1766) . ((symbol "fwrite" 1767 . 1773) (semantic-list "(w,x,y,z)" 1774 . 1783)))
          ("putchar_unlocked" (spp-arg-list ("x") 2072 . 2075) . ((symbol "putchar" 2076 . 2083) (semantic-list "(x)" 2084 . 2087)))
          ("feof_unlocked" (spp-arg-list ("x") 1204 . 1207) . ((symbol "feof" 1208 . 1212) (semantic-list "(x)" 1213 . 1216)))
          ("getc_unlocked" (spp-arg-list ("x") 1842 . 1845) . ((symbol "getc" 1846 . 1850) (semantic-list "(x)" 1851 . 1854)))
          ("fread_unlocked" (spp-arg-list ("w" "x" "y" "z") 1669 . 1678) . ((symbol "fread" 1679 . 1684) (semantic-list "(w,x,y,z)" 1685 . 1694)))
          ("EMACS_SYSSTDIO_H")
          ("FOPEN_TEXT" . ((string "\"\"" 983 . 985)))
          ("getchar_unlocked" (spp-arg-list nil 1919 . 1921) . ((symbol "getchar" 1922 . 1929) (semantic-list "()" 1930 . 1932)))
          ("fputc_unlocked" (spp-arg-list ("x" "y") 1513 . 1518) . ((symbol "fputc" 1519 . 1524) (semantic-list "(x,y)" 1525 . 1530)))
          )
)
    (semanticdb-table "semanticdb-table-1f6e920"
      :major-mode c-mode
      :tags 
        '( ("unistd.h" include (:system-flag t) nil [797 817])
            ("getpagesize" variable (:constant-flag t) nil [1407 1418]))          
      :file "getpagesize.h"
      :pointmax 1544
      :fsize 1543
      :lastmodtime '(23443 29220 19854 31000)
      :unmatched-syntax nil
      :lexical-table 
        '(("getpagesize" (spp-arg-list nil 1418 . 1420) . ((number "8192" 1421 . 1425)))
          )
)
    (semanticdb-table "semanticdb-table-1f6e940"
      :major-mode c-mode
      :tags 
        '( ("EMACS_UNEXEC_H" variable (:constant-flag t) nil [32 46])
            ("unexec" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [60 73])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [74 87]))                  
                :type "void")
                nil [47 88]))          
      :file "unexec.h"
      :pointmax 117
      :fsize 116
      :lastmodtime '(23443 29220 133117 952000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMACS_UNEXEC_H")
          )
)
    (semanticdb-table "semanticdb-table-1bb5a84"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [797 816])
            ("sys/types.h" include (:system-flag t) nil [817 839])
            ("stdio.h" include (:system-flag t) nil [840 858])
            ("unistd.h" include (:system-flag t) nil [920 939])
            ("lisp.h" include nil nil [1000 1017])
            ("systime.h" include nil nil [1177 1197])
            ("errno.h" include (:system-flag t) nil [1265 1283])
            ("float.h" include (:system-flag t) nil [1284 1302])
            ("limits.h" include (:system-flag t) nil [1303 1322])
            ("math.h" include (:system-flag t) nil [1323 1340])
            ("HAVE_TZALLOC_BUG" variable (:constant-flag t) nil [1536 1552])
            ("c-ctype.h" include (:system-flag t) nil [1567 1587])
            ("intprops.h" include (:system-flag t) nil [1588 1609])
            ("stdlib.h" include (:system-flag t) nil [1610 1629])
            ("strftime.h" include (:system-flag t) nil [1630 1651])
            ("verify.h" include (:system-flag t) nil [1652 1671])
            ("composite.h" include nil nil [1673 1695])
            ("intervals.h" include nil nil [1696 1718])
            ("ptr-bounds.h" include nil nil [1719 1742])
            ("character.h" include nil nil [1743 1765])
            ("buffer.h" include nil nil [1766 1785])
            ("coding.h" include nil nil [1786 1805])
            ("window.h" include nil nil [1806 1825])
            ("blockinput.h" include nil nil [1826 1849])
            ("TM_YEAR_BASE" variable (:constant-flag t) nil [1859 1871])
            ("lisp_time_struct" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1998 2010])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [2011 2017]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1956 2018])
            ("format_time_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [2058 2071])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2072 2082])
                    ("" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [2083 2099])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2111 2123])
                    ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2124 2136]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2019 2137])
            ("tm_gmtoff" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2165 2177]))                  
                :type "long int")
                nil [2138 2178])
            ("tm_diff" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2199 2211])
                    ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2212 2224]))                  
                :type "int")
                nil [2179 2225])
            ("update_buffer_properties" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2264 2274])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2275 2285]))                  
                :type "void")
                nil [2226 2286])
            ("styled_format" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2321 2331])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2332 2346])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [2347 2352]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2287 2353])
            ("HAVE_TM_GMTOFF" variable (:constant-flag t) nil [2387 2401])
            ("" type
               (:members 
                  ( ("tzeqlen" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2423 2432]))                  
                :type "enum")
                nil [2416 2452])
            ("local_tz" variable
               (:typemodifiers ("static")
                :type ("timezone_t" type (:type "class") nil nil))
                nil [2531 2558])
            ("utc_tz" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("timezone_t" type (:type "class") nil nil))
                nil [2559 2594])
            ("cached_system_name" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2727 2765])
            ("init_and_cache_system_name" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2807 2812]))                  
                :type "void")
                nil [2767 2876])
            ("emacs_localtime_rz" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2917 2931])
                    ("t" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("time_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2932 2948])
                    ("tm" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2949 2963]))                  
                :type ("tm" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2878 3071])
            ("emacs_mktime_z" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3103 3117])
                    ("tm" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3118 3132]))                  
                :type ("time_t" type (:type "class") nil nil))
                nil [3073 3264])
            ("invalid_time_zone_specification" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("zone" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3321 3338]))                  
                :type "void")
                nil [3266 3419])
            ("xtzfree" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3550 3564]))                  
                :type "void")
                nil [3529 3607])
            ("tzlookup" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("zone" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3915 3932])
                    ("settz" variable (:type "bool") (reparse-symbol arg-sub-list) [3933 3944]))                  
                :type ("timezone_t" type (:type "class") nil nil))
                nil [3887 6453])
            ("init_editfns" function
               (:arguments 
                  ( ("dumping" variable (:type "bool") (reparse-symbol arg-sub-list) [6474 6487]))                  
                :type "void")
                nil [6455 9430])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9458 9474])
                    ("" variable (:type ("Schar_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9475 9491])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9508 9512]))                  
                :type "int")
                nil [9433 9631])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9865 9881])
                    ("" variable (:type ("Sbyte_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9882 9898])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9915 9919]))                  
                :type "int")
                nil [9840 10007])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10233 10249])
                    ("" variable (:type ("Sstring_to_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10250 10266])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10283 10287]))                  
                :type "int")
                nil [10208 10365])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10658 10665])
                    ("" variable (:type ("Spoint" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10666 10673])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10690 10694]))                  
                :type "int")
                nil [10642 10794])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10884 10898])
                    ("" variable (:type ("Spoint_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10899 10913])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10930 10934]))                  
                :type "int")
                nil [10861 10994])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgoto_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11073 11084])
                    ("" variable (:type ("Sgoto_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11085 11096])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11126 11130]))                  
                :type "int")
                nil [11053 11311])
            ("region_limit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("beginningp" variable (:type "bool") (reparse-symbol arg-sub-list) [11733 11749]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11700 12233])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregion_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12262 12280])
                    ("" variable (:type ("Sregion_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12281 12299])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12316 12320]))                  
                :type "int")
                nil [12235 12402])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregion_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12456 12468])
                    ("" variable (:type ("Sregion_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12469 12481])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12498 12502]))                  
                :type "int")
                nil [12435 12583])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmark_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12638 12651])
                    ("" variable (:type ("Smark_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12652 12665])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12682 12686]))                  
                :type "int")
                nil [12616 12883])
            ("overlays_around" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13120 13134])
                    ("vec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13135 13152])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13153 13167]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [13086 14271])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_pos_property" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14300 14318])
                    ("" variable (:type ("Sget_pos_property" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14319 14337])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14354 14358]))                  
                :type "int")
                nil [14273 14876])
            ("find_field" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18243 18259])
                    ("merge_at_boundary" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18260 18290])
                    ("beg_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18296 18318])
                    ("beg" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18324 18339])
                    ("end_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18340 18362])
                    ("end" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18363 18378]))                  
                :type "void")
                nil [18219 22066])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22093 22107])
                    ("" variable (:type ("Sdelete_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22108 22122])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22139 22143]))                  
                :type "int")
                nil [22070 22316])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22476 22490])
                    ("" variable (:type ("Sfield_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22491 22505])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22522 22526]))                  
                :type "int")
                nil [22453 22727])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_string_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22885 22913])
                    ("" variable (:type ("Sfield_string_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22914 22942])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22959 22963]))                  
                :type "int")
                nil [22848 23172])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23319 23336])
                    ("" variable (:type ("Sfield_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23337 23354])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23371 23375]))                  
                :type "int")
                nil [23293 23873])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24004 24015])
                    ("" variable (:type ("Sfield_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24016 24027])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24044 24048]))                  
                :type "int")
                nil [23984 24522])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fconstrain_to_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24662 24682])
                    ("" variable (:type ("Sconstrain_to_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24683 24703])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24720 24724]))                  
                :type "int")
                nil [24633 26324])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fline_beginning_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29587 29612])
                    ("" variable (:type ("Sline_beginning_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29613 29638])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29655 29659]))                  
                :type "int")
                nil [29546 30411])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fline_end_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30802 30821])
                    ("" variable (:type ("Sline_end_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30822 30841])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30858 30862]))                  
                :type "int")
                nil [30774 31590])
            ("save_excursion_save" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [32159 32182]))                  
                :type "void")
                nil [32133 32512])
            ("save_excursion_restore" function
               (:arguments 
                  ( ("marker" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32618 32637])
                    ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32638 32657]))                  
                :type "void")
                nil [32589 33500])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_excursion" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33527 33543])
                    ("" variable (:type ("Ssave_excursion" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33544 33560])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33564 33574])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33585 33589]))                  
                :type "int")
                nil [33502 34148])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_current_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34346 34367])
                    ("" variable (:type ("Ssave_current_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34368 34389])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34393 34403])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34414 34418]))                  
                :type "int")
                nil [34316 34595])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34741 34754])
                    ("" variable (:type ("Sbuffer_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34755 34768])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34785 34789]))                  
                :type "int")
                nil [34719 35239])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35455 35466])
                    ("" variable (:type ("Spoint_min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35467 35478])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35495 35499]))                  
                :type "int")
                nil [35435 35650])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_min_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35746 35764])
                    ("" variable (:type ("Spoint_min_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35765 35783])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35800 35804]))                  
                :type "int")
                nil [35719 35972])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36055 36066])
                    ("" variable (:type ("Spoint_max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36067 36078])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36095 36099]))                  
                :type "int")
                nil [36035 36293])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_max_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36387 36405])
                    ("" variable (:type ("Spoint_max_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36406 36424])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36441 36445]))                  
                :type "int")
                nil [36360 36644])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgap_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36726 36740])
                    ("" variable (:type ("Sgap_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36741 36755])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36772 36776]))                  
                :type "int")
                nil [36703 36869])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgap_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36956 36966])
                    ("" variable (:type ("Sgap_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36967 36977])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36994 36998]))                  
                :type "int")
                nil [36937 37085])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposition_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37183 37199])
                    ("" variable (:type ("Sposition_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37200 37216])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37233 37237]))                  
                :type "int")
                nil [37158 37375])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_to_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37582 37600])
                    ("" variable (:type ("Sbyte_to_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37601 37619])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37636 37640]))                  
                :type "int")
                nil [37555 37775])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffollowing_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38293 38309])
                    ("" variable (:type ("Sfollowing_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38310 38326])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38343 38347]))                  
                :type "int")
                nil [38268 38472])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprevious_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38634 38649])
                    ("" variable (:type ("Sprevious_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38650 38665])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38682 38686]))                  
                :type "int")
                nil [38609 38817])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39154 39160])
                    ("" variable (:type ("Sbobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39161 39167])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39184 39188]))                  
                :type "int")
                nil [39139 39332])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39401 39407])
                    ("" variable (:type ("Seobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39408 39414])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39431 39435]))                  
                :type "int")
                nil [39386 39567])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39634 39640])
                    ("" variable (:type ("Sbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39641 39647])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39664 39668]))                  
                :type "int")
                nil [39619 39734])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39839 39845])
                    ("" variable (:type ("Seolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39846 39852])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39869 39873]))                  
                :type "int")
                nil [39824 39996])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40101 40113])
                    ("" variable (:type ("Schar_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40114 40126])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40143 40147]))                  
                :type "int")
                nil [40080 40322])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40889 40902])
                    ("" variable (:type ("Schar_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40903 40916])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40933 40937]))                  
                :type "int")
                nil [40867 41119])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41876 41893])
                    ("" variable (:type ("Suser_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41894 41911])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41928 41932]))                  
                :type "int")
                nil [41850 42302])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_real_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42791 42813])
                    ("" variable (:type ("Suser_real_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42814 42836])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42860 42864]))                  
                :type "int")
                nil [42760 43053])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43332 43342])
                    ("" variable (:type ("Suser_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43343 43353])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43370 43374]))                  
                :type "int")
                nil [43313 43487])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_real_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43576 43591])
                    ("" variable (:type ("Suser_real_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43592 43607])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43624 43628]))                  
                :type "int")
                nil [43552 43736])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgroup_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43818 43829])
                    ("" variable (:type ("Sgroup_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43830 43841])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43858 43862]))                  
                :type "int")
                nil [43798 43975])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgroup_real_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44065 44081])
                    ("" variable (:type ("Sgroup_real_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44082 44098])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44115 44119]))                  
                :type "int")
                nil [44040 44227])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_full_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44314 44330])
                    ("" variable (:type ("Suser_full_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44331 44347])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44364 44368]))                  
                :type "int")
                nil [44289 44764])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsystem_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45989 46002])
                    ("" variable (:type ("Ssystem_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46003 46016])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46033 46037]))                  
                :type "int")
                nil [45967 46123])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Femacs_pid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46252 46263])
                    ("" variable (:type ("Semacs_pid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46264 46275])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46292 46296]))                  
                :type "int")
                nil [46232 46419])
            ("TIME_T_MIN" variable (:constant-flag t) nil [46512 46522])
            ("TIME_T_MAX" variable (:constant-flag t) nil [46580 46590])
            ("time_overflow" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46700 46705]))                  
                :type "void")
                nil [46680 46758])
            ("invalid_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46796 46801]))                  
                :type "void")
                nil [46760 46845])
            ("check_time_validity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("validity" variable (:type "int") (reparse-symbol arg-sub-list) [46956 46969]))                  
                :type "void")
                nil [46923 47078])
            ("hi_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47186 47195]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [47160 47297])
            ("lo_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47364 47373]))                  
                :type "int")
                nil [47344 47417])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47442 47456])
                    ("" variable (:type ("Scurrent_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47457 47471])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47488 47492]))                  
                :type "int")
                nil [47419 47805])
            ("time_add" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ta" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47892 47912])
                    ("tb" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47913 47933]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47858 48301])
            ("time_subtract" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ta" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [48342 48362])
                    ("tb" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [48363 48383]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48303 48689])
            ("time_arith" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48722 48736])
                    ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48737 48751])
                    ("" variable (:type ("lisp_time" type (:type "struct") nil nil)) (reparse-symbol arg-sub-list) [48757 48816]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48691 49385])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49406 49416])
                    ("" variable (:type ("Stime_add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49417 49427])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49444 49448]))                  
                :type "int")
                nil [49387 49675])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_subtract" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49743 49758])
                    ("" variable (:type ("Stime_subtract" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49759 49774])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49791 49795]))                  
                :type "int")
                nil [49719 50099])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_less_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50170 50183])
                    ("" variable (:type ("Stime_less_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50184 50197])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50214 50218]))                  
                :type "int")
                nil [50148 50450])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_internal_run_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50757 50780])
                    ("" variable (:type ("Sget_internal_run_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50781 50804])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50828 50832]))                  
                :type "int")
                nil [50725 51095])
            ("make_lisp_time" function
               (:arguments 
                  ( ("t" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [52066 52084]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52038 52206])
            ("disassemble_lisp_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52494 52521])
                    ("phigh" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52522 52541])
                    ("plow" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52551 52569])
                    ("pusec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52570 52589])
                    ("ppsec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52599 52618]))                  
                :type "int")
                nil [52460 53592])
            ("decode_float_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type "double") (reparse-symbol arg-sub-list) [53754 53763])
                    ("result" variable
                       (:pointer 1
                        :type ("lisp_time" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [53764 53789]))                  
                :type "bool")
                nil [53723 54574])
            ("decode_time_components" function
               (:arguments 
                  ( ("high" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55078 55095])
                    ("low" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55096 55112])
                    ("usec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55113 55130])
                    ("psec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55134 55151])
                    ("result" variable
                       (:pointer 1
                        :type ("lisp_time" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [55155 55180])
                    ("dresult" variable
                       (:pointer 1
                        :type "double")
                        (reparse-symbol arg-sub-list) [55181 55197]))                  
                :type "int")
                nil [55050 56749])
            ("lisp_to_timespec" function
               (:arguments 
                  ( ("t" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [56785 56804]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [56751 57077])
            ("lisp_time_struct" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57343 57370])
                    ("plen" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [57371 57381]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [57301 57679])
            ("lisp_time_argument" function
               (:arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57813 57840]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [57777 58029])
            ("lisp_seconds_argument" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58178 58205]))                  
                :type ("time_t" type (:type "class") nil nil))
                nil [58141 58700])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffloat_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58723 58735])
                    ("" variable (:type ("Sfloat_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58736 58748])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58765 58769]))                  
                :type "int")
                nil [58702 59407])
            ("emacs_nmemftime" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [60265 60273])
                    ("maxsize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60274 60289])
                    ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [60290 60309])
                    ("format_len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60313 60331])
                    ("tp" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [60332 60352])
                    ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60353 60367])
                    ("ns" variable (:type "int") (reparse-symbol arg-sub-list) [60368 60375]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [60234 61172])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61203 61223])
                    ("" variable (:type ("Sformat_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61224 61244])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61261 61265]))                  
                :type "int")
                nil [61174 64251])
            ("format_time_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [64593 64612])
                    ("formatlen" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64613 64633])
                    ("t" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [64640 64658])
                    ("zone" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64659 64676])
                    ("tmp" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [64677 64692]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64554 65910])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdecode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65934 65947])
                    ("" variable (:type ("Sdecode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65948 65961])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65978 65982]))                  
                :type "int")
                nil [65912 67395])
            ("check_tm_member" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68481 68497])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [68498 68509]))                  
                :type "int")
                nil [68453 68666])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fencode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68690 68703])
                    ("" variable (:type ("Sencode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68704 68717])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68721 68726])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68737 68741]))                  
                :type "int")
                nil [68668 69936])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70564 70585])
                    ("" variable (:type ("Scurrent_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70586 70607])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70631 70635]))                  
                :type "int")
                nil [70534 71725])
            ("tm_diff" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [72877 72890])
                    ("b" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [72891 72904]))                  
                :type "int")
                nil [72857 73701])
            ("tm_gmtoff" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [73795 73808]))                  
                :type "long int")
                nil [73768 73879])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time_zone" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73909 73928])
                    ("" variable (:type ("Scurrent_time_zone" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73929 73948])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73965 73969]))                  
                :type "int")
                nil [73881 75149])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_time_zone_rule" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76425 76445])
                    ("" variable (:type ("Sset_time_zone_rule" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76446 76466])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76483 76487]))                  
                :type "int")
                nil [76396 77378])
            ("tzvalbuf" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [77606 77628])
            ("emacs_getenv_TZ" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [77691 77696]))                  
                :type "char")
                nil [77667 77754])
            ("emacs_setenv_TZ" function
               (:arguments 
                  ( ("tzstring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [78150 78171]))                  
                :type "int")
                nil [78129 80024])
            ("general_insert_function" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("insert_func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :constant-flag t
                                :type "char")
                                (reparse-symbol arg-sub-list) [80345 80358])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80359 80369]))                          
                        :type "void")
                        nil nil)
                    ("insert_from_string_func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80417 80429])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80430 80440])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80441 80451])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80462 80472])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80473 80483])
                            ("" variable (:type "bool") (reparse-symbol arg-sub-list) [80484 80489]))                          
                        :type "void")
                        nil nil)
                    ("inherit" variable (:type "bool") (reparse-symbol arg-sub-list) [80495 80508])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80509 80525])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80526 80544]))                  
                :type "void")
                nil [80278 81204])
            ("insert1" function
               (:arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81220 81236]))                  
                :type "void")
                nil [81206 81261])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81281 81289])
                    ("" variable (:type ("Sinsert" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81290 81298])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81302 81307])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81318 81322]))                  
                :type "int")
                nil [81264 82086])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_and_inherit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82208 82228])
                    ("" variable (:type ("Sinsert_and_inherit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82229 82249])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82256 82261])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82272 82276]))                  
                :type "int")
                nil [82179 82809])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82952 82975])
                    ("" variable (:type ("Sinsert_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82976 82999])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83003 83008])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83019 83023]))                  
                :type "int")
                nil [82920 83661])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_and_inherit_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83840 83875])
                    ("" variable (:type ("Sinsert_and_inherit_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83878 83913])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83917 83922])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83933 83937]))                  
                :type "int")
                nil [83796 84394])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84564 84577])
                    ("" variable (:type ("Sinsert_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84578 84591])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84762 84766]))                  
                :type "int")
                nil [84542 85899])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_byte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86870 86883])
                    ("" variable (:type ("Sinsert_byte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86884 86897])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86914 86918]))                  
                :type "int")
                nil [86848 87427])
            ("make_buffer_string" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88532 88548])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88549 88563])
                    ("props" variable (:type "bool") (reparse-symbol arg-sub-list) [88564 88575]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [88500 88746])
            ("make_buffer_string_both" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89491 89507])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89508 89529])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89534 89548])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89549 89568])
                    ("props" variable (:type "bool") (reparse-symbol arg-sub-list) [89569 89580]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [89454 90828])
            ("update_buffer_properties" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90982 90998])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90999 91013]))                  
                :type "void")
                nil [90944 91635])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91664 91682])
                    ("" variable (:type ("Sbuffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91683 91701])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91718 91722]))                  
                :type "int")
                nil [91637 92157])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_substring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92350 92382])
                    ("" variable (:type ("Sbuffer_substring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92390 92422])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92439 92443]))                  
                :type "int")
                nil [92309 92650])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92826 92841])
                    ("" variable (:type ("Sbuffer_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92842 92857])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92874 92878]))                  
                :type "int")
                nil [92802 93036])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_buffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93144 93169])
                    ("" variable (:type ("Sinsert_buffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93170 93195])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93219 93223]))                  
                :type "int")
                nil [93110 93888])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcompare_buffer_substrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94745 94772])
                    ("" variable (:type ("Scompare_buffer_substrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94773 94800])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94824 94828]))                  
                :type "int")
                nil [94709 95610])
            ("rbc_quitcounter" variable
               (:typemodifiers ("static")
                :type "unsigned short")
                nil [98973 99011])
            ("XVECREF_YVECREF_EQUAL" variable (:constant-flag t) nil [99021 99042])
            ("OFFSET" variable (:constant-flag t) nil [99117 99123])
            ("EXTRA_CONTEXT_FIELDS" variable (:constant-flag t) nil [99143 99163])
            ("deletions" variable
               (:pointer 1
                :type "unsigned char")
                nil [99644 99669])
            ("insertions" variable
               (:pointer 1
                :type "unsigned char")
                nil [99694 99720])
            ("NOTE_DELETE" variable (:constant-flag t) nil [99730 99741])
            ("NOTE_INSERT" variable (:constant-flag t) nil [99796 99807])
            ("context" type
               (:prototype t
                :type "struct")
                nil [99856 99871])
            ("set_bit" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [99893 99909])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99910 99917]))                  
                :type "void")
                nil [99872 99918])
            ("bit_is_set" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [99943 99965])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99966 99973]))                  
                :type "bool")
                nil [99919 99974])
            ("buffer_chars_equal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [100007 100024])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100025 100032])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100033 100040]))                  
                :type "bool")
                nil [99975 100041])
            ("minmax.h" include nil nil [100043 100062])
            ("diffseq.h" include nil nil [100063 100083])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Freplace_buffer_contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100119 100144])
                    ("" variable (:type ("Sreplace_buffer_contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100152 100177])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100211 100215]))                  
                :type "int")
                nil [100085 100664])
            ("set_bit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [105256 105273])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105274 105286]))                  
                :type "void")
                nil [105235 105450])
            ("bit_is_set" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [105476 105499])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105500 105512]))                  
                :type "bool")
                nil [105452 105682])
            ("buffer_chars_equal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [106291 106311])
                    ("pos_a" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106332 106348])
                    ("pos_b" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106349 106365]))                  
                :type "bool")
                nil [106259 107534])
            ("subst_char_in_region_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107579 107595]))                  
                :type "void")
                nil [107538 107639])
            ("subst_char_in_region_unwind_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107684 107700]))                  
                :type "void")
                nil [107641 107743])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubst_char_in_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107776 107798])
                    ("" variable (:type ("Ssubst_char_in_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107806 107828])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107845 107849]))                  
                :type "int")
                nil [107745 108203])
            ("check_translation" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113329 113339])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113340 113350])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113351 113361])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113372 113384]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113291 113385])
            ("check_translation" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113679 113693])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113694 113713])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113714 113728])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113734 113750]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113641 114825])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftranslate_region_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114864 114891])
                    ("" variable (:type ("Stranslate_region_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114899 114926])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114943 114947]))                  
                :type "int")
                nil [114828 115251])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118817 118832])
                    ("" variable (:type ("Sdelete_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118833 118848])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118867 118871]))                  
                :type "int")
                nil [118793 119090])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_and_extract_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119227 119254])
                    ("" variable (:type ("Sdelete_and_extract_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119262 119289])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119306 119310]))                  
                :type "int")
                nil [119191 119410])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwiden" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119601 119608])
                    ("" variable (:type ("Swiden" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119609 119616])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119634 119638]))                  
                :type "int")
                nil [119585 119766])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnarrow_to_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120076 120094])
                    ("" variable (:type ("Snarrow_to_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120095 120113])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120132 120136]))                  
                :type "int")
                nil [120049 120605])
            ("save_restriction_save" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [121392 121397]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121357 122077])
            ("save_restriction_restore" function
               (:arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122110 122127]))                  
                :type "void")
                nil [122079 124414])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_restriction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124443 124461])
                    ("" variable (:type ("Ssave_restriction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124462 124480])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124484 124494])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124505 124509]))                  
                :type "int")
                nil [124416 125295])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125521 125530])
                    ("" variable (:type ("Smessage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125531 125540])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125544 125549])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125560 125564]))                  
                :type "int")
                nil [125503 126413])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126688 126701])
                    ("" variable (:type ("Smessage_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126702 126715])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126719 126724])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126735 126739]))                  
                :type "int")
                nil [126666 127196])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage_or_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127547 127563])
                    ("" variable (:type ("Smessage_or_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127564 127580])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127584 127589])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127600 127604]))                  
                :type "int")
                nil [127522 128141])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128334 128351])
                    ("" variable (:type ("Scurrent_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128352 128369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128386 128390]))                  
                :type "int")
                nil [128308 128479])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpropertize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128536 128548])
                    ("" variable (:type ("Spropertize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128549 128561])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128565 128570])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128581 128585]))                  
                :type "int")
                nil [128515 128868])
            ("str2num" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [129727 129737])
                    ("str_end" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [129738 129753]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [129701 129940])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129959 129967])
                    ("" variable (:type ("Sformat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129968 129976])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129980 129985])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129996 130000]))                  
                :type "int")
                nil [129942 133269])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133345 133361])
                    ("" variable (:type ("Sformat_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133362 133378])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133382 133387])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133398 133402]))                  
                :type "int")
                nil [133320 133895])
            ("styled_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134054 134070])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [134071 134089])
                    ("message" variable (:type "bool") (reparse-symbol arg-sub-list) [134090 134103]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134020 160854])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160878 160890])
                    ("" variable (:type ("Schar_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160891 160903])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160920 160924]))                  
                :type "int")
                nil [160857 161159])
            ("transpose_markers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162864 162881])
                    ("end1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162882 162897])
                    ("start2" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162903 162920])
                    ("end2" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162921 162936])
                    ("start1_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162942 162964])
                    ("end1_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162965 162985])
                    ("start2_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162991 163013])
                    ("end2_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163014 163034]))                  
                :type "void")
                nil [162833 165203])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftranspose_regions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165233 165252])
                    ("" variable (:type ("Stranspose_regions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165253 165272])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165687 165691]))                  
                :type "int")
                nil [165205 166489])
            ("syms_of_editfns" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [177558 177563]))                  
                :type "void")
                nil [177536 182988]))          
      :file "editfns.c"
      :pointmax 182989
      :fsize 183002
      :lastmodtime '(23451 3115 763048 827000)
      :unmatched-syntax '((semantic-list 166490 . 177532) (punctuation 165690 . 165691) (string 165286 . 165678) (number 165276 . 165277) (number 165273 . 165274) (string 165212 . 165231) (semantic-list 161160 . 162147) (punctuation 160923 . 160924) (number 160910 . 160911) (number 160907 . 160908) (number 160904 . 160905) (string 160864 . 160876) (semantic-list 133896 . 133943) (punctuation 133401 . 133402) (number 133388 . 133389) (number 133379 . 133380) (string 133327 . 133343) (semantic-list 133270 . 133318) (punctuation 129999 . 130000) (number 129986 . 129987) (number 129977 . 129978) (string 129949 . 129957) (semantic-list 128869 . 129379) (punctuation 128584 . 128585) (number 128571 . 128572) (number 128562 . 128563) (string 128522 . 128534) (semantic-list 128480 . 128512) (punctuation 128389 . 128390) (number 128376 . 128377) (number 128373 . 128374) (number 128370 . 128371) (string 128315 . 128332) (semantic-list 128142 . 128306) (punctuation 127603 . 127604) (number 127590 . 127591) (number 127581 . 127582) (string 127529 . 127545) (semantic-list 127197 . 127520) (punctuation 126738 . 126739) (number 126725 . 126726) (number 126716 . 126717) (string 126673 . 126686) (semantic-list 126414 . 126664) (punctuation 125563 . 125564) (number 125550 . 125551) (number 125541 . 125542) (string 125510 . 125519) (semantic-list 125296 . 125500) (punctuation 124508 . 124509) (number 124495 . 124496) (number 124481 . 124482) (string 124423 . 124441) (semantic-list 120606 . 121355) (punctuation 120135 . 120136) (string 120120 . 120123) (number 120117 . 120118) (number 120114 . 120115) (string 120056 . 120074) (semantic-list 119767 . 120047) (punctuation 119637 . 119638) (string 119623 . 119625) (number 119620 . 119621) (number 119617 . 119618) (string 119592 . 119599) (semantic-list 119411 . 119582) (punctuation 119309 . 119310) (number 119296 . 119297) (number 119293 . 119294) (number 119290 . 119291) (string 119198 . 119225) (semantic-list 119091 . 119189) (punctuation 118870 . 118871) (string 118855 . 118858) (number 118852 . 118853) (number 118849 . 118850) (string 118800 . 118815) (semantic-list 115252 . 118791) (punctuation 114946 . 114947) (number 114933 . 114934) (number 114930 . 114931) (number 114927 . 114928) (string 114835 . 114862) (semantic-list 108204 . 113288) (punctuation 107848 . 107849) (number 107835 . 107836) (number 107832 . 107833) (number 107829 . 107830) (string 107752 . 107774) (semantic-list 100665 . 105233) (punctuation 100214 . 100215) (string 100184 . 100202) (number 100181 . 100182) (number 100178 . 100179) (string 100092 . 100117) (semantic-list 95611 . 98779) (punctuation 94827 . 94828) (number 94814 . 94815) (number 94811 . 94812) (number 94808 . 94809) (string 94716 . 94743) (semantic-list 93889 . 94707) (punctuation 93222 . 93223) (number 93209 . 93210) (number 93206 . 93207) (number 93203 . 93204) (string 93117 . 93142) (semantic-list 93037 . 93108) (punctuation 92877 . 92878) (number 92864 . 92865) (number 92861 . 92862) (number 92858 . 92859) (string 92809 . 92824) (semantic-list 92651 . 92800) (punctuation 92442 . 92443) (number 92429 . 92430) (number 92426 . 92427) (number 92423 . 92424) (string 92316 . 92348) (semantic-list 92158 . 92307) (punctuation 91721 . 91722) (number 91708 . 91709) (number 91705 . 91706) (number 91702 . 91703) (string 91644 . 91662) (semantic-list 87428 . 87772) (punctuation 86917 . 86918) (number 86904 . 86905) (number 86901 . 86902) (number 86898 . 86899) (string 86855 . 86868) (semantic-list 85900 . 86846) (punctuation 84765 . 84766) (string 84605 . 84753) (number 84595 . 84596) (number 84592 . 84593) (string 84549 . 84562) (semantic-list 84395 . 84539) (punctuation 83936 . 83937) (number 83923 . 83924) (number 83914 . 83915) (string 83803 . 83838) (semantic-list 83662 . 83794) (punctuation 83022 . 83023) (number 83009 . 83010) (number 83000 . 83001) (string 82927 . 82950) (semantic-list 82810 . 82918) (punctuation 82275 . 82276) (number 82262 . 82263) (number 82253 . 82254) (string 82186 . 82206) (semantic-list 82087 . 82177) (punctuation 81321 . 81322) (number 81308 . 81309) (number 81299 . 81300) (string 81271 . 81279) (semantic-list 77379 . 77440) (punctuation 76486 . 76487) (number 76473 . 76474) (number 76470 . 76471) (number 76467 . 76468) (string 76403 . 76423) (semantic-list 75150 . 76394) (punctuation 73968 . 73969) (number 73955 . 73956) (number 73952 . 73953) (number 73949 . 73950) (string 73888 . 73907) (semantic-list 71726 . 72763) (punctuation 70634 . 70635) (number 70621 . 70622) (number 70618 . 70619) (number 70615 . 70616) (string 70541 . 70562) (semantic-list 69937 . 70532) (punctuation 68740 . 68741) (number 68727 . 68728) (number 68718 . 68719) (string 68675 . 68688) (semantic-list 67396 . 68336) (punctuation 65981 . 65982) (number 65968 . 65969) (number 65965 . 65966) (number 65962 . 65963) (string 65919 . 65932) (semantic-list 64252 . 64552) (punctuation 61264 . 61265) (number 61251 . 61252) (number 61248 . 61249) (number 61245 . 61246) (string 61181 . 61201) (semantic-list 59408 . 59642) (punctuation 58768 . 58769) (number 58755 . 58756) (number 58752 . 58753) (number 58749 . 58750) (string 58709 . 58721) (semantic-list 51096 . 51788) (punctuation 50831 . 50832) (number 50818 . 50819) (number 50815 . 50816) (number 50812 . 50813) (string 50732 . 50755) (semantic-list 50451 . 50722) (punctuation 50217 . 50218) (number 50204 . 50205) (number 50201 . 50202) (number 50198 . 50199) (string 50155 . 50168) (semantic-list 50100 . 50146) (punctuation 49794 . 49795) (number 49781 . 49782) (number 49778 . 49779) (number 49775 . 49776) (string 49726 . 49741) (semantic-list 49676 . 49717) (punctuation 49447 . 49448) (number 49434 . 49435) (number 49431 . 49432) (number 49428 . 49429) (string 49394 . 49404) (semantic-list 48780 . 48816) (close-paren 48778 . 48779) (symbol 48776 . 48778) (punctuation 48775 . 48776) (open-paren 48774 . 48775) (semantic-list 47806 . 47856) (punctuation 47491 . 47492) (number 47478 . 47479) (number 47475 . 47476) (number 47472 . 47473) (string 47426 . 47440) (semantic-list 46420 . 46479) (punctuation 46295 . 46296) (number 46282 . 46283) (number 46279 . 46280) (number 46276 . 46277) (string 46239 . 46250) (semantic-list 46124 . 46230) (punctuation 46036 . 46037) (number 46023 . 46024) (number 46020 . 46021) (number 46017 . 46018) (string 45974 . 45987) (semantic-list 44765 . 45965) (punctuation 44367 . 44368) (number 44354 . 44355) (number 44351 . 44352) (number 44348 . 44349) (string 44296 . 44312) (semantic-list 44228 . 44287) (punctuation 44118 . 44119) (number 44105 . 44106) (number 44102 . 44103) (number 44099 . 44100) (string 44047 . 44063) (semantic-list 43976 . 44038) (punctuation 43861 . 43862) (number 43848 . 43849) (number 43845 . 43846) (number 43842 . 43843) (string 43805 . 43816) (semantic-list 43737 . 43796) (punctuation 43627 . 43628) (number 43614 . 43615) (number 43611 . 43612) (number 43608 . 43609) (string 43559 . 43574) (semantic-list 43488 . 43550) (punctuation 43373 . 43374) (number 43360 . 43361) (number 43357 . 43358) (number 43354 . 43355) (string 43320 . 43330) (semantic-list 43054 . 43311) (punctuation 42863 . 42864) (number 42850 . 42851) (number 42847 . 42848) (number 42844 . 42845) (string 42767 . 42789) (semantic-list 42303 . 42758) (punctuation 41931 . 41932) (number 41918 . 41919) (number 41915 . 41916) (number 41912 . 41913) (string 41857 . 41874) (semantic-list 41120 . 41847) (punctuation 40936 . 40937) (number 40923 . 40924) (number 40920 . 40921) (number 40917 . 40918) (string 40874 . 40887) (semantic-list 40323 . 40865) (punctuation 40146 . 40147) (number 40133 . 40134) (number 40130 . 40131) (number 40127 . 40128) (string 40087 . 40099) (semantic-list 39997 . 40078) (punctuation 39872 . 39873) (number 39859 . 39860) (number 39856 . 39857) (number 39853 . 39854) (string 39831 . 39837) (semantic-list 39735 . 39822) (punctuation 39667 . 39668) (number 39654 . 39655) (number 39651 . 39652) (number 39648 . 39649) (string 39626 . 39632) (semantic-list 39568 . 39617) (punctuation 39434 . 39435) (number 39421 . 39422) (number 39418 . 39419) (number 39415 . 39416) (string 39393 . 39399) (semantic-list 39333 . 39384) (punctuation 39187 . 39188) (number 39174 . 39175) (number 39171 . 39172) (number 39168 . 39169) (string 39146 . 39152) (semantic-list 38818 . 39137) (punctuation 38685 . 38686) (number 38672 . 38673) (number 38669 . 38670) (number 38666 . 38667) (string 38616 . 38632) (semantic-list 38473 . 38607) (punctuation 38346 . 38347) (number 38333 . 38334) (number 38330 . 38331) (number 38327 . 38328) (string 38275 . 38291) (semantic-list 37776 . 38265) (punctuation 37639 . 37640) (number 37626 . 37627) (number 37623 . 37624) (number 37620 . 37621) (string 37562 . 37580) (semantic-list 37376 . 37553) (punctuation 37236 . 37237) (number 37223 . 37224) (number 37220 . 37221) (number 37217 . 37218) (string 37165 . 37181) (semantic-list 37086 . 37156) (punctuation 36997 . 36998) (number 36984 . 36985) (number 36981 . 36982) (number 36978 . 36979) (string 36944 . 36954) (semantic-list 36870 . 36935) (punctuation 36775 . 36776) (number 36762 . 36763) (number 36759 . 36760) (number 36756 . 36757) (string 36710 . 36724) (semantic-list 36645 . 36701) (punctuation 36444 . 36445) (number 36431 . 36432) (number 36428 . 36429) (number 36425 . 36426) (string 36367 . 36385) (semantic-list 36294 . 36358) (punctuation 36098 . 36099) (number 36085 . 36086) (number 36082 . 36083) (number 36079 . 36080) (string 36042 . 36053) (semantic-list 35973 . 36033) (punctuation 35803 . 35804) (number 35790 . 35791) (number 35787 . 35788) (number 35784 . 35785) (string 35726 . 35744) (semantic-list 35651 . 35717) (punctuation 35498 . 35499) (number 35485 . 35486) (number 35482 . 35483) (number 35479 . 35480) (string 35442 . 35453) (semantic-list 35240 . 35433) (punctuation 34788 . 34789) (number 34775 . 34776) (number 34772 . 34773) (number 34769 . 34770) (string 34726 . 34739) (semantic-list 34596 . 34716) (punctuation 34417 . 34418) (number 34404 . 34405) (number 34390 . 34391) (string 34323 . 34344) (semantic-list 34149 . 34314) (punctuation 33588 . 33589) (number 33575 . 33576) (number 33561 . 33562) (string 33509 . 33525) (semantic-list 31591 . 32064) (punctuation 30861 . 30862) (number 30848 . 30849) (number 30845 . 30846) (number 30842 . 30843) (string 30781 . 30800) (semantic-list 30412 . 30772) (punctuation 29658 . 29659) (number 29645 . 29646) (number 29642 . 29643) (number 29639 . 29640) (string 29553 . 29578) (semantic-list 26325 . 29542) (punctuation 24723 . 24724) (number 24710 . 24711) (number 24707 . 24708) (number 24704 . 24705) (string 24640 . 24660) (semantic-list 24523 . 24631) (punctuation 24047 . 24048) (number 24034 . 24035) (number 24031 . 24032) (number 24028 . 24029) (string 23991 . 24002) (semantic-list 23874 . 23982) (punctuation 23374 . 23375) (number 23361 . 23362) (number 23358 . 23359) (number 23355 . 23356) (string 23300 . 23317) (semantic-list 23173 . 23291) (punctuation 22962 . 22963) (number 22949 . 22950) (number 22946 . 22947) (number 22943 . 22944) (string 22855 . 22883) (semantic-list 22728 . 22846) (punctuation 22525 . 22526) (number 22512 . 22513) (number 22509 . 22510) (number 22506 . 22507) (string 22460 . 22474) (semantic-list 22317 . 22451) (punctuation 22142 . 22143) (number 22129 . 22130) (number 22126 . 22127) (number 22123 . 22124) (string 22077 . 22091) (semantic-list 14877 . 17196) (punctuation 14357 . 14358) (number 14344 . 14345) (number 14341 . 14342) (number 14338 . 14339) (string 14280 . 14298) (semantic-list 12884 . 12925) (punctuation 12685 . 12686) (number 12672 . 12673) (number 12669 . 12670) (number 12666 . 12667) (string 12623 . 12636) (semantic-list 12584 . 12614) (punctuation 12501 . 12502) (number 12488 . 12489) (number 12485 . 12486) (number 12482 . 12483) (string 12442 . 12454) (semantic-list 12403 . 12433) (punctuation 12319 . 12320) (number 12306 . 12307) (number 12303 . 12304) (number 12300 . 12301) (string 12242 . 12260) (semantic-list 11312 . 11554) (punctuation 11129 . 11130) (string 11103 . 11117) (number 11100 . 11101) (number 11097 . 11098) (string 11060 . 11071) (semantic-list 10995 . 11051) (punctuation 10933 . 10934) (number 10920 . 10921) (number 10917 . 10918) (number 10914 . 10915) (string 10868 . 10882) (semantic-list 10795 . 10859) (punctuation 10693 . 10694) (number 10680 . 10681) (number 10677 . 10678) (number 10674 . 10675) (string 10649 . 10656) (semantic-list 10366 . 10640) (punctuation 10286 . 10287) (number 10273 . 10274) (number 10270 . 10271) (number 10267 . 10268) (string 10215 . 10231) (semantic-list 10008 . 10206) (punctuation 9918 . 9919) (number 9905 . 9906) (number 9902 . 9903) (number 9899 . 9900) (string 9847 . 9863) (semantic-list 9632 . 9838) (punctuation 9511 . 9512) (number 9498 . 9499) (number 9495 . 9496) (number 9492 . 9493) (string 9440 . 9456) (number 2448 . 2449) (punctuation 2446 . 2447) (string 2440 . 2445) (SIZEOF 2433 . 2439) (punctuation 2431 . 2432))
      :lexical-table 
        '(("TM_YEAR_BASE" . ((number "1900" 1872 . 1876)))
          ("OFFSET" . ((symbol "ptrdiff_t" 99124 . 99133)))
          ("HAVE_TM_GMTOFF" . ((symbol "false" 2402 . 2407)))
          ("EXTRA_CONTEXT_FIELDS" . 
              ((STRUCT "struct" 99237 . 99243) (symbol "buffer" 99244 . 99250) (punctuation "*" 99251 . 99252) (symbol "buffer_a" 99252 . 99260) (punctuation ";" 99260 . 99261) (STRUCT "struct" 99287 . 99293) (symbol "buffer" 99294 . 99300) (punctuation "*" 99301 . 99302) (symbol "buffer_b" 99302 . 99310) (punctuation ";" 99310 . 99311) (symbol "ptrdiff_t" 99369 . 99378) (symbol "beg_a" 99379 . 99384) (punctuation ";" 99384 . 99385) (symbol "ptrdiff_t" 99393 . 99402) (symbol "beg_b" 99403 . 99408) (punctuation ";" 99408 . 99409) (BOOL "bool" 99479 . 99483) (symbol "a_unibyte" 99484 . 99493) (punctuation ";" 99493 . 99494) (BOOL "bool" 99502 . 99506) (symbol "b_unibyte" 99507 . 99516) (punctuation ";" 99516 . 99517)))
          ("COMBINING_BOTH" . ((semantic-list "(COMBINING_BEFORE | COMBINING_AFTER)" 108756 . 108792)))
          ("NOTE_INSERT" (spp-arg-list ("ctx" "yoff") 99807 . 99818) . ((symbol "set_bit" 99819 . 99826) (semantic-list "((ctx)->insertions, (yoff))" 99827 . 99854)))
          ("TIME_T_MAX" . ((symbol "TYPE_MAXIMUM" 46591 . 46603) (semantic-list "(time_t)" 46604 . 46612)))
          ("COMBINING_AFTER" . ((number "2" 108731 . 108732)))
          ("TIME_T_MIN" . ((symbol "TYPE_MINIMUM" 46523 . 46535) (semantic-list "(time_t)" 46536 . 46544)))
          ("XVECREF_YVECREF_EQUAL" (spp-arg-list ("ctx" "xoff" "yoff") 99042 . 99059) . ((symbol "buffer_chars_equal" 99065 . 99083) (semantic-list "((ctx), (xoff), (yoff))" 99084 . 99107)))
          ("HAVE_TZALLOC_BUG" . ((symbol "false" 1553 . 1558)))
          ("NOTE_DELETE" (spp-arg-list ("ctx" "xoff") 99741 . 99752) . ((symbol "set_bit" 99753 . 99760) (semantic-list "((ctx)->deletions, (xoff))" 99761 . 99787)))
          ("COMBINING_BEFORE" . ((number "1" 108704 . 108705)))
          ("COMBINING_NO" . ((number "0" 108677 . 108678)))
          )
)
    (semanticdb-table "semanticdb-table-1d998d4"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [729 748]))          
      :file "lcms.c"
      :pointmax 17750
      :fsize 17749
      :lastmodtime '(23443 29220 53166 949000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1dbca40"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("shortlisp" variable (:default-value ("emacs-lisp/byte-run.elc" "emacs-lisp/backquote.elc" "subr.elc" "version.elc" "widget.elc" "custom.elc" "emacs-lisp/map-ynp.elc" "international/mule.elc" "international/mule-conf.elc" "env.elc" "format.elc" "bindings.elc" "window.elc" "files.elc" "emacs-lisp/macroexp.elc" "emacs-lisp/macroexp.elc" "cus-face.elc" "faces.elc" "button.elc" "emacs-lisp/nadvice.elc" "emacs-lisp/cl-preloaded.elc" "minibuffer.elc" "obarray.elc" "abbrev.elc" "simple.elc" "help.elc" "jka-cmpr-hook.elc" "epa-hook.elc" "international/mule-cmds.elc" "case-table.elc" "international/charprop.el" "international/characters.elc" "composite.elc" "language/chinese.elc" "language/cyrillic.elc" "language/indian.elc" "language/sinhala.elc" "language/english.elc" "language/ethiopic.elc" "language/european.elc" "language/czech.elc" "language/slovak.elc" "language/romanian.elc" "language/greek.elc" "language/hebrew.elc" "international/cp51932.elc" "international/eucjp-ms.elc" "language/japanese.elc" "language/korean.elc" "language/lao.elc" "language/tai-viet.elc" "language/thai.elc" "language/tibetan.elc" "language/vietnamese.elc" "language/misc-lang.elc" "language/utf-8-lang.elc" "language/georgian.elc" "language/khmer.elc" "language/burmese.elc" "language/cham.elc" "indent.elc" "emacs-lisp/cl-generic.elc" "frame.elc" "startup.elc" "term/tty-colors.elc" "font-core.elc" "facemenu.elc" "emacs-lisp/syntax.elc" "font-lock.elc" "jit-lock.elc" "mouse.elc" "scroll-bar.elc" "select.elc" "emacs-lisp/timer.elc" "isearch.elc" "rfn-eshadow.elc" "menu-bar.elc" "emacs-lisp/lisp.elc" "textmodes/page.elc" "register.elc" "textmodes/paragraphs.elc" "progmodes/prog-mode.elc" "emacs-lisp/lisp-mode.elc" "progmodes/elisp-mode.elc" "textmodes/text-mode.elc" "textmodes/fill.elc" "newcomment.elc" "replace.elc" "emacs-lisp/tabulated-list.elc" "buff-menu.elc" "fringe.elc" "emacs-lisp/regexp-opt.elc" "image.elc" "international/fontset.elc" "dnd.elc" "tool-bar.elc" "dynamic-setting.elc" "x-dnd.elc" "term/common-win.elc" "term/x-win.elc" "term/common-win.elc" "w32-vars.elc" "term/w32-win.elc" "disp-table.elc" "w32-fns.elc" "ls-lisp.elc" "dos-w32.elc" "dos-w32.elc" "dos-fns.elc" "dos-vars.elc" "term/internal.elc" "term/pc-win.elc" "ls-lisp.elc" "disp-table.elc" "term/common-win.elc" "international/mule-util.elc" "international/ucs-normalize.elc" "term/ns-win.elc" "mwheel.elc" "emacs-lisp/float-sup.elc" "vc/vc-hooks.elc" "vc/ediff-hook.elc" "uniquify.elc" "electric.elc" "emacs-lisp/eldoc.elc" "cus-start.elc" "tooltip.elc" "leim/leim-list.el" "site-load.elc" "site-init.elc")) nil [1 2563]))          
      :file "lisp.mk"
      :pointmax 2563
      :fsize 2562
      :lastmodtime '(23455 610 301016 620000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-187b33c"
      :major-mode c-mode
      :tags 
        '( ("DEFINE_SYMBOLS" variable (:constant-flag t) nil [828 842])
            ("config.h" include (:system-flag t) nil [844 863])
            ("sysstdio.h" include nil nil [864 885])
            ("stdlib.h" include (:system-flag t) nil [886 905])
            ("sys/types.h" include (:system-flag t) nil [906 928])
            ("sys/stat.h" include (:system-flag t) nil [929 950])
            ("sys/file.h" include (:system-flag t) nil [951 972])
            ("errno.h" include (:system-flag t) nil [973 991])
            ("math.h" include (:system-flag t) nil [992 1009])
            ("stat-time.h" include (:system-flag t) nil [1010 1032])
            ("lisp.h" include nil nil [1033 1050])
            ("dispextern.h" include nil nil [1051 1074])
            ("intervals.h" include nil nil [1075 1097])
            ("character.h" include nil nil [1098 1120])
            ("buffer.h" include nil nil [1121 1140])
            ("charset.h" include nil nil [1141 1161])
            ("epaths.h" include (:system-flag t) nil [1162 1181])
            ("commands.h" include nil nil [1182 1203])
            ("keyboard.h" include nil nil [1204 1225])
            ("systime.h" include nil nil [1226 1246])
            ("termhooks.h" include nil nil [1247 1269])
            ("blockinput.h" include nil nil [1270 1293])
            ("c-ctype.h" include (:system-flag t) nil [1294 1314])
            ("unistd.h" include (:system-flag t) nil [1520 1539])
            ("fcntl.h" include (:system-flag t) nil [1612 1630])
            ("file_offset" variable (:constant-flag t) nil [1716 1727])
            ("file_tell" variable (:constant-flag t) nil [1741 1750])
            ("read_objects_map" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2408 2444])
            ("read_objects_completed" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3165 3207])
            ("infile" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("infile" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [3315 3629])
            ("infile" type
               (:members 
                  ( ("stream" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3367 3380])
                    ("lookahead" variable (:type "signed char") (reparse-symbol classsubparts) [3415 3437])
                    ("buf" variable
                       (:dereference 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [3574 3618]))                  
                :type "struct")
                nil [3315 3629])
            ("read_from_string_index" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3703 3743])
            ("read_from_string_index_byte" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3744 3789])
            ("read_from_string_limit" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3790 3830])
            ("readchar_count" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3919 3951])
            ("saved_doc_string" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4007 4037])
            ("saved_doc_string_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4093 4132])
            ("saved_doc_string_length" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4183 4224])
            ("saved_doc_string_position" variable
               (:typemodifiers ("static")
                :type "long")
                nil [4281 4326])
            ("prev_saved_doc_string" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4471 4506])
            ("prev_saved_doc_string_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4567 4611])
            ("prev_saved_doc_string_length" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4667 4713])
            ("prev_saved_doc_string_position" variable
               (:typemodifiers ("static")
                :type "long")
                nil [4770 4820])
            ("new_backquote_flag" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [5066 5097])
            ("Vloads_in_progress" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [5200 5238])
            ("read_emacs_mule_char" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5273 5277])
                    ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5287 5291])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5292 5304]))                          
                        :type "int")
                        nil nil)
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5339 5351]))                  
                :type "int")
                nil [5240 5352])
            ("readevalloop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5380 5392])
                    ("" variable
                       (:pointer 1
                        :type ("infile" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5393 5409])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5410 5422])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [5423 5428])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5455 5467])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5468 5480])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5507 5519])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5520 5532]))                  
                :type "void")
                nil [5354 5533])
            ("build_load_history" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5567 5579])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [5580 5585]))                  
                :type "void")
                nil [5535 5586])
            ("readbyte_for_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5913 5917])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5918 5930]))                  
                :type "int")
                nil [5881 5931])
            ("readbyte_from_file" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5963 5967])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5968 5980]))                  
                :type "int")
                nil [5932 5981])
            ("readbyte_from_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [6015 6019])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6020 6032]))                  
                :type "int")
                nil [5982 6033])
            ("READCHAR" variable (:constant-flag t) nil [6240 6248])
            ("UNREAD" variable (:constant-flag t) nil [6286 6292])
            ("READCHAR_REPORT_MULTIBYTE" variable (:constant-flag t) nil [6412 6437])
            ("unread_char" variable
               (:typemodifiers ("static")
                :type "int")
                nil [6738 6761])
            ("readchar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6784 6808])
                    ("multibyte" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [6809 6825]))                  
                :type "int")
                nil [6763 10683])
            ("FROM_FILE_P" variable (:constant-flag t) nil [10693 10704])
            ("skip_dyn_bytes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10842 10866])
                    ("n" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10867 10879]))                  
                :type "void")
                nil [10814 11580])
            ("skip_dyn_eof" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11608 11632]))                  
                :type "void")
                nil [11582 11873])
            ("unreadchar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12053 12077])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [12078 12084]))                  
                :type "void")
                nil [12029 13425])
            ("readbyte_for_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [13459 13465])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13466 13490]))                  
                :type "int")
                nil [13427 13532])
            ("readbyte_from_stdio" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13567 13572]))                  
                :type "int")
                nil [13535 14054])
            ("readbyte_from_file" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14087 14093])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14094 14118]))                  
                :type "int")
                nil [14056 14298])
            ("readbyte_from_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14333 14339])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14340 14364]))                  
                :type "int")
                nil [14300 14765])
            ("read_emacs_mule_char" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14940 14946])
                    ("readbyte" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [14964 14968])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14969 14981]))                          
                        :type "int")
                        nil nil)
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14983 15007]))                  
                :type "int")
                nil [14907 16281])
            ("subst" type
               (:members 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16363 16382])
                    ("placeholder" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16385 16409])
                    ("completed" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16530 16552])
                    ("seen" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16626 16643]))                  
                :type "struct")
                nil [16346 16646])
            ("read_internal_start" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16688 16700])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16701 16713])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16754 16766]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16648 16767])
            ("read0" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16794 16806]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16768 16807])
            ("read1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16834 16846])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [16847 16853])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16854 16859]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16808 16860])
            ("read_list" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16892 16897])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16898 16910]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16862 16911])
            ("read_vector" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16944 16956])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16957 16962]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16912 16963])
            ("substitute_object_recurse" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("subst" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17011 17026])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17027 17039]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16965 17040])
            ("substitute_in_interval" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17077 17086])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [17087 17094]))                  
                :type "void")
                nil [17041 17095])
            ("read_filtered_event" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("no_switch_frame" variable (:type "bool") (reparse-symbol arg-sub-list) [17971 17992])
                    ("ascii_required" variable (:type "bool") (reparse-symbol arg-sub-list) [17993 18013])
                    ("error_nonascii" variable (:type "bool") (reparse-symbol arg-sub-list) [18021 18041])
                    ("input_method" variable (:type "bool") (reparse-symbol arg-sub-list) [18042 18060])
                    ("seconds" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18061 18081]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [17931 20271])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20293 20304])
                    ("" variable (:type ("Sread_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20305 20316])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20333 20337]))                  
                :type "int")
                nil [20273 21719])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_event" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22004 22016])
                    ("" variable (:type ("Sread_event" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22017 22029])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22046 22050]))                  
                :type "int")
                nil [21983 22630])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_char_exclusive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22812 22833])
                    ("" variable (:type ("Sread_char_exclusive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22834 22855])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22872 22876]))                  
                :type "int")
                nil [22782 23962])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_file_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24251 24266])
                    ("" variable (:type ("Sget_file_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24267 24282])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24299 24303]))                  
                :type "int")
                nil [24227 24345])
            ("lisp_file_lexically_bound_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24742 24766]))                  
                :type "bool")
                nil [24701 27486])
            ("safe_to_load_version" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [27849 27856]))                  
                :type "int")
                nil [27816 28507])
            ("record_load_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28656 28672]))                  
                :type "void")
                nil [28624 28704])
            ("load_error_handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28814 28831]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28775 28850])
            ("load_error_old_style_backquotes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [28907 28912]))                  
                :type "void")
                nil [28852 29188])
            ("load_warn_unescaped_character_literals" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("file" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29242 29259]))                  
                :type "void")
                nil [29190 29841])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_load_suffixes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29871 29890])
                    ("" variable (:type ("Sget_load_suffixes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29891 29910])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29927 29931]))                  
                :type "int")
                nil [29843 30088])
            ("suffix_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30532 30551])
                    ("suffix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [30552 30571]))                  
                :type "bool")
                nil [30510 30758])
            ("close_infile_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [30793 30803]))                  
                :type "void")
                nil [30760 30921])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30938 30944])
                    ("" variable (:type ("Sload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30945 30951])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30968 30972]))                  
                :type "int")
                nil [30923 33273])
            ("complete_filename_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pathname" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45155 45176]))                  
                :type "bool")
                nil [45122 45349])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocate_file_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45382 45404])
                    ("" variable (:type ("Slocate_file_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45405 45427])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45444 45448]))                  
                :type "int")
                nil [45351 46058])
            ("openp" function
               (:arguments 
                  ( ("path" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47371 47388])
                    ("str" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47389 47405])
                    ("suffixes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47406 47427])
                    ("storeptr" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47435 47457])
                    ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47458 47480])
                    ("newer" variable (:type "bool") (reparse-symbol arg-sub-list) [47481 47492]))                  
                :type "int")
                nil [47360 53352])
            ("build_load_history" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("filename" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53725 53746])
                    ("entire" variable (:type "bool") (reparse-symbol arg-sub-list) [53747 53759]))                  
                :type "void")
                nil [53693 55000])
            ("readevalloop_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old" variable (:type "int") (reparse-symbol arg-sub-list) [55030 55038]))                  
                :type "void")
                nil [55002 55075])
            ("end_of_file_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [55200 55205]))                  
                :type "void")
                nil [55159 55316])
            ("readevalloop_eager_expand_eval" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55369 55385])
                    ("macroexpand" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55386 55410]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [55318 56155])
            ("readevalloop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56451 56475])
                    ("infile0" variable
                       (:pointer 1
                        :type ("infile" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [56483 56506])
                    ("sourcename" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56514 56537])
                    ("printflag" variable (:type "bool") (reparse-symbol arg-sub-list) [56545 56560])
                    ("unibyte" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56568 56588])
                    ("readfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56589 56609])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56617 56635])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56636 56652]))                  
                :type "void")
                nil [56425 62226])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62250 62263])
                    ("" variable (:type ("Seval_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62264 62277])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62295 62299]))                  
                :type "int")
                nil [62228 63416])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64270 64283])
                    ("" variable (:type ("Seval_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64284 64297])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64316 64320]))                  
                :type "int")
                nil [64248 65000])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65572 65578])
                    ("" variable (:type ("Sread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65579 65585])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65602 65606]))                  
                :type "int")
                nil [65557 66190])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_from_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66534 66552])
                    ("" variable (:type ("Sread_from_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66553 66571])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66588 66592]))                  
                :type "int")
                nil [66507 67055])
            ("read_internal_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("stream" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67447 67466])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67467 67485])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67486 67502]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [67407 69318])
            ("invalid_syntax" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [69445 69459]))                  
                :type "void")
                nil [69407 69516])
            ("read0" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69637 69661]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69611 69861])
            ("grow_read_buffer" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [70378 70388])
                    ("offset" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70389 70406])
                    ("buf_addr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [70411 70427])
                    ("buf_size" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70428 70448])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70449 70465]))                  
                :type "char")
                nil [70346 70728])
            ("character_name_to_code" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [70900 70917])
                    ("name_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70918 70937]))                  
                :type "int")
                nil [70865 71530])
            ("" type
               (:members 
                  ( ("UNICODE_CHARACTER_NAME_LENGTH_BOUND" variable
                       (:constant-flag t
                        :default-value (71700 71703)
                        :type "int")
                        (reparse-symbol enumsubparts) [71662 71703]))                  
                :type "enum")
                nil [71655 71706])
            ("read_escape" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71865 71889])
                    ("stringp" variable (:type "bool") (reparse-symbol arg-sub-list) [71890 71903]))                  
                :type "int")
                nil [71841 77699])
            ("digit_to_number" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("character" variable (:type "int") (reparse-symbol arg-sub-list) [77910 77924])
                    ("base" variable (:type "int") (reparse-symbol arg-sub-list) [77925 77934]))                  
                :type "int")
                nil [77882 78250])
            ("free_contents" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [78279 78287]))                  
                :type "void")
                nil [78252 78335])
            ("read_integer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78650 78674])
                    ("radix" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78675 78691]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78617 80088])
            ("read1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80379 80403])
                    ("pch" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [80404 80413])
                    ("first_in_list" variable (:type "bool") (reparse-symbol arg-sub-list) [80414 80433]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [80353 104138])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flread__substitute_object_in_subtree" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104194 104231])
                    ("" variable (:type ("Slread__substitute_object_in_subtree" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104239 104276])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104293 104297]))                  
                :type "int")
                nil [104141 104542])
            ("substitute_object_recurse" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("subst" variable
                       (:pointer 1
                        :type ("subst" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [104911 104931])
                    ("subtree" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104932 104952]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [104865 107372])
            ("substitute_in_interval" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("interval" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107465 107483])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [107484 107494]))                  
                :type "void")
                nil [107429 107589])
            ("string_to_number" function
               (:arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [107995 108014])
                    ("base" variable (:type "int") (reparse-symbol arg-sub-list) [108015 108024])
                    ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [108025 108035]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [107965 111621])
            ("read_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111657 111681])
                    ("bytecodeflag" variable (:type "bool") (reparse-symbol arg-sub-list) [111682 111700]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111625 113859])
            ("read_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flag" variable (:type "bool") (reparse-symbol arg-sub-list) [113962 113972])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113973 113997]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113932 117866])
            ("initial_obarray" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117869 117904])
            ("oblookup_last_bucket_number" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [117983 118025])
            ("check_obarray" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118133 118153]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118106 118655])
            ("intern_sym" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118745 118761])
                    ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118762 118782])
                    ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118783 118801]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118714 119314])
            ("intern_driver" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119415 119434])
                    ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119435 119455])
                    ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119456 119474]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [119388 119539])
            ("intern_1" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [119664 119680])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119681 119695]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [119642 120020])
            ("intern_c_string_1" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [120053 120069])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120070 120084]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120022 120503])
            ("define_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120532 120548])
                    ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [120549 120565]))                  
                :type "void")
                nil [120505 120995])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121015 121023])
                    ("" variable (:type ("Sintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121024 121032])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121049 121053]))                  
                :type "int")
                nil [120998 121315])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintern_soft" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121664 121677])
                    ("" variable (:type ("Sintern_soft" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121678 121691])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121708 121712]))                  
                :type "int")
                nil [121642 122010])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Funintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122456 122466])
                    ("" variable (:type ("Sunintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122467 122477])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122494 122498]))                  
                :type "int")
                nil [122437 122894])
            ("oblookup" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124748 124768])
                    ("ptr" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [124769 124794])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124795 124810])
                    ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124811 124831]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124726 125663])
            ("map_obarray" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125684 125704])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125717 125729])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125730 125742]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125744 125760]))                  
                :type "void")
                nil [125666 126098])
            ("mapatoms_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126124 126140])
                    ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126141 126162]))                  
                :type "void")
                nil [126100 126191])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapatoms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126212 126222])
                    ("" variable (:type ("Smapatoms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126223 126233])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126250 126254]))                  
                :type "int")
                nil [126193 126394])
            ("OBARRAY_SIZE" variable (:constant-flag t) nil [126550 126562])
            ("init_obarray" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [126589 126594]))                  
                :type "void")
                nil [126570 127316])
            ("defsubr" function
               (:arguments 
                  ( ("sname" variable
                       (:pointer 1
                        :type ("Lisp_Subr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [127333 127357]))                  
                :type "void")
                nil [127319 127525])
            ("defvar_int" function
               (:arguments 
                  ( ("i_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Intfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [127988 128014])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [128020 128043])
                    ("address" variable
                       (:pointer 1
                        :type ("EMACS_INT" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128044 128063]))                  
                :type "void")
                nil [127971 128336])
            ("defvar_bool" function
               (:arguments 
                  ( ("b_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Boolfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [128463 128490])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [128497 128520])
                    ("address" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [128521 128535]))                  
                :type "void")
                nil [128445 128866])
            ("defvar_lisp_nopro" function
               (:arguments 
                  ( ("o_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129206 129232])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [129238 129261])
                    ("address" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [129262 129283]))                  
                :type "void")
                nil [129182 129556])
            ("defvar_lisp" function
               (:arguments 
                  ( ("o_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129576 129602])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [129609 129632])
                    ("address" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [129633 129654]))                  
                :type "void")
                nil [129558 129731])
            ("defvar_kboard" function
               (:arguments 
                  ( ("ko_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Kboard_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129885 129919])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [129928 129951])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [129952 129963]))                  
                :type "void")
                nil [129865 130245])
            ("load_path_check" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("lpath" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130325 130343]))                  
                :type "void")
                nil [130296 130887])
            ("load_path_default" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [132550 132555]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132512 137257])
            ("init_lread" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [137276 137281]))                  
                :type "void")
                nil [137259 139746])
            ("dir_warning" function
               (:arguments 
                  ( ("use" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [139990 140006])
                    ("dirname" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140007 140027]))                  
                :type "void")
                nil [139972 140935])
            ("syms_of_lread" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [140957 140962]))                  
                :type "void")
                nil [140937 155878]))          
      :file "lread.c"
      :pointmax 155879
      :fsize 155878
      :lastmodtime '(23451 3115 766382 340000)
      :unmatched-syntax '((semantic-list 126395 . 126540) (punctuation 126253 . 126254) (number 126240 . 126241) (number 126237 . 126238) (number 126234 . 126235) (string 126200 . 126210) (semantic-list 122895 . 124426) (punctuation 122497 . 122498) (number 122484 . 122485) (number 122481 . 122482) (number 122478 . 122479) (string 122444 . 122454) (semantic-list 122011 . 122434) (punctuation 121711 . 121712) (number 121698 . 121699) (number 121695 . 121696) (number 121692 . 121693) (string 121649 . 121662) (semantic-list 121316 . 121640) (punctuation 121052 . 121053) (number 121039 . 121040) (number 121036 . 121037) (number 121033 . 121034) (string 121005 . 121013) (semantic-list 104543 . 104863) (punctuation 104296 . 104297) (number 104283 . 104284) (number 104280 . 104281) (number 104277 . 104278) (string 104148 . 104185) (semantic-list 67056 . 67275) (punctuation 66591 . 66592) (number 66578 . 66579) (number 66575 . 66576) (number 66572 . 66573) (string 66514 . 66532) (semantic-list 66191 . 66505) (punctuation 65605 . 65606) (number 65592 . 65593) (number 65589 . 65590) (number 65586 . 65587) (string 65564 . 65570) (semantic-list 65001 . 65553) (punctuation 64319 . 64320) (string 64304 . 64307) (number 64301 . 64302) (number 64298 . 64299) (string 64255 . 64268) (semantic-list 63417 . 64246) (punctuation 62298 . 62299) (string 62284 . 62286) (number 62281 . 62282) (number 62278 . 62279) (string 62235 . 62248) (semantic-list 46059 . 46224) (punctuation 45447 . 45448) (number 45434 . 45435) (number 45431 . 45432) (number 45428 . 45429) (string 45358 . 45380) (semantic-list 33274 . 45119) (punctuation 30971 . 30972) (number 30958 . 30959) (number 30955 . 30956) (number 30952 . 30953) (string 30930 . 30936) (semantic-list 30089 . 30462) (punctuation 29930 . 29931) (number 29917 . 29918) (number 29914 . 29915) (number 29911 . 29912) (string 29850 . 29869) (semantic-list 24346 . 24448) (punctuation 24302 . 24303) (number 24289 . 24290) (number 24286 . 24287) (number 24283 . 24284) (string 24234 . 24249) (semantic-list 23963 . 24225) (punctuation 22875 . 22876) (number 22862 . 22863) (number 22859 . 22860) (number 22856 . 22857) (string 22789 . 22810) (semantic-list 22631 . 22780) (punctuation 22049 . 22050) (number 22036 . 22037) (number 22033 . 22034) (number 22030 . 22031) (string 21990 . 22002) (semantic-list 21720 . 21981) (punctuation 20336 . 20337) (number 20323 . 20324) (number 20320 . 20321) (number 20317 . 20318) (string 20280 . 20291))
      :lexical-table 
        '(("file_offset" . ((LONG "long" 1728 . 1732)))
          ("file_tell" . ((symbol "ftell" 1751 . 1756)))
          ("UNREAD" (spp-arg-list ("c") 6292 . 6295) . ((symbol "unreadchar" 6296 . 6306) (semantic-list "(readcharfun, c)" 6307 . 6323)))
          ("OBARRAY_SIZE" . ((number "15121" 126563 . 126568)))
          ("READCHAR" . ((symbol "readchar" 6249 . 6257) (semantic-list "(readcharfun, NULL)" 6258 . 6277)))
          ("FROM_FILE_P" (spp-arg-list ("readcharfun") 10704 . 10717) . ((semantic-list "(EQ (readcharfun, Qget_file_char)			\\
   || EQ (readcharfun, Qget_emacs_mule_file_char))" 10724 . 10812)))
          ("DEFINE_SYMBOLS")
          ("READCHAR_REPORT_MULTIBYTE" (spp-arg-list ("multibyte") 6437 . 6448) . ((symbol "readchar" 6449 . 6457) (semantic-list "(readcharfun, multibyte)" 6458 . 6482)))
          )
)
    (semanticdb-table "semanticdb-table-1f9fa7c"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [1118 1137])
            ("stdio.h" include (:system-flag t) nil [1139 1157])
            ("limits.h" include (:system-flag t) nil [1158 1177])
            ("lisp.h" include nil nil [1179 1196])
            ("character.h" include nil nil [1197 1219])
            ("charset.h" include nil nil [1220 1240])
            ("ccl.h" include nil nil [1241 1257])
            ("coding.h" include nil nil [1258 1277])
            ("Vccl_program_table" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1714 1752])
            ("GET_HASH_TABLE" variable (:constant-flag t) nil [1806 1820])
            ("CCL_HEADER_BUF_MAG" variable (:constant-flag t) nil [2568 2586])
            ("CCL_HEADER_EOF" variable (:constant-flag t) nil [2597 2611])
            ("CCL_HEADER_MAIN" variable (:constant-flag t) nil [2623 2638])
            ("CCL_CODE_MAX" variable (:constant-flag t) nil [3449 3461])
            ("CCL_CODE_MIN" variable (:constant-flag t) nil [3492 3504])
            ("CCL_SetRegister" variable (:constant-flag t) nil [3732 3747])
            ("CCL_SetShortConst" variable (:constant-flag t) nil [3903 3920])
            ("CCL_SetConst" variable (:constant-flag t) nil [4092 4104])
            ("CCL_SetArray" variable (:constant-flag t) nil [4287 4299])
            ("CCL_Jump" variable (:constant-flag t) nil [4564 4572])
            ("CCL_JumpCond" variable (:constant-flag t) nil [4767 4779])
            ("CCL_WriteRegisterJump" variable (:constant-flag t) nil [4939 4960])
            ("CCL_WriteRegisterReadJump" variable (:constant-flag t) nil [5126 5151])
            ("CCL_WriteConstJump" variable (:constant-flag t) nil [5505 5523])
            ("CCL_WriteConstReadJump" variable (:constant-flag t) nil [5699 5721])
            ("CCL_WriteStringJump" variable (:constant-flag t) nil [6088 6107])
            ("CCL_WriteArrayReadJump" variable (:constant-flag t) nil [6415 6437])
            ("CCL_ReadJump" variable (:constant-flag t) nil [6934 6946])
            ("CCL_Branch" variable (:constant-flag t) nil [7101 7111])
            ("CCL_ReadRegister" variable (:constant-flag t) nil [7416 7432])
            ("CCL_WriteExprConst" variable (:constant-flag t) nil [7645 7663])
            ("CCL_ReadBranch" variable (:constant-flag t) nil [7954 7968])
            ("CCL_WriteRegister" variable (:constant-flag t) nil [8336 8353])
            ("CCL_WriteExprRegister" variable (:constant-flag t) nil [8660 8681])
            ("CCL_Call" variable (:constant-flag t) nil [8848 8856])
            ("CCL_WriteConstString" variable (:constant-flag t) nil [9124 9144])
            ("CCL_WriteArray" variable (:constant-flag t) nil [9510 9524])
            ("CCL_End" variable (:constant-flag t) nil [9779 9786])
            ("CCL_ExprSelfConst" variable (:constant-flag t) nil [10055 10072])
            ("CCL_ExprSelfReg" variable (:constant-flag t) nil [10239 10254])
            ("CCL_SetExprConst" variable (:constant-flag t) nil [10537 10553])
            ("CCL_SetExprReg" variable (:constant-flag t) nil [10750 10764])
            ("CCL_JumpCondExprConst" variable (:constant-flag t) nil [10929 10950])
            ("CCL_JumpCondExprReg" variable (:constant-flag t) nil [11251 11270])
            ("CCL_ReadJumpCondExprConst" variable (:constant-flag t) nil [11565 11590])
            ("CCL_ReadJumpCondExprReg" variable (:constant-flag t) nil [11923 11946])
            ("CCL_Extension" variable (:constant-flag t) nil [12272 12285])
            ("CCL_ReadMultibyteChar2" variable (:constant-flag t) nil [12747 12769])
            ("CCL_WriteMultibyteChar2" variable (:constant-flag t) nil [12974 12997])
            ("CCL_TranslateCharacter" variable (:constant-flag t) nil [13308 13330])
            ("CCL_TranslateCharacterConstTbl" variable (:constant-flag t) nil [13647 13677])
            ("CCL_IterateMultipleMap" variable (:constant-flag t) nil [14318 14340])
            ("CCL_MapMultiple" variable (:constant-flag t) nil [17253 17268])
            ("MAX_MAP_SET_LEVEL" variable (:constant-flag t) nil [17540 17557])
            ("tr_stack" type
               (:typedef ("" type
                     (:members 
                        ( ("rest_length" variable (:type "int") (reparse-symbol classsubparts) [17581 17597])
                          ("orig_val" variable (:type "int") (reparse-symbol classsubparts) [17600 17613]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [17562 17625])
            ("mapping_stack" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("tr_stack" type (:type "class") nil nil))
                nil [17627 17676])
            ("mapping_stack_pointer" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("tr_stack" type (:type "class") nil nil))
                nil [17677 17716])
            ("stack_idx_of_map_multiple" variable
               (:typemodifiers ("static")
                :type "int")
                nil [17826 17863])
            ("PUSH_MAPPING_STACK" variable (:constant-flag t) nil [17873 17891])
            ("POP_MAPPING_STACK" variable (:constant-flag t) nil [18101 18118])
            ("CCL_CALL_FOR_MAP_INSTRUCTION" variable (:constant-flag t) nil [18328 18356])
            ("CCL_MapSingle" variable (:constant-flag t) nil [19158 19171])
            ("CCL_LookupIntConstTbl" variable (:constant-flag t) nil [19460 19481])
            ("CCL_LookupCharConstTbl" variable (:constant-flag t) nil [19687 19709])
            ("CCL_PLUS" variable (:constant-flag t) nil [19959 19967])
            ("CCL_MINUS" variable (:constant-flag t) nil [19997 20006])
            ("CCL_MUL" variable (:constant-flag t) nil [20036 20043])
            ("CCL_DIV" variable (:constant-flag t) nil [20074 20081])
            ("CCL_MOD" variable (:constant-flag t) nil [20112 20119])
            ("CCL_AND" variable (:constant-flag t) nil [20150 20157])
            ("CCL_OR" variable (:constant-flag t) nil [20188 20194])
            ("CCL_XOR" variable (:constant-flag t) nil [20225 20232])
            ("CCL_LSH" variable (:constant-flag t) nil [20263 20270])
            ("CCL_RSH" variable (:constant-flag t) nil [20302 20309])
            ("CCL_LSH8" variable (:constant-flag t) nil [20341 20349])
            ("CCL_RSH8" variable (:constant-flag t) nil [20386 20394])
            ("CCL_DIVMOD" variable (:constant-flag t) nil [20443 20453])
            ("CCL_LS" variable (:constant-flag t) nil [20497 20503])
            ("CCL_GT" variable (:constant-flag t) nil [20536 20542])
            ("CCL_EQ" variable (:constant-flag t) nil [20575 20581])
            ("CCL_LE" variable (:constant-flag t) nil [20615 20621])
            ("CCL_GE" variable (:constant-flag t) nil [20655 20661])
            ("CCL_NE" variable (:constant-flag t) nil [20695 20701])
            ("CCL_DECODE_SJIS" variable (:constant-flag t) nil [20736 20751])
            ("CCL_ENCODE_SJIS" variable (:constant-flag t) nil [20846 20861])
            ("CCL_SUCCESS" variable (:constant-flag t) nil [20993 21004])
            ("CCL_SUSPEND" variable (:constant-flag t) nil [21295 21306])
            ("CCL_INVALID_CMD" variable (:constant-flag t) nil [21542 21557])
            ("ASCENDING_ORDER" variable (:constant-flag t) nil [22028 22043])
            ("GET_CCL_RANGE" variable (:constant-flag t) nil [22102 22115])
            ("GET_CCL_CODE" variable (:constant-flag t) nil [22375 22387])
            ("IN_INT_RANGE" variable (:constant-flag t) nil [22486 22498])
            ("CCL_WRITE_CHAR" variable (:constant-flag t) nil [22691 22705])
            ("CCL_WRITE_STRING" variable (:constant-flag t) nil [23005 23021])
            ("CCL_READ_CHAR" variable (:constant-flag t) nil [23656 23669])
            ("CCL_DECODE_CHAR" variable (:constant-flag t) nil [24168 24183])
            ("CCL_ENCODE_CHAR" variable (:constant-flag t) nil [24494 24509])
            ("ccl_prog_stack" type
               (:members 
                  ( ("ccl_prog" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [25538 25560])
                    ("ic" variable (:type "int") (reparse-symbol classsubparts) [25605 25612])
                    ("eof_ic" variable (:type "int") (reparse-symbol classsubparts) [25647 25658]))                  
                :type "struct")
                nil [25508 25708])
            ("ccl_prog_stack_struct" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("ccl_prog_stack" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [25769 25825])
            ("ccl_driver" function
               (:arguments 
                  ( ("ccl" variable
                       (:pointer 1
                        :type ("ccl_program" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25844 25868])
                    ("source" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [25869 25881])
                    ("destination" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [25882 25899])
                    ("src_size" variable (:type "int") (reparse-symbol arg-sub-list) [25900 25913])
                    ("dst_size" variable (:type "int") (reparse-symbol arg-sub-list) [25914 25927])
                    ("charset_list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25928 25953]))                  
                :type "void")
                nil [25827 49092])
            ("resolve_symbol_ccl_program" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ccl" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49503 49519]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [49456 51205])
            ("ccl_get_compiled_code" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ccl_prog" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51542 51563])
                    ("idx" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51564 51579]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [51500 52335])
            ("setup_ccl_program" function
               (:arguments 
                  ( ("ccl" variable
                       (:pointer 1
                        :type ("ccl_program" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [52661 52685])
                    ("ccl_prog" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52686 52707]))                  
                :type "bool")
                nil [52637 53429])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fccl_program_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53456 53471])
                    ("" variable (:type ("Sccl_program_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53472 53487])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53504 53508]))                  
                :type "int")
                nil [53432 53689])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fccl_execute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54044 54057])
                    ("" variable (:type ("Sccl_execute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54058 54071])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54088 54092]))                  
                :type "int")
                nil [54022 54723])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fccl_execute_on_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55345 55368])
                    ("" variable (:type ("Sccl_execute_on_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55369 55392])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55416 55420]))                  
                :type "int")
                nil [55313 56662])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregister_ccl_program" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59929 59951])
                    ("" variable (:type ("Sregister_ccl_program" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59952 59974])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59998 60002]))                  
                :type "int")
                nil [59898 60284])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregister_code_conversion_map" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61911 61941])
                    ("" variable (:type ("Sregister_code_conversion_map" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61949 61979])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62003 62007]))                  
                :type "int")
                nil [61872 62142])
            ("syms_of_ccl" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [63052 63057]))                  
                :type "void")
                nil [63034 65037]))          
      :file "ccl.c"
      :pointmax 65038
      :fsize 65037
      :lastmodtime '(23443 29219 983210 739000)
      :unmatched-syntax '((semantic-list 62143 . 63031) (punctuation 62006 . 62007) (number 61993 . 61994) (number 61990 . 61991) (number 61987 . 61988) (string 61879 . 61909) (semantic-list 60285 . 61502) (punctuation 60001 . 60002) (number 59988 . 59989) (number 59985 . 59986) (number 59982 . 59983) (string 59905 . 59927) (semantic-list 56663 . 59896) (punctuation 55419 . 55420) (number 55406 . 55407) (number 55403 . 55404) (number 55400 . 55401) (string 55320 . 55343) (semantic-list 54724 . 55311) (punctuation 54091 . 54092) (number 54078 . 54079) (number 54075 . 54076) (number 54072 . 54073) (string 54029 . 54042) (semantic-list 53690 . 54020) (punctuation 53507 . 53508) (number 53494 . 53495) (number 53491 . 53492) (number 53488 . 53489) (string 53439 . 53454))
      :lexical-table 
        '(("CCL_SetShortConst" . ((number "0x01" 3921 . 3925)))
          ("CCL_ReadRegister" . ((number "0x0E" 7433 . 7437)))
          ("CCL_ReadJumpCondExprConst" . ((number "0x1D" 11591 . 11595)))
          ("CCL_TranslateCharacter" . ((number "0x02" 13331 . 13335)))
          ("CCL_OR" . ((number "0x06" 20196 . 20200)))
          ("GET_CCL_RANGE" (spp-arg-list ("var" "ccl_prog" "ic" "lo" "hi") 22115 . 22142) . 
              ((DO "do" 22148 . 22150) (semantic-list "{								\\
      EMACS_INT prog_word = XFIXNUM ((ccl_prog)[ic]);		\\
      if (! ASCENDING_ORDER (lo, prog_word, hi))		\\
	CCL_INVALID_CMD;					\\
      (var) = prog_word;					\\
    }" 22164 . 22344) (WHILE "while" 22356 . 22361) (semantic-list "(0)" 22362 . 22365)))
          ("CCL_HEADER_EOF" . ((number "1" 2613 . 2614)))
          ("CCL_SetArray" . ((number "0x03" 4301 . 4305)))
          ("CCL_SetExprConst" . ((number "0x19" 10554 . 10558)))
          ("CCL_ReadJumpCondExprReg" . ((number "0x1E" 11947 . 11951)))
          ("CCL_WRITE_STRING" (spp-arg-list ("len") 23021 . 23026) . 
              ((DO "do" 23035 . 23037) (semantic-list "{								\\
    int ccli;							\\
    if (!dst)							\\
      CCL_INVALID_CMD;						\\
    else if (dst + len <= dst_end)				\\
      {								\\
	if (XFIXNAT (ccl_prog[ic]) & 0x1000000)		\\
	  for (ccli = 0; ccli < len; ccli++)			\\
	    *dst++ = XFIXNAT (ccl_prog[ic + ccli]) & 0xFFFFFF;	\\
	else							\\
	  for (ccli = 0; ccli < len; ccli++)			\\
	    *dst++ = ((XFIXNAT (ccl_prog[ic + (ccli / 3)]))	\\
		      >> ((2 - (ccli % 3)) * 8)) & 0xFF;	\\
      }								\\
    else							\\
      CCL_SUSPEND (CCL_STAT_SUSPEND_BY_DST);			\\
  }" 23038 . 23566) (WHILE "while" 23567 . 23572) (semantic-list "(0)" 23573 . 23576)))
          ("CCL_SetRegister" . ((number "0x00" 3749 . 3753)))
          ("CCL_WriteExprConst" . ((number "0x0F" 7664 . 7668)))
          ("CCL_IterateMultipleMap" . ((number "0x10" 14341 . 14345)))
          ("CCL_LookupCharConstTbl" . ((number "0x14" 19710 . 19714)))
          ("CCL_MUL" . ((number "0x02" 20045 . 20049)))
          ("CCL_MOD" . ((number "0x04" 20121 . 20125)))
          ("CCL_GE" . ((number "0x14" 20663 . 20667)))
          ("CCL_HEADER_BUF_MAG" . ((number "0" 2587 . 2588)))
          ("CCL_WriteExprRegister" . ((number "0x12" 8682 . 8686)))
          ("CCL_WriteArray" . ((number "0x15" 9526 . 9530)))
          ("CCL_End" . ((number "0x16" 9789 . 9793)))
          ("CCL_SetExprReg" . ((number "0x1A" 10766 . 10770)))
          ("IN_INT_RANGE" (spp-arg-list ("val") 22498 . 22503) . ((symbol "ASCENDING_ORDER" 22504 . 22519) (semantic-list "(INT_MIN, val, INT_MAX)" 22520 . 22543)))
          ("CCL_ENCODE_CHAR" (spp-arg-list ("c" "charset_list" "id" "encoded") 24509 . 24539) . 
              ((DO "do" 24545 . 24547) (semantic-list "{								\\
    unsigned ncode;						\\
								\\
    charset = char_charset ((c), (charset_list), &ncode);	\\
    if (! charset && ! NILP (charset_list))			\\
      charset = char_charset ((c), Qnil, &ncode);	  	\\
    if (charset)						\\
      {								\\
	(id) = CHARSET_ID (charset);				\\
	(encoded) = ncode;					\\
      }								\\
   }" 24548 . 24882) (WHILE "while" 24883 . 24888) (semantic-list "(0)" 24889 . 24892)))
          ("CCL_SetConst" . ((number "0x02" 4106 . 4110)))
          ("CCL_WriteRegisterReadJump" . ((number "0x07" 5152 . 5156)))
          ("CCL_GT" . ((number "0x11" 20544 . 20548)))
          ("CCL_LE" . ((number "0x13" 20623 . 20627)))
          ("CCL_SUCCESS" . 
              ((DO "do" 21009 . 21011) (semantic-list "{					\\
    ccl->status = CCL_STAT_SUCCESS;	\\
    goto ccl_finish;			\\
  }" 21020 . 21094) (WHILE "while" 21101 . 21106) (semantic-list "(0)" 21107 . 21110)))
          ("GET_CCL_CODE" (spp-arg-list ("code" "ccl_prog" "ic") 22387 . 22407) . ((symbol "GET_CCL_RANGE" 22414 . 22427) (semantic-list "(code, ccl_prog, ic, CCL_CODE_MIN, CCL_CODE_MAX)" 22428 . 22476)))
          ("CCL_DECODE_CHAR" (spp-arg-list ("id" "code") 24183 . 24193) . ((semantic-list "((id) == 0 ? (code)			\\
   : (charset = CHARSET_FROM_ID ((id)), DECODE_CHAR (charset, (code))))" 24198 . 24293)))
          ("CCL_CODE_MAX" . ((semantic-list "((1 << (28 - 1)) - 1)" 3462 . 3483)))
          ("CCL_WriteRegister" . ((number "0x11" 8354 . 8358)))
          ("CCL_LSH8" . ((number "0x0A" 20350 . 20354)))
          ("CCL_LS" . ((number "0x10" 20505 . 20509)))
          ("CCL_READ_CHAR" (spp-arg-list ("r") 23669 . 23672) . 
              ((DO "do" 23679 . 23681) (semantic-list "{						\\
    if (! src)					\\
      CCL_INVALID_CMD;				\\
    else if (src < src_end)			\\
      r = *src++;				\\
    else if (ccl->last_block)			\\
      {						\\
	r = -1;					\\
	ic = ccl->eof_ic;			\\
	goto ccl_repeat;			\\
      }						\\
    else					\\
      CCL_SUSPEND (CCL_STAT_SUSPEND_BY_SRC);	\\
    }" 23682 . 23986) (WHILE "while" 23987 . 23992) (semantic-list "(0)" 23993 . 23996)))
          ("CCL_CODE_MIN" . ((semantic-list "(-1 - CCL_CODE_MAX)" 3505 . 3524)))
          ("CCL_JumpCondExprReg" . ((number "0x1C" 11271 . 11275)))
          ("CCL_ExprSelfConst" . ((number "0x17" 10073 . 10077)))
          ("CCL_ExprSelfReg" . ((number "0x18" 10256 . 10260)))
          ("CCL_WriteMultibyteChar2" . ((number "0x01" 12998 . 13002)))
          ("PUSH_MAPPING_STACK" (spp-arg-list ("restlen" "orig") 17891 . 17906) . 
              ((DO "do" 17910 . 17912) (semantic-list "{							\\
    mapping_stack_pointer->rest_length = (restlen);	\\
    mapping_stack_pointer->orig_val = (orig);		\\
    mapping_stack_pointer++;				\\
  }" 17923 . 18073) (WHILE "while" 18082 . 18087) (semantic-list "(0)" 18088 . 18091)))
          ("CCL_CALL_FOR_MAP_INSTRUCTION" (spp-arg-list ("symbol" "ret_ic") 18356 . 18372) . 
              ((DO "do" 18376 . 18378) (semantic-list "{								\\
    struct ccl_program called_ccl;				\\
    if (stack_idx >= 256					\\
	|| ! setup_ccl_program (&called_ccl, (symbol)))		\\
      {								\\
	if (stack_idx > 0)					\\
	  {							\\
	    ccl_prog = ccl_prog_stack_struct[0].ccl_prog;	\\
	    ic = ccl_prog_stack_struct[0].ic;			\\
	    eof_ic = ccl_prog_stack_struct[0].eof_ic;		\\
	  }							\\
	CCL_INVALID_CMD;					\\
      }								\\
    ccl_prog_stack_struct[stack_idx].ccl_prog = ccl_prog;	\\
    ccl_prog_stack_struct[stack_idx].ic = (ret_ic);		\\
    ccl_prog_stack_struct[stack_idx].eof_ic = eof_ic;		\\
    stack_idx++;						\\
    ccl_prog = called_ccl.prog;					\\
    ic = CCL_HEADER_MAIN;					\\
    eof_ic = XFIXNAT (ccl_prog[CCL_HEADER_EOF]);		\\
    goto ccl_repeat;						\\
  }" 18390 . 19129) (WHILE "while" 19139 . 19144) (semantic-list "(0)" 19145 . 19148)))
          ("CCL_EXECUTE_BUF_SIZE" . ((number "1024" 56838 . 56842)))
          ("CCL_Jump" . ((number "0x04" 4574 . 4578)))
          ("CCL_WriteRegisterJump" . ((number "0x06" 4961 . 4965)))
          ("MAX_MAP_SET_LEVEL" . ((number "30" 17558 . 17560)))
          ("CCL_AND" . ((number "0x05" 20159 . 20163)))
          ("CCL_EQ" . ((number "0x12" 20583 . 20587)))
          ("CCL_INVALID_CMD" . 
              ((DO "do" 21567 . 21569) (semantic-list "{				     	\\
    ccl->status = CCL_STAT_INVALID_CMD;	\\
    goto ccl_error_handler;	     	\\
  }" 21578 . 21672) (WHILE "while" 21679 . 21684) (semantic-list "(0)" 21685 . 21688)))
          ("GET_HASH_TABLE" (spp-arg-list ("id") 1820 . 1824) . ((semantic-list "(XHASH_TABLE (XCDR (AREF (Vtranslation_hash_table_vector, (id)))))" 1829 . 1895)))
          ("CCL_Call" . ((number "0x13" 8858 . 8862)))
          ("CCL_Extension" . ((number "0x1F" 12287 . 12291)))
          ("CCL_ReadMultibyteChar2" . ((number "0x00" 12770 . 12774)))
          ("CCL_LSH" . ((number "0x08" 20272 . 20276)))
          ("CCL_DIVMOD" . ((number "0x0C" 20454 . 20458)))
          ("CCL_SUSPEND" (spp-arg-list ("stat") 21306 . 21312) . 
              ((DO "do" 21315 . 21317) (semantic-list "{				\\
    ic--;			\\
    ccl->status = stat;		\\
    goto ccl_finish;		\\
  }" 21325 . 21400) (WHILE "while" 21406 . 21411) (semantic-list "(0)" 21412 . 21415)))
          ("CCL_WriteStringJump" . ((number "0x0A" 6108 . 6112)))
          ("CCL_WriteArrayReadJump" . ((number "0x0B" 6438 . 6442)))
          ("CCL_JumpCondExprConst" . ((number "0x1B" 10951 . 10955)))
          ("CCL_NE" . ((number "0x15" 20703 . 20707)))
          ("CCL_ENCODE_SJIS" . ((number "0x17" 20862 . 20866)))
          ("CCL_HEADER_MAIN" . ((number "2" 2640 . 2641)))
          ("CCL_WriteConstJump" . ((number "0x08" 5524 . 5528)))
          ("CCL_WriteConstReadJump" . ((number "0x09" 5722 . 5726)))
          ("CCL_ReadJump" . ((number "0x0C" 6948 . 6952)))
          ("CCL_Branch" . ((number "0x0D" 7113 . 7117)))
          ("CCL_TranslateCharacterConstTbl" . ((number "0x03" 13678 . 13682)))
          ("CCL_MapMultiple" . ((number "0x11" 17269 . 17273)))
          ("CCL_MapSingle" . ((number "0x12" 19173 . 19177)))
          ("CCL_LookupIntConstTbl" . ((number "0x13" 19482 . 19486)))
          ("CCL_MINUS" . ((number "0x01" 20007 . 20011)))
          ("CCL_XOR" . ((number "0x07" 20234 . 20238)))
          ("CCL_RSH" . ((number "0x09" 20311 . 20315)))
          ("CCL_RSH8" . ((number "0x0B" 20395 . 20399)))
          ("CCL_DECODE_SJIS" . ((number "0x16" 20752 . 20756)))
          ("CCL_JumpCond" . ((number "0x05" 4781 . 4785)))
          ("CCL_ReadBranch" . ((number "0x10" 7970 . 7974)))
          ("CCL_WriteConstString" . ((number "0x14" 9145 . 9149)))
          ("POP_MAPPING_STACK" (spp-arg-list ("restlen" "orig") 18118 . 18133) . 
              ((DO "do" 18137 . 18139) (semantic-list "{							\\
    mapping_stack_pointer--;				\\
    (restlen) = mapping_stack_pointer->rest_length;	\\
    (orig) = mapping_stack_pointer->orig_val;		\\
  }" 18150 . 18300) (WHILE "while" 18309 . 18314) (semantic-list "(0)" 18315 . 18318)))
          ("CCL_PLUS" . ((number "0x00" 19968 . 19972)))
          ("CCL_DIV" . ((number "0x03" 20083 . 20087)))
          ("ASCENDING_ORDER" (spp-arg-list ("lo" "med" "hi") 22043 . 22056) . ((semantic-list "(((lo) <= (med)) & ((med) <= (hi)))" 22057 . 22092)))
          ("CCL_WRITE_CHAR" (spp-arg-list ("ch") 22705 . 22709) . 
              ((DO "do" 22716 . 22718) (semantic-list "{						\\
    if (! dst)					\\
      CCL_INVALID_CMD;				\\
    else if (dst < dst_end)			\\
      *dst++ = (ch);				\\
    else					\\
      CCL_SUSPEND (CCL_STAT_SUSPEND_BY_DST);	\\
  }" 22719 . 22900) (WHILE "while" 22901 . 22906) (semantic-list "(0)" 22907 . 22910)))
          )
)
    (semanticdb-table "semanticdb-table-1d746cc"
      :file "ccl.h"
      :fsize 3379
      :lastmodtime '(23443 29219 983210 739000)))
  :file "!home!lk!self!projects!emacs-git!build!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
