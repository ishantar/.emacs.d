;; Object semanticdb-project-database-file-14273d8
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-14273d8"
  :tables
  (list
    (semanticdb-table "semanticdb-table-147f01c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1373 1390])
            ("semantic" include nil nil [1392 1411])
            ("semantic/decorate" include nil nil [1412 1440])
            ("semantic/tag-ls" include nil nil [1441 1467])
            ("semantic/util-modes" include nil nil [1468 1498])
            ("semantic-decoration-styles" variable (:documentation "List of active decoration styles.
It is an alist of (NAME . FLAG) elements, where NAME is a style name
and FLAG is non-nil if the style is enabled.
See also `define-semantic-decoration-style' which will automatically
add items to this list.") nil [1519 1920])
            ("semantic-decorate-style-predicate" function
               (:documentation "Return the STYLE's predicate function."
                :arguments ("style"))
                nil [1935 2063])
            ("semantic-decorate-style-highlighter" function
               (:documentation "Return the STYLE's highlighter function."
                :arguments ("style"))
                nil [2065 2205])
            ("semantic-decorate-style-predicate-default" function
               (:documentation "Return the STYLE's predicate function."
                :arguments ("style"))
                nil [2207 2351])
            ("semantic-decorate-style-highlighter-default" function
               (:documentation "Return the STYLE's highlighter function."
                :arguments ("style"))
                nil [2353 2509])
            ("semantic-decoration-p" function
               (:documentation "Return non-nil if OBJECT is a tag decoration."
                :arguments ("object"))
                nil [2538 2723])
            ("semantic-decoration-set-property" function
               (:documentation "Set the DECO decoration's PROPERTY to VALUE.
Return DECO."
                :arguments ("deco" "property" "value"))
                nil [2725 2947])
            ("semantic-decoration-get-property" function
               (:documentation "Return the DECO decoration's PROPERTY value."
                :arguments ("deco" "property"))
                nil [2949 3139])
            ("semantic-decoration-set-face" function
               (:documentation "Set the face of the decoration DECO to FACE.
Return DECO."
                :arguments ("deco" "face"))
                nil [3141 3307])
            ("semantic-decoration-face" function
               (:documentation "Return the face of the decoration DECO."
                :arguments ("deco"))
                nil [3309 3443])
            ("semantic-decoration-set-priority" function
               (:documentation "Set the priority of the decoration DECO to PRIORITY.
Return DECO."
                :arguments ("deco" "priority"))
                nil [3445 3668])
            ("semantic-decoration-priority" function
               (:documentation "Return the priority of the decoration DECO."
                :arguments ("deco"))
                nil [3670 3816])
            ("semantic-decoration-move" function
               (:documentation "Move the decoration DECO on the region between BEGIN and END.
Return DECO."
                :arguments ("deco" "begin" "end"))
                nil [3818 4040])
            ("semantic-decorate-tag" function
               (:documentation "Add a new decoration on TAG on the region between BEGIN and END.
If optional argument FACE is non-nil, set the decoration's face to
FACE.
Return the overlay that makes up the new decoration."
                :arguments ("tag" "begin" "end" "face"))
                nil [4065 4655])
            ("semantic-decorate-clear-tag" function
               (:documentation "Remove decorations from TAG.
If optional argument DECO is non-nil, remove only that decoration."
                :arguments ("tag" "deco"))
                nil [4657 5189])
            ("semantic-decorate-tag-decoration" function
               (:documentation "Return decoration found on TAG."
                :arguments ("tag"))
                nil [5191 5337])
            ("semantic-decorate-flush-decorations" function
               (:documentation "Flush decorations found in BUFFER.
BUFFER defaults to the current buffer.
Should be used to flush decorations that might remain in BUFFER, for
example, after tags have been refreshed."
                :arguments ("buffer"))
                nil [5382 5826])
            ("semantic-decorate-clear-decorations" function
               (:documentation "Remove decorations found in tags in TAG-LIST."
                :arguments ("tag-list"))
                nil [5828 6116])
            ("semantic-decorate-add-decorations" function
               (:documentation "Add decorations to tags in TAG-LIST.
Also make sure old decorations in the area are completely flushed."
                :arguments ("tag-list"))
                nil [6118 7243])
            ("semantic-decorate-pending-decoration-hook" variable (:documentation "Normal hook run to perform pending decoration changes.") nil [7535 7648])
            ("semantic-varalias-obsolete" code nil nil [7650 7779])
            ("semantic-decorate-add-pending-decoration" function
               (:documentation "Add a pending decoration change represented by FCN.
Applies only to the current BUFFER.
The setting of FCN will be removed after it is run."
                :arguments ("fcn" "buffer"))
                nil [7781 8197])
            ("semantic-decorate-flush-pending-decorations" function
               (:documentation "Flush any pending decorations for BUFFER.
Flush functions from `semantic-decorate-pending-decoration-hook'."
                :arguments ("buffer"))
                nil [8199 8584])
            ("define-minor-mode" code nil nil [8695 9150])
            ("semantic-decoration-mode-hook" variable (:documentation "Hook run at the end of function `semantic-decoration-mode'.") nil [9152 9294])
            ("define-minor-mode" code nil nil [9296 11372])
            ("semantic-add-minor-mode" code nil nil [11374 11453])
            ("semantic-decorate-tags-after-full-reparse" function
               (:documentation "Add decorations after a complete reparse of the current buffer.
TAG-LIST is the list of tags recently parsed.
Flush all existing decorations and call `semantic-decorate-add-decorations' to
add decorations.
Called from `semantic-after-toplevel-cache-change-hook'."
                :arguments ("tag-list"))
                nil [11455 11911])
            ("semantic-decorate-tags-after-partial-reparse" function
               (:documentation "Add decorations when new tags are created in the current buffer.
TAG-LIST is the list of newly created tags.
Call `semantic-decorate-add-decorations' to add decorations.
Called from `semantic-after-partial-cache-change-hook'."
                :arguments ("tag-list"))
                nil [11913 12253])
            ("semantic-decoration-style-enabled-p" function
               (:documentation "Return non-nil if STYLE is currently enabled.
Return nil if the style is disabled, or does not exist."
                :arguments ("style"))
                nil [12288 12529])
            ("semantic-toggle-decoration-style" function
               (:documentation "Turn on/off the decoration style with NAME.
Decorations are specified in `semantic-decoration-styles'.
With prefix argument ARG, turn on if positive, otherwise off.
Return non-nil if the decoration style is enabled."
                :user-visible-flag t
                :arguments ("name" "arg"))
                nil [12531 13755])
            ("semantic-decoration-menu-cache" variable (:documentation "Cache of the decoration menu.") nil [13757 13834])
            ("semantic-decoration-build-style-menu" function
               (:documentation "Build a menu item for controlling a specific decoration STYLE."
                :arguments ("style"))
                nil [13836 14156])
            ("semantic-build-decoration-mode-menu" function
               (:documentation "Create a menu listing all the known decorations for toggling.
IGNORE any input arguments."
                :arguments ("ignore"))
                nil [14158 14493])
            ("define-semantic-decoration-style" function
               (:documentation "Define a new decoration style with NAME.
DOC is a documentation string describing the decoration style NAME.
It is appended to auto-generated doc strings.
An optional list of FLAGS can also be specified.  Flags are:
  :enabled <value>  - specify the default enabled value for NAME.
  :load <value>     - specify a feature (as a string) with the rest of
                      the definition for decoration mode NAME.

This defines two new overload functions respectively called `NAME-p'
and `NAME-highlight', for which you must provide a default
implementation in respectively the functions `NAME-p-default' and
`NAME-highlight-default'.  Those functions are passed a tag.  `NAME-p'
must return non-nil to indicate that the tag should be decorated by
`NAME-highlight'.

To put primary decorations on a tag `NAME-highlight' must use
functions like `semantic-set-tag-face', `semantic-set-tag-read-only',
etc., found in the semantic-decorate library.

To add other kind of decorations on a tag, `NAME-highlight' must use
`semantic-decorate-tag', and other functions of the semantic
decoration API found in this library."
                :arguments ("name" "doc" "flags"))
                nil [14531 17434])
            ("define-semantic-decoration-style" code nil nil [17509 17657])
            ("semantic-tag-boundary-face" variable
               (:documentation "Face used to show long tags in.
Used by decoration style: `semantic-tag-boundary'."
                :default-value '((((class color) (background dark)) (:overline "cyan")) (((class color) (background light)) (:overline "blue")))
                :type "face")
                nil [17659 17937])
            ("semantic-tag-boundary-p-default" function
               (:documentation "Return non-nil if TAG is a type, or a non-prototype function."
                :arguments ("tag"))
                nil [17939 18517])
            ("semantic-tag-boundary-highlight-default" function
               (:documentation "Highlight the first line of TAG as a boundary."
                :arguments ("tag"))
                nil [18519 18941])
            ("define-semantic-decoration-style" code nil nil [18978 19133])
            ("semantic-decoration-on-private-members-face" variable
               (:documentation "Face used to show privately scoped tags in.
Used by the decoration style: `semantic-decoration-on-private-members'."
                :default-value '((((class color) (background dark)) (:background "#200000")) (((class color) (background light)) (:background "#8fffff")))
                :type "face")
                nil [19135 19473])
            ("semantic-decoration-on-private-members-highlight-default" function
               (:documentation "Highlight TAG as designated to have PRIVATE access.
Use a primary decoration."
                :arguments ("tag"))
                nil [19475 19705])
            ("semantic-decoration-on-private-members-p-default" function
               (:documentation "Return non-nil if TAG has PRIVATE access."
                :arguments ("tag"))
                nil [19707 19929])
            ("semantic-decoration-on-protected-members-face" variable
               (:documentation "Face used to show protected scoped tags in.
Used by the decoration style: `semantic-decoration-on-protected-members'."
                :default-value '((((class color) (background dark)) (:background "#000020")) (((class color) (background light)) (:background "#fffff8")))
                :type "face")
                nil [19968 20310])
            ("define-semantic-decoration-style" code nil nil [20312 20471])
            ("semantic-decoration-on-protected-members-p-default" function
               (:documentation "Return non-nil if TAG has PROTECTED access."
                :arguments ("tag"))
                nil [20473 20701])
            ("semantic-decoration-on-protected-members-highlight-default" function
               (:documentation "Highlight TAG as designated to have PROTECTED access.
Use a primary decoration."
                :arguments ("tag"))
                nil [20703 20939])
            ("declare-function" code nil nil [20980 21072])
            ("declare-function" code nil nil [21073 21173])
            ("define-semantic-decoration-style" code nil nil [21174 21402])
            ("semantic/decorate/mode" package nil nil [21406 21439]))          
      :file "mode.el.gz"
      :pointmax 21613
      :fsize 6164
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1390 . 1391) (symbol 1355 . 1372) (open-paren 1354 . 1355))))
  :file "!usr!local!share!emacs!27.0.50!lisp!cedet!semantic!decorate!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
