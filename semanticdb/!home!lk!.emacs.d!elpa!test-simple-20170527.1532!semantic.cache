;; Object semanticdb-project-database-file-20d62b0
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-20d62b0"
  :tables
  (list
    (semanticdb-table "semanticdb-table-20d6290"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "test-simple-autoloads.el"
      :pointmax 361
      :fsize 1505
      :lastmodtime '(23398 9365 900905 207000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c4a5e8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("time-date" include nil nil [3124 3144])
            ("cl-lib" include nil nil [3157 3174])
            ("test-simple" customgroup
               (:documentation "Simple Unit Test Framework for Emacs Lisp"
                :user-visible-flag t)
                nil [3176 3263])
            ("test-simple-runner-interface" variable
               (:documentation "Function with one string argument when running tests non-interactively.
Command line started with `emacs --batch' is passed as the argument.

`bpr-spawn', which is in bpr package, is preferable because of no window popup.
If bpr is not installed, fall back to `compile'."
                :default-value (if (fboundp 'bpr-spawn) 'bpr-spawn 'compile))
                nil [3265 3752])
            ("test-simple-runner-key" variable
               (:documentation "Key to run non-interactive test after defining command line by `test-simple-run'."
                :default-value "C-x C-z")
                nil [3754 3922])
            ("test-simple-debug-on-error" variable (:documentation "If non-nil raise an error on the first failure.") nil [3924 4015])
            ("test-simple-verbosity" variable (:documentation "The greater the number the more verbose output.") nil [4017 4101])
            ("cl-defstruct" code nil nil [4103 4375])
            ("test-simple-info" variable
               (:documentation "Variable to store testing information for a buffer."
                :default-value (make-test-info))
                nil [4377 4475])
            ("note" function
               (:documentation "Add a name to a group of tests."
                :arguments ("description" "test-info"))
                nil [4477 4848])
            ("test-simple-start" function (:arguments ("test-start-msg")) nil [4865 5100])
            ("test-simple-clear" function
               (:documentation "Initialize and reset everything to run tests.
You should run this before running any assertions.  Running more than once
clears out information from the previous run."
                :user-visible-flag t
                :arguments ("test-info" "test-start-msg"))
                nil [5117 6118])
            ("assert-raises" function (:arguments ("error-condition" "body" "fail-message")) nil [6300 6618])
            ("assert-op" function
               (:documentation "Expectation is that ACTUAL should be equal to EXPECTED."
                :arguments ("op" "expected" "actual" "fail-message" "test-info"))
                nil [6620 7360])
            ("assert-equal" function
               (:documentation "Expectation is that ACTUAL should be equal to EXPECTED."
                :arguments ("expected" "actual" "fail-message" "test-info"))
                nil [7362 7553])
            ("assert-eq" function
               (:documentation "Expectation is that ACTUAL should be EQ to EXPECTED."
                :arguments ("expected" "actual" "fail-message" "test-info"))
                nil [7555 7738])
            ("assert-eql" function
               (:documentation "Expectation is that ACTUAL should be EQL to EXPECTED."
                :arguments ("expected" "actual" "fail-message" "test-info"))
                nil [7740 7925])
            ("assert-matches" function
               (:documentation "Expectation is that ACTUAL should match EXPECTED-REGEXP."
                :arguments ("expected-regexp" "actual" "fail-message" "test-info"))
                nil [7927 8703])
            ("assert-t" function
               (:documentation "expectation is that ACTUAL is not nil."
                :arguments ("actual" "fail-message" "test-info"))
                nil [8705 8857])
            ("assert-nil" function
               (:documentation "expectation is that ACTUAL is nil. FAIL-MESSAGE is an optional
additional message to be displayed."
                :arguments ("actual" "fail-message" "test-info"))
                nil [8859 9511])
            ("test-simple--add-failure" function (:arguments ("type" "test-info-msg" "fail-msg" "test-info")) nil [9513 10082])
            ("end-tests" function
               (:documentation "Give a tally of the tests run."
                :user-visible-flag t
                :arguments ("test-info"))
                nil [10084 10702])
            ("test-simple-msg" function (:arguments ("msg" "newline")) nil [10878 11071])
            ("test-simple--ok-msg" function (:arguments ("fail-message" "test-info")) nil [11073 11457])
            ("test-simple--not-ok-msg" function (:arguments ("_fail-message" "test-info")) nil [11459 11728])
            ("test-simple-summary-line" function (:arguments ("info")) nil [11730 12288])
            ("test-simple-describe-failures" function (:arguments ("test-info")) nil [12290 12486])
            ("test-simple-run" function
               (:documentation "Register command line to run tests non-interactively and bind key to run test.
After calling this function, you can run test by key specified by `test-simple-runner-key'.

It is preferable to write at the first line of test files as a comment, e.g,
;;;; (test-simple-run \"emacs -batch -L %s -l %s\" (file-name-directory (locate-library \"test-simple.elc\")) buffer-file-name)

Calling this function interactively, COMMAND-LINE-FORMATS is set above."
                :user-visible-flag t
                :arguments ("command-line-formats"))
                nil [12503 13495])
            ("test-simple-noninteractive-kill-emacs-hook" function (:documentation "Emacs exits abnormally when noninteractive test fails.") nil [13497 13767])
            ("when" code nil nil [13768 13863])
            ("test-simple" package nil nil [13866 13888]))          
      :file "test-simple.el"
      :pointmax 13918
      :fsize 13917
      :lastmodtime '(23398 9365 790904 63000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!test-simple-20170527.1532!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
