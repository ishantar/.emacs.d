;; Object semanticdb-project-database-file-17ae600
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-17ae600"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4ca7b0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [1165 1184])
            ("cl-lib" include nil nil [1145 1162])
            ("compare-w" include nil nil [1122 1142])
            ("font-lock-comment-face" variable nil nil [1187 1218])
            ("font-lock-doc-face" variable nil nil [1219 1246])
            ("shell" include nil nil [1248 1264])
            ("compile" include nil nil [1265 1283])
            ("tex-file" customgroup
               (:documentation "TeX files and directories."
                :user-visible-flag t)
                nil [1285 1370])
            ("tex-run" customgroup
               (:documentation "Running external commands from TeX mode."
                :user-visible-flag t)
                nil [1372 1470])
            ("tex-view" customgroup
               (:documentation "Viewing and printing TeX files."
                :user-visible-flag t)
                nil [1472 1562])
            ("tex-flymake" customgroup
               (:documentation "Flymake backend for linting TeX files."
                :user-visible-flag t)
                nil [1564 1664])
            ("tex-shell-file-name" variable (:documentation "If non-nil, the shell file name to run in the subshell used to run TeX.") nil [1681 1862])
            ("tex-directory" variable
               (:documentation "Directory in which temporary files are written.
You can make this `/tmp' if your TEXINPUTS has no relative directories in it
and you don't try to apply \\[tex-region] or \\[tex-buffer] when there are
`\\input' commands with relative directories."
                :default-value (purecopy "."))
                nil [1879 2207])
            ("tex-first-line-header-regexp" variable (:documentation "Regexp for matching a first line which `tex-region' should include.
If this is non-nil, it should be a regular expression string;
if it matches the first line of the file,
`tex-region' always includes the first line in the TeX run.") nil [2224 2589])
            ("tex-main-file" variable (:documentation "The main TeX source file which includes this buffer's file.
The command `tex-file' runs TeX on the file specified by `tex-main-file'
if the variable is non-nil.") nil [2606 2883])
            ("tex-offer-save" variable
               (:documentation "If non-nil, ask about saving modified buffers before \\[tex-file] is run."
                :default-value t)
                nil [2900 3042])
            ("tex-run-command" variable
               (:documentation "Command used to run TeX subjob.
TeX Mode sets `tex-command' to this string.
See the documentation of that variable."
                :default-value (purecopy "tex"))
                nil [3059 3257])
            ("latex-run-command" variable
               (:documentation "Command used to run LaTeX subjob.
LaTeX Mode sets `tex-command' to this string.
See the documentation of that variable."
                :default-value (purecopy "latex"))
                nil [3274 3480])
            ("slitex-run-command" variable
               (:documentation "Command used to run SliTeX subjob.
SliTeX Mode sets `tex-command' to this string.
See the documentation of that variable."
                :default-value (purecopy "slitex"))
                nil [3497 3707])
            ("tex-start-options" variable
               (:documentation "TeX options to use when starting TeX.
These immediately precede the commands in `tex-start-commands'
and the input file name, with no separating space and are not shell-quoted.
If nil, TeX runs with no options.  See the documentation of `tex-command'."
                :default-value (purecopy ""))
                nil [3724 4075])
            ("tex-start-commands" variable
               (:documentation "TeX commands to use when starting TeX.
They are shell-quoted and precede the input file name, with a separating space.
If nil, no commands are used.  See the documentation of `tex-command'."
                :default-value (purecopy "\\nonstopmode\\input"))
                nil [4092 4564])
            ("latex-standard-block-names" variable
               (:documentation "Standard LaTeX block names."
                :default-value '("abstract" "array" "center" "description" "displaymath" "document" "enumerate" "eqnarray" "eqnarray*" "equation" "figure" "figure*" "flushleft" "flushright" "itemize" "letter" "list" "minipage" "picture" "quotation" "quote" "slide" "sloppypar" "tabbing" "table" "table*" "tabular" "tabular*" "thebibliography" "theindex*" "titlepage" "trivlist" "verbatim" "verbatim*" "verse" "math"))
                nil [4566 5063])
            ("latex-block-names" variable (:documentation "User defined LaTeX block names.
Combined with `latex-standard-block-names' for minibuffer completion.") nil [5080 5262])
            ("tex-bibtex-command" variable
               (:documentation "Command used by `tex-bibtex-file' to gather bibliographic data.
If this string contains an asterisk (`*'), that is replaced by the file name;
otherwise, the file name, preceded by blank, is added at the end."
                :default-value (purecopy "bibtex"))
                nil [5279 5575])
            ("tex-dvi-print-command" variable
               (:documentation "Command used by \\[tex-print] to print a .dvi file.
If this string contains an asterisk (`*'), that is replaced by the file name;
otherwise, the file name, preceded by blank, is added at the end."
                :default-value (purecopy "lpr -d"))
                nil [5592 5880])
            ("tex-alt-dvi-print-command" variable
               (:documentation "Command used by \\[tex-print] with a prefix arg to print a .dvi file.
If this string contains an asterisk (`*'), that is replaced by the file name;
otherwise, the file name, preceded by blank, is added at the end.

If two printers are not enough of a choice, you can set the variable
`tex-alt-dvi-print-command' to an expression that asks what you want;
for example,

    (setq tex-alt-dvi-print-command
         \\='(format \"lpr -P%s\" (read-string \"Use printer: \")))

would tell \\[tex-print] with a prefix argument to ask you which printer to
use."
                :default-value (purecopy "lpr -d"))
                nil [5897 6601])
            ("tex-dvi-view-command" variable
               (:documentation "Command used by \\[tex-view] to display a `.dvi' file.
If it is a string, that specifies the command directly.
If this string contains an asterisk (`*'), that is replaced by the file name;
otherwise, the file name, preceded by a space, is added at the end.

If the value is a form, it is evaluated to get the command to use."
                :default-value `(cond ((eq window-system 'x) ,(purecopy "xdvi")) ((eq window-system 'w32) ,(purecopy "yap")) (t ,(purecopy "dvi2tty * | cat -s"))))
                nil [6618 7186])
            ("tex-show-queue-command" variable
               (:documentation "Command used by \\[tex-show-print-queue] to show the print queue.
Should show the queue(s) that \\[tex-print] puts jobs on."
                :default-value (purecopy "lpq"))
                nil [7203 7417])
            ("tex-default-mode" variable
               (:documentation "Mode to enter for a new file that might be either TeX or LaTeX.
This variable is used when it can't be determined whether the file
is plain TeX or LaTeX or what because the file contains no commands.
Normally set to either `plain-tex-mode' or `latex-mode'."
                :default-value 'latex-mode)
                nil [7434 7767])
            ("tex-open-quote" variable
               (:documentation "String inserted by typing \\[tex-insert-quote] to open a quotation."
                :default-value (purecopy "``"))
                nil [7784 7968])
            ("tex-close-quote" variable
               (:documentation "String inserted by typing \\[tex-insert-quote] to close a quotation."
                :default-value (purecopy "''"))
                nil [7985 8171])
            ("tex-fontify-script" variable
               (:documentation "If non-nil, fontify subscript and superscript strings."
                :default-value t)
                nil [8173 8313])
            ("put" code nil nil [8314 8370])
            ("tex-font-script-display" variable
               (:documentation "How much to lower and raise subscript and superscript content.
This is a list of two floats.  The first is negative and
specifies how much subscript is lowered, the second is positive
and specifies how much superscript is raised.  Heights are
measured relative to that of the normal text."
                :default-value '(-0.2 0.2))
                nil [8372 8827])
            ("tex-chktex-program" variable
               (:documentation "ChkTeX executable to use for linting TeX files."
                :default-value "chktex")
                nil [8829 9012])
            ("tex-chktex-extra-flags" variable (:documentation "Extra command line flags for `tex-chktex-program'.") nil [9014 9172])
            ("tex-last-temp-file" variable (:documentation "Latest temporary file generated by \\[tex-region] and \\[tex-buffer].
Deleted when the \\[tex-region] or \\[tex-buffer] is next run, or when the
tex shell terminates.") nil [9174 9376])
            ("tex-command" variable
               (:documentation "Command to run TeX.
If this string contains an asterisk (`*'), that is replaced by the file name;
otherwise the value of `tex-start-options', the (shell-quoted)
value of `tex-start-commands', and the file name are added at the end
with blanks as separators.

In TeX, LaTeX, and SliTeX Mode this variable becomes buffer local."
                :default-value "tex")
                nil [9378 9736])
            ("tex-trailer" variable (:documentation "String appended after the end of a region sent to TeX by \\[tex-region].") nil [9738 9839])
            ("tex-start-of-header" variable (:documentation "Regular expression used by \\[tex-region] to find start of file's header.") nil [9841 9951])
            ("tex-end-of-header" variable (:documentation "Regular expression used by \\[tex-region] to find end of file's header.") nil [9953 10059])
            ("tex-shell-cd-command" variable
               (:documentation "Command to give to shell running TeX to change directory.
The value of `tex-directory' is appended to this, separated by a space."
                :default-value "cd")
                nil [10061 10229])
            ("tex-zap-file" variable (:documentation "Temporary file name used for text being sent as input to TeX.
Should be a simple file name with no extension or directory specification.") nil [10231 10397])
            ("tex-last-buffer-texed" variable (:documentation "Buffer which was last TeXed.") nil [10399 10466])
            ("tex-print-file" variable (:documentation "File name that \\[tex-print] prints.
Set by \\[tex-region], \\[tex-buffer], and \\[tex-file].") nil [10468 10593])
            ("tex-mode-syntax-table" variable
               (:documentation "Syntax table used while in TeX mode."
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 12 ">" st) (modify-syntax-entry 0 "w" st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 9 " " st) (modify-syntax-entry 126 "." st) (modify-syntax-entry 36 "$$" st) (modify-syntax-entry 92 "/" st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 95 "." st) (modify-syntax-entry 94 "." st) st))
                nil [10595 11399])
            ("latex-imenu-indent-string" variable
               (:documentation "String to add repeated in front of nested sectional units for Imenu.
An alternative value is \" . \", if you use a font with a narrow period."
                :default-value ". ")
                nil [11432 11650])
            ("latex-section-alist" variable (:default-value '(("part" . 0) ("chapter" . 1) ("section" . 2) ("subsection" . 3) ("subsubsection" . 4) ("paragraph" . 5) ("subparagraph" . 6))) nil [11652 11822])
            ("latex-metasection-list" variable (:default-value '("documentstyle" "documentclass" "begin{document}" "end{document}" "appendix" "frontmatter" "mainmatter" "backmatter")) nil [11824 11985])
            ("latex-imenu-create-index" function (:documentation "Generate an alist for imenu from a LaTeX buffer.") nil [11987 14128])
            ("latex-outline-regexp" variable (:default-value (concat "\\\\" (regexp-opt (append latex-metasection-list (mapcar #'car latex-section-alist)) t))) nil [14163 14326])
            ("latex-outline-level" function nil nil [14328 14478])
            ("tex-current-defun-name" function (:documentation "Return the name of the TeX section/paragraph/chapter at point, or nil.") nil [14480 14857])
            ("tex-font-lock-keywords-1" variable
               (:documentation "Subdued expressions to highlight in TeX modes."
                :constant-flag t
                :default-value (eval-when-compile (let* ((headings (regexp-opt '("title" "begin" "end" "chapter" "part" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "subsubparagraph" "newcommand" "renewcommand" "providecommand" "newenvironment" "renewenvironment" "newtheorem" "renewtheorem") t)) (variables (regexp-opt '("newcounter" "newcounter*" "setcounter" "addtocounter" "setlength" "addtolength" "settowidth") t)) (includes (regexp-opt '("input" "include" "includeonly" "bibliography" "epsfig" "psfig" "epsf" "nofiles" "usepackage" "documentstyle" "documentclass" "verbatiminput" "includegraphics" "includegraphics*") t)) (verbish (regexp-opt '("url" "nolinkurl" "path") t)) (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (inbraces-re (lambda (re) (concat "\\(?:[^{}\\]\\|\\\\.\\|" re "\\)"))) (arg (concat "{\\(" (funcall inbraces-re "{[^}]*}") "+\\)"))) `((,(concat "\\$\\$?\\(?:[^$\\{}]\\|\\\\.\\|{" (funcall inbraces-re (concat "{" (funcall inbraces-re "{[^}]*}") "*}")) "*}\\)+\\$?\\$") (0 'tex-math)) (,(concat slash headings "\\*?" opt arg) 3 font-lock-function-name-face keep) (,(concat slash "\\(?:provide\\|\\(?:re\\)?new\\)command\\** *\\(\\\\[A-Za-z@]+\\)") 1 font-lock-function-name-face keep) (,(concat slash variables " *" arg) 2 font-lock-variable-name-face) (,(concat slash includes opt arg) 3 font-lock-builtin-face) (,(concat slash verbish opt arg) 3 'tex-verbatim) ("^[ 	]*\\\\def *\\\\\\(\\(\\w\\|@\\)+\\)" 1 font-lock-function-name-face)))))
                nil [16616 19834])
            ("tex-font-lock-append-prop" function (:arguments ("prop")) nil [19836 19984])
            ("tex-font-lock-keywords-2" variable
               (:documentation "Gaudy expressions to highlight in TeX modes."
                :constant-flag t
                :default-value (append tex-font-lock-keywords-1 (eval-when-compile (let* ((bold (regexp-opt '("textbf" "textsc" "textup" "boldsymbol" "pmb") t)) (italic (regexp-opt '("textit" "textsl" "emph") t)) (citations (regexp-opt '("label" "ref" "pageref" "vref" "eqref" "cite" "nocite" "index" "glossary" "bibitem" "citep" "citet") t)) (specials-1 (regexp-opt '("\\" "\\*") t)) (specials-2 (regexp-opt '("linebreak" "nolinebreak" "pagebreak" "nopagebreak" "newline" "newpage" "clearpage" "cleardoublepage" "displaybreak" "allowdisplaybreaks" "enlargethispage") t)) (general "\\([a-zA-Z@]+\\**\\|[^ 	
]\\)") (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (args "\\(\\(?:[^{}&\\]+\\|\\\\.\\|{[^}]*}\\)+\\)") (arg "{\\(\\(?:[^{}\\]+\\|\\\\.\\|{[^}]*}\\)+\\)")) (list (list (concat slash citations opt arg) 3 'font-lock-constant-face) (cons (concat (regexp-opt `("``" "\"<" "\"`" "<<" "«") t) "[^'\">{]+" (regexp-opt `("''" "\">" "\"'" ">>" "»") t)) 'font-lock-string-face) (cons (concat slash specials-1) 'font-lock-warning-face) (list (concat "\\(" slash specials-2 "\\)\\([^a-zA-Z@]\\|\\'\\)") 1 'font-lock-warning-face) (concat slash general) (list (concat slash bold " *" arg) 2 '(tex-font-lock-append-prop 'bold) 'append) (list (concat slash italic " *" arg) 2 '(tex-font-lock-append-prop 'italic) 'append) (list (concat "\\\\\\(em\\|it\\|sl\\)\\>" args) 2 '(tex-font-lock-append-prop 'italic) 'append) (list (concat "\\\\\\(bf\\(series\\)?\\)\\>" args) 3 '(tex-font-lock-append-prop 'bold) 'append))))))
                nil [19986 22834])
            ("tex-font-lock-suscript" function (:arguments ("pos")) nil [22836 23359])
            ("tex-font-lock-match-suscript" function
               (:documentation "Match subscript and superscript patterns up to LIMIT."
                :arguments ("limit"))
                nil [23361 23935])
            ("tex-font-lock-keywords-3" variable
               (:documentation "Experimental expressions to highlight in TeX modes."
                :constant-flag t
                :default-value (append tex-font-lock-keywords-2 '((tex-font-lock-match-suscript (1 (tex-font-lock-suscript (match-beginning 0)) append)))))
                nil [23937 24163])
            ("tex-font-lock-keywords" variable
               (:documentation "Default expressions to highlight in TeX modes."
                :constant-flag t
                :default-value tex-font-lock-keywords-1)
                nil [24165 24274])
            ("tex-verbatim-environments" variable (:default-value '("verbatim" "verbatim*")) nil [24276 24338])
            ("put" code nil nil [24339 24447])
            ("latex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules tex-syntax-propertize-rules ("\\\\\\(?:end\\|begin\\) *\\({[^
{}]*}\\)" (1 (ignore (tex-env-mark (match-beginning 0) (match-beginning 1) (match-end 1)))))))
                nil [24708 24995])
            ("tex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\\\verb\\**\\([^a-z@*]\\)" (1 (prog1 "\"" (tex-font-lock-verb (match-beginning 0) (char-after (match-beginning 1))))))))
                nil [24470 24704])
            ("tex-env-mark" function (:arguments ("cmd" "start" "end")) nil [24998 26246])
            ("define-minor-mode" code nil nil [26248 26743])
            ("latex-env-before-change" function (:arguments ("start" "end")) nil [26745 28573])
            ("tex-font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [28575 29007])
            ("tex-suscript-height-ratio" variable
               (:documentation "Ratio of subscript/superscript height to that of the preceding text.
In nested subscript/superscript, this factor is applied repeatedly,
subject to the limit set by `tex-suscript-height-minimum'."
                :default-value 0.8)
                nil [29009 29297])
            ("tex-suscript-height-minimum" variable (:documentation "Integer or float limiting the minimum size of subscript/superscript text.
An integer is an absolute height in units of 1/10 point, a float
is a height relative to that of the default font.  Zero means no minimum.") nil [29299 29711])
            ("tex-suscript-height" function
               (:documentation "Return the integer height of subscript/superscript font in 1/10 points.
Not smaller than the value set by `tex-suscript-height-minimum'."
                :arguments ("height"))
                nil [29713 30205])
            ("superscript" variable
               (:documentation "Face used for superscripts."
                :default-value '((t :height tex-suscript-height))
                :type "face")
                nil [30207 30325])
            ("subscript" variable
               (:documentation "Face used for subscripts."
                :default-value '((t :height tex-suscript-height))
                :type "face")
                nil [30326 30441])
            ("tex-math" variable
               (:documentation "Face used to highlight TeX math expressions."
                :default-value '((t :inherit font-lock-string-face))
                :type "face")
                nil [30443 30564])
            ("tex-verbatim" variable
               (:documentation "Face used to highlight TeX verbatim environments."
                :default-value '((t :inherit fixed-pitch-serif))
                :type "face")
                nil [30566 30692])
            ("tex-font-lock-verb" function
               (:documentation "Place syntax table properties on the \\verb construct.
START is the position of the \\ and DELIM is the delimiter char."
                :arguments ("start" "delim"))
                nil [30694 31743])
            ("tex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [31791 32051])
            ("tex-define-common-keys" function
               (:documentation "Define the keys that we want defined both in TeX mode and in the TeX shell."
                :arguments ("keymap"))
                nil [32055 33295])
            ("tex-mode-map" variable
               (:documentation "Keymap shared by TeX modes."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (tex-define-common-keys map) (define-key map "\"" 'tex-insert-quote) (define-key map "
" 'tex-handle-newline) (define-key map "\215" 'latex-insert-item) (define-key map "}" 'up-list) (define-key map "{" 'tex-insert-braces) (define-key map "" 'tex-region) (define-key map "" 'tex-buffer) (define-key map "" 'tex-file) (define-key map "" 'tex-compile) (define-key map "	" 'tex-bibtex-file) (define-key map "" 'latex-insert-block) (define-key map "" 'latex-insert-block) (define-key map "]" 'latex-close-block) (define-key map "/" 'latex-close-block) (define-key map "" 'latex-close-block) (define-key map "" 'tex-goto-last-unclosed-latex-block) (define-key map "" 'tex-feed-input) (define-key map [(control return)] 'tex-feed-input) (define-key map [menu-bar tex tex-bibtex-file] '("BibTeX File" . tex-bibtex-file)) (define-key map [menu-bar tex tex-validate-region] '(menu-item "Validate Region" tex-validate-region :enable mark-active)) (define-key map [menu-bar tex tex-validate-buffer] '("Validate Buffer" . tex-validate-buffer)) (define-key map [menu-bar tex tex-region] '(menu-item "TeX Region" tex-region :enable mark-active)) (define-key map [menu-bar tex tex-buffer] '("TeX Buffer" . tex-buffer)) (define-key map [menu-bar tex tex-file] '("TeX File" . tex-file)) map))
                nil [33297 34997])
            ("latex-mode-map" variable
               (:documentation "Keymap for `latex-mode'.  See also `tex-mode-map'."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) (define-key map "" 'latex-split-block) map))
                nil [34999 35214])
            ("plain-tex-mode-map" variable
               (:documentation "Keymap for `plain-tex-mode'.  See also `tex-mode-map'."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) map))
                nil [35216 35388])
            ("tex-shell-map" variable
               (:documentation "Keymap for the TeX shell.
Inherits `shell-mode-map' with a few additions."
                :default-value (let ((m (make-sparse-keymap))) (set-keymap-parent m shell-mode-map) (tex-define-common-keys m) m))
                nil [35390 35603])
            ("tex-face-alist" variable
               (:documentation "Alist of face and TeX font name for facemenu."
                :default-value '((bold . "{\\bf ") (italic . "{\\it ") (bold-italic . "{\\bi ") (underline . "\\underline{") (default . "{\\rm ")))
                nil [35605 35828])
            ("tex-latex-face-alist" variable
               (:documentation "Alist of face and LaTeX font name for facemenu."
                :default-value `((italic . "{\\em ") ,@tex-face-alist))
                nil [35830 35957])
            ("tex-facemenu-add-face-function" function (:arguments ("face" "_end")) nil [35959 36481])
            ("tex-guess-mode" function nil nil [36581 37510])
            ("define-derived-mode" code nil nil [37765 37849])
            ("defalias" code nil nil [38141 38198])
            ("if" code nil nil [38403 38620])
            ("tex-mode" function
               (:documentation "Major mode for editing files of input for TeX, LaTeX, or SliTeX.
Tries to determine (by looking at the beginning of the file) whether
this file is for plain TeX, LaTeX, or SliTeX and calls `plain-tex-mode',
`latex-mode', or `slitex-mode', respectively.  If it cannot be determined,
such as if there are no commands in the file, the value of `tex-default-mode'
says which mode to use."
                :user-visible-flag t)
                nil [38638 39188])
            ("defalias" code nil nil [39650 39680])
            ("defalias" code nil nil [39696 39738])
            ("defalias" code nil nil [39754 39788])
            ("define-derived-mode" code nil nil [39805 41747])
            ("define-derived-mode" code nil nil [41764 45377])
            ("define-derived-mode" code nil nil [45394 47298])
            ("tildify-space-string" variable nil nil [47300 47329])
            ("tildify-foreach-region-function" variable nil nil [47330 47370])
            ("declare-function" code nil nil [47371 47479])
            ("tex--prettify-symbols-alist" variable nil nil [47480 47516])
            ("tex-common-initialization" function nil nil [47518 50513])
            ("tex-categorize-whitespace" function (:arguments ("backward-limit")) nil [50515 51476])
            ("tex-insert-quote" function
               (:documentation "Insert the appropriate quote marks for TeX.
Inserts the value of `tex-open-quote' (normally \\=`\\=`) or `tex-close-quote'
(normally \\='\\=') depending on the context.  With prefix argument, always
inserts \" characters."
                :user-visible-flag t
                :arguments ("arg"))
                nil [51478 53976])
            ("tex-validate-buffer" function
               (:documentation "Check current buffer for paragraphs containing mismatched braces or $s.
Their positions are recorded in the buffer `*Occur*'.
To find a particular invalidity from `*Occur*', switch to that buffer
and type C-c C-c or click with mouse-2
on the line for the invalidity you want to see."
                :user-visible-flag t)
                nil [53978 56717])
            ("tex-validate-region" function
               (:documentation "Check for mismatched braces or $'s in region.
Returns t if no mismatches.  Returns nil and moves point to suspect
area if a mismatch is found."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [56719 57877])
            ("tex-handle-newline" function
               (:documentation "Break a TeX paragraph with two newlines, or continue a comment.
If not in a comment, insert two newlines, breaking a paragraph for TeX,
and check for mismatched braces or $s in the paragraph being terminated
unless prefix arg INHIBIT-VALIDATION is non-nil to inhibit the checking.
Otherwise (in a comment), just insert a single continued comment line."
                :user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [57879 58452])
            ("tex-terminate-paragraph" function
               (:documentation "Insert two newlines, breaking a paragraph for TeX.
Check for mismatched braces or $s in paragraph being terminated.
A prefix arg inhibits the checking."
                :user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58454 59137])
            ("define-skeleton" code nil nil [59139 59255])
            ("latex-fill-nobreak-predicate" function nil nil [59408 59857])
            ("latex-block-default" variable (:default-value "enumerate") nil [59859 59899])
            ("latex-block-args-alist" variable
               (:documentation "Skeleton element to use for arguments to particular environments.
Every element of the list has the form (NAME . SKEL-ELEM) where NAME is
the name of the environment and SKEL-ELEM is an element to use in
a skeleton (see `skeleton-insert')."
                :default-value '(("array" nil 123 (skeleton-read "Format: ") 125) ("tabular" nil 123 (skeleton-read "Format: ") 125) ("minipage" nil 123 (skeleton-read "Size: ") 125) ("picture" nil 40 (skeleton-read "SizeX,SizeY: ") 41)))
                nil [59901 60521])
            ("latex-block-body-alist" variable
               (:documentation "Skeleton element to use for the body of particular environments.
Every element of the list has the form (NAME . SKEL-ELEM) where NAME is
the name of the environment and SKEL-ELEM is an element to use in
a skeleton (see `skeleton-insert')."
                :default-value '(("enumerate" nil '(latex-insert-item) > _) ("itemize" nil '(latex-insert-item) > _) ("table" nil "\\caption{" > (skeleton-read "Caption: ") "}" > n '(if (and (boundp 'reftex-mode) reftex-mode) (reftex-label "table")) n _) ("figure" nil > _ n "\\caption{" > (skeleton-read "Caption: ") "}" > n '(if (and (boundp 'reftex-mode) reftex-mode) (reftex-label "table")))))
                nil [60523 61197])
            ("defalias" code nil nil [61241 61288])
            ("define-skeleton" code nil nil [61289 62057])
            ("define-skeleton" code nil nil [62059 62145])
            ("latex-complete-bibtex-cache" variable nil nil [62173 62213])
            ("define-obsolete-function-alias" code nil nil [62215 62296])
            ("bibtex-reference-key" variable nil nil [62298 62327])
            ("declare-function" code nil nil [62328 62390])
            ("latex-complete-bibtex-keys" function nil nil [62392 63646])
            ("latex-complete-envnames" function nil nil [63648 64441])
            ("latex-complete-refkeys" function nil nil [64443 64562])
            ("latex-complete-alist" variable (:default-value `(("\\`\\\\\\(short\\)?cite\\'" \, #'latex-complete-bibtex-keys) ("\\`\\\\\\(begin\\|end\\)\\'" \, #'latex-complete-envnames) ("\\`\\\\[vf]?ref\\'" \, #'latex-complete-refkeys))) nil [64564 64781])
            ("latex-complete-data" function (:documentation "Get completion-data at point.") nil [64783 66283])
            ("tex-search-noncomment" function
               (:documentation "Execute BODY as long as it return non-nil and point is in a comment.
Return the value returned by the last execution of BODY."
                :arguments ("body"))
                nil [66325 66720])
            ("tex-last-unended-begin" function (:documentation "Leave point at the beginning of the last `\\begin{...}' that is unended.") nil [66722 67068])
            ("tex-next-unmatched-end" function (:documentation "Leave point at the end of the next `\\end' that is unmatched.") nil [67070 67392])
            ("tex-next-unmatched-eparen" function
               (:documentation "Leave point after the next unmatched escaped closing parenthesis.
The string OTYPE is an opening parenthesis type: `(', `{', or `['."
                :arguments ("otype"))
                nil [67394 68101])
            ("tex-last-unended-eparen" function
               (:documentation "Leave point at the start of the last unended escaped opening parenthesis.
The string CTYPE is a closing parenthesis type:  `)', `}', or `]'."
                :arguments ("ctype"))
                nil [68103 68750])
            ("tex-goto-last-unclosed-latex-block" function
               (:documentation "Move point to the last unclosed \\begin{...}.
Mark is left at original location."
                :user-visible-flag t)
                nil [68752 69030])
            ("latex-handle-escaped-parens" variable (:default-value t) nil [69032 69070])
            ("latex-backward-sexp-1" function (:documentation "Like (backward-sexp 1) but aware of multi-char elements and escaped parens.") nil [69248 70101])
            ("latex-forward-sexp-1" function (:documentation "Like (forward-sexp 1) but aware of multi-char elements and escaped parens.") nil [70384 71479])
            ("latex-forward-sexp" function
               (:documentation "Like `forward-sexp' but aware of multi-char elements and escaped parens."
                :user-visible-flag t
                :arguments ("arg"))
                nil [71481 71986])
            ("latex-syntax-after" function (:documentation "Like (char-syntax (char-after)) but aware of multi-char elements.") nil [71988 72155])
            ("latex-skip-close-parens" function (:documentation "Like (skip-syntax-forward \" )\") but aware of multi-char elements.") nil [72157 72401])
            ("latex-down-list" function (:documentation "Like (down-list 1) but aware of multi-char elements.") nil [72403 72764])
            ("defalias" code nil nil [72766 72818])
            ("define-skeleton" code nil nil [72819 73086])
            ("define-skeleton" code nil nil [73088 73572])
            ("tex-discount-args-cmds" variable
               (:documentation "TeX commands whose arguments should not be counted as text."
                :constant-flag t
                :default-value '("begin" "end" "input" "special" "cite" "ref" "include" "includeonly" "documentclass" "usepackage" "label"))
                nil [73574 73786])
            ("tex-count-words" function
               (:documentation "Count the number of words in the buffer."
                :user-visible-flag t
                :arguments ("begin" "end"))
                nil [73788 74852])
            ("tex-error-parse-syntax-table" variable
               (:documentation "Syntax-table used while parsing TeX error messages."
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 123 "_" st) (modify-syntax-entry 125 "_" st) (modify-syntax-entry 91 "_" st) (modify-syntax-entry 93 "_" st) (modify-syntax-entry 34 "_" st) st))
                nil [75037 75517])
            ("tex-old-error-file-name" function nil nil [75519 76278])
            ("tex-error-regexp-alist" variable
               (:constant-flag t
                :default-value '(gnu ("^l\\.\\([1-9][0-9]*\\) \\(?:\\.\\.\\.\\)?\\(.*\\)$" tex-old-error-file-name 1 nil nil nil (2 compilation-error-face)) ("^\\(?:Und\\|Ov\\)erfull \\\\[hv]box .* at lines? \\(\\([1-9][0-9]*\\)\\(?:--\\([1-9][0-9]*\\)\\)?\\)$" tex-old-error-file-name (2 . 3) nil 1 nil (1 compilation-warning-face)) ("^(Font) *\\([^ 
].* on input line \\([1-9][0-9]*\\)\\)\\.$" tex-old-error-file-name 2 nil 1 1 (2 compilation-warning-face))))
                nil [76280 77447])
            ("define-derived-mode" code nil nil [77476 77634])
            ("tex-start-shell" function nil nil [77651 78110])
            ("tex-feed-input" function
               (:documentation "Send input to the tex shell process.
In the tex buffer this can be used to continue an interactive tex run.
In the tex shell buffer this command behaves like `comint-send-input'."
                :user-visible-flag t)
                nil [78112 78424])
            ("tex-display-shell" function (:documentation "Make the TeX shell buffer visible in a window.") nil [78426 78575])
            ("tex-shell-sentinel" function (:arguments ("proc" "_msg")) nil [78577 78843])
            ("tex-set-buffer-directory" function
               (:documentation "Set BUFFER's default directory to be DIRECTORY."
                :arguments ("buffer" "directory"))
                nil [78845 79185])
            ("tex-send-command-modified-tick" variable nil nil [79187 79228])
            ("make-variable-buffer-local" code nil nil [79229 79289])
            ("tex-shell-proc" function nil nil [79291 79371])
            ("tex-shell-buf" function nil nil [79372 79432])
            ("tex-shell-buf-no-error" function nil nil [79433 79540])
            ("tex-send-command" function
               (:documentation "Send COMMAND to TeX shell process, substituting optional FILE for *.
Do this in background if optional BACKGROUND is t.  If COMMAND has no *,
FILE will be appended, preceded by a blank, to COMMAND.  If FILE is nil, no
substitution will be made in COMMAND.  COMMAND can be any expression that
evaluates to a command string.

Return the process in which TeX is running."
                :arguments ("command" "file" "background"))
                nil [79542 81046])
            ("tex-delete-last-temp-files" function
               (:documentation "Delete any junk files from last temp file.
If NOT-ALL is non-nil, save the `.dvi' file."
                :arguments ("not-all"))
                nil [81048 81676])
            ("add-hook" code nil nil [81678 81733])
            ("tex-compile-history" variable nil nil [81808 81840])
            ("tex-input-files-re" variable (:default-value (eval-when-compile (concat "\\." (regexp-opt '("tex" "texi" "texinfo" "bbl" "ind" "sty" "cls") t) "\\'\\|\\`[^.]+\\'"))) nil [81842 82058])
            ("tex-use-reftex" variable
               (:documentation "If non-nil, use RefTeX's list of files to determine what command to use."
                :default-value t)
                nil [82060 82196])
            ("tex-compile-commands" variable
               (:documentation "List of commands for `tex-compile'.
Each element should be of the form (FORMAT IN OUT) where
FORMAT is an expression that evaluates to a string that can contain
  - `%r' the main file name without extension.
  - `%f' the main file name.
IN can be either a string (with the same % escapes in it) indicating
  the name of the input file, or t to indicate that the input is all
  the TeX files of the document, or nil if we don't know.
OUT describes the output file and is either a %-escaped string
  or nil to indicate that there is no output file."
                :default-value `(,@(mapcar (lambda (prefix) `((concat ,prefix tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.pdf")) '("pdf" "xe" "lua")) ((concat tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.dvi") ("xdvi %r &" "%r.dvi") ("\\doc-view \"%r.pdf\"" "%r.pdf") ("xpdf %r.pdf &" "%r.pdf") ("gv %r.ps &" "%r.ps") ("yap %r &" "%r.dvi") ("advi %r &" "%r.dvi") ("gv %r.pdf &" "%r.pdf") ("bibtex %r" "%r.aux" "%r.bbl") ("makeindex %r" "%r.idx" "%r.ind") ("texindex %r.??") ("dvipdfm %r" "%r.dvi" "%r.pdf") ("dvipdf %r" "%r.dvi" "%r.pdf") ("dvips -o %r.ps %r" "%r.dvi" "%r.ps") ("ps2pdf %r.ps" "%r.ps" "%r.pdf") ("lpr %r.ps" "%r.ps")))
                nil [82198 83744])
            ("define-obsolete-function-alias" code nil nil [83746 83823])
            ("tex-guess-main-file" function
               (:documentation "Find a likely `tex-main-file'.
Looks for hints in other buffers in the same directory or in
ALL other buffers.  If ALL is `sub' only look at buffers in parent directories
of the current buffer."
                :arguments ("all"))
                nil [83825 85168])
            ("tex-main-file" function (:documentation "Return the relative name of the main file.") nil [85170 86173])
            ("tex-summarize-command" function (:arguments ("cmd")) nil [86175 86387])
            ("tex-uptodate-p" function
               (:documentation "Return non-nil if FILE is not uptodate w.r.t the document source files.
FILE is typically the output DVI or PDF file."
                :arguments ("file"))
                nil [86389 88693])
            ("format-spec" function (:prototype-flag t) nil [88696 88733])
            ("tex-executable-cache" variable nil nil [88735 88768])
            ("tex-executable-exists-p" function
               (:documentation "Like `executable-find' but with a cache."
                :arguments ("name"))
                nil [88769 89245])
            ("tex-command-executable" function (:arguments ("cmd")) nil [89247 89388])
            ("tex-command-active-p" function
               (:documentation "Return non-nil if the CMD spec might need to be run."
                :arguments ("cmd" "fspec"))
                nil [89390 89795])
            ("tex-cmd-bibtex-args" variable
               (:documentation "Extra args to pass to `bibtex' by default."
                :default-value "--min-crossref=100")
                nil [89797 89948])
            ("tex-format-cmd" function
               (:documentation "Like `format-spec' but adds user-specified args to the command.
Only applies the FSPEC to the args part of FORMAT."
                :arguments ("format" "fspec"))
                nil [89950 90585])
            ("tex-compile-default" function
               (:documentation "Guess a default command given the `format-spec' FSPEC."
                :arguments ("fspec"))
                nil [90587 93548])
            ("tex-cmd-doc-view" function (:arguments ("file")) nil [93550 93625])
            ("tex-compile" function
               (:documentation "Run a command CMD on current TeX buffer's file in DIR."
                :user-visible-flag t
                :arguments ("dir" "cmd"))
                nil [93627 95062])
            ("tex-start-tex" function
               (:documentation "Start a TeX run, using COMMAND on FILE."
                :arguments ("command" "file" "dir"))
                nil [95064 95614])
            ("tex-send-tex-command" function (:arguments ("cmd" "dir")) nil [95616 96270])
            ("tex-region" function
               (:documentation "Run TeX on the current region, via a temporary file.
The file's name comes from the variable `tex-zap-file' and the
variable `tex-directory' says where to put it.

If the buffer has a header, the header is given to TeX before the
region itself.  The buffer's header is all lines between the strings
defined by `tex-start-of-header' and `tex-end-of-header' inclusive.
The header must start in the first 100 lines of the buffer.

The value of `tex-trailer' is given to TeX as input after the region.

The value of `tex-command' specifies the command to use to run TeX."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [96292 98979])
            ("tex-region-header" function
               (:documentation "If there is a TeX header in the current buffer, write it to FILE.
Return point at the end of the region so written, or zero.  If
the optional buffer position BEG is specified, then the region
written out starts at BEG, if this lies before the start of the header.

If the first line matches `tex-first-line-header-regexp', it is
also written out.  The variables `tex-start-of-header' and
`tex-end-of-header' are used to locate the header.  Note that the
start of the header is required to be within the first 100 lines."
                :arguments ("file" "beg"))
                nil [98981 100653])
            ("tex-buffer" function
               (:documentation "Run TeX on current buffer.  See \\[tex-region] for more information.
Does not save the buffer, so it's useful for trying experimental versions.
See \\[tex-file] for an alternative."
                :user-visible-flag t)
                nil [100655 100916])
            ("tex-file" function
               (:documentation "Prompt to save all buffers and run TeX (or LaTeX) on current buffer's file.
This function is more useful than \\[tex-buffer] when you need the
`.aux' file of LaTeX to have the correct name."
                :user-visible-flag t)
                nil [100918 101488])
            ("tex-generate-zap-file-name" function (:documentation "Generate a unique name suitable for use as a file name.") nil [101490 101946])
            ("tex-expand-files" function (:arguments ("s")) nil [102068 102442])
            ("tex-shell-running" function nil nil [102444 102893])
            ("tex-kill-job" function
               (:documentation "Kill the currently running TeX job."
                :user-visible-flag t)
                nil [102895 103326])
            ("tex-recenter-output-buffer" function
               (:documentation "Redisplay buffer of TeX job output so that most recent output can be seen.
The last line of the buffer is displayed on
line LINE of the window, or centered if LINE is nil."
                :user-visible-flag t
                :arguments ("linenum"))
                nil [103328 103912])
            ("tex-print-file-extension" variable
               (:documentation "The TeX-compiled file extension for viewing and printing.
If you use pdflatex instead of latex, set this to \".pdf\" and modify
 `tex-dvi-view-command' and `tex-dvi-print-command' appropriately."
                :default-value ".dvi")
                nil [103914 104209])
            ("tex-print" function
               (:documentation "Print the .dvi file made by \\[tex-region], \\[tex-buffer] or \\[tex-file].
Runs the shell command defined by `tex-dvi-print-command'.  If prefix argument
is provided, use the alternative command, `tex-alt-dvi-print-command'."
                :user-visible-flag t
                :arguments ("alt"))
                nil [104211 105322])
            ("tex-alt-print" function
               (:documentation "Print the .dvi file made by \\[tex-region], \\[tex-buffer] or \\[tex-file].
Runs the shell command defined by `tex-alt-dvi-print-command'."
                :user-visible-flag t)
                nil [105324 105523])
            ("tex-view" function
               (:documentation "Preview the last `.dvi' file made by running TeX under Emacs.
This means, made using \\[tex-region], \\[tex-buffer] or \\[tex-file].
The variable `tex-dvi-view-command' specifies the shell command for preview.
You must set that variable yourself before using this command,
because there is no standard value that would generally work."
                :user-visible-flag t)
                nil [105525 106149])
            ("tex-append" function
               (:documentation "Append to FILENAME the suffix SUFFIX, using same algorithm TeX uses.
Pascal-based TeX scans for the first period, C TeX uses the last.
No period is retained immediately before SUFFIX,
so normally SUFFIX starts with one."
                :arguments ("file-name" "suffix"))
                nil [106151 107134])
            ("tex-show-print-queue" function
               (:documentation "Show the print queue that \\[tex-print] put your job on.
Runs the shell command defined by `tex-show-queue-command'."
                :user-visible-flag t)
                nil [107136 107440])
            ("tex-bibtex-file" function
               (:documentation "Run BibTeX on the current buffer's file."
                :user-visible-flag t)
                nil [107442 107962])
            ("tex-indent-allhanging" variable (:default-value t) nil [107999 108031])
            ("tex-indent-arg" variable (:default-value 4) nil [108032 108057])
            ("tex-indent-basic" variable (:default-value 2) nil [108058 108085])
            ("tex-indent-item" variable (:default-value tex-indent-basic) nil [108086 108127])
            ("tex-indent-item-re" variable (:default-value "\\\\\\(bib\\)?item\\>") nil [108128 108179])
            ("latex-noindent-environments" variable (:default-value '("document")) nil [108180 108230])
            ("put" code nil nil [108231 108341])
            ("tex-latex-indent-syntax-table" variable
               (:documentation "Syntax table used while computing indentation."
                :default-value (let ((st (make-syntax-table tex-mode-syntax-table))) (modify-syntax-entry 36 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) st))
                nil [108343 108606])
            ("latex-indent" function (:arguments ("_arg")) nil [108608 109310])
            ("latex-indent-within-escaped-parens" variable (:documentation "Non-nil means add extra indent to text within escaped parens.
When this is non-nil, text within matching pairs of escaped
parens is indented at the column following the open paren.  The
default value does not add any extra indent thus providing the
behavior of Emacs 22 and earlier.") nil [109312 109698])
            ("latex-find-indent" function
               (:documentation "Find the proper indentation of text after point.
VIRTUAL if non-nil indicates that we're only trying to find the indentation
  in order to determine the indentation of something else.
There might be text before point."
                :arguments ("virtual"))
                nil [109700 113673])
            ("doctex-font-lock-^^A" function nil nil [113694 114448])
            ("doctex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [114450 114824])
            ("doctex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules latex-syntax-propertize-rules ("\\(\\^\\)\\^A" (1 (doctex-font-lock-^^A)))))
                nil [114847 115049])
            ("doctex-font-lock-keywords" variable (:default-value (append tex-font-lock-keywords '(("^%<[^>]*>" (0 font-lock-preprocessor-face t))))) nil [115052 115174])
            ("define-derived-mode" code nil nil [115191 115696])
            ("tex--prettify-symbols-alist" variable
               (:documentation "A `prettify-symbols-alist' usable for (La)TeX modes."
                :default-value '(("\\alpha" . 945) ("\\beta" . 946) ("\\gamma" . 947) ("\\delta" . 948) ("\\epsilon" . 1013) ("\\zeta" . 950) ("\\eta" . 951) ("\\theta" . 952) ("\\iota" . 953) ("\\kappa" . 954) ("\\lambda" . 955) ("\\mu" . 956) ("\\nu" . 957) ("\\xi" . 958) ("\\pi" . 960) ("\\rho" . 961) ("\\sigma" . 963) ("\\tau" . 964) ("\\upsilon" . 965) ("\\phi" . 981) ("\\chi" . 967) ("\\psi" . 968) ("\\omega" . 969) ("\\Gamma" . 915) ("\\Delta" . 916) ("\\Lambda" . 923) ("\\Phi" . 934) ("\\Pi" . 928) ("\\Psi" . 936) ("\\Sigma" . 931) ("\\Theta" . 920) ("\\Upsilon" . 933) ("\\Xi" . 926) ("\\Omega" . 937) ("\\Box" . 9633) ("\\Bumpeq" . 8782) ("\\Cap" . 8914) ("\\Cup" . 8915) ("\\Diamond" . 9671) ("\\Downarrow" . 8659) ("\\H{o}" . 337) ("\\Im" . 8465) ("\\Join" . 8904) ("\\Leftarrow" . 8656) ("\\Leftrightarrow" . 8660) ("\\Ll" . 8920) ("\\Lleftarrow" . 8666) ("\\Longleftarrow" . 8656) ("\\Longleftrightarrow" . 8660) ("\\Longrightarrow" . 8658) ("\\Lsh" . 8624) ("\\Re" . 8476) ("\\Rightarrow" . 8658) ("\\Rrightarrow" . 8667) ("\\Rsh" . 8625) ("\\Subset" . 8912) ("\\Supset" . 8913) ("\\Uparrow" . 8657) ("\\Updownarrow" . 8661) ("\\Vdash" . 8873) ("\\Vert" . 8214) ("\\Vvdash" . 8874) ("\\aleph" . 8501) ("\\amalg" . 8720) ("\\angle" . 8736) ("\\approx" . 8776) ("\\approxeq" . 8778) ("\\ast" . 8727) ("\\asymp" . 8781) ("\\backcong" . 8780) ("\\backepsilon" . 8717) ("\\backprime" . 8245) ("\\backsim" . 8765) ("\\backsimeq" . 8909) ("\\backslash" . 92) ("\\barwedge" . 8892) ("\\because" . 8757) ("\\beth" . 8502) ("\\between" . 8812) ("\\bigcap" . 8898) ("\\bigcirc" . 9711) ("\\bigcup" . 8899) ("\\bigstar" . 9733) ("\\bigtriangledown" . 9661) ("\\bigtriangleup" . 9651) ("\\bigvee" . 8897) ("\\bigwedge" . 8896) ("\\blacklozenge" . 10022) ("\\blacksquare" . 9642) ("\\blacktriangle" . 9652) ("\\blacktriangledown" . 9662) ("\\blacktriangleleft" . 9666) ("\\blacktriangleright" . 9656) ("\\bot" . 8869) ("\\bowtie" . 8904) ("\\boxminus" . 8863) ("\\boxplus" . 8862) ("\\boxtimes" . 8864) ("\\bullet" . 8226) ("\\bumpeq" . 8783) ("\\cap" . 8745) ("\\cdots" . 8943) ("\\centerdot" . 183) ("\\checkmark" . 10003) ("\\chi" . 967) ("\\cdot" . 8901) ("\\cdots" . 8943) ("\\circ" . 8728) ("\\circeq" . 8791) ("\\circlearrowleft" . 8634) ("\\circlearrowright" . 8635) ("\\circledR" . 174) ("\\circledS" . 9416) ("\\circledast" . 8859) ("\\circledcirc" . 8858) ("\\circleddash" . 8861) ("\\clubsuit" . 9827) ("\\coloneq" . 8788) ("\\complement" . 8705) ("\\cong" . 8773) ("\\coprod" . 8720) ("\\cup" . 8746) ("\\curlyeqprec" . 8926) ("\\curlyeqsucc" . 8927) ("\\curlypreceq" . 8828) ("\\curlyvee" . 8910) ("\\curlywedge" . 8911) ("\\curvearrowleft" . 8630) ("\\curvearrowright" . 8631) ("\\dag" . 8224) ("\\dagger" . 8224) ("\\daleth" . 8504) ("\\dashv" . 8867) ("\\ddag" . 8225) ("\\ddagger" . 8225) ("\\ddots" . 8945) ("\\diamond" . 8900) ("\\diamondsuit" . 9826) ("\\divideontimes" . 8903) ("\\doteq" . 8784) ("\\doteqdot" . 8785) ("\\dotplus" . 8724) ("\\dotsquare" . 8865) ("\\downarrow" . 8595) ("\\downdownarrows" . 8650) ("\\downleftharpoon" . 8643) ("\\downrightharpoon" . 8642) ("\\ell" . 8467) ("\\emptyset" . 8709) ("\\eqcirc" . 8790) ("\\eqcolon" . 8789) ("\\eqslantgtr" . 8925) ("\\eqslantless" . 8924) ("\\equiv" . 8801) ("\\exists" . 8707) ("\\fallingdotseq" . 8786) ("\\flat" . 9837) ("\\forall" . 8704) ("\\frown" . 8994) ("\\ge" . 8805) ("\\geq" . 8805) ("\\geqq" . 8807) ("\\geqslant" . 8805) ("\\gets" . 8592) ("\\gg" . 8811) ("\\ggg" . 8921) ("\\gimel" . 8503) ("\\gnapprox" . 8935) ("\\gneq" . 8809) ("\\gneqq" . 8809) ("\\gnsim" . 8935) ("\\gtrapprox" . 8819) ("\\gtrdot" . 8919) ("\\gtreqless" . 8923) ("\\gtreqqless" . 8923) ("\\gtrless" . 8823) ("\\gtrsim" . 8819) ("\\gvertneqq" . 8809) ("\\hbar" . 8463) ("\\heartsuit" . 9829) ("\\hookleftarrow" . 8617) ("\\hookrightarrow" . 8618) ("\\iff" . 8660) ("\\imath" . 305) ("\\in" . 8712) ("\\infty" . 8734) ("\\int" . 8747) ("\\intercal" . 8890) ("\\langle" . 10216) ("\\lbrace" . 123) ("\\lbrack" . 91) ("\\lceil" . 8968) ("\\ldots" . 8230) ("\\le" . 8804) ("\\leadsto" . 8605) ("\\leftarrow" . 8592) ("\\leftarrowtail" . 8610) ("\\leftharpoondown" . 8637) ("\\leftharpoonup" . 8636) ("\\leftleftarrows" . 8647) ("\\leftrightarrow" . 8596) ("\\leftrightarrows" . 8646) ("\\leftrightharpoons" . 8651) ("\\leftrightsquigarrow" . 8621) ("\\leftthreetimes" . 8907) ("\\leq" . 8804) ("\\leqq" . 8806) ("\\leqslant" . 8804) ("\\lessapprox" . 8818) ("\\lessdot" . 8918) ("\\lesseqgtr" . 8922) ("\\lesseqqgtr" . 8922) ("\\lessgtr" . 8822) ("\\lesssim" . 8818) ("\\lfloor" . 8970) ("\\lhd" . 9665) ("\\rhd" . 9655) ("\\ll" . 8810) ("\\llcorner" . 8990) ("\\lnapprox" . 8934) ("\\lneq" . 8808) ("\\lneqq" . 8808) ("\\lnsim" . 8934) ("\\longleftarrow" . 8592) ("\\longleftrightarrow" . 8596) ("\\longmapsto" . 8614) ("\\longrightarrow" . 8594) ("\\looparrowleft" . 8619) ("\\looparrowright" . 8620) ("\\lozenge" . 10023) ("\\lq" . 8216) ("\\lrcorner" . 8991) ("\\ltimes" . 8905) ("\\lvertneqq" . 8808) ("\\maltese" . 10016) ("\\mapsto" . 8614) ("\\measuredangle" . 8737) ("\\mho" . 8487) ("\\mid" . 8739) ("\\models" . 8871) ("\\mp" . 8723) ("\\multimap" . 8888) ("\\nLeftarrow" . 8653) ("\\nLeftrightarrow" . 8654) ("\\nRightarrow" . 8655) ("\\nVDash" . 8879) ("\\nVdash" . 8878) ("\\nabla" . 8711) ("\\napprox" . 8777) ("\\natural" . 9838) ("\\ncong" . 8775) ("\\ne" . 8800) ("\\nearrow" . 8599) ("\\neg" . 172) ("\\neq" . 8800) ("\\nequiv" . 8802) ("\\newline" . 8232) ("\\nexists" . 8708) ("\\ngeq" . 8817) ("\\ngeqq" . 8817) ("\\ngeqslant" . 8817) ("\\ngtr" . 8815) ("\\ni" . 8715) ("\\nleftarrow" . 8602) ("\\nleftrightarrow" . 8622) ("\\nleq" . 8816) ("\\nleqq" . 8816) ("\\nleqslant" . 8816) ("\\nless" . 8814) ("\\nmid" . 8740) ("\\notin" . 8713) ("\\nparallel" . 8742) ("\\nprec" . 8832) ("\\npreceq" . 8928) ("\\nrightarrow" . 8603) ("\\nshortmid" . 8740) ("\\nshortparallel" . 8742) ("\\nsim" . 8769) ("\\nsimeq" . 8772) ("\\nsubset" . 8836) ("\\nsubseteq" . 8840) ("\\nsubseteqq" . 8840) ("\\nsucc" . 8833) ("\\nsucceq" . 8929) ("\\nsupset" . 8837) ("\\nsupseteq" . 8841) ("\\nsupseteqq" . 8841) ("\\ntriangleleft" . 8938) ("\\ntrianglelefteq" . 8940) ("\\ntriangleright" . 8939) ("\\ntrianglerighteq" . 8941) ("\\nvDash" . 8877) ("\\nvdash" . 8876) ("\\nwarrow" . 8598) ("\\odot" . 8857) ("\\oint" . 8750) ("\\ominus" . 8854) ("\\oplus" . 8853) ("\\oslash" . 8856) ("\\otimes" . 8855) ("\\par" . 8233) ("\\parallel" . 8741) ("\\partial" . 8706) ("\\perp" . 8869) ("\\pitchfork" . 8916) ("\\prec" . 8826) ("\\precapprox" . 8830) ("\\preceq" . 8828) ("\\precnapprox" . 8936) ("\\precnsim" . 8936) ("\\precsim" . 8830) ("\\prime" . 8242) ("\\prod" . 8719) ("\\propto" . 8733) ("\\qed" . 8718) ("\\qquad" . 10722) ("\\quad" . 9251) ("\\rangle" . 10217) ("\\rbrace" . 125) ("\\rbrack" . 93) ("\\rceil" . 8969) ("\\rfloor" . 8971) ("\\rightarrow" . 8594) ("\\rightarrowtail" . 8611) ("\\rightharpoondown" . 8641) ("\\rightharpoonup" . 8640) ("\\rightleftarrows" . 8644) ("\\rightleftharpoons" . 8652) ("\\rightrightarrows" . 8649) ("\\rightthreetimes" . 8908) ("\\risingdotseq" . 8787) ("\\rtimes" . 8906) ("\\times" . 215) ("\\sbs" . 65128) ("\\searrow" . 8600) ("\\setminus" . 8726) ("\\sharp" . 9839) ("\\shortmid" . 8739) ("\\shortparallel" . 8741) ("\\sim" . 8764) ("\\simeq" . 8771) ("\\smallamalg" . 8720) ("\\smallsetminus" . 8726) ("\\smallsmile" . 8995) ("\\smile" . 8995) ("\\spadesuit" . 9824) ("\\sphericalangle" . 8738) ("\\sqcap" . 8851) ("\\sqcup" . 8852) ("\\sqsubset" . 8847) ("\\sqsubseteq" . 8849) ("\\sqsupset" . 8848) ("\\sqsupseteq" . 8850) ("\\square" . 9633) ("\\squigarrowright" . 8669) ("\\star" . 8902) ("\\straightphi" . 966) ("\\subset" . 8834) ("\\subseteq" . 8838) ("\\subseteqq" . 8838) ("\\subsetneq" . 8842) ("\\subsetneqq" . 8842) ("\\succ" . 8827) ("\\succapprox" . 8831) ("\\succcurlyeq" . 8829) ("\\succeq" . 8829) ("\\succnapprox" . 8937) ("\\succnsim" . 8937) ("\\succsim" . 8831) ("\\sum" . 8721) ("\\supset" . 8835) ("\\supseteq" . 8839) ("\\supseteqq" . 8839) ("\\supsetneq" . 8843) ("\\supsetneqq" . 8843) ("\\surd" . 8730) ("\\swarrow" . 8601) ("\\therefore" . 8756) ("\\thickapprox" . 8776) ("\\thicksim" . 8764) ("\\to" . 8594) ("\\top" . 8868) ("\\triangle" . 9653) ("\\triangledown" . 9663) ("\\triangleleft" . 9667) ("\\trianglelefteq" . 8884) ("\\triangleq" . 8796) ("\\triangleright" . 9657) ("\\trianglerighteq" . 8885) ("\\twoheadleftarrow" . 8606) ("\\twoheadrightarrow" . 8608) ("\\ulcorner" . 8988) ("\\uparrow" . 8593) ("\\updownarrow" . 8597) ("\\upleftharpoon" . 8639) ("\\uplus" . 8846) ("\\uprightharpoon" . 8638) ("\\upuparrows" . 8648) ("\\urcorner" . 8989) ("\\u{i}" . 301) ("\\vDash" . 8872) ("\\varepsilon" . 949) ("\\varphi" . 966) ("\\varprime" . 8242) ("\\varpropto" . 8733) ("\\varrho" . 1009) ("\\varsigma" 962) ("\\vartriangleleft" . 8882) ("\\vartriangleright" . 8883) ("\\vdash" . 8866) ("\\vdots" . 8942) ("\\vee" . 8744) ("\\veebar" . 8891) ("\\vert" . 124) ("\\wedge" . 8743) ("\\wp" . 8472) ("\\wr" . 8768) ("\\Bbb{N}" . 8469) ("\\Bbb{P}" . 8473) ("\\Bbb{Q}" . 8474) ("\\Bbb{R}" . 8477) ("\\Bbb{Z}" . 8484) ("--" . 8211) ("---" . 8212) ("\\ordfeminine" . 170) ("\\ordmasculine" . 186) ("\\lambdabar" . 411) ("\\celsius" . 8451) ("\\textmu" . 181) ("\\textfractionsolidus" . 8260) ("\\textbigcircle" . 8413) ("\\textmusicalnote" . 9834) ("\\textdied" . 10013) ("\\textcolonmonetary" . 8353) ("\\textwon" . 8361) ("\\textnaira" . 8358) ("\\textpeso" . 8369) ("\\textlira" . 8356) ("\\textrecipe" . 8478) ("\\textinterrobang" . 8253) ("\\textpertenthousand" . 8241) ("\\textbaht" . 3647) ("\\textnumero" . 8470) ("\\textdiscount" . 8274) ("\\textestimated" . 8494) ("\\textopenbullet" . 9702) ("\\textlquill" . 8261) ("\\textrquill" . 8262) ("\\textcircledP" . 8471) ("\\textreferencemark" . 8251)))
                nil [115728 127102])
            ("tex--prettify-symbols-compose-p" function (:arguments ("_start" "end" "_match")) nil [127104 127977])
            ("defvar-local" code nil nil [128002 128040])
            ("tex-chktex-command" function (:documentation "Return a list of command arguments for invoking ChkTeX.") nil [128042 128246])
            ("tex-chktex" function
               (:documentation "Flymake backend for linting TeX buffers with ChkTeX."
                :arguments ("report-fn" "_args"))
                nil [128248 130047])
            ("run-hooks" code nil nil [130049 130080])
            ("tex-mode" package nil nil [130082 130101]))          
      :file "tex-mode.el.gz"
      :pointmax 130129
      :fsize 36830
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 115049 . 115050) (symbol 114827 . 114844) (open-paren 114826 . 114827) (close-paren 38620 . 38621) (symbol 38383 . 38400) (open-paren 38382 . 38383) (close-paren 24995 . 24996) (symbol 24450 . 24467) (open-paren 24449 . 24450) (close-paren 1184 . 1185) (symbol 1102 . 1119) (open-paren 1101 . 1102)))
    (semanticdb-table "semanticdb-table-1832ad8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfmt-version" variable (:default-value "2.42 of  7 Jul 2006") nil [1001 1048])
            ("texinfmt-version" function
               (:documentation "Show the version of texinfmt.el in the minibuffer.
If optional argument HERE is non-nil, insert info at point."
                :user-visible-flag t
                :arguments ("here"))
                nil [1050 1485])
            ("texinfo" include nil nil [1515 1533])
            ("texnfo-upd" include nil nil [1585 1606])
            ("texinfo-vindex" variable nil nil [1662 1685])
            ("texinfo-findex" variable nil nil [1686 1709])
            ("texinfo-cindex" variable nil nil [1710 1733])
            ("texinfo-pindex" variable nil nil [1734 1757])
            ("texinfo-tindex" variable nil nil [1758 1781])
            ("texinfo-kindex" variable nil nil [1782 1805])
            ("texinfo-last-node" variable nil nil [1806 1832])
            ("texinfo-node-names" variable nil nil [1833 1860])
            ("texinfo-enclosure-list" variable nil nil [1861 1892])
            ("texinfo-alias-list" variable nil nil [1893 1920])
            ("texinfo-fold-nodename-case" variable nil nil [1921 1960])
            ("texinfo-command-start" variable nil nil [1962 1992])
            ("texinfo-command-end" variable nil nil [1993 2021])
            ("texinfo-command-name" variable nil nil [2022 2051])
            ("texinfo-defun-type" variable nil nil [2052 2079])
            ("texinfo-last-node-pos" variable nil nil [2080 2110])
            ("texinfo-stack" variable nil nil [2111 2133])
            ("texinfo-short-index-cmds-alist" variable nil nil [2134 2173])
            ("texinfo-short-index-format-cmds-alist" variable nil nil [2174 2220])
            ("texinfo-format-filename" variable nil nil [2221 2253])
            ("texinfo-footnote-number" variable nil nil [2254 2286])
            ("texinfo-raisesections-alist" variable
               (:documentation "An alist of next higher levels for chapters, sections, etc...
For example, section to chapter, subsection to section.
Used by `texinfo-raise-lower-sections'.
The keys specify types of section; the values correspond to the next
higher types."
                :default-value '((@chapter . @chapter) (@unnumbered . @unnumbered) (@centerchap . @unnumbered) (@majorheading . @majorheading) (@chapheading . @chapheading) (@appendix . @appendix) (@section . @chapter) (@unnumberedsec . @unnumbered) (@heading . @chapheading) (@appendixsec . @appendix) (@subsection . @section) (@unnumberedsubsec . @unnumberedsec) (@subheading . @heading) (@appendixsubsec . @appendixsec) (@subsubsection . @subsection) (@unnumberedsubsubsec . @unnumberedsubsec) (@subsubheading . @subheading) (@appendixsubsubsec . @appendixsubsec)))
                nil [2288 3211])
            ("texinfo-lowersections-alist" variable
               (:documentation "An alist of next lower levels for chapters, sections, etc...
For example, chapter to section, section to subsection.
Used by `texinfo-raise-lower-sections'.
The keys specify types of section; the values correspond to the next
lower types."
                :default-value '((@chapter . @section) (@unnumbered . @unnumberedsec) (@centerchap . @unnumberedsec) (@majorheading . @heading) (@chapheading . @heading) (@appendix . @appendixsec) (@section . @subsection) (@unnumberedsec . @unnumberedsubsec) (@heading . @subheading) (@appendixsec . @appendixsubsec) (@subsection . @subsubsection) (@unnumberedsubsec . @unnumberedsubsubsec) (@subheading . @subsubheading) (@appendixsubsec . @appendixsubsubsec) (@subsubsection . @subsubsection) (@unnumberedsubsubsec . @unnumberedsubsubsec) (@subsubheading . @subsubheading) (@appendixsubsubsec . @appendixsubsubsec)))
                nil [3213 4171])
            ("texinfo-format-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 " " st) (modify-syntax-entry 92 " " st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "." st) (modify-syntax-entry 93 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 39 "." st) st)) nil [4192 4679])
            ("texinfo-format-buffer" function
               (:documentation "Process the current buffer as texinfo code, into an Info file.
The Info file output is generated in a buffer visiting the Info file
name specified in the @setfilename command.

Non-nil argument (prefix, if interactive) means don't make tag table
and don't split the file if large.  You can use `Info-tagify' and
`Info-split' to do these manually."
                :user-visible-flag t
                :arguments ("nosplit"))
                nil [4752 5692])
            ("texinfo-region-buffer-name" variable
               (:documentation "Name of the temporary buffer used by \\[texinfo-format-region]."
                :default-value "*Info Region*")
                nil [5694 5813])
            ("texinfo-pre-format-hook" variable (:documentation "Hook called before the conversion of the Texinfo file to Info format.
The functions on this hook are called with argument BUFFER, the buffer
containing the Texinfo file.") nil [5815 6025])
            ("tex-start-of-header" variable nil nil [6059 6087])
            ("tex-end-of-header" variable nil nil [6088 6114])
            ("texinfo-format-region" function
               (:documentation "Convert the current region of the Texinfo file to Info format.
This lets you see what that part of the file will look like in Info.
The command is bound to \\[texinfo-format-region].  The text that is
converted to Info is stored in a temporary buffer."
                :user-visible-flag t
                :arguments ("region-beginning" "region-end"))
                nil [6131 12591])
            ("texi2info" function
               (:documentation "Convert the current buffer (written in Texinfo code) into an Info file.
The Info file output is generated in a buffer visiting the Info file
names specified in the @setfilename command.

This function automatically updates all node pointers and menus, and
creates a master menu.  This work is done on a temporary buffer that
is automatically removed when the Info file is created.  The original
Texinfo source buffer is not changed.

Non-nil argument (prefix, if interactive) means don't split the file
if large.  You can use `Info-split' to do this manually."
                :user-visible-flag t
                :arguments ("nosplit"))
                nil [12608 13659])
            ("texinfo-format-buffer-1" function nil nil [13727 17941])
            ("texinfo-format-convert" function (:arguments ("min" "max")) nil [18009 18480])
            ("texinfo-no-refill-regexp" variable
               (:documentation "Regexp specifying environments in which paragraphs are not filled."
                :default-value (concat "^@" "\\(" "direntry\\|" "lisp\\|" "smalllisp\\|" "example\\|" "smallexample\\|" "display\\|" "smalldisplay\\|" "format\\|" "smallformat\\|" "flushleft\\|" "flushright\\|" "menu\\|" "multitable\\|" "titlepage\\|" "iftex\\|" "ifhtml\\|" "tex\\|" "html" "\\)"))
                nil [18569 19346])
            ("texinfo-accent-commands" variable (:default-value (concat "@^\\|" "@`\\|" "@'\\|" "@\"\\|" "@,\\|" "@=\\|" "@~\\|" "@OE{\\|" "@oe{\\|" "@AA{\\|" "@aa{\\|" "@AE{\\|" "@ae{\\|" "@ss{\\|" "@questiondown{\\|" "@exclamdown{\\|" "@L{\\|" "@l{\\|" "@O{\\|" "@o{\\|" "@dotaccent{\\|" "@ubaraccent{\\|" "@d{\\|" "@H{\\|" "@ringaccent{\\|" "@tieaccent{\\|" "@u{\\|" "@v{\\|" "@dotless{")) nil [19348 19801])
            ("texinfo-part-of-para-regexp" variable
               (:documentation "Regexp specifying @-commands found within paragraphs."
                :default-value (concat "^@" "\\(" "b{\\|" "bullet{\\|" "cite{\\|" "code{\\|" "email{\\|" "emph{\\|" "equiv{\\|" "error{\\|" "expansion{\\|" "file{\\|" "i{\\|" "inforef{\\|" "kbd{\\|" "key{\\|" "lisp{\\|" "minus{\\|" "point{\\|" "print{\\|" "pxref{\\|" "r{\\|" "ref{\\|" "result{\\|" "samp{\\|" "sc{\\|" "t{\\|" "TeX{\\|" "today{\\|" "url{\\|" "var{\\|" "w{\\|" "xref{\\|" "@-\\|" texinfo-accent-commands "\\)"))
                nil [19803 20467])
            ("texinfo-append-refill" function (:documentation "Append @refill at end of each paragraph that should be filled.
Do not append @refill to paragraphs within @example and similar environments.
Do not append @refill to paragraphs containing @w{TEXT} or @*.") nil [20469 23033])
            ("texinfo-raise-lower-sections" function (:documentation "Raise or lower the hierarchical level of chapters, sections, etc.

This function acts according to `@raisesections' and `@lowersections'
commands in the Texinfo file.

For example, an `@lowersections' command is useful if you wish to
include what is written as an outer or standalone Texinfo file in
another Texinfo file as an inner, included file.  The `@lowersections'
command changes chapters to sections, sections to subsections and so
on.

@raisesections changes @subsection to @section,
                       @section    to @chapter,
                       @heading    to @chapheading,
                       etc.

@lowersections changes @chapter    to @section,
                       @subsection to @subsubsection,
                       @heading    to @subheading,
                       etc.

An `@raisesections' or `@lowersections' command changes only those
structuring commands that follow the `@raisesections' or
`@lowersections' command.

An `@lowersections' command cancels an `@raisesections' command, and
vice versa.

Repeated use of the commands continue to raise or lower the hierarchical
level a step at a time.

An attempt to raise above `chapters' reproduces chapter commands; an
attempt to lower below subsubsections reproduces subsubsection
commands.") nil [24097 27129])
            ("texinfo-format-scan" function nil nil [27224 32038])
            ("texinfo-copying-text" variable (:documentation "Text of the copyright notice and copying permissions.") nil [32040 32130])
            ("texinfo-copying" function (:documentation "Copy the copyright notice and copying permissions from the Texinfo file,
as indicated by the @copying ... @end copying command;
insert the text with the @insertcopying command.") nil [32132 32713])
            ("texinfo-insertcopying" function (:documentation "Insert the copyright notice and copying permissions from the Texinfo file,
which are indicated by the @copying ... @end copying command.") nil [32715 32934])
            ("put" code nil nil [32936 32986])
            ("texinfo-format-begin" function nil nil [32987 33063])
            ("put" code nil nil [33065 33111])
            ("texinfo-format-end" function nil nil [33112 33183])
            ("texinfo-format-begin-end" function (:arguments ("prop")) nil [33185 33391])
            ("texinfo-parse-line-arg" function (:documentation "Return argument of @-command as string.
Argument is separated from command either by a space or by a brace.
If a space, return rest of line, with beginning and ending white
space removed.  If a brace, return string between braces.
Leave point after argument.") nil [33417 34387])
            ("texinfo-parse-expanded-arg" function nil nil [34389 35213])
            ("texinfo-format-expand-region" function (:arguments ("start" "end")) nil [35215 35492])
            ("texinfo-parse-arg-discard" function (:documentation "Delete command and argument; return argument of command.") nil [35494 35661])
            ("texinfo-discard-command" function nil nil [35663 35757])
            ("texinfo-optional-braces-discard" function (:documentation "Discard braces following command, if any.") nil [35759 36273])
            ("texinfo-format-parse-line-args" function nil nil [36275 36875])
            ("texinfo-format-parse-args" function nil nil [36877 37922])
            ("texinfo-format-parse-defun-args" function nil nil [37924 38863])
            ("texinfo-discard-line" function nil nil [38865 39198])
            ("texinfo-discard-line-with-args" function nil nil [39200 39336])
            ("put" code nil nil [39504 39566])
            ("texinfo-format-setfilename" function nil nil [39567 39634])
            ("put" code nil nil [39668 39716])
            ("put" code nil nil [39717 39767])
            ("texinfo-format-node" function nil nil [39768 40622])
            ("put" code nil nil [40624 40669])
            ("texinfo-anchor" function nil nil [40670 41256])
            ("put" code nil nil [41258 41306])
            ("texinfo-format-menu" function nil nil [41307 41387])
            ("put" code nil nil [41389 41438])
            ("put" code nil nil [41902 41957])
            ("put" code nil nil [41958 42013])
            ("put" code nil nil [42772 42819])
            ("put" code nil nil [42821 42869])
            ("texinfo-format-xref" function nil nil [42870 43282])
            ("put" code nil nil [43284 43334])
            ("texinfo-format-pxref" function nil nil [43335 43485])
            ("put" code nil nil [43616 43670])
            ("texinfo-format-inforef" function nil nil [43671 43935])
            ("put" code nil nil [44161 44209])
            ("texinfo-format-uref" function (:documentation "Format URL and optional URL-TITLE.
Insert \\=` ... \\=' around URL if no URL-TITLE argument;
otherwise, insert URL-TITLE followed by URL in parentheses.") nil [44210 44641])
            ("put" code nil nil [44667 44726])
            ("put" code nil nil [44727 44785])
            ("put" code nil nil [44786 44841])
            ("put" code nil nil [44842 44896])
            ("put" code nil nil [44897 44953])
            ("put" code nil nil [44954 45009])
            ("put" code nil nil [45010 45068])
            ("put" code nil nil [45069 45119])
            ("put" code nil nil [45120 45177])
            ("put" code nil nil [45178 45235])
            ("texinfo-format-chapter" function nil nil [45236 45301])
            ("put" code nil nil [45303 45357])
            ("put" code nil nil [45358 45413])
            ("put" code nil nil [45414 45468])
            ("put" code nil nil [45469 45532])
            ("put" code nil nil [45533 45595])
            ("put" code nil nil [45596 45655])
            ("put" code nil nil [45656 45714])
            ("put" code nil nil [45715 45776])
            ("put" code nil nil [45777 45837])
            ("texinfo-format-section" function nil nil [45838 45903])
            ("put" code nil nil [45905 45965])
            ("put" code nil nil [45966 46027])
            ("put" code nil nil [46028 46088])
            ("put" code nil nil [46089 46154])
            ("put" code nil nil [46155 46219])
            ("put" code nil nil [46220 46287])
            ("put" code nil nil [46288 46354])
            ("texinfo-format-subsection" function nil nil [46355 46423])
            ("put" code nil nil [46425 46491])
            ("put" code nil nil [46492 46559])
            ("put" code nil nil [46560 46626])
            ("put" code nil nil [46627 46698])
            ("put" code nil nil [46699 46769])
            ("put" code nil nil [46770 46843])
            ("put" code nil nil [46844 46916])
            ("texinfo-format-subsubsection" function nil nil [46917 46988])
            ("texinfo-format-chapter-1" function (:arguments ("belowchar")) nil [46990 47226])
            ("put" code nil nil [47228 47288])
            ("texinfo-format-sectionpad" function nil nil [47289 47551])
            ("put" code nil nil [47621 47665])
            ("texinfo-format-." function nil nil [47666 47737])
            ("put" code nil nil [47739 47783])
            ("texinfo-format-:" function nil nil [47784 47840])
            ("put" code nil nil [47842 47895])
            ("texinfo-format-soft-hyphen" function nil nil [47896 47961])
            ("put" code nil nil [48174 48242])
            ("put" code nil nil [48254 48314])
            ("put" code nil nil [48339 48405])
            ("put" code nil nil [48406 48472])
            ("put" code nil nil [48473 48538])
            ("put" code nil nil [48539 48604])
            ("put" code nil nil [48605 48672])
            ("put" code nil nil [48673 48740])
            ("put" code nil nil [48940 49018])
            ("texinfo-format-documentdescription" function nil nil [49019 49182])
            ("put" code nil nil [49214 49266])
            ("texinfo-format-center" function nil nil [49267 49521])
            ("put" code nil nil [49523 49567])
            ("texinfo-format-sp" function nil nil [49568 49693])
            ("put" code nil nil [49695 49752])
            ("texinfo-format-paragraph-break" function (:documentation "Force a paragraph break.
If used within a line, follow `@br' with braces.") nil [49753 50081])
            ("texinfo-footnote-style" variable
               (:documentation "Footnote style, either separate or end."
                :default-value "separate")
                nil [50973 51059])
            ("put" code nil nil [51061 51120])
            ("texinfo-footnotestyle" function (:documentation "Specify whether footnotes are at end of node or in separate nodes.
Argument is either end or separate.") nil [51121 51320])
            ("put" code nil nil [51322 51378])
            ("texinfo-format-footnote" function (:documentation "Format a footnote in either end of node or separate node style.
The   texinfo-footnote-style  variable controls which style is used.") nil [51379 51791])
            ("texinfo-format-separate-node" function (:documentation "Format footnote in Separate node style, with notes in own node.
The node is constructed automatically.") nil [51793 53882])
            ("texinfo-format-end-node" function (:documentation "Format footnote in the End of node style, with notes at end of node.") nil [53884 54968])
            ("texinfo-stack-depth" variable (:documentation "Count of number of unpopped texinfo-push-stack calls.
Used by @refill indenting command to avoid indenting within lists, etc.") nil [55495 55655])
            ("texinfo-push-stack" function (:arguments ("check" "arg")) nil [55657 55819])
            ("texinfo-pop-stack" function (:arguments ("check")) nil [55821 56193])
            ("put" code nil nil [56195 56242])
            ("texinfo-itemize" function nil nil [56243 56499])
            ("put" code nil nil [56501 56549])
            ("texinfo-end-itemize" function nil nil [56550 56748])
            ("put" code nil nil [56750 56801])
            ("texinfo-enumerate" function nil nil [56802 57265])
            ("put" code nil nil [57267 57319])
            ("texinfo-end-enumerate" function nil nil [57320 57522])
            ("put" code nil nil [57583 57644])
            ("texinfo-alphaenumerate" function nil nil [57645 57789])
            ("put" code nil nil [57791 57853])
            ("texinfo-end-alphaenumerate" function nil nil [57854 58066])
            ("put" code nil nil [58126 58185])
            ("texinfo-capsenumerate" function nil nil [58186 58328])
            ("put" code nil nil [58330 58390])
            ("texinfo-end-capsenumerate" function nil nil [58391 58601])
            ("texinfo-do-itemize" function (:arguments ("from")) nil [58739 59089])
            ("put" code nil nil [59091 59132])
            ("put" code nil nil [59133 59175])
            ("texinfo-item" function nil nil [59176 59257])
            ("put" code nil nil [59259 59309])
            ("texinfo-itemize-item" function nil nil [59310 59717])
            ("put" code nil nil [59719 59773])
            ("texinfo-enumerate-item" function nil nil [59774 60898])
            ("put" code nil nil [60900 60964])
            ("texinfo-alphaenumerate-item" function nil nil [60965 61278])
            ("put" code nil nil [61280 61342])
            ("texinfo-capsenumerate-item" function nil nil [61343 61654])
            ("put" code nil nil [61723 61766])
            ("texinfo-table" function nil nil [61767 62017])
            ("put" code nil nil [62019 62065])
            ("texinfo-table-item" function nil nil [62066 62257])
            ("put" code nil nil [62259 62303])
            ("texinfo-end-table" function nil nil [62304 62498])
            ("put" code nil nil [62709 62759])
            ("put" code nil nil [62760 62815])
            ("texinfo-description" function nil nil [62816 62948])
            ("put" code nil nil [63198 63243])
            ("put" code nil nil [63244 63289])
            ("texinfo-ftable" function nil nil [63291 63345])
            ("texinfo-vtable" function nil nil [63346 63400])
            ("texinfo-indextable" function (:arguments ("table-type")) nil [63402 63542])
            ("put" code nil nil [63600 63648])
            ("put" code nil nil [63649 63697])
            ("texinfo-ftable-item" function nil nil [63699 63771])
            ("texinfo-vtable-item" function nil nil [63772 63844])
            ("texinfo-indextable-item" function (:arguments ("index-type")) nil [63846 64195])
            ("put" code nil nil [64233 64279])
            ("put" code nil nil [64280 64326])
            ("texinfo-end-ftable" function nil nil [64328 64390])
            ("texinfo-end-vtable" function nil nil [64391 64453])
            ("texinfo-end-indextable" function (:arguments ("table-type")) nil [64455 64668])
            ("texinfo-extra-inter-column-width" variable (:documentation "Number of extra spaces between entries (columns) in @multitable.") nil [67773 67885])
            ("texinfo-multitable-buffer-name" variable (:default-value "*multitable-temporary-buffer*") nil [67887 67958])
            ("texinfo-multitable-rectangle-name" variable (:default-value "texinfo-multitable-temp-") nil [67959 68028])
            ("put" code nil nil [68095 68167])
            ("put" code nil nil [68168 68242])
            ("put" code nil nil [68243 68317])
            ("put" code nil nil [68318 68392])
            ("put" code nil nil [68394 68447])
            ("texinfo-multitable" function (:documentation "Produce multi-column tables.

A multi-column table has this template:

    @multitable {A1} {A2} {A3}
    @item  A1  @tab  A2  @tab  A3
    @item  B1  @tab  B2  @tab  B3
    @item  C1  @tab  C2  @tab  C3
    @end multitable

where the width of the text in brackets specifies the width of the
respective column.

Or else:

    @multitable @columnfractions .25 .3 .45
    @item  A1  @tab  A2  @tab  A3
    @item  B1  @tab  B2  @tab  B3
    @end multitable

where the fractions specify the width of each column as a percent
of the current width of the text (i.e., of the `fill-column').

Long lines of text are filled within columns.

Using the Emacs Lisp formatter, texinfmt.el,
the whitespace between columns can be increased by setting
`texinfo-extra-inter-column-width' to a value greater than 0.  By default,
there is at least one blank space between columns.

The Emacs Lisp formatter, texinfmt.el, ignores the following four
commands that are defined in texinfo.tex for printed output.

    @multitableparskip,
    @multitableparindent,
    @multitablecolmargin,
    @multitablelinespace.") nil [68449 70021])
            ("put" code nil nil [70023 70077])
            ("texinfo-end-multitable" function (:documentation "Discard the @end multitable line and pop the stack of multitable.") nil [70078 70243])
            ("texinfo-multitable-widths" function (:documentation "Return list of widths of each column in a multi-column table.") nil [70245 72786])
            ("texinfo-multitable-extract-row" function (:documentation "Return multitable row, as a string.
End of row is beginning of next @item or beginning of @end.
Cells within rows are separated by @tab.") nil [72821 73487])
            ("put" code nil nil [73489 73545])
            ("texinfo-multitable-item" function (:documentation "Format a row within a multicolumn table.
Cells in row are separated by @tab.
Widths of cells are specified by the arguments in the @multitable line.
All cells are made to be the same height.
This command is executed when texinfmt sees @item inside @multitable.") nil [73546 78561])
            ("put" code nil nil [78669 78719])
            ("texinfo-format-image" function (:documentation "Insert an image from a file ending in .txt.
Use only the FILENAME arg; for Info, ignore the other arguments to @image.") nil [78720 79321])
            ("put" code nil nil [79463 79514])
            ("put" code nil nil [79515 79566])
            ("put" code nil nil [79568 79618])
            ("texinfo-format-iftex" function nil nil [79619 79748])
            ("put" code nil nil [79750 79802])
            ("texinfo-format-ifhtml" function nil nil [79803 79934])
            ("put" code nil nil [79936 79998])
            ("texinfo-format-ifplaintext" function nil nil [79999 80140])
            ("put" code nil nil [80142 80192])
            ("texinfo-format-ifxml" function nil nil [80193 80363])
            ("put" code nil nil [80365 80411])
            ("texinfo-format-tex" function nil nil [80412 80537])
            ("put" code nil nil [80539 80587])
            ("texinfo-format-html" function nil nil [80588 80715])
            ("put" code nil nil [80717 80763])
            ("texinfo-format-xml" function nil nil [80764 80930])
            ("put" code nil nil [80932 80990])
            ("texinfo-format-ifnotinfo" function nil nil [80991 81128])
            ("put" code nil nil [81130 81189])
            ("put" code nil nil [81190 81249])
            ("put" code nil nil [81251 81304])
            ("put" code nil nil [81305 81358])
            ("put" code nil nil [81360 81414])
            ("put" code nil nil [81415 81469])
            ("put" code nil nil [81471 81524])
            ("put" code nil nil [81525 81578])
            ("put" code nil nil [81598 81656])
            ("texinfo-format-titlepage" function nil nil [81657 81794])
            ("put" code nil nil [81796 81853])
            ("put" code nil nil [81926 81984])
            ("texinfo-format-titlespec" function nil nil [81985 82122])
            ("put" code nil nil [82124 82181])
            ("put" code nil nil [82197 82247])
            ("texinfo-format-today" function nil nil [82379 82483])
            ("put" code nil nil [82584 82642])
            ("texinfo-format-timestamp" function (:documentation "Insert the current local time and date.") nil [82717 82949])
            ("put" code nil nil [82966 83018])
            ("texinfo-format-ignore" function nil nil [83019 83150])
            ("put" code nil nil [83152 83206])
            ("put" code nil nil [85728 85796])
            ("texinfo-define-info-enclosure" function nil nil [85797 86208])
            ("put" code nil nil [86224 86267])
            ("texinfo-alias" function nil nil [86268 86671])
            ("put" code nil nil [86705 86751])
            ("put" code nil nil [86815 86860])
            ("put" code nil nil [86985 87035])
            ("texinfo-format-var" function nil nil [87036 87166])
            ("put" code nil nil [87168 87216])
            ("put" code nil nil [87217 87265])
            ("put" code nil nil [87298 87349])
            ("put" code nil nil [87386 87433])
            ("put" code nil nil [87434 87482])
            ("put" code nil nil [87483 87531])
            ("put" code nil nil [87532 87579])
            ("texinfo-format-code" function nil nil [87580 87693])
            ("put" code nil nil [87894 87946])
            ("texinfo-format-option" function (:documentation "Insert \\=` ... \\=' around arg unless inside a table; in that case, no quotes.") nil [87947 88358])
            ("put" code nil nil [88360 88408])
            ("put" code nil nil [88409 88459])
            ("texinfo-format-emph" function nil nil [88460 88573])
            ("put" code nil nil [88575 88622])
            ("put" code nil nil [88623 88671])
            ("texinfo-format-defn" function nil nil [88672 88787])
            ("put" code nil nil [88789 88839])
            ("texinfo-format-email" function (:documentation "Format email address and optional following full name.
Insert full name, if present, followed by email address
surrounded by in angle brackets.") nil [88840 89205])
            ("put" code nil nil [89207 89253])
            ("texinfo-format-key" function nil nil [89323 89427])
            ("put" code nil nil [89486 89534])
            ("texinfo-format-verb" function (:documentation "Format text between non-quoted unique delimiter characters verbatim.
Enclose the verbatim text, including the delimiters, in braces.  Print
text exactly as written (but not the delimiters) in a fixed-width.

For example, @verb{|@|} results in @ and
@verb{+@\\='e?\\=`!\\=`+} results in @\\='e?\\=`!\\=`.") nil [89535 90267])
            ("put" code nil nil [90440 90492])
            ("texinfo-format-bullet" function (:documentation "Insert an asterisk.
If used within a line, follow `@bullet' with braces.") nil [90493 90653])
            ("texinfo-format-kbd-regexp" variable
               (:documentation "Regexp matching environments in which @kbd does not put `...' around arg."
                :default-value (concat "^@" "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)"))
                nil [90846 91076])
            ("texinfo-format-kbd-end-regexp" variable
               (:documentation "Regexp specifying end of environments in which @kbd does not put `...'
around argument. (See `texinfo-format-kbd-regexp')"
                :default-value (concat "^@end " "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)"))
                nil [91078 91364])
            ("put" code nil nil [91366 91412])
            ("texinfo-format-kbd" function (:documentation "Place single quote marks around arg, except in @example and similar.") nil [91413 92649])
            ("put" code nil nil [92742 92796])
            ("put" code nil nil [92797 92856])
            ("put" code nil nil [92857 92911])
            ("put" code nil nil [92912 92963])
            ("put" code nil nil [92964 93020])
            ("put" code nil nil [93021 93080])
            ("put" code nil nil [93081 93137])
            ("texinfo-format-example" function nil nil [93138 93271])
            ("put" code nil nil [93273 93321])
            ("put" code nil nil [93322 93370])
            ("put" code nil nil [93371 93424])
            ("put" code nil nil [93425 93470])
            ("put" code nil nil [93471 93521])
            ("put" code nil nil [93522 93575])
            ("put" code nil nil [93576 93626])
            ("texinfo-end-example" function nil nil [93627 93825])
            ("put" code nil nil [93827 93879])
            ("texinfo-format-exdent" function nil nil [93880 94233])
            ("put" code nil nil [94268 94324])
            ("texinfo-format-direntry" function nil nil [94325 94457])
            ("put" code nil nil [94459 94509])
            ("texinfo-end-direntry" function nil nil [94510 94637])
            ("put" code nil nil [94639 94701])
            ("texinfo-format-dircategory" function nil nil [94702 94955])
            ("put" code nil nil [95081 95135])
            ("put" code nil nil [95136 95190])
            ("put" code nil nil [95522 95577])
            ("put" code nil nil [95578 95638])
            ("put" code nil nil [95639 95697])
            ("texinfo-format-flushleft" function nil nil [95698 95758])
            ("put" code nil nil [95760 95809])
            ("put" code nil nil [95810 95864])
            ("put" code nil nil [95865 95917])
            ("texinfo-end-flushleft" function nil nil [95918 95978])
            ("put" code nil nil [96197 96257])
            ("texinfo-format-flushright" function nil nil [96258 96358])
            ("put" code nil nil [96360 96414])
            ("texinfo-end-flushright" function nil nil [96415 96585])
            ("texinfo-do-flushright" function (:arguments ("from")) nil [96587 96995])
            ("put" code nil nil [97062 97110])
            ("texinfo-format-ctrl" function nil nil [97111 97223])
            ("put" code nil nil [97225 97271])
            ("texinfo-format-TeX" function nil nil [97272 97348])
            ("put" code nil nil [97350 97408])
            ("texinfo-format-copyright" function nil nil [97409 97491])
            ("put" code nil nil [97493 97543])
            ("texinfo-format-minus" function (:documentation "Insert a minus sign.
If used within a line, follow `@minus' with braces.") nil [97544 97703])
            ("put" code nil nil [97705 97753])
            ("texinfo-format-dots" function nil nil [97754 97831])
            ("put" code nil nil [97833 97887])
            ("texinfo-format-enddots" function nil nil [97888 97969])
            ("put" code nil nil [97971 98023])
            ("texinfo-format-pounds" function nil nil [98024 98101])
            ("texinfo-paragraph-indent" variable
               (:documentation "Number of spaces for @refill to indent a paragraph; else to leave as is."
                :default-value "asis")
                nil [98663 98780])
            ("put" code nil nil [98782 98845])
            ("texinfo-paragraphindent" function (:documentation "Specify the number of spaces for @refill to indent a paragraph.
Default is to leave the number of spaces as is.") nil [98847 99180])
            ("put" code nil nil [99182 99234])
            ("texinfo-format-refill" function (:documentation "Refill paragraph.  Also, indent first line as set by @paragraphindent.
Default is to leave paragraph indentation as is.") nil [99235 100966])
            ("put" code nil nil [100968 101017])
            ("texinfo-noindent" function nil nil [101018 101276])
            ("put" code nil nil [101302 101354])
            ("texinfo-format-vindex" function nil nil [101355 101421])
            ("put" code nil nil [101423 101475])
            ("texinfo-format-cindex" function nil nil [101476 101542])
            ("put" code nil nil [101544 101596])
            ("texinfo-format-findex" function nil nil [101597 101663])
            ("put" code nil nil [101665 101717])
            ("texinfo-format-pindex" function nil nil [101718 101784])
            ("put" code nil nil [101786 101838])
            ("texinfo-format-tindex" function nil nil [101839 101905])
            ("put" code nil nil [101907 101959])
            ("texinfo-format-kindex" function nil nil [101960 102026])
            ("texinfo-index" function (:arguments ("indexvar")) nil [102028 102484])
            ("texinfo-indexvar-alist" variable (:default-value '(("cp" . texinfo-cindex) ("fn" . texinfo-findex) ("vr" . texinfo-vindex) ("tp" . texinfo-tindex) ("pg" . texinfo-pindex) ("ky" . texinfo-kindex))) nil [102486 102686])
            ("put" code nil nil [102720 102776])
            ("put" code nil nil [102777 102837])
            ("texinfo-format-defindex" function nil nil [102839 103793])
            ("put" code nil nil [103828 103884])
            ("put" code nil nil [103885 103945])
            ("texinfo-format-synindex" function nil nil [103947 104707])
            ("texinfo-short-index-cmds-alist" variable
               (:constant-flag t
                :default-value '(("cp" . cindex) ("fn" . findex) ("vr" . vindex) ("tp" . tindex) ("pg" . pindex) ("ky" . kindex)))
                nil [104709 104871])
            ("texinfo-short-index-format-cmds-alist" variable
               (:constant-flag t
                :default-value '(("cp" . texinfo-format-cindex) ("fn" . texinfo-format-findex) ("vr" . texinfo-format-vindex) ("tp" . texinfo-format-tindex) ("pg" . texinfo-format-pindex) ("ky" . texinfo-format-kindex)))
                nil [104873 105132])
            ("texinfo-sort-region" function (:arguments ("start" "end")) nil [105227 105439])
            ("texinfo-sort-startkeyfun" function nil nil [105540 105931])
            ("put" code nil nil [105952 106012])
            ("texinfo-format-printindex" function nil nil [106014 106697])
            ("texinfo-print-index" function (:arguments ("file" "indexelts")) nil [106699 107369])
            ("put" code nil nil [107764 107814])
            ("texinfo-format-equiv" function nil nil [107815 107892])
            ("put" code nil nil [107894 107944])
            ("texinfo-format-error" function nil nil [107945 108028])
            ("put" code nil nil [108030 108088])
            ("texinfo-format-expansion" function nil nil [108089 108171])
            ("put" code nil nil [108173 108223])
            ("texinfo-format-point" function nil nil [108224 108302])
            ("put" code nil nil [108304 108354])
            ("texinfo-format-print" function nil nil [108355 108432])
            ("put" code nil nil [108434 108486])
            ("texinfo-format-result" function nil nil [108487 108565])
            ("put" code nil nil [112257 112317])
            ("texinfo-format-French-OE-ligature" function nil nil [112318 112444])
            ("put" code nil nil [112475 112535])
            ("texinfo-format-French-oe-ligature" function nil nil [112536 112676])
            ("put" code nil nil [112741 112809])
            ("texinfo-format-Scandinavian-A-with-circle" function nil nil [112810 112944])
            ("put" code nil nil [112975 113043])
            ("texinfo-format-Scandinavian-a-with-circle" function nil nil [113044 113192])
            ("put" code nil nil [113252 113315])
            ("texinfo-format-Latin-Scandinavian-AE" function nil nil [113316 113445])
            ("put" code nil nil [113476 113539])
            ("texinfo-format-Latin-Scandinavian-ae" function nil nil [113540 113684])
            ("put" code nil nil [113737 113793])
            ("texinfo-format-German-sharp-S" function nil nil [113794 113916])
            ("put" code nil nil [113980 114057])
            ("texinfo-format-upside-down-question-mark" function nil nil [114058 114190])
            ("put" code nil nil [114257 114335])
            ("texinfo-format-upside-down-exclamation-mark" function nil nil [114336 114471])
            ("put" code nil nil [114538 114598])
            ("texinfo-format-Polish-suppressed-L" function nil nil [114599 114726])
            ("put" code nil nil [114806 114877])
            ("texinfo-format-Polish-suppressed-l-lower-case" function nil nil [114878 115016])
            ("put" code nil nil [115081 115147])
            ("texinfo-format-Scandinavian-O-with-slash" function nil nil [115148 115281])
            ("put" code nil nil [115358 115435])
            ("texinfo-format-Scandinavian-o-with-slash-lower-case" function nil nil [115436 115580])
            ("put" code nil nil [115652 115708])
            ("texinfo-format-cedilla-accent" function nil nil [115709 115829])
            ("put" code nil nil [115883 115946])
            ("texinfo-format-overdot-accent" function nil nil [115947 116067])
            ("put" code nil nil [116121 116186])
            ("texinfo-format-underbar-accent" function nil nil [116187 116309])
            ("put" code nil nil [116363 116428])
            ("texinfo-format-underdot-accent" function nil nil [116429 116552])
            ("put" code nil nil [116612 116674])
            ("texinfo-format-long-Hungarian-umlaut" function nil nil [116675 116806])
            ("put" code nil nil [116856 116917])
            ("texinfo-format-ring-accent" function nil nil [116918 117036])
            ("put" code nil nil [117091 117156])
            ("texinfo-format-tie-after-accent" function nil nil [117157 117280])
            ("put" code nil nil [117332 117385])
            ("texinfo-format-breve-accent" function nil nil [117386 117505])
            ("put" code nil nil [117556 117609])
            ("texinfo-format-hacek-accent" function nil nil [117610 117729])
            ("put" code nil nil [117792 117846])
            ("texinfo-format-dotless" function nil nil [117847 117958])
            ("texinfo-format-defun" function nil nil [119984 120117])
            ("texinfo-end-defun" function nil nil [120119 120417])
            ("texinfo-format-defunx" function nil nil [120419 120482])
            ("texinfo-format-defun-1" function (:arguments ("first-p")) nil [120484 121148])
            ("put" code nil nil [121223 121292])
            ("put" code nil nil [121293 121363])
            ("put" code nil nil [121364 121433])
            ("put" code nil nil [121434 121504])
            ("put" code nil nil [121505 121574])
            ("put" code nil nil [121575 121645])
            ("texinfo-format-deffn" function (:arguments ("parsed-args")) nil [121646 122360])
            ("put" code nil nil [122430 122516])
            ("put" code nil nil [122517 122604])
            ("put" code nil nil [122605 122692])
            ("put" code nil nil [122693 122781])
            ("put" code nil nil [122782 122870])
            ("put" code nil nil [122871 122960])
            ("put" code nil nil [122961 123048])
            ("put" code nil nil [123049 123137])
            ("put" code nil nil [123138 123225])
            ("put" code nil nil [123226 123314])
            ("texinfo-format-specialized-defun" function (:arguments ("parsed-args")) nil [123315 123997])
            ("put" code nil nil [124044 124121])
            ("put" code nil nil [124122 124200])
            ("put" code nil nil [124201 124278])
            ("put" code nil nil [124279 124357])
            ("texinfo-format-deftypefn" function (:arguments ("parsed-args")) nil [124358 125026])
            ("put" code nil nil [125075 125154])
            ("put" code nil nil [125155 125240])
            ("put" code nil nil [125241 125320])
            ("put" code nil nil [125321 125406])
            ("texinfo-format-deftypefun" function (:arguments ("parsed-args")) nil [125407 126111])
            ("put" code nil nil [126152 126221])
            ("put" code nil nil [126222 126292])
            ("texinfo-format-defop" function (:arguments ("parsed-args")) nil [126293 126813])
            ("put" code nil nil [126854 126923])
            ("put" code nil nil [126924 126994])
            ("texinfo-format-defcv" function (:arguments ("parsed-args")) nil [126995 127503])
            ("put" code nil nil [127548 127625])
            ("put" code nil nil [127626 127704])
            ("texinfo-format-defmethod" function (:arguments ("parsed-args")) nil [127705 128278])
            ("put" code nil nil [128321 128394])
            ("put" code nil nil [128395 128469])
            ("texinfo-format-defivar" function (:arguments ("parsed-args")) nil [128470 129037])
            ("put" code nil nil [130044 130110])
            ("put" code nil nil [130111 130178])
            ("put" code nil nil [130179 130246])
            ("put" code nil nil [130247 130315])
            ("put" code nil nil [130316 130384])
            ("put" code nil nil [130385 130454])
            ("put" code nil nil [130455 130522])
            ("put" code nil nil [130523 130591])
            ("put" code nil nil [130592 130660])
            ("put" code nil nil [130661 130730])
            ("texinfo-index-defun" function (:arguments ("parsed-args")) nil [130731 131336])
            ("put" code nil nil [131338 131404])
            ("put" code nil nil [131405 131472])
            ("put" code nil nil [131473 131539])
            ("put" code nil nil [131540 131607])
            ("put" code nil nil [131608 131674])
            ("put" code nil nil [131675 131742])
            ("put" code nil nil [131743 131814])
            ("put" code nil nil [131815 131887])
            ("put" code nil nil [131888 131959])
            ("put" code nil nil [131960 132032])
            ("texinfo-index-deffn" function (:arguments ("parsed-args")) nil [132033 132643])
            ("put" code nil nil [132645 132719])
            ("put" code nil nil [132720 132795])
            ("put" code nil nil [132796 132870])
            ("put" code nil nil [132871 132946])
            ("texinfo-index-deftypefn" function (:arguments ("parsed-args")) nil [132947 133568])
            ("put" code nil nil [133570 133644])
            ("put" code nil nil [133645 133720])
            ("texinfo-index-defmethod" function (:arguments ("parsed-args")) nil [133721 134419])
            ("put" code nil nil [134421 134487])
            ("put" code nil nil [134488 134555])
            ("texinfo-index-defop" function (:arguments ("parsed-args")) nil [134556 135262])
            ("put" code nil nil [135264 135334])
            ("put" code nil nil [135335 135406])
            ("texinfo-index-defivar" function (:arguments ("parsed-args")) nil [135407 136103])
            ("put" code nil nil [136105 136171])
            ("put" code nil nil [136172 136239])
            ("texinfo-index-defcv" function (:arguments ("parsed-args")) nil [136240 136946])
            ("put" code nil nil [137695 137745])
            ("put" code nil nil [137746 137798])
            ("put" code nil nil [137799 137843])
            ("put" code nil nil [137844 137895])
            ("put" code nil nil [137896 137948])
            ("put" code nil nil [137949 137998])
            ("put" code nil nil [137999 138049])
            ("put" code nil nil [138051 138101])
            ("put" code nil nil [138102 138154])
            ("put" code nil nil [138155 138199])
            ("put" code nil nil [138200 138258])
            ("put" code nil nil [138259 138318])
            ("put" code nil nil [138319 138368])
            ("put" code nil nil [138369 138419])
            ("put" code nil nil [138421 138472])
            ("put" code nil nil [138473 138526])
            ("put" code nil nil [138527 138572])
            ("put" code nil nil [138573 138629])
            ("put" code nil nil [138630 138687])
            ("put" code nil nil [138688 138738])
            ("put" code nil nil [138739 138790])
            ("put" code nil nil [138792 138844])
            ("put" code nil nil [138845 138899])
            ("put" code nil nil [138900 138946])
            ("put" code nil nil [138947 139011])
            ("put" code nil nil [139012 139077])
            ("put" code nil nil [139078 139129])
            ("put" code nil nil [139130 139182])
            ("put" code nil nil [139184 139234])
            ("put" code nil nil [139235 139287])
            ("put" code nil nil [139288 139332])
            ("put" code nil nil [139333 139384])
            ("put" code nil nil [139385 139437])
            ("put" code nil nil [139438 139487])
            ("put" code nil nil [139488 139538])
            ("put" code nil nil [139540 139591])
            ("put" code nil nil [139592 139645])
            ("put" code nil nil [139646 139691])
            ("put" code nil nil [139692 139751])
            ("put" code nil nil [139752 139812])
            ("put" code nil nil [139813 139863])
            ("put" code nil nil [139864 139915])
            ("put" code nil nil [139917 139970])
            ("put" code nil nil [139971 140026])
            ("put" code nil nil [140027 140074])
            ("put" code nil nil [140075 140136])
            ("put" code nil nil [140137 140199])
            ("put" code nil nil [140200 140252])
            ("put" code nil nil [140253 140306])
            ("put" code nil nil [140308 140359])
            ("put" code nil nil [140360 140413])
            ("put" code nil nil [140414 140459])
            ("put" code nil nil [140460 140518])
            ("put" code nil nil [140519 140578])
            ("put" code nil nil [140579 140629])
            ("put" code nil nil [140630 140681])
            ("put" code nil nil [140683 140734])
            ("put" code nil nil [140735 140788])
            ("put" code nil nil [140789 140834])
            ("put" code nil nil [140835 140897])
            ("put" code nil nil [140898 140961])
            ("put" code nil nil [140962 141012])
            ("put" code nil nil [141013 141064])
            ("put" code nil nil [141066 141116])
            ("put" code nil nil [141117 141169])
            ("put" code nil nil [141170 141214])
            ("put" code nil nil [141215 141266])
            ("put" code nil nil [141267 141319])
            ("put" code nil nil [141320 141369])
            ("put" code nil nil [141370 141420])
            ("put" code nil nil [141470 141520])
            ("put" code nil nil [141521 141573])
            ("put" code nil nil [141574 141618])
            ("put" code nil nil [141619 141670])
            ("put" code nil nil [141671 141723])
            ("put" code nil nil [141724 141773])
            ("put" code nil nil [141774 141824])
            ("put" code nil nil [141826 141880])
            ("put" code nil nil [141881 141937])
            ("put" code nil nil [141938 141986])
            ("put" code nil nil [141987 142051])
            ("put" code nil nil [142052 142117])
            ("put" code nil nil [142118 142171])
            ("put" code nil nil [142172 142226])
            ("put" code nil nil [142228 142278])
            ("put" code nil nil [142279 142331])
            ("put" code nil nil [142332 142376])
            ("put" code nil nil [142377 142428])
            ("put" code nil nil [142429 142481])
            ("put" code nil nil [142482 142531])
            ("put" code nil nil [142532 142582])
            ("put" code nil nil [142584 142636])
            ("put" code nil nil [142637 142691])
            ("put" code nil nil [142692 142738])
            ("put" code nil nil [142739 142812])
            ("put" code nil nil [142813 142887])
            ("put" code nil nil [142888 142939])
            ("put" code nil nil [142940 142992])
            ("put" code nil nil [143029 143083])
            ("put" code nil nil [143084 143140])
            ("put" code nil nil [143141 143189])
            ("put" code nil nil [143190 143249])
            ("put" code nil nil [143250 143310])
            ("put" code nil nil [143311 143364])
            ("put" code nil nil [143365 143419])
            ("put" code nil nil [143421 143476])
            ("put" code nil nil [143477 143534])
            ("put" code nil nil [143535 143584])
            ("put" code nil nil [143585 143653])
            ("put" code nil nil [143654 143723])
            ("put" code nil nil [143724 143778])
            ("put" code nil nil [143779 143834])
            ("put" code nil nil [143836 143890])
            ("put" code nil nil [143891 143947])
            ("put" code nil nil [143948 143996])
            ("put" code nil nil [143997 144056])
            ("put" code nil nil [144057 144117])
            ("put" code nil nil [144118 144171])
            ("put" code nil nil [144172 144226])
            ("put" code nil nil [144228 144283])
            ("put" code nil nil [144284 144341])
            ("put" code nil nil [144342 144391])
            ("put" code nil nil [144392 144460])
            ("put" code nil nil [144461 144530])
            ("put" code nil nil [144531 144585])
            ("put" code nil nil [144586 144641])
            ("put" code nil nil [145334 145377])
            ("texinfo-clear" function (:documentation "Clear the value of the flag.") nil [145378 145675])
            ("put" code nil nil [145677 145716])
            ("texinfo-set" function (:documentation "Set the value of the flag, optionally to a string.
The command  `@set foo This is a string.'
sets flag foo to the value: `This is a string.'
The command  `@value{foo}'  expands to the value.") nil [145717 146259])
            ("put" code nil nil [146261 146304])
            ("texinfo-value" function (:documentation "Insert the string to which the flag is set.
The command  `@set foo This is a string.'
sets flag foo to the value: `This is a string.'
The command  `@value{foo}'  expands to the value.") nil [146305 147117])
            ("put" code nil nil [147119 147169])
            ("put" code nil nil [147170 147214])
            ("texinfo-if-set" function (:documentation "If set, continue formatting; else do not format region up to @end ifset.") nil [147215 147971])
            ("put" code nil nil [147973 148025])
            ("put" code nil nil [148026 148074])
            ("texinfo-if-clear" function (:documentation "If clear, continue formatting; if set, do not format up to @end ifset.") nil [148075 148835])
            ("put" code nil nil [148849 148897])
            ("texinfo-format-ifeq" function (:documentation "If ARG1 and ARG2 caselessly string compare to same string, perform COMMAND.
Otherwise produces no output.

Thus:
        @ifeq{ arg1 , arg1 , @code{foo}} bar

        ==> `foo' bar.
but
        @ifeq{ arg1 , arg2 , @code{foo}} bar

        ==> bar

Note that the Texinfo command and its arguments must be arguments to
the @ifeq command.") nil [148898 150496])
            ("put" code nil nil [151684 151736])
            ("put" code nil nil [154108 154153])
            ("put" code nil nil [154154 154199])
            ("put" code nil nil [154200 154245])
            ("put" code nil nil [154246 154291])
            ("put" code nil nil [154292 154337])
            ("put" code nil nil [154338 154386])
            ("put" code nil nil [154387 154434])
            ("put" code nil nil [154435 154483])
            ("put" code nil nil [154484 154537])
            ("texinfo-format-noop" function nil nil [154538 154643])
            ("put" code nil nil [154704 154771])
            ("texinfo-discard-command-and-arg" function (:documentation "Discard both @-command and its argument in braces.") nil [154772 155019])
            ("put" code nil nil [155146 155194])
            ("put" code nil nil [155195 155249])
            ("put" code nil nil [155250 155303])
            ("put" code nil nil [155304 155361])
            ("put" code nil nil [155362 155417])
            ("put" code nil nil [155418 155471])
            ("put" code nil nil [155472 155525])
            ("put" code nil nil [155526 155581])
            ("put" code nil nil [155582 155637])
            ("put" code nil nil [155638 155693])
            ("put" code nil nil [155694 155749])
            ("put" code nil nil [155808 155864])
            ("put" code nil nil [155865 155927])
            ("put" code nil nil [155928 155991])
            ("put" code nil nil [155992 156049])
            ("put" code nil nil [156050 156110])
            ("put" code nil nil [156111 156174])
            ("put" code nil nil [156175 156245])
            ("put" code nil nil [156246 156306])
            ("put" code nil nil [156307 156372])
            ("put" code nil nil [156373 156441])
            ("put" code nil nil [156442 156501])
            ("put" code nil nil [156502 156563])
            ("put" code nil nil [156878 156943])
            ("put" code nil nil [156945 157004])
            ("put" code nil nil [157005 157069])
            ("put" code nil nil [157070 157134])
            ("put" code nil nil [157135 157207])
            ("put" code nil nil [157208 157267])
            ("put" code nil nil [157269 157354])
            ("put" code nil nil [157355 157445])
            ("put" code nil nil [157447 157510])
            ("put" code nil nil [157511 157570])
            ("put" code nil nil [157571 157639])
            ("put" code nil nil [157640 157709])
            ("put" code nil nil [157710 157780])
            ("put" code nil nil [157781 157841])
            ("put" code nil nil [157843 157914])
            ("put" code nil nil [157915 157986])
            ("texinfo-unsupported" function nil nil [158028 158183])
            ("batch-texinfo-format" function (:documentation "Run `texinfo-format-buffer' on the files remaining on the command line.
Must be used only with -batch, and kills Emacs on completion.
Each file will be processed even if an error occurred previously.
For example, invoke
  \"emacs -batch -l texinfmt -f batch-texinfo-format $docs/ ~/*.texinfo\".") nil [158208 160682])
            ("texinfmt" package nil nil [160722 160741]))          
      :file "texinfmt.el.gz"
      :pointmax 160769
      :fsize 32725
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1e69660"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tex-mode" include nil nil [1070 1089])
            ("declare-function" code nil nil [1091 1134])
            ("declare-function" code nil nil [1135 1185])
            ("declare-function" code nil nil [1186 1232])
            ("declare-function" code nil nil [1233 1299])
            ("declare-function" code nil nil [1300 1355])
            ("declare-function" code nil nil [1356 1397])
            ("declare-function" code nil nil [1398 1448])
            ("declare-function" code nil nil [1449 1494])
            ("outline-heading-alist" variable nil nil [1496 1526])
            ("skeleton-end-newline" variable nil nil [1528 1557])
            ("texinfo" customgroup
               (:documentation "Texinfo Mode."
                :user-visible-flag t)
                nil [1559 1688])
            ("texinfo-open-quote" variable
               (:documentation "String inserted by typing \\[texinfo-insert-quote] to open a quotation."
                :default-value (purecopy "``"))
                nil [1705 1861])
            ("texinfo-close-quote" variable
               (:documentation "String inserted by typing \\[texinfo-insert-quote] to close a quotation."
                :default-value (purecopy "''"))
                nil [1878 2036])
            ("texinfo-mode-hook" variable (:documentation "Normal hook run when entering Texinfo mode.") nil [2038 2197])
            ("makeinfo-region" function
               (:documentation "Make Info file from region of current Texinfo file, and switch to it.

This command does not offer the `next-error' feature since it would
apply to a temporary file, not the original; use the `makeinfo-buffer'
command to gain use of `next-error'."
                :prototype-flag t
                :user-visible-flag t)
                nil [2217 2516])
            ("makeinfo-buffer" function
               (:documentation "Make Info file from current buffer.

Use the \\[next-error] command to move to the next error
(if there are errors)."
                :prototype-flag t
                :user-visible-flag t)
                nil [2518 2688])
            ("kill-compilation" function
               (:documentation "Kill the process made by the \\[compile] command."
                :prototype-flag t
                :user-visible-flag t)
                nil [2690 2792])
            ("makeinfo-recenter-compilation-buffer" function
               (:documentation "Redisplay `*compilation*' buffer so most recent output can be seen.
The last line of the buffer is displayed on
line LINE of the window, or centered if LINE is nil."
                :prototype-flag t
                :user-visible-flag t)
                nil [2794 3032])
            ("texinfo-update-node" function
               (:documentation "Without any prefix argument, update the node in which point is located.
Non-nil argument (prefix, if interactive) means update the nodes in the
marked region.

The functions for creating or updating nodes and menus, and their
keybindings, are:

    `texinfo-update-node' (&optional region-p)    \\[texinfo-update-node]
    `texinfo-every-node-update' ()                \\[texinfo-every-node-update]
    `texinfo-sequential-node-update' (&optional region-p)

    `texinfo-make-menu' (&optional region-p)      \\[texinfo-make-menu]
    `texinfo-all-menus-update' ()                 \\[texinfo-all-menus-update]
    `texinfo-master-menu' ()

    `texinfo-indent-menu-description' (column &optional region-p)

The `texinfo-column-for-description' variable specifies the column to
which menu descriptions are indented. Its default value is 32."
                :prototype-flag t
                :user-visible-flag t)
                nil [3034 3931])
            ("texinfo-every-node-update" function
               (:documentation "Update every node in a Texinfo file."
                :prototype-flag t
                :user-visible-flag t)
                nil [3933 4034])
            ("texinfo-sequential-node-update" function
               (:documentation "Update one node (or many) in a Texinfo file with sequential pointers.

This function causes the `Next' or `Previous' pointer to point to the
immediately preceding or following node, even if it is at a higher or
lower hierarchical level in the document.  Continually pressing `n' or
`p' takes you straight through the file.

Without any prefix argument, update the node in which point is located.
Non-nil argument (prefix, if interactive) means update the nodes in the
marked region.

This command makes it awkward to navigate among sections and
subsections; it should be used only for those documents that are meant
to be read like a novel rather than a reference, and for which the
Info `g*' command is inadequate."
                :prototype-flag t
                :user-visible-flag t)
                nil [4036 4821])
            ("texinfo-make-menu" function
               (:documentation "Without any prefix argument, make or update a menu.
Make the menu for the section enclosing the node found following point.

Non-nil argument (prefix, if interactive) means make or update menus
for nodes within or part of the marked region.

Whenever a menu exists, and is being updated, the descriptions that
are associated with node names in the pre-existing menu are
incorporated into the new menu.  Otherwise, the nodes' section titles
are inserted as descriptions."
                :prototype-flag t
                :user-visible-flag t)
                nil [4823 5349])
            ("texinfo-all-menus-update" function
               (:documentation "Update every regular menu in a Texinfo file.
Remove pre-existing master menu, if there is one.

If called with a non-nil argument, this function first updates all the
nodes in the buffer before updating the menus."
                :prototype-flag t
                :user-visible-flag t)
                nil [5351 5628])
            ("texinfo-master-menu" function
               (:documentation "Make a master menu for a whole Texinfo file.
Non-nil argument (prefix, if interactive) means first update all
existing nodes and menus.  Remove pre-existing master menu, if there is one.

This function creates a master menu that follows the top node.  The
master menu includes every entry from all the other menus.  It
replaces any existing ordinary menu that follows the top node.

If called with a non-nil argument, this function first updates all the
menus in the buffer (incorporating descriptions from pre-existing
menus) before it constructs the master menu.

The function removes the detailed part of an already existing master
menu.  This action depends on the pre-existing master menu using the
standard `texinfo-master-menu-header'.

The master menu has the following format, which is adapted from the
recommendation in the Texinfo Manual:

   * The first part contains the major nodes in the Texinfo file: the
     nodes for the chapters, chapter-like sections, and the major
     appendices.  This includes the indices, so long as they are in
     chapter-like sections, such as unnumbered sections.

   * The second and subsequent parts contain a listing of the other,
     lower level menus, in order.  This way, an inquirer can go
     directly to a particular node if he or she is searching for
     specific information.

Each of the menus in the detailed node listing is introduced by the
title of the section containing the menu."
                :prototype-flag t
                :user-visible-flag t)
                nil [5630 7137])
            ("texinfo-indent-menu-description" function
               (:documentation "Indent every description in menu following point to COLUMN.
Non-nil argument (prefix, if interactive) means indent every
description in every menu in the region.  Does not indent second and
subsequent lines of a multi-line description."
                :prototype-flag t
                :user-visible-flag t)
                nil [7139 7445])
            ("texinfo-insert-node-lines" function
               (:documentation "Insert missing `@node' lines in region of Texinfo file.
Non-nil argument (prefix, if interactive) means also to insert the
section titles as node names; and also to insert the section titles as
node names in pre-existing @node lines that lack names."
                :prototype-flag t
                :user-visible-flag t)
                nil [7447 7761])
            ("texinfo-start-menu-description" function
               (:documentation "In this menu entry, insert the node's section title as a description.
Position point at beginning of description ready for editing.
Do not insert a title if the line contains an existing description.

You will need to edit the inserted text since a useful description
complements the node name rather than repeats it as a title does."
                :prototype-flag t
                :user-visible-flag t)
                nil [7763 8166])
            ("texinfo-multiple-files-update" function
               (:documentation "Update first node pointers in each file included in OUTER-FILE;
create or update main menu in the outer file that refers to such nodes.
This does not create or update menus or pointers within the included files.

With optional MAKE-MASTER-MENU argument (prefix arg, if interactive),
insert a master menu in OUTER-FILE.  This does not create or update
menus or pointers within the included files.

With optional UPDATE-EVERYTHING argument (numeric prefix arg, if
interactive), update all the menus and all the `Next', `Previous', and
`Up' pointers of all the files included in OUTER-FILE before inserting
a master menu in OUTER-FILE.

The command also updates the `Top' level node pointers of OUTER-FILE.

Notes:

  * this command does NOT save any files--you must save the
    outer file and any modified, included files.

  * except for the `Top' node, this command does NOT handle any
    pre-existing nodes in the outer file; hence, indices must be
    enclosed in an included file.

Requirements:

  * each of the included files must contain exactly one highest
    hierarchical level node,
  * this highest node must be the first node in the included file,
  * each highest hierarchical level node must be of the same type.

Thus, normally, each included file contains one, and only one,
chapter."
                :prototype-flag t
                :user-visible-flag t)
                nil [8168 9538])
            ("texinfo-section-list" variable
               (:documentation "Alist of sectioning commands and their relative level."
                :default-value '(("top" 1) ("chapter" 2) ("section" 3) ("subsection" 4) ("subsubsection" 5) ("unnumbered" 2) ("unnumberedsec" 3) ("unnumberedsubsec" 4) ("unnumberedsubsubsec" 5) ("appendix" 2) ("appendixsec" 3) ("appendixsection" 3) ("appendixsubsec" 4) ("appendixsubsubsec" 5) ("majorheading" 2) ("chapheading" 2) ("heading" 3) ("subheading" 4) ("subsubheading" 5)))
                nil [9632 10146])
            ("texinfo-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "." st) (modify-syntax-entry 92 "." st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "(]" st) (modify-syntax-entry 93 ")[" st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 39 "w" st) st)) nil [10166 10616])
            ("texinfo-imenu-generic-expression" variable
               (:documentation "Imenu generic expression for Texinfo mode.  See `imenu-generic-expression'."
                :default-value '((nil "^@\\(node\\|anchor\\)[ 	]+\\([^,
]*\\)" 2) ("Chapters" "^@chapter[ 	]+\\(.*\\)$" 1)))
                nil [10793 11016])
            ("texinfo-syntax-propertize-function" variable
               (:documentation "Syntactic keywords to catch comment delimiters in `texinfo-mode'."
                :constant-flag t
                :default-value (syntax-propertize-rules ("\\(@\\)c\\(omment\\)?\\>" (1 "<")) ("^\\(@\\)ignore\\>" (1 "< b")) ("^@end ignore\\(
\\)" (1 "> b"))))
                nil [11018 11274])
            ("texinfo-environments" variable
               (:documentation "List of Texinfo environments."
                :constant-flag t
                :default-value '("cartouche" "copying" "defcv" "deffn" "defivar" "defmac" "defmethod" "defop" "defopt" "defspec" "deftp" "deftypecv" "deftypefn" "deftypefun" "deftypeivar" "deftypemethod" "deftypeop" "deftypevar" "deftypevr" "defun" "defvar" "defvr" "description" "detailmenu" "direntry" "display" "documentdescription" "enumerate" "example" "flushleft" "flushright" "format" "ftable" "group" "html" "ifclear" "ifset" "ifhtml" "ifinfo" "ifnothtml" "ifnotinfo" "ifnotplaintext" "ifnottex" "ifplaintext" "iftex" "ignore" "itemize" "lisp" "macro" "menu" "multitable" "quotation" "smalldisplay" "smallexample" "smallformat" "smalllisp" "table" "tex" "titlepage" "verbatim" "vtable"))
                nil [11276 12051])
            ("texinfo-environment-regexp" variable
               (:documentation "Regexp for environment-like Texinfo list commands.
Subexpression 1 is what goes into the corresponding `@end' statement."
                :constant-flag t
                :default-value (concat "^@" (regexp-opt (cons "end" texinfo-environments) t) "\\>"))
                nil [12053 12286])
            ("texinfo-heading" variable
               (:documentation "Face used for section headings in `texinfo-mode'."
                :default-value '((t (:inherit font-lock-function-name-face)))
                :type "face")
                nil [12288 12434])
            ("texinfo-font-lock-keywords" variable
               (:documentation "Additional expressions to highlight in Texinfo mode."
                :default-value `(("@\\([a-zA-Z]+\\|[^ 	
]\\)" 1 font-lock-keyword-face) ("^\\*\\([^
:]*\\)" 1 font-lock-function-name-face t) ("@\\(emph\\|i\\|sc\\){\\([^}]+\\)" 2 'italic) ("@\\(strong\\|b\\){\\([^}]+\\)" 2 'bold) ("@\\(kbd\\|key\\|url\\|uref\\){\\([^}]+\\)" 2 font-lock-string-face) ("@\\(file\\|email\\){\\([^}]+\\)" 2 font-lock-string-face keep) ("@\\(samp\\|code\\|var\\|env\\|command\\|option\\){\\([^}]+\\)" 2 font-lock-variable-name-face keep) ("@math{\\([^{}]*{?[^{}]*}?[^{}]*\\)}" 1 font-lock-variable-name-face) ("@\\(cite\\|x?ref\\|pxref\\|dfn\\|inforef\\){\\([^}]+\\)" 2 font-lock-constant-face) ("@\\(anchor\\){\\([^}]+\\)" 2 font-lock-type-face) ("@\\(dmn\\|acronym\\|value\\){\\([^}]+\\)" 2 font-lock-builtin-face) ("@\\(end\\|itemx?\\) +\\(.+\\)" 2 font-lock-keyword-face keep) (,(concat "^@" (regexp-opt (mapcar 'car texinfo-section-list) t) ".*
") 0 'texinfo-heading t)))
                nil [12436 14097])
            ("texinfo-clone-environment" function (:arguments ("start" "end")) nil [14099 14659])
            ("texinfo-define-common-keys" function
               (:documentation "Define the keys both in Texinfo mode and in the texinfo-tex-shell."
                :arguments ("keymap"))
                nil [14736 15461])
            ("texinfo-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (texinfo-define-common-keys map) (define-key map "\"" 'texinfo-insert-quote) (define-key map "" 'kill-compilation) (define-key map "" 'makeinfo-recenter-compilation-buffer) (define-key map "" 'makeinfo-region) (define-key map "" 'makeinfo-buffer) (define-key map "" 'texinfo-format-region) (define-key map "" 'texinfo-format-buffer) (define-key map "" 'texinfo-insert-@item) (define-key map "m" 'texinfo-master-menu) (define-key map "" 'texinfo-make-menu) (define-key map "" 'texinfo-update-node) (define-key map "" 'texinfo-every-node-update) (define-key map "" 'texinfo-all-menus-update) (define-key map "" 'texinfo-show-structure) (define-key map "}" 'up-list) (define-key map "]" 'up-list) (define-key map "/" 'texinfo-insert-@end) (define-key map "{" 'texinfo-insert-braces) (define-key map "" 'texinfo-insert-block) (define-key map "" 'texinfo-start-menu-description) (define-key map "" 'texinfo-insert-@strong) (define-key map "" 'texinfo-insert-@emph) (define-key map "v" 'texinfo-insert-@var) (define-key map "u" 'texinfo-insert-@uref) (define-key map "t" 'texinfo-insert-@table) (define-key map "s" 'texinfo-insert-@samp) (define-key map "q" 'texinfo-insert-@quotation) (define-key map "o" 'texinfo-insert-@noindent) (define-key map "n" 'texinfo-insert-@node) (define-key map "m" 'texinfo-insert-@email) (define-key map "k" 'texinfo-insert-@kbd) (define-key map "i" 'texinfo-insert-@item) (define-key map "f" 'texinfo-insert-@file) (define-key map "x" 'texinfo-insert-@example) (define-key map "e" 'texinfo-insert-@end) (define-key map "d" 'texinfo-insert-@dfn) (define-key map "c" 'texinfo-insert-@code) map)) nil [15574 18134])
            ("easy-menu-define" code nil nil [18136 18940])
            ("texinfo-filter" function (:arguments ("section" "list")) nil [18944 19071])
            ("texinfo-chapter-level-regexp" variable
               (:documentation "Regular expression matching just the Texinfo chapter level headings."
                :default-value (regexp-opt (texinfo-filter 2 texinfo-section-list)))
                nil [19073 19238])
            ("texinfo-current-defun-name" function (:documentation "Return the name of the Texinfo node at point, or nil.") nil [19240 19450])
            ("define-derived-mode" code nil nil [19485 24446])
            ("texinfo-block-default" variable (:default-value "example") nil [24479 24519])
            ("define-skeleton" code nil nil [24521 25074])
            ("texinfo-inside-macro-p" function
               (:documentation "Non-nil if inside a macro matching the regexp MACRO."
                :arguments ("macro" "bound"))
                nil [25076 25485])
            ("texinfo-inside-env-p" function
               (:documentation "Non-nil if inside an environment matching the regexp @ENV."
                :arguments ("env" "bound"))
                nil [25487 25712])
            ("texinfo-enable-quote-macros" variable (:default-value "@\\(code\\|samp\\|kbd\\)\\>") nil [25714 25780])
            ("texinfo-enable-quote-envs" variable (:default-value '("example\\>" "smallexample\\>" "lisp\\>")) nil [25781 25861])
            ("texinfo-insert-quote" function
               (:documentation "Insert the appropriate quote mark for Texinfo.
Usually inserts the value of `texinfo-open-quote' (normally \\=`\\=`) or
`texinfo-close-quote' (normally \\='\\='), depending on the context.
With prefix argument or inside @code or @example, inserts a plain \"."
                :user-visible-flag t
                :arguments ("arg"))
                nil [25862 27029])
            ("texinfo-last-unended-begin" function nil nil [27224 27385])
            ("texinfo-next-unmatched-end" function nil nil [27387 27606])
            ("define-skeleton" code nil nil [27608 27889])
            ("define-skeleton" code nil nil [27891 28063])
            ("define-skeleton" code nil nil [28065 28315])
            ("define-skeleton" code nil nil [28317 28564])
            ("define-skeleton" code nil nil [28566 28819])
            ("define-skeleton" code nil nil [28821 29071])
            ("define-skeleton" code nil nil [29073 29196])
            ("define-skeleton" code nil nil [29198 29448])
            ("define-skeleton" code nil nil [29450 29803])
            ("define-skeleton" code nil nil [29805 30052])
            ("define-skeleton" code nil nil [30054 30328])
            ("define-skeleton" code nil nil [30330 30453])
            ("define-skeleton" code nil nil [30455 30580])
            ("define-skeleton" code nil nil [30582 30832])
            ("define-skeleton" code nil nil [30834 31090])
            ("define-skeleton" code nil nil [31092 31209])
            ("define-skeleton" code nil nil [31211 31455])
            ("define-skeleton" code nil nil [31457 31704])
            ("defalias" code nil nil [31705 31758])
            ("texinfo-show-structure" function
               (:documentation "Show the structure of a Texinfo file.
List the lines in the file that begin with the @-sign commands for
@chapter, @section, and the like.

With optional argument (prefix if interactive), list both the lines
with @-sign commands for @chapter, @section, and the like, and list
@node lines.

Lines with structuring commands beginning in them are displayed in
another buffer named `*Occur*'.  In that buffer, you can move point to
one of those lines and then use
\\<occur-mode-map>\\[occur-mode-goto-occurrence],
to jump to the corresponding spot in the Texinfo source file."
                :user-visible-flag t
                :arguments ("nodes-too"))
                nil [31789 34125])
            ("texinfo-texi2dvi-command" variable
               (:documentation "Command used by `texinfo-tex-buffer' to run TeX and texindex on a buffer."
                :default-value "texi2dvi")
                nil [34178 34337])
            ("texinfo-tex-command" variable
               (:documentation "Command used by `texinfo-tex-region' to run TeX on a region."
                :default-value "tex")
                nil [34339 34475])
            ("texinfo-texindex-command" variable
               (:documentation "Command used by `texinfo-texindex' to sort unsorted index files."
                :default-value "texindex")
                nil [34477 34627])
            ("texinfo-delete-from-print-queue-command" variable
               (:documentation "Command string used to delete a job from the line printer queue.
Command is used by \\[texinfo-delete-from-print-queue] based on
number provided by a previous \\[tex-show-print-queue]
command."
                :default-value "lprm")
                nil [34629 34918])
            ("texinfo-tex-trailer" variable
               (:documentation "String appended after a region sent to TeX by `texinfo-tex-region'."
                :default-value "@bye")
                nil [34920 35027])
            ("texinfo-tex-region" function
               (:documentation "Run TeX on the current region.
This works by writing a temporary file (`tex-zap-file') in the directory
that is the value of `tex-directory', then running TeX on that file.

The first line of the buffer is copied to the
temporary file; and if the buffer has a header, it is written to the
temporary file before the region itself.  The buffer's header is all lines
between the strings defined by `tex-start-of-header' and `tex-end-of-header'
inclusive.  The header must start in the first 100 lines.

The value of `texinfo-tex-trailer' is appended to the temporary file after the region."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [35029 35802])
            ("texinfo-tex-buffer" function
               (:documentation "Run TeX on visited file, once or twice, to make a correct `.dvi' file."
                :user-visible-flag t)
                nil [35804 36141])
            ("texinfo-texindex" function
               (:documentation "Run `texindex' on unsorted index files.
The index files are made by \\[texinfo-tex-region] or \\[texinfo-tex-buffer].
This runs the shell command defined by `texinfo-texindex-command'."
                :user-visible-flag t)
                nil [36143 36662])
            ("texinfo-tex-print" function
               (:documentation "Print `.dvi' file made by \\[texinfo-tex-region] or \\[texinfo-tex-buffer].
This runs the shell command defined by `tex-dvi-print-command'."
                :user-visible-flag t)
                nil [36664 36888])
            ("texinfo-tex-view" function
               (:documentation "View `.dvi' file made by \\[texinfo-tex-region] or \\[texinfo-tex-buffer].
This runs the shell command defined by `tex-dvi-view-command'."
                :user-visible-flag t)
                nil [36890 37110])
            ("texinfo-quit-job" function
               (:documentation "Quit currently running TeX job, by sending an `x' to it."
                :user-visible-flag t)
                nil [37112 37317])
            ("texinfo-delete-from-print-queue" function
               (:documentation "Delete job from the line printer spooling queue.
You are prompted for the job number (use a number shown by a previous
\\[tex-show-print-queue] command)."
                :user-visible-flag t
                :arguments ("job-number"))
                nil [37472 38127])
            ("texinfo" package nil nil [38129 38147]))          
      :file "texinfo.el.gz"
      :pointmax 38174
      :fsize 11115
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1089 . 1090) (symbol 1052 . 1069) (open-paren 1051 . 1052)))
    (semanticdb-table "semanticdb-table-1883090"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("regexp-opt" include nil nil [32165 32186])
            ("quail-translating" variable nil nil [32283 32309])
            ("quail-converting" variable nil nil [32310 32335])
            ("flyspell-mode" variable nil nil [32336 32358])
            ("real-last-command" variable nil nil [32359 32385])
            ("delete-selection-mode" variable nil nil [32386 32416])
            ("table" customgroup
               (:documentation "Text based table manipulation utilities."
                :user-visible-flag t)
                nil [32775 32907])
            ("table-hooks" customgroup
               (:documentation "Hooks for table manipulation utilities."
                :user-visible-flag t)
                nil [32909 32995])
            ("table-time-before-update" variable
               (:documentation "Time in seconds before updating the cell contents after typing.
Updating the cell contents on the screen takes place only after this
specified amount of time has passed after the last modification to the
cell contents.  When the contents of a table cell changes repetitively
and frequently the updating the cell contents on the screen is
deferred until at least this specified amount of quiet time passes.  A
smaller number wastes more computation resource by unnecessarily
frequent screen update.  A large number presents noticeable and
annoying delay before the typed result start appearing on the screen."
                :default-value 0.2)
                nil [32997 33714])
            ("table-time-before-reformat" variable
               (:documentation "Time in seconds before reformatting the table.
This many seconds must pass in addition to `table-time-before-update'
before the table is updated with newly widened width or heightened
height."
                :default-value 0.2)
                nil [33716 34021])
            ("table-command-prefix" variable
               (:documentation "Key sequence to be used as prefix for table command key bindings."
                :default-value [(control c) (control c)])
                nil [34023 34239])
            ("table-cell" variable
               (:documentation "Face used for table cell contents."
                :default-value '((((min-colors 88) (class color)) :foreground "gray90" :background "blue1") (((class color)) :foreground "gray90" :background "blue") (t :weight bold))
                :type "face")
                nil [34241 34498])
            ("table-cell-horizontal-chars" variable
               (:documentation "Characters that may be used for table cell's horizontal border line."
                :default-value "-=")
                nil [34500 34694])
            ("table-cell-vertical-char" variable
               (:documentation "Character that forms table cell's vertical border line."
                :default-value 124)
                nil [34696 34873])
            ("table-cell-intersection-char" variable
               (:documentation "Character that forms table cell's corner."
                :default-value 43)
                nil [34875 35037])
            ("table-word-continuation-char" variable
               (:documentation "Character that indicates word continuation into the next line.
This character has a special meaning only in the fixed width mode,
that is when `table-fixed-width-mode' is non-nil .  In the fixed width
mode this character indicates that the location is continuing into the
next line.  Be careful about the choice of this character.  It is
treated substantially different manner than ordinary characters.  Try
select a character that is unlikely to appear in your document."
                :default-value 92)
                nil [35039 35636])
            ("table-detect-cell-alignment" variable
               (:documentation "Detect cell contents alignment automatically.
When non-nil cell alignment is automatically determined by the
appearance of the current cell contents when recognizing tables as a
whole.  This applies to `table-recognize', `table-recognize-region'
and `table-recognize-table' but not to `table-recognize-cell'."
                :default-value t)
                nil [35638 36056])
            ("table-dest-buffer-name" variable
               (:documentation "Default buffer name (without a suffix) for source generation."
                :default-value "table")
                nil [36058 36226])
            ("table-html-delegate-spacing-to-user-agent" variable (:documentation "Non-nil delegates cell contents spacing entirely to user agent.
Otherwise, when nil, it preserves the original spacing and line breaks.") nil [36228 36489])
            ("table-html-th-rows" variable (:documentation "Number of top rows to become header cells automatically in HTML generation.") nil [36491 36662])
            ("table-html-th-columns" variable (:documentation "Number of left columns to become header cells automatically in HTML generation.") nil [36664 36845])
            ("table-html-table-attribute" variable
               (:documentation "Table attribute that applies to the table in HTML generation."
                :default-value "border=\"1\"")
                nil [36847 37028])
            ("table-html-cell-attribute" variable (:documentation "Cell attribute that applies to all cells in HTML generation.
Do not specify \"align\" and \"valign\" because they are determined by
the cell contents dynamically.") nil [37030 37298])
            ("table-cals-thead-rows" variable
               (:documentation "Number of top rows to become header rows in CALS table."
                :default-value 1)
                nil [37300 37454])
            ("table-cell-map-hook" variable (:documentation "Normal hooks run when finishing construction of `table-cell-map'.
User can modify `table-cell-map' by adding custom functions here.") nil [37456 37690])
            ("table-disable-incompatibility-warning" variable (:documentation "Disable compatibility warning notice.
When nil user is reminded of known incompatible issues.") nil [37692 37917])
            ("table-abort-recognition-when-input-pending" variable
               (:documentation "Abort current recognition process when input pending.
Abort current recognition process when we are not sure that no input
is available.  When non-nil lengthy recognition process is aborted
simply by any key input."
                :default-value t)
                nil [37919 38273])
            ("table-load-hook" variable (:documentation "List of functions to be called after the table is first loaded.") nil [38275 38410])
            ("table-point-entered-cell-hook" variable (:documentation "List of functions to be called after point entered a table cell.") nil [38412 38562])
            ("table-point-left-cell-hook" variable (:documentation "List of functions to be called after point left a table cell.") nil [38564 38708])
            ("table-yank-handler" variable
               (:documentation "Yank handler for tables."
                :default-value '(nil nil t nil))
                nil [38710 38783])
            ("setplist" code nil nil [38785 38838])
            ("table-disable-menu" variable
               (:documentation "When non-nil, use of menu by table package is disabled.
It must be set before loading this package `table.el' for the first
time."
                :default-value (null (and (locate-library "easymenu") (require 'easymenu) (fboundp 'easy-menu-add-item))))
                nil [38840 39112])
            ("table-paragraph-start" variable
               (:documentation "Regexp for beginning of a line that starts OR separates paragraphs."
                :constant-flag t
                :default-value "[ 	
]")
                nil [39255 39371])
            ("table-cache-buffer-name" variable
               (:documentation "Cell cache buffer name."
                :constant-flag t
                :default-value " *table cell cache*")
                nil [39372 39456])
            ("table-cell-info-lu-coordinate" variable (:documentation "Zero based coordinate of the cached cell's left upper corner.") nil [39457 39565])
            ("table-cell-info-rb-coordinate" variable (:documentation "Zero based coordinate of the cached cell's right bottom corner.") nil [39566 39676])
            ("table-cell-info-width" variable (:documentation "Number of characters per cached cell width.") nil [39677 39759])
            ("table-cell-info-height" variable (:documentation "Number of lines per cached cell height.") nil [39760 39839])
            ("table-cell-info-justify" variable (:documentation "Justification information of the cached cell.") nil [39840 39926])
            ("table-cell-info-valign" variable (:documentation "Vertical alignment information of the cached cell.") nil [39927 40017])
            ("table-cell-self-insert-command-count" variable (:documentation "Counter for undo control.") nil [40018 40095])
            ("table-cell-map" variable (:documentation "Keymap for table cell contents.") nil [40096 40159])
            ("table-cell-global-map-alist" variable (:documentation "Alist of copy of global maps that are substituted in `table-cell-map'.") nil [40160 40275])
            ("table-global-menu-map" variable (:documentation "Menu map created via `easy-menu-define'.") nil [40276 40355])
            ("table-cell-menu-map" variable (:documentation "Menu map created via `easy-menu-define'.") nil [40356 40433])
            ("table-cell-buffer" variable (:documentation "Buffer that contains the table cell.") nil [40434 40505])
            ("table-cell-cache-point-coordinate" variable (:documentation "Cache point coordinate based from the cell origin.") nil [40506 40607])
            ("table-cell-cache-mark-coordinate" variable (:documentation "Cache mark coordinate based from the cell origin.") nil [40608 40707])
            ("table-update-timer" variable (:documentation "Timer id for deferred cell update.") nil [40708 40778])
            ("table-widen-timer" variable (:documentation "Timer id for deferred cell update.") nil [40779 40848])
            ("table-heighten-timer" variable (:documentation "Timer id for deferred cell update.") nil [40849 40921])
            ("table-inhibit-update" variable (:documentation "Non-nil inhibits implicit cell and cache updates.
It inhibits `table-with-cache-buffer' to update data in both direction, cell to cache and cache to cell.") nil [40922 41114])
            ("table-inhibit-auto-fill-paragraph" variable (:documentation "Non-nil inhibits auto fill paragraph when `table-with-cache-buffer' exits.
This is always set to nil at the entry to `table-with-cache-buffer' before executing body forms.") nil [41115 41337])
            ("table-mode-indicator" variable (:documentation "For mode line indicator") nil [41338 41399])
            ("make-variable-buffer-local" code nil nil [41529 41579])
            ("unless" code nil nil [41580 41740])
            ("table-source-languages" variable
               (:documentation "Supported source languages."
                :constant-flag t
                :default-value '(html latex cals))
                nil [41742 41826])
            ("table-source-info-plist" variable (:documentation "General storage for temporary information used while generating source.") nil [41827 41939])
            ("table-cell-span-direction-history" variable (:default-value '("right")) nil [42344 42397])
            ("table-cell-split-orientation-history" variable (:default-value '("horizontally")) nil [42398 42461])
            ("table-cell-split-contents-to-history" variable (:default-value '("split")) nil [42462 42518])
            ("table-insert-row-column-history" variable (:default-value '("row")) nil [42519 42568])
            ("table-justify-history" variable (:default-value '("center")) nil [42569 42611])
            ("table-columns-history" variable (:default-value '("3")) nil [42612 42649])
            ("table-rows-history" variable (:default-value '("3")) nil [42650 42684])
            ("table-cell-width-history" variable (:default-value '("5")) nil [42685 42725])
            ("table-cell-height-history" variable (:default-value '("1")) nil [42726 42767])
            ("table-source-caption-history" variable (:default-value '("Table")) nil [42768 42816])
            ("table-sequence-string-history" variable (:default-value '("0")) nil [42817 42862])
            ("table-sequence-count-history" variable (:default-value '("0")) nil [42863 42907])
            ("table-sequence-increment-history" variable (:default-value '("1")) nil [42908 42956])
            ("table-sequence-interval-history" variable (:default-value '("1")) nil [42957 43004])
            ("table-sequence-justify-history" variable (:default-value '("left")) nil [43005 43054])
            ("table-source-language-history" variable (:default-value '("html")) nil [43055 43103])
            ("table-col-delim-regexp-history" variable (:default-value '("")) nil [43104 43149])
            ("table-row-delim-regexp-history" variable (:default-value '("")) nil [43150 43195])
            ("table-capture-justify-history" variable (:default-value '("left")) nil [43196 43244])
            ("table-capture-min-cell-width-history" variable (:default-value '("5")) nil [43245 43297])
            ("table-capture-columns-history" variable (:default-value '("")) nil [43298 43342])
            ("table-target-history" variable (:default-value '("cell")) nil [43343 43382])
            ("table-cell-bindings" variable
               (:documentation "Bindings for table cell commands."
                :constant-flag t
                :default-value '(([(control i)] . table-forward-cell) ([(control I)] . table-backward-cell) ([tab] . table-forward-cell) ([(shift backtab)] . table-backward-cell) ([(shift iso-lefttab)] . table-backward-cell) ([(shift tab)] . table-backward-cell) ([backtab] . table-backward-cell) ([return] . *table--cell-newline) ([(control m)] . *table--cell-newline) ([(control j)] . *table--cell-newline-and-indent) ([mouse-3] . *table--present-cell-popup-menu) ([(control 62)] . table-widen-cell) ([(control 60)] . table-narrow-cell) ([(control 125)] . table-heighten-cell) ([(control 123)] . table-shorten-cell) ([(control 45)] . table-split-cell-vertically) ([(control 124)] . table-split-cell-horizontally) ([(control 42)] . table-span-cell) ([(control 43)] . table-insert-row-column) ([(control 33)] . table-fixed-width-mode) ([(control 35)] . table-query-dimension) ([(control 94)] . table-generate-source) ([(control 58)] . table-justify)))
                nil [44188 45402])
            ("table-command-remap-alist" variable
               (:documentation "List of cons cells consisting of (ORIGINAL-COMMAND . TABLE-VERSION-OF-THE-COMMAND)."
                :default-value '((self-insert-command . *table--cell-self-insert-command) (completion-separator-self-insert-autofilling . *table--cell-self-insert-command) (completion-separator-self-insert-command . *table--cell-self-insert-command) (delete-char . *table--cell-delete-char) (delete-backward-char . *table--cell-delete-backward-char) (backward-delete-char . *table--cell-delete-backward-char) (backward-delete-char-untabify . *table--cell-delete-backward-char) (newline . *table--cell-newline) (newline-and-indent . *table--cell-newline-and-indent) (open-line . *table--cell-open-line) (quoted-insert . *table--cell-quoted-insert) (describe-mode . *table--cell-describe-mode) (describe-bindings . *table--cell-describe-bindings) (dabbrev-expand . *table--cell-dabbrev-expand) (dabbrev-completion . *table--cell-dabbrev-completion)))
                nil [45404 46401])
            ("table-command-list" variable
               (:documentation "List of commands that override original commands."
                :default-value (mapcar #'cdr table-command-remap-alist))
                nil [46403 46589])
            ("table-global-menu" variable
               (:constant-flag t
                :default-value '("Table" ("Insert" ["a Table..." table-insert :active (and (not buffer-read-only) (not (table--probe-cell))) :help "Insert a text based table at point"] ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p 'column) :help "Insert column(s) of cells in table"]) "----" ("Recognize" ["in Buffer" table-recognize :active t :help "Recognize all tables in the current buffer"] ["in Region" table-recognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Recognize all tables in the current region"] ["a Table" table-recognize-table :active (table--probe-cell) :help "Recognize a table at point"] ["a Cell" table-recognize-cell :active (let ((cell (table--probe-cell))) (and cell (null (table--at-cell-p (car cell))))) :help "Recognize a cell at point"]) ("Unrecognize" ["in Buffer" table-unrecognize :active t :help "Unrecognize all tables in the current buffer"] ["in Region" table-unrecognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Unrecognize all tables in the current region"] ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) "----" ["Capture Region" table-capture :active (and (not buffer-read-only) mark-active (not (eq (mark t) (point))) (not (table--probe-cell))) :help "Capture text in the current region as a table"] ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"]))
                nil [46591 48581])
            ("table-cell-menu" variable
               (:constant-flag t
                :default-value '("Table" ("Insert" ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p 'column) :help "Insert column(s) of cells in table"]) ("Delete" ["Row" table-delete-row :active (table--editable-cell-p) :help "Delete row(s) of cells in table"] ["Column" table-delete-column :active (table--editable-cell-p) :help "Delete column(s) of cells in table"]) "----" ("Split a Cell" ["Horizontally" table-split-cell-horizontally :active (table--cell-can-split-horizontally-p) :help "Split the current cell horizontally at point"] ["Vertically" table-split-cell-vertically :active (table--cell-can-split-vertically-p) :help "Split the current cell vertical at point"]) ("Span a Cell to" ["Right" (table-span-cell 'right) :active (table--cell-can-span-p 'right) :help "Span the current cell into the right cell"] ["Left" (table-span-cell 'left) :active (table--cell-can-span-p 'left) :help "Span the current cell into the left cell"] ["Above" (table-span-cell 'above) :active (table--cell-can-span-p 'above) :help "Span the current cell into the cell above"] ["Below" (table-span-cell 'below) :active (table--cell-can-span-p 'below) :help "Span the current cell into the cell below"]) "----" ("Shrink Cells" ["Horizontally" table-narrow-cell :active (table--editable-cell-p) :help "Shrink the current cell horizontally"] ["Vertically" table-shorten-cell :active (table--editable-cell-p) :help "Shrink the current cell vertically"]) ("Expand Cells" ["Horizontally" table-widen-cell :active (table--editable-cell-p) :help "Expand the current cell horizontally"] ["Vertically" table-heighten-cell :active (table--editable-cell-p) :help "Expand the current cell vertically"]) "----" ("Justify" ("a Cell" ["Left" (table-justify-cell 'left) :active (table--editable-cell-p) :help "Left justify the contents of the current cell"] ["Center" (table-justify-cell 'center) :active (table--editable-cell-p) :help "Center justify the contents of the current cell"] ["Right" (table-justify-cell 'right) :active (table--editable-cell-p) :help "Right justify the contents of the current cell"] "----" ["Top" (table-justify-cell 'top) :active (table--editable-cell-p) :help "Top align the contents of the current cell"] ["Middle" (table-justify-cell 'middle) :active (table--editable-cell-p) :help "Middle align the contents of the current cell"] ["Bottom" (table-justify-cell 'bottom) :active (table--editable-cell-p) :help "Bottom align the contents of the current cell"] ["None" (table-justify-cell 'none) :active (table--editable-cell-p) :help "Remove vertical alignment from the current cell"]) ("a Row" ["Left" (table-justify-row 'left) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current row"] ["Center" (table-justify-row 'center) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current row"] ["Right" (table-justify-row 'right) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current row"] "----" ["Top" (table-justify-row 'top) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current row"] ["Middle" (table-justify-row 'middle) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current row"] ["Bottom" (table-justify-row 'bottom) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current row"] ["None" (table-justify-cell 'none) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current row"]) ("a Column" ["Left" (table-justify-column 'left) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current column"] ["Center" (table-justify-column 'center) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current column"] ["Right" (table-justify-column 'right) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current column"] "----" ["Top" (table-justify-column 'top) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current column"] ["Middle" (table-justify-column 'middle) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current column"] ["Bottom" (table-justify-column 'bottom) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current column"] ["None" (table-justify-cell 'none) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current column"]) ("a Paragraph" ["Left" (table-justify-cell 'left t) :active (table--editable-cell-p) :help "Left justify the current paragraph"] ["Center" (table-justify-cell 'center t) :active (table--editable-cell-p) :help "Center justify the current paragraph"] ["Right" (table-justify-cell 'right t) :active (table--editable-cell-p) :help "Right justify the current paragraph"])) "----" ["Query Dimension" table-query-dimension :active (table--probe-cell) :help "Get the dimension of the current cell and the current table"] ["Generate Source" table-generate-source :active (table--probe-cell) :help "Generate source of the current table in the specified language"] ["Insert Sequence" table-insert-sequence :active (table--editable-cell-p) :help "Travel cells forward while inserting a specified sequence string in each cell"] ("Unrecognize" ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"] ("Configure Width to" ["Auto Expand Mode" (table-fixed-width-mode -1) :active t :style radio :selected (not table-fixed-width-mode) :help "A mode that allows automatic horizontal cell expansion"] ["Fixed Width Mode" (table-fixed-width-mode 1) :active t :style radio :selected table-fixed-width-mode :help "A mode that does not allow automatic horizontal cell expansion"]) ("Navigate" ["Forward Cell" table-forward-cell :active (table--probe-cell) :help "Move point forward by cell(s)"] ["Backward Cell" table-backward-cell :active (table--probe-cell) :help "Move point backward by cell(s)"])))
                nil [48583 56080])
            ("when" code nil nil [56563 57032])
            ("unless" code nil nil [57081 57455])
            ("table-with-cache-buffer" function
               (:documentation "Execute the forms in BODY with table cache buffer as the current buffer.
This macro simplifies the rest of the work greatly by condensing the
common idiom used in many of the cell manipulation functions.  It does
not return any meaningful value.

Save the current buffer and set the cache buffer as the current
buffer.  Move the point to the cache buffer coordinate
`table-cell-cache-point-coordinate'.  After BODY forms are executed,
the paragraph is filled as long as `table-inhibit-auto-fill-paragraph'
remains nil.  BODY can set it to t when it does not want to fill the
paragraph.  If necessary the cell width and height are extended as the
consequence of cell content modification by the BODY.  Then the
current buffer is restored to the original one.  The last cache point
coordinate is stored in `table-cell-cache-point-coordinate'.  The
original buffer's point is moved to the location that corresponds to
the last cache point coordinate."
                :arguments ("body"))
                nil [57512 61485])
            ("if" code nil nil [61486 61673])
            ("table-put-source-info" function
               (:documentation "Register source generation information."
                :arguments ("prop" "value"))
                nil [61675 61811])
            ("table-get-source-info" function
               (:documentation "Retrieve source generation information."
                :arguments ("prop"))
                nil [61813 61936])
            ("dolist" code nil nil [62053 63030])
            ("dolist" code nil nil [63052 64067])
            ("dolist" code nil nil [64086 64927])
            ("dolist" code nil nil [64949 65740])
            ("table-insert" function
               (:documentation "Insert an editable text table.
Insert a table of specified number of COLUMNS and ROWS.  Optional
parameter CELL-WIDTH and CELL-HEIGHT can specify the size of each
cell.  The cell size is uniform across the table if the specified size
is a number.  They can be a list of numbers to specify different size
for each cell.  When called interactively, the list of number is
entered by simply listing all the numbers with space characters
delimiting them.

Examples:

\\[table-insert] inserts a table at the current point location.

Suppose we have the following situation where `-!-' indicates the
location of point.

    -!-

Type \\[table-insert] and hit ENTER key.  As it asks table
specification, provide 3 for number of columns, 1 for number of rows,
5 for cell width and 1 for cell height.  Now you shall see the next
table and the point is automatically moved to the beginning of the
first cell.

    +-----+-----+-----+
    |-!-  |     |     |
    +-----+-----+-----+

Inside a table cell, there are special key bindings. \\<table-cell-map>

M-9 \\[table-widen-cell] (or \\[universal-argument] 9 \\[table-widen-cell]) widens the first cell by 9 character
width, which results as

    +--------------+-----+-----+
    |-!-           |     |     |
    +--------------+-----+-----+

Type TAB \\[table-widen-cell] then type TAB M-2 M-7 \\[table-widen-cell] (or \\[universal-argument] 2 7 \\[table-widen-cell]).  Typing
TAB moves the point forward by a cell. The result now looks like this:

    +--------------+------+--------------------------------+
    |              |      |-!-                             |
    +--------------+------+--------------------------------+

If you knew each width of the columns prior to the table creation,
what you could have done better was to have had given the complete
width information to `table-insert'.

Cell width(s): 14 6 32

instead of

Cell width(s): 5

This would have eliminated the previously mentioned width adjustment
work all together.

If the point is in the last cell type S-TAB S-TAB to move it to the
first cell.  Now type \\[table-heighten-cell] which heighten the row by a line.

    +--------------+------+--------------------------------+
    |-!-           |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+

Type \\[table-insert-row-column] and tell it to insert a row.

    +--------------+------+--------------------------------+
    |-!-           |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+

Move the point under the table as shown below.

    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    -!-

Type M-x table-insert-row instead of \\[table-insert-row-column].  \\[table-insert-row-column] does not work
when the point is outside of the table.  This insertion at
outside of the table effectively appends a row at the end.

    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    |-!-           |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+

Text editing inside the table cell produces reasonably expected
results.

    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+
    |              |      |Text editing inside the table   |
    |              |      |cell produces reasonably        |
    |              |      |expected results.-!-            |
    +--------------+------+--------------------------------+
    |              |      |                                |
    |              |      |                                |
    +--------------+------+--------------------------------+

Inside a table cell has a special keymap.

\\{table-cell-map}"
                :user-visible-flag t
                :arguments ("columns" "rows" "cell-width" "cell-height"))
                nil [65814 74725])
            ("table-insert-row" function
               (:documentation "Insert N table row(s).
When point is in a table the newly inserted row(s) are placed above
the current row.  When point is outside of the table it must be below
the table within the table width range, then the newly created row(s)
are appended at the bottom of the table."
                :user-visible-flag t
                :arguments ("n"))
                nil [74742 78556])
            ("table-insert-column" function
               (:documentation "Insert N table column(s).
When point is in a table the newly inserted column(s) are placed left
of the current column.  When point is outside of the table it must be
right side of the table within the table height range, then the newly
created column(s) are appended at the right of the table."
                :user-visible-flag t
                :arguments ("n"))
                nil [78573 82916])
            ("table-insert-row-column" function
               (:documentation "Insert row(s) or column(s).
See `table-insert-row' and `table-insert-column'."
                :user-visible-flag t
                :arguments ("row-column" "n"))
                nil [82933 83658])
            ("table-recognize" function
               (:documentation "Recognize all tables within the current buffer and activate them.
Scans the entire buffer and recognizes valid table cells.  If the
optional numeric prefix argument ARG is negative the tables in the
buffer become inactive, meaning the tables become plain text and loses
all the table specific features."
                :user-visible-flag t
                :arguments ("arg"))
                nil [83675 85448])
            ("table-unrecognize" function nil nil [85465 85532])
            ("table-recognize-region" function
               (:documentation "Recognize all tables within region.
BEG and END specify the region to work on.  If the optional numeric
prefix argument ARG is negative the tables in the region become
inactive, meaning the tables become plain text and lose all the table
specific features."
                :user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [85549 87215])
            ("table-unrecognize-region" function (:arguments ("beg" "end")) nil [87232 87332])
            ("table-recognize-table" function
               (:documentation "Recognize a table at point.
If the optional numeric prefix argument ARG is negative the table
becomes inactive, meaning the table becomes plain text and loses all
the table specific features."
                :user-visible-flag t
                :arguments ("arg"))
                nil [87349 88023])
            ("table-unrecognize-table" function nil nil [88040 88119])
            ("table-recognize-cell" function
               (:documentation "Recognize a table cell that contains current point.
Probe the cell dimension and prepare the cell information.  The
optional two arguments FORCE and NO-COPY are for internal use only and
must not be specified.  When the optional numeric prefix argument ARG
is negative the cell becomes inactive, meaning that the cell becomes
plain text and loses all the table specific features."
                :user-visible-flag t
                :arguments ("force" "no-copy" "arg"))
                nil [88136 91034])
            ("table-unrecognize-cell" function nil nil [91051 91136])
            ("table-heighten-cell" function
               (:documentation "Heighten the current cell by N lines by expanding the cell vertically.
Heightening is done by adding blank lines at the bottom of the current
cell.  Other cells aligned horizontally with the current one are also
heightened in order to keep the rectangular table structure.  The
optional argument NO-COPY is internal use only and must not be
specified."
                :user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [91153 93736])
            ("table-shorten-cell" function
               (:documentation "Shorten the current cell by N lines by shrinking the cell vertically.
Shortening is done by removing blank lines from the bottom of the cell
and possibly from the top of the cell as well.  Therefore, the cell
must have some bottom/top blank lines to be shorten effectively.  This
is applicable to all the cells aligned horizontally with the current
one because they are also shortened in order to keep the rectangular
table structure."
                :user-visible-flag t
                :arguments ("n"))
                nil [93753 100366])
            ("table-widen-cell" function
               (:documentation "Widen the current cell by N columns and expand the cell horizontally.
Some other cells in the same table are widen as well to keep the
table's rectangle structure."
                :user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [100383 102934])
            ("table-narrow-cell" function
               (:documentation "Narrow the current cell by N columns and shrink the cell horizontally.
Some other cells in the same table are narrowed as well to keep the
table's rectangle structure."
                :user-visible-flag t
                :arguments ("n"))
                nil [102951 107229])
            ("table-forward-cell" function
               (:documentation "Move point forward to the beginning of the next cell.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move backward N cells.
Do not specify NO-RECOGNIZE and UNRECOGNIZE. They are for internal use only.

Sample Cell Traveling Order (In Irregular Table Cases)

You can actually try how it works in this buffer.  Press
\\[table-recognize] and go to cells in the following tables and press
\\[table-forward-cell] or TAB key.

+-----+--+  +--+-----+  +--+--+--+  +--+--+--+  +---------+  +--+---+--+
|0    |1 |  |0 |1    |  |0 |1 |2 |  |0 |1 |2 |  |0        |  |0 |1  |2 |
+--+--+  |  |  +--+--+  +--+  |  |  |  |  +--+  +----+----+  +--+-+-+--+
|2 |3 |  |  |  |2 |3 |  |3 +--+  |  |  +--+3 |  |1   |2   |  |3   |4   |
|  +--+--+  +--+--+  |  +--+4 |  |  |  |4 +--+  +--+-+-+--+  +----+----+
|  |4    |  |4    |  |  |5 |  |  |  |  |  |5 |  |3 |4  |5 |  |5        |
+--+-----+  +-----+--+  +--+--+--+  +--+--+--+  +--+---+--+  +---------+

+--+--+--+  +--+--+--+  +--+--+--+  +--+--+--+
|0 |1 |2 |  |0 |1 |2 |  |0 |1 |2 |  |0 |1 |2 |
|  |  |  |  |  +--+  |  |  |  |  |  +--+  +--+
+--+  +--+  +--+3 +--+  |  +--+  |  |3 +--+4 |
|3 |  |4 |  |4 +--+5 |  |  |3 |  |  +--+5 +--+
|  |  |  |  |  |6 |  |  |  |  |  |  |6 |  |7 |
+--+--+--+  +--+--+--+  +--+--+--+  +--+--+--+

+--+--+--+  +--+--+--+  +--+--+--+--+  +--+-----+--+  +--+--+--+--+
|0 |1 |2 |  |0 |1 |2 |	|0 |1 |2 |3 |  |0 |1    |2 |  |0 |1 |2 |3 |
|  +--+  |  |  +--+  |	|  +--+--+  |  |  |     |  |  |  +--+--+  |
|  |3 +--+  +--+3 |  |	+--+4    +--+  +--+     +--+  +--+4    +--+
+--+  |4 |  |4 |  +--+	|5 +--+--+6 |  |3 +--+--+4 |  |5 |     |6 |
|5 +--+  |  |  +--+5 |	|  |7 |8 |  |  |  |5 |6 |  |  |  |     |  |
|  |6 |  |  |  |6 |  |	+--+--+--+--+  +--+--+--+--+  +--+-----+--+
+--+--+--+  +--+--+--+
"
                :user-visible-flag t
                :arguments ("arg" "no-recognize" "unrecognize"))
                nil [107246 112853])
            ("table-backward-cell" function
               (:documentation "Move backward to the beginning of the previous cell.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move forward N cells."
                :user-visible-flag t
                :arguments ("arg"))
                nil [112912 113180])
            ("table-span-cell" function
               (:documentation "Span current cell into adjacent cell in DIRECTION.
DIRECTION is one of symbols; right, left, above or below."
                :user-visible-flag t
                :arguments ("direction"))
                nil [113197 117420])
            ("table-split-cell-vertically" function
               (:documentation "Split current cell vertically.
Creates a cell above and a cell below the current point location."
                :user-visible-flag t)
                nil [117437 119070])
            ("table-split-cell-horizontally" function
               (:documentation "Split current cell horizontally.
Creates a cell on the left and a cell on the right of the current point location."
                :user-visible-flag t)
                nil [119087 122792])
            ("table-split-cell" function
               (:documentation "Split current cell in ORIENTATION.
ORIENTATION is a symbol either horizontally or vertically."
                :user-visible-flag t
                :arguments ("orientation"))
                nil [122809 123572])
            ("table-justify" function
               (:documentation "Justify contents of a cell, a row of cells or a column of cells.
WHAT is a symbol `cell', `row' or `column'.  JUSTIFY is a symbol
`left', `center', `right', `top', `middle', `bottom' or `none'."
                :user-visible-flag t
                :arguments ("what" "justify"))
                nil [123589 124249])
            ("table-justify-cell" function
               (:documentation "Justify cell contents.
JUSTIFY is a symbol `left', `center' or `right' for horizontal, or `top',
`middle', `bottom' or `none' for vertical.  When optional PARAGRAPH is
non-nil the justify operation is limited to the current paragraph,
otherwise the entire cell contents is justified."
                :user-visible-flag t
                :arguments ("justify" "paragraph"))
                nil [124266 124780])
            ("table-justify-row" function
               (:documentation "Justify cells of a row.
JUSTIFY is a symbol `left', `center' or `right' for horizontal,
or `top', `middle', `bottom' or `none' for vertical."
                :user-visible-flag t
                :arguments ("justify"))
                nil [124797 125344])
            ("table-justify-column" function
               (:documentation "Justify cells of a column.
JUSTIFY is a symbol `left', `center' or `right' for horizontal,
or `top', `middle', `bottom' or `none' for vertical."
                :user-visible-flag t
                :arguments ("justify"))
                nil [125361 125913])
            ("define-minor-mode" code nil nil [125930 126532])
            ("table-query-dimension" function
               (:documentation "Return the dimension of the current cell and the current table.
The result is a list (cw ch tw th c r cells) where cw is the cell
width, ch is the cell height, tw is the table width, th is the table
height, c is the number of columns, r is the number of rows and cells
is the total number of cells.  The cell dimension excludes the cell
frame while the table dimension includes the table frame.  The columns
and the rows are counted by the number of cell boundaries.  Therefore
the number tends to be larger than it appears for the tables with
non-uniform cell structure (heavily spanned and split).  When optional
WHERE is provided the cell and table at that location is reported."
                :user-visible-flag t
                :arguments ("where"))
                nil [126549 129203])
            ("table-generate-source" function
               (:documentation "Generate source of the current table in the specified language.
LANGUAGE is a symbol that specifies the language to describe the
structure of the table.  It must be either `html', `latex' or `cals'.
The resulted source text is inserted into DEST-BUFFER and the buffer
object is returned.  When DEST-BUFFER is omitted or nil the default
buffer specified in `table-dest-buffer-name' is used.  In this case
the content of the default buffer is erased prior to the generation.
When DEST-BUFFER is non-nil it is expected to be either a destination
buffer or a name of the destination buffer.  In this case the
generated result is inserted at the current point in the destination
buffer and the previously existing contents in the buffer are
untouched.

References used for this implementation:

HTML:
        URL `http://www.w3.org'

LaTeX:
        URL `http://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/Tables.html'

CALS (DocBook DTD):
        URL `http://www.oasis-open.org/html/a502.htm'
        URL `http://www.oreilly.com/catalog/docbook/chapter/book/table.html#AEN114751'
"
                :user-visible-flag t
                :arguments ("language" "dest-buffer" "caption"))
                nil [129220 134007])
            ("table--generate-source-prologue" function
               (:documentation "Generate and insert source prologue into DEST-BUFFER."
                :arguments ("dest-buffer" "language" "caption" "col-list" "_row-list"))
                nil [134009 135467])
            ("table--generate-source-epilogue" function
               (:documentation "Generate and insert source epilogue into DEST-BUFFER."
                :arguments ("dest-buffer" "language" "_col-list" "_row-list"))
                nil [135469 136218])
            ("table--generate-source-scan-rows" function
               (:documentation "Generate and insert source rows into DEST-BUFFER."
                :arguments ("dest-buffer" "language" "_origin-cell" "col-list" "row-list"))
                nil [136220 137185])
            ("table--generate-source-cells-in-a-row" function
               (:documentation "Generate and insert source cells into DEST-BUFFER."
                :arguments ("dest-buffer" "language" "col-list" "row-list"))
                nil [137187 140494])
            ("table--generate-source-cell-contents" function
               (:documentation "Generate and insert source cell contents of a CELL into DEST-BUFFER."
                :arguments ("dest-buffer" "language" "cell"))
                nil [140496 141877])
            ("table--cell-horizontal-char-p" function
               (:documentation "Test if character C is one of the horizontal characters"
                :arguments ("c"))
                nil [141879 142036])
            ("table--generate-source-scan-lines" function
               (:documentation "Scan the table line by line.
Currently this method is for LaTeX only."
                :arguments ("dest-buffer" "_language" "origin-cell" "tail-cell" "col-list" "row-list"))
                nil [142038 145147])
            ("table-insert-sequence" function
               (:documentation "Travel cells forward while inserting a specified sequence string in each cell.
STR is the base string from which the sequence starts.  When STR is an
empty string then each cell content is erased.  When STR ends with
numerical characters (they may optionally be surrounded by a pair of
parentheses) they are incremented as a decimal number.  Otherwise the
last character in STR is incremented in ASCII code order.  N is the
number of sequence elements to insert.  When N is negative the cell
traveling direction is backward.  When N is zero it travels forward
entire table.  INCREMENT is the increment between adjacent sequence
elements and can be a negative number for effectively decrementing.
INTERVAL is the number of cells to travel between sequence element
insertion which is normally 1.  When zero or less is given for
INTERVAL it is interpreted as number of cells per row so that sequence
is placed straight down vertically as long as the table's cell
structure is uniform.  JUSTIFY is a symbol `left', `center' or
`right' that specifies justification of the inserted string.

Example:

  (progn
    (table-insert 16 3 5 1)
    (table-forward-cell 15)
    (table-insert-sequence \"D0\" -16 1 1 \\='center)
    (table-forward-cell 16)
    (table-insert-sequence \"A[0]\" -16 1 1 \\='center)
    (table-forward-cell 1)
    (table-insert-sequence \"-\" 16 0 1 \\='center))

  (progn
    (table-insert 16 8 5 1)
    (table-insert-sequence \"@\" 0 1 2 \\='right)
    (table-forward-cell 1)
    (table-insert-sequence \"64\" 0 1 2 \\='left))"
                :user-visible-flag t
                :arguments ("str" "n" "increment" "interval" "justify"))
                nil [145164 149751])
            ("table-delete-row" function
               (:documentation "Delete N row(s) of cells.
Delete N rows of cells from current row.  The current row is the row
contains the current cell where point is located.  Each row must
consists from cells of same height."
                :user-visible-flag t
                :arguments ("n"))
                nil [149768 152807])
            ("table-delete-column" function
               (:documentation "Delete N column(s) of cells.
Delete N columns of cells from current column.  The current column is
the column contains the current cell where point is located.  Each
column must consists from cells of same width."
                :user-visible-flag t
                :arguments ("n"))
                nil [152824 155004])
            ("table-capture" function
               (:documentation "Convert plain text into a table by capturing the text in the region.
Create a table with the text in region as cell contents.  BEG and END
specify the region.  The text in the region is replaced with a table.
The removed text is inserted in the table.  When optional
COL-DELIM-REGEXP and ROW-DELIM-REGEXP are provided the region contents
is parsed and separated into individual cell contents by using the
delimiter regular expressions.  This parsing determines the number of
columns and rows of the table automatically.  If COL-DELIM-REGEXP and
ROW-DELIM-REGEXP are omitted the result table has only one cell and
the entire region contents is placed in that cell.  Optional JUSTIFY
is one of `left', `center' or `right', which specifies the cell
justification.  Optional MIN-CELL-WIDTH specifies the minimum cell
width.  Optional COLUMNS specify the number of columns when
ROW-DELIM-REGEXP is not specified.


Example 1:

1, 2, 3, 4
5, 6, 7, 8
, 9, 10

Running `table-capture' on above 3 line region with COL-DELIM-REGEXP
\",\" and ROW-DELIM-REGEXP \"\\n\" creates the following table.  In
this example the cells are centered and minimum cell width is
specified as 5.

+-----+-----+-----+-----+
|  1  |  2  |  3  |  4  |
+-----+-----+-----+-----+
|  5  |  6  |  7  |  8  |
+-----+-----+-----+-----+
|     |  9  | 10  |     |
+-----+-----+-----+-----+

Note:

In case the function is called interactively user must use \\[quoted-insert] `quoted-insert'
in order to enter \"\\n\" successfully.  COL-DELIM-REGEXP at the end
of each row is optional.


Example 2:

This example shows how a table can be used for text layout editing.
Let `table-capture' capture the following region starting from
-!- and ending at -*-, that contains three paragraphs and two item
name headers.  This time specify empty string for both
COL-DELIM-REGEXP and ROW-DELIM-REGEXP.

-!-`table-capture' is a powerful command however mastering its power
requires some practice.  Here is a list of items what it can do.

Parse Cell Items      By using column delimiter regular
		      expression and raw delimiter regular
		      expression, it parses the specified text
		      area and extracts cell items from
		      non-table text and then forms a table out
		      of them.

Capture Text Area     When no delimiters are specified it
		      creates a single cell table.  The text in
		      the specified region is placed in that
		      cell.-*-

Now the entire content is captured in a cell which is itself a table
like this.

+-----------------------------------------------------------------+
|`table-capture' is a powerful command however mastering its power|
|requires some practice.  Here is a list of items what it can do. |
|                                                                 |
|Parse Cell Items      By using column delimiter regular          |
|                      expression and raw delimiter regular       |
|                      expression, it parses the specified text   |
|                      area and extracts cell items from          |
|                      non-table text and then forms a table out  |
|                      of them.                                   |
|                                                                 |
|Capture Text Area     When no delimiters are specified it        |
|                      creates a single cell table.  The text in  |
|                      the specified region is placed in that     |
|                      cell.                                      |
+-----------------------------------------------------------------+

By splitting the cell appropriately we now have a table consisting of
paragraphs occupying its own cell.  Each cell can now be edited
independently.

+-----------------------------------------------------------------+
|`table-capture' is a powerful command however mastering its power|
|requires some practice.  Here is a list of items what it can do. |
+---------------------+-------------------------------------------+
|Parse Cell Items     |By using column delimiter regular          |
|                     |expression and raw delimiter regular       |
|                     |expression, it parses the specified text   |
|                     |area and extracts cell items from          |
|                     |non-table text and then forms a table out  |
|                     |of them.                                   |
+---------------------+-------------------------------------------+
|Capture Text Area    |When no delimiters are specified it        |
|                     |creates a single cell table.  The text in  |
|                     |the specified region is placed in that     |
|                     |cell.                                      |
+---------------------+-------------------------------------------+

By applying `table-release', which does the opposite process, the
contents become once again plain text.  `table-release' works as
companion command to `table-capture' this way.
"
                :user-visible-flag t
                :arguments ("beg" "end" "col-delim-regexp" "row-delim-regexp" "justify" "min-cell-width" "columns"))
                nil [155021 165526])
            ("table-release" function
               (:documentation "Convert a table into plain text by removing the frame from a table.
Remove the frame from a table and deactivate the table.  This command
converts a table into plain text without frames.  It is a companion to
`table-capture' which does the opposite process."
                :user-visible-flag t)
                nil [165543 166991])
            ("table--make-cell-map" function (:documentation "Make the table cell keymap if it does not exist yet.") nil [167080 168481])
            ("add-hook" code nil nil [168602 168653])
            ("*table--cell-self-insert-command" function
               (:documentation "Table cell version of `self-insert-command'."
                :user-visible-flag t)
                nil [168655 169269])
            ("*table--cell-delete-backward-char" function
               (:documentation "Table cell version of `delete-backward-char'."
                :user-visible-flag t
                :arguments ("n"))
                nil [169271 169422])
            ("*table--cell-newline" function
               (:documentation "Table cell version of `newline'."
                :user-visible-flag t
                :arguments ("indent"))
                nil [169424 169960])
            ("*table--cell-open-line" function
               (:documentation "Table cell version of `open-line'."
                :user-visible-flag t
                :arguments ("n"))
                nil [169962 170232])
            ("*table--cell-newline-and-indent" function
               (:documentation "Table cell version of `newline-and-indent'."
                :user-visible-flag t)
                nil [170234 170367])
            ("*table--cell-delete-char" function
               (:documentation "Table cell version of `delete-char'."
                :user-visible-flag t
                :arguments ("n"))
                nil [170369 172345])
            ("*table--cell-quoted-insert" function
               (:documentation "Table cell version of `quoted-insert'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [172347 172576])
            ("*table--cell-describe-mode" function
               (:documentation "Table cell version of `describe-mode'."
                :user-visible-flag t)
                nil [172578 173818])
            ("*table--cell-describe-bindings" function
               (:documentation "Table cell version of `describe-bindings'."
                :user-visible-flag t)
                nil [173820 174321])
            ("dabbrev-abbrev-char-regexp" variable nil nil [174323 174358])
            ("*table--cell-dabbrev-expand" function
               (:documentation "Table cell version of `dabbrev-expand'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [174360 174698])
            ("*table--cell-dabbrev-completion" function
               (:documentation "Table cell version of `dabbrev-completion'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [174700 175120])
            ("*table--present-cell-popup-menu" function
               (:documentation "Present and handle cell popup menu."
                :user-visible-flag t
                :arguments ("event"))
                nil [175122 175641])
            ("table--update-cell" function
               (:documentation "Update the table cell contents.
When the optional parameter NOW is nil it only sets up the update
timer.  If it is non-nil the function copies the contents of the cell
cache buffer into the designated cell in the table buffer."
                :arguments ("now"))
                nil [175715 177753])
            ("table--update-cell-widened" function
               (:documentation "Update the contents of the cells that are affected by widening operation."
                :arguments ("now"))
                nil [177755 179377])
            ("table--update-cell-heightened" function
               (:documentation "Update the contents of the cells that are affected by heightening operation."
                :arguments ("now"))
                nil [179379 181061])
            ("table-goto-top-left-corner" function (:documentation "Move point to top left corner of the current table and return the char position.") nil [181153 181468])
            ("table-goto-top-right-corner" function (:documentation "Move point to top right corner of the current table and return the char position.") nil [181470 181784])
            ("table-goto-bottom-left-corner" function (:documentation "Move point to bottom left corner of the current table and return the char position.") nil [181786 182109])
            ("table-goto-bottom-right-corner" function (:documentation "Move point to bottom right corner of the current table and return the char position.") nil [182111 182433])
            ("table-function" function
               (:documentation "Return FUNCTION, or a table version of it if applicable."
                :arguments ("function"))
                nil [182435 182856])
            ("table--read-from-minibuffer" function
               (:documentation "A wrapper to `read-from-minibuffer'.
PROMPT-HISTORY is a cons cell which car is the prompt string and the
cdr is the history symbol."
                :arguments ("prompt-history"))
                nil [182924 183522])
            ("table--buffer-substring-and-trim" function
               (:documentation "Extract buffer substring and remove blanks from front and the rear of it."
                :arguments ("beg" "end"))
                nil [183524 183981])
            ("table--valign" function (:documentation "Vertically align the cache cell contents.
Current buffer must be the cache buffer at the entry to this function.
Returns the coordinate of the final point location.") nil [183983 185434])
            ("table--query-justification" function nil nil [185436 185804])
            ("table--spacify-frame" function (:documentation "Spacify table frame.
Replace frame characters with spaces.") nil [185806 186894])
            ("table--remove-blank-lines" function
               (:documentation "Delete N blank lines from the current line.
For adjusting below area of the table when the table is shortened."
                :arguments ("n"))
                nil [186896 187538])
            ("table--uniform-list-p" function
               (:documentation "Return nil when LIST contains non equal elements.  Otherwise return t."
                :arguments ("l"))
                nil [187540 187785])
            ("table--detect-cell-alignment" function
               (:documentation "Detect CELL contents alignment.
Guess CELL contents alignment both horizontally and vertically by
looking at the appearance of the CELL contents."
                :arguments ("cell"))
                nil [187787 189718])
            ("table--string-to-number-list" function
               (:documentation "Return a list of numbers in STR."
                :arguments ("str"))
                nil [189720 189988])
            ("table--justify-cell-contents" function
               (:documentation "Justify the current cell contents.
JUSTIFY is a symbol `left', `center' or `right' for horizontal, or `top',
`middle', `bottom' or `none' for vertical.  When PARAGRAPH is non-nil the
justify operation is limited to the current paragraph."
                :arguments ("justify" "paragraph"))
                nil [189990 191203])
            ("table--horizontally-shift-above-and-below" function
               (:documentation "Horizontally shift outside contents right above and right below of the table.
This function moves the surrounding text outside of the table so that
they match the horizontal growth/shrink of the table.  It also
untabify the shift affected area including the right side of the table
so that tab related uneven shifting is avoided.  COLUMNS-TO-EXTEND
specifies the number of columns the table grows, or shrinks if
negative.  TOP-TO-BOTTOM-COORD-LIST is the vertical cell coordinate
list.  This list can be any vertical list within the table."
                :arguments ("columns-to-extend" "top-to-bottom-coord-list"))
                nil [191205 193363])
            ("table--create-growing-space-below" function
               (:documentation "Create growing space below the table.
This function creates growing space below the table slightly
intelligent fashion.  Following is the cases it handles for each
growing line:
  1. When the first line below the table is a complete blank line it
inserts a blank line.
  2. When the line starts with a prefix that matches the prefix of the
bottom line of the table it inserts a line consisting of prefix alone.
  3. Otherwise it deletes the rectangular contents where table will
grow into."
                :arguments ("lines-to-extend" "left-to-right-coord-list" "bottom-border-y"))
                nil [193365 194781])
            ("table--untabify-line" function
               (:documentation "Untabify current line.
Unlike save-excursion this guarantees preserving the cursor location
even when the point is on a tab character which is to be removed.
Optional FROM narrows the subject operation from this point to the end
of line."
                :arguments ("from"))
                nil [194783 195278])
            ("table--untabify" function
               (:documentation "Wrapper to raw untabify."
                :arguments ("beg" "end"))
                nil [195280 195451])
            ("table--multiply-string" function
               (:documentation "Multiply string and return it."
                :arguments ("string" "multiplier"))
                nil [195453 195687])
            ("table--line-column-position" function
               (:documentation "Return the location of LINE forward at COLUMN."
                :arguments ("line" "column"))
                nil [195689 195872])
            ("table--row-column-insertion-point-p" function
               (:documentation "Return non-nil if it makes sense to insert a row or a column at point."
                :arguments ("columnp"))
                nil [195874 196605])
            ("table--find-row-column" function
               (:documentation "Search table and return a cell coordinate list of row or column."
                :arguments ("columnp" "no-error"))
                nil [196607 198066])
            ("table--min-coord-list" function
               (:documentation "Return minimum cell dimension of COORD-LIST.
COORD-LIST is a list of coordinate pairs (lu-coord . rb-coord), where
each pair in the list represents a cell.  lu-coord is the left upper
coordinate of a cell and rb-coord is the right bottom coordinate of a
cell.  A coordinate is a pair of x and y axis coordinate values.  The
return value is a cons cell (min-w . min-h), where min-w and min-h are
respectively the minimum width and the minimum height of all the cells
in the list."
                :arguments ("coord-list"))
                nil [198068 199023])
            ("table--cell-can-split-horizontally-p" function (:documentation "Test if a cell can split at current location horizontally.") nil [199025 199370])
            ("table--cell-can-split-vertically-p" function (:documentation "Test if a cell can split at current location vertically.") nil [199372 199708])
            ("table--cell-can-span-p" function
               (:documentation "Test if the current cell can span to DIRECTION."
                :arguments ("direction"))
                nil [199710 201582])
            ("table--cell-insert-char" function
               (:documentation "Insert CHAR inside a table cell."
                :arguments ("char" "overwrite"))
                nil [201584 203710])
            ("table--finish-delayed-tasks" function (:documentation "Finish all outstanding delayed tasks.") nil [203712 203986])
            ("table--log" function
               (:documentation "Debug logging macro."
                :arguments ("body"))
                nil [203988 204189])
            ("table--measure-max-width" function
               (:documentation "Return maximum width of current buffer.
Normally the current buffer is expected to be already the cache
buffer.  The width excludes following spaces at the end of each line.
Unless UNLIMITED is non-nil minimum return value is 1."
                :arguments ("unlimited"))
                nil [204191 204842])
            ("table--cell-to-coord" function
               (:documentation "Create a cell coordinate pair from cell location pair."
                :arguments ("cell"))
                nil [204844 205046])
            ("table--cell-list-to-coord-list" function
               (:documentation "Create and return a coordinate list that corresponds to CELL-LIST.
CELL-LIST is a list of location pairs (lu . rb), where each pair
represents a cell in the list.  lu is the left upper location and rb
is the right bottom location of a cell.  The return value is a list of
coordinate pairs (lu-coord . rb-coord), where lu-coord is the left
upper coordinate and rb-coord is the right bottom coordinate of a
cell."
                :arguments ("cell-list"))
                nil [205048 205734])
            ("table--test-cell-list" function
               (:documentation "For testing `table--vertical-cell-list' and `table--horizontal-cell-list'."
                :arguments ("horizontal" "reverse" "first-only" "pivot"))
                nil [205736 206618])
            ("table--vertical-cell-list" function
               (:documentation "Return a vertical cell list from the table.
The return value represents a list of cells including the current cell
that align vertically.  Each element of the list is a cons cell (lu
. rb) where lu is the cell's left upper location and rb is the cell's
right bottom location.  The cell order in the list is from bottom to
top of the table.  If optional argument TOP-TO-BOTTOM is non-nil the
order is reversed as from top to bottom of the table.  If optional
argument FIRST-ONLY is non-nil the return value is not a list of cells
but a single cons cell that is the first cell of the list, if the list
had been created.  If optional argument PIVOT is a symbol `left' the
vertical cell search is aligned with the left edge of the current
cell, otherwise aligned with the right edge of the current cell.  The
arguments INTERNAL-DIR, INTERNAL-LIST and INTERNAL-PX are internal use
only and must not be specified."
                :arguments ("top-to-bottom" "first-only" "pivot" "internal-dir" "internal-list" "internal-px"))
                nil [206620 209018])
            ("table--horizontal-cell-list" function
               (:documentation "Return a horizontal cell list from the table.
The return value represents a list of cells including the current cell
that align horizontally.  Each element of the list is a cons cells (lu
. rb) where lu is the cell's left upper location and rb is the cell's
right bottom location.  The cell order in the list is from right to
left of the table.  If optional argument LEFT-TO-RIGHT is non-nil the
order is reversed as from left to right of the table.  If optional
argument FIRST-ONLY is non-nil the return value is not a list of cells
but a single cons cell that is the first cell of the list, if the
list had been created.  If optional argument PIVOT is a symbol `top'
the horizontal cell search is aligned with the top edge of the current
cell, otherwise aligned with the bottom edge of the current cell.  The
arguments INTERNAL-DIR, INTERNAL-LIST and INTERNAL-PY are internal use
only and must not be specified."
                :arguments ("left-to-right" "first-only" "pivot" "internal-dir" "internal-list" "internal-py"))
                nil [209020 211447])
            ("table--point-in-cell-p" function
               (:documentation "Return t when point is in a valid table cell in the current buffer.
When optional LOCATION is provided the test is performed at that location."
                :arguments ("location"))
                nil [211449 211813])
            ("table--region-in-cell-p" function
               (:documentation "Return t when location BEG and END are in a valid table cell in the current buffer."
                :arguments ("beg" "end"))
                nil [211815 212156])
            ("table--at-cell-p" function
               (:documentation "Returns non-nil if POSITION has table-cell property in OBJECT.
OBJECT is optional and defaults to the current buffer.
If POSITION is at the end of OBJECT, the value is nil."
                :arguments ("position" "object" "at-column"))
                nil [212158 212554])
            ("table--probe-cell-left-up" function (:documentation "Probe left up corner pattern of a cell.
If it finds a valid corner returns a position otherwise returns nil.
The position is the location before the first cell character.
Focus only on the corner pattern.  Further cell validity check is required.") nil [212556 214098])
            ("table--probe-cell-right-bottom" function (:documentation "Probe right bottom corner pattern of a cell.
If it finds a valid corner returns a position otherwise returns nil.
The position is the location after the last cell character.
Focus only on the corner pattern.  Further cell validity check is required.") nil [214100 215870])
            ("table--editable-cell-p" function (:arguments ("_abort-on-error")) nil [215872 216008])
            ("table--probe-cell" function
               (:documentation "Probes a table cell around the point.
Searches for the left upper corner and the right bottom corner of a table
cell which contains the current point location.

The result is a cons cell (left-upper . right-bottom) where
the left-upper is the position before the cell's left upper corner character,
the right-bottom is the position after the cell's right bottom corner character.

When it fails to find either one of the cell corners it returns nil or
signals error if the optional ABORT-ON-ERROR is non-nil."
                :arguments ("abort-on-error"))
                nil [216010 217753])
            ("table--insert-rectangle" function
               (:documentation "Insert text of RECTANGLE with upper left corner at point.
Same as insert-rectangle except that mark operation is eliminated."
                :arguments ("rectangle"))
                nil [217755 218215])
            ("table--put-cell-property" function
               (:documentation "Put standard text properties to the CELL.
The CELL is a cons cell (left-upper . right-bottom) where the
left-upper is the position before the cell's left upper corner
character, the right-bottom is the position after the cell's right
bottom corner character."
                :arguments ("cell"))
                nil [218217 218996])
            ("table--put-cell-line-property" function
               (:documentation "Put standard text properties to a line of a cell.
BEG is the beginning of the line that is the location between left
cell border character and the first content character.  END is the end
of the line that is the location between the last content character
and the right cell border character."
                :arguments ("beg" "end" "object"))
                nil [218998 219581])
            ("table--put-cell-content-property" function
               (:documentation "Put cell content text properties."
                :arguments ("beg" "end" "object"))
                nil [219583 219905])
            ("table--put-cell-indicator-property" function
               (:documentation "Put cell property which indicates that the location is within a table cell."
                :arguments ("beg" "end" "object"))
                nil [219907 220177])
            ("table--put-cell-face-property" function
               (:documentation "Put cell face property."
                :arguments ("beg" "end" "object"))
                nil [220179 220326])
            ("table--put-cell-keymap-property" function
               (:documentation "Put cell keymap property."
                :arguments ("beg" "end" "object"))
                nil [220328 220485])
            ("table--put-cell-rear-nonsticky" function
               (:documentation "Put rear-nonsticky property."
                :arguments ("beg" "end" "object"))
                nil [220487 220640])
            ("table--put-cell-point-entered/left-property" function
               (:documentation "Put point-entered/left property."
                :arguments ("beg" "end" "object"))
                nil [220642 220883])
            ("table--remove-cell-properties" function
               (:documentation "Remove all cell properties.
If OBJECT is non-nil cell properties are removed from the OBJECT
instead of the current buffer and returns the OBJECT."
                :arguments ("beg" "end" "object"))
                nil [220885 221519])
            ("table--update-cell-face" function (:documentation "Update cell face according to the current mode.") nil [221521 221769])
            ("table--update-cell-face" code nil nil [221771 221796])
            ("table--get-property" function
               (:documentation "Get CELL's PROPERTY."
                :arguments ("cell" "property"))
                nil [221798 221964])
            ("table--get-cell-justify-property" function
               (:documentation "Get cell's justify property."
                :arguments ("cell"))
                nil [221966 222090])
            ("table--get-cell-valign-property" function
               (:documentation "Get cell's vertical alignment property."
                :arguments ("cell"))
                nil [222092 222225])
            ("table--put-property" function
               (:documentation "Put CELL's PROPERTY the VALUE."
                :arguments ("cell" "property" "value"))
                nil [222227 222461])
            ("table--put-cell-justify-property" function
               (:documentation "Put cell's justify property."
                :arguments ("cell" "justify"))
                nil [222463 222603])
            ("table--put-cell-valign-property" function
               (:documentation "Put cell's vertical alignment property."
                :arguments ("cell" "valign"))
                nil [222605 222752])
            ("table--point-entered/left-cell-function" function
               (:documentation "Point has entered a cell.
Refresh the menu bar."
                :arguments ("_window" "_oldpos" "dir"))
                nil [222754 223246])
            ("table--warn-incompatibility" function (:documentation "If called from interactive operation warn the know incompatibilities.
This feature is disabled when `table-disable-incompatibility-warning'
is non-nil.  The warning is done only once per session for each item.") nil [223248 224586])
            ("table--cell-blank-str" function
               (:documentation "Return blank table cell string of length N."
                :arguments ("n"))
                nil [224588 224788])
            ("table--remove-eol-spaces" function
               (:documentation "Remove spaces at the end of each line in the BEG END region of the current buffer.
When optional BOL is non-nil spaces at the beginning of line are
removed.  When optional FORCE is non-nil removal operation is enforced
even when point is within the removal area."
                :arguments ("beg" "end" "bol" "force"))
                nil [224790 225774])
            ("table--fill-region" function
               (:documentation "Fill paragraphs in table cell cache.
Current buffer must already be set to the cache buffer."
                :arguments ("beg" "end" "col" "justify"))
                nil [225776 226693])
            ("table--fill-region-strictly" function
               (:documentation "Fill region strictly so that no line exceeds fill-column.
When a word exceeds fill-column the word is chopped into pieces.  The
chopped location is indicated with table-word-continuation-char."
                :arguments ("beg" "end"))
                nil [226695 227900])
            ("table--goto-coordinate" function
               (:documentation "Move point to the given COORDINATE and return the location.
When optional NO-EXTENSION is non-nil and the specified coordinate is
not reachable returns nil otherwise the blanks are added if necessary
to achieve the goal coordinate and returns the goal point.  It
intentionally does not preserve the original point in case it fails
achieving the goal.  When optional NO-TAB-EXPANSION is non-nil and the
goad happens to be in a tab character the tab is not expanded but the
goal ends at the beginning of tab."
                :arguments ("coordinate" "no-extension" "no-tab-expansion"))
                nil [227902 229213])
            ("table--copy-coordinate" function
               (:documentation "Copy coordinate in a new cons cell."
                :arguments ("coord"))
                nil [229215 229326])
            ("table--get-coordinate" function
               (:documentation "Return the coordinate of point in current buffer.
When optional WHERE is given it returns the coordinate of that
location instead of point in the current buffer.  It does not move the
point"
                :arguments ("where"))
                nil [229328 229674])
            ("table--current-line" function
               (:documentation "Return zero based line count of current line or if non-nil LOCATION line."
                :arguments ("location"))
                nil [229676 229922])
            ("table--transcoord-table-to-cache" function
               (:documentation "Transpose COORDINATE from table coordinate system to cache coordinate system.
When COORDINATE is omitted or nil the point in current buffer is assumed in place."
                :arguments ("coordinate"))
                nil [229924 230270])
            ("table--transcoord-cache-to-table" function
               (:documentation "Transpose COORDINATE from cache coordinate system to table coordinate system.
When COORDINATE is omitted or nil the point in current buffer is assumed in place."
                :arguments ("coordinate"))
                nil [230272 230605])
            ("table--offset-coordinate" function
               (:documentation "Return the offset COORDINATE by OFFSET.
When optional NEGATIVE is non-nil offsetting direction is negative."
                :arguments ("coordinate" "offset" "negative"))
                nil [230607 230970])
            ("table--char-in-str-at-column" function
               (:documentation "Return the character in STR at COLUMN location.
When COLUMN is out of range it returns null character."
                :arguments ("str" "column"))
                nil [230972 231222])
            ("table--str-index-at-column" function
               (:documentation "Return the character index in STR that corresponds to COLUMN location.
It returns COLUMN unless STR contains some wide characters."
                :arguments ("str" "column"))
                nil [231224 231613])
            ("table--set-timer" function
               (:documentation "Generic wrapper for setting up a timer."
                :arguments ("seconds" "func" "args"))
                nil [231615 232062])
            ("table--cancel-timer" function
               (:documentation "Generic wrapper for canceling a timer."
                :arguments ("timer"))
                nil [232064 232223])
            ("table--get-last-command" function (:documentation "Generic wrapper for getting the real last command.") nil [232225 232390])
            ("run-hooks" code nil nil [232392 232420])
            ("table" package nil nil [232422 232438]))          
      :file "table.el.gz"
      :pointmax 232463
      :fsize 52607
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17f4090"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfo" include nil nil [7512 7530])
            ("texinfo-master-menu-header" variable
               (:documentation "String inserted before lower level entries in Texinfo master menu.
It comes after the chapter-level menu entries."
                :default-value " --- The Detailed Node Listing ---
")
                nil [7533 7727])
            ("texinfo-section-types-regexp" variable
               (:documentation "Regexp matching chapter, section, other headings (but not the top node)."
                :default-value "^@\\(chapter \\|sect\\|subs\\|subh\\|unnum\\|major\\|chapheading \\|heading \\|appendix\\)")
                nil [7788 7997])
            ("texinfo-section-level-regexp" variable
               (:documentation "Regular expression matching just the Texinfo section level headings."
                :default-value (regexp-opt (texinfo-filter 3 texinfo-section-list)))
                nil [7999 8164])
            ("texinfo-subsection-level-regexp" variable
               (:documentation "Regular expression matching just the Texinfo subsection level headings."
                :default-value (regexp-opt (texinfo-filter 4 texinfo-section-list)))
                nil [8166 8337])
            ("texinfo-subsubsection-level-regexp" variable
               (:documentation "Regular expression matching just the Texinfo subsubsection level headings."
                :default-value (regexp-opt (texinfo-filter 5 texinfo-section-list)))
                nil [8339 8516])
            ("texinfo-update-menu-same-level-regexps" variable
               (:documentation "Regexps for searching for same level sections in a Texinfo file.
The keys are strings specifying the general hierarchical level in the
document; the values are regular expressions."
                :default-value '((1 . "top[ 	]+") (2 concat "\\(^@\\)\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*") (3 concat "\\(^@\\)\\(" texinfo-section-level-regexp "\\)\\>[ 	]*") (4 concat "\\(^@\\)\\(" texinfo-subsection-level-regexp "\\)\\>[ 	]+") (5 concat "\\(^@\\)\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+")))
                nil [8518 9090])
            ("texinfo-update-menu-higher-regexps" variable
               (:documentation "Regexps for searching for higher level sections in a Texinfo file.
The keys are strings specifying the general hierarchical level in the
document; the values are regular expressions."
                :default-value '((1 . "^@node [ 	]*DIR") (2 . "^@node [ 	]*top[ 	]*\\(,\\|$\\)") (3 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (4 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (5 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)")))
                nil [9092 9842])
            ("texinfo-update-menu-lower-regexps" variable
               (:documentation "Regexps for searching for lower level sections in a Texinfo file.
The keys are strings specifying the general hierarchical level in the
document; the values are regular expressions."
                :default-value '((1 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (2 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (3 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (4 concat "\\(^@\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (5 . "a\\(^\\)")))
                nil [9844 10878])
            ("texinfo-make-menu" function
               (:documentation "Without any prefix argument, make or update a menu.
Make the menu for the section enclosing the node found following point.

A prefix argument means make or update menus
for nodes within or part of the marked region.

Whenever a menu exists, and is being updated, the descriptions that
are associated with node names in the pre-existing menu are
incorporated into the new menu.

Leaves trailing whitespace in a menu that lacks descriptions, so
descriptions will format well.  In general, a menu should contain
descriptions, because node names and section titles are often too
short to explain a node well."
                :user-visible-flag t
                :arguments ("beginning" "end"))
                nil [10882 12854])
            ("texinfo-make-one-menu" function
               (:documentation "Make a menu of all the appropriate nodes in this section.
`Appropriate nodes' are those associated with sections that are
at the level specified by LEVEL.  Point is left at the end of menu."
                :arguments ("level"))
                nil [12856 13797])
            ("texinfo-all-menus-update" function
               (:documentation "Update every regular menu in a Texinfo file.
Update pre-existing master menu, if there is one.

Only single-file manuals are supported by this function.  For
multi-file manuals, use `texinfo-multiple-files-update'.

If called with a non-nil argument, this function first updates all the
nodes in the buffer before updating the menus.  Do NOT invoke this
command with an argument if your Texinfo file uses @node lines without
the `Next', `Previous', and `Up' pointers!

Indents the first line of descriptions, and leaves trailing whitespace
in a menu that lacks descriptions, so descriptions will format well.
In general, a menu should contain descriptions, because node names and
section titles are often too short to explain a node well."
                :user-visible-flag t
                :arguments ("update-all-nodes-p"))
                nil [13799 15858])
            ("texinfo-find-lower-level-node" function
               (:documentation "Search forward from point for node at any level lower than LEVEL.
Search is limited to the end of the marked region, REGION-END,
and to the end of the menu region for the level.

Return t if the node is found, else nil.  Leave point at the beginning
of the node if one is found; else do not move point."
                :arguments ("level" "region-end"))
                nil [15860 17061])
            ("texinfo-find-higher-level-node" function
               (:documentation "Search forward from point for node at any higher level than argument LEVEL.
Search is limited to the end of the marked region, REGION-END.

Return t if the node is found, else nil.  Leave point at the beginning
of the node if one is found; else do not move point.

A `@node' line starting at point does count as a match;
if the match is found there, the value is t and point does not move."
                :arguments ("level" "region-end"))
                nil [17063 18253])
            ("texinfo-make-menu-list" function
               (:documentation "Make a list of node names and their descriptions.
Point is left at the end of the menu region, but the menu is not inserted.

First argument is position from which to start making menu list;
second argument is end of region in which to try to locate entries;
third argument is the level of the nodes that are the entries.

Node names and descriptions are dotted pairs of strings.  Each pair is
an element of the list.  If the description does not exist, the
element consists only of the node name."
                :arguments ("beginning" "end" "level"))
                nil [18298 19185])
            ("texinfo-menu-locate-entry-p" function
               (:documentation "Find a node that will be part of menu for this section.
First argument is a string such as \"section\" specifying the general
hierarchical level of the menu; second argument is a position
specifying the end of the search.

The function returns t if the node is found, else nil.  It searches
forward from point, and leaves point at the beginning of the node.

The function finds entries of the same type.  Thus `subsections' and
`unnumberedsubsecs' will appear in the same menu."
                :arguments ("level" "search-end"))
                nil [19187 20292])
            ("texinfo-copy-node-name" function (:documentation "Return the node name as a string.

Start with point at the beginning of the node line; copy the text
after the node command up to the first comma on the line, if any, and
return the text as a string.  Leaves point at the beginning of the
line.  If there is no node name, returns an empty string.") nil [20294 20916])
            ("texinfo-copy-section-title" function (:documentation "Return the title of the section as a string.
The title is used as a description line in the menu when one does not
already exist.

Move point to the beginning of the appropriate section line by going
to the start of the text matched by last regexp searched for, which
must have been done by `texinfo-menu-locate-entry-p'.") nil [20918 21729])
            ("texinfo-old-menu-p" function
               (:documentation "Move point to the beginning of the menu for this section, if any.
Otherwise move point to the end of the first node of this section.
Return t if a menu is found, nil otherwise.

First argument is the position of the beginning of the section in which
the menu will be located; second argument is the position of the first
node within the section.

If no menu is found, the function inserts two newlines just before the
end of the section, and leaves point there where a menu ought to be."
                :arguments ("beginning" "first"))
                nil [21760 22421])
            ("texinfo-incorporate-descriptions" function
               (:documentation "Copy the old menu line descriptions that exist to the new menu.

Point must be at beginning of old menu.

If the node-name of the new menu is found in the old menu, insert the
old description into the new entry.

For this function, the new menu is a list made up of lists of dotted
pairs in which the first element of the pair is the node name and the
second element the description.  The new menu is changed destructively.
The old menu is the menu as it appears in the Texinfo file."
                :arguments ("new-menu-list"))
                nil [22423 23714])
            ("texinfo-incorporate-menu-entry-names" function
               (:documentation "Copy any old menu entry names to the new menu.

Point must be at beginning of old menu.

If the node-name of the new menu entry cannot be found in the old
menu, do nothing.

For this function, the new menu is a list made up of lists of dotted
pairs in which the first element of the pair is the node name and the
second element is the description (or nil).

If we find an existing menu entry name, we change the first element of
the pair to be another dotted pair in which the car is the menu entry
name and the cdr is the node name.

NEW-MENU-LIST is changed destructively.  The old menu is the menu as it
appears in the texinfo file."
                :arguments ("new-menu-list"))
                nil [23716 25120])
            ("texinfo-menu-copy-old-description" function
               (:documentation "Return description field of old menu line as string.
Point must be located just after the node name.  Point left before description.
Single argument, END-OF-MENU, is position limiting search."
                :arguments ("end-of-menu"))
                nil [25122 25992])
            ("texinfo-menu-end" function (:documentation "Return position of end of menu, but don't move point.
Signal an error if not end of menu.") nil [25994 26233])
            ("texinfo-delete-old-menu" function
               (:documentation "Delete the old menu.  Point must be in or after menu.
First argument is position of the beginning of the section in which
the menu will be located; second argument is the position of the first
node within the section."
                :arguments ("beginning" "first"))
                nil [26235 26706])
            ("texinfo-column-for-description" variable
               (:documentation "Column at which descriptions start in a Texinfo menu."
                :default-value 32)
                nil [26770 26870])
            ("texinfo-insert-menu" function
               (:documentation "Insert formatted menu at point.
Indents the first line of descriptions, if any, to the value of
texinfo-column-for-description.  Indenting leaves trailing whitespace
in a menu that lacks descriptions, so descriptions will format well.
In general, a menu should contain descriptions, because node names and
section titles are often too short to explain a node well.

MENU-LIST has form:

    ((\"node-name1\" . \"description\")
     (\"node-name2\" . \"description\") ... )

However, the description field might be nil.

Also, the node-name field might itself be a dotted pair (call it P) of
strings instead of just a string.  In that case, the car of P
is the menu entry name, and the cdr of P is the node name."
                :arguments ("menu-list" "node-name"))
                nil [26872 28560])
            ("texinfo-start-menu-description" function
               (:documentation "In this menu entry, insert the node's section title as a description.
Position point at beginning of description ready for editing.
Do not insert a title if the line contains an existing description.

You will need to edit the inserted text since a useful description
complements the node name rather than repeats it as a title does."
                :user-visible-flag t)
                nil [28616 31550])
            ("texinfo-indent-menu-description" function
               (:documentation "Indent every description in menu following point to COLUMN.
Non-nil argument (prefix, if interactive) means indent every
description in every menu in the region.  Does not indent second and
subsequent lines of a multi-line description."
                :user-visible-flag t
                :arguments ("column" "region-p"))
                nil [31726 32647])
            ("texinfo-menu-indent-description" function
               (:documentation "Indent the Texinfo file menu description to TO-COLUMN-NUMBER.
Start with point just after the word `menu' in the `@menu' line and
leave point on the line before the `@end menu' line.  Does not indent
second and subsequent lines of a multi-line description."
                :arguments ("to-column-number"))
                nil [32649 33687])
            ("texinfo-master-menu" function
               (:documentation "Make a master menu for a whole Texinfo file.
Remove pre-existing master menu, if there is one.

This function supports only single-file manuals.  For multi-file
manuals, use `texinfo-multiple-files-update'.

This function creates or updates the @detailmenu section of a
master menu that follows the Top node.  It replaces any existing
detailed menu that follows the top node.  The detailed menu
includes every entry from all the other menus.  By default, the
existing menus, including the menu in the Top node, are not
updated according to the buffer contents, so all the menus should
be updated first using `texinfo-make-menu' or
`texinfo-all-menus-update', which see.  Alternatively, invoke
this function with a prefix argument, see below.

Non-nil, non-numeric argument (C-u prefix, if interactive) means
first update all existing menus in the buffer (incorporating
descriptions from pre-existing menus) before it constructs the
master menu.  If the argument is numeric (e.g., \"C-u 2\"),
update all existing nodes as well, by calling
`texinfo-update-node' on the entire file.  Warning: do NOT
invoke with a numeric argument if your Texinfo file uses @node
lines without the `Next', `Previous', `Up' pointers, as the
result could be an invalid Texinfo file!

The function removes and recreates the detailed part of an already
existing master menu.  This action assumes that the pre-existing
master menu uses the standard `texinfo-master-menu-header' for the
detailed menu.

The master menu has the following format, which is adapted from the
recommendation in the Texinfo Manual:

   * The first part contains the major nodes in the Texinfo file: the
     nodes for the chapters, chapter-like sections, and the major
     appendices.  This includes the indices, so long as they are in
     chapter-like sections, such as unnumbered sections.

   * The second and subsequent parts contain a listing of the other,
     lower level menus, in order.  This way, an inquirer can go
     directly to a particular node if he or she is searching for
     specific information.

Each of the menus in the detailed node listing is introduced by the
title of the section containing the menu.

Indents the first line of descriptions, and leaves trailing whitespace
in a menu that lacks descriptions, so descriptions will format well.
In general, a menu should contain descriptions, because node names and
section titles are often too short to explain a node well."
                :user-visible-flag t
                :arguments ("update-all-nodes-menus-p"))
                nil [33719 38497])
            ("texinfo-master-menu-list" function (:documentation "Return a list of menu entries and header lines for the master menu.

Start with the menu for chapters and indices and then find each
following menu and the title of the node preceding that menu.

The master menu list has this form:

    (((... \"entry-1-2\"  \"entry-1\") \"title-1\")
     ((... \"entry-2-2\"  \"entry-2-1\") \"title-2\")
     ...)

However, there does not need to be a title field.") nil [38499 39122])
            ("texinfo-insert-master-menu-list" function
               (:documentation "Format and insert the master menu in the current buffer."
                :arguments ("master-menu-list"))
                nil [39124 41723])
            ("texinfo-locate-menu-p" function (:documentation "Find the next menu in the texinfo file.
If found, leave point after word `menu' on the `@menu' line, and return t.
If a menu is not found, do not move point and return nil.") nil [41725 41977])
            ("texinfo-copy-menu-title" function (:documentation "Return the title of the section preceding the menu as a string.
If such a title cannot be found, return an empty string.  Do not move
point.") nil [41979 42624])
            ("texinfo-copy-menu" function (:documentation "Return the entries of an existing menu as a list.
Start with point just after the word `menu' in the `@menu' line
and leave point on the line before the `@end menu' line.") nil [42626 43479])
            ("texinfo-specific-section-type" function (:documentation "Return the specific type of next section, as a string.
For example, \"unnumberedsubsec\".  Return \"top\" for top node.

Searches forward for a section.  Hence, point must be before the
section whose type will be found.  Does not move point.  Signal an
error if the node is not the top node and a section is not found.") nil [43543 45062])
            ("texinfo-hierarchic-level" function (:documentation "Return the general hierarchical level of the next node in a texinfo file.
Thus, a subheading or appendixsubsec is of type subsection.") nil [45064 45348])
            ("texinfo-update-menu-region-beginning" function
               (:documentation "Locate beginning of higher level section this section is within.
Return position of the beginning of the node line; do not move point.
Thus, if this level is subsection, searches backwards for section node.
Only argument is a string of the general type of section."
                :arguments ("level"))
                nil [45386 46611])
            ("texinfo-update-menu-region-end" function
               (:documentation "Locate end of higher level section this section is within.
Return position; do not move point.  Thus, if this level is a
subsection, find the node for the section this subsection is within.
If level is top or chapter, returns end of file.  Only argument is a
string of the general type of section."
                :arguments ("level"))
                nil [46613 47648])
            ("texinfo-menu-first-node" function
               (:documentation "Locate first node of the section the menu will be placed in.
Return position; do not move point.
The menu will be located just before this position.

First argument is the position of the beginning of the section in
which the menu will be located; second argument is the position of the
end of that region; it limits the search."
                :arguments ("beginning" "end"))
                nil [47650 48165])
            ("texinfo-update-node" function
               (:documentation "Without any prefix argument, update the node in which point is located.
Interactively, a prefix argument means to operate on the region.

Warning: do NOT use this function if your Texinfo file uses @node
lines without the `Next', `Previous', `Up' pointers, because the
result could be an invalid Texinfo file due to known deficiencies
in this command: it does not support @ignore and @if* directives.

The functions for creating or updating nodes and menus, and their
keybindings, are:

    texinfo-update-node (&optional beginning end)    \\[texinfo-update-node]
    texinfo-every-node-update ()                \\[texinfo-every-node-update]
    texinfo-sequential-node-update (&optional region-p)

    texinfo-make-menu (&optional region-p)      \\[texinfo-make-menu]
    texinfo-all-menus-update ()                 \\[texinfo-all-menus-update]
    texinfo-master-menu ()

    texinfo-indent-menu-description (column &optional region-p)

The `texinfo-column-for-description' variable specifies the column to
which menu descriptions are indented. Its default value is 32."
                :user-visible-flag t
                :arguments ("beginning" "end"))
                nil [48190 50046])
            ("texinfo-every-node-update" function
               (:documentation "Update every node in a Texinfo file.

Warning: do NOT use this function if your Texinfo file uses @node
lines without the `Next', `Previous', `Up' pointers, because the
result could be an invalid Texinfo file due to known deficiencies
in this command: it does not support @ignore and @if* directives."
                :user-visible-flag t)
                nil [50048 50543])
            ("texinfo-update-the-node" function (:documentation "Update one node.  Point must be at the beginning of node line.
Leave point at the end of the node line.") nil [50545 51280])
            ("texinfo-top-pointer-case" function (:documentation "Insert pointers in the Top node.  This is a special case.

The `Next' pointer is a pointer to a chapter or section at a lower
hierarchical level in the file.  The `Previous' and `Up' pointers are
to `(dir)'.  Point must be at the beginning of the node line, and is
left at the end of the node line.") nil [51282 52126])
            ("texinfo-check-for-node-name" function (:documentation "Determine whether the node has a node name.  Prompt for one if not.
Point must be at beginning of node line.  Does not move point.") nil [52128 52835])
            ("texinfo-delete-existing-pointers" function (:documentation "Delete `Next', `Previous', and `Up' pointers.
Starts from the current position of the cursor, and searches forward
on the line for a comma and if one is found, deletes the rest of the
line, including the comma.  Leaves point at beginning of line.") nil [52837 53277])
            ("texinfo-find-pointer" function
               (:documentation "Move point to section associated with next, previous, or up pointer.
Return type of pointer (either `normal' or `no-pointer').

The first and second arguments bound the search for a pointer to the
beginning and end, respectively, of the enclosing higher level
section.  The third argument is a string specifying the general kind
of section such as \"chapter\" or \"section\".  When looking for the
`Next' pointer, the section found will be at the same hierarchical
level in the Texinfo file; when looking for the `Previous' pointer,
the section found will be at the same or higher hierarchical level in
the Texinfo file; when looking for the `Up' pointer, the section found
will be at some level higher in the Texinfo file.  The fourth argument
(one of `next', `previous', or `up') specifies whether to find the
`Next', `Previous', or `Up' pointer."
                :arguments ("beginning" "end" "level" "direction"))
                nil [53279 56763])
            ("texinfo-pointer-name" function
               (:documentation "Return the node name preceding the section command.
The argument is the kind of section, either `normal' or `no-pointer'."
                :arguments ("kind"))
                nil [56765 57433])
            ("texinfo-insert-pointer" function
               (:documentation "Insert the `Next', `Previous' or `Up' node name at point.
Move point forward.

The first and second arguments bound the search for a pointer to the
beginning and end, respectively, of the enclosing higher level
section.  The third argument is the hierarchical level of the Texinfo
file, a string such as \"section\".  The fourth argument is direction
towards which the pointer is directed, one of `next', `previous', or `up'."
                :arguments ("beginning" "end" "level" "direction"))
                nil [57435 58070])
            ("texinfo-clean-up-node-line" function (:documentation "Remove extra commas, if any, at end of node line.") nil [58072 58254])
            ("texinfo-sequential-node-update" function
               (:documentation "Update one node (or many) in a Texinfo file with sequential pointers.

This function causes the `Next' or `Previous' pointer to point to the
immediately preceding or following node, even if it is at a higher or
lower hierarchical level in the document.  Continually pressing `n' or
`p' takes you straight through the file.

Without any prefix argument, update the node in which point is located.
Non-nil argument (prefix, if interactive) means update the nodes in the
marked region.

This command makes it awkward to navigate among sections and
subsections; it should be used only for those documents that are meant
to be read like a novel rather than a reference, and for which the
Info `g*' command is inadequate."
                :user-visible-flag t
                :arguments ("region-p"))
                nil [58738 60330])
            ("texinfo-sequentially-update-the-node" function (:documentation "Update one node such that the pointers are sequential.
A `Next' or `Previous' pointer points to any preceding or following node,
regardless of its hierarchical level.") nil [60332 61052])
            ("texinfo-sequentially-insert-pointer" function
               (:documentation "Insert the `Next', `Previous' or `Up' node name at point.
Move point forward.

The first argument is the hierarchical level of the Texinfo file, a
string such as \"section\".  The second argument is direction, one of
`next', `previous', or `up'."
                :arguments ("level" "direction"))
                nil [61054 61507])
            ("texinfo-sequentially-find-pointer" function
               (:documentation "Find next or previous pointer sequentially in Texinfo file, or up pointer.
Move point to section associated with the pointer.  Find point even if
it is in a different section.

Return type of pointer (either `normal' or `no-pointer').

The first argument is a string specifying the general kind of section
such as \"chapter\" or \"section\".  The section found will be at the
same hierarchical level in the Texinfo file, or, in the case of the up
pointer, some level higher.  The second argument (one of `next',
`previous', or `up') specifies whether to find the `Next', `Previous',
or `Up' pointer."
                :arguments ("level" "direction"))
                nil [61509 62796])
            ("texinfo-insert-node-lines" function
               (:documentation "Insert missing `@node' lines in region of Texinfo file.
Non-nil argument (prefix, if interactive) means also to insert the
section titles as node names; and also to insert the section titles as
node names in pre-existing `@node' lines that lack names."
                :user-visible-flag t
                :arguments ("beginning" "end" "title-p"))
                nil [62997 65383])
            ("texinfo-multi-file-included-list" function
               (:documentation "Return a list of the included files in OUTER-FILE."
                :arguments ("outer-file"))
                nil [66530 67077])
            ("texinfo-copy-next-section-title" function (:documentation "Return the name of the immediately following section as a string.

Start with point at the beginning of the node line.  Leave point at the
same place.  If there is no title, returns an empty string.") nil [67079 67860])
            ("texinfo-multi-file-update" function
               (:documentation "Update first node pointers in each file in FILES.
Return a list of the node names.

The first file in the list is an outer file; the remaining are
files included in the outer file with `@include' commands.

If optional arg UPDATE-EVERYTHING non-nil, update every menu and
pointer in each of the included files.

Also update the `Top' level node pointers of the outer file.

Requirements:

  * the first file in the FILES list must be the outer file,
  * each of the included files must contain exactly one highest
    hierarchical level node,
  * this node must be the first node in the included file,
  * each highest hierarchical level node must be of the same type.

Thus, normally, each included file contains one, and only one, chapter.

However, when an included file does not have any node lines in
it, this command does not try to create a menu entry for it.
Consequently, you can include any file, such as a version or an
update file without node lines, not just files that are
chapters."
                :arguments ("files" "update-everything"))
                nil [67862 72317])
            ("texinfo-multi-files-insert-main-menu" function
               (:documentation "Insert formatted main menu at point.
Indents the first line of the description, if any, to the value of
`texinfo-column-for-description'."
                :arguments ("menu-list"))
                nil [72319 73297])
            ("texinfo-multi-file-master-menu-list" function
               (:documentation "Return master menu list from files in FILES-LIST.
Menu entries in each file collected using `texinfo-master-menu-list'.

The first file in FILES-LIST must be the outer file; the others must
be the files included within it.  A main menu must already exist."
                :arguments ("files-list"))
                nil [73299 73915])
            ("texinfo-multiple-files-update" function
               (:documentation "Update first node pointers in each file included in OUTER-FILE;
create or update the `Top' level node pointers and the main menu in
the outer file that refers to such nodes.  This does not create or
update menus or pointers within the included files.

With optional MAKE-MASTER-MENU argument (prefix arg, if interactive),
insert a master menu in OUTER-FILE in addition to creating or updating
pointers in the first @node line in each included file and creating or
updating the `Top' level node pointers of the outer file.  This does
not create or update other menus and pointers within the included
files.

With optional UPDATE-EVERYTHING argument (numeric prefix arg, if
interactive), update all the menus and all the `Next', `Previous', and
`Up' pointers of all the files included in OUTER-FILE before inserting
a master menu in OUTER-FILE.  Also, update the `Top' level node
pointers of OUTER-FILE.  Do NOT invoke this command with a numeric prefix
arg, if your files use @node lines without the `Next', `Previous', `Up'
pointers, because this could produce invalid Texinfo files due to known
deficiencies in `texinfo-update-node': it does not support the @ignore
and @if... directives.

Notes:

  * this command does NOT save any files--you must save the
    outer file and any modified, included files.

  * except for the `Top' node, this command does NOT handle any
    pre-existing nodes in the outer file; hence, indices must be
    enclosed in an included file.

Requirements:

  * each of the included files must contain exactly one highest
    hierarchical level node,
  * this highest node must be the first node in the included file,
  * each highest hierarchical level node must be of the same type.

Thus, normally, each included file contains one, and only one,
chapter."
                :user-visible-flag t
                :arguments ("outer-file" "make-master-menu" "update-everything"))
                nil [73958 78369])
            ("texnfo-upd" package nil nil [78408 78429]))          
      :file "texnfo-upd.el.gz"
      :pointmax 78459
      :fsize 18879
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-183f29c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tildify" customgroup
               (:documentation "Add hard spaces or other text fragments to text buffers."
                :user-visible-flag t)
                nil [2054 2170])
            ("tildify-pattern" variable
               (:documentation "A pattern specifying where to insert hard spaces.

`tildify-buffer' function will replace first capturing group of the regexp with
a hard space (as defined by `tildify-space-string' variable).  (Hint: \\(…\\)
non-capturing groups can be used for grouping prior to the part of the regexp
matching the white space).  The pattern is matched case-sensitive regardless of
the value of `case-fold-search' setting."
                :default-value "\\(?:[,:;(][ 	]*[a]\\|\\<[AIKOSUVZikosuvz]\\)\\([ 	]+\\|[ 	]*
[ 	]*\\)\\(?:\\w\\|[([{\\]\\|<[a-zA-Z]\\)")
                nil [2172 2786])
            ("tildify-pattern-alist" variable (:documentation "Alist specifying where to insert hard spaces.

Each alist item is of the form (MAJOR-MODE REGEXP NUMBER) or
(MAJOR-MODE . SYMBOL).

MAJOR-MODE defines major mode, for which the item applies.  It can be either:
- a symbol equal to the major mode of the buffer to be fixed
- t for default item, this applies to all major modes not defined in another
  alist item

REGEXP is a regular expression matching the part of a text, where a hard space
is missing.  The regexp is always case sensitive, regardless of the current
`case-fold-search' setting.

NUMBER defines the number of the REGEXP subexpression which should be replaced
by the hard space character.

The form (MAJOR-MODE . SYMBOL) defines alias item for MAJOR-MODE.  For this
mode, the item for the mode SYMBOL is looked up in the alist instead.") nil [2788 4039])
            ("make-obsolete-variable" code nil nil [4040 4111])
            ("tildify-space-string" variable
               (:documentation "Representation of a hard (a.k.a. no-break) space in current major mode.

Used by `tildify-buffer' in places where space is required but line
cannot be broken.  For example \"~\" for TeX or \"&#160;\" for SGML,
HTML and XML modes.  A no-break space Unicode character (\"\\u00A0\")
might be used for other modes if compatible encoding is used.

If nil, current major mode has no way to represent a hard space."
                :default-value " ")
                nil [4113 4832])
            ("tildify-string-alist" variable (:documentation "Alist specifying what is a hard space in the current major mode.

Each alist item is of the form (MAJOR-MODE . STRING) or
(MAJOR-MODE . SYMBOL).

MAJOR-MODE defines major mode, for which the item applies.  It can be either:
- a symbol equal to the major mode of the buffer to be fixed
- t for default item, this applies to all major modes not defined in another
  alist item

STRING defines the hard space, which is inserted at places defined by
`tildify-pattern'.  For example it can be \"~\" for TeX or \"&nbsp;\" for SGML.

The form (MAJOR-MODE . SYMBOL) defines alias item for MAJOR-MODE.  For this
mode, the item for the mode SYMBOL is looked up in the alist instead.") nil [4834 5931])
            ("make-obsolete-variable" code nil nil [5932 6031])
            ("tildify-foreach-region-function" variable
               (:documentation "A function calling a callback on portions of the buffer to tildify.

The function is called from `tildify-buffer' function with three arguments: FUNC
BEG END.  FUNC is a callback accepting two arguments -- REG-BEG REG-END --
specifying a portion of buffer to operate on.

The BEG and END arguments may be used to limit portion of the buffer being
scanned, but the `tildify-foreach-region-function' is not required to make use
of them.  IT must, however, terminate as soon as FUNC returns nil.

For example, if `tildify-buffer' function should operate on the whole buffer,
a simple pass through function could be used:
    (setq-local tildify-foreach-region-function
                (lambda (cb beg end) (funcall cb beg end)))
or better still:
    (setq-local tildify-foreach-region-function \\='funcall)
See `tildify-foreach-ignore-environments' function for other ways to use the
variable."
                :default-value 'tildify--deprecated-ignore-evironments)
                nil [6033 7067])
            ("tildify-ignored-environments-alist" variable (:documentation "Alist specifying ignored structured text environments.
Parts of text defined in this alist are skipped without performing hard space
insertion on them.  These setting allow skipping text parts like verbatim or
math environments in TeX or preformatted text in SGML.

Each list element is of the form
  (MAJOR-MODE (BEG-REGEX . END-REGEX) (BEG-REGEX . END-REGEX) ... )

MAJOR-MODE defines major mode, for which the item applies.  It can be either:
- a symbol equal to the major mode of the buffer to be fixed
- t for default item, this applies to all major modes not defined in another
  alist item

See `tildify-foreach-ignore-environments' function for description of BEG-REGEX
and END-REGEX.") nil [7069 8580])
            ("make-obsolete-variable" code nil nil [8581 8705])
            ("tildify-region" function
               (:documentation "Add hard spaces in the region between BEG and END.
See variables `tildify-pattern', `tildify-space-string', and
`tildify-ignored-environments-alist' for information about configuration
parameters.
This function performs no refilling of the changed text.
If DONT-ASK is set, or called interactively with prefix argument, user
won't be prompted for confirmation of each substitution."
                :user-visible-flag t
                :arguments ("beg" "end" "dont-ask"))
                nil [8758 9589])
            ("tildify-buffer" function
               (:documentation "Add hard spaces in the current buffer.
See variables `tildify-pattern', `tildify-space-string', and
`tildify-ignored-environments-alist' for information about configuration
parameters.
This function performs no refilling of the changed text.
If DONT-ASK is set, or called interactively with prefix argument, user
won't be prompted for confirmation of each substitution."
                :user-visible-flag t
                :arguments ("dont-ask"))
                nil [9606 10097])
            ("tildify--pick-alist-entry" function
               (:documentation "Return alist item for the MODE-ALIST in the current major MODE."
                :arguments ("mode-alist" "mode"))
                nil [10133 10456])
            ("make-obsolete" code nil nil [10457 10558])
            ("tildify--deprecated-ignore-evironments" function
               (:documentation "Call CALLBACK on regions between BEG and END.

Call CALLBACK on each region outside of environment to ignore.  Stop scanning
the region as soon as CALLBACK returns nil.  Environments to ignore are
defined by deprecated `tildify-ignored-environments-alist'.   CALLBACK may be
called on portions of the buffer outside of [BEG END)."
                :arguments ("callback" "beg" "end"))
                nil [10560 11157])
            ("make-obsolete" code nil nil [11158 11272])
            ("tildify-foreach-ignore-environments" function
               (:documentation "Outside of environments defined by PAIRS call CALLBACK.

PAIRS is a list of (BEG-REGEX . END-REGEX) cons.  BEG-REGEX is a regexp matching
beginning of a text part to be skipped.  END-REGEX defines end of the
corresponding text part and can be either:
- a regexp matching the end of the skipped text part
- a list of regexps and numbers, which will compose the ending regexp by
  concatenating themselves, while replacing the numbers with corresponding
  subexpressions of BEG-REGEX (this is used to solve cases like
  \\\\verb<character> in TeX).

CALLBACK is a function accepting two arguments -- REG-BEG and REG-END -- that
will be called for portions of the buffer outside of the environments defined by
PAIRS regexps.

The function will return as soon as CALLBACK returns nil or point goes past END.
CALLBACK may be called on portions of the buffer outside of [BEG END); in fact
BEG argument is ignored.

This function is meant to be used to set `tildify-foreach-region-function'
variable.  For example, for an XML file one might use:
  (setq-local tildify-foreach-region-function
    (apply-partially \\='tildify-foreach-ignore-environments
                     \\='((\"<! *--\" . \"-- *>\") (\"<\" . \">\"))))"
                :arguments ("pairs" "callback" "_beg" "end"))
                nil [11274 13123])
            ("tildify--foreach-region" function
               (:documentation "Call CALLBACK on portions of the buffer between BEG and END.

Which portions to call CALLBACK on is determined by
`tildify-foreach-region-function' variable.  This function merely makes sure
CALLBACK is not called with portions of the buffer outside of [BEG END)."
                :arguments ("callback" "beg" "end"))
                nil [13125 13766])
            ("tildify--find-env" function
               (:documentation "Find environment using REGEXP.
Return regexp for the end of the environment found in PAIRS or nil if
no environment was found."
                :arguments ("regexp" "pairs"))
                nil [13768 14475])
            ("tildify-tildify" function
               (:documentation "Add tilde characters in the region between BEG and END.
This function does not do any further checking except of for comments and
macros.

If ASK is nil, perform replace without asking user for confirmation.

Returns (count . response) cons where count is number of string
replacements done and response is one of symbols: t (all right), nil
(quit), force (replace without further questions)."
                :arguments ("beg" "end" "ask"))
                nil [14477 16436])
            ("tildify-space-pattern" variable
               (:documentation "Pattern specifying whether to insert a hard space at point.

If the pattern matches `looking-back', a hard space needs to be inserted instead
of a space at point.  The regexp is always case sensitive, regardless of the
current `case-fold-search' setting."
                :default-value "[,:;(][ 	]*[a]\\|\\<[AIKOSUVWZikosuvwz]")
                nil [16465 16852])
            ("tildify-space-predicates" variable
               (:documentation "A list of predicate functions for `tildify-space' function."
                :default-value '(tildify-space-region-predicate))
                nil [16854 17051])
            ("tildify-double-space-undos" variable
               (:documentation "Weather `tildify-space' should undo hard space when space is typed again."
                :default-value t)
                nil [17053 17224])
            ("tildify-space" function
               (:documentation "Convert space before point into a hard space if the context is right.

If
 * character before point is a space character,
 * character before that has \"w\" character syntax (i.e. it's a word
   constituent),
 * `tildify-space-pattern' matches when `looking-back' (no more than 10
   characters) from before the space character, and
 * all predicates in `tildify-space-predicates' return non-nil,
replace the space character with value of `tildify-space-string' and
return t.

Otherwise, if
 * `tildify-double-space-undos' variable is non-nil,
 * character before point is a space character, and
 * text before that is a hard space as defined by
   `tildify-space-string' variable,
remove the hard space and leave only the space character.

This function is meant to be used as a `post-self-insert-hook'."
                :user-visible-flag t)
                nil [17241 18907])
            ("tildify-space-region-predicate" function (:documentation "Check whether character before point should be tildified.
Based on `tildify-foreach-region-function', check whether character before,
which is assumed to be a space character, should be replaced with a hard space.") nil [18909 19270])
            ("define-minor-mode" code nil nil [19287 20470])
            ("tildify" package nil nil [20495 20513]))          
      :file "tildify.el.gz"
      :pointmax 20540
      :fsize 6250
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-184e438"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode-hook" variable
               (:documentation "Normal hook run when entering Text mode and many related modes."
                :default-value '(text-mode-hook-identify))
                nil [1155 1354])
            ("text-mode-variant" variable (:documentation "Non-nil if this buffer's major mode is a variant of Text mode.
Use (derived-mode-p \\='text-mode) instead.") nil [1356 1497])
            ("text-mode-syntax-table" variable
               (:documentation "Syntax table used while in `text-mode'."
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 ".   " st) (modify-syntax-entry 92 ".   " st) (modify-syntax-entry 39 "w p" st) (modify-syntax-entry 1523 "w   ") (modify-syntax-entry 1524 "w   ") (modify-syntax-entry 183 "w   ") (modify-syntax-entry 8231 "w   ") (modify-syntax-entry 65306 "w   ") st))
                nil [1499 2783])
            ("text-mode-map" variable
               (:documentation "Keymap for `text-mode'.
Many other modes, such as `mail-mode', `outline-mode' and `indented-text-mode',
inherit all the commands defined in this map."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'ispell-complete-word) (define-key map [menu-bar text] (cons "Text" (make-sparse-keymap "Text"))) (bindings--define-key map [menu-bar text toggle-text-mode-auto-fill] '(menu-item "Auto Fill" toggle-text-mode-auto-fill :button (:toggle memq 'turn-on-auto-fill text-mode-hook) :help "Automatically fill text while typing in text modes (Auto Fill mode)")) (bindings--define-key map [menu-bar text paragraph-indent-minor-mode] '(menu-item "Paragraph Indent" paragraph-indent-minor-mode :button (:toggle bound-and-true-p paragraph-indent-minor-mode) :help "Toggle paragraph indent minor mode")) (bindings--define-key map [menu-bar text sep] menu-bar-separator) (bindings--define-key map [menu-bar text center-region] '(menu-item "Center Region" center-region :help "Center the marked region" :enable (region-active-p))) (bindings--define-key map [menu-bar text center-paragraph] '(menu-item "Center Paragraph" center-paragraph :help "Center the current paragraph")) (bindings--define-key map [menu-bar text center-line] '(menu-item "Center Line" center-line :help "Center the current line")) map))
                nil [2785 4336])
            ("define-derived-mode" code nil nil [4340 4892])
            ("define-derived-mode" code nil nil [4894 5468])
            ("define-minor-mode" code nil nil [5470 6653])
            ("defalias" code nil nil [6655 6696])
            ("text-mode-hook-identify" function (:documentation "Mark that this mode has run `text-mode-hook'.
This is how `toggle-text-mode-auto-fill' knows which buffers to operate on.") nil [6912 7123])
            ("toggle-text-mode-auto-fill" function
               (:documentation "Toggle whether to use Auto Fill in Text mode and related modes.
This command affects all buffers that use modes related to Text mode,
both existing buffers and buffers that you subsequently create."
                :user-visible-flag t)
                nil [7125 7832])
            ("define-key" code nil nil [7836 7888])
            ("center-paragraph" function
               (:documentation "Center each nonblank line in the paragraph at or after point.
See `center-line' for more info."
                :user-visible-flag t)
                nil [7890 8190])
            ("center-region" function
               (:documentation "Center each nonblank line starting in the region.
See `center-line' for more info."
                :user-visible-flag t
                :arguments ("from" "to"))
                nil [8192 8616])
            ("define-key" code nil nil [8618 8665])
            ("center-line" function
               (:documentation "Center the line point is on, within the width specified by `fill-column'.
This means adjusting the indentation so that it equals
the distance between the end of the text and `fill-column'.
The argument NLINES says how many lines to center."
                :user-visible-flag t
                :arguments ("nlines"))
                nil [8667 9564])
            ("text-mode" package nil nil [9566 9586]))          
      :file "text-mode.el.gz"
      :pointmax 9615
      :fsize 3384
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c63544"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ispell" include nil nil [1434 1451])
            ("cl-lib" include nil nil [1471 1488])
            ("flyspell" customgroup
               (:documentation "Spell checking on the fly."
                :user-visible-flag t)
                nil [1716 1847])
            ("flyspell-highlight-flag" variable
               (:documentation "How Flyspell should indicate misspelled words.
Non-nil means use highlight, nil means use minibuffer messages."
                :default-value t)
                nil [2074 2262])
            ("flyspell-mark-duplications-flag" variable
               (:documentation "Non-nil means Flyspell reports a repeated word as an error.
See `flyspell-mark-duplications-exceptions' to add exceptions to this rule.
Detection of repeated words is not implemented in
\"large\" regions; see variable `flyspell-large-region'."
                :default-value t)
                nil [2264 2592])
            ("flyspell-case-fold-duplications" variable
               (:documentation "Non-nil means Flyspell matches duplicate words case-insensitively."
                :default-value t)
                nil [2594 2764])
            ("flyspell-mark-duplications-exceptions" variable
               (:documentation "A list of exceptions for duplicated words.
It should be a list of (LANGUAGE . EXCEPTION-LIST).

LANGUAGE is nil, which means the exceptions apply regardless of
the current dictionary, or a regular expression matching the
dictionary name (`ispell-local-dictionary' or
`ispell-dictionary') for which the exceptions should apply.

EXCEPTION-LIST is a list of strings.  The checked word is
downcased before comparing with these exceptions."
                :default-value '((nil "that" "had") ("\\`francais" "nous" "vous")))
                nil [2766 3504])
            ("flyspell-sort-corrections" variable (:documentation "If non-nil, sort the corrections before popping them.
The sorting is controlled by the `flyspell-sort-corrections-function'
variable, and defaults to sorting alphabetically.") nil [3506 3779])
            ("flyspell-sort-corrections-function" variable
               (:documentation "The function used to sort corrections.
This only happens if `flyspell-sort-corrections' is non-nil.  The
function takes three parameters -- the two correction candidates
to be sorted, and the third parameter is the word that's being
corrected."
                :default-value 'flyspell-sort-corrections-alphabetically)
                nil [3781 4174])
            ("flyspell-sort-corrections-alphabetically" function (:arguments ("corr1" "corr2" "_")) nil [4176 4264])
            ("flyspell-sort" function (:arguments ("corrs" "word")) nil [4266 4461])
            ("flyspell-duplicate-distance" variable
               (:documentation "The maximum distance for finding duplicates of unrecognized words.
This applies to the feature that when a word is not found in the dictionary,
if the same spelling occurs elsewhere in the buffer,
Flyspell uses a different face (`flyspell-duplicate') to highlight it.
This variable specifies how far to search to find such a duplicate.
-1 means no limit (search the whole buffer).
0 means do not search for duplicate unrecognized spellings."
                :default-value 400000)
                nil [4463 5063])
            ("flyspell-delay" variable
               (:documentation "The number of seconds to wait before checking, after a \"delayed\" command."
                :default-value 3)
                nil [5065 5208])
            ("flyspell-persistent-highlight" variable
               (:documentation "Non-nil means misspelled words remain highlighted until corrected.
If this variable is nil, only the most recently detected misspelled word
is highlighted, and the highlight is turned off as soon as point moves
off the misspelled word.

Make sure this variable is non-nil if you use `flyspell-region'."
                :default-value t)
                nil [5210 5595])
            ("flyspell-highlight-properties" variable
               (:documentation "Non-nil means highlight incorrect words even if a property exists for this word."
                :default-value t)
                nil [5597 5761])
            ("flyspell-default-delayed-commands" variable
               (:documentation "The standard list of delayed commands for Flyspell.
See `flyspell-delayed-commands'."
                :default-value '(self-insert-command delete-backward-char backward-or-forward-delete-char delete-char scrollbar-vertical-drag backward-delete-char-untabify))
                nil [5763 6125])
            ("flyspell-delayed-commands" variable (:documentation "List of commands that are \"delayed\" for Flyspell mode.
After these commands, Flyspell checking is delayed for a short time,
whose length is specified by `flyspell-delay'.") nil [6127 6391])
            ("flyspell-default-deplacement-commands" variable
               (:documentation "The standard list of deplacement commands for Flyspell.
See variable `flyspell-deplacement-commands'."
                :default-value '(next-line previous-line handle-switch-frame handle-select-window scroll-up scroll-down))
                nil [6393 6716])
            ("flyspell-deplacement-commands" variable (:documentation "List of commands that are \"deplacement\" for Flyspell mode.
After these commands, Flyspell checking is performed only if the previous
command was not the very same command.") nil [6718 7005])
            ("flyspell-issue-welcome-flag" variable
               (:documentation "Non-nil means that Flyspell should display a welcome message when started."
                :default-value t)
                nil [7007 7163])
            ("flyspell-issue-message-flag" variable
               (:documentation "Non-nil means that Flyspell emits messages when checking words."
                :default-value t)
                nil [7165 7310])
            ("flyspell-incorrect-hook" variable (:documentation "List of functions to be called when incorrect words are encountered.
Each function is given three arguments.  The first two
arguments are the beginning and the end of the incorrect region.
The third is either the symbol `doublon' or the list
of possible corrections as returned by `ispell-parse-output'.

If any of the functions return non-nil, the word is not highlighted as
incorrect.") nil [7312 7793])
            ("flyspell-default-dictionary" variable (:documentation "A string that is the name of the default dictionary.
This is passed to the `ispell-change-dictionary' when flyspell is started.
If the variable `ispell-local-dictionary' or `ispell-dictionary' is non-nil
when flyspell is started, the value of that variable is used instead
of `flyspell-default-dictionary' to select the default dictionary.
Otherwise, if `flyspell-default-dictionary' is nil, it means to use
Ispell's ultimate default dictionary.") nil [7795 8377])
            ("flyspell-tex-command-regexp" variable
               (:documentation "A string that is the regular expression that matches TeX commands."
                :default-value "\\(\\(begin\\|end\\)[ 	]*{\\|\\(cite[a-z*]*\\|label\\|ref\\|eqref\\|usepackage\\|documentclass\\)[ 	]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)")
                nil [8379 8679])
            ("flyspell-check-tex-math-command" variable (:documentation "Non-nil means check even inside TeX math environment.
TeX math environments are discovered by `texmathp', implemented
inside AUCTeX package.  That package may be found at
URL `https://www.gnu.org/software/auctex/'") nil [8681 8982])
            ("flyspell-dictionaries-that-consider-dash-as-word-delimiter" variable
               (:documentation "List of dictionary names that consider `-' as word delimiter."
                :default-value '("francais" "deutsch8" "norsk"))
                nil [8984 9219])
            ("flyspell-abbrev-p" variable (:documentation "If non-nil, add correction to abbreviation table.") nil [9221 9364])
            ("flyspell-use-global-abbrev-table-p" variable (:documentation "If non-nil, prefer global abbrev table to local abbrev table.") nil [9366 9538])
            ("flyspell-mode-line-string" variable
               (:documentation "String displayed on the mode line when flyspell is active.
Set this to nil if you don't want a mode line indicator."
                :default-value " Fly")
                nil [9540 9772])
            ("flyspell-large-region" variable
               (:documentation "The threshold that determines if a region is small.
If the region is smaller than this number of characters,
`flyspell-region' checks the words sequentially using regular
flyspell methods.  Else, if the region is large, a new Ispell process is
spawned for speed.

Doubled words are not detected in a large region, because Ispell
does not check for them.

If this variable is nil, all regions are treated as small."
                :default-value 1000)
                nil [9774 10321])
            ("flyspell-insert-function" variable
               (:documentation "Function for inserting word by flyspell upon correction."
                :default-value nil)
                nil [10323 10475])
            ("flyspell-before-incorrect-word-string" variable (:documentation "String used to indicate an incorrect word starting.") nil [10477 10642])
            ("flyspell-after-incorrect-word-string" variable (:documentation "String used to indicate an incorrect word ending.") nil [10644 10806])
            ("flyspell-mode-map" variable nil nil [10808 10834])
            ("flyspell-use-meta-tab" variable
               (:documentation "Non-nil means that flyspell uses M-TAB to correct word."
                :default-value t)
                nil [10836 11134])
            ("flyspell-auto-correct-binding" variable
               (:documentation "The key binding for flyspell auto correction."
                :default-value [(control 59)])
                nil [11136 11286])
            ("define-obsolete-variable-alias" code nil nil [12100 12211])
            ("flyspell-generic-check-word-predicate" variable (:documentation "Function providing per-mode customization over which words are flyspelled.
Returns t to continue checking, nil otherwise.
Flyspell mode sets this variable to whatever is the `flyspell-mode-predicate'
property of the major mode name.") nil [12213 12500])
            ("make-variable-buffer-local" code nil nil [12501 12568])
            ("put" code nil nil [12645 12713])
            ("put" code nil nil [12714 12785])
            ("message-signature-separator" variable nil nil [12786 12822])
            ("mail-mode-flyspell-verify" function (:documentation "Function used for `flyspell-generic-check-word-predicate' in Mail mode.") nil [12823 13886])
            ("put" code nil nil [13963 14037])
            ("texinfo-mode-flyspell-verify" function (:documentation "Function used for `flyspell-generic-check-word-predicate' in Texinfo mode.") nil [14038 14233])
            ("put" code nil nil [14310 14376])
            ("tex-mode-flyspell-verify" function (:documentation "Function used for `flyspell-generic-check-word-predicate' in LaTeX mode.") nil [14377 14813])
            ("put" code nil nil [14890 14958])
            ("put" code nil nil [14959 15027])
            ("put" code nil nil [15028 15096])
            ("sgml-lexical-context" function (:prototype-flag t) nil [15098 15142])
            ("sgml-mode-flyspell-verify" function (:documentation "Function used for `flyspell-generic-check-word-predicate' in SGML mode.
Tag and attribute names are not spell checked, everything else is.

String values of attributes are checked because they can be text
like <img alt=\"Some thing.\">.") nil [15144 15482])
            ("flyspell-prog-text-faces" variable
               (:documentation "Faces corresponding to text in programming-mode buffers."
                :default-value '(font-lock-string-face font-lock-comment-face font-lock-doc-face))
                nil [15709 15872])
            ("flyspell-generic-progmode-verify" function (:documentation "Used for `flyspell-generic-check-word-predicate' in programming modes.") nil [15874 16154])
            ("flyspell--prev-meta-tab-binding" variable nil nil [16229 16269])
            ("flyspell-prog-mode" function
               (:documentation "Turn on `flyspell-mode' for comments and strings."
                :user-visible-flag t)
                nil [16286 16679])
            ("make-overlay" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [16906 16982])
            ("overlayp" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [16983 17059])
            ("overlays-in" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17060 17136])
            ("delete-overlay" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17137 17213])
            ("overlays-at" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17214 17290])
            ("overlay-put" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17291 17367])
            ("overlay-get" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17368 17444])
            ("previous-overlay-change" function
               (:documentation "Overlay compatibility kit."
                :prototype-flag t
                :user-visible-flag t)
                nil [17445 17521])
            ("flyspell-mouse-map" variable
               (:documentation "Keymap for Flyspell to put on erroneous words."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] 'flyspell-correct-word) map))
                nil [17748 17925])
            ("flyspell-mode-map" variable
               (:documentation "Minor mode keymap for Flyspell mode--for the whole buffer."
                :default-value (let ((map (make-sparse-keymap))) (if flyspell-use-meta-tab (define-key map "\211" 'flyspell-auto-correct-word)) (define-key map flyspell-auto-correct-binding 'flyspell-auto-correct-previous-word) (define-key map [(control 44)] 'flyspell-goto-next-error) (define-key map [(control 46)] 'flyspell-auto-correct-word) (define-key map [3 36] 'flyspell-correct-word-before-point) map))
                nil [17927 18435])
            ("flyspell-consider-dash-as-word-delimiter-flag" variable (:documentation "Non-nil means that the `-' char is considered as a word delimiter.") nil [18465 18594])
            ("make-variable-buffer-local" code nil nil [18595 18670])
            ("flyspell-dash-dictionary" variable nil nil [18671 18708])
            ("make-variable-buffer-local" code nil nil [18709 18763])
            ("flyspell-dash-local-dictionary" variable nil nil [18764 18807])
            ("make-variable-buffer-local" code nil nil [18808 18868])
            ("flyspell-incorrect" variable
               (:documentation "Flyspell face for misspelled words."
                :default-value '((((supports :underline (:style wave))) :underline (:style wave :color "Red1")) (t :underline t :inherit error))
                :type "face")
                nil [19095 19330])
            ("flyspell-duplicate" variable
               (:documentation "Flyspell face for words that appear twice in a row.
See also `flyspell-duplicate-distance'."
                :default-value '((((supports :underline (:style wave))) :underline (:style wave :color "DarkOrange")) (t :underline t :inherit warning))
                :type "face")
                nil [19332 19631])
            ("flyspell-overlay" variable nil nil [19633 19662])
            ("define-minor-mode" code nil nil [19984 21332])
            ("turn-on-flyspell" function (:documentation "Unconditionally turn on Flyspell mode.") nil [21349 21439])
            ("turn-off-flyspell" function (:documentation "Unconditionally turn off Flyspell mode.") nil [21456 21549])
            ("custom-add-option" code nil nil [21551 21604])
            ("flyspell-buffers" variable nil nil [21981 22010])
            ("flyspell-minibuffer-p" function
               (:documentation "Is BUFFER a minibuffer?"
                :arguments ("buffer"))
                nil [22237 22404])
            ("flyspell-last-buffer" variable (:documentation "The buffer in which the last flyspell operation took place.") nil [22631 22728])
            ("flyspell-accept-buffer-local-defs" function (:arguments ("force")) nil [22730 23998])
            ("flyspell-hack-local-variables-hook" function nil nil [24000 24176])
            ("flyspell-kill-ispell-hook" function nil nil [24178 24363])
            ("add-hook" code nil nil [24535 24597])
            ("flyspell-mode-on" function (:documentation "Turn Flyspell mode on.  Do not use this; use `flyspell-mode' instead.") nil [24824 26912])
            ("flyspell-delay-commands" function (:documentation "Install the standard set of Flyspell delayed commands.") nil [27139 27358])
            ("flyspell-delay-command" function
               (:documentation "Set COMMAND to be delayed, for Flyspell.
When flyspell `post-command-hook' is invoked because a delayed command
has been used, the current word is not immediately checked.
It will be checked only after `flyspell-delay' seconds."
                :user-visible-flag t
                :arguments ("command"))
                nil [27585 27943])
            ("flyspell-deplacement-commands" function (:documentation "Install the standard set of Flyspell deplacement commands.") nil [28170 28419])
            ("flyspell-deplacement-command" function
               (:documentation "Set COMMAND that implement cursor movements, for Flyspell.
When flyspell `post-command-hook' is invoked because a deplacement command
has been used, the current word is not checked."
                :user-visible-flag t
                :arguments ("command"))
                nil [28646 28974])
            ("flyspell-word-cache-start" variable nil nil [29201 29240])
            ("flyspell-word-cache-end" variable nil nil [29241 29280])
            ("flyspell-word-cache-word" variable nil nil [29281 29320])
            ("flyspell-word-cache-result" variable (:default-value '_) nil [29321 29359])
            ("make-variable-buffer-local" code nil nil [29360 29415])
            ("make-variable-buffer-local" code nil nil [29416 29469])
            ("make-variable-buffer-local" code nil nil [29470 29524])
            ("make-variable-buffer-local" code nil nil [29525 29581])
            ("flyspell-pre-buffer" variable (:documentation "Buffer current before `this-command'.") nil [29958 30034])
            ("flyspell-pre-point" variable (:documentation "Point before running `this-command'") nil [30035 30109])
            ("flyspell-pre-column" variable (:documentation "Column before running `this-command'") nil [30110 30185])
            ("flyspell-pre-pre-buffer" variable nil nil [30186 30222])
            ("flyspell-pre-pre-point" variable nil nil [30223 30259])
            ("make-variable-buffer-local" code nil nil [30260 30308])
            ("flyspell-previous-command" variable (:documentation "The last interactive command checked by Flyspell.") nil [30550 30642])
            ("flyspell-pre-command-hook" function
               (:documentation "Save the current buffer and point for Flyspell's post-command hook."
                :user-visible-flag t)
                nil [30869 31122])
            ("flyspell-mode-off" function (:documentation "Turn Flyspell mode off.") nil [31364 32016])
            ("flyspell-check-pre-word-p" function (:documentation "Return non-nil if we should check the word before point.
More precisely, it applies to the word that was before point
before the current command.") nil [32243 34100])
            ("flyspell-changes" variable nil nil [34477 34506])
            ("make-variable-buffer-local" code nil nil [34507 34553])
            ("flyspell-after-change-function" function
               (:documentation "Save the current buffer and point for Flyspell's post-command hook."
                :arguments ("start" "stop" "_len"))
                nil [34780 34952])
            ("flyspell-check-changed-word-p" function
               (:documentation "Return non-nil when the changed word has to be checked.
The answer depends of several criteria.
Mostly we check word delimiters."
                :arguments ("start" "stop"))
                nil [35179 35677])
            ("flyspell-check-word-p" function (:documentation "Return t when the word at `point' has to be checked.
The answer depends of several criteria.
Mostly we check word delimiters.") nil [35904 37024])
            ("flyspell-debug-signal-no-check" function (:arguments ("msg" "obj")) nil [37251 37480])
            ("flyspell-debug-signal-pre-word-checked" function nil nil [37707 38165])
            ("flyspell-debug-signal-word-checked" function nil nil [38392 40797])
            ("flyspell-debug-signal-changed-checked" function nil nil [41024 41302])
            ("flyspell-post-command-hook" function
               (:documentation "The `post-command-hook' used by flyspell to check a word on-the-fly."
                :user-visible-flag t)
                nil [42354 44644])
            ("flyspell-notify-misspell" function (:arguments ("word" "poss")) nil [44871 45106])
            ("flyspell-word-search-backward" function (:arguments ("word" "bound" "ignore-case")) nil [45333 46330])
            ("flyspell-word-search-forward" function (:arguments ("word" "bound")) nil [46557 47422])
            ("flyspell-word" variable nil nil [47424 47446])
            ("flyspell-word" function
               (:documentation "Spell check a word.
If the optional argument FOLLOWING, or, when called interactively
`ispell-following-word', is non-nil, checks the following (rather
than preceding) word when the cursor is not over a word.  If
optional argument KNOWN-MISSPELLING is non nil considers word a
misspelling and skips redundant spell-checking step.

See `flyspell-get-word' for details of how this finds the word to
spell-check."
                :user-visible-flag t
                :arguments ("following" "known-misspelling"))
                nil [47730 54203])
            ("flyspell-math-tex-command-p" function nil nil [54730 54918])
            ("flyspell-tex-command-p" function
               (:documentation "Return t if WORD is a TeX command."
                :arguments ("word"))
                nil [55145 55505])
            ("defalias" code nil nil [55507 55563])
            ("defalias" code nil nil [55564 55628])
            ("flyspell-get-word" function
               (:documentation "Return the word for spell-checking according to Ispell syntax.
Optional argument FOLLOWING non-nil means to get the following
(rather than preceding) word when the cursor is not over a word.
Optional second argument EXTRA-OTHERCHARS is a regexp of characters
that may be included as part of a word (see `ispell-dictionary-alist').

This finds the word to spell-check by searching for CASECHARS defined
in `ispell-dictionary-alist' for the current dictionary.  Thus, the
word could be far away from point if point is inside whitespace or
punctuation characters, or in text that belongs to a different
language."
                :arguments ("following" "extra-otherchars"))
                nil [55855 58291])
            ("flyspell-small-region" function
               (:documentation "Flyspell text between BEG and END.

This function is intended to work on small regions, as
determined by `flyspell-large-region'."
                :arguments ("beg" "end"))
                nil [58518 59338])
            ("flyspell-external-ispell-process" variable
               (:documentation "The external Flyspell Ispell process."
                :default-value 'nil)
                nil [59565 59652])
            ("flyspell-external-ispell-buffer" variable (:default-value 'nil) nil [59879 59923])
            ("flyspell-large-region-buffer" variable (:default-value 'nil) nil [59924 59965])
            ("flyspell-large-region-beg" variable (:default-value (point-min)) nil [59966 60012])
            ("flyspell-large-region-end" variable (:default-value (point-max)) nil [60013 60059])
            ("flyspell-external-point-words" function (:documentation "Mark words from a buffer listing incorrect words in order of appearance.
The list of incorrect words should be in `flyspell-external-ispell-buffer'.
(We finish by killing that buffer and setting the variable to nil.)
The buffer to mark them in is `flyspell-large-region-buffer'.") nil [60286 65387])
            ("flyspell-process-localwords" function (:arguments ("misspellings-buffer")) nil [65839 67281])
            ("flyspell-check-region-doublons" function
               (:documentation "Check for adjacent duplicated words (doublons) in the given region."
                :arguments ("beg" "end"))
                nil [67458 67873])
            ("flyspell-large-region" function (:arguments ("beg" "end")) nil [68100 70834])
            ("flyspell-region" function
               (:documentation "Flyspell text between BEG and END.

Make sure `flyspell-mode' is turned on if you want the highlight
of a misspelled word removed when you've corrected it."
                :user-visible-flag t
                :arguments ("beg" "end"))
                nil [71526 72093])
            ("flyspell-buffer" function
               (:documentation "Flyspell whole buffer."
                :user-visible-flag t)
                nil [72335 72448])
            ("flyspell-old-buffer-error" variable nil nil [72675 72713])
            ("flyspell-old-pos-error" variable nil nil [72714 72749])
            ("flyspell-goto-next-error" function
               (:documentation "Go to the next previously detected error.
In general FLYSPELL-GOTO-NEXT-ERROR must be used after
FLYSPELL-BUFFER."
                :user-visible-flag t)
                nil [72976 74001])
            ("flyspell-overlay-p" function
               (:documentation "Return true if O is an overlay used by flyspell."
                :arguments ("o"))
                nil [74228 74366])
            ("flyspell-delete-region-overlays" function
               (:documentation "Delete overlays used by flyspell in a given region."
                :arguments ("beg" "end"))
                nil [74743 74896])
            ("flyspell-delete-all-overlays" function (:documentation "Delete all the overlays used by flyspell.") nil [74898 75043])
            ("flyspell-unhighlight-at" function
               (:documentation "Remove the flyspell overlay that are located at POS."
                :arguments ("pos"))
                nil [75270 75676])
            ("flyspell-properties-at-p" function
               (:documentation "Return t if there is a text property at POS, not counting `local-map'.
If variable `flyspell-highlight-properties' is set to nil,
text with properties are not checked.  This function is used to discover
if the character at POS has any other property."
                :arguments ("pos"))
                nil [76053 76563])
            ("make-flyspell-overlay" function
               (:documentation "Allocate an overlay to highlight an incorrect word.
BEG and END specify the range in the buffer of that word.
FACE and MOUSE-FACE specify the `face' and `mouse-face' properties
for the overlay."
                :arguments ("beg" "end" "face" "mouse-face"))
                nil [76790 77998])
            ("flyspell-highlight-incorrect-region" function
               (:documentation "Set up an overlay on a misspelled word, in the buffer from BEG to END.
POSS is usually a list of possible spelling/correction lists,
as returned by `ispell-parse-output'.
It can also be the symbol `doublon', in the case where the word
is itself incorrect, but suspiciously repeated."
                :arguments ("beg" "end" "poss"))
                nil [78225 79380])
            ("flyspell-highlight-duplicate-region" function
               (:documentation "Set up an overlay on a duplicate misspelled word, in the buffer from BEG to END.
POSS is a list of possible spelling/correction lists,
as returned by `ispell-parse-output'."
                :arguments ("beg" "end" "poss"))
                nil [79607 80310])
            ("flyspell-auto-correct-pos" variable nil nil [80537 80575])
            ("flyspell-auto-correct-region" variable nil nil [80576 80617])
            ("flyspell-auto-correct-ring" variable nil nil [80618 80657])
            ("flyspell-auto-correct-word" variable nil nil [80658 80697])
            ("make-variable-buffer-local" code nil nil [80698 80753])
            ("make-variable-buffer-local" code nil nil [80754 80812])
            ("make-variable-buffer-local" code nil nil [80813 80869])
            ("make-variable-buffer-local" code nil nil [80870 80926])
            ("flyspell-check-previous-highlighted-word" function
               (:documentation "Correct the closest previous word that is highlighted as misspelled.
This function scans for a word which starts before point that has been
highlighted by Flyspell as misspelled.  If it finds one, it proposes
a replacement for that word.  With prefix arg N, check the Nth word
before point that's highlighted as misspelled."
                :user-visible-flag t
                :arguments ("arg"))
                nil [81153 82233])
            ("flyspell-display-next-corrections" function (:arguments ("corrections")) nil [82460 83083])
            ("flyspell-abbrev-table" function nil nil [83310 83458])
            ("flyspell-define-abbrev" function (:arguments ("name" "expansion")) nil [83685 83845])
            ("flyspell-auto-correct-word" function
               (:documentation "Correct the current word.
This command proposes various successive corrections for the
current word.  If invoked repeatedly on the same position, it
cycles through the possible corrections of the current word.

See `flyspell-get-word' for details of how this finds the word to
spell-check."
                :user-visible-flag t)
                nil [84072 90787])
            ("flyspell-auto-correct-previous-pos" variable (:documentation "Holds the start of the first incorrect word before point.") nil [91014 91123])
            ("flyspell-auto-correct-previous-hook" function
               (:documentation "Hook to track successive calls to `flyspell-auto-correct-previous-word'.
Sets `flyspell-auto-correct-previous-pos' to nil"
                :user-visible-flag t)
                nil [91350 91747])
            ("flyspell-auto-correct-previous-word" function
               (:documentation "Auto correct the first misspelled word that occurs before point.
But don't look beyond what's visible on the screen."
                :user-visible-flag t
                :arguments ("position"))
                nil [91974 93654])
            ("flyspell-correct-word" function
               (:documentation "Pop up a menu of possible corrections for a misspelled word.
The word checked is the word at the mouse position."
                :user-visible-flag t
                :arguments ("event"))
                nil [93882 94161])
            ("flyspell-correct-word-before-point" function
               (:documentation "Pop up a menu of possible corrections for misspelled word before point.
If EVENT is non-nil, it is the mouse event that invoked this operation;
that controls where to put the menu.
If OPOINT is non-nil, restore point there after adjusting it for replacement."
                :user-visible-flag t
                :arguments ("event" "opoint"))
                nil [94163 95828])
            ("flyspell-do-correct" function
               (:documentation "The popup menu callback."
                :arguments ("replace" "poss" "word" "cursor-location" "start" "end" "save"))
                nil [96051 97587])
            ("flyspell-adjust-cursor-point" function (:arguments ("save" "cursor-location" "old-max")) nil [97815 98133])
            ("flyspell-emacs-popup" function
               (:documentation "The Emacs popup menu."
                :arguments ("event" "poss" "word"))
                nil [98360 99662])
            ("flyspell-maybe-correct-transposition" function
               (:documentation "Check replacements for transposed characters.

If the text between BEG and END is equal to a correction suggested by
Ispell, after transposing two adjacent characters, correct the text,
and return t.

The third arg POSS is either the symbol `doublon' or a list of
possible corrections as returned by `ispell-parse-output'.

This function is meant to be added to `flyspell-incorrect-hook'."
                :arguments ("beg" "end" "poss"))
                nil [99889 100830])
            ("flyspell-maybe-correct-doubling" function
               (:documentation "Check replacements for doubled characters.

If the text between BEG and END is equal to a correction suggested by
Ispell, after removing a pair of doubled characters, correct the text,
and return t.

The third arg POSS is either the symbol `doublon' or a list of
possible corrections as returned by `ispell-parse-output'.

This function is meant to be added to `flyspell-incorrect-hook'."
                :arguments ("beg" "end" "poss"))
                nil [100832 101671])
            ("flyspell-already-abbrevp" function (:arguments ("table" "word")) nil [101898 102014])
            ("flyspell-change-abbrev" function (:arguments ("table" "old" "new")) nil [102241 102325])
            ("flyspell" package nil nil [102327 102346]))          
      :file "flyspell.el.gz"
      :pointmax 102374
      :fsize 21858
      :lastmodtime '(23451 3115 0 0)
      :unmatched-syntax '((close-paren 1488 . 1489) (symbol 1453 . 1470) (open-paren 1452 . 1453)))
    (semanticdb-table "semanticdb-table-1c93788"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paragraphs" customgroup
               (:documentation "Paragraph and sentence parsing."
                :user-visible-flag t)
                nil [1007 1086])
            ("put" code nil nil [1088 1131])
            ("define-minor-mode" code nil nil [1132 2975])
            ("paragraph-start" variable
               (:documentation "Regexp for beginning of a line that starts OR separates paragraphs.
This regexp should match lines that separate paragraphs
and should also match lines that start a paragraph
(and are part of that paragraph).

This is matched against the text at the left margin, which is not necessarily
the beginning of the line, so it should never use \"^\" as an anchor.  This
ensures that the paragraph functions will work equally well within a region
of text indented by a margin setting.

The variable `paragraph-separate' specifies how to distinguish
lines that start paragraphs from lines that separate them.

If the variable `use-hard-newlines' is non-nil, then only lines following a
hard newline are considered to match."
                :default-value "\\|[ 	]*$")
                nil [2977 3777])
            ("put" code nil nil [3778 3830])
            ("paragraph-separate" variable
               (:documentation "Regexp for beginning of a line that separates paragraphs.
If you change this, you may have to change `paragraph-start' also.

This is matched against the text at the left margin, which is not necessarily
the beginning of the line, so it should not use \"^\" as an anchor.  This
ensures that the paragraph functions will work equally within a region of
text indented by a margin setting."
                :default-value "[ 	]*$")
                nil [4165 4635])
            ("put" code nil nil [4636 4691])
            ("sentence-end-double-space" variable
               (:documentation "Non-nil means a single space does not end a sentence.
This is relevant for filling.  See also `sentence-end-without-period'
and `colon-double-space'.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(elisp)Standard Regexps'."
                :default-value t)
                nil [4693 5123])
            ("put" code nil nil [5124 5187])
            ("sentence-end-without-period" variable (:documentation "Non-nil means a sentence will end without a period.
For example, a sentence in Thai text ends with double space but
without a period.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(elisp)Standard Regexps'.") nil [5189 5607])
            ("put" code nil nil [5608 5673])
            ("sentence-end-without-space" variable
               (:documentation "String of characters that end sentence without following spaces.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(elisp)Standard Regexps'."
                :default-value "。．？！")
                nil [5675 6033])
            ("put" code nil nil [6034 6097])
            ("sentence-end" variable (:documentation "Regexp describing the end of a sentence.
The value includes the whitespace following the sentence.
All paragraph boundaries also end sentences, regardless.

The value nil means to use the default value defined by the
function `sentence-end'.  You should always use this function
to obtain the value of this variable.") nil [6099 6531])
            ("put" code nil nil [6532 6590])
            ("sentence-end-base" variable
               (:documentation "Regexp matching the basic end of a sentence, not including following space."
                :default-value "[.?!…‽][]\"'”’)}]*")
                nil [6592 6777])
            ("put" code nil nil [6778 6832])
            ("sentence-end" function (:documentation "Return the regexp describing the end of a sentence.

This function returns either the value of the variable `sentence-end'
if it is non-nil, or the default value constructed from the
variables `sentence-end-base', `sentence-end-double-space',
`sentence-end-without-period' and `sentence-end-without-space'.

The default value specifies that in order to be recognized as the
end of a sentence, the ending period, question mark, or exclamation point
must be followed by two spaces, with perhaps some closing delimiters
in between.  See Info node `(elisp)Standard Regexps'.") nil [6834 7851])
            ("page-delimiter" variable
               (:documentation "Regexp describing line-beginnings that separate pages."
                :default-value "^")
                nil [7853 7983])
            ("put" code nil nil [7984 8035])
            ("paragraph-ignore-fill-prefix" variable (:documentation "Non-nil means the paragraph commands are not affected by `fill-prefix'.
This is desirable in modes where blank lines are the paragraph delimiters.") nil [8037 8270])
            ("put" code nil nil [8271 8337])
            ("forward-paragraph" function
               (:documentation "Move forward to end of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move backward N paragraphs.

A line which `paragraph-start' matches either separates paragraphs
(if `paragraph-separate' matches it also) or is the first line of a paragraph.
A paragraph end is the beginning of a line which is not part of the paragraph
to which the end of the previous line belongs, or the end of the buffer.
Returns the count of paragraphs left to move."
                :user-visible-flag t
                :arguments ("arg"))
                nil [8339 13562])
            ("backward-paragraph" function
               (:documentation "Move backward to start of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move forward N paragraphs.

A paragraph start is the beginning of a line which is a
`paragraph-start' or which is ordinary text and follows a
`paragraph-separate'ing line; except: if the first real line of a
paragraph is preceded by a blank line, the paragraph starts at that
blank line.

See `forward-paragraph' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [13564 14128])
            ("mark-paragraph" function
               (:documentation "Put point at beginning of this paragraph, mark at end.
The paragraph marked is the one that contains point or follows point.

With argument ARG, puts mark at end of a following paragraph, so that
the number of paragraphs marked equals ARG.

If ARG is negative, point is put at end of this paragraph, mark is put
at beginning of this or a previous paragraph.

Interactively (or if ALLOW-EXTEND is non-nil), if this command is
repeated or (in Transient Mark mode) if the mark is active,
it marks the next ARG paragraphs after the ones already marked."
                :user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [14130 15157])
            ("kill-paragraph" function
               (:documentation "Kill forward to end of paragraph.
With arg N, kill forward to Nth end of paragraph;
negative arg -N means kill backward to Nth start of paragraph."
                :user-visible-flag t
                :arguments ("arg"))
                nil [15159 15422])
            ("backward-kill-paragraph" function
               (:documentation "Kill back to start of paragraph.
With arg N, kill back to Nth start of paragraph;
negative arg -N means kill forward to Nth end of paragraph."
                :user-visible-flag t
                :arguments ("arg"))
                nil [15424 15692])
            ("transpose-paragraphs" function
               (:documentation "Interchange the current paragraph with the next one.
With prefix argument ARG a non-zero integer, moves the current
paragraph past ARG paragraphs, leaving point after the current paragraph.
If ARG is positive, moves the current paragraph forwards, if
ARG is negative moves it backwards.  If ARG is zero, exchanges
the current paragraph with the one containing the mark."
                :user-visible-flag t
                :arguments ("arg"))
                nil [15694 16165])
            ("start-of-paragraph-text" function nil nil [16167 16689])
            ("end-of-paragraph-text" function nil nil [16691 16950])
            ("forward-sentence" function
               (:documentation "Move forward to next end of sentence.  With argument, repeat.
With negative argument, move backward repeatedly to start of sentence.

The variable `sentence-end' is a regular expression that matches ends of
sentences.  Also, every paragraph boundary terminates sentences as well."
                :user-visible-flag t
                :arguments ("arg"))
                nil [16952 18368])
            ("repunctuate-sentences" function
               (:documentation "Put two spaces at the end of sentences from point to the end of buffer.
It works using `query-replace-regexp'."
                :user-visible-flag t)
                nil [18370 18619])
            ("backward-sentence" function
               (:documentation "Move backward to start of sentence.  With arg, do it arg times.
See `forward-sentence' for more information."
                :user-visible-flag t
                :arguments ("arg"))
                nil [18622 18850])
            ("kill-sentence" function
               (:documentation "Kill from point to end of sentence.
With arg, repeat; negative arg -N means kill back to Nth start of sentence."
                :user-visible-flag t
                :arguments ("arg"))
                nil [18852 19088])
            ("backward-kill-sentence" function
               (:documentation "Kill back from point to start of sentence.
With arg, repeat, or kill forward to Nth end of sentence if negative arg -N."
                :user-visible-flag t
                :arguments ("arg"))
                nil [19090 19344])
            ("mark-end-of-sentence" function
               (:documentation "Put mark at end of sentence.  Arg works as in `forward-sentence'.
If this command is repeated, it marks the next ARG sentences after the
ones already marked."
                :user-visible-flag t
                :arguments ("arg"))
                nil [19346 19723])
            ("transpose-sentences" function
               (:documentation "Interchange the current sentence with the next one.
With prefix argument ARG a non-zero integer, moves the current
sentence past ARG sentences, leaving point after the current sentence.
If ARG is positive, moves the current sentence forwards, if
ARG is negative moves it backwards.  If ARG is zero, exchanges
the current sentence with the one containing the mark."
                :user-visible-flag t
                :arguments ("arg"))
                nil [19725 20188]))          
      :file "paragraphs.el.gz"
      :pointmax 20218
      :fsize 6005
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17aa1b4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2151 2168])
            ("custom" include nil nil [2225 2242])
            ("easymenu" include nil nil [2244 2263])
            ("reftex-tables-dirty" variable
               (:documentation "Flag showing if tables need to be re-computed."
                :default-value t)
                nil [2265 2346])
            ("reftex-set-dirty" function (:arguments ("symbol" "value")) nil [2368 2463])
            ("reftex-vars" include nil nil [2494 2516])
            ("reftex-loaddefs" include nil nil [2583 2609])
            ("reftex-varioref-vref" function
               (:documentation "Make a varioref reference."
                :prototype-flag t
                :user-visible-flag t)
                nil [3236 3314])
            ("reftex-fancyref-fref" function
               (:documentation "Make a fancyref \\fref reference."
                :prototype-flag t
                :user-visible-flag t)
                nil [3315 3400])
            ("reftex-fancyref-Fref" function
               (:documentation "Make a fancyref \\Fref reference."
                :prototype-flag t
                :user-visible-flag t)
                nil [3401 3486])
            ("reftex-version" variable
               (:documentation "Version string for RefTeX."
                :constant-flag t
                :default-value emacs-version)
                nil [3634 3704])
            ("reftex-mode-map" variable
               (:documentation "Keymap for RefTeX mode."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "=" 'reftex-toc) (define-key map "-" 'reftex-toc-recenter) (define-key map "(" 'reftex-label) (define-key map ")" 'reftex-reference) (define-key map "[" 'reftex-citation) (define-key map "<" 'reftex-index) (define-key map ">" 'reftex-display-index) (define-key map "/" 'reftex-index-selection-or-word) (define-key map "\\" 'reftex-index-phrase-selection-or-word) (define-key map "|" 'reftex-index-visit-phrases-buffer) (define-key map "&" 'reftex-view-crossref) (if (featurep 'xemacs) (unless (key-binding [(shift button2)]) (define-key map [(shift button2)] 'reftex-mouse-view-crossref)) (unless (key-binding [(shift mouse-2)]) (define-key map [(shift mouse-2)] 'reftex-mouse-view-crossref))) (when reftex-extra-bindings (define-key map "t" 'reftex-toc) (define-key map "l" 'reftex-label) (define-key map "r" 'reftex-reference) (define-key map "c" 'reftex-citation) (define-key map "v" 'reftex-view-crossref) (define-key map "g" 'reftex-grep-document) (define-key map "s" 'reftex-search-document)) map))
                nil [3706 5418])
            ("reftex-mode-menu" variable nil nil [5420 5449])
            ("reftex-syntax-table" variable nil nil [5450 5482])
            ("reftex-syntax-table-for-bib" variable nil nil [5483 5523])
            ("reftex--prepare-syntax-tables" function nil nil [5525 6136])
            ("unless" code nil nil [6138 6234])
            ("reftex-auto-view-crossref-timer" variable (:documentation "The timer used for auto-view-crossref.") nil [6360 6447])
            ("reftex-toc-auto-recenter-timer" variable (:documentation "The idle timer used to recenter the toc window.") nil [6448 6543])
            ("turn-on-reftex" function (:documentation "Turn on RefTeX mode.") nil [6560 6628])
            ("put" code nil nil [6630 6700])
            ("put" code nil nil [6701 6743])
            ("define-minor-mode" code nil nil [6759 8980])
            ("reftex-docstruct-symbol" variable nil nil [8982 9014])
            ("reftex-kill-buffer-hook" function (:documentation "Save RefTeX's parse file for this buffer if the information has changed.") nil [9015 9717])
            ("reftex-kill-emacs-hook" function (:documentation "Call `reftex-kill-buffer-hook' on all buffers.") nil [9719 10008])
            ("TeX-master" variable nil nil [10148 10167])
            ("LaTeX-section-hook" variable nil nil [10168 10195])
            ("LaTeX-label-function" variable nil nil [10196 10225])
            ("tex-main-file" variable nil nil [10226 10248])
            ("outline-minor-mode" variable nil nil [10249 10276])
            ("font-lock-mode" variable nil nil [10277 10300])
            ("font-lock-keywords" variable nil nil [10301 10328])
            ("font-lock-fontify-region-function" variable nil nil [10329 10371])
            ("reftex-multifile-symbols" variable
               (:constant-flag t
                :default-value '(reftex-docstruct-symbol))
                nil [10958 11022])
            ("reftex-master-index-list" variable nil nil [11099 11136])
            ("reftex-multifile-index" variable nil nil [11176 11209])
            ("reftex-docstruct-symbol" variable nil nil [11279 11315])
            ("make-variable-buffer-local" code nil nil [11316 11369])
            ("reftex-next-multifile-index" function nil nil [11371 11499])
            ("reftex-tie-multifile-symbols" function (:documentation "Tie the buffer-local symbols to globals connected with the master file.
If the symbols for the current master file do not exist, they are created.") nil [11501 12822])
            ("reftex-untie-multifile-symbols" function (:documentation "Remove ties from multifile symbols, so that next use makes new ones.") nil [12824 13116])
            ("reftex-TeX-master-file" function nil nil [13118 15865])
            ("reftex-is-multi" function nil nil [15867 16080])
            ("reftex-set-cite-format" function
               (:documentation "Set the document-local value of `reftex-cite-format'.
When such a value exists, it overwrites the setting given with
`reftex-cite-format'.  See the documentation of `reftex-cite-format'
for possible values.  This function should be used from AUCTeX style files."
                :arguments ("value"))
                nil [16082 16602])
            ("reftex-get-cite-format" function nil nil [16604 17011])
            ("reftex-add-index-macros" function
               (:documentation "Add index macro descriptions to `reftex-index-macros-style'.
The format of ENTRY-LIST is exactly like `reftex-index-macros'.  See there
for details.
This function makes it possible to support RefTeX from AUCTeX style files.
The entries in ENTRY-LIST will be processed after the user settings in
`reftex-index-entries', and before the defaults.  Any changes made to
`reftex-index-macros-style' will raise a flag to the effect that
the label information is recompiled on next use."
                :arguments ("entry-list"))
                nil [17013 18313])
            ("reftex-ref-style-activate" function
               (:documentation "Activate the referencing style STYLE."
                :arguments ("style"))
                nil [18315 18442])
            ("reftex-ref-style-toggle" function
               (:documentation "Activate or deactivate the referencing style STYLE.
With the optional argument ACTION a certain action can be forced.
The symbol `activate' will activate the style and `deactivate'
will deactivate it."
                :arguments ("style" "action"))
                nil [18444 19536])
            ("reftex-ref-style-list" function (:documentation "Return the list of referencing styles to be active at the moment.") nil [19538 20056])
            ("reftex-type-query-prompt" variable nil nil [20325 20362])
            ("reftex-type-query-help" variable nil nil [20403 20438])
            ("reftex-typekey-to-format-alist" variable nil nil [20490 20533])
            ("reftex-typekey-to-prefix-alist" variable nil nil [20581 20624])
            ("reftex-env-or-mac-alist" variable nil nil [20701 20737])
            ("reftex-special-env-parsers" variable nil nil [20787 20826])
            ("reftex-label-mac-list" variable nil nil [20864 20898])
            ("reftex-label-env-list" variable nil nil [20942 20976])
            ("reftex-typekey-list" variable nil nil [21017 21049])
            ("reftex-words-to-typekey-alist" variable nil nil [21098 21140])
            ("reftex-prefix-to-typekey-alist" variable nil nil [21191 21234])
            ("reftex-last-used-reference" variable (:default-value (list nil nil nil nil)) nil [21290 21348])
            ("reftex-key-to-index-macro-alist" variable nil nil [21396 21440])
            ("reftex-query-index-macro-prompt" variable nil nil [21475 21519])
            ("reftex-query-index-macro-help" variable nil nil [21559 21601])
            ("reftex-no-follow-message" variable (:default-value "No follow-mode into unvisited file.  Press SPC to visit it.") nil [21648 21745])
            ("reftex-no-info-message" variable (:default-value "%s: info not available, use `\\[reftex-view-crossref]' to get it.") nil [21746 21847])
            ("reftex-default-context-position" variable nil nil [21911 21955])
            ("reftex-location-start" variable nil nil [21956 21990])
            ("reftex-call-back-to-this-buffer" variable nil nil [21991 22035])
            ("reftex-select-return-marker" variable (:default-value (make-marker)) nil [22036 22086])
            ("reftex-active-toc" variable nil nil [22087 22117])
            ("reftex-tex-path" variable nil nil [22118 22146])
            ("reftex-bib-path" variable nil nil [22147 22175])
            ("reftex-select-marked" variable nil nil [22176 22209])
            ("reftex-last-follow-point" variable nil nil [22210 22247])
            ("reftex-latex-syntax-table" variable nil nil [22248 22286])
            ("reftex-prefix" variable nil nil [22287 22313])
            ("reftex-section-levels-all" variable nil nil [22314 22352])
            ("reftex-buffers-with-changed-invisibility" variable nil nil [22353 22406])
            ("reftex-callback-fwd" variable (:default-value t) nil [22407 22437])
            ("reftex-last-toc-master" variable (:documentation "Stores the name of the tex file that `reftex-toc' was last run on.") nil [22438 22544])
            ("reftex-recursive-edit-marker" variable (:default-value (make-marker)) nil [22592 22643])
            ("reftex-buffers-to-kill" variable nil nil [22720 22755])
            ("reftex-section-regexp" variable nil nil [22785 22819])
            ("reftex-section-or-include-regexp" variable nil nil [22820 22865])
            ("reftex-index-macro-regexp" variable nil nil [22866 22904])
            ("reftex-index-level-re" variable nil nil [22905 22939])
            ("reftex-index-key-end-re" variable nil nil [22940 22976])
            ("reftex-find-index-entry-regexp-format" variable nil nil [22977 23027])
            ("reftex-everything-regexp" variable nil nil [23028 23065])
            ("reftex-everything-regexp-no-index" variable nil nil [23066 23112])
            ("reftex-index-re" variable nil nil [23113 23141])
            ("reftex-find-citation-regexp-format" variable (:default-value "\\\\\\([a-zA-Z]*cite[*a-zA-Z]*\\*?\\|bibentry\\)\\(\\[[^]]*\\]\\|{[^}]*}\\)*{\\([^}]*,\\)?\\(%s\\)[},]") nil [23142 23292])
            ("reftex-find-reference-format" variable (:default-value "\\\\\\(ref[a-zA-Z]*\\|[a-zA-Z]*ref\\(range\\)?\\)\\*?\\(\\[[^]]*\\]\\|{[^}]*}\\)*{\\(%s\\)}") nil [23293 23426])
            ("reftex-macros-with-labels" variable nil nil [23427 23465])
            ("reftex-macros-with-index" variable nil nil [23466 23503])
            ("reftex-index-macro-alist" variable nil nil [23504 23541])
            ("reftex-find-label-regexp-format" variable nil nil [23542 23586])
            ("reftex-find-label-regexp-format2" variable nil nil [23587 23632])
            ("reftex-section-pre-regexp" variable (:default-value "\\\\") nil [23689 23730])
            ("reftex-section-post-regexp" variable (:default-value "\\*?\\(\\[[^]]*\\]\\)?[[{ 	
\\]") nil [24014 24087])
            ("reftex-section-info-function" variable (:default-value 'reftex-section-info) nil [24088 24146])
            ("reftex-memory" variable (:documentation "Memorizes old variable values to indicate changes in these variables.") nil [24148 24248])
            ("reftex-cache-variables" variable
               (:constant-flag t
                :default-value '(reftex-memory reftex-section-levels-all reftex-env-or-mac-alist reftex-special-env-parsers reftex-macros-with-labels reftex-label-mac-list reftex-label-env-list reftex-typekey-list reftex-typekey-to-format-alist reftex-typekey-to-prefix-alist reftex-words-to-typekey-alist reftex-prefix-to-typekey-alist reftex-type-query-prompt reftex-type-query-help reftex-index-macro-alist reftex-macros-with-index reftex-query-index-macro-prompt reftex-query-index-macro-help reftex-key-to-index-macro-alist reftex-section-regexp reftex-section-or-include-regexp reftex-index-re reftex-everything-regexp reftex-everything-regexp-no-index reftex-find-label-regexp-format reftex-find-label-regexp-format2 reftex-find-index-entry-regexp-format))
                nil [24361 25340])
            ("reftex-ensure-compiled-variables" function nil nil [25342 26598])
            ("reftex-reset-mode" function
               (:documentation "Reset RefTeX Mode.
This will re-compile the configuration information and remove all
current scanning information and the parse file to enforce a rescan
on next use."
                :user-visible-flag t)
                nil [26600 27745])
            ("reftex-reset-scanning-information" function (:documentation "Reset the symbols containing information from buffer scanning.
This enforces rescanning the buffer on next use.") nil [27762 28312])
            ("reftex-erase-all-selection-and-index-buffers" function nil nil [28314 28741])
            ("reftex-compile-variables" function nil nil [28743 43998])
            ("reftex-parse-args" function (:arguments ("macro")) nil [44000 44755])
            ("reftex-access-scan-info" function
               (:documentation "Ensure access to the scanning info for the current file."
                :arguments ("rescan" "file"))
                nil [44876 46398])
            ("reftex-scanning-info-available-p" function (:documentation "Is the scanning info about the current document available?") nil [46400 46673])
            ("reftex-silence-toc-markers" function (:arguments ("list" "n")) nil [46675 46956])
            ("reftex-access-parse-file" function
               (:documentation "Perform ACTION on the parse file (the .rel file).
Valid actions are: readable, restore, read, kill, write."
                :arguments ("action"))
                nil [46958 50404])
            ("reftex-check-parse-consistency" function nil nil [50406 51351])
            ("reftex-select-external-document" function (:arguments ("xr-alist" "xr-index")) nil [51353 52764])
            ("reftex-locate-file" function
               (:documentation "Find FILE of type TYPE in MASTER-DIR or on the path associated with TYPE.
If the file does not have any of the valid extensions for TYPE,
try first the default extension and only then the naked file name.
When DIE is non-nil, throw an error if file not found."
                :arguments ("file" "type" "master-dir" "die"))
                nil [52867 54648])
            ("reftex-find-file-externally" function (:arguments ("file" "type" "master-dir")) nil [54650 55393])
            ("reftex-process-string" function
               (:documentation "Execute PROGRAM with arguments ARGS and return its STDOUT as a string."
                :arguments ("program" "args"))
                nil [55395 55798])
            ("reftex-access-search-path" function (:arguments ("type" "recurse" "master-dir" "file")) nil [55800 58621])
            ("reftex-find-file-on-path" function (:arguments ("file" "path" "def-dir")) nil [58623 59294])
            ("reftex-parse-colon-path" function (:arguments ("path")) nil [59296 59687])
            ("reftex-expand-path" function (:arguments ("path" "default-dir")) nil [59689 60394])
            ("reftex-recursive-directory-list" function (:arguments ("dir")) nil [60396 60859])
            ("reftex-typekey-check" function (:arguments ("typekey" "conf-variable" "n")) nil [60980 61326])
            ("reftex-check-recursive-edit" function nil nil [61328 61647])
            ("reftex-in-comment" function (:documentation "Return non-nil if point is in a comment.") nil [61649 62105])
            ("reftex-no-props" function (:arguments ("string")) nil [62107 62283])
            ("reftex-match-string" function (:arguments ("n")) nil [62285 62453])
            ("reftex-region-active-p" function (:documentation "Should we operate on an active region?") nil [62455 62624])
            ("reftex-kill-buffer" function (:arguments ("buffer")) nil [62626 62762])
            ("reftex-erase-buffer" function (:arguments ("buffer")) nil [62764 63169])
            ("reftex-this-word" function (:arguments ("class")) nil [63171 63446])
            ("reftex-number" function (:arguments ("n" "unit" "ending")) nil [63448 63607])
            ("reftex-all-assq" function (:arguments ("key" "list")) nil [63609 63849])
            ("reftex-all-assoc-string" function (:arguments ("key" "list")) nil [63851 64115])
            ("reftex-last-assoc-before-elt" function (:arguments ("key" "elt" "list" "exclusive")) nil [64117 64780])
            ("reftex-sublist-nth" function (:arguments ("list" "nth" "predicate" "completion")) nil [64782 65339])
            ("reftex-make-selection-buffer-name" function (:arguments ("type" "index")) nil [65341 65554])
            ("reftex-make-index-buffer-name" function (:arguments ("tag" "cnt")) nil [65556 65754])
            ("reftex-truncate" function (:arguments ("string" "ncols" "ellipses" "padding")) nil [65756 66351])
            ("reftex-nearest-match" function (:arguments ("regexp" "max-length")) nil [66353 67187])
            ("reftex-auto-mode-alist" function nil nil [67189 67492])
            ("reftex-window-height" function nil nil [67494 67619])
            ("reftex-enlarge-to-fit" function (:arguments ("buf2" "keep-current")) nil [67621 68469])
            ("reftex-select-with-char" function (:arguments ("prompt" "help-string" "delay-time" "scroll")) nil [68471 70264])
            ("reftex-make-regexp-allow-for-ctrl-m" function (:arguments ("string")) nil [70267 70586])
            ("reftex-get-buffer-visiting" function (:arguments ("file")) nil [70588 70950])
            ("message-stack" variable nil nil [71024 71046])
            ("if" code nil nil [71047 71197])
            ("reftex-visited-files" function (:arguments ("list")) nil [71199 71416])
            ("reftex-get-file-buffer-force" function (:arguments ("file" "mark-to-kill")) nil [71418 73212])
            ("reftex-kill-temporary-buffers" function (:arguments ("buffer")) nil [73214 73895])
            ("reftex-splice-symbols-into-list" function (:arguments ("list" "alist")) nil [73897 74493])
            ("reftex-remove-symbols-from-list" function (:arguments ("list")) nil [74495 74720])
            ("reftex-uniquify" function (:arguments ("list" "sort")) nil [74722 75714])
            ("reftex-uniquify-by-car" function (:arguments ("alist" "keep-list" "sort")) nil [75716 77332])
            ("reftex-remove-if" function
               (:documentation "Nondestructively remove all items from LIST which satisfy PREDICATE."
                :arguments ("predicate" "list"))
                nil [77334 77565])
            ("reftex-abbreviate-title" function (:arguments ("string")) nil [77567 77743])
            ("reftex-convert-string" function
               (:documentation "Convert a string (a sentence) to something shorter.
SPLIT-RE     is the regular expression used to split the string into words.
INVALID-RE   matches characters which are invalid in the final string.
DOT          t means add dots to abbreviated words.
KEEP-FP      t means to keep a final punctuation when applicable.
NWORDS       Number of words to use.
MAXCHAR      Maximum number of characters in the final string.
INVALID      nil: Throw away any words containing stuff matched with INVALID-RE.
             t:   Throw away only the matched part, not the whole word.
ABBREV       nil: Never abbreviate words.
             t:   Always abbreviate words (see `reftex-abbrev-parameters').
             not t and not nil: Abbreviate words if necessary to shorten
                                string below MAXCHAR.
SEP          String separating different words in the output string.
IGNORE-WORDS List of words which should be removed from the string."
                :arguments ("string" "split-re" "invalid-re" "dot" "keep-fp" "nwords" "maxchar" "invalid" "abbrev" "sep" "ignore-words" "downcase"))
                nil [77745 80991])
            ("reftex-nicify-text" function (:arguments ("text")) nil [80993 81790])
            ("reftex-use-fonts" function nil nil [81911 82062])
            ("reftex-refontify" function nil nil [82064 82402])
            ("font-lock-defaults-computed" variable nil nil [82404 82440])
            ("reftex-fontify-select-label-buffer" function (:arguments ("parent-buffer")) nil [82441 83927])
            ("reftex-select-font-lock-fontify-region" function (:arguments ("beg" "end" "_loudly")) nil [83929 84437])
            ("reftex-select-font-lock-unfontify" function (:arguments ("_ignore")) nil [84439 84498])
            ("reftex-verified-face" function (:arguments ("faces")) nil [84500 85008])
            ("defalias" code nil nil [85070 85154])
            ("defalias" code nil nil [85155 85245])
            ("defalias" code nil nil [85246 85339])
            ("defalias" code nil nil [85340 85430])
            ("reftex-highlight-overlays" variable (:default-value [nil nil nil]) nil [85508 85556])
            ("aset" code nil nil [85585 85645])
            ("reftex-overlay-put" code nil nil [85646 85731])
            ("aset" code nil nil [85732 85792])
            ("reftex-overlay-put" code nil nil [85793 85895])
            ("aset" code nil nil [85896 85956])
            ("reftex-overlay-put" code nil nil [85957 86059])
            ("reftex-highlight" function
               (:documentation "Highlight a region with overlay INDEX."
                :arguments ("index" "begin" "end" "buffer"))
                nil [86129 86349])
            ("reftex-unhighlight" function
               (:documentation "Detach overlay INDEX."
                :arguments ("index"))
                nil [86350 86475])
            ("reftex-highlight-shall-die" function nil nil [86477 86662])
            ("bibtex-mode-map" variable nil nil [86763 86787])
            ("eval-after-load" code nil nil [86851 86951])
            ("reftex-isearch-minor-mode" variable nil nil [87108 87146])
            ("make-variable-buffer-local" code nil nil [87147 87202])
            ("easy-menu-define" code nil nil [87204 92177])
            ("reftex-customize" function
               (:documentation "Call the customize function with reftex as argument."
                :user-visible-flag t)
                nil [92179 92308])
            ("reftex-create-customize-menu" function
               (:documentation "Create a full customization menu for RefTeX, insert it into the menu."
                :user-visible-flag t)
                nil [92310 93040])
            ("reftex-show-commentary" function
               (:documentation "Use the finder to view the file documentation from `reftex.el'."
                :user-visible-flag t)
                nil [93053 93204])
            ("reftex-info" function
               (:documentation "Read documentation for RefTeX in the info system.
With optional NODE, go directly to that node."
                :user-visible-flag t
                :arguments ("node"))
                nil [93206 93402])
            ("reftex-report-bug" function
               (:documentation "Report a bug in RefTeX.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your RefTeX version and configuration."
                :user-visible-flag t)
                nil [93404 94551])
            ("add-hook" code nil nil [94634 94687])
            ("unless" code nil nil [94688 94766])
            ("run-hooks" code nil nil [94849 94878])
            ("setq" code nil nil [94961 94989])
            ("reftex" package nil nil [95033 95050]))          
      :file "reftex.el.gz"
      :pointmax 95076
      :fsize 25242
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 2463 . 2464) (symbol 2349 . 2365) (open-paren 2348 . 2349) (close-paren 2168 . 2169) (symbol 2133 . 2150) (open-paren 2132 . 2133)))
    (semanticdb-table "semanticdb-table-221c98c"
      :file "reftex-loaddefs.el"
      :fsize 24651
      :lastmodtime '(23455 961 0 0)))
  :file "!usr!local!share!emacs!27.0.50!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
