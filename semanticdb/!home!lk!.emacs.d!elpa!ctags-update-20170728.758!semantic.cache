;; Object semanticdb-project-database-file-1c96b34
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1c96b34"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1c02cf8"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "ctags-update-autoloads.el"
      :pointmax 363
      :fsize 2356
      :lastmodtime '(23398 10351 497672 550000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-21e56f4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("etags" include nil nil [2225 2241])
            ("ctags-update" customgroup
               (:documentation "auto update TAGS in parent directory using `exuberant-ctags'"
                :user-visible-flag t)
                nil [2243 2376])
            ("ctags-update-command" variable
               (:documentation "it only support `exuberant-ctags'
take care it is not the ctags in `emacs-VERSION/bin/'
you should download `exuberant-ctags' and make sure
the ctags is under $PATH before `emacs-VERSION/bin/'"
                :default-value "ctags")
                nil [2378 2654])
            ("ctags-update-delay-seconds" variable
               (:documentation "in `after-save-hook' current-time - last-time must bigger than this value,
then `ctags-update' will be called"
                :default-value (* 5 60))
                nil [2656 2867])
            ("ctags-update-other-options" variable
               (:documentation "other options for ctags"
                :default-value (list "--fields=+iaSt" "--extra=+q" "--exclude='*.elc'" "--exclude='*.class'" "--exclude='.git'" "--exclude='.svn'" "--exclude='SCCS'" "--exclude='RCS'" "--exclude='CVS'" "--exclude='EIFGEN'"))
                nil [2869 3231])
            ("ctags-update-lighter" variable
               (:documentation "Lighter displayed in mode line when `ctags-auto-update-mode'
is enabled."
                :default-value " ctagsU")
                nil [3233 3391])
            ("ctags-update-prompt-create-tags" variable
               (:documentation "Promtp create `TAGS' when tag file not exists."
                :default-value t)
                nil [3393 3528])
            ("ctags-update-last-update-time" variable
               (:documentation "make sure when user first call `ctags-update' it can run immediately"
                :default-value (- (float-time (current-time)) ctags-update-delay-seconds 1))
                nil [3530 3704])
            ("ctags-auto-update-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) map)) nil [3706 3786])
            ("ctags-auto-update-mode-hook" variable nil nil [3788 3829])
            ("ctags-update-use-xemacs-etags-p" variable
               (:documentation "Use XEmacs etags?"
                :default-value (fboundp 'get-tag-table-buffer))
                nil [3831 3927])
            ("ctags-update-file-truename" function
               (:documentation "empty function"
                :arguments ("filename" "counter" "prev-dirs"))
                nil [3929 4021])
            ("if" code nil nil [4023 4162])
            ("if" code nil nil [4163 4320])
            ("ctags-update-native-w32-p" function nil nil [4323 4466])
            ("ctags-update-command-args" function
               (:documentation "`tagfile-full-path' is the full path of TAGS file . when files in or under the same directory
with `tagfile-full-path' changed ,then TAGS file need to be updated. this function will generate
the command to update TAGS"
                :arguments ("tagfile-full-path" "save-tagfile-to-as"))
                nil [4468 5249])
            ("ctags-update-get-command" function
               (:documentation "get the full command as string."
                :arguments ("command" "command-args"))
                nil [5251 5403])
            ("ctags-update-get-system-path" function
               (:documentation "when on windows `expand-file-name' will translate from \\ to /
some times it is not needed . then this function is used to translate /
to \\ when on windows"
                :arguments ("file-path"))
                nil [5405 5707])
            ("ctags-update-find-tags-file" function (:documentation "recursively searches each parent directory for a file named 'TAGS' and returns the
path to that file or nil if a tags file is not found. Returns nil if the buffer is
not visiting a file") nil [5709 6077])
            ("ctags-update-check-interval" function nil nil [6079 6227])
            ("ctags-update-triggered-by-tags" function
               (:documentation "`ctags-update' should not be called when TAGS file call `after-save-hook'.
this return t if current buffer file name is TAGS."
                :arguments ("tags"))
                nil [6229 6698])
            ("ctags-update-process-sentinel" function (:arguments ("proc" "_change")) nil [6700 7081])
            ("ctags-update-how-to-update" function
               (:documentation "return a tagfile"
                :arguments ("is-interactive"))
                nil [7083 8017])
            ("ctags-update" function
               (:documentation "ctags-update in parent directory using `exuberant-ctags'.
1. you can call this function directly,
2. enable `ctags-auto-update-mode',
3. with prefix `C-u' then you can generate a new TAGS file in selected directory,
4. with prefix `C-uC-u' save the command to kill-ring instead of execute it."
                :user-visible-flag t
                :arguments ("args"))
                nil [8034 10105])
            ("define-minor-mode" code nil nil [10122 10490])
            ("turn-on-ctags-auto-update-mode" function
               (:documentation "turn on `ctags-auto-update-mode'."
                :user-visible-flag t)
                nil [10507 10630])
            ("define-global-minor-mode" code nil nil [10647 10761])
            ("ctags-update" package nil nil [10763 10786]))          
      :file "ctags-update.el"
      :pointmax 10905
      :fsize 10922
      :lastmodtime '(23398 10351 271003 581000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!ctags-update-20170728.758!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
