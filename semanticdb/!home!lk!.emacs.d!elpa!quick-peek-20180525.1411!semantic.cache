;; Object semanticdb-project-database-file-4c80768
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4c80768"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4c80748"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "quick-peek-autoloads.el"
      :pointmax 359
      :fsize 1183
      :lastmodtime '(23398 9546 956114 898000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4c807b8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1614 1631])
            ("quick-peek" customgroup
               (:documentation "Customization group for the `quick-peek' package."
                :user-visible-flag t)
                nil [1633 1771])
            ("quick-peek-position" variable
               (:documentation "Position of quick-peek windows."
                :default-value 'below)
                nil [1773 1991])
            ("defvar-local" code nil nil [2008 2098])
            ("quick-peek-background-face" variable
               (:documentation "Face added to all text in quick-peek windows."
                :default-value '((t :inherit default))
                :type "face")
                nil [2111 2244])
            ("quick-peek-border-face" variable
               (:documentation "Face added to quick-peek window borders."
                :default-value '((t :height 1))
                :type "face")
                nil [2246 2363])
            ("quick-peek-padding-face" variable
               (:documentation "Face added to quick-peek window padding."
                :default-value '((t :height 0.15))
                :type "face")
                nil [2365 2486])
            ("quick-peek--point-at-bovl" function (:documentation "Return point that `beginning-of-visual-line' would jump to.") nil [2503 2665])
            ("quick-peek--count-visible-lines-under" function
               (:documentation "Count number of lines visible in selected window under POS."
                :arguments ("pos"))
                nil [2667 3065])
            ("quick-peek--text-width" function
               (:documentation "Measure the width of the text between FROM and TO.
Results are meaningful only if FROM and TO are on the same line."
                :arguments ("from" "to"))
                nil [3067 3394])
            ("quick-peek--max-line-length" function (:documentation "Return the max line width in columns in the current buffer.") nil [3398 3647])
            ("quick-peek--truncate-buffer" function
               (:documentation "Truncate current buffer N-LINES after START.
Optionally adds an ELLIPSIS at the end."
                :arguments ("start" "n-lines" "ellipsis"))
                nil [3939 4361])
            ("quick-peek--prefix-all-lines" function
               (:documentation "Add a PREFIX to all lines of the current buffer."
                :arguments ("prefix"))
                nil [4363 4578])
            ("quick-peek--insert-spacer" function
               (:documentation "Insert a thin horizontal line at POS.
Line is surrounded by STR-BEFORE and STR-AFTER."
                :arguments ("pos" "str-before" "str-after"))
                nil [4580 5071])
            ("quick-peek--prepare-overlay-string" function
               (:documentation "Prepare STR for display in a quick peek window.
Return value is a string that includes properties surrounding it
with two thin horizontal lines, indented by OFFSET, and truncated
to show at most MAX-LINES.  If text doesn't fit horizontally
between OFFSET and the end of the window, it will be moved left."
                :arguments ("str" "offset" "max-lines"))
                nil [5083 6155])
            ("quick-peek-overlay-contents" function
               (:documentation "Return the raw string contents of quick-peek overlay OV.

Use `(setf (quick-peek-overlay-contents ov) str)' to change an
overlay's contents.  Setting an overlay's contents doesn't
automatically update it; you must call `quick-peek-update' for
that.

Most programs should not need to set this property directly, as
it is only useful if you intend to build quick-peek windows
piecemeal (most programs should call `quick-peek-show' directly
instead)."
                :arguments ("ov"))
                nil [6157 6690])
            ("gv-define-setter" code nil nil [6692 6795])
            ("quick-peek--compute-height" function
               (:documentation "Compute an appropriate height for OV on the current line.

MIN-H and MAX-H are bounds on the height.  If MAX-H is `none',
let the inline window expand beyond the end of the selected Emacs
window."
                :arguments ("_ov" "min-h" "max-h"))
                nil [6797 7252])
            ("quick-peek-update" function
               (:documentation "Redraw quick-peek overlay OV.

MIN-H and MAX-H are bounds on the height of the window.  If MAX-H
is `none', let the inline window expand beyond the end of the
selected Emacs window.

Calling this method is only useful after directly setting the
contents of a quick-peek overlay.  Most programs should not need
to do so (call `quick-peek-show' directly instead)."
                :arguments ("ov" "min-h" "max-h"))
                nil [7254 8213])
            ("quick-peek-overlay-p" function
               (:documentation "Check if OV is a quick-peek overlay."
                :arguments ("ov"))
                nil [8215 8320])
            ("quick-peek-overlay-at" function
               (:documentation "Find overlay for line at POS."
                :arguments ("pos"))
                nil [8337 8509])
            ("quick-peek-overlay-ensure-at" function
               (:documentation "Find or create a quick-peek overlay for the line at POS.

Typical code should not need this method; use `quick-peek-show'
instead."
                :arguments ("pos"))
                nil [8511 8953])
            ("quick-peek--show-at" function
               (:documentation "Show STR in inline window at POS.
MIN-H and MAX-H are bounds on the height of the window.  If MAX-H
is `none', let the inline window expand beyond the end of the
selected Emacs window."
                :arguments ("pos" "str" "min-h" "max-h"))
                nil [8955 9340])
            ("quick-peek-show" function
               (:documentation "Show STR in an inline window at POS.
MIN-H (default: 4) and MAX-H (default: 16) are bounds on the
height of the window.  Setting MAX-H to `none' allows the inline
window to expand past the bottom of the current Emacs window."
                :arguments ("str" "pos" "min-h" "max-h"))
                nil [9357 9707])
            ("quick-peek--overlay-matches-pos" function
               (:documentation "Check if OV is a quick-peek overlay covering POS."
                :arguments ("ov" "pos"))
                nil [9709 9912])
            ("quick-peek-hide" function
               (:documentation "Hide inline windows.
With non-nil POS, clear only overlays on line of POS.
Return the number of overlays hidden."
                :user-visible-flag t
                :arguments ("pos"))
                nil [9929 10403])
            ("quick-peek" package nil nil [10405 10426]))          
      :file "quick-peek.el"
      :pointmax 10455
      :fsize 10500
      :lastmodtime '(23451 48552 265202 973000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!quick-peek-20180525.1411!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
