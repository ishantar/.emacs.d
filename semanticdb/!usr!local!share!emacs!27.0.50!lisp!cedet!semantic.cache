;; Object semanticdb-project-database-file-d0ea34
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-d0ea34"
  :tables
  (list
    (semanticdb-table "semanticdb-table-d0ea14"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1380 1396])
            ("semantic/tag" include nil nil [1397 1420])
            ("semantic/lex" include nil nil [1421 1444])
            ("cl-lib" include nil nil [1445 1462])
            ("semantic-version" variable
               (:documentation "Current version of Semantic."
                :default-value "2.2")
                nil [1464 1528])
            ("declare-function" code nil nil [1530 1575])
            ("declare-function" code nil nil [1576 1647])
            ("semantic-require-version" function
               (:documentation "Non-nil if this version of Semantic does not satisfy a specific version.
Arguments can be:

  (MAJOR MINOR &optional BETA)

  Values MAJOR and MINOR must be integers.  BETA can be an integer, or
excluded if a released version is required.

It is assumed that if the current version is newer than that specified,
everything passes.  Exceptions occur when known incompatibilities are
introduced."
                :arguments ("major" "minor" "beta"))
                nil [1649 2227])
            ("semantic" customgroup
               (:documentation "Parser Generator and parser framework."
                :user-visible-flag t)
                nil [2229 2311])
            ("semantic-faces" customgroup
               (:documentation "Faces used for Semantic enabled tools."
                :user-visible-flag t)
                nil [2313 2404])
            ("semantic/fw" include nil nil [2406 2428])
            ("semantic--parse-table" variable (:documentation "Variable that defines how to parse top level items in a buffer.
This variable is for internal use only, and its content depends on the
external parser used.") nil [2479 2674])
            ("make-variable-buffer-local" code nil nil [2675 2726])
            ("semantic-varalias-obsolete" code nil nil [2727 2824])
            ("semantic-symbol->name-assoc-list" variable
               (:documentation "Association between symbols returned, and a string.
The string is used to represent a group of objects of the given type.
It is sometimes useful for a language to use a different string
in place of the default, even though that language will still
return a symbol.  For example, Java return's includes, but the
string can be replaced with `Imports'."
                :default-value '((type . "Types") (variable . "Variables") (function . "Functions") (include . "Dependencies") (package . "Provides")))
                nil [2826 3365])
            ("make-variable-buffer-local" code nil nil [3366 3428])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable (:documentation "Like `semantic-symbol->name-assoc-list' for type parts.
Some tags that have children (see `semantic-tag-children-compatibility')
will want to define the names of classes of tags differently than at
the top level.  For example, in C++, a Function may be called a
Method.  In addition, there may be new types of tags that exist only
in classes, such as protection labels.") nil [3430 3864])
            ("make-variable-buffer-local" code nil nil [3865 3942])
            ("semantic-case-fold" variable (:documentation "Value for `case-fold-search' when parsing.") nil [3944 4022])
            ("make-variable-buffer-local" code nil nil [4023 4071])
            ("semantic-expand-nonterminal" variable (:documentation "Function to call for each nonterminal production.
Return a list of non-terminals derived from the first argument, or nil
if it does not need to be expanded.
Languages with compound definitions should use this function to expand
from one compound symbol into several.  For example, in C the definition
  int a, b;
is easily parsed into one tag.  This function should take this
compound tag and turn it into two tags, one for A, and the other for B.") nil [4073 4565])
            ("make-variable-buffer-local" code nil nil [4566 4623])
            ("semantic--buffer-cache" variable (:documentation "A cache of the fully parsed buffer.
If no significant changes have been made (based on the state) then
this is returned instead of re-parsing the buffer.

  DO NOT USE THIS VARIABLE IN PROGRAMS.

If you need a tag list, use `semantic-fetch-tags'.  If you need the
cached values for some reason, chances are you can add a hook to
`semantic-after-toplevel-cache-change-hook'.") nil [4625 5038])
            ("make-variable-buffer-local" code nil nil [5039 5091])
            ("semantic-varalias-obsolete" code nil nil [5092 5190])
            ("semantic-unmatched-syntax-cache" variable (:documentation "A cached copy of unmatched syntax tokens.") nil [5192 5282])
            ("make-variable-buffer-local" code nil nil [5283 5344])
            ("semantic-unmatched-syntax-cache-check" variable (:documentation "Non-nil if the unmatched syntax cache is out of date.
This is tracked with `semantic-change-function'.") nil [5346 5503])
            ("make-variable-buffer-local" code nil nil [5504 5571])
            ("semantic-edits-are-safe" variable (:documentation "When non-nil, modifications do not require a reparse.
This prevents tags from being marked dirty, and it prevents top level
edits from causing a cache check.
Use this when writing programs that could cause a full reparse, but
will not change the tag structure, such as adding or updating
`top-level' comments.") nil [5573 5923])
            ("semantic-unmatched-syntax-hook" variable (:documentation "Hooks run when Semantic detects syntax not matched in a grammar.
Each individual piece of syntax (such as a symbol or punctuation
character) is called with this hook when it doesn't match in the
grammar, and multiple unmatched syntax elements are not grouped
together.  Each hook is called with one argument, which is a list
of syntax tokens created by the semantic lexer.  Use the functions
`semantic-lex-token-start', `semantic-lex-token-end' and
`semantic-lex-token-text' to get information about these tokens.
The current buffer is the buffer these tokens are derived from.") nil [5925 6550])
            ("semantic--before-fetch-tags-hook" variable (:documentation "Hooks run before a buffer is parsed for tags.
It is called before any request for tags is made via the function
`semantic-fetch-tags' by an application.
If any hook returns a nil value, the cached value is returned
immediately, even if it is empty.") nil [6552 6850])
            ("semantic-varalias-obsolete" code nil nil [6851 6969])
            ("semantic-after-toplevel-bovinate-hook" variable (:documentation "Hooks run after a toplevel parse.
It is not run if the toplevel parse command is called, and buffer does
not need to be fully reparsed.
For language specific hooks, make sure you define this as a local hook.

This hook should not be used any more.
Use `semantic-after-toplevel-cache-change-hook' instead.") nil [6971 7330])
            ("make-obsolete-variable" code nil nil [7331 7405])
            ("semantic-after-toplevel-cache-change-hook" variable (:documentation "Hooks run after the buffer tag list has changed.
This list will change when a buffer is reparsed, or when the tag list
in a buffer is cleared.  It is *NOT* called if the current tag list is
partially reparsed.

Hook functions must take one argument, which is the new list of tags
associated with this buffer.

For language specific hooks, make sure you define this as a local hook.") nil [7407 7847])
            ("semantic-before-toplevel-cache-flush-hook" variable (:documentation "Hooks run before the toplevel tag cache is flushed.
For language specific hooks, make sure you define this as a local
hook.  This hook is called before a corresponding
`semantic-after-toplevel-cache-change-hook' which is also called
during a flush when the cache is given a new value of nil.") nil [7849 8199])
            ("semantic-dump-parse" variable (:documentation "When non-nil, dump parsing information.") nil [8201 8316])
            ("semantic-parser-name" variable
               (:documentation "Optional name of the parser used to parse input stream."
                :default-value "LL")
                nil [8318 8412])
            ("make-variable-buffer-local" code nil nil [8413 8463])
            ("semantic--completion-cache" variable (:documentation "Internal variable used by `semantic-complete-symbol'.") nil [8465 8562])
            ("make-variable-buffer-local" code nil nil [8563 8619])
            ("semantic-parse-tree-state" variable
               (:documentation "State of the current parse tree."
                :default-value 'needs-rebuild)
                nil [8661 8747])
            ("make-variable-buffer-local" code nil nil [8748 8803])
            ("semantic-parse-tree-unparseable" function (:documentation "Indicate that the current buffer is unparseable.
It is also true that the parse tree will need either updating or
a rebuild.  This state will be changed when the user edits the buffer.") nil [8805 9088])
            ("semantic-parse-tree-unparseable-p" function (:documentation "Return non-nil if the current buffer has been marked unparseable.") nil [9090 9254])
            ("semantic-parse-tree-set-needs-update" function (:documentation "Indicate that the current parse tree needs to be updated.
The parse tree can be updated by `semantic-parse-changes'.") nil [9256 9477])
            ("semantic-parse-tree-needs-update-p" function (:documentation "Return non-nil if the current parse tree needs to be updated.") nil [9479 9641])
            ("semantic-parse-tree-set-needs-rebuild" function (:documentation "Indicate that the current parse tree needs to be rebuilt.
The parse tree must be rebuilt by `semantic-parse-region'.") nil [9643 9866])
            ("semantic-parse-tree-needs-rebuild-p" function (:documentation "Return non-nil if the current parse tree needs to be rebuilt.") nil [9868 10032])
            ("semantic-parse-tree-set-up-to-date" function (:documentation "Indicate that the current parse tree is up to date.") nil [10034 10178])
            ("semantic-parse-tree-up-to-date-p" function (:documentation "Return non-nil if the current parse tree is up to date.") nil [10180 10322])
            ("semantic-inhibit-functions" variable (:documentation "List of functions to call with no arguments before Semantic is setup.
If any of these functions returns non-nil, the current buffer is not
setup to use Semantic.") nil [10359 10600])
            ("semantic-new-buffer-setup-functions" variable
               (:documentation "Alist of functions to call to set up Semantic parsing in the buffer.
Each element has the form (MODE . FN), where MODE is a value of
`major-mode' for the buffer and FN is the corresponding function
to call, with no arguments, to set up the parser.

These functions are called by `semantic-new-buffer-fcn', before
`semantic-inhibit-functions'."
                :default-value '((c-mode . semantic-default-c-setup) (c++-mode . semantic-default-c-setup) (html-mode . semantic-default-html-setup) (java-mode . wisent-java-default-setup) (js-mode . wisent-javascript-setup-parser) (python-mode . wisent-python-default-setup) (scheme-mode . semantic-default-scheme-setup) (srecode-template-mode . srecode-template-setup-parser) (texinfo-mode . semantic-default-texi-setup) (makefile-automake-mode . semantic-default-make-setup) (makefile-gmake-mode . semantic-default-make-setup) (makefile-makepp-mode . semantic-default-make-setup) (makefile-bsdmake-mode . semantic-default-make-setup) (makefile-imake-mode . semantic-default-make-setup) (makefile-mode . semantic-default-make-setup)))
                nil [10602 11833])
            ("semantic-init-hook" variable (:documentation "Hook run when a buffer is initialized with a parsing table.") nil [11835 11930])
            ("semantic-init-mode-hook" variable (:documentation "Hook run when a buffer of a particular mode is initialized.") nil [11932 12032])
            ("make-variable-buffer-local" code nil nil [12033 12086])
            ("semantic-init-db-hook" variable (:documentation "Hook run when a buffer is initialized with a parsing table for DBs.
This hook is for database functions which intend to swap in a tag table.
This guarantees that the DB will go before other modes that require
a parse of the buffer.") nil [12088 12358])
            ("semantic-varalias-obsolete" code nil nil [12360 12443])
            ("semantic-varalias-obsolete" code nil nil [12444 12537])
            ("semantic-varalias-obsolete" code nil nil [12538 12627])
            ("semantic-error-if-unparsed" function (:documentation "Raise an error if current buffer was not parsed by Semantic.") nil [12629 12826])
            ("semantic--umatched-syntax-needs-refresh-p" function (:documentation "Return non-nil if the unmatched syntax cache needs a refresh.
That is, if it is dirty or if the current parse tree isn't up to date.") nil [12828 13113])
            ("semantic-new-buffer-fcn" function (:documentation "Setup the current buffer to use Semantic.
If the major mode is ready for Semantic, and no
`semantic-inhibit-functions' disabled it, the current buffer is setup
to use Semantic, and `semantic-init-hook' is run.") nil [13115 14752])
            ("semantic-fetch-tags-fast" function (:documentation "For use in a hook.  When only a partial reparse is needed, reparse.") nil [14754 14998])
            ("condition-case" code nil nil [15046 15092])
            ("semantic-edebug" variable (:documentation "When non-nil, activate the interactive parsing debugger.
Do not set this yourself.  Call `semantic-debug'.") nil [15095 15234])
            ("semantic-elapsed-time" function
               (:documentation "Copied from elp.el.  Was `elp-elapsed-time'.
Arguments START and END bound the time being calculated."
                :arguments ("start" "end"))
                nil [15236 15427])
            ("bovinate" function
               (:documentation "Parse the current buffer.  Show output in a temp buffer.
Optional argument CLEAR will clear the cache before parsing.
If CLEAR is negative, it will do a full reparse, and also display
the output buffer."
                :user-visible-flag t
                :arguments ("clear"))
                nil [15429 16162])
            ("semantic-parse-stream" function
               (:overloadable t
                :documentation "Parse STREAM, starting at the first NONTERMINAL rule.
For bovine and wisent based parsers, STREAM is from the output of
`semantic-lex', and NONTERMINAL is a rule in the appropriate language
specific rules file.
The default parser table used for bovine or wisent based parsers is
`semantic--parse-table'.

Must return a list: (STREAM TAGS) where STREAM is the unused elements
from STREAM, and TAGS is the list of semantic tags found; usually only
one tag is returned with the exception of compound statements."
                :arguments ("stream" "nonterminal"))
                nil [16271 16857])
            ("semantic-parse-changes" function
               (:overloadable t
                :documentation "Reparse changes in the current buffer.
The list of changes are tracked as a series of overlays in the buffer.
When overloading this function, use `semantic-changes-in-region' to
analyze.")
                nil [16859 17106])
            ("semantic-parse-region" function
               (:overloadable t
                :documentation "Parse the area between START and END, and return any tags found.
If END needs to be extended due to a lexical token being too large, it
will be silently ignored.

Optional arguments:
NONTERMINAL is the rule to start parsing at.
DEPTH specifies the lexical depth to descend for parsers that use
lexical analysis as their first step.
RETURNONERROR specifies that parsing should stop on the first
unmatched syntax encountered.  When nil, parsing skips the syntax,
adding it to the unmatched syntax cache.

Must return a list of semantic tags which have been cooked
(repositioned properly) but which DO NOT HAVE OVERLAYS associated
with them.  When overloading this function, use `semantic--tag-expand'
to cook raw tags."
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17108 17938])
            ("semantic-parse-region-default" function
               (:documentation "Parse the area between START and END, and return any tags found.
If END needs to be extended due to a lexical token being too large,
it will be silently ignored.
Optional arguments:
NONTERMINAL is the rule to start parsing at if it is known.
DEPTH specifies the lexical depth to scan.
RETURNONERROR specifies that parsing should end when encountering
unterminated syntax."
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17940 18992])
            ("semantic-set-unmatched-syntax-cache" function
               (:documentation "Set the unmatched syntax cache.
Argument UNMATCHED-SYNTAX is the syntax to set into the cache."
                :arguments ("unmatched-syntax"))
                nil [19020 19567])
            ("semantic-clear-unmatched-syntax-cache" function (:documentation "Clear the cache of unmatched syntax tokens.") nil [19569 19758])
            ("semantic-unmatched-syntax-tokens" function (:documentation "Return the list of unmatched syntax tokens.") nil [19760 20383])
            ("semantic-clear-toplevel-cache" function
               (:documentation "Clear the toplevel tag cache for the current buffer.
Clearing the cache will force a complete reparse next time a tag list
is requested."
                :user-visible-flag t)
                nil [20385 21399])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [21401 21453])
            ("semantic--set-buffer-cache" function
               (:documentation "Set the toplevel tag cache to TAGTABLE."
                :arguments ("tagtable"))
                nil [21455 22346])
            ("semantic-working-type" variable
               (:documentation "The type of working message to use when parsing.
'percent means we are doing a linear parse through the buffer.
'dynamic means we are reparsing specific tags."
                :default-value 'percent)
                nil [22348 22550])
            ("semantic-varalias-obsolete" code nil nil [22551 22650])
            ("semantic-minimum-working-buffer-size" variable
               (:documentation "The minimum size of a buffer before working messages are displayed.
Buffers smaller than this will parse silently.
Buffers larger than this will display the working progress bar."
                :default-value (* 1024 5))
                nil [22652 22891])
            ("semantic-parser-working-message" function
               (:documentation "Return the message string displayed while parsing.
If optional argument ARG is non-nil it is appended to the message
string."
                :arguments ("arg"))
                nil [22893 23208])
            ("semantic-parser-warnings" variable nil nil [23430 23463])
            ("semantic-fetch-tags" function (:documentation "Fetch semantic tags from the current buffer.
If the buffer cache is up to date, return that.
If the buffer cache is out of date, attempt an incremental reparse.
If the buffer has not been parsed before, or if the incremental reparse
fails, then parse the entire buffer.
If a lexical error had been previously discovered and the buffer
was marked unparseable, then do nothing, and return the cache.") nil [23465 26593])
            ("semantic-refresh-tags-safe" function (:documentation "Refresh the current buffer's tags safely.

Return non-nil if the refresh was successful.
Return nil if there is some sort of syntax error preventing a reparse.

Does nothing if the current buffer doesn't need reparsing.") nil [26595 27904])
            ("semantic-bovinate-toplevel" function
               (:documentation "Backward compatibility function."
                :arguments ("ignored"))
                nil [27906 28021])
            ("make-obsolete" code nil nil [28022 28093])
            ("semantic-fetch-available-tags" function (:documentation "Fetch available semantic tags from the current buffer.
That is, return tags currently in the cache without parsing the
current buffer.
Parse operations happen asynchronously when needed on Emacs idle time.
Use the `semantic-after-toplevel-cache-change-hook' and
`semantic-after-partial-cache-change-hook' hooks to synchronize with
new tags when they become available.") nil [28354 28794])
            ("semantic-repeat-parse-whole-stream" function
               (:documentation "Iteratively parse the entire stream STREAM starting with NONTERM.
Optional argument RETURNONERROR indicates that the parser should exit
with the current results on a parse error.
This function returns semantic tags without overlays."
                :arguments ("stream" "nonterm" "returnonerror"))
                nil [29067 31290])
            ("semantic-parser-warnings" variable (:documentation "A list of parser warnings since the last full reparse.") nil [31566 31662])
            ("make-variable-buffer-local" code nil nil [31663 31717])
            ("semantic-clear-parser-warnings" function (:documentation "Clear the current list of parser warnings for this buffer.") nil [31719 31861])
            ("semantic-push-parser-warning" function
               (:documentation "Add a parser WARNING that covers text from START to END."
                :arguments ("warning" "start" "end"))
                nil [31863 32086])
            ("semantic-dump-parser-warnings" function
               (:documentation "Dump any parser warnings."
                :user-visible-flag t)
                nil [32088 32407])
            ("semantic-bovinate-region-until-error" function
               (:documentation "NOTE: Use `semantic-parse-region' instead.

Bovinate between START and END starting with NONTERM.
Optional DEPTH specifies how many levels of parenthesis to enter.
This command will parse until an error is encountered, and return
the list of everything found until that moment.
This is meant for finding variable definitions at the beginning of
code blocks in methods.  If `bovine-inner-scope' can also support
commands, use `semantic-bovinate-from-nonterminal-full'."
                :arguments ("start" "end" "nonterm" "depth"))
                nil [32599 33208])
            ("make-obsolete" code nil nil [33209 33307])
            ("semantic-bovinate-from-nonterminal" function
               (:documentation "Bovinate from within a nonterminal lambda from START to END.
Argument NONTERM is the nonterminal symbol to start with.
Optional argument DEPTH is the depth of lists to dive into.  When used
in a `lambda' of a MATCH-LIST, there is no need to include a START and
END part.
Optional argument LENGTH specifies we are only interested in LENGTH
tokens."
                :arguments ("start" "end" "nonterm" "depth" "length"))
                nil [33309 33854])
            ("semantic-bovinate-from-nonterminal-full" function
               (:documentation "NOTE: Use `semantic-parse-region' instead.

Bovinate from within a nonterminal lambda from START to END.
Iterates until all the space between START and END is exhausted.
Argument NONTERM is the nonterminal symbol to start with.
If NONTERM is nil, use `bovine-block-toplevel'.
Optional argument DEPTH is the depth of lists to dive into.
When used in a `lambda' of a MATCH-LIST, there is no need to include
a START and END part."
                :arguments ("start" "end" "nonterm" "depth"))
                nil [33856 34432])
            ("make-obsolete" code nil nil [34433 34534])
            ("semantic-force-refresh" function
               (:documentation "Force a full refresh of the current buffer's tags.
Throw away all the old tags, and recreate the tag database."
                :user-visible-flag t)
                nil [34556 34809])
            ("semantic-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ",j" 'semantic-complete-jump-local) (define-key map ",J" 'semantic-complete-jump) (define-key map ",m" 'semantic-complete-jump-local-members) (define-key map ",g" 'semantic-symref-symbol) (define-key map ",G" 'semantic-symref) (define-key map ",p" 'senator-previous-tag) (define-key map ",n" 'senator-next-tag) (define-key map ",u" 'senator-go-to-up-reference) (define-key map ", " 'semantic-complete-analyze-inline) (define-key map "," 'senator-kill-tag) (define-key map ",\367" 'senator-copy-tag) (define-key map "," 'senator-yank-tag) (define-key map ",r" 'senator-copy-tag-to-register) (define-key map ",," 'semantic-force-refresh) (define-key map [3 44 up] 'senator-transpose-tags-up) (define-key map [3 44 down] 'senator-transpose-tags-down) (define-key map ",l" 'semantic-analyze-possible-completions) (define-key map [menu-bar cedet-menu] (list 'menu-item "Development" cedet-menu-map :enable '(not (and menu-bar-mode (bound-and-true-p global-ede-mode))))) map)) nil [34811 36425])
            ("let" code nil nil [36476 42963])
            ("semantic-load-system-cache-loaded" variable (:documentation "Non-nil when the Semantic system caches have been loaded.
Prevent this load system from loading files in twice.") nil [43116 43278])
            ("semantic-submode-list" variable
               (:documentation "List of auxiliary minor modes in the Semantic package."
                :constant-flag t
                :default-value '(global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode global-semantic-idle-local-symbol-highlight-mode global-semantic-highlight-edits-mode global-semantic-show-unmatched-syntax-mode global-semantic-show-parser-state-mode))
                nil [43280 43890])
            ("semantic-default-submodes" variable
               (:documentation "List of auxiliary Semantic minor modes enabled by `semantic-mode'.
The possible elements of this list include the following:

 `global-semanticdb-minor-mode'        - Maintain tag database.
 `global-semantic-idle-scheduler-mode' - Reparse buffer when idle.
 `global-semantic-idle-summary-mode'   - Show summary of tag at point.
 `global-semantic-idle-completions-mode' - Show completions when idle.
 `global-semantic-decoration-mode'     - Additional tag decorations.
 `global-semantic-highlight-func-mode' - Highlight the current tag.
 `global-semantic-stickyfunc-mode'     - Show current fun in header line.
 `global-semantic-mru-bookmark-mode'   - Provide `switch-to-buffer'-like
                                         keybinding for tag names.
 `global-cedet-m3-minor-mode'          - A mouse 3 context menu.
 `global-semantic-idle-local-symbol-highlight-mode' - Highlight references
                                         of the symbol under point.
The following modes are more targeted at people who want to see
 some internal information of the semantic parser in action:
 `global-semantic-highlight-edits-mode' - Visualize incremental parser by
                                         highlighting not-yet parsed changes.
 `global-semantic-show-unmatched-syntax-mode' - Highlight unmatched lexical
                                         syntax tokens.
 `global-semantic-show-parser-state-mode' - Display the parser cache state."
                :default-value '(global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))
                nil [43907 45560])
            ("define-minor-mode" code nil nil [45577 48613])
            ("semantic-analyze-completion-at-point-function" function (:documentation "Return possible analysis completions at point.
The completions provided are via `semantic-analyze-possible-completions'.
This function can be used by `completion-at-point-functions'.") nil [48649 49300])
            ("semantic-analyze-notc-completion-at-point-function" function (:documentation "Return possible analysis completions at point.
The completions provided are via `semantic-analyze-possible-completions',
but with the `no-tc' option passed in, which means constraints based
on what is being assigned to are ignored.
This function can be used by `completion-at-point-functions'.") nil [49302 49951])
            ("semantic-analyze-nolongprefix-completion-at-point-function" function (:documentation "Return possible analysis completions at point.
The completions provided are via `semantic-analyze-possible-completions',
but with the `no-tc' and `no-longprefix' option passed in, which means
constraints resulting in a long multi-symbol dereference are ignored.
This function can be used by `completion-at-point-functions'.") nil [49953 50677])
            ("global-semantic-idle-completions-mode" function
               (:documentation "Toggle global use of `semantic-idle-completions-mode'.
If ARG is positive, enable, if it is negative, disable.
If ARG is nil, then toggle."
                :prototype-flag t
                :user-visible-flag t)
                nil [50742 50956])
            ("semantic-idle-completions-mode" function
               (:documentation "Display a list of possible completions in a tooltip.

This is a minor mode which performs actions during idle time.
With prefix argument ARG, turn on if positive, otherwise off.  The
minor mode can be turned on only if semantic feature is available and
the current buffer was set up for parsing.  Return non-nil if the
minor mode is enabled."
                :prototype-flag t
                :user-visible-flag t)
                nil [50958 51368])
            ("global-semantic-idle-summary-mode" function
               (:documentation "Toggle global use of `semantic-idle-summary-mode'.
If ARG is positive, enable, if it is negative, disable.
If ARG is nil, then toggle."
                :prototype-flag t
                :user-visible-flag t)
                nil [51370 51576])
            ("semantic-idle-summary-mode" function
               (:documentation "Display a tag summary of the lexical token under the cursor.
Call `semantic-idle-summary-current-symbol-info' for getting the
current tag to display information.

This is a minor mode which performs actions during idle time.
With prefix argument ARG, turn on if positive, otherwise off.  The
minor mode can be turned on only if semantic feature is available and
the current buffer was set up for parsing.  Return non-nil if the
minor mode is enabled."
                :prototype-flag t
                :user-visible-flag t)
                nil [51578 52093])
            ("global-semantic-idle-local-symbol-highlight-mode" function
               (:documentation "Highlight the tag and symbol references of the symbol under point.
Call `semantic-analyze-current-context' to find the reference tag.
Call `semantic-symref-hits-in-region' to identify local references."
                :prototype-flag t
                :user-visible-flag t)
                nil [52095 52383])
            ("srecode-template-setup-parser" function
               (:documentation "Set up buffer for parsing SRecode template files."
                :prototype-flag t
                :user-visible-flag t)
                nil [52385 52513])
            ("semantic" package nil nil [52515 52534])
            ("semantic/util" include nil nil [52636 52660]))          
      :file "semantic.el.gz"
      :pointmax 52717
      :fsize 13931
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 15092 . 15093) (symbol 15026 . 15043) (open-paren 15025 . 15026)))
    (semanticdb-table "semanticdb-table-150bd3c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("find-func" include nil nil [1780 1800])
            ("mode-local-map-file-buffers" function
               (:documentation "Run FUNCTION on every file buffer found.
FUNCTION does not have arguments; when it is entered `current-buffer'
is the currently selected file buffer.
If optional argument PREDICATE is non nil, only select file buffers
for which the function PREDICATE returns non-nil.
If optional argument BUFFERS is non-nil, it is a list of buffers to
walk through.  It defaults to `buffer-list'."
                :arguments ("function" "predicate" "buffers"))
                nil [2152 2826])
            ("get-mode-local-parent" function
               (:documentation "Return the mode parent of the major mode MODE.
Return nil if MODE has no parent."
                :arguments ("mode"))
                nil [2828 3027])
            ("mode-local-equivalent-mode-p" function
               (:documentation "Is the major-mode in the current buffer equivalent to a mode in MODES."
                :arguments ("mode"))
                nil [3163 3407])
            ("mode-local-map-mode-buffers" function
               (:documentation "Run FUNCTION on every file buffer with major mode in MODES.
MODES can be a symbol or a list of symbols.
FUNCTION does not have arguments."
                :arguments ("function" "modes"))
                nil [3409 3879])
            ("mode-local-init-hook" variable (:documentation "Hook run after a new file buffer is created.
The current buffer is the newly created file buffer.") nil [3904 4039])
            ("mode-local-changed-mode-buffers" variable (:documentation "List of buffers whose `major-mode' has changed recently.") nil [4041 4146])
            ("mode-local--init-mode" variable nil nil [4148 4182])
            ("mode-local-initialized-p" function (:documentation "Return non-nil if mode local is initialized in current buffer.
That is, if the current `major-mode' is equal to the major mode for
which mode local bindings have been activated.") nil [4184 4444])
            ("mode-local-post-major-mode-change" function (:documentation "Initialize mode-local facilities.
This is run from `find-file-hook', and from `post-command-hook'
after changing the major mode.") nil [4446 5052])
            ("mode-local-on-major-mode-change" function (:documentation "Function called in `change-major-mode-hook'.") nil [5054 5284])
            ("set-mode-local-parent" function
               (:documentation "Set parent of major mode MODE to PARENT mode.
To work properly, this function should be called after PARENT mode
local variables have been defined."
                :arguments ("mode" "parent"))
                nil [5307 5802])
            ("define-child-mode" function
               (:documentation "Make major mode MODE inherit behavior from PARENT mode.
DOCSTRING is optional and not used.
To work properly, this should be put after PARENT mode local variables
definition."
                :arguments ("mode" "parent" "docstring"))
                nil [5804 6088])
            ("mode-local-use-bindings-p" function
               (:documentation "Return non-nil if THIS-MODE can use bindings of DESIRED-MODE."
                :arguments ("this-mode" "desired-mode"))
                nil [6090 6382])
            ("mode-local-symbol-table" variable (:documentation "Buffer local mode bindings.
These symbols provide a hook for a `major-mode' to specify specific
behaviors.  Use the function `mode-local-bind' to define new bindings.") nil [6411 6618])
            ("make-variable-buffer-local" code nil nil [6619 6672])
            ("mode-local-active-mode" variable (:documentation "Major mode in which bindings are active.") nil [6674 6754])
            ("new-mode-local-bindings" function (:documentation "Return a new empty mode bindings symbol table.") nil [6756 6865])
            ("mode-local-bind" function
               (:documentation "Define BINDINGS in the specified environment.
BINDINGS is a list of (VARIABLE . VALUE).
Optional argument PLIST is a property list each VARIABLE symbol will
be set to.  The following properties have special meaning:

- `constant-flag' if non-nil, prevent rebinding variables.
- `mode-variable-flag' if non-nil, define mode variables.
- `override-flag' if non-nil, define override functions.

The `override-flag' and `mode-variable-flag' properties are mutually
exclusive.

If optional argument MODE is non-nil, it must be a major mode symbol.
BINDINGS will be defined globally for this major mode.  If MODE is
nil, BINDINGS will be defined locally in the current buffer, in
variable `mode-local-symbol-table'.  The later should be done in MODE
hook."
                :arguments ("bindings" "plist" "mode"))
                nil [6867 9980])
            ("mode-local-symbol" function
               (:documentation "Return the mode local symbol bound with SYMBOL's name.
Return nil if the  mode local symbol doesn't exist.
If optional argument MODE is nil, lookup first into locally bound
symbols, then in those bound in current `major-mode' and its parents.
If MODE is non-nil, lookup into symbols bound in that major mode and
its parents."
                :arguments ("symbol" "mode"))
                nil [9982 10866])
            ("mode-local-symbol-value" function
               (:documentation "Return the value of the mode local symbol bound with SYMBOL's name.
If optional argument MODE is non-nil, restrict lookup to that mode and
its parents (see the function `mode-local-symbol' for more details).
If optional argument PROPERTY is non-nil the mode local symbol must
have that property set.  Return nil if the symbol doesn't exist, or
doesn't have PROPERTY set."
                :arguments ("symbol" "mode" "property"))
                nil [10868 11442])
            ("activate-mode-local-bindings" function
               (:documentation "Activate variables defined locally in MODE and its parents.
That is, copy mode local bindings into corresponding buffer local
variables.
If MODE is not specified it defaults to current `major-mode'.
Return the alist of buffer-local variables that have been changed.
Elements are (SYMBOL . PREVIOUS-VALUE), describing one variable."
                :arguments ("mode"))
                nil [11473 13217])
            ("deactivate-mode-local-bindings" function
               (:documentation "Deactivate variables defined locally in MODE and its parents.
That is, kill buffer local variables set from the corresponding mode
local bindings.
If MODE is not specified it defaults to current `major-mode'."
                :arguments ("mode"))
                nil [13219 13895])
            ("with-mode-local-symbol" function
               (:documentation "With the local bindings of MODE symbol, evaluate BODY.
The current mode bindings are saved, BODY is evaluated, and the saved
bindings are restored, even in case of an abnormal exit.
Value is what BODY returns.
This is like `with-mode-local', except that MODE's value is used.
To use the symbol MODE (quoted), use `with-mode-local'."
                :arguments ("mode" "body"))
                nil [13897 15293])
            ("put" code nil nil [15294 15347])
            ("with-mode-local" function
               (:documentation "With the local bindings of MODE, evaluate BODY.
The current mode bindings are saved, BODY is evaluated, and the saved
bindings are restored, even in case of an abnormal exit.
Value is what BODY returns.
This is like `with-mode-local-symbol', except that MODE is quoted
and is not evaluated."
                :arguments ("mode" "body"))
                nil [15349 15732])
            ("put" code nil nil [15733 15779])
            ("mode-local-value" function
               (:documentation "Return the value of the MODE local variable SYM."
                :arguments ("mode" "sym"))
                nil [15782 15978])
            ("setq-mode-local" function
               (:documentation "Assign new values to variables local in MODE.
MODE must be a major mode symbol.
ARGS is a list (SYM VAL SYM VAL ...).
The symbols SYM are variables; they are literal (not evaluated).
The values VAL are expressions; they are evaluated.
Set each SYM to the value of its VAL, locally in buffers already in
MODE, or in buffers switched to that mode.
Return the value of the last VAL."
                :arguments ("mode" "args"))
                nil [15980 17145])
            ("defvar-mode-local" function
               (:documentation "Define MODE local variable SYM with value VAL.
DOCSTRING is optional."
                :arguments ("mode" "sym" "val" "docstring"))
                nil [17147 17434])
            ("put" code nil nil [17435 17488])
            ("defconst-mode-local" function
               (:documentation "Define MODE local constant SYM with value VAL.
DOCSTRING is optional."
                :arguments ("mode" "sym" "val" "docstring"))
                nil [17490 17877])
            ("put" code nil nil [17878 17933])
            ("make-obsolete-overload" function
               (:documentation "Mark OLD overload as obsoleted by NEW overload.
WHEN is a string describing the first release where it was made obsolete."
                :arguments ("old" "new" "when"))
                nil [17964 18287])
            ("overload-obsoleted-by" function
               (:documentation "Get the overload symbol obsoleted by OVERLOAD.
Return the obsolete symbol or nil if not found."
                :arguments ("overload"))
                nil [18289 18467])
            ("overload-that-obsolete" function
               (:documentation "Return the overload symbol that obsoletes OVERLOAD.
Return the symbol found or nil if OVERLOAD is not obsolete."
                :arguments ("overload"))
                nil [18469 18669])
            ("fetch-overload" function
               (:documentation "Return the current OVERLOAD function, or nil if not found.
First, lookup for OVERLOAD into locally bound mode local symbols, then
in those bound in current `major-mode' and its parents."
                :arguments ("overload"))
                nil [18671 19160])
            ("mode-local--override" function
               (:documentation "Return the form that handles overloading of function NAME.
ARGS are the arguments to the function.
BODY is code that would be run when there is no override defined.  The
default is to call the function `NAME-default' with the appropriate
arguments.
See also the function `define-overload'."
                :arguments ("name" "args" "body"))
                nil [19162 19840])
            ("mode-local--expand-overrides" function
               (:documentation "Expand override forms that overload function NAME.
ARGS are the arguments to the function NAME.
BODY is code where override forms are searched for expansion.
Return result of expansion, or BODY if no expansion occurred.
See also the function `define-overload'."
                :arguments ("name" "args" "body"))
                nil [19842 20741])
            ("mode-local--overload-body" function
               (:documentation "Return the code that implements overloading of function NAME.
ARGS are the arguments to the function NAME.
BODY specifies the overload code.
See also the function `define-overload'."
                :arguments ("name" "args" "body"))
                nil [20743 21136])
            ("put" code nil nil [21153 21206])
            ("define-overloadable-function" function
               (:documentation "Define a new function, as with `defun', which can be overloaded.
NAME is the name of the function to create.
ARGS are the arguments to the function.
DOCSTRING is a documentation string to describe the function.  The
docstring will automatically have details about its overload symbol
appended to the end.
BODY is code that would be run when there is no override defined.  The
default is to call the function `NAME-default' with the appropriate
arguments.

BODY can also include an override form that specifies which part of
BODY is specifically overridden.  This permits specifying common code
run for both default and overridden implementations.
An override form is one of:

  1. (:override [OVERBODY])
  2. (:override-with-args OVERARGS [OVERBODY])

OVERBODY is the code that would be run when there is no override
defined.  The default is to call the function `NAME-default' with the
appropriate arguments deduced from ARGS.
OVERARGS is a list of arguments passed to the override and
`NAME-default' function, in place of those deduced from ARGS."
                :arguments ("name" "args" "docstring" "body"))
                nil [21208 22518])
            ("put" code nil nil [22519 22568])
            ("defalias" code nil nil [22570 22627])
            ("function-overload-p" function
               (:documentation "Return non-nil if SYMBOL is a function which can be overloaded."
                :arguments ("symbol"))
                nil [22629 22802])
            ("define-mode-local-override" function
               (:documentation "Define a mode specific override of the function overload NAME.
Has meaning only if NAME has been created with `define-overload'.
MODE is the major mode this override is being defined for.
ARGS are the function arguments, which should match those of the same
named function created with `define-overload'.
DOCSTRING is the documentation string.
BODY is the implementation of this function."
                :arguments ("name" "mode" "args" "docstring" "body"))
                nil [22804 23862])
            ("mode-local-read-function" function
               (:documentation "Interactively read in the name of a mode-local function.
PROMPT, INITIAL, HIST, and DEFAULT are the same as for `completing-read'."
                :arguments ("prompt" "initial" "hist" "default"))
                nil [23888 24174])
            ("overload-docstring-extension" function
               (:documentation "Return the doc string that augments the description of OVERLOAD."
                :arguments ("overload"))
                nil [24197 24845])
            ("mode-local-augment-function-help" function
               (:documentation "Augment the *Help* buffer for SYMBOL.
SYMBOL is a function that can be overridden."
                :arguments ("symbol"))
                nil [24847 25418])
            ("describe-function-orig-buffer" variable nil nil [25499 25537])
            ("describe-mode-local-overload" function
               (:documentation "For `help-fns-describe-function-functions'; add overloads for SYMBOL."
                :arguments ("symbol"))
                nil [25539 26663])
            ("add-hook" code nil nil [26665 26743])
            ("declare-function" code nil nil [26745 26798])
            ("xref-mode-local--override-present" function
               (:documentation "Return non-nil if SYM is in XREFS."
                :arguments ("sym" "xrefs"))
                nil [26800 27070])
            ("xref-mode-local-overload" function
               (:documentation "For `elisp-xref-find-def-functions'; add overloads for SYMBOL."
                :arguments ("symbol"))
                nil [27072 29308])
            ("add-hook" code nil nil [29310 29377])
            ("xref-mode-local-find-overloadable-regexp" variable
               (:documentation "Regexp used by `xref-find-definitions' when searching for a
  mode-local overloadable function definition."
                :constant-flag t
                :default-value "(\\(\\(define-overloadable-function\\)\\|\\(define-overload\\)\\) +%s")
                nil [29379 29615])
            ("xref-mode-local-find-override" function
               (:documentation "Function used by `xref-find-definitions' when searching for an
  override of a mode-local overloadable function.
META-NAME is a cons (OVERLOADABLE-SYMBOL . MAJOR-MODE)."
                :arguments ("meta-name"))
                nil [29617 30089])
            ("add-to-list" code nil nil [30091 30207])
            ("add-to-list" code nil nil [30208 30316])
            ("mode-local-print-binding" function
               (:documentation "Print the SYMBOL binding."
                :arguments ("symbol"))
                nil [30351 30762])
            ("mode-local-print-bindings" function
               (:documentation "Print bindings in TABLE."
                :arguments ("table"))
                nil [30764 31993])
            ("mode-local-describe-bindings-2" function
               (:documentation "Display mode local bindings active in BUFFER-OR-MODE."
                :arguments ("buffer-or-mode"))
                nil [31995 32931])
            ("mode-local-describe-bindings-1" function
               (:documentation "Display mode local bindings active in BUFFER-OR-MODE.
Optional argument INTERACTIVE-P is non-nil if the calling command was
invoked interactively."
                :arguments ("buffer-or-mode" "interactive-p"))
                nil [32933 33850])
            ("describe-mode-local-bindings" function
               (:documentation "Display mode local bindings active in BUFFER."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [33852 34084])
            ("describe-mode-local-bindings-in-mode" function
               (:documentation "Display mode local bindings active in MODE hierarchy."
                :user-visible-flag t
                :arguments ("mode"))
                nil [34086 34473])
            ("mode-local-setup-edebug-specs" function (:documentation "Define edebug specification for mode local macros.") nil [34498 35105])
            ("add-hook" code nil nil [35107 35167])
            ("add-hook" code nil nil [35169 35230])
            ("add-hook" code nil nil [35231 35298])
            ("mode-local" package nil nil [35300 35321]))          
      :file "mode-local.el.gz"
      :pointmax 35351
      :fsize 9610
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
