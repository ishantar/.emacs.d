;; Object semanticdb-project-database-file-1c02cc8
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1c02cc8"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1c02ca8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("run-hooks" code nil nil [1000 1027])
            ("cl-lib" include nil nil [1048 1065])
            ("wid-edit" include nil nil [1067 1086])
            ("mm-util" include nil nil [1087 1105])
            ("nnheader" include nil nil [1106 1125])
            ("seq" include nil nil [1126 1140])
            ("gnus-ham-process-destinations" variable nil nil [1207 1245])
            ("gnus-parameter-ham-marks-alist" variable nil nil [1246 1285])
            ("gnus-parameter-spam-marks-alist" variable nil nil [1286 1326])
            ("gnus-spam-autodetect" variable nil nil [1327 1356])
            ("gnus-spam-autodetect-methods" variable nil nil [1357 1394])
            ("gnus-spam-newsgroup-contents" variable nil nil [1395 1432])
            ("gnus-spam-process-destinations" variable nil nil [1433 1472])
            ("gnus-spam-resend-to" variable nil nil [1473 1501])
            ("gnus-ham-resend-to" variable nil nil [1502 1529])
            ("gnus-spam-process-newsgroups" variable nil nil [1530 1567])
            ("gnus" customgroup
               (:documentation "The coffee-brewing, all singing, all dancing, kitchen sink newsreader."
                :user-visible-flag t)
                nil [1570 1694])
            ("gnus-start" customgroup
               (:documentation "Starting your favorite newsreader."
                :user-visible-flag t)
                nil [1696 1775])
            ("gnus-format" customgroup
               (:documentation "Dealing with formatting issues."
                :user-visible-flag t)
                nil [1777 1854])
            ("gnus-charset" customgroup
               (:documentation "Group character set issues."
                :user-visible-flag t)
                nil [1856 1990])
            ("gnus-cache" customgroup
               (:documentation "Cache interface."
                :user-visible-flag t)
                nil [1992 2102])
            ("gnus-registry" customgroup
               (:documentation "Article Registry."
                :user-visible-flag t)
                nil [2104 2169])
            ("gnus-start-server" customgroup
               (:documentation "Server options at startup."
                :user-visible-flag t)
                nil [2171 2255])
            ("gnus-group" customgroup
               (:documentation "Group buffers."
                :user-visible-flag t)
                nil [2291 2396])
            ("gnus-group-foreign" customgroup
               (:documentation "Foreign groups."
                :user-visible-flag t)
                nil [2398 2520])
            ("gnus-group-new" customgroup
               (:documentation "Automatic subscription of new groups."
                :user-visible-flag t)
                nil [2522 2614])
            ("gnus-group-levels" customgroup
               (:documentation "Group levels."
                :user-visible-flag t)
                nil [2616 2733])
            ("gnus-group-select" customgroup
               (:documentation "Selecting a Group."
                :user-visible-flag t)
                nil [2735 2862])
            ("gnus-group-listing" customgroup
               (:documentation "Showing slices of the group list."
                :user-visible-flag t)
                nil [2864 3004])
            ("gnus-group-visual" customgroup
               (:documentation "Sorting the group buffer."
                :user-visible-flag t)
                nil [3006 3164])
            ("gnus-group-various" customgroup
               (:documentation "Various group options."
                :user-visible-flag t)
                nil [3166 3302])
            ("gnus-summary" customgroup
               (:documentation "Summary buffers."
                :user-visible-flag t)
                nil [3336 3447])
            ("gnus-summary-exit" customgroup
               (:documentation "Leaving summary buffers."
                :user-visible-flag t)
                nil [3449 3593])
            ("gnus-summary-marks" customgroup
               (:documentation "Marks used in summary buffers."
                :user-visible-flag t)
                nil [3595 3736])
            ("gnus-thread" customgroup
               (:documentation "Ordering articles according to replies."
                :user-visible-flag t)
                nil [3738 3874])
            ("gnus-summary-format" customgroup
               (:documentation "Formatting of the summary buffer."
                :user-visible-flag t)
                nil [3876 4026])
            ("gnus-summary-choose" customgroup
               (:documentation "Choosing Articles."
                :user-visible-flag t)
                nil [4028 4159])
            ("gnus-summary-maneuvering" customgroup
               (:documentation "Summary movement commands."
                :user-visible-flag t)
                nil [4161 4307])
            ("gnus-picon" customgroup
               (:documentation "Show pictures of people, domains, and newsgroups."
                :user-visible-flag t)
                nil [4309 4410])
            ("gnus-summary-mail" customgroup
               (:documentation "Mail group commands."
                :user-visible-flag t)
                nil [4412 4545])
            ("gnus-summary-sort" customgroup
               (:documentation "Sorting the summary buffer."
                :user-visible-flag t)
                nil [4547 4694])
            ("gnus-summary-visual" customgroup
               (:documentation "Highlighting and menus in the summary buffer."
                :user-visible-flag t)
                nil [4696 4879])
            ("gnus-summary-various" customgroup
               (:documentation "Various summary buffer options."
                :user-visible-flag t)
                nil [4881 5030])
            ("gnus-summary-pick" customgroup
               (:documentation "Pick mode in the summary buffer."
                :user-visible-flag t)
                nil [5032 5194])
            ("gnus-summary-tree" customgroup
               (:documentation "Tree display of threads in the summary buffer."
                :user-visible-flag t)
                nil [5196 5371])
            ("gnus-extract-view" customgroup
               (:documentation "Viewing extracted files."
                :user-visible-flag t)
                nil [5398 5529])
            ("gnus-score" customgroup
               (:documentation "Score and kill file handling."
                :user-visible-flag t)
                nil [5559 5633])
            ("gnus-score-kill" customgroup
               (:documentation "Kill files."
                :user-visible-flag t)
                nil [5635 5702])
            ("gnus-score-adapt" customgroup
               (:documentation "Adaptive score files."
                :user-visible-flag t)
                nil [5704 5782])
            ("gnus-score-default" customgroup
               (:documentation "Default values for score files."
                :user-visible-flag t)
                nil [5784 5874])
            ("gnus-score-expire" customgroup
               (:documentation "Expiring score rules."
                :user-visible-flag t)
                nil [5876 5955])
            ("gnus-score-decay" customgroup
               (:documentation "Decaying score rules."
                :user-visible-flag t)
                nil [5957 6035])
            ("gnus-score-files" customgroup
               (:documentation "Score and kill file names."
                :user-visible-flag t)
                nil [6037 6141])
            ("gnus-score-various" customgroup
               (:documentation "Various scoring and killing options."
                :user-visible-flag t)
                nil [6143 6238])
            ("gnus-visual" customgroup
               (:documentation "Options controlling the visual fluff."
                :user-visible-flag t)
                nil [6249 6348])
            ("gnus-agent" customgroup
               (:documentation "Offline support for Gnus."
                :user-visible-flag t)
                nil [6350 6420])
            ("gnus-files" customgroup
               (:documentation "Files used by Gnus."
                :user-visible-flag t)
                nil [6422 6486])
            ("gnus-dribble-file" customgroup
               (:documentation "Auto save file."
                :user-visible-flag t)
                nil [6488 6604])
            ("gnus-newsrc" customgroup
               (:documentation "Storing Gnus state."
                :user-visible-flag t)
                nil [6606 6677])
            ("gnus-server" customgroup
               (:documentation "Options related to newsservers and other servers used by Gnus."
                :user-visible-flag t)
                nil [6679 6787])
            ("gnus-server-visual" customgroup
               (:documentation "Highlighting and menus in the server buffer."
                :user-visible-flag t)
                nil [6789 6915])
            ("gnus-message" customgroup
               (:documentation "Composing replies and followups in Gnus."
                :user-visible-flag t
                :value '((message custom-group)))
                nil [6917 7026])
            ("gnus-meta" customgroup
               (:documentation "Meta variables controlling major portions of Gnus.
In general, modifying these variables does not take effect until Gnus
is restarted, and sometimes reloaded."
                :user-visible-flag t)
                nil [7028 7230])
            ("gnus-various" customgroup
               (:documentation "Other Gnus options."
                :user-visible-flag t)
                nil [7232 7347])
            ("gnus-exit" customgroup
               (:documentation "Exiting Gnus."
                :user-visible-flag t)
                nil [7349 7452])
            ("gnus-fun" customgroup
               (:documentation "Frivolous Gnus extensions."
                :user-visible-flag t)
                nil [7454 7569])
            ("gnus-version-number" variable
               (:documentation "Version number for this version of Gnus."
                :constant-flag t
                :default-value "5.13")
                nil [7571 7653])
            ("gnus-version" variable
               (:documentation "Version string for this version of Gnus."
                :constant-flag t
                :default-value (format "Gnus v%s" gnus-version-number))
                nil [7655 7763])
            ("gnus-inhibit-startup-message" variable (:documentation "If non-nil, the startup message will not be displayed.
This variable is used before `.gnus.el' is loaded, so it should
be set in `.emacs' instead.") nil [7765 7998])
            ("gnus-mode-line-image-cache" variable (:default-value t) nil [8000 8037])
            ("if" code nil nil [8059 8863])
            ("gnus-group-news-1-empty" variable
               (:documentation "Level 1 empty newsgroup face."
                :default-value '((((class color) (background dark)) (:foreground "PaleTurquoise")) (((class color) (background light)) (:foreground "ForestGreen")) (t nil))
                :type "face")
                nil [8966 9232])
            ("gnus-group-news-1" variable
               (:documentation "Level 1 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-1-empty :bold t)))
                :type "face")
                nil [9234 9362])
            ("gnus-group-news-2-empty" variable
               (:documentation "Level 2 empty newsgroup face."
                :default-value '((((class color) (background dark)) (:foreground "turquoise")) (((class color) (background light)) (:foreground "CadetBlue4")) (t nil))
                :type "face")
                nil [9364 9625])
            ("gnus-group-news-2" variable
               (:documentation "Level 2 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-2-empty :bold t)))
                :type "face")
                nil [9627 9755])
            ("gnus-group-news-3-empty" variable
               (:documentation "Level 3 empty newsgroup face."
                :default-value '((((class color) (background dark)) nil) (((class color) (background light)) nil) (t nil))
                :type "face")
                nil [9757 9971])
            ("gnus-group-news-3" variable
               (:documentation "Level 3 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-3-empty :bold t)))
                :type "face")
                nil [9973 10101])
            ("gnus-group-news-4-empty" variable
               (:documentation "Level 4 empty newsgroup face."
                :default-value '((((class color) (background dark)) nil) (((class color) (background light)) nil) (t nil))
                :type "face")
                nil [10103 10317])
            ("gnus-group-news-4" variable
               (:documentation "Level 4 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-4-empty :bold t)))
                :type "face")
                nil [10319 10447])
            ("gnus-group-news-5-empty" variable
               (:documentation "Level 5 empty newsgroup face."
                :default-value '((((class color) (background dark)) nil) (((class color) (background light)) nil) (t nil))
                :type "face")
                nil [10449 10663])
            ("gnus-group-news-5" variable
               (:documentation "Level 5 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-5-empty :bold t)))
                :type "face")
                nil [10665 10793])
            ("gnus-group-news-6-empty" variable
               (:documentation "Level 6 empty newsgroup face."
                :default-value '((((class color) (background dark)) nil) (((class color) (background light)) nil) (t nil))
                :type "face")
                nil [10795 11009])
            ("gnus-group-news-6" variable
               (:documentation "Level 6 newsgroup face."
                :default-value '((t (:inherit gnus-group-news-6-empty :bold t)))
                :type "face")
                nil [11011 11139])
            ("gnus-group-news-low-empty" variable
               (:documentation "Low level empty newsgroup face."
                :default-value '((((class color) (background dark)) (:foreground "DarkTurquoise")) (((class color) (background light)) (:foreground "DarkGreen")) (t nil))
                :type "face")
                nil [11141 11409])
            ("gnus-group-news-low" variable
               (:documentation "Low level newsgroup face."
                :default-value '((t (:inherit gnus-group-news-low-empty :bold t)))
                :type "face")
                nil [11411 11545])
            ("gnus-group-mail-1-empty" variable
               (:documentation "Level 1 empty mailgroup face."
                :default-value '((((class color) (background dark)) (:foreground "#e1ffe1")) (((class color) (background light)) (:foreground "DeepPink3")) (t (:italic t)))
                :type "face")
                nil [11547 11814])
            ("gnus-group-mail-1" variable
               (:documentation "Level 1 mailgroup face."
                :default-value '((t (:inherit gnus-group-mail-1-empty :bold t)))
                :type "face")
                nil [11816 11944])
            ("gnus-group-mail-2-empty" variable
               (:documentation "Level 2 empty mailgroup face."
                :default-value '((((class color) (background dark)) (:foreground "DarkSeaGreen1")) (((class color) (background light)) (:foreground "HotPink3")) (t (:italic t)))
                :type "face")
                nil [11946 12218])
            ("gnus-group-mail-2" variable
               (:documentation "Level 2 mailgroup face."
                :default-value '((t (:inherit gnus-group-mail-2-empty :bold t)))
                :type "face")
                nil [12220 12348])
            ("gnus-group-mail-3-empty" variable
               (:documentation "Level 3 empty mailgroup face."
                :default-value '((((class color) (background dark)) (:foreground "aquamarine1")) (((class color) (background light)) (:foreground "magenta4")) (t nil))
                :type "face")
                nil [12350 12611])
            ("gnus-group-mail-3" variable
               (:documentation "Level 3 mailgroup face."
                :default-value '((t (:inherit gnus-group-mail-3-empty :bold t)))
                :type "face")
                nil [12613 12741])
            ("gnus-group-mail-low-empty" variable
               (:documentation "Low level empty mailgroup face."
                :default-value '((((class color) (background dark)) (:foreground "aquamarine2")) (((class color) (background light)) (:foreground "DeepPink4")) (t (:bold t)))
                :type "face")
                nil [12743 13016])
            ("gnus-group-mail-low" variable
               (:documentation "Low level mailgroup face."
                :default-value '((t (:inherit gnus-group-mail-low-empty :bold t)))
                :type "face")
                nil [13018 13152])
            ("gnus-summary-selected" variable
               (:documentation "Face used for selected articles."
                :default-value '((t (:underline t)))
                :type "face")
                nil [13178 13291])
            ("gnus-summary-cancelled" variable
               (:documentation "Face used for canceled articles."
                :default-value '((((class color)) (:foreground "yellow" :background "black")))
                :type "face")
                nil [13293 13456])
            ("gnus-summary-normal-ticked" variable
               (:documentation "Face used for normal interest ticked articles."
                :default-value '((((class color) (background dark)) (:foreground "pink")) (((class color) (background light)) (:foreground "firebrick")) (t nil))
                :type "face")
                nil [13458 13735])
            ("gnus-summary-high-ticked" variable
               (:documentation "Face used for high interest ticked articles."
                :default-value '((t (:inherit gnus-summary-normal-ticked :bold t)))
                :type "face")
                nil [13737 13898])
            ("gnus-summary-low-ticked" variable
               (:documentation "Face used for low interest ticked articles."
                :default-value '((t (:inherit gnus-summary-normal-ticked :italic t)))
                :type "face")
                nil [13900 14061])
            ("gnus-summary-normal-ancient" variable
               (:documentation "Face used for normal interest ancient articles."
                :default-value '((((class color) (background dark)) (:foreground "SkyBlue")) (((class color) (background light)) (:foreground "RoyalBlue")) (t nil))
                :type "face")
                nil [14063 14345])
            ("gnus-summary-high-ancient" variable
               (:documentation "Face used for high interest ancient articles."
                :default-value '((t (:inherit gnus-summary-normal-ancient :bold t)))
                :type "face")
                nil [14347 14511])
            ("gnus-summary-low-ancient" variable
               (:documentation "Face used for low interest ancient articles."
                :default-value '((t (:inherit gnus-summary-normal-ancient :italic t)))
                :type "face")
                nil [14513 14677])
            ("gnus-summary-normal-undownloaded" variable
               (:documentation "Face used for normal interest uncached articles."
                :default-value '((((class color) (background light)) (:foreground "cyan4" :bold nil)) (((class color) (background dark)) (:foreground "LightGray" :bold nil)) (t (:inverse-video t)))
                :type "face")
                nil [14679 14996])
            ("gnus-summary-high-undownloaded" variable
               (:documentation "Face used for high interest uncached articles."
                :default-value '((t (:inherit gnus-summary-normal-undownloaded :bold t)))
                :type "face")
                nil [14998 15173])
            ("gnus-summary-low-undownloaded" variable
               (:documentation "Face used for low interest uncached articles."
                :default-value '((t (:inherit gnus-summary-normal-undownloaded :italic t)))
                :type "face")
                nil [15175 15350])
            ("gnus-summary-normal-unread" variable
               (:documentation "Face used for normal interest unread articles."
                :default-value '((t nil))
                :type "face")
                nil [15352 15479])
            ("gnus-summary-high-unread" variable
               (:documentation "Face used for high interest unread articles."
                :default-value '((t (:inherit gnus-summary-normal-unread :bold t)))
                :type "face")
                nil [15481 15642])
            ("gnus-summary-low-unread" variable
               (:documentation "Face used for low interest unread articles."
                :default-value '((t (:inherit gnus-summary-normal-unread :italic t)))
                :type "face")
                nil [15644 15805])
            ("gnus-summary-normal-read" variable
               (:documentation "Face used for normal interest read articles."
                :default-value '((((class color) (background dark)) (:foreground "PaleGreen")) (((class color) (background light)) (:foreground "DarkGreen")) (t nil))
                :type "face")
                nil [15807 16085])
            ("gnus-summary-high-read" variable
               (:documentation "Face used for high interest read articles."
                :default-value '((t (:inherit gnus-summary-normal-read :bold t)))
                :type "face")
                nil [16087 16242])
            ("gnus-summary-low-read" variable
               (:documentation "Face used for low interest read articles."
                :default-value '((t (:inherit gnus-summary-normal-read :italic t)))
                :type "face")
                nil [16244 16399])
            ("gnus-buffers" variable (:documentation "List of buffers handled by Gnus.") nil [16428 16490])
            ("gnus-get-buffer-create" function
               (:documentation "Do the same as `get-buffer-create', but store the created buffer."
                :arguments ("name"))
                nil [16492 16681])
            ("gnus-add-buffer" function (:documentation "Add the current buffer to the list of Gnus buffers.") nil [16683 16827])
            ("gnus-kill-buffer" function
               (:documentation "Kill BUFFER and remove from the list of Gnus buffers."
                :arguments ("buffer"))
                nil [16829 17040])
            ("gnus-prune-buffers" function nil nil [17042 17186])
            ("gnus-buffers" function (:documentation "Return a list of live Gnus buffers.") nil [17188 17513])
            ("gnus-group-buffer" variable
               (:documentation "Name of the Gnus group buffer."
                :default-value "*Group*")
                nil [17535 17606])
            ("gnus-splash" variable
               (:documentation "Face for the splash screen."
                :default-value '((((class color) (background dark)) (:foreground "#cccccc")) (((class color) (background light)) (:foreground "#888888")) (t nil))
                :type "face")
                nil [17608 17850])
            ("gnus-splash" function nil nil [17852 18102])
            ("gnus-indent-rigidly" function
               (:documentation "Indent rigidly using only spaces and no tabs."
                :arguments ("start" "end" "arg"))
                nil [18104 18510])
            ("gnus-logo-color-alist" variable
               (:documentation "Color alist used for the Gnus logo."
                :default-value '((flame "#cc3300" "#ff2200") (pine "#c0cc93" "#f8ffb8") (moss "#a1cc93" "#d2ffb8") (irish "#04cc90" "#05ff97") (sky "#049acc" "#05deff") (tin "#6886cc" "#82b6ff") (velvet "#7c68cc" "#8c82ff") (grape "#b264cc" "#cf7df") (labia "#cc64c2" "#fd7dff") (berry "#cc6485" "#ff7db5") (dino "#724214" "#1e3f03") (oort "#cccccc" "#888888") (storm "#666699" "#99ccff") (pdino "#9999cc" "#99ccff") (purp "#9999cc" "#666699") (no "#ff0000" "#ffff00") (neutral "#b4b4b4" "#878787") (ma "#2020e0" "#8080ff") (september "#bf9900" "#ffcc00")))
                nil [18558 19228])
            ("gnus-logo-color-style" variable
               (:documentation "Color styles used for the Gnus logo."
                :default-value 'ma)
                nil [19230 19426])
            ("gnus-logo-colors" variable
               (:documentation "Colors used for the Gnus logo."
                :default-value (cdr (assq gnus-logo-color-style gnus-logo-color-alist)))
                nil [19428 19547])
            ("image-load-path" variable nil nil [19549 19573])
            ("declare-function" code nil nil [19574 19643])
            ("gnus-group-startup-message" function
               (:documentation "Insert startup message in current buffer."
                :arguments ("x" "y"))
                nil [19645 23198])
            ("gnus-splash-svg-color-symbols" function
               (:documentation "Do color-symbol search-and-replace in svg file."
                :arguments ("list"))
                nil [23200 23912])
            ("let" code nil nil [23914 24106])
            ("gnus-util" include nil nil [24126 24146])
            ("nnheader" include nil nil [24147 24166])
            ("gnus-parameters" variable (:documentation "Alist of group parameters.

For example:
   ((\"mail\\\\..*\"  (gnus-show-threads nil)
		  (gnus-use-scoring nil)
		  (gnus-summary-line-format
			\"%U%R%z%I%(%[%d:%ub%-23,23f%]%) %s\\n\")
		  (gcc-self . t)
		  (display . all))
     (\"mail\\\\.me\" (gnus-use-scoring  t))
     (\"list\\\\..*\" (total-expire . t)
		  (broken-reply-to . t)))") nil [24168 24648])
            ("gnus-parameters-case-fold-search" variable
               (:documentation "If it is t, ignore case of group names specified in `gnus-parameters'.
If it is nil, don't ignore case.  If it is `default', which is for the
backward compatibility, use the value of `case-fold-search'."
                :default-value 'default)
                nil [24650 25090])
            ("gnus-group-parameters-more" variable nil nil [25092 25131])
            ("gnus-define-group-parameter" function
               (:documentation "Define a group parameter PARAM.
REST is a plist of following:
:type               One of `bool', `list' or nil.
:function           The name of the function.
:function-document  The documentation of the function.
:parameter-type     The type for customizing the parameter.
:parameter-document The documentation for the parameter.
:variable           The name of the variable.
:variable-document  The documentation for the variable.
:variable-group     The group for customizing the variable.
:variable-type      The type for customizing the variable.
:variable-default   The default value of the variable."
                :arguments ("param" "rest"))
                nil [25133 27923])
            ("gnus-home-directory" variable
               (:documentation "Directory variable that specifies the \"home\" directory.
All other Gnus file and directory variables are initialized from this variable.

Note that Gnus is mostly loaded when the `.gnus.el' file is read.
This means that other directory variables that are initialized
from this variable won't be set properly if you set this variable
in `.gnus.el'.  Set this variable in `.emacs' instead."
                :default-value "~/")
                nil [27925 28394])
            ("gnus-directory" variable
               (:documentation "Directory variable from which all other Gnus file variables are derived.

Note that Gnus is mostly loaded when the `.gnus.el' file is read.
This means that other directory variables that are initialized from
this variable won't be set properly if you set this variable in `.gnus.el'.
Set this variable in `.emacs' instead."
                :default-value (or (getenv "SAVEDIR") (nnheader-concat gnus-home-directory "News/")))
                nil [28396 28868])
            ("gnus-default-directory" variable (:documentation "Default directory for all Gnus buffers.") nil [28870 29031])
            ("gnus-default-nntp-server" variable (:documentation "The hostname of the default NNTP server.
The empty string, or nil, means to use the local host.
You may wish to set this on a site-wide basis.

If you want to change servers, you should use `gnus-select-method'.") nil [29091 29460])
            ("gnus-nntpserver-file" variable
               (:documentation "A file with only the name of the nntp server in it."
                :default-value "/etc/nntpserver")
                nil [29462 29625])
            ("gnus-getenv-nntpserver" function (:documentation "Find default nntp server.
Check the NNTPSERVER environment variable and the
`gnus-nntpserver-file' file.") nil [29627 30000])
            ("gnus-select-method" variable
               (:documentation "Default method for selecting a newsgroup.
This variable should be a list, where the first element is how the
news is to be fetched, the second is the address.

For instance, if you want to get your news via \"flab.flab.edu\" using
NNTP, you could say:

(setq gnus-select-method \\='(nntp \"flab.flab.edu\"))

If you want to use your local spool, say:

(setq gnus-select-method (list \\='nnspool (system-name)))

If you use this variable, you must set `gnus-nntp-server' to nil.

There is a lot more to know about select methods and virtual servers -
see the manual for details."
                :default-value (list 'nntp (or (gnus-getenv-nntpserver) (when (and gnus-default-nntp-server (not (string= gnus-default-nntp-server ""))) gnus-default-nntp-server) "news")))
                nil [30221 31269])
            ("gnus-message-archive-method" variable
               (:documentation "Method used for archiving messages you've sent.
This should be a mail method.

See also `gnus-update-message-archive-method'."
                :default-value "archive")
                nil [31271 31583])
            ("gnus-update-message-archive-method" variable (:documentation "Non-nil means always update the saved \"archive\" method.

The archive method is initially set according to the value of
`gnus-message-archive-method' and is saved in the \"~/.newsrc.eld\" file
so that it may be used as a real method of the server which is named
\"archive\" ever since.  If it once has been saved, it will never be
updated if the value of this variable is nil, even if you change the
value of `gnus-message-archive-method' afterward.  If you want the
saved \"archive\" method to be updated whenever you change the value of
`gnus-message-archive-method', set this variable to a non-nil value.") nil [31585 32328])
            ("gnus-message-archive-group" variable
               (:documentation "Name of the group in which to save the messages you've written.
This can either be a string; a list of strings; or an alist
of regexps/functions/forms to be evaluated to return a string (or a list
of strings).  The functions are called with the name of the current
group (or nil) as a parameter.

If you want to save your mail in one group and the news articles you
write in another group, you could say something like:

  (setq gnus-message-archive-group
	\\='((if (message-news-p)
	      \"misc-news\"
	    \"misc-mail\")))

Normally the group names returned by this variable should be
unprefixed -- which implicitly means \"store on the archive server\".
However, you may wish to store the message on some other server.  In
that case, just return a fully prefixed name of the group --
\"nnml+private:mail.misc\", for instance."
                :default-value '((format-time-string "sent.%Y-%m")))
                nil [32330 33533])
            ("gnus-secondary-servers" variable (:documentation "List of NNTP servers that the user can choose between interactively.
To make Gnus query you for a server, you have to give `gnus' a
non-numeric prefix - `C-u M-x gnus', in short.") nil [33535 33803])
            ("make-obsolete-variable" code nil nil [33804 33879])
            ("gnus-secondary-select-methods" variable (:documentation "A list of secondary methods that will be used for reading news.
This is a list where each element is a complete select method (see
`gnus-select-method').

If, for instance, you want to read your mail with the nnml back end,
you could set this variable:

(setq gnus-secondary-select-methods \\='((nnml \"\")))") nil [33881 34299])
            ("gnus-local-domain" variable (:documentation "Local domain name without a host name.
The DOMAINNAME environment variable is used instead if it is defined.
If the function `system-name' returns the full Internet name, there is
no need to set this variable.") nil [34301 34626])
            ("make-obsolete-variable" code nil nil [34627 34687])
            ("gnus-refer-article-method" variable
               (:documentation "Preferred method for fetching an article by Message-ID.
The value of this variable must be a valid select method as discussed
in the documentation of `gnus-select-method'.

It can also be a list of select methods, as well as the special symbol
`current', which means to use the current select method.  If it is a
list, Gnus will try all the methods in the list until it finds a match."
                :default-value 'current)
                nil [34717 35601])
            ("gnus-use-cross-reference" variable
               (:documentation "Non-nil means that cross referenced articles will be marked as read.
If nil, ignore cross references.  If t, mark articles as read in
subscribed newsgroups.  If neither t nor nil, mark as read in all
newsgroups."
                :default-value t)
                nil [35603 35998])
            ("gnus-process-mark" variable
               (:documentation "Process mark."
                :default-value 35)
                nil [36000 36126])
            ("gnus-large-newsgroup" variable
               (:documentation "The number of articles which indicates a large newsgroup.
If the number of articles in a newsgroup is greater than this value,
confirmation is required for selecting the newsgroup.
If it is nil, no confirmation is required.

Also see `gnus-large-ephemeral-newsgroup'."
                :default-value 200)
                nil [36128 36521])
            ("gnus-use-long-file-name" variable
               (:documentation "Non-nil means that the default name of a file to save articles in is the group name.
If it's nil, the directory form of the group name is used instead.

If this variable is a list, and the list contains the element
`not-score', long file names will not be used for score files; if it
contains the element `not-save', long file names will not be used for
saving; and if it contains the element `not-kill', long file names
will not be used for kill files.

Note that the default for this variable varies according to what system
type you're using.  On `usg-unix-v' this variable defaults to nil while
on all other systems it defaults to t."
                :default-value (not (memq system-type '(usg-unix-v))))
                nil [36523 37522])
            ("gnus-kill-files-directory" variable
               (:documentation "Name of the directory where kill files will be stored (default \"~/News\")."
                :default-value gnus-directory)
                nil [37524 37728])
            ("gnus-save-score" variable (:documentation "If non-nil, save group scoring info.") nil [37730 37869])
            ("gnus-use-undo" variable
               (:documentation "If non-nil, allow undoing in Gnus group mode buffers."
                :default-value t)
                nil [37871 37993])
            ("gnus-use-adaptive-scoring" variable (:documentation "If non-nil, use some adaptive scoring scheme.
If a list, then the values `word' and `line' are meaningful.  The
former will perform adaption on individual words in the subject
header while `line' will perform adaption on several headers.") nil [37995 38366])
            ("gnus-use-cache" variable
               (:documentation "If nil, Gnus will ignore the article cache.
If `passive', it will allow entering (and reading) articles
explicitly entered into the cache.  If anything else, use the
cache to the full extent of the law."
                :default-value 'passive)
                nil [38368 38753])
            ("gnus-use-trees" variable (:documentation "If non-nil, display a thread tree buffer.") nil [38755 38868])
            ("gnus-keep-backlog" variable
               (:documentation "If non-nil, Gnus will keep read articles for later re-retrieval.
If it is a number N, then Gnus will only keep the last N articles
read.  If it is neither nil nor a number, Gnus will keep all read
articles.  This is not a good idea."
                :default-value 20)
                nil [38870 39253])
            ("gnus-suppress-duplicates" variable (:documentation "If non-nil, Gnus will mark duplicate copies of the same article as read.") nil [39255 39409])
            ("gnus-use-scoring" variable
               (:documentation "If non-nil, enable scoring."
                :default-value t)
                nil [39411 39510])
            ("gnus-summary-prepare-exit-hook" variable
               (:documentation "A hook called when preparing to exit from the summary buffer.
It calls `gnus-summary-expire-articles' by default."
                :default-value '(gnus-summary-expire-articles))
                nil [39512 39748])
            ("gnus-novice-user" variable
               (:documentation "Non-nil means that you are a Usenet novice.
If non-nil, verbose messages may be displayed and confirmations may be
required."
                :default-value t)
                nil [39750 39946])
            ("gnus-expert-user" variable (:documentation "Non-nil means that you will never be asked for confirmation about anything.
That doesn't mean *anything* anything; particularly destructive
commands will still require prompting.") nil [39948 40200])
            ("gnus-interactive-catchup" variable
               (:documentation "If non-nil, require your confirmation when catching up a group."
                :default-value t)
                nil [40202 40353])
            ("gnus-interactive-exit" variable
               (:documentation "If non-nil, require your confirmation when exiting Gnus.
If `quiet', update any active summary buffers automatically
first before exiting."
                :default-value t)
                nil [40355 40596])
            ("gnus-extract-address-components" variable
               (:documentation "Function for extracting address components from a From header.
Two pre-defined function exist: `gnus-extract-address-components',
which is the default, quite fast, and too simplistic solution, and
`mail-extract-address-components', which works much better, but is
slower."
                :default-value 'gnus-extract-address-components)
                nil [40598 41121])
            ("gnus-shell-command-separator" variable
               (:documentation "String used to separate shell commands."
                :default-value ";")
                nil [41123 41248])
            ("gnus-valid-select-methods" variable
               (:documentation "An alist of valid select methods.
The first element of each list lists should be a string with the name
of the select method.  The other elements may be the category of
this method (i. e., `post', `mail', `none' or whatever) or other
properties that this method has (like being respoolable).
If you implement a new select method, all you should have to change is
this variable.  I think."
                :default-value '(("nntp" post address prompt-address physical-address cloud) ("nnspool" post address) ("nnvirtual" post-mail virtual prompt-address) ("nnmbox" mail respool address) ("nnml" post-mail respool address) ("nnmh" mail respool address) ("nndir" post-mail prompt-address physical-address) ("nneething" none address prompt-address physical-address) ("nndoc" none address prompt-address) ("nnbabyl" mail address respool) ("nndraft" post-mail) ("nnfolder" mail respool address) ("nngateway" post-mail address prompt-address physical-address) ("nnweb" none) ("nnrss" none global) ("nnagent" post-mail) ("nnimap" post-mail address prompt-address physical-address respool server-marks cloud) ("nnmaildir" mail respool address server-marks) ("nnnil" none)))
                nil [41250 43036])
            ("gnus-redefine-select-method-widget" function (:documentation "Recomputes the select-method widget based on the value of
`gnus-valid-select-methods'.") nil [43038 43644])
            ("gnus-redefine-select-method-widget" code nil nil [43646 43682])
            ("gnus-updated-mode-lines" variable
               (:documentation "List of buffers that should update their mode lines.
The list may contain the symbols `group', `article', `tree' and
`summary'.  If the corresponding symbol is present, Gnus will keep
that mode line updated with information that may be pertinent.
If this variable is nil, screen refresh may be quicker."
                :default-value '(group article summary tree))
                nil [43684 44174])
            ("gnus-mode-non-string-length" variable
               (:documentation "Max length of mode-line non-string contents.
If this is nil, Gnus will take space as is needed, leaving the rest
of the mode line intact."
                :default-value 30)
                nil [44176 44442])
            ("define-widget" code nil nil [44492 44557])
            ("gnus-define-group-parameter" code nil nil [44559 45719])
            ("gnus-define-group-parameter" code nil nil [45721 46326])
            ("gnus-define-group-parameter" code nil nil [46328 46874])
            ("gnus-define-group-parameter" code nil nil [46876 47542])
            ("gnus-define-group-parameter" code nil nil [47544 48350])
            ("gnus-define-group-parameter" code nil nil [48352 49509])
            ("gnus-define-group-parameter" code nil nil [49511 50103])
            ("gnus-define-group-parameter" code nil nil [50105 50752])
            ("gnus-define-group-parameter" code nil nil [50792 51520])
            ("gnus-install-group-spam-parameters" variable
               (:documentation "Disable the group parameters for spam detection.
Enable if `G c' in XEmacs is giving you trouble, and make sure to submit a bug report."
                :default-value t)
                nil [51603 51847])
            ("when" code nil nil [51849 70127])
            ("gnus-group-uncollapsed-levels" variable
               (:documentation "Number of group name elements to leave alone when making a short group name."
                :default-value 1)
                nil [70129 70298])
            ("gnus-group-use-permanent-levels" variable (:documentation "If non-nil, once you set a level, Gnus will use this level.") nil [70300 70456])
            ("gnus-load-hook" variable (:documentation "A hook run while Gnus is loaded.") nil [70469 70571])
            ("gnus-apply-kill-hook" variable
               (:documentation "A hook called to apply kill files to a group.
This hook is intended to apply a kill file to the selected newsgroup.
The function `gnus-apply-kill-file' is called by default.

Since a general kill file is too heavy to use only for a few
newsgroups, I recommend you to use a lighter hook function.  For
example, if you'd like to apply a kill file to articles which contains
a string `rmgroup' in subject in newsgroup `control', you can use the
following hook:

 (setq gnus-apply-kill-hook
      (list
	(lambda ()
	  (cond ((string-match \"control\" gnus-newsgroup-name)
		 (gnus-kill \"Subject\" \"rmgroup\")
		 (gnus-expunge \"X\"))))))"
                :default-value '(gnus-apply-kill-file))
                nil [70573 71344])
            ("gnus-group-change-level-function" variable (:documentation "Function run when a group level is changed.
It is called with three parameters -- GROUP, LEVEL and OLDLEVEL.") nil [71346 71577])
            ("gnus-visual" variable
               (:documentation "Enable visual features.
If `visual' is disabled, there will be no menus and few faces.  Most of
the visual customization options below will be ignored.  Gnus will use
less space and be faster as a result.

This variable can also be a list of visual elements to switch on.  For
instance, to switch off all visual things except menus, you can say:

   (setq gnus-visual \\='(menu))

Valid elements include `summary-highlight', `group-highlight',
`article-highlight', `mouse-face', `summary-menu', `group-menu',
`article-menu', `tree-highlight', `menu', `highlight', `browse-menu',
`server-menu', `page-marker', `tree-menu', `binary-menu', and`pick-menu'."
                :default-value '(summary-highlight group-highlight article-highlight mouse-face summary-menu group-menu article-menu tree-highlight menu highlight browse-menu server-menu page-marker tree-menu binary-menu pick-menu))
                nil [71599 73010])
            ("gnus-visual" variable nil nil [73038 73058])
            ("gnus-visual-p" function (:arguments ("type" "class")) nil [73111 73404])
            ("gnus-mouse-face" variable
               (:documentation "Face used for group or summary buffer mouse highlighting.
The line beneath the mouse pointer will be highlighted with this
face."
                :default-value (condition-case nil (if (gnus-visual-p 'mouse-face 'highlight) (if (boundp 'gnus-mouse-face) (or gnus-mouse-face 'highlight) 'highlight) 'default) (error 'highlight)))
                nil [73406 73796])
            ("gnus-article-save-directory" variable
               (:documentation "Name of the directory articles will be saved in (default \"~/News\")."
                :default-value gnus-directory)
                nil [73798 73975])
            ("gnus-plugged" variable
               (:documentation "Whether Gnus is plugged or not."
                :default-value t)
                nil [73977 74036])
            ("gnus-agent-cache" variable
               (:documentation "Controls use of the agent cache while plugged.
When set, Gnus will prefer using the locally stored content rather
than re-fetching it from the server.  You also need to enable
`gnus-agent' for this to have any affect."
                :default-value t)
                nil [74038 74346])
            ("gnus-default-charset" variable
               (:documentation "Default charset assumed to be used when viewing non-ASCII characters.
This variable is overridden on a group-to-group basis by the
`gnus-group-charset-alist' variable and is only used on groups not
covered by that variable."
                :default-value 'undecided)
                nil [74348 74658])
            ("gnus-agent" variable
               (:documentation "Whether we want to use the Gnus agent or not.

You may customize gnus-agent to disable its use.  However, some
back ends have started to use the agent as a client-side cache.
Disabling the agent may result in noticeable loss of performance."
                :default-value t)
                nil [74694 75019])
            ("gnus-other-frame-function" variable
               (:documentation "Function called by the command `gnus-other-frame' when starting Gnus."
                :default-value nil)
                nil [75021 75303])
            ("declare-function" code nil nil [75305 75360])
            ("gnus-other-frame-resume-function" variable
               (:documentation "Function called by the command `gnus-other-frame' when resuming Gnus."
                :default-value nil)
                nil [75362 75731])
            ("gnus-other-frame-parameters" variable (:documentation "Frame parameters used by `gnus-other-frame' to create a Gnus frame.") nil [75733 75971])
            ("gnus-user-agent" variable
               (:documentation "Which information should be exposed in the User-Agent header.

Can be a list of symbols or a string.  Valid symbols are `gnus'
(show Gnus version) and `emacs' (show Emacs version).  In
addition to the Emacs version, you can add `codename' (show
(S)XEmacs codename) or either `config' (show system
configuration) or `type' (show system type).  If you set it to
a string, be sure to use a valid format, see RFC 2616."
                :default-value '(emacs gnus type))
                nil [75973 76791])
            ("when" code nil nil [76843 77482])
            ("gnus-agent-gcc-header" variable (:default-value "X-Gnus-Agent-Gcc") nil [77510 77559])
            ("gnus-agent-meta-information-header" variable (:default-value "X-Gnus-Agent-Meta-Information") nil [77560 77635])
            ("gnus-agent-method-p-cache" variable nil nil [77636 77797])
            ("gnus-agent-target-move-group-header" variable (:default-value "X-Gnus-Agent-Move-To") nil [77798 77865])
            ("gnus-draft-meta-information-header" variable (:default-value "X-Draft-From") nil [77866 77924])
            ("gnus-group-get-parameter-function" variable (:default-value nil) nil [77925 77994])
            ("gnus-original-article-buffer" variable (:default-value " *Original Article*") nil [77995 78054])
            ("gnus-newsgroup-name" variable nil nil [78055 78087])
            ("gnus-ephemeral-servers" variable nil nil [78088 78123])
            ("gnus-server-method-cache" variable nil nil [78124 78161])
            ("gnus-extended-servers" variable nil nil [78162 78196])
            ("gnus-carpal" variable nil nil [78291 78315])
            ("make-obsolete-variable" code nil nil [78316 78370])
            ("gnus-agent-fetching" variable (:documentation "Whether Gnus agent is in fetching mode.") nil [78372 78448])
            ("gnus-agent-covered-methods" variable (:documentation "A list of servers, NOT methods, showing which servers are covered by the agent.") nil [78450 78573])
            ("gnus-command-method" variable (:documentation "Dynamically bound variable that says what the current back end is.") nil [78575 78678])
            ("gnus-current-select-method" variable (:documentation "The current method for selecting a newsgroup.") nil [78680 78769])
            ("gnus-tree-buffer" variable
               (:documentation "Buffer where Gnus thread trees are displayed."
                :default-value "*Tree*")
                nil [78771 78855])
            ("gnus-method-history" variable nil nil [78917 78949])
            ("gnus-mail-method-history" variable nil nil [79016 79053])
            ("gnus-group-history" variable nil nil [79114 79145])
            ("gnus-server-alist" variable (:documentation "Servers created by Gnus, or via the server buffer.
Servers defined in the user's config files do not appear here.
This variable is persisted in the user's .newsrc.eld file.") nil [79147 79354])
            ("gnus-cache-directory" variable
               (:documentation "The directory where cached articles will be stored."
                :default-value (nnheader-concat gnus-directory "cache/"))
                nil [79356 79528])
            ("gnus-predefined-server-alist" variable
               (:documentation "List of predefined (convenience) servers."
                :default-value `(("cache" nnspool "cache" (nnspool-spool-directory ,gnus-cache-directory) (nnspool-nov-directory ,gnus-cache-directory) (nnspool-active-file ,(nnheader-concat gnus-cache-directory "active")))))
                nil [79530 79835])
            ("gnus-article-mark-lists" variable
               (:constant-flag t
                :default-value '((marked . tick) (replied . reply) (expirable . expire) (killed . killed) (bookmarks . bookmark) (dormant . dormant) (scored . score) (saved . save) (cached . cache) (downloadable . download) (unsendable . unsend) (forwarded . forward) (seen . seen) (unexist . unexist)))
                nil [79837 80169])
            ("gnus-article-special-mark-lists" variable
               (:constant-flag t
                :default-value '((seen range) (unexist range) (killed range) (bookmark tuple) (uid tuple) (active tuple) (score tuple)))
                nil [80171 80344])
            ("gnus-article-unpropagated-mark-lists" variable
               (:documentation "Marks that shouldn't be propagated to back ends.
Typical marks are those that make no sense in a standalone back end,
such as a mark that says whether an article is stored in the cache
(which doesn't make sense in a standalone back end)."
                :constant-flag t
                :default-value '(seen cache download unsend score bookmark unexist))
                nil [80720 81065])
            ("gnus-headers-retrieved-by" variable nil nil [81067 81105])
            ("gnus-article-reply" variable nil nil [81106 81137])
            ("gnus-override-method" variable nil nil [81138 81171])
            ("gnus-opened-servers" variable nil nil [81172 81204])
            ("gnus-current-kill-article" variable nil nil [81206 81244])
            ("gnus-have-read-active-file" variable nil nil [81246 81285])
            ("gnus-maintainer" variable
               (:documentation "The mail address of the Gnus maintainers."
                :constant-flag t
                :default-value "submit@debbugs.gnu.org (The Gnus Bugfixing Girls + Boys)")
                nil [81287 81420])
            ("gnus-bug-package" variable
               (:documentation "The package to use in the bug submission."
                :constant-flag t
                :default-value "emacs,gnus")
                nil [81422 81510])
            ("gnus-info-nodes" variable
               (:documentation "Alist of major modes and related Info nodes."
                :default-value '((gnus-group-mode "(gnus)Group Buffer") (gnus-summary-mode "(gnus)Summary Buffer") (gnus-article-mode "(gnus)Article Buffer") (gnus-server-mode "(gnus)Server Buffer") (gnus-browse-mode "(gnus)Browse Foreign Server") (gnus-tree-mode "(gnus)Tree Display")))
                nil [81512 81863])
            ("gnus-summary-buffer" variable (:default-value "*Summary*") nil [81865 81905])
            ("gnus-article-buffer" variable (:default-value "*Article*") nil [81906 81946])
            ("gnus-server-buffer" variable (:default-value "*Server*") nil [81947 81985])
            ("gnus-slave" variable (:documentation "Whether this Gnus is a slave or not.") nil [81987 82051])
            ("gnus-batch-mode" variable (:documentation "Whether this Gnus is running in batch mode or not.") nil [82053 82136])
            ("gnus-variable-list" variable
               (:documentation "Gnus variables saved in the quick startup file."
                :default-value '(gnus-newsrc-options gnus-newsrc-options-n gnus-newsrc-last-checked-date gnus-newsrc-alist gnus-server-alist gnus-killed-list gnus-zombie-list gnus-topic-topology gnus-topic-alist gnus-cloud-sequence gnus-cloud-covered-servers gnus-cloud-file-timestamps))
                nil [82138 82496])
            ("gnus-newsrc-alist" variable (:documentation "Assoc list of read articles.
`gnus-newsrc-hashtb' should be kept so that both hold the same information.") nil [82498 82637])
            ("gnus-registry-alist" variable (:documentation "Assoc list of registry data.
gnus-registry.el will populate this if it's loaded.") nil [82639 82756])
            ("gnus-newsrc-hashtb" variable (:documentation "Hashtable of `gnus-newsrc-alist'.") nil [82758 82827])
            ("gnus-killed-list" variable (:documentation "List of killed newsgroups.") nil [82829 82889])
            ("gnus-killed-hashtb" variable (:documentation "Hash table equivalent of `gnus-killed-list'.") nil [82891 82971])
            ("gnus-zombie-list" variable (:documentation "List of almost dead newsgroups.") nil [82973 83038])
            ("gnus-description-hashtb" variable (:documentation "Descriptions of newsgroups.") nil [83040 83108])
            ("gnus-list-of-killed-groups" variable (:documentation "List of newsgroups that have recently been killed by the user.") nil [83110 83216])
            ("gnus-active-hashtb" variable (:documentation "Hashtable of active articles.") nil [83218 83283])
            ("gnus-moderated-hashtb" variable (:documentation "Hashtable of moderated newsgroups.") nil [83285 83358])
            ("gnus-prev-winconf" variable nil nil [83390 83420])
            ("gnus-reffed-article-number" variable nil nil [83422 83461])
            ("gnus-dead-summary" variable nil nil [83463 83493])
            ("gnus-invalid-group-regexp" variable
               (:documentation "Regexp matching invalid groups."
                :default-value "[: `'\"/]\\|^$")
                nil [83495 83582])
            ("gnus-other-frame-object" variable (:documentation "A frame object which will be created by `gnus-other-frame'.") nil [83584 83684])
            ("mapc" code nil nil [83896 93502])
            ("gnus-summary-line-format" variable
               (:documentation "The format specification of the lines in the summary buffer.

It works along the same lines as a normal formatting string,
with some simple extensions.

%N          Article number, left padded with spaces (string)
%S          Subject (string)
%s          Subject if it is at the root of a thread, and \"\"
            otherwise (string)
%n          Name of the poster (string)
%a          Extracted name of the poster (string)
%A          Extracted address of the poster (string)
%F          Contents of the From: header (string)
%f          Contents of the From: or To: headers (string)
%x          Contents of the Xref: header (string)
%D          Date of the article (string)
%d          Date of the article (string) in DD-MMM format
%o          Date of the article (string) in YYYYMMDD`T'HHMMSS
            format
%M          Message-id of the article (string)
%r          References of the article (string)
%c          Number of characters in the article (integer)
%k          Pretty-printed version of the above (string)
            For example, \"1.2k\" or \"0.4M\".
%L          Number of lines in the article (integer)
%I          Indentation based on thread level (a string of
            spaces)
%B          A complex trn-style thread tree (string)
            The variables `gnus-sum-thread-*' can be used for
            customization.
%T          A string with two possible values: 80 spaces if the
            article is on thread level two or larger and 0 spaces
            on level one
%R          \"A\" if this article has been replied to, \" \"
            otherwise (character)
%U          \"Read\" status of this article.
            See Info node `(gnus)Marking Articles'
%[          Opening bracket (character, \"[\" or \"<\")
%]          Closing bracket (character, \"]\" or \">\")
%>          Spaces of length thread-level (string)
%<          Spaces of length (- 20 thread-level) (string)
%i          Article score (number)
%z          Article zcore (character)
%t          Number of articles under the current thread (number).
%e          Whether the thread is empty or not (character).
%V          Total thread score (number).
%P          The line number (number).
%O          Download mark (character).
%*          If present, indicates desired cursor position
            (instead of after first colon).
%u          User defined specifier. The next character in the
            format string should be a letter. Gnus will call the
            function gnus-user-format-function-X, where X is the
            letter following %u. The function will be passed the
            current header as argument. The function should
            return a string, which will be inserted into the
            summary just like information from any other summary
            specifier.
&user-date; Age sensitive date format. Various date format is
            defined in `gnus-user-date-format-alist'.


The %U (status), %R (replied) and %z (zcore) specs have to be handled
with care.  For reasons of efficiency, Gnus will compute what column
these characters will end up in, and \"hard-code\" that.  This means that
it is invalid to have these specs after a variable-length spec.  Well,
you might not be arrested, but your summary buffer will look strange,
which is bad enough.

The smart choice is to have these specs as far to the left as
possible.

This restriction may disappear in later versions of Gnus.

General format specifiers can also be used.
See Info node `(gnus)Formatting Variables'."
                :default-value "%U%R%z%I%(%[%4L: %-23,23f%]%) %s
")
                nil [93532 97223])
            ("gnus-suppress-keymap" function (:arguments ("keymap")) nil [97255 97438])
            ("gnus-article-mode-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (gnus-suppress-keymap keymap) keymap)) nil [97440 97555])
            ("gnus-summary-mode-map" variable (:default-value (let ((keymap (make-keymap))) (gnus-suppress-keymap keymap) keymap)) nil [97556 97664])
            ("gnus-group-mode-map" variable (:default-value (let ((keymap (make-keymap))) (gnus-suppress-keymap keymap) keymap)) nil [97665 97771])
            ("defalias" code nil nil [97952 98008])
            ("defalias" code nil nil [98009 98063])
            ("gnus-header-from" function (:arguments ("header")) nil [98097 98158])
            ("gnus-gethash" function
               (:documentation "Get hash value of STRING in HASHTABLE."
                :arguments ("string" "hashtable"))
                nil [98160 98296])
            ("gnus-gethash-safe" function
               (:documentation "Get hash value of STRING in HASHTABLE.
Return nil if not defined."
                :arguments ("string" "hashtable"))
                nil [98298 98508])
            ("gnus-sethash" function
               (:documentation "Set hash value.  Arguments are STRING, VALUE, and HASHTABLE."
                :arguments ("string" "value" "hashtable"))
                nil [98510 98667])
            ("put" code nil nil [98668 98723])
            ("gnus-group-unread" function
               (:documentation "Get the currently computed number of unread articles in GROUP."
                :arguments ("group"))
                nil [98725 98878])
            ("gnus-group-entry" function
               (:documentation "Get the newsrc entry for GROUP."
                :arguments ("group"))
                nil [98880 98995])
            ("gnus-active" function
               (:documentation "Get active info on GROUP."
                :arguments ("group"))
                nil [98997 99101])
            ("gnus-set-active" function
               (:documentation "Set GROUP's active info."
                :arguments ("group" "active"))
                nil [99103 99225])
            ("gnus-info-group" function (:arguments ("info")) nil [99251 99301])
            ("gnus-info-rank" function (:arguments ("info")) nil [99302 99351])
            ("gnus-info-read" function (:arguments ("info")) nil [99352 99401])
            ("gnus-info-marks" function (:arguments ("info")) nil [99402 99452])
            ("gnus-info-method" function (:arguments ("info")) nil [99453 99504])
            ("gnus-info-params" function (:arguments ("info")) nil [99505 99556])
            ("gnus-info-level" function (:arguments ("info")) nil [99558 99680])
            ("gnus-info-score" function (:arguments ("info")) nil [99681 99797])
            ("gnus-info-set-group" function (:arguments ("info" "group")) nil [99799 99867])
            ("gnus-info-set-rank" function (:arguments ("info" "rank")) nil [99868 99944])
            ("gnus-info-set-read" function (:arguments ("info" "read")) nil [99945 100021])
            ("gnus-info-set-marks" function (:arguments ("info" "marks" "extend")) nil [100022 100178])
            ("gnus-info-set-method" function (:arguments ("info" "method" "extend")) nil [100179 100339])
            ("gnus-info-set-params" function (:arguments ("info" "params" "extend")) nil [100340 100500])
            ("gnus-info-set-entry" function (:arguments ("info" "entry" "number")) nil [100502 100723])
            ("gnus-info-set-level" function (:arguments ("info" "level")) nil [100725 100884])
            ("gnus-info-set-score" function (:arguments ("info" "score")) nil [100885 101062])
            ("gnus-get-info" function (:arguments ("group")) nil [101064 101148])
            ("gnus-set-info" function (:arguments ("group" "info")) nil [101150 101254])
            ("gnus-shutdown-alist" variable nil nil [101280 101312])
            ("gnus-add-shutdown" function
               (:documentation "Run FUNCTION whenever one of SYMBOLS is shut down."
                :arguments ("function" "symbols"))
                nil [101314 101472])
            ("gnus-shutdown" function
               (:documentation "Shut down everything that waits for SYMBOL."
                :arguments ("symbol"))
                nil [101474 101656])
            ("gnus-find-subscribed-addresses" function (:documentation "Return a regexp matching the addresses of all subscribed mail groups.
It consists of the `to-address' or `to-list' parameter of all groups
with a `subscribed' parameter.") nil [101696 102360])
            ("gnus-string-or" function
               (:documentation "Return the first element of STRINGS that is a non-blank string.
STRINGS will be evaluated in normal `or' order."
                :arguments ("strings"))
                nil [102362 102558])
            ("gnus-string-or-1" function (:arguments ("strings")) nil [102560 102761])
            ("gnus-version" function
               (:documentation "Version number of this version of Gnus.
If ARG, insert string at point."
                :user-visible-flag t
                :arguments ("arg"))
                nil [102763 102971])
            ("gnus-continuum-version" function
               (:documentation "Return VERSION as a floating point number."
                :arguments ("version"))
                nil [102973 104019])
            ("gnus-info-buffer" variable nil nil [104021 104046])
            ("gnus-info-find-node" function
               (:documentation "Find Info documentation of Gnus."
                :user-visible-flag t
                :arguments ("nodename"))
                nil [104048 104368])
            ("gnus-current-prefix-symbol" variable (:documentation "Current prefix symbol.") nil [104400 104466])
            ("gnus-current-prefix-symbols" variable (:documentation "List of current prefix symbols.") nil [104468 104544])
            ("gnus-interactive" function
               (:documentation "Return a list that can be fed to `interactive'.
See `interactive' for full documentation.

Adds the following specs:

y -- The current symbolic prefix.
Y -- A list of the current symbolic prefix(es).
A -- Article number.
H -- Article header.
g -- Group name."
                :arguments ("string"))
                nil [104546 106856])
            ("gnus-symbolic-argument" function
               (:documentation "Read a symbolic argument and a command, and then execute command."
                :user-visible-flag t)
                nil [106858 107480])
            ("gnus-check-backend-function" function
               (:documentation "Check whether GROUP supports function FUNC.
GROUP can either be a string (a group name) or a select method."
                :arguments ("func" "group"))
                nil [107511 107900])
            ("gnus-group-read-only-p" function
               (:documentation "Check whether GROUP supports editing or not.
If GROUP is nil, `gnus-newsgroup-name' will be checked instead.  Note
that that variable is buffer-local to the summary buffers."
                :arguments ("group"))
                nil [107902 108248])
            ("gnus-virtual-group-p" function
               (:documentation "Say whether GROUP is virtual or not."
                :arguments ("group"))
                nil [108250 108437])
            ("gnus-news-group-p" function
               (:documentation "Return non-nil if GROUP (and ARTICLE) come from a news server."
                :arguments ("group" "article"))
                nil [108439 109114])
            ("gnus-use-long-file-name" function (:arguments ("symbol")) nil [109166 109497])
            ("gnus-generate-new-group-name" function (:arguments ("leaf")) nil [109536 109731])
            ("gnus-ephemeral-group-p" function
               (:documentation "Say whether GROUP is ephemeral or not."
                :arguments ("group"))
                nil [109733 109864])
            ("gnus-group-quit-config" function
               (:documentation "Return the quit-config of GROUP."
                :arguments ("group"))
                nil [109866 109991])
            ("gnus-kill-ephemeral-group" function
               (:documentation "Remove ephemeral GROUP from relevant structures."
                :arguments ("group"))
                nil [109993 110133])
            ("gnus-simplify-mode-line" function (:documentation "Make mode lines a bit simpler.") nil [110135 110473])
            ("gnus-server-add-address" function (:arguments ("method")) nil [110500 110930])
            ("gnus-method-to-server" function (:arguments ("method" "nocache" "no-enter-cache")) nil [110932 112057])
            ("gnus-server-to-method" function
               (:documentation "Map virtual server names to select methods."
                :arguments ("server"))
                nil [112059 113875])
            ("gnus-server-get-method" function (:arguments ("group" "method")) nil [113877 114360])
            ("gnus-method-equal" function
               (:documentation "Say whether two servers are equal."
                :arguments ("ss1" "ss2"))
                nil [114362 114622])
            ("gnus-methods-equal-p" function (:arguments ("m1" "m2")) nil [114624 114920])
            ("gnus-sloppily-equal-method-parameters" function (:arguments ("m1" "m2")) nil [114922 115782])
            ("gnus-method-ephemeral-p" function (:arguments ("method")) nil [115784 115990])
            ("gnus-methods-sloppily-equal" function (:arguments ("m1" "m2")) nil [115992 116223])
            ("gnus-server-equal" function
               (:documentation "Say whether two methods are equal."
                :arguments ("m1" "m2"))
                nil [116225 116538])
            ("gnus-servers-using-backend" function
               (:documentation "Return a list of known servers using BACKEND."
                :arguments ("backend"))
                nil [116540 116791])
            ("gnus-archive-server-wanted-p" function (:documentation "Say whether the user wants to use the archive server.") nil [116793 117204])
            ("gnus-method-to-server-name" function (:arguments ("method")) nil [117206 117539])
            ("gnus-method-to-full-server-name" function (:arguments ("method")) nil [117541 117639])
            ("gnus-group-prefixed-name" function
               (:documentation "Return the whole name from GROUP and METHOD.
Call with full set to get the fully qualified group name (even if the
server is native)."
                :arguments ("group" "method" "full"))
                nil [117641 118150])
            ("gnus-group-full-name" function
               (:documentation "Return the full name from GROUP and METHOD, even if the method is native."
                :arguments ("group" "method"))
                nil [118152 118317])
            ("gnus-group-guess-full-name-from-command-method" function
               (:documentation "Guess the full name from GROUP, even if the method is native."
                :arguments ("group"))
                nil [118319 118549])
            ("gnus-group-real-prefix" function
               (:documentation "Return the prefix of the current group name."
                :arguments ("group"))
                nil [118551 118752])
            ("gnus-group-short-name" function
               (:documentation "Return the short group name."
                :arguments ("group"))
                nil [118754 118956])
            ("gnus-group-prefixed-p" function
               (:documentation "Return the prefix of the current group name."
                :arguments ("group"))
                nil [118958 119092])
            ("declare-function" code nil nil [119094 119158])
            ("gnus-summary-buffer-name" function
               (:documentation "Return the summary buffer name of GROUP."
                :arguments ("group"))
                nil [119160 119304])
            ("gnus-group-method" function
               (:documentation "Return the server or method used for selecting GROUP.
You should probably use `gnus-find-method-for-group' instead."
                :arguments ("group"))
                nil [119306 120222])
            ("gnus-native-method-p" function
               (:documentation "Return whether METHOD is the native select method."
                :arguments ("method"))
                nil [120224 120367])
            ("gnus-secondary-method-p" function
               (:documentation "Return whether METHOD is a secondary select method."
                :arguments ("method"))
                nil [120369 120751])
            ("gnus-method-simplify" function
               (:documentation "Return the shortest uniquely identifying string or method for METHOD."
                :arguments ("method"))
                nil [120753 121039])
            ("gnus-groups-from-server" function
               (:documentation "Return a list of all groups that are fetched from SERVER."
                :arguments ("server"))
                nil [121041 121363])
            ("gnus-group-foreign-p" function
               (:documentation "Say whether a group is foreign or not."
                :arguments ("group"))
                nil [121365 121530])
            ("gnus-group-native-p" function
               (:documentation "Say whether the group is native or not."
                :arguments ("group"))
                nil [121532 121644])
            ("gnus-group-secondary-p" function
               (:documentation "Say whether the group is secondary or not."
                :arguments ("group"))
                nil [121646 121794])
            ("gnus-parameters-get-parameter" function
               (:documentation "Return the group parameters for GROUP from `gnus-parameters'."
                :arguments ("group"))
                nil [121796 122285])
            ("gnus-expand-group-parameter" function
               (:documentation "Use MATCH to expand VALUE in GROUP."
                :arguments ("match" "value" "group"))
                nil [122287 122658])
            ("gnus-expand-group-parameters" function
               (:documentation "Go through PARAMETERS and expand them according to the match data."
                :arguments ("match" "parameters" "group"))
                nil [122660 123780])
            ("gnus-group-fast-parameter" function
               (:documentation "For GROUP, return the value of SYMBOL.

You should call this in the `gnus-group-buffer' buffer.
The function `gnus-group-find-parameter' will do that for you."
                :arguments ("group" "symbol" "allow-list"))
                nil [123782 125660])
            ("gnus-group-find-parameter" function
               (:documentation "Return the group parameters for GROUP.
If SYMBOL, return the value of that symbol in the group parameters.

If you call this function inside a loop, consider using the faster
`gnus-group-fast-parameter' instead."
                :arguments ("group" "symbol" "allow-list"))
                nil [125662 126270])
            ("gnus-group-get-parameter" function
               (:documentation "Return the group parameters for GROUP.
If SYMBOL, return the value of that symbol in the group parameters.
If ALLOW-LIST, also allow list as a result.
Most functions should use `gnus-group-find-parameter', which
also examines the topic parameters."
                :arguments ("group" "symbol" "allow-list"))
                nil [126272 126736])
            ("gnus-group-parameter-value" function
               (:documentation "Return the value of SYMBOL in group PARAMS.
If ALLOW-LIST, also allow list as a result."
                :arguments ("params" "symbol" "allow-list" "present-p"))
                nil [126738 127398])
            ("gnus-group-add-parameter" function
               (:documentation "Add parameter PARAM to GROUP."
                :arguments ("group" "param"))
                nil [127400 127754])
            ("gnus-group-set-parameter" function
               (:documentation "Set parameter NAME to VALUE in GROUP.
GROUP can also be an INFO structure."
                :arguments ("group" "name" "value"))
                nil [127756 128457])
            ("gnus-group-remove-parameter" function
               (:documentation "Remove parameter NAME from GROUP.
GROUP can also be an INFO structure."
                :arguments ("group" "name"))
                nil [128459 128869])
            ("gnus-group-add-score" function
               (:documentation "Add SCORE to the GROUP score.
If SCORE is nil, add 1 to the score of GROUP."
                :arguments ("group" "score"))
                nil [128871 129131])
            ("gnus-short-group-name" function
               (:documentation "Collapse GROUP name LEVELS.
Select methods are stripped and any remote host name is stripped down to
just the host name."
                :arguments ("group" "levels"))
                nil [129133 130739])
            ("gnus-narrow-to-body" function (:documentation "Narrow to the body of an article.") nil [130741 130939])
            ("gnus-apply-kill-file" function (:documentation "Apply a kill file to the current newsgroup.
Returns the number of articles marked as read.") nil [130976 131271])
            ("gnus-kill-save-kill-buffer" function nil nil [131273 131536])
            ("gnus-kill-file-name" variable
               (:documentation "Suffix of the kill files."
                :default-value "KILL")
                nil [131538 131675])
            ("gnus-newsgroup-kill-file" function
               (:documentation "Return the name of a kill file name for NEWSGROUP.
If NEWSGROUP is nil, return the global kill file name instead."
                :arguments ("newsgroup"))
                nil [131677 132464])
            ("gnus-member-of-valid" function
               (:documentation "Find out if GROUP has SYMBOL as part of its \"valid\" spec."
                :arguments ("symbol" "group"))
                nil [132486 132702])
            ("gnus-method-option-p" function
               (:documentation "Return non-nil if select METHOD has OPTION as a parameter."
                :arguments ("method" "option"))
                nil [132704 132971])
            ("gnus-similar-server-opened" function
               (:documentation "Return non-nil if we have a similar server opened.
This is defined as a server with the same name, but different
parameters."
                :arguments ("method"))
                nil [132973 133522])
            ("gnus-server-extend-method" function (:arguments ("group" "method")) nil [133524 134281])
            ("gnus-server-status" function
               (:documentation "Return the status of METHOD."
                :arguments ("method"))
                nil [134283 134396])
            ("gnus-group-name-to-method" function
               (:documentation "Guess a select method based on GROUP."
                :arguments ("group"))
                nil [134398 134761])
            ("gnus-server-string" function
               (:documentation "Return a readable string that describes SERVER."
                :arguments ("server"))
                nil [134763 135066])
            ("gnus-same-method-different-name" function (:arguments ("method")) nil [135068 135547])
            ("gnus-find-method-for-group" function
               (:documentation "Find the select method that GROUP uses."
                :arguments ("group" "info"))
                nil [135549 136628])
            ("gnus-methods-using" function
               (:documentation "Find all methods that have FEATURE."
                :arguments ("feature"))
                nil [136630 136885])
            ("message-y-or-n-p" function (:prototype-flag t) nil [136887 136940])
            ("gnus-read-group" function
               (:documentation "Prompt the user for a group name.
Disallow invalid group names."
                :arguments ("prompt" "default"))
                nil [136942 138080])
            ("gnus-read-method" function
               (:documentation "Prompt the user for a method.
Allow completion over sensible values."
                :arguments ("prompt"))
                nil [138082 139209])
            ("gnus-agent-method-p" function
               (:documentation "Say whether METHOD is covered by the agent."
                :arguments ("method-or-server"))
                nil [139232 139710])
            ("gnus-online" function (:arguments ("method")) nil [139712 139866])
            ("gnus-slave-no-server" function
               (:documentation "Read network news as a slave, without connecting to the local server."
                :user-visible-flag t
                :arguments ("arg"))
                nil [139909 140072])
            ("gnus-no-server" function
               (:documentation "Read network news.
If ARG is a positive number, Gnus will use that as the startup
level. If ARG is nil, Gnus will be started at level 2.  If ARG is
non-nil and not a positive number, Gnus will prompt the user for the
name of an NNTP server to use.
As opposed to `gnus', this command will not connect to the local
server."
                :user-visible-flag t
                :arguments ("arg" "slave"))
                nil [140089 140509])
            ("gnus-slave" function
               (:documentation "Read news as a slave."
                :user-visible-flag t
                :arguments ("arg"))
                nil [140526 140630])
            ("gnus-delete-gnus-frame" function (:documentation "Delete gnus frame unless it is the only one.
Used for `gnus-exit-gnus-hook' in `gnus-other-frame'.") nil [140632 140934])
            ("gnus-other-frame" function
               (:documentation "Pop up a frame to read news.
This will call one of the Gnus commands which is specified by the user
option `gnus-other-frame-function' (default `gnus') with the argument
ARG if Gnus is not running, otherwise pop up a Gnus frame and run the
command specified by `gnus-other-frame-resume-function'.
The optional second argument DISPLAY should be a standard display string
such as \"unix:0\" to specify where to pop up a frame.  If DISPLAY is
omitted or the function `make-frame-on-display' is not available, the
current display is used."
                :user-visible-flag t
                :arguments ("arg" "display"))
                nil [140951 143055])
            ("gnus" function
               (:documentation "Read network news.
If ARG is non-nil and a positive number, Gnus will use that as the
startup level.  If ARG is non-nil and not a positive number, Gnus will
prompt the user for the name of an NNTP server to use."
                :user-visible-flag t
                :arguments ("arg" "dont-connect" "slave"))
                nil [143072 143737])
            ("declare-function" code nil nil [143739 143847])
            ("gnus-list-debbugs" function
               (:documentation "List all open Gnus bug reports."
                :user-visible-flag t)
                nil [143849 143981])
            ("gnus" package nil nil [143983 143998]))          
      :file "gnus.el.gz"
      :pointmax 144022
      :fsize 36496
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 93502 . 93503) (symbol 83760 . 83776) (open-paren 83759 . 83760) (close-paren 8863 . 8864) (symbol 8040 . 8056) (open-paren 8039 . 8040) (close-paren 1065 . 1066) (symbol 1030 . 1047) (open-paren 1029 . 1030)))
    (semanticdb-table "semanticdb-table-1c63568"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1578 1594])
            ("mml-attach-file" function (:prototype-flag t) nil [1595 1628])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [1629 1677])
            ("mailcap-extension-to-mime" function (:prototype-flag t) nil [1708 1755])
            ("mailcap-mime-info" function (:prototype-flag t) nil [1756 1795])
            ("mm-mailcap-command" function (:prototype-flag t) nil [1843 1885])
            ("ps-print-preprint" function (:prototype-flag t) nil [1887 1927])
            ("message-buffers" function (:prototype-flag t) nil [2073 2110])
            ("gnus-print-buffer" function (:prototype-flag t) nil [2111 2151])
            ("gnus-dired-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" 'gnus-dired-attach) (define-key map "" 'gnus-dired-find-file-mailcap) (define-key map "" 'gnus-dired-print) map)) nil [2153 2401])
            ("gnus-dired-mail-mode" variable
               (:documentation "Your preference for a mail composition package.
See `mail-user-agent' for more information."
                :default-value 'gnus-user-agent)
                nil [2532 3201])
            ("define-minor-mode" code nil nil [3203 3416])
            ("turn-on-gnus-dired-mode" function
               (:documentation "Convenience method to turn on gnus-dired-mode."
                :user-visible-flag t)
                nil [3433 3556])
            ("gnus-dired-mail-buffers" function (:documentation "Return a list of active mail composition buffers.") nil [3558 4053])
            ("gnus-completing-read" function (:prototype-flag t) nil [4055 4099])
            ("gnus-dired-attach" function
               (:documentation "Attach dired's marked files to a gnus message composition.
If called non-interactively, FILES-TO-ATTACH should be a list of
filenames."
                :user-visible-flag t
                :arguments ("files-to-attach"))
                nil [4150 6284])
            ("mailcap-parse-mailcaps" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6286 6335])
            ("gnus-dired-find-file-mailcap" function
               (:documentation "In dired, visit FILE-NAME according to the mailcap file.
If ARG is non-nil, open it in a new buffer."
                :user-visible-flag t
                :arguments ("file-name" "arg"))
                nil [6337 7440])
            ("gnus-dired-print" function
               (:documentation "In dired, print FILE-NAME according to the mailcap file.

If there is no print command, print in a PostScript image. If the
optional argument PRINT-TO is nil, send the image to the printer. If
PRINT-TO is a string, save the PostScript image in a file with that
name.  If PRINT-TO is a number, prompt the user for the name of the
file to save in."
                :user-visible-flag t
                :arguments ("file-name" "print-to"))
                nil [7442 8914])
            ("gnus-dired" package nil nil [8916 8937]))          
      :file "gnus-dired.el.gz"
      :pointmax 8967
      :fsize 3291
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17e00e8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("gnus" include nil nil [922 937])
            ("gnus-msg" include nil nil [938 957])
            ("gnus-mailing-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (gnus-define-keys map "h" gnus-mailing-list-help "s" gnus-mailing-list-subscribe "u" gnus-mailing-list-unsubscribe "p" gnus-mailing-list-post "o" gnus-mailing-list-owner "a" gnus-mailing-list-archive) map)) nil [988 1357])
            ("gnus-mailing-list-menu" variable nil nil [1359 1390])
            ("gnus-mailing-list-make-menu-bar" function nil nil [1392 1890])
            ("turn-on-gnus-mailing-list-mode" function nil nil [1907 2045])
            ("gnus-mailing-list-insinuate" function
               (:documentation "Setup group parameters from List-Post header.
If FORCE is non-nil, replace the old ones."
                :user-visible-flag t
                :arguments ("force"))
                nil [2062 2760])
            ("define-minor-mode" code nil nil [2777 3205])
            ("gnus-mailing-list-help" function
               (:documentation "Get help from mailing list server."
                :user-visible-flag t)
                nil [3221 3533])
            ("gnus-mailing-list-subscribe" function
               (:documentation "Subscribe to mailing list."
                :user-visible-flag t)
                nil [3535 3869])
            ("gnus-mailing-list-unsubscribe" function
               (:documentation "Unsubscribe from mailing list."
                :user-visible-flag t)
                nil [3871 4221])
            ("gnus-mailing-list-post" function
               (:documentation "Post message (really useful ?)"
                :user-visible-flag t)
                nil [4223 4531])
            ("gnus-mailing-list-owner" function
               (:documentation "Mail to the mailing list owner."
                :user-visible-flag t)
                nil [4533 4848])
            ("gnus-mailing-list-archive" function
               (:documentation "Browse archive."
                :user-visible-flag t)
                nil [4850 5285])
            ("gnus-mailing-list-message" function
               (:documentation "Send message to ADDRESS.
ADDRESS is specified by a \"mailto:\" URL."
                :arguments ("address"))
                nil [5310 5609])
            ("gnus-ml" package nil nil [5611 5629]))          
      :file "gnus-ml.el.gz"
      :pointmax 5656
      :fsize 1744
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!gnus!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
