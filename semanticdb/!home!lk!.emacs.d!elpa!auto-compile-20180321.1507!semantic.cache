;; Object semanticdb-project-database-file-1543f10
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1543f10"
  :tables
  (list
    (semanticdb-table "semanticdb-table-133db38"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "auto-compile-autoloads.el"
      :pointmax 363
      :fsize 5418
      :lastmodtime '(23398 10654 374079 267000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-19a077c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bytecomp" include nil nil [4799 4818])
            ("cl-lib" include nil nil [4819 4836])
            ("packed" include nil nil [4837 4854])
            ("declare-function" code nil nil [4856 4901])
            ("declare-function" code nil nil [4902 4957])
            ("declare-function" code nil nil [4958 5011])
            ("declare-function" code nil nil [5012 5074])
            ("autoload-modified-buffers" variable nil nil [5076 5110])
            ("warning-minimum-level" variable nil nil [5111 5141])
            ("auto-compile-update-autoloads" variable nil nil [5143 5181])
            ("auto-compile-use-mode-line" variable nil nil [5182 5217])
            ("auto-compile" customgroup
               (:documentation "Automatically compile Emacs Lisp source libraries."
                :user-visible-flag t)
                nil [5219 5435])
            ("define-minor-mode" code nil nil [5483 6421])
            ("define-globalized-minor-mode" code nil nil [6438 6540])
            ("turn-on-auto-compile-mode" function nil nil [6542 6646])
            ("auto-compile-mode-lighter" variable (:documentation "Mode lighter for Auto-Compile Mode.") nil [6648 6725])
            ("auto-compile-visit-failed" variable
               (:documentation "Whether to visit source files which failed to compile.

If this is non-nil visit but don't select a source file if it
isn't being visited in a buffer already.  Also set the buffer
local value of variable `auto-compile-pretend-byte-compiled'
(which see) to t and mark the buffer as modified if the value
of variable `auto-compile-mark-failed-modified' is non-nil."
                :default-value t)
                nil [6740 7187])
            ("auto-compile-mark-failed-modified" variable (:documentation "Whether to mark buffers which failed to compile as modified.

This serves as a reminder to fix fatal errors.  While useful this
can get annoying so this variable can be quickly toggled with the
command `auto-compile-toggle-mark-failed-modified'.") nil [7189 7528])
            ("auto-compile-ding" variable
               (:documentation "Whether to beep (or flash the screen) when an error occurs.

Expected errors (such as compile error, unmatched parens, or
failure to remove a file) are caught and execution continues so
that failure to process one file does not prevent other files
from being processed.

To inform users of such errors Auto-Compile instead beeps or
flashes the screen; set this variable to nil to disable even
that."
                :default-value t)
                nil [7530 8004])
            ("auto-compile-check-parens" variable
               (:documentation "Whether to check for unbalanced parentheses before compiling.

This only has as an effect on files which are currently being
visited in a buffer.  Other files are compiled without performing
this check first.  If unbalanced parentheses are found no attempt
is made to compile the file as that would obviously fail also."
                :default-value t)
                nil [8006 8409])
            ("auto-compile-update-autoloads" variable (:documentation "Whether to update autoloads after compiling.

If no autoload file as specified by `packed-loaddefs-filename' can be
found quietly skip this step.") nil [8411 8646])
            ("auto-compile-inhibit-compile-hook" variable (:documentation "Hook used to inhibit automatic compilation.

This hook is run before automatic compilation takes place, if
any of the hook functions returns non-nil, then do not compile.") nil [8648 8970])
            ("auto-compile-verbose" variable (:documentation "Whether to print messages describing progress of byte-compiler.

This overrides `byte-compile-verbose' but unlike that does not
default to t, and thus avoids unnecessary echo-area messages.") nil [8972 9242])
            ("auto-compile-display-buffer" variable
               (:documentation "Whether to automatically display the *Compile-Log* buffer.

When there are errors then the buffer is always displayed,
when there are no warnings or errors it is never displayed."
                :default-value t)
                nil [9244 9508])
            ("auto-compile-mode-line-counter" variable (:documentation "Whether to display the number of warnings in the mode line.

This assumes that `auto-compile-use-mode-line' (which see) is
non-nil.") nil [9510 9732])
            ("auto-compile-modify-mode-line" function (:arguments ("after")) nil [9734 10083])
            ("auto-compile-use-mode-line" variable
               (:documentation "Whether to show information about the byte code file in the mode line.

This works by inserting `mode-line-auto-compile' into the default
value of `mode-line-format' after the construct (usually a symbol)
specified here.  This happens every time local Auto-Compile mode
is turned on so the specified construct does not have to a member
of `mode-line-format' when this is set (this allows loading that
package after `auto-compile-on-load-mode' has been activated, so
that it can ensures the respective byte code file is up-to-date).

If you want to add `mode-line-auto-compile' as a member of a
variable that is itself a member of `mode-line-format' then you
have to set this option to nil and manually modify that variable
to include `mode-line-auto-compile'."
                :default-value (car (memq 'mode-line-modified (default-value 'mode-line-format))))
                nil [10085 11339])
            ("auto-compile-toggle-recompiles" variable
               (:documentation "Whether to recompile all source files when turning on compilation.

When turning on auto compilation for multiple files at once
recompile source files even if their byte code file already
exist and are up-to-date.  It's advisable to keep this enabled
to ensure changes to macros are picked up."
                :default-value t)
                nil [11341 11723])
            ("auto-compile-delete-stray-dest" variable
               (:documentation "Whether to remove stray byte code files.

If this is non-nil byte code files without a corresponding source
file are removed as they are encountered.  This happens in the
functions `auto-compile-on-save' and `toggle-auto-compile'.  The
main purpose of this functionality is to prevent leftover byte
code files from shadowing a source or byte code file in a
directory that comes later in the `load-path'."
                :default-value t)
                nil [11725 12217])
            ("auto-compile-toggle-deletes-nonlib-dest" variable (:documentation "Whether to delete non-library byte code files when toggling compilation.") nil [12219 12391])
            ("auto-compile-source-recreate-deletes-dest" variable (:documentation "Whether to delete leftover byte code file when creating source file.

When this is non-nil and saving a source buffer causes the file
to be created (as opposed to being overwritten) while its byte
code file already exists (because the source already existed and
was compiled in the past), then remove the latter (instead of
updating it by recompiling the source).  This can e.g. happen
when switching git branches.") nil [12393 12909])
            ("toggle-auto-compile" function
               (:documentation "Toggle automatic compilation of an Emacs Lisp source file or files.

Read a file or directory name from the minibuffer defaulting to
the visited Emacs Lisp source file or `default-directory' if no
such file is being visited in the current buffer.

If the user selects a file then automatic compilation of only
that file is toggled.  Since both `auto-compile-on-save' and
`auto-compile-on-save' only ever _recompile_ byte code files,
toggling automatic compilation is done simply by creating or
removing the respective byte code file.

If the user selects a directory then automatic compilation for
multiple files is toggled as follows:

* With a positive prefix argument always compile source files;
  with a negative prefix argument always remove byte code files.

* Otherwise the existence or absence of the byte code file of
  the source file that was current when this command was invoked
  determines whether byte code files should be created or removed.

* If no Emacs Lisp source file is being visited in the buffer
  that was current when the command was invoked ask the user what
  to do.

* When _removing_ byte code files then all byte code files are
  removed.  If `auto-compile-deletes-stray-dest' is non-nil this
  even includes byte code files for which no source file exists.

* When _creating_ byte code files only do so for source files
  that are actual libraries.  Source files that provide the
  correct feature are considered to be libraries; see
  `packed-library-p'.

* Note that non-libraries can still be automatically compiled,
  you just cannot _recursively_ turn on automatic compilation
  using this command.

* When `auto-compile-toggle-recompiles' is non-nil recompile all
  affected source files even when the respective source files are
  up-to-date.  Do so even for non-library source files.

* Only enter subdirectories for which `packed-ignore-directory-p'
  returns nil; i.e. don't enter hidden directories or directories
  containing a file named \".nosearch\"."
                :user-visible-flag t
                :arguments ("file" "action"))
                nil [12962 17315])
            ("defalias" code nil nil [17317 17369])
            ("auto-compile-toggle-mark-failed-modified" function
               (:documentation "Toggle whether buffers which failed to compile are marked as modified."
                :user-visible-flag t)
                nil [17371 17777])
            ("defvar-local" code nil nil [17779 18252])
            ("auto-compile-file-buffer" variable nil nil [18254 18291])
            ("defvar-local" code nil nil [18292 18330])
            ("byte-compile-log-warning" function (:arguments ("before" "auto-compile-count-warnings" "activate")) nil [18332 18574])
            ("cl-defun" code nil nil [18576 21826])
            ("auto-compile-delete-dest" function (:arguments ("dest" "failurep")) nil [21828 22345])
            ("auto-compile-handle-compile-error" function (:arguments ("file" "buf" "start")) nil [22347 22929])
            ("auto-compile-handle-autoloads-error" function (:arguments ("dest")) nil [22931 23040])
            ("auto-compile-ding" function nil nil [23042 23108])
            ("save-buffers-kill-emacs" function (:arguments ("around" "auto-compile-dont-mark-failed-modified" "disable")) nil [23110 23572])
            ("save-buffers-kill-terminal" function (:arguments ("around" "auto-compile-dont-mark-failed-modified" "disable")) nil [23574 24039])
            ("eval-after-load" code nil nil [24153 24456])
            ("auto-compile-inhibit-compile-detached-git-head" function (:documentation "Inhibit compiling in Git repositories when `HEAD' is detached.
This is especially useful during rebase sessions.") nil [24458 24780])
            ("defvar-local" code nil nil [24797 24898])
            ("put" code nil nil [24899 24952])
            ("mode-line-auto-compile-control" function nil nil [24954 27424])
            ("auto-compile-display-log" function
               (:documentation "Display the *Compile-Log* buffer."
                :user-visible-flag t)
                nil [27426 27687])
            ("mode-line-toggle-auto-compile" function
               (:documentation "Toggle automatic compilation from the mode-line."
                :user-visible-flag t
                :arguments ("event"))
                nil [27689 28064])
            ("auto-compile-mode-line-byte-compile" function
               (:documentation "Recompile visited file from the mode-line."
                :user-visible-flag t
                :arguments ("event"))
                nil [28066 28345])
            ("define-minor-mode" code nil nil [28393 29192])
            ("auto-compile-on-load-mode-lighter" variable (:documentation "Mode lighter for Auto-Compile-On-Load Mode.") nil [29194 29287])
            ("load" function (:arguments ("before" "auto-compile-on-load" "disable")) nil [29289 29658])
            ("require" function (:arguments ("before" "auto-compile-on-load" "disable")) nil [29660 30067])
            ("auto-compile--loading" variable nil nil [30069 30103])
            ("auto-compile-on-load" function (:arguments ("file" "nosuffix")) nil [30105 31133])
            ("auto-compile" package nil nil [31141 31164]))          
      :file "auto-compile.el"
      :pointmax 31248
      :fsize 31247
      :lastmodtime '(23398 10654 220744 379000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!auto-compile-20180321.1507!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
