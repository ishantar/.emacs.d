;; Object semanticdb-project-database-file-17c333c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-17c333c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-17c331c"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "function-args-autoloads.el"
      :pointmax 365
      :fsize 1479
      :lastmodtime '(23398 9997 14064 657000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-16d907c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1596 1613])
            ("cc-cmds" include nil nil [1614 1632])
            ("etags" include nil nil [1633 1649])
            ("ivy" include nil nil [1650 1664])
            ("cl" include nil nil [1686 1699])
            ("semantic/ia" include nil nil [1701 1723])
            ("semantic/db-find" include nil nil [1724 1751])
            ("semantic-directory" include nil nil [1752 1781])
            ("json" include nil nil [1782 1797])
            ("ivy-last" variable nil nil [1798 1815])
            ("declare-function" code nil nil [1816 1853])
            ("declare-function" code nil nil [1854 1899])
            ("declare-function" code nil nil [1900 1934])
            ("declare-function" code nil nil [1935 1994])
            ("declare-function" code nil nil [1995 2045])
            ("function-args" customgroup
               (:documentation "C++ function completion."
                :user-visible-flag t)
                nil [2128 2222])
            ("function-args-faces" customgroup
               (:documentation "Font-lock faces for `function-args'."
                :user-visible-flag t)
                nil [2224 2339])
            ("fa-hint-position-below" variable (:documentation "Non-nil means hint will be shown below point (instead of above).") nil [2341 2465])
            ("fa-max-one-line-width" variable
               (:documentation "Max hint size that can be displayed on one line."
                :default-value 60)
                nil [2467 2573])
            ("moo-select-method" variable
               (:documentation "Method to select a candidate from a list of strings."
                :default-value 'ivy)
                nil [2575 2854])
            ("fa-insert-method" variable
               (:documentation "How to insert a function completed with `moo-complete'."
                :default-value 'name)
                nil [2856 3203])
            ("fa-hint-dark-color" variable
               (:constant-flag t
                :default-value "gray20")
                nil [3205 3243])
            ("fa-face-hint" variable
               (:documentation "Basic hint face."
                :default-value `((((class color) (background light)) :inherit 'default :background "#fff3bc") (((class color) (background dark)) :background ,fa-hint-dark-color))
                :type "face")
                nil [3245 3490])
            ("fa-face-hint-bold" variable
               (:documentation "Basic hint face with bold font. Bold is used to signify the current element."
                :default-value '((t (:inherit fa-face-hint :bold t)))
                :type "face")
                nil [3492 3671])
            ("fa-face-type" variable
               (:documentation "Face for displaying types."
                :default-value `((((class color) (background light)) :inherit 'font-lock-type-face :background "#fff3bc") (((class color) (background dark)) :inherit 'font-lock-type-face :background ,fa-hint-dark-color))
                :type "face")
                nil [3673 3970])
            ("fa-face-type-bold" variable
               (:documentation "Face for displaying types. Bold is used to signify the current element"
                :default-value '((t (:inherit 'fa-face-type :bold t)))
                :type "face")
                nil [3972 4148])
            ("fa-face-semi" variable
               (:documentation "Face for displaying separators."
                :default-value '((((class color) (background light)) :inherit fa-face-hint-bold :foreground "#2a00ff") (((class color) (background dark)) :inherit fa-face-hint-bold :foreground "white"))
                :type "face")
                nil [4150 4448])
            ("fa-face-type-definition" variable
               (:documentation "Face for type definitions."
                :default-value `((((class color) (background light)) :inherit font-lock-type-face :background "#CECEFF") (((class color) (background dark)) :inherit font-lock-type-face :background ,fa-hint-dark-color))
                :type "face")
                nil [4450 4753])
            ("fa-face-type-compound" variable
               (:documentation "Face for compound types."
                :default-value '((t (:inherit font-lock-type-face)))
                :type "face")
                nil [4755 4885])
            ("fa-paren-open" variable
               (:documentation "String to open argument list."
                :constant-flag t
                :default-value (propertize "(" 'face 'fa-face-semi))
                nil [4887 4982])
            ("fa-paren-close" variable
               (:documentation "String to close argument list."
                :constant-flag t
                :default-value (propertize ") : " 'face 'fa-face-semi))
                nil [4984 5084])
            ("fa-comma" variable
               (:documentation "String to join arguments."
                :constant-flag t
                :default-value (propertize "," 'face 'fa-face-semi))
                nil [5086 5172])
            ("moo-do-includes" variable
               (:documentation "When t, `moo-jump-local' will list includes as well."
                :default-value t)
                nil [5174 5301])
            ("function-args-mode-map" variable (:default-value (make-sparse-keymap)) nil [5384 5436])
            ("define-minor-mode" code nil nil [5453 5694])
            ("fa-idx" variable (:documentation "Current function arguments variant.") nil [5696 5755])
            ("fa-lst" variable (:documentation "Current function arguments variants.") nil [5757 5817])
            ("fa-arg" variable (:documentation "Current function argument.") nil [5819 5867])
            ("fa-idx-cycle-down" function
               (:documentation "Cycle `fa-idx' down and redisplay function arguments."
                :user-visible-flag t)
                nil [5869 6061])
            ("fa-idx-cycle-up" function
               (:documentation "Cycle `fa-idx' up and redisplay function arguments."
                :user-visible-flag t)
                nil [6063 6252])
            ("let" code nil nil [6254 6662])
            ("fa-overlay" variable (:documentation "Hint overlay instance.") nil [6664 6714])
            ("fa-jump-maybe" function
               (:documentation "Jump to definition if `fa-show' overlay is active.
Otherwise, call `c-indent-new-comment-line' that's usually bound to \"M-j\"."
                :user-visible-flag t)
                nil [6716 6954])
            ("turn-on-function-args-mode" function nil nil [6956 7018])
            ("fa-config-default" function (:documentation "Set up default key bindings.") nil [7116 7287])
            ("fa-hint-pos" variable (:documentation "Point position where the hint should be (re-) displayed.") nil [7370 7455])
            ("fa-beg-pos" variable (:documentation "Position of ( after `fa-start-tracking' was invoked.") nil [7457 7537])
            ("fa-end-pos" variable (:documentation "Position of ) after `fa-start-tracking' was invoked.") nil [7539 7619])
            ("fa-superclasses" variable
               (:documentation "Stores superclasses tags."
                :default-value (make-hash-table :test 'equal))
                nil [7621 7706])
            ("fa-delay" variable
               (:documentation "Number of seconds to delay before calling `fa-show'."
                :default-value 2)
                nil [7708 7787])
            ("fa-timer" variable (:documentation "Timer for calling `fa-show' after idling for `fa-delay' seconds.") nil [7789 7879])
            ("fa-last-pos" variable
               (:documentation "Last position of call to `fa-show'."
                :default-value 1)
                nil [7881 7943])
            ("fa-show-wrapper" function (:documentation "Wrap around `fa-show'.") nil [7945 8161])
            ("fa-auto" function
               (:documentation "Toggle automatic calls to `fa-show'."
                :user-visible-flag t)
                nil [8163 8399])
            ("fa-show" function
               (:documentation "Display the arguments of the closest function."
                :user-visible-flag t)
                nil [8482 8861])
            ("fa-abort" function
               (:documentation "Stop tracking the cursor and remove the overlay."
                :user-visible-flag t)
                nil [8863 9250])
            ("fa-jump" function
               (:documentation "Jump to current function of `fa-arg'."
                :user-visible-flag t)
                nil [9252 9828])
            ("moo-complete--candidates" function (:arguments ("only-class")) nil [9830 10789])
            ("moo-complete" function
               (:documentation "Complete current C++ symbol at point.
When ARG is not nil offer only variables as candidates."
                :user-visible-flag t
                :arguments ("arg"))
                nil [10791 11186])
            ("moo-files-in-directory" function (:arguments ("prefix" "dir")) nil [11188 11370])
            ("moo-locate-compile-commands-json" function nil nil [11372 11713])
            ("moo-headers-directories-default" function nil nil [11715 12100])
            ("moo-headers-directories" function nil nil [12102 13021])
            ("moo-completion-headers" function nil nil [13023 13587])
            ("moo-completion-at-point" function nil nil [13589 13961])
            ("fa-and" function
               (:documentation "Return a lambda that combines PREDICATES with `and'."
                :arguments ("predicates"))
                nil [14044 14236])
            ("fa-char-upcasep" function
               (:documentation "Return t if C is upper case."
                :arguments ("c"))
                nil [14238 14318])
            ("moo-virtualp" function
               (:documentation "Return t if TAG is a virtual function tag."
                :arguments ("tag"))
                nil [14320 14663])
            ("moo-typedefp" function
               (:documentation "Return string definition of TAG if it's a typedef."
                :arguments ("tag"))
                nil [14665 14796])
            ("moo-namespacep" function
               (:documentation "Return t if TAG is a namespace tag."
                :arguments ("tag"))
                nil [14798 14983])
            ("moo-functionp" function
               (:documentation "Return t if TAG is a function tag."
                :arguments ("tag"))
                nil [14985 15093])
            ("moo-variablep" function
               (:documentation "Return t if TAG is a variable tag."
                :arguments ("tag"))
                nil [15095 15203])
            ("moo-typep" function
               (:documentation "Return t if TAG is a type tag."
                :arguments ("tag"))
                nil [15205 15301])
            ("moo-includep" function
               (:documentation "Return t if TAG is an include tag."
                :arguments ("tag"))
                nil [15303 15409])
            ("moo-usingp" function
               (:documentation "Return t if TAG is a using tag."
                :arguments ("tag"))
                nil [15411 15510])
            ("moo-constructorp" function
               (:documentation "Return t if TAG is a constructor tag."
                :arguments ("tag"))
                nil [15512 15637])
            ("moo-prototype-flag-p" function
               (:documentation "Return t if TAG is a has a prototype-flag."
                :arguments ("tag"))
                nil [15639 15771])
            ("moo-enump" function
               (:documentation "Return t if TAG is an enum tag."
                :arguments ("tag"))
                nil [15773 15917])
            ("fa-test-with" function
               (:documentation "Return (equal (PRED X1) (PRED X2))."
                :arguments ("pred" "x1" "x2"))
                nil [16000 16128])
            ("moo-variable=" function
               (:documentation "Return t if variable tags V1 and V2 are equivalent."
                :arguments ("v1" "v2"))
                nil [16130 16550])
            ("moo-function=" function
               (:documentation "Return t if function tags F1 and F2 are equivalent."
                :arguments ("f1" "f2"))
                nil [16552 17151])
            ("moo-tag=" function
               (:documentation "Return t if tags X1 and X2 are equivalent."
                :arguments ("x1" "x2"))
                nil [17153 17392])
            ("moo-tag-pos=" function
               (:documentation "Return t if positions of TAG1 and TAG2 are equal."
                :arguments ("tag1" "tag2"))
                nil [17394 17793])
            ("moo-tget-filename" function
               (:documentation "Get TAG file name."
                :arguments ("tag"))
                nil [17876 18096])
            ("moo-tget-beginning-position" function
               (:documentation "Get TAG beginning position."
                :arguments ("tag"))
                nil [18098 18318])
            ("moo-tget-constructors" function
               (:documentation "Assuming TAG is a type tag, return its constructors."
                :arguments ("tag"))
                nil [18320 19166])
            ("moo-tget-enum-members" function
               (:documentation "Return members of enum TAG."
                :arguments ("tag"))
                nil [19168 19306])
            ("moo-tget-scope" function
               (:documentation "Return scope part of TAG."
                :arguments ("tag"))
                nil [19308 19442])
            ("moo-tput-filename" function
               (:documentation "Set TAG's :filename property to FILENAME."
                :arguments ("tag" "filename"))
                nil [19525 19665])
            ("moo-tput-filename-to-types" function
               (:documentation "Set :filename property for members of types on TYPES-LIST to FILENAME."
                :arguments ("types-list" "filename"))
                nil [19667 20016])
            ("fa-do-comments" variable (:documentation "When non-nil, try to add the declaration comment to the overlay.") nil [20018 20117])
            ("fa-looking-back" function
               (:documentation "Forward to `looking-back' X.
Avoid byte compiler warnings."
                :arguments ("x"))
                nil [20119 20254])
            ("fa--in-comment-p" function (:documentation "Test if point is inside a comment.") nil [20256 20410])
            ("fa--bounds-comment" function nil nil [20412 20714])
            ("fa-get-comment" function
               (:documentation "Try to extract the declaration comment from X.
X is an element of `fa-lst'."
                :arguments ("x"))
                nil [20716 21360])
            ("fa-fancy-string" function
               (:documentation "Return the string that corresponds to (nth fa-idx fa-lst).
WSPACE is the padding."
                :arguments ("wspace"))
                nil [21443 23372])
            ("fa-fancy-argument" function
               (:documentation "Return string representation for CEL.
CEL is (TYPE . NAME).
Select bold faces when BOLD is t."
                :arguments ("cel" "bold"))
                nil [23374 23889])
            ("fa-space-before-function-args" variable (:documentation "Variable used when displaying a function tag.") nil [23891 23982])
            ("fa-tfunction->fal" function
               (:documentation "Return function argument list structure for TAG.
It has the structure: (template type (file . position) arguments)."
                :arguments ("tag" "output-string"))
                nil [23984 27193])
            ("fa-throw-unless-eq" function
               (:documentation "Return t if X equals V.
Raise an error otherwise."
                :arguments ("x" "v"))
                nil [27195 27338])
            ("fa-variable->cons" function
               (:documentation "Return (TYPE . NAME) for variable TAG.
TYPE and NAME are strings."
                :arguments ("tag"))
                nil [27340 28610])
            ("fa-type->str" function
               (:documentation "Return string representation of type TAG."
                :arguments ("tag"))
                nil [28612 29073])
            ("fa-ttemplate-specifier->str" function (:arguments ("tag")) nil [29075 29307])
            ("moo-tag->str" function (:arguments ("tag")) nil [29309 31426])
            ("moo-propose-virtual" function
               (:documentation "Call `moo-propose' for virtual functions."
                :user-visible-flag t)
                nil [31509 31653])
            ("moo-propose-override" function
               (:documentation "Call `moo-propose' for all functions."
                :user-visible-flag t)
                nil [31655 31776])
            ("moo-propose-variables" function
               (:documentation "Call `moo-propose' for all variables."
                :user-visible-flag t)
                nil [31778 31900])
            ("moo-format-tag-line" function (:arguments ("str" "file")) nil [31902 32394])
            ("moo-jump-local-cache" variable (:default-value (make-hash-table :test 'equal)) nil [32396 32456])
            ("moo-jump-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-j") (lambda nil (interactive) (ivy-exit-with-action (lambda (_) (moo-jump-directory nil ivy-text))))) (define-key map (kbd "C-M-k") (lambda nil (interactive) (ivy-call) (let ((buf (with-ivy-window (current-buffer)))) (ivy-exit-with-action `(lambda (_) (switch-to-buffer ,buf) (moo-jump-local ivy-text)))))) map)) nil [32458 32987])
            ("moo-fetch-tags" function nil nil [32989 33219])
            ("moo-jump-local" function
               (:documentation "Jump to a tag in the current file."
                :user-visible-flag t
                :arguments ("initial-input"))
                nil [33221 33529])
            ("moo-implement-action" function (:arguments ("x")) nil [33531 35706])
            ("moo-implement" function
               (:documentation "Implement a class method.
Currently, the class has to be in the current buffer."
                :user-visible-flag t)
                nil [35708 36584])
            ("moo-new-class" function nil nil [36586 37216])
            ("moo-jump-directory" function
               (:documentation "Select a tag to jump to from tags defined in current directory.
When ARG is non-nil, regenerate tags."
                :user-visible-flag t
                :arguments ("arg" "initial-input"))
                nil [37218 39005])
            ("moo-reset-superclasses-cache" function
               (:documentation "Reset `fa-superclasses'."
                :user-visible-flag t)
                nil [39007 39147])
            ("fa-do-position" function (:documentation "Position the cursor at the `(', which is logically closest.") nil [39149 39633])
            ("fa-start-tracking" function (:documentation "Call `fa-after-change' after each change to buffer.") nil [39635 39930])
            ("fa-update-arg" function
               (:documentation "Update `fa-arg' if it needs to be updated."
                :arguments ("arg"))
                nil [39932 40576])
            ("fa-do-show" function (:documentation "Show function arguments hint.") nil [40578 41466])
            ("ac-prefix-overlay" variable nil nil [41468 41494])
            ("fa-after-change" function (:arguments ("beg" "end" "len")) nil [41496 42051])
            ("fa-backward-char-skip<>" function
               (:documentation "Move point backward until [A-Za-z_0-9] is encountered.
Skips anything between matching <...>.
Reverse direction when ARG is not nil."
                :arguments ("arg"))
                nil [42053 42835])
            ("moo-erase-string" function
               (:documentation "Ensure `looking-back' STR and erase it.
`case-fold-search' is set to nil."
                :arguments ("str"))
                nil [42837 43102])
            ("moo-handle-completion" function
               (:documentation "Select tag that starting with PREFIX from CANDIDATES.
PARAMS are passed further to `moo-action-insert'."
                :arguments ("prefix" "candidates" "params"))
                nil [43104 43804])
            ("moo-tag->cons" function
               (:documentation "Return for TAG a cons (TAG . STR).
STR is the result of `moo-tag->str' on TAG,
NAME is the TAG name."
                :arguments ("tag"))
                nil [43806 44024])
            ("moo-action-insert" function
               (:documentation "Insert tag CANDIDATE.
When PREFIX is not nil, erase it before inserting."
                :arguments ("candidate" "formatter" "prefix"))
                nil [44026 45061])
            ("ivy-height" variable nil nil [45063 45082])
            ("moo-select-candidate" function (:arguments ("candidates" "action" "preselect" "initial-input")) nil [45084 46528])
            ("moo-action-implement" function (:arguments ("tag")) nil [46530 46616])
            ("ivy-set-actions" code nil nil [46618 46716])
            ("when" code nil nil [46718 46856])
            ("moo-action-jump" function (:arguments ("tag")) nil [46858 47688])
            ("moo-propose" function
               (:documentation "Display a list of current class members that satisfy PRED."
                :arguments ("pred"))
                nil [47690 48158])
            ("defalias" code nil nil [48241 48277])
            ("moo-tag-at-point" function
               (:documentation "Find a tag with name STR that's visible near point.
Optional PREDICATE is used to improve uniqueness of returned tag."
                :arguments ("str" "predicate"))
                nil [48279 48663])
            ("moo-type-tag-at-point" function (:arguments ("str")) nil [48665 48840])
            ("moo-tag-at-point-generic" function
               (:documentation "Find a tag near point with name STR that satisfies PREDICATE."
                :arguments ("str" "predicate"))
                nil [48842 49904])
            ("moo-complete-candidates-2" function (:arguments ("prefix" "var-name")) nil [49906 53939])
            ("moo-complete-candidates-1" function (:arguments ("prefix")) nil [53941 54488])
            ("moo-complete-type-member" function (:arguments ("var-tag")) nil [54549 55088])
            ("moo-ctxt-current-symbol" function nil nil [55090 55258])
            ("fa-calculate" function (:documentation "Return current function (or functions in case of overloading) in the form:
 ((name-1 arg-1 arg-2 ...) (name-2 arg-1 arg2 ...) ...).") nil [55261 61348])
            ("fa-process-tag-according-to-class" function
               (:documentation "Coerse TAG to list of functions with same name."
                :arguments ("tag"))
                nil [61350 61622])
            ("fa-process" function
               (:documentation "Get all functions with name STR from TTYPE.
This includes the constructors of types with name STR."
                :arguments ("str" "ttype"))
                nil [61624 62336])
            ("moo-filter-tag-by-name" function (:arguments ("sname" "members")) nil [62338 62454])
            ("moo-filter-tag-by-class" function (:arguments ("class" "members")) nil [62456 62583])
            ("moo-ctxt-type" function nil nil [62585 63171])
            ("moo-stype->tag" function (:arguments ("str")) nil [63173 63731])
            ("moo-get-member-functions" function (:arguments ("ttype")) nil [63733 64014])
            ("moo-dereference-typedef" function
               (:documentation "When TAG is a typedef, dereference it.
Returns TAG if it's not a typedef."
                :arguments ("tag"))
                nil [64016 64623])
            ("moo-navigate-members" function (:arguments ("tag")) nil [64625 64885])
            ("moo-ttype->tmembers" function (:arguments ("ttype")) nil [64887 66342])
            ("moo-sname->tag" function (:arguments ("str-name")) nil [66344 66707])
            ("moo-tvar->ttype" function (:arguments ("var-tag")) nil [66709 66973])
            ("moo-get-tag-by-name" function (:arguments ("sname" "tlist")) nil [66975 67276])
            ("moo-desperately-find-sname" function (:arguments ("stag")) nil [67278 68038])
            ("moo-namespace-reduce" function
               (:documentation "Reduce with two-argument function FUNC the forest TAGS."
                :arguments ("func" "tags"))
                nil [68040 69306])
            ("moo-find-sname-in-tags" function
               (:documentation "Find tags named STAG in forest TAGS."
                :arguments ("stag" "tags"))
                nil [69308 69490])
            ("moo-flatten-namepaces" function
               (:documentation "Traverse the namespace forest TAGS and return the leafs."
                :arguments ("tags"))
                nil [69492 69704])
            ("moo-c++-class-name" function (:documentation "Return current class name.") nil [69706 69808])
            ("moo-c++-class-template" function (:documentation "Return the template of current class.") nil [69810 69927])
            ("moo-c++-braces-table" variable (:default-value (let ((table (make-char-table 'syntax-table nil))) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 125 "){" table) table)) nil [69929 70102])
            ("moo-c++-match-constructor-impl" function nil nil [70104 70479])
            ("moo-c++-class-name-and-template" function (:documentation "Return currrent class name and template as a cons.") nil [70481 72195])
            ("moo-list-at-point" function (:documentation "Return any list at point.
At least what the syntax thinks is a list.") nil [72197 72408])
            ("moo-c++-var-name-regex" variable
               (:constant-flag t
                :default-value "[a-zA-Z_][a-zA-Z0-9_]*")
                nil [72410 72468])
            ("moo-variable-definition-p" function (:documentation "Return t if \"Type |var()\".") nil [72470 72964])
            ("moo-unprefix-qualifier" function
               (:documentation "Return STR without Type<...>:: qualifier."
                :arguments ("str"))
                nil [72966 73307])
            ("moo-unprefix-template" function
               (:documentation "Return STR without <...> prefix."
                :arguments ("str"))
                nil [73309 73758])
            ("moo-get-filename" function (:documentation "Get filename of tag at point.") nil [73760 74100])
            ("aya-current" variable nil nil [74102 74122])
            ("moo-doxygen" function
               (:documentation "Generate a doxygen yasnippet and expand it with `aya-expand'.
The point should be on the top-level function name."
                :user-visible-flag t)
                nil [74124 74878])
            ("function-args" package nil nil [74880 74904]))          
      :file "function-args.el"
      :pointmax 74997
      :fsize 76744
      :lastmodtime '(23398 9995 824052 515000)
      :unmatched-syntax '((close-paren 1699 . 1700) (symbol 1666 . 1683) (open-paren 1665 . 1666)))
    (semanticdb-table "semanticdb-table-1823000"
      :file "semantic-directory.el"
      :fsize 4356
      :lastmodtime '(23398 9995 780718 738000)))
  :file "!home!lk!.emacs.d!elpa!function-args-20171031.1704!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
