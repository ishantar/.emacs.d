;; Object semanticdb-project-database-file-1c65e48
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1c65e48"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1c48c80"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "test-case-mode-autoloads.el"
      :pointmax 367
      :fsize 2420
      :lastmodtime '(23398 9370 807622 866000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-18fb554"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2688 2701])
            ("compile" include nil nil [2703 2721])
            ("fringe-helper" include nil nil [2722 2752])
            ("dolist" code nil nil [2754 2980])
            ("test-case" customgroup
               (:documentation "Unit test front-end"
                :user-visible-flag t)
                nil [2982 3046])
            ("test-case-backends" variable
               (:documentation "*Test case backends.
Each function in this list is called with a command, which is one of these:

'supported: The function should return return non-nil, if the backend can
handle the current buffer.

'name: The function should return a string with the backend's name.

'command: The function should return the shell command to test the current
buffer.

'font-lock-keywords: The function should return font-lock keywords for the
current buffer.  They should be suitable for passing to
`font-lock-add-keywords'.

'failure-pattern: The function should return a list.  The first element
must be the regular expression that matches the failure description as
returned by the command.  The next elements should be the sub-expression
numbers that match file name, line, column, name plus line (a clickable link),
error message, and test-name. Each of these can be nil.

'failure-locate-func: If 'failure-pattern can't match a line number, the
function may return a function to search for the test-name in the buffer.
The function takes the test-name (from 'failure-pattern) as one argument
and should return beginning and end points as car and cdr (like
`test-case-locate')."
                :user-visible-flag t
                :default-value `(test-case-junit-backend test-case-ruby-backend test-case-cxxtest-backend test-case-cppunit-backend test-case-gtest-backend test-case-python-backend test-case-ert-backend))
                nil [3048 4496])
            ("test-case-ask-about-save" variable
               (:documentation "*Non-nil means `test-case-mode' asks which buffers to save before running.
Otherwise, it saves all modified buffers without asking.  `test-case-mode'
will only offer to save buffers when the tests are run by interpreters.
Already compiled tests will be run without saving."
                :user-visible-flag t
                :default-value t)
                nil [4498 4942])
            ("test-case-global-state-change-hook" variable
               (:documentation "*Hook run when the global test status changes.
Each function is called with two arguments, the old and the new value of
`test-case-global-state'."
                :user-visible-flag t)
                nil [4944 5178])
            ("test-case-state-change-hook" variable
               (:documentation "*Hook run when the global test status changes.
Each function is called with two arguments, the old and the new value of
`test-case-state'."
                :user-visible-flag t)
                nil [5180 5400])
            ("test-case-parallel-processes" variable
               (:documentation "*Number of tests to run concurrently."
                :user-visible-flag t
                :default-value 1)
                nil [5402 5616])
            ("test-case-priority-function" variable
               (:documentation "*Comparison function used to sort test-cases before running them."
                :user-visible-flag t
                :default-value 'test-case-failure-more-recent-p)
                nil [5618 5798])
            ("test-case-abort-on-first-failure" variable
               (:documentation "*Stop running test cases after the first failure occurs."
                :user-visible-flag t)
                nil [5800 6036])
            ("test-case-display-results-on-failure" variable
               (:documentation "*If enabled, display the result buffer when a failure occurs."
                :user-visible-flag t
                :default-value t)
                nil [6038 6279])
            ("test-case-color-buffer-id" variable
               (:documentation "*Color Buffer Identification?"
                :user-visible-flag t
                :default-value t)
                nil [6281 6452])
            ("test-case-mode-line-info-position" variable
               (:documentation "*The position of the colored result dot in the mode-line."
                :user-visible-flag t
                :default-value 1)
                nil [6454 6667])
            ("test-case-result-context-lines" variable (:documentation "Display this many lines of leading context before the current message.
See `compilation-context-lines'.") nil [6669 6908])
            ("test-case-mode-line-success" variable
               (:documentation "Face used for displaying a successful test result."
                :default-value '((t (:inherit mode-line-buffer-id :background "dark olive green" :foreground "black")))
                :type "face")
                nil [6992 7229])
            ("test-case-mode-line-success-modified" variable
               (:documentation "Face used for displaying a successful test result in a modified buffer."
                :default-value '((t (:inherit test-case-mode-line-success :foreground "orange")))
                :type "face")
                nil [7231 7459])
            ("test-case-mode-line-failure" variable
               (:documentation "Face used for displaying a failed test result."
                :default-value '((t (:inherit mode-line-buffer-id :background "firebrick" :foreground "wheat")))
                :type "face")
                nil [7461 7687])
            ("test-case-mode-line-undetermined" variable
               (:documentation "Face used for displaying a unknown test result."
                :default-value '((t (:inherit mode-line-buffer-id :background "orange" :foreground "black")))
                :type "face")
                nil [7689 7918])
            ("test-case-failure" variable
               (:documentation "Face used for displaying a failed test result."
                :default-value '((t (:underline "firebrick1")))
                :type "face")
                nil [7920 8053])
            ("test-case-fringe" variable
               (:documentation "*Face used for bitmaps in the fringe."
                :user-visible-flag t
                :default-value '((t (:foreground "red")))
                :type "face")
                nil [8055 8172])
            ("test-case-assertion" variable
               (:documentation "*Face used for assertion commands."
                :user-visible-flag t
                :default-value '((t (:inherit font-lock-warning-face)))
                :type "face")
                nil [8174 8305])
            ("test-case-result-message" variable
               (:documentation "*Face used for highlighting failure messages"
                :user-visible-flag t
                :default-value '((((background dark)) (:foreground "#00bfff")) (((background light)) (:foreground "#006faa")))
                :type "face")
                nil [8307 8512])
            ("test-case-result-file" variable
               (:documentation "*Face used for highlighting file links"
                :user-visible-flag t
                :default-value '((t :inherit font-lock-warning-face))
                :type "face")
                nil [8514 8649])
            ("test-case-result-line" variable
               (:documentation "*Face used for highlighting file link lines"
                :user-visible-flag t
                :default-value '((t :inherit compilation-line-number))
                :type "face")
                nil [8651 8792])
            ("test-case-result-column" variable
               (:documentation "*Face used for highlighting file link columns"
                :user-visible-flag t
                :default-value '((t :inherit compilation-column-number))
                :type "face")
                nil [8794 8941])
            ("test-case-result-buffer-name" variable (:default-value "*Test Result*") nil [9025 9078])
            ("test-case-backend" variable nil nil [9080 9110])
            ("make-variable-buffer-local" code nil nil [9111 9158])
            ("test-case-call-backend" function (:arguments ("command" "buffer")) nil [9160 9310])
            ("test-case-buffer-state" function (:arguments ("buffer")) nil [9312 9401])
            ("test-case-buffer-list" function nil nil [9403 9590])
            ("test-case-failed-buffer-list" function nil nil [9592 9856])
            ("test-case-process-list" function nil nil [9858 10040])
            ("test-case-buffer-id-string" variable nil nil [10124 10163])
            ("make-variable-buffer-local" code nil nil [10164 10220])
            ("test-case-install-colored-buffer-id" function nil nil [10222 10497])
            ("test-case-remove-colored-buffer-id" function nil nil [10499 10601])
            ("test-case-set-buffer-id-face" function (:arguments ("face")) nil [10603 10812])
            ("test-case-dot-keymap" variable
               (:documentation "*Keymap used for test-case dot in mode-line."
                :user-visible-flag t
                :default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] 'test-case-show-menu) map))
                nil [10896 11081])
            ("test-case-dot-tooltip" variable (:default-value "mouse-1: Display minor-mode-menu") nil [11083 11150])
            ("test-case-make-dot" function
               (:documentation "Return an image representing a dot whose color is COLOR."
                :arguments ("color" "inner" "border"))
                nil [11152 12006])
            ("test-case-dot-format" variable (:default-value (list (test-case-make-dot "gray10"))) nil [12008 12074])
            ("test-case-install-dot" function
               (:documentation "Install the dot in the mode-line at `test-result-dot-position' or POSITION.
With argument GLOBAL install in mode-line's default value, without make sure
mode-line is local before installing."
                :arguments ("global"))
                nil [12076 12791])
            ("test-case-remove-dot" function
               (:documentation "Remove the dot installed by `test-case-install-dot' from the mode-line."
                :arguments ("globalp"))
                nil [12793 13151])
            ("test-case-update-dot" function (:arguments ("state")) nil [13153 13619])
            ("test-case-state" variable
               (:documentation "The state of the current buffer test.
This is either 'unknown, 'running, 'failure, 'success or 'success-modified"
                :default-value 'unknown)
                nil [13703 13853])
            ("make-variable-buffer-local" code nil nil [13854 13899])
            ("test-case-global-state" variable (:documentation "The aggregated test states.
This is either 'unknown, 'running, 'running-failure, 'failure or 'success.") nil [13901 14043])
            ("test-case-most-recent-failure" variable
               (:documentation "The last time this buffer's test failed."
                :default-value '(0 0 0))
                nil [14045 14137])
            ("make-variable-buffer-local" code nil nil [14138 14197])
            ("test-case-failure-more-recent-p" function (:arguments ("buffer-a" "buffer-b")) nil [14199 14411])
            ("test-case-echo-state" function (:arguments ("state")) nil [14413 14725])
            ("test-case-set-global-state" function (:arguments ("state")) nil [14727 15016])
            ("test-case-calculate-global-state" function
               (:documentation "Calculate and the global state.
This assumes that no test is still running."
                :arguments ("buffers"))
                nil [15018 15502])
            ("test-case-buffer-changed" function (:arguments ("beg" "end")) nil [15504 15802])
            ("test-case-set-buffer-state" function
               (:documentation "Set BUFFER's `test-case-state' to STATE."
                :arguments ("state" "buffer"))
                nil [15804 16789])
            ("test-case-global-mode-map" variable
               (:documentation "Keymap used by `test-case-global-mode'."
                :default-value (make-sparse-keymap))
                nil [16873 16972])
            ("define-minor-mode" code nil nil [16974 17318])
            ("test-case-lighter" variable
               (:documentation "The mode-line string used by ``test-case-mode''.
It's value represents the test case type."
                :default-value " Test")
                nil [17402 17531])
            ("make-variable-buffer-local" code nil nil [17532 17579])
            ("test-case-mode-map" variable
               (:documentation "Keymap used by `test-case-mode'."
                :default-value (make-sparse-keymap))
                nil [17581 17666])
            ("test-case-detect-backend" function nil nil [17668 17949])
            ("define-minor-mode" code nil nil [17966 19749])
            ("disable-test-case-mode" function nil nil [19751 19821])
            ("enable-test-case-mode-if-test" function (:documentation "Turns on ``test-case-mode'' if this buffer is a recognized test.") nil [19838 19984])
            ("test-case-find-all-tests" function
               (:documentation "Find all test cases in DIRECTORY."
                :user-visible-flag t
                :arguments ("directory"))
                nil [20074 20778])
            ("test-case-kill-all-test-buffers" function nil nil [20780 20884])
            ("test-case-menu" variable nil nil [20968 20995])
            ("test-case-minor-mode-menu" variable nil nil [20996 21034])
            ("tast-case-menu-format-buffer" function (:arguments ("buffer")) nil [21036 21335])
            ("test-case-menu-buffer-list" function
               (:documentation "Build a menu with all test case buffers."
                :arguments ("func" "list"))
                nil [21337 21681])
            ("test-case-menu-build" function nil nil [21683 22233])
            ("test-case-menu-update" function nil nil [22235 22820])
            ("test-case-show-menu" function nil nil [22822 22898])
            ("test-case-last-run" variable nil nil [22982 23013])
            ("test-case-current-run" variable nil nil [23014 23048])
            ("test-case-current-run-left" variable nil nil [23049 23088])
            ("test-case-copy-result" function (:arguments ("from" "to")) nil [23090 23335])
            ("test-case-abort" function
               (:documentation "Abort the currently running tests."
                :user-visible-flag t
                :arguments ("quiet"))
                nil [23337 24212])
            ("test-case-process-sentinel" function (:arguments ("proc" "msg")) nil [24214 25811])
            ("test-case--update-buffer-state" function (:arguments ("proc" "failure-p" "test-buffer")) nil [25813 26154])
            ("test-case--parse-result" function (:arguments ("proc" "result-buffer" "out-buffer")) nil [26156 26871])
            ("test-case--skip-dead-process-buffers" function (:arguments ("next")) nil [26873 27114])
            ("test-case--run-next-test" function (:arguments ("result-buffer" "process-out-buffer" "next")) nil [27116 27351])
            ("test-case--erase-buffer" function (:arguments ("buffer")) nil [27353 27479])
            ("test-case--cleanup-process" function (:arguments ("result-buffer" "out-buffer")) nil [27481 27612])
            ("test-case--cleanup-all" function nil nil [27614 27798])
            ("test-case-run-internal" function (:arguments ("test-buffer" "result-buffer" "out-buffer")) nil [27800 29305])
            ("test-case--fill-line" function (:arguments ("char" "buffer")) nil [29307 29492])
            ("test-case-run-buffers" function
               (:documentation "Run the tests visited by BUFFERS.
Tests are run consecutively or concurrently according to
`test-case-parallel-processes'."
                :arguments ("buffers"))
                nil [29494 31260])
            ("test-case-run" function
               (:documentation "Run the test in the current buffer.
Calling this aborts all running tests.  To run multiple tests use
`test-case-run-all' or `test-case-run-buffers'."
                :user-visible-flag t
                :arguments ("buffer"))
                nil [31262 31674])
            ("test-case-run-again" function
               (:documentation "Run the latest test again."
                :user-visible-flag t)
                nil [31676 31798])
            ("test-case-run-all" function
               (:documentation "Run `test-case-run-buffers' on all tests currently visited by buffers."
                :user-visible-flag t)
                nil [31800 31969])
            ("test-case-compilation-finish-run-all" function
               (:documentation "Post-compilation hook for running all tests after successful compilation.
Install this the following way:

(add-hook 'compilation-finish-functions
          'test-case-compilation-finish-run-all)"
                :arguments ("buffer" "result"))
                nil [31986 32387])
            ("test-case-error-pos" variable nil nil [32471 32503])
            ("make-variable-buffer-local" code nil nil [32504 32553])
            ("test-case-error-overlays" variable nil nil [32555 32592])
            ("make-variable-buffer-local" code nil nil [32593 32647])
            ("test-case-result-mode-map" variable
               (:documentation "Keymap used for `test-case-result-mode'."
                :default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "q" 'bury-buffer) (define-key keymap [mouse-2] 'test-case-click) (define-key keymap [follow-link] 'mouse-face) (define-key keymap "" 'test-case-follow-link) keymap))
                nil [32649 32975])
            ("define-derived-mode" code nil nil [32977 33181])
            ("test-case-switch-to-result-buffer" function
               (:documentation "Switch to the result buffer of the last test run."
                :user-visible-flag t)
                nil [33183 33449])
            ("test-case-insert-failure-overlay" function
               (:documentation "Insert an overlay marking a failure between BEG and END in BUFFER."
                :arguments ("beg" "end" "buffer" "props"))
                nil [33451 34298])
            ("test-case-remove-failure-overlays" function
               (:documentation "Remove all overlays added by `test-case-insert-failure-overlay' in BUFFER."
                :arguments ("buffer"))
                nil [34300 34512])
            ("test-case-result-add-markers" function (:arguments ("beg" "end" "find-file-p" "props")) nil [34514 35921])
            ("test-case-result-supplement-markers" function (:arguments ("pos")) nil [35923 36234])
            ("test-case-propertize-message" function (:arguments ("file-name" "locate-func" "file" "line" "col" "link" "msg" "test")) nil [36236 37548])
            ("test-case--add-text-properties-for-match" function (:arguments ("match" "props")) nil [37550 37734])
            ("test-case-follow-link" function
               (:documentation "Follow the link at POS in an error buffer."
                :user-visible-flag t
                :arguments ("pos"))
                nil [37736 38279])
            ("test-case-click" function
               (:documentation "Follow the link selected in an error buffer."
                :user-visible-flag t
                :arguments ("event"))
                nil [38281 38512])
            ("test-case-failure-message-at-point" function nil nil [38514 38608])
            ("test-case-echo-failure-mode-map" variable (:default-value (make-sparse-keymap)) nil [38692 38753])
            ("test-case-echo-failure-at-point" function nil nil [38755 38932])
            ("define-minor-mode" code nil nil [38934 39291])
            ("test-case-next-error" function (:arguments ("arg")) nil [39375 39736])
            ("test-case-previous-error" function (:arguments ("arg")) nil [39738 40014])
            ("test-case-next-error-function" function (:arguments ("arg" "reset")) nil [40016 40338])
            ("test-case-result-follow-last-link" variable nil nil [40422 40468])
            ("make-variable-buffer-local" code nil nil [40469 40525])
            ("define-minor-mode" code nil nil [40527 41076])
            ("test-case-result-follow-hook" function nil nil [41078 41591])
            ("test-case-grep" function (:arguments ("regexp")) nil [41675 41859])
            ("test-case-locate" function
               (:documentation "Search for REGEXP in the buffer and return match beginning and end."
                :arguments ("regexp" "group"))
                nil [41861 42103])
            ("test-case--search" function (:arguments ("regexp")) nil [42105 42262])
            ("test-case-c++-inherits" function
               (:documentation "Test if a class in the current buffer inherits from CLASS in NAMESPACE.
CLASS and NAMESPACE need to be `regexp-quote'd."
                :arguments ("class" "namespace"))
                nil [42264 43029])
            ("test-case-junit-java-executable" variable
               (:documentation "The Java executable used to run JUnit tests."
                :default-value (executable-find "java"))
                nil [43113 43264])
            ("test-case-junit-java-arguments" variable
               (:documentation "The command line arguments used to run JUnit tests."
                :default-value "-ea")
                nil [43266 43406])
            ("test-case-junit-classpath" variable
               (:documentation "*Directories that make up the CLASSPATH for JUnit tests.
Instead of directories, each element can also be a function returning a
CLASSPATH for the current buffer."
                :user-visible-flag t
                :default-value '(test-case-junit-guess-root test-case-junit-jde-classpath test-case-junit-classpath-from-env))
                nil [43408 43845])
            ("test-case-junit-build-classpath" function nil nil [43847 44027])
            ("test-case-junit-classpath-from-env" function (:documentation "Return the value of the CLASSPATH environment variable.") nil [44029 44157])
            ("test-case-junit-grep-package" function nil nil [44159 44257])
            ("test-case-junit-guess-root" function (:documentation "Guess the classpath for a JUnit test by looking at the package.
If the classpath ends in \"src/\", the same path is added again using \"bin/\".
Additionally the CLASSPATH environment variable is used.") nil [44259 45009])
            ("test-case-junit-jde-classpath" function nil nil [45011 45506])
            ("test-case-junit-class" function nil nil [45508 45756])
            ("test-case-junit-command" function nil nil [45758 45996])
            ("test-case-junit-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<assert" (regexp-opt '("True" "False" "Equals" "NotNull" "Null" "Same" "NotSame")) "\\_>") (0 'test-case-assertion prepend))))) nil [45998 46278])
            ("test-case-junit-assertion-re" variable
               (:constant-flag t
                :default-value "junit\\.framework\\.AssertionFailedError: \\(.*\\)
\\(^[ 	]+at .*
\\)*?")
                nil [46280 46396])
            ("test-case-junit-backtrace-re-1" variable
               (:constant-flag t
                :default-value "[ 	]+at [^ 	
]+(\\(\\(")
                nil [46398 46469])
            ("test-case-junit-backtrace-re-2" variable
               (:constant-flag t
                :default-value "\\):\\([[:digit:]]+\\)\\)")
                nil [46471 46542])
            ("test-case-junit-failure-pattern" function nil nil [46544 46847])
            ("test-case-junit-import-regexp" variable (:default-value "import\\s +junit\\.framework\\.\\(TestCase\\|\\*\\)") nil [46849 46943])
            ("test-case-junit-extends-regexp" variable (:default-value "extends\\s +TestCase") nil [46945 47009])
            ("test-case-junit-backend" function
               (:documentation "JUnit back-end for `test-case-mode'.
When using the JUnit backend, you'll need to make sure the classpath is
configured correctly.  The classpath is determined by
`test-case-junit-classpath-func' and guessed by default."
                :arguments ("command"))
                nil [47011 47660])
            ("test-case-ruby-executable" variable
               (:documentation "The Ruby executable used to run Ruby tests."
                :default-value (executable-find "ruby"))
                nil [47744 47888])
            ("test-case-ruby-arguments" variable (:documentation "The command line arguments used to run Ruby tests.") nil [47890 48020])
            ("test-case-ruby-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<assert" (regexp-opt '("" "_equal" "_not_equal" "_match" "_no_match" "_nil" "_not_nil" "_in_delta" "_instance_of" "_kind_of" "_same" "_not_same" "_raise" "_nothing_raised" "_throws" "_nothing_thrown" "_respond_to" "_send" "_operator")) "\\_>") (0 'test-case-assertion prepend))))) nil [48022 48488])
            ("test-case-ruby-failure-pattern" variable (:default-value (eval-when-compile `(,(concat "^[^ 	]+([^ 	]+) " "\\[\\(\\([^:]+\\):\\([[:digit:]]+\\)\\)\\]:
" "\\(\\(.+
\\)*\\)
") 2 3 nil 1 4))) nil [48490 48707])
            ("test-case-ruby-backend" function
               (:documentation "Ruby Test::Unit back-end for `test-case-mode'."
                :arguments ("command"))
                nil [48709 49213])
            ("test-case-python-executable" variable
               (:documentation "The Python executable used to run Python tests."
                :default-value (executable-find "python"))
                nil [49297 49449])
            ("test-case-python-arguments" variable (:documentation "The command line arguments used to run Python tests.") nil [49451 49585])
            ("test-case-python-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<assert" (regexp-opt '("AlmostEqual" "Equal" "False" "Raises" "NotAlmostEqual" "NotEqual" "True" "_") t) "\\|fail" (regexp-opt '("" "If" "IfAlmostEqual" "IfEqual" "Unless" "UnlessAlmostEqual" "UnlessEqual" "UnlessRaises" "ureException")) "\\_>") (0 'test-case-assertion prepend))))) nil [49587 50090])
            ("test-case-python-failure-pattern" function nil nil [50092 50377])
            ("test-case-python-backend" function
               (:documentation "Python Test::Unit back-end for `test-case-mode'."
                :arguments ("command"))
                nil [50379 50838])
            ("test-case-cxxtest-executable-name-func" variable
               (:documentation "A function that returns the executable name for a cxxtest test."
                :default-value 'file-name-sans-extension)
                nil [50922 51104])
            ("test-case-cxxtest-p" function (:documentation "Test if the current buffer is a cxxtest.") nil [51106 51640])
            ("test-case-cxxtest-command" function nil nil [51643 52030])
            ("test-case-cxxtest-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<TS_" (regexp-opt '("FAIL" "ASSERT" "ASSERT_EQUALS" "ASSERT_SAME_DATA" "ASSERT_DELTA" "ASSERT_DIFFERS" "ASSERT_LESS_THAN" "ASSERT_LESS_THAN_EQUALS" "ASSERT_PREDICATE" "ASSERT_RELATION" "ASSERT_THROWS" "ASSERT_THROWS_EQUALS" "ASSERT_THROWS_ASSERT" "ASSERT_THROWS_ANYTHING" "ASSERT_THROWS_NOTHING" "WARN" "TRACE")) "\\_>") (0 'test-case-assertion prepend))))) nil [52032 52624])
            ("test-case-cxxtest-failure-pattern" function nil nil [52626 52842])
            ("test-case-cxxtest-backend" function
               (:documentation "CxxTest back-end for `test-case-mode'
Since these tests can't be dynamically loaded by the runner, each test has
to be compiled into its own executable.  The executable should have the
same name as the test, but without the extension.  If it doesn't,
customize `test-case-cxxtest-executable-name-func'"
                :arguments ("command"))
                nil [52844 53436])
            ("test-case-cppunit-executable-name-func" variable
               (:documentation "A function that returns the executable name for a CppUnit test."
                :default-value 'file-name-sans-extension)
                nil [53520 53702])
            ("test-case-cppunit-p" function (:documentation "Test if the current buffer is a CppUnit test.") nil [53704 54239])
            ("test-case-cppunit-command" function nil nil [54241 54628])
            ("test-case-cppunit-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<CPPUNIT_" (regexp-opt '("ASSERT" "ASSERT_MESSAGE" "FAIL" "ASSERT_EQUAL" "ASSERT_EQUAL_MESSAGE" "ASSERT_DOUBLES_EQUAL" "ASSERT_THROW" "ASSERT_NO_THROW" "ASSERT_ASSERTION_FAIL" "ASSERT_ASSERTION_PASS")) "\\_>") (0 'test-case-assertion prepend))))) nil [54630 55065])
            ("test-case-cppunit-failure-pattern" function nil nil [55067 55325])
            ("test-case-cppunit-backend" function
               (:documentation "CxxTest back-end for `test-case-mode'
Since these tests can't be dynamically loaded by the runner, each test has
to be compiled into its own executable.  The executable should have the
same name as the test, but without the extension.  If it doesn't,
customize `test-case-cppunit-executable-name-func'"
                :arguments ("command"))
                nil [55327 55919])
            ("test-case-gtest-executable-name-func" variable
               (:documentation "A function that returns the executable name for a google-test test."
                :default-value 'file-name-sans-extension)
                nil [56003 56187])
            ("test-case-gtest-p" function (:documentation "Test if the current buffer is a CppUnit test.") nil [56189 56411])
            ("test-case-gtest-command" function nil nil [56413 56798])
            ("test-case-gtest-font-lock-keywords" variable (:default-value (eval-when-compile `((,(concat "\\_<\\(ASSERT\\|EXPECT\\)_" (regexp-opt '("TRUE" "FALSE" "EQ" "NE" "LT" "LE" "GT" "GE" "STREQ" "STRNE" "STRCASEEQ" "STRCASENE" "THROW" "ANY_THROW" "NO_THROW" "FLOAT_EQ" "DOUBLE_EQ" "NEAR" "HRESULT_SUCCEEDED" "HRESULT_FAILED")) "\\_>") (0 'test-case-assertion prepend)) (,(regexp-opt '("SUCCEED" "FAIL" "ADD_FAILURE") 'symbols) (0 'test-case-assertion prepend))))) nil [56800 57360])
            ("test-case-gtest-message-lines" variable (:default-value (eval-when-compile (regexp-opt '("Value of" "Actual" "Expected")))) nil [57362 57469])
            ("test-case-gtest-failure-pattern" function nil nil [57471 57779])
            ("test-case-gtest-backend" function
               (:documentation "google-test back-end for `test-case-mode'.
Since these tests can't be dynamically loaded, each test has to be
compiled into its own executable.  The executable should have the same
name as the test, but without the extension.  If it doesn't, customize
`test-case-gtest-executable-name-func'"
                :arguments ("command"))
                nil [57781 58350])
            ("test-case-erc-emacs-executable" variable
               (:documentation "The Emacs executable used to run ERT tests."
                :default-value (car command-line-args))
                nil [58434 58582])
            ("test-case-ert-p" function nil nil [58584 58774])
            ("test-case-ert-command" function nil nil [58776 59002])
            ("test-case-ert-font-lock-keywords" variable (:default-value '(("(\\(\\_<should\\_>\\)" (1 'test-case-assertion prepend)))) nil [59004 59109])
            ("test-case-ert-failure-pattern" variable (:default-value '("Test \\(.*\\) condition:
\\(?:    .*
\\)*" nil nil nil nil 0 1)) nil [59111 59224])
            ("test-case-ert-search-test" function (:arguments ("name")) nil [59226 59512])
            ("test-case-ert-backend" function (:arguments ("command")) nil [59514 59842])
            ("test-case-mode" package nil nil [59844 59869]))          
      :file "test-case-mode.el"
      :pointmax 59902
      :fsize 59901
      :lastmodtime '(23398 9370 637621 100000)
      :unmatched-syntax '((close-paren 2701 . 2702) (symbol 2670 . 2687) (open-paren 2669 . 2670))))
  :file "!home!lk!.emacs.d!elpa!test-case-mode-20130525.1434!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
