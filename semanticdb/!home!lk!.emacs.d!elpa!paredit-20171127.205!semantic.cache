;; Object semanticdb-project-database-file-17dd4b0
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-17dd4b0"
  :tables
  (list
    (semanticdb-table "semanticdb-table-17dd490"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "paredit-autoloads.el"
      :pointmax 353
      :fsize 1350
      :lastmodtime '(23398 9611 253444 918000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-62687ec"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paredit-version" variable
               (:constant-flag t
                :default-value 25)
                nil [5255 5284])
            ("paredit-beta-p" variable
               (:constant-flag t
                :default-value t)
                nil [5285 5312])
            ("put" code nil nil [7449 7505])
            ("paredit-preserving-column" function
               (:documentation "Evaluate BODY and restore point to former column, relative to code.
Assumes BODY will change only indentation.
If point was on code, it moves with the code.
If point was on indentation, it stays in indentation."
                :arguments ("body"))
                nil [6869 7445])
            ("put" code nil nil [6808 6865])
            ("paredit-ignore-sexp-errors" function (:arguments ("body")) nil [6694 6804])
            ("put" code nil nil [6633 6690])
            ("paredit-handle-sexp-errors" function (:arguments ("body" "handler")) nil [6487 6629])
            ("paredit-sexp-error-type" variable (:default-value (with-temp-buffer (insert "(") (condition-case condition (backward-sexp) (error (if (eq (car condition) 'error) (paredit-warn "%s%s%s%s%s" "Paredit is unable to discriminate" " S-expression parse errors from" " other errors. " " This may cause obscure problems. " " Please upgrade Emacs.")) (car condition))))) nil [5908 6483])
            ("defalias" code nil nil [5844 5904])
            ("xcond" function
               (:documentation "Exhaustive COND.
Signal an error if no clause matches."
                :arguments ("clauses"))
                nil [5688 5840])
            ("paredit-gnu-emacs-p" function nil nil [5584 5684])
            ("paredit-xemacs-p" function nil nil [5336 5580])
            ("paredit-lighter" variable
               (:documentation "Mode line lighter Paredit Mode."
                :default-value " Paredit")
                nil [7544 7615])
            ("paredit-mode-map" variable
               (:documentation "Keymap for the paredit minor mode."
                :default-value (make-sparse-keymap))
                nil [7617 7702])
            ("paredit-override-check-parens-function" variable
               (:documentation "Function to tell whether unbalanced text should inhibit Paredit Mode."
                :default-value (lambda (condition) condition nil))
                nil [7704 7862])
            ("define-minor-mode" code nil nil [7879 8682])
            ("paredit-override-check-parens-interactively" function (:arguments ("condition")) nil [8684 8824])
            ("enable-paredit-mode" function
               (:documentation "Turn on pseudo-structural editing of Lisp code."
                :user-visible-flag t)
                nil [8841 8959])
            ("disable-paredit-mode" function
               (:documentation "Turn off pseudo-structural editing of Lisp code."
                :user-visible-flag t)
                nil [8961 9081])
            ("paredit-backward-delete-key" variable (:default-value (xcond ((paredit-xemacs-p) "BS") ((paredit-gnu-emacs-p) "DEL"))) nil [9083 9197])
            ("paredit-forward-delete-keys" variable (:default-value (xcond ((paredit-xemacs-p) '("DEL")) ((paredit-gnu-emacs-p) '("<delete>" "<deletechar>")))) nil [9199 9340])
            ("paredit-commands" variable (:documentation "List of paredit commands with their keys and examples.") nil [9539 9627])
            ("progn" code nil nil [9932 17749])
            ("put" code nil nil [18511 18561])
            ("paredit-do-commands" function (:arguments ("vars" "string-case" "body")) nil [17839 18507])
            ("paredit-define-keys" function nil nil [18564 18756])
            ("paredit-function-documentation" function (:arguments ("fn")) nil [18758 19026])
            ("paredit-annotate-mode-with-examples" function nil nil [19028 20234])
            ("paredit-annotate-functions-with-examples" function nil nil [20236 20906])
            ("paredit-insert-html-examples" function
               (:documentation "Insert HTML for a paredit quick reference table."
                :user-visible-flag t)
                nil [20930 22641])
            ("paredit-html-quote" function (:arguments ("string")) nil [22643 23039])
            ("define-paredit-pair" function (:arguments ("open" "close" "name")) nil [23170 25289])
            ("paredit-conc-name" function (:arguments ("strings")) nil [23088 23166])
            ("paredit-wrap-commands" variable
               (:documentation "List of paredit commands that wrap S-expressions.
Used by `paredit-yank-pop'; for internal paredit use only."
                :default-value '(paredit-wrap-sexp))
                nil [25292 25456])
            ("define-paredit-pair" code nil nil [25458 25495])
            ("define-paredit-pair" code nil nil [25496 25534])
            ("define-paredit-pair" code nil nil [25535 25572])
            ("define-paredit-pair" code nil nil [25573 25611])
            ("defalias" code nil nil [25645 25701])
            ("defalias" code nil nil [25702 25760])
            ("defalias" code nil nil [25761 25845])
            ("defalias" code nil nil [25847 25900])
            ("defalias" code nil nil [25901 25956])
            ("defalias" code nil nil [25957 26038])
            ("paredit-move-past-close" function (:arguments ("close")) nil [26041 26172])
            ("paredit-move-past-close-and-newline" function (:arguments ("close")) nil [26174 26673])
            ("paredit-move-past-close-and" function (:arguments ("close" "if-moved")) nil [26675 26931])
            ("paredit-find-comment-on-line" function (:documentation "Find a margin comment on the current line.
Return nil if there is no such comment or if there is anything but
  whitespace until such a comment.
If such a comment exists, delete the comment (including all leading
  whitespace) and return a cons whose car is the comment as a string
  and whose cdr is the point of the comment's initial semicolon,
  relative to the start of the line.") nil [26933 27951])
            ("paredit-insert-pair" function (:arguments ("n" "open" "close" "forward")) nil [27954 29104])
            ("paredit-scan-sexps-hack" function (:arguments ("point" "n")) nil [29139 29608])
            ("paredit-region-safe-for-insert-p" function nil nil [29611 30367])
            ("paredit-space-for-delimiter-predicates" variable (:documentation "List of predicates for whether to put space by delimiter at point.
Each predicate is a function that is is applied to two arguments, ENDP
  and DELIMITER, and that returns a boolean saying whether to put a
  space next to the delimiter -- before/after the delimiter if ENDP is
  false/true, respectively.
If any predicate returns false, no space is inserted: every predicate
  has veto power.
Each predicate may assume that the point is not at the beginning/end of
  the buffer, and that the point is preceded/followed by a word
  constituent, symbol constituent, string quote, or delimiter matching
  DELIMITER, if ENDP is false/true, respectively.
Each predicate should examine only text before/after the point if ENDP is
  false/true, respectively.") nil [30382 31189])
            ("paredit-space-for-delimiter-p" function (:arguments ("endp" "delimiter")) nil [31191 32069])
            ("paredit-move-past-close-and-reindent" function (:arguments ("close")) nil [32072 33673])
            ("paredit-missing-close" function nil nil [33675 33920])
            ("paredit-delete-leading-whitespace" function nil nil [33922 34393])
            ("paredit-blink-paren-match" function (:arguments ("another-line-p")) nil [34395 34813])
            ("paredit-doublequote" function
               (:documentation "Insert a pair of double-quotes.
With a prefix argument N, wrap the following N S-expressions in
  double-quotes, escaping intermediate characters if necessary.
If the region is active, `transient-mark-mode' is enabled, and the
  region's start and end fall in the same parenthesis depth, insert a
  pair of double-quotes around the region, again escaping intermediate
  characters if necessary.
Inside a comment, insert a literal double-quote.
At the end of a string, move past the closing double-quote.
In the middle of a string, insert a backslash-escaped double-quote.
If in a character literal, do nothing.  This prevents accidentally
  changing a what was in the character literal to become a meaningful
  delimiter unintentionally."
                :user-visible-flag t
                :arguments ("n"))
                nil [34816 36116])
            ("paredit-meta-doublequote" function
               (:documentation "Move to the end of the string.
If not in a string, act as `paredit-doublequote'; if not prefix argument
 is specified and the region is not active or `transient-mark-mode' is
 disabled, the default is to wrap one S-expression, however, not zero."
                :user-visible-flag t
                :arguments ("n"))
                nil [36118 36593])
            ("paredit-meta-doublequote-and-newline" function
               (:documentation "Move to the end of the string, insert a newline, and indent.
If not in a string, act as `paredit-doublequote'; if not prefix argument
 is specified and the region is not active or `transient-mark-mode' is
 disabled, the default is to wrap one S-expression, however, not zero."
                :user-visible-flag t
                :arguments ("n"))
                nil [36595 37231])
            ("paredit-forward-for-quote" function (:arguments ("end")) nil [37233 38692])
            ("paredit-backslash" function
               (:documentation "Insert a backslash followed by a character to escape."
                :user-visible-flag t)
                nil [38718 39052])
            ("paredit-backslash-interactive" function nil nil [39054 39746])
            ("paredit-newline" function
               (:documentation "Insert a newline and indent it.
This is like `newline-and-indent', but it not only indents the line
  that the point is on but also the S-expression following the point,
  if there is one.
Move forward one character first if on an escaped character.
If in a string, just insert a literal newline.
If in a comment and if followed by invalid structure, call
  `indent-new-comment-line' to keep the invalid structure in a
  comment."
                :user-visible-flag t)
                nil [39748 40806])
            ("paredit-reindent-defun" function
               (:documentation "Reindent the definition that the point is on.
If the point is in a string or a comment, fill the paragraph instead,
  and with a prefix argument, justify as well."
                :user-visible-flag t
                :arguments ("argument"))
                nil [40808 41279])
            ("paredit-semicolon" function
               (:documentation "Insert a semicolon.
With a prefix argument N, insert N semicolons.
If in a string, do just that and nothing else.
If in a character literal, move to the beginning of the character
  literal before inserting the semicolon.
If the enclosing list ends on the line after the point, break the line
  after the last S-expression following the point.
If a list begins on the line after the point but ends on a different
  line, break the line after the last S-expression following the point
  before the list."
                :user-visible-flag t
                :arguments ("n"))
                nil [41306 42247])
            ("paredit-semicolon-find-line-break-point" function nil nil [42249 43987])
            ("paredit-semicolon-with-line-break" function (:arguments ("line-break-point" "n")) nil [43989 44629])
            ("comment-forward" function (:prototype-flag t) nil [44760 44800])
            ("comment-normalize-vars" function (:prototype-flag t) nil [44801 44848])
            ("comment-region" function (:prototype-flag t) nil [44849 44888])
            ("comment-search-forward" function (:prototype-flag t) nil [44889 44936])
            ("uncomment-region" function (:prototype-flag t) nil [44937 44978])
            ("paredit-initialize-comment-dwim" function nil nil [44980 45596])
            ("paredit-comment-dwim" function
               (:documentation "Call the Lisp comment command you want (Do What I Mean).
This is like `comment-dwim', but it is specialized for Lisp editing.
If transient mark mode is enabled and the mark is active, comment or
  uncomment the selected region, depending on whether it was entirely
  commented not not already.
If there is already a comment on the current line, with no prefix
  argument, indent to that comment; with a prefix argument, kill that
  comment.
Otherwise, insert a comment appropriate for the context and ensure that
  any code following the comment is moved to the next line.
At the top level, where indentation is calculated to be at column 0,
  insert a triple-semicolon comment; within code, where the indentation
  is calculated to be non-zero, and on the line there is either no code
  at all or code after the point, insert a double-semicolon comment;
  and if the point is after all code on the line, insert a single-
  semicolon margin comment at `comment-column'."
                :user-visible-flag t
                :arguments ("argument"))
                nil [45598 47065])
            ("paredit-comment-on-line-p" function (:documentation "True if there is a comment on the line following point.
This is expected to be called only in `paredit-comment-dwim'; do not
  call it elsewhere.") nil [47068 47763])
            ("paredit-insert-comment" function nil nil [47765 48918])
            ("paredit-forward-delete" function
               (:documentation "Delete a character forward or move forward over a delimiter.
If on an opening S-expression delimiter, move forward into the
  S-expression.
If on a closing S-expression delimiter, refuse to delete unless the
  S-expression is empty, in which case delete the whole S-expression.
With a numeric prefix argument N, delete N characters forward.
With a `C-u' prefix argument, simply delete a character forward,
  without regard for delimiter balancing."
                :user-visible-flag t
                :arguments ("argument"))
                nil [48946 51351])
            ("paredit-forward-delete-in-string" function nil nil [51354 52520])
            ("paredit-check-forward-delete-in-comment" function nil nil [52522 52991])
            ("paredit-forward-delete-in-comment" function nil nil [52993 53100])
            ("paredit-forward-delete-comment-start" function nil nil [53102 53352])
            ("paredit-backward-delete" function
               (:documentation "Delete a character backward or move backward over a delimiter.
If on a closing S-expression delimiter, move backward into the
  S-expression.
If on an opening S-expression delimiter, refuse to delete unless the
  S-expression is empty, in which case delete the whole S-expression.
With a numeric prefix argument N, delete N characters backward.
With a `C-u' prefix argument, simply delete a character backward,
  without regard for delimiter balancing."
                :user-visible-flag t
                :arguments ("argument"))
                nil [53355 56051])
            ("paredit-backward-delete-in-string" function nil nil [56054 57165])
            ("paredit-backward-delete-in-comment" function nil nil [57167 57649])
            ("paredit-backward-delete-maybe-comment-end" function nil nil [57651 58135])
            ("paredit-kill" function
               (:documentation "Kill a line as if with `kill-line', but respecting delimiters.
In a string, act exactly as `kill-line' but do not kill past the
  closing string delimiter.
On a line with no S-expressions on it starting after the point or
  within a comment, act exactly as `kill-line'.
Otherwise, kill all S-expressions that start after the point.
With a `C-u' prefix argument, just do the standard `kill-line'.
With a numeric prefix argument N, do `kill-line' that many times."
                :user-visible-flag t
                :arguments ("argument"))
                nil [58152 59207])
            ("paredit-kill-line-in-string" function nil nil [59209 59633])
            ("paredit-kill-line-in-comment" function nil nil [59635 59861])
            ("paredit-kill-sexps-on-line" function nil nil [59863 61141])
            ("paredit-forward-sexps-to-kill" function (:arguments ("beginning" "eol")) nil [61316 62702])
            ("paredit-kill-sexps-on-whole-line" function (:arguments ("beginning")) nil [62704 64033])
            ("paredit-forward-kill-word" function
               (:documentation "Kill a word forward, skipping over intervening delimiters."
                :user-visible-flag t)
                nil [64242 65485])
            ("paredit-backward-kill-word" function
               (:documentation "Kill a word backward, skipping over any intervening delimiters."
                :user-visible-flag t)
                nil [65487 66642])
            ("paredit-kill-word-state" function (:arguments ("parse-state" "adjacent-char-fn")) nil [66678 66972])
            ("paredit-kill-word-hack" function (:arguments ("old-state" "new-state" "parse-state")) nil [67231 68094])
            ("paredit-copy-as-kill" function
               (:documentation "Save in the kill ring the region that `paredit-kill' would kill."
                :user-visible-flag t)
                nil [68096 68746])
            ("paredit-copy-as-kill-in-string" function nil nil [68748 69020])
            ("paredit-copy-sexps-as-kill" function nil nil [69022 69993])
            ("paredit-delete-region" function
               (:documentation "Delete the text between point and mark, like `delete-region'.
If that text is unbalanced, signal an error instead.
With a prefix argument, skip the balance check."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [70019 70410])
            ("paredit-kill-region" function
               (:documentation "Kill the text between point and mark, like `kill-region'.
If that text is unbalanced, signal an error instead.
With a prefix argument, skip the balance check."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [70412 70793])
            ("paredit-check-region-for-delete" function
               (:documentation "Signal an error deleting text between START and END is unsafe."
                :arguments ("start" "end"))
                nil [70795 71455])
            ("paredit-check-region-for-delete:depth" function (:arguments ("start" "start-state" "end" "end-state")) nil [71457 71783])
            ("paredit-check-region-for-delete:string" function (:arguments ("start" "start-state" "end" "end-state")) nil [71785 72168])
            ("paredit-check-region-for-delete:comment" function (:arguments ("start" "start-state" "end" "end-state")) nil [72171 74089])
            ("paredit-check-region-for-delete:char-quote" function (:arguments ("start" "start-state" "end" "end-state")) nil [74091 74601])
            ("defun-motion" function (:arguments ("name" "bvl" "doc" "body")) nil [74643 75048])
            ("defun-motion" code nil nil [75051 75501])
            ("defun-motion" code nil nil [75503 75971])
            ("paredit-move-forward" function nil nil [75974 76626])
            ("paredit-move-backward" function nil nil [76628 77223])
            ("defalias" code nil nil [77251 77313])
            ("paredit-recenter-on-sexp" function
               (:documentation "Recenter the screen on the S-expression following the point.
With a prefix argument N, encompass all N S-expressions forward."
                :user-visible-flag t
                :arguments ("n"))
                nil [77315 78244])
            ("paredit-recenter-on-defun" function
               (:documentation "Recenter the screen on the definition at point."
                :user-visible-flag t)
                nil [78246 78425])
            ("paredit-focus-on-defun" function
               (:documentation "Moves display to the top of the definition at point."
                :user-visible-flag t)
                nil [78427 78571])
            ("paredit-up/down" function (:arguments ("n" "vertical-direction")) nil [78615 78870])
            ("paredit-next-up/down-point" function (:arguments ("horizontal-direction" "vertical-direction")) nil [78872 80973])
            ("paredit-find-next-string-start" function (:arguments ("horizontal-direction" "limit")) nil [80976 81773])
            ("defun-motion" code nil nil [81775 82031])
            ("defun-motion" code nil nil [82033 82355])
            ("defun-motion" code nil nil [82357 82671])
            ("defun-motion" code nil nil [82673 82937])
            ("paredit-wrap-sexp" function
               (:documentation "Wrap the following S-expression.
If a `C-u' prefix argument is given, wrap all S-expressions following
  the point until the end of the buffer or of the enclosing list.
If a numeric prefix argument N is given, wrap N S-expressions.
Automatically indent the newly wrapped S-expression.
As a special case, if the point is at the end of a list, simply insert
  a parenthesis pair, rather than inserting a lone opening delimiter
  and then signalling an error, in the interest of preserving
  structure.
By default OPEN and CLOSE are round delimiters."
                :user-visible-flag t
                :arguments ("argument" "open" "close"))
                nil [83002 84122])
            ("paredit-yank-pop" function
               (:documentation "Replace just-yanked text with the next item in the kill ring.
If this command follows a `yank', just run `yank-pop'.
If this command follows a `paredit-wrap-sexp', or any other paredit
  wrapping command (see `paredit-wrap-commands'), run `yank' and
  reindent the enclosing S-expression.
If this command is repeated, run `yank-pop' and reindent the enclosing
  S-expression.

The argument is passed on to `yank' or `yank-pop'; see their
  documentation for details."
                :user-visible-flag t
                :arguments ("argument"))
                nil [84124 85457])
            ("paredit-splice-sexp" function
               (:documentation "Splice the list that the point is on by removing its delimiters.
With a prefix argument as in `C-u', kill all S-expressions backward in
  the current list before splicing all S-expressions forward into the
  enclosing list.
With two prefix arguments as in `C-u C-u', kill all S-expressions
  forward in the current list before splicing all S-expressions
  backward into the enclosing list.
With a numerical prefix argument N, kill N S-expressions backward in
  the current list before splicing the remaining S-expressions into the
  enclosing list.  If N is negative, kill forward.
Inside a string, unescape all backslashes, or signal an error if doing
  so would invalidate the buffer's structure."
                :user-visible-flag t
                :arguments ("argument"))
                nil [85460 87231])
            ("paredit-splice-reindent" function (:arguments ("start" "end")) nil [87234 87749])
            ("paredit-kill-surrounding-sexps-for-splice" function (:arguments ("argument")) nil [87751 89301])
            ("paredit-splice-sexp-killing-backward" function
               (:documentation "Splice the list the point is on by removing its delimiters, and
  also kill all S-expressions before the point in the current list.
With a prefix argument N, kill only the preceding N S-expressions."
                :user-visible-flag t
                :arguments ("n"))
                nil [89304 89700])
            ("paredit-splice-sexp-killing-forward" function
               (:documentation "Splice the list the point is on by removing its delimiters, and
  also kill all S-expressions after the point in the current list.
With a prefix argument N, kill only the following N S-expressions."
                :user-visible-flag t
                :arguments ("n"))
                nil [89702 90101])
            ("paredit-raise-sexp" function
               (:documentation "Raise the following S-expression in a tree, deleting its siblings.
With a prefix argument N, raise the following N S-expressions.  If N
  is negative, raise the preceding N S-expressions.
If the point is on an S-expression, such as a string or a symbol, not
  between them, that S-expression is considered to follow the point."
                :user-visible-flag t
                :arguments ("argument"))
                nil [90103 91948])
            ("paredit-convolute-sexp" function
               (:documentation "Convolute S-expressions.
Save the S-expressions preceding point and delete them.
Splice the S-expressions following point.
Wrap the enclosing list in a new list prefixed by the saved text.
With a prefix argument N, move up N lists before wrapping."
                :user-visible-flag t
                :arguments ("n"))
                nil [92089 93507])
            ("paredit-splice-string" function (:arguments ("argument")) nil [93510 94700])
            ("paredit-unescape-string" function (:arguments ("string")) nil [94702 95109])
            ("paredit-forward-slurp-sexp" function
               (:documentation "Add the S-expression following the current list into that list
  by moving the closing delimiter.
Automatically reindent the newly slurped S-expression with respect to
  its new enclosing form.
If in a string, move the opening double-quote forward by one
  S-expression and escape any intervening characters as necessary,
  without altering any indentation or formatting."
                :user-visible-flag t
                :arguments ("argument"))
                nil [95137 96587])
            ("paredit-forward-slurp-into-list" function (:arguments ("argument")) nil [96589 98310])
            ("paredit-forward-slurp-into-string" function (:arguments ("argument")) nil [98313 99333])
            ("paredit-forward-barf-sexp" function
               (:documentation "Remove the last S-expression in the current list from that list
  by moving the closing delimiter.
Automatically reindent the newly barfed S-expression with respect to
  its new enclosing form."
                :user-visible-flag t
                :arguments ("argument"))
                nil [99335 101247])
            ("paredit-backward-slurp-sexp" function
               (:documentation "Add the S-expression preceding the current list into that list
  by moving the closing delimiter.
Automatically reindent the whole form into which new S-expression was
  slurped.
If in a string, move the opening double-quote backward by one
  S-expression and escape any intervening characters as necessary,
  without altering any indentation or formatting."
                :user-visible-flag t
                :arguments ("argument"))
                nil [101250 102697])
            ("paredit-backward-slurp-into-list" function (:arguments ("argument")) nil [102699 104234])
            ("paredit-backward-slurp-into-string" function (:arguments ("argument")) nil [104237 105273])
            ("paredit-backward-barf-sexp" function
               (:documentation "Remove the first S-expression in the current list from that list
  by moving the closing delimiter.
Automatically reindent the barfed S-expression and the form from which
  it was barfed."
                :user-visible-flag t
                :arguments ("argument"))
                nil [105275 106998])
            ("paredit-split-sexp" function
               (:documentation "Split the list or string the point is on into two."
                :user-visible-flag t)
                nil [107027 107707])
            ("paredit-join-sexps" function
               (:documentation "Join the S-expressions adjacent on either side of the point.
Both must be lists, strings, or atoms; error if there is a mismatch."
                :user-visible-flag t)
                nil [107709 109374])
            ("paredit-join-lists-internal" function (:arguments ("left-point" "right-point")) nil [109377 110133])
            ("paredit-add-to-previous-list" function
               (:documentation "Add the S-expression following point to the list preceding point."
                :user-visible-flag t)
                nil [110872 111177])
            ("paredit-add-to-next-list" function
               (:documentation "Add the S-expression preceding point to the list following point.
If no S-expression precedes point, move up the tree until one does."
                :user-visible-flag t)
                nil [111179 111495])
            ("paredit-join-with-previous-list" function
               (:documentation "Join the list the point is on with the previous list in the buffer."
                :user-visible-flag t)
                nil [111497 111861])
            ("paredit-join-with-next-list" function
               (:documentation "Join the list the point is on with the next list in the buffer."
                :user-visible-flag t)
                nil [111863 112205])
            ("paredit-in-string-escape-p" function (:documentation "True if the point is on a character escape of a string.
This is true only if the character is preceded by an odd number of
  backslashes.
This assumes that `paredit-in-string-p' has already returned true.") nil [112224 112614])
            ("paredit-in-char-p" function
               (:documentation "True if point is on a character escape outside a string."
                :arguments ("position"))
                nil [112616 112813])
            ("paredit-skip-whitespace" function
               (:documentation "Skip past any whitespace, or until the point LIMIT is reached.
If TRAILING-P is nil, skip leading whitespace; otherwise, skip trailing
  whitespace."
                :arguments ("trailing-p" "limit"))
                nil [112815 113185])
            ("defalias" code nil nil [113237 113425])
            ("paredit-hack-kill-region" function
               (:documentation "Kill the region between START and END.
Do not append to any current kill, and
 do not let the next kill append to this one."
                :user-visible-flag t
                :arguments ("start" "end"))
                nil [113427 114055])
            ("paredit-indent-sexps" function (:documentation "If in a list, indent all following S-expressions in the list.") nil [114218 114467])
            ("paredit-forward-and-indent" function
               (:documentation "Move forward by N S-expressions, indenting them with `indent-region'."
                :arguments ("n"))
                nil [114469 114676])
            ("paredit-indent-region" function
               (:documentation "Indent the region from START to END.
Don't reindent the line starting at START, however."
                :arguments ("start" "end"))
                nil [114678 116060])
            ("paredit-current-parse-state" function (:documentation "Return parse state of point from beginning of defun.") nil [116413 116772])
            ("paredit-in-string-p" function
               (:documentation "True if the parse state is within a double-quote-delimited string.
If no parse state is supplied, compute one from the beginning of the
  defun to the point."
                :arguments ("state"))
                nil [116774 117117])
            ("paredit-string-start+end-points" function
               (:documentation "Return a cons of the points of open and close quotes of the string.
The string is determined from the parse state STATE, or the parse state
  from the beginning of the defun to the point.
This assumes that `paredit-in-string-p' has already returned true, i.e.
  that the point is already within a string."
                :arguments ("state"))
                nil [117119 117739])
            ("paredit-enclosing-string-start" function nil nil [117741 117824])
            ("paredit-enclosing-string-end" function nil nil [117826 117913])
            ("paredit-enclosing-list-start" function nil nil [117915 118008])
            ("paredit-enclosing-list-end" function nil nil [118010 118092])
            ("paredit-in-comment-p" function
               (:documentation "True if parse state STATE is within a comment.
If no parse state is supplied, compute one from the beginning of the
  defun to the point."
                :arguments ("state"))
                nil [118095 118473])
            ("paredit-prefix-numeric-value" function (:arguments ("argument")) nil [118475 119350])
            ("paredit-count-sexps-forward" function nil nil [119352 119599])
            ("paredit-count-sexps-backward" function nil nil [119601 119849])
            ("paredit-point-at-sexp-boundary" function (:arguments ("n")) nil [119852 120015])
            ("paredit-point-at-sexp-start" function nil nil [120017 120125])
            ("paredit-point-at-sexp-end" function nil nil [120127 120233])
            ("paredit-lose-if-not-in-sexp" function (:arguments ("command")) nil [120235 120435])
            ("paredit-check-region" function
               (:documentation "Signal an error if text between `start' and `end' is unbalanced."
                :arguments ("start" "end"))
                nil [120437 120881])
            ("paredit-region-ok-p" function
               (:documentation "Return true iff the region between `start' and `end' is balanced.
This is independent of context -- it doesn't check what state the
  text at `start' is in."
                :arguments ("start" "end"))
                nil [120883 121292])
            ("paredit-current-indentation" function nil nil [121294 121398])
            ("paredit-restore-column" function (:arguments ("column" "indentation")) nil [121400 122019])
            ("paredit-define-keys" code nil nil [122043 122064])
            ("paredit-annotate-mode-with-examples" code nil nil [122065 122102])
            ("paredit-annotate-functions-with-examples" code nil nil [122103 122145])
            ("paredit" package nil nil [122147 122165]))          
      :file "paredit.el"
      :pointmax 122254
      :fsize 122253
      :lastmodtime '(23398 9611 96776 637000)
      :unmatched-syntax '((close-paren 75048 . 75049) (symbol 74624 . 74640) (open-paren 74623 . 74624) (close-paren 25289 . 25290) (symbol 23069 . 23085) (open-paren 23068 . 23069) (close-paren 18561 . 18562) (symbol 17820 . 17836) (open-paren 17819 . 17820) (close-paren 7512 . 7513) (symbol 7509 . 7512) (symbol 5316 . 5332) (open-paren 5315 . 5316))))
  :file "!home!lk!.emacs.d!elpa!paredit-20171127.205!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
