;; Object semanticdb-project-database-file-1909f64
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1909f64"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1909ee4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-generic" include nil nil [1015 1036])
            ("lisp-mode" include nil nil [1037 1057])
            ("cl-lib" include nil nil [1077 1094])
            ("define-abbrev-table" code nil nil [1097 1277])
            ("emacs-lisp-mode-syntax-table" variable
               (:documentation "Syntax table used in `emacs-lisp-mode'."
                :default-value (let ((table (make-syntax-table lisp--mode-syntax-table))) (modify-syntax-entry 91 "(]  " table) (modify-syntax-entry 93 ")[  " table) table))
                nil [1279 1518])
            ("emacs-lisp-mode-map" variable
               (:documentation "Keymap for Emacs Lisp mode.
All commands in `lisp-mode-shared-map' are inherited by this map."
                :default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Emacs-Lisp")) (lint-map (make-sparse-keymap)) (prof-map (make-sparse-keymap)) (tracing-map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "	" 'completion-at-point) (define-key map "" 'eval-defun) (define-key map "" 'indent-pp-sexp) (bindings--define-key map [menu-bar emacs-lisp] (cons "Emacs-Lisp" menu-map)) (bindings--define-key menu-map [eldoc] '(menu-item "Auto-Display Documentation Strings" eldoc-mode :button (:toggle bound-and-true-p eldoc-mode) :help "Display the documentation string for the item under cursor")) (bindings--define-key menu-map [checkdoc] '(menu-item "Check Documentation Strings" checkdoc :help "Check documentation strings for style requirements")) (bindings--define-key menu-map [re-builder] '(menu-item "Construct Regexp" re-builder :help "Construct a regexp interactively")) (bindings--define-key menu-map [tracing] (cons "Tracing" tracing-map)) (bindings--define-key tracing-map [tr-a] '(menu-item "Untrace All" untrace-all :help "Untrace all currently traced functions")) (bindings--define-key tracing-map [tr-uf] '(menu-item "Untrace Function..." untrace-function :help "Untrace function, and possibly activate all remaining advice")) (bindings--define-key tracing-map [tr-sep] menu-bar-separator) (bindings--define-key tracing-map [tr-q] '(menu-item "Trace Function Quietly..." trace-function-background :help "Trace the function with trace output going quietly to a buffer")) (bindings--define-key tracing-map [tr-f] '(menu-item "Trace Function..." trace-function :help "Trace the function given as an argument")) (bindings--define-key menu-map [profiling] (cons "Profiling" prof-map)) (bindings--define-key prof-map [prof-restall] '(menu-item "Remove Instrumentation for All Functions" elp-restore-all :help "Restore the original definitions of all functions being profiled")) (bindings--define-key prof-map [prof-restfunc] '(menu-item "Remove Instrumentation for Function..." elp-restore-function :help "Restore an instrumented function to its original definition")) (bindings--define-key prof-map [sep-rem] menu-bar-separator) (bindings--define-key prof-map [prof-resall] '(menu-item "Reset Counters for All Functions" elp-reset-all :help "Reset the profiling information for all functions being profiled")) (bindings--define-key prof-map [prof-resfunc] '(menu-item "Reset Counters for Function..." elp-reset-function :help "Reset the profiling information for a function")) (bindings--define-key prof-map [prof-res] '(menu-item "Show Profiling Results" elp-results :help "Display current profiling results")) (bindings--define-key prof-map [prof-pack] '(menu-item "Instrument Package..." elp-instrument-package :help "Instrument for profiling all function that start with a prefix")) (bindings--define-key prof-map [prof-func] '(menu-item "Instrument Function..." elp-instrument-function :help "Instrument a function for profiling")) (bindings--define-key prof-map [sep-natprof] menu-bar-separator) (bindings--define-key prof-map [prof-natprof-stop] '(menu-item "Stop Native Profiler" profiler-stop :help "Stop recording profiling information" :enable (and (featurep 'profiler) (profiler-running-p)))) (bindings--define-key prof-map [prof-natprof-report] '(menu-item "Show Profiler Report" profiler-report :help "Show the current profiler report" :enable (and (featurep 'profiler) (profiler-running-p)))) (bindings--define-key prof-map [prof-natprof-start] '(menu-item "Start Native Profiler..." profiler-start :help "Start recording profiling information")) (bindings--define-key menu-map [lint] (cons "Linting" lint-map)) (bindings--define-key lint-map [lint-di] '(menu-item "Lint Directory..." elint-directory :help "Lint a directory")) (bindings--define-key lint-map [lint-f] '(menu-item "Lint File..." elint-file :help "Lint a file")) (bindings--define-key lint-map [lint-b] '(menu-item "Lint Buffer" elint-current-buffer :help "Lint the current buffer")) (bindings--define-key lint-map [lint-d] '(menu-item "Lint Defun" elint-defun :help "Lint the function at point")) (bindings--define-key menu-map [edebug-defun] '(menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x")) (bindings--define-key menu-map [separator-byte] menu-bar-separator) (bindings--define-key menu-map [disas] '(menu-item "Disassemble Byte Compiled Object..." disassemble :help "Print disassembled code for OBJECT in a buffer")) (bindings--define-key menu-map [byte-recompile] '(menu-item "Byte-recompile Directory..." byte-recompile-directory :help "Recompile every `.el' file in DIRECTORY that needs recompilation")) (bindings--define-key menu-map [emacs-byte-compile-and-load] '(menu-item "Byte-compile and Load" emacs-lisp-byte-compile-and-load :help "Byte-compile the current file (if it has changed), then load compiled code")) (bindings--define-key menu-map [byte-compile] '(menu-item "Byte-compile This File" emacs-lisp-byte-compile :help "Byte compile the file containing the current buffer")) (bindings--define-key menu-map [separator-eval] menu-bar-separator) (bindings--define-key menu-map [ielm] '(menu-item "Interactive Expression Evaluation" ielm :help "Interactively evaluate Emacs Lisp expressions")) (bindings--define-key menu-map [eval-buffer] '(menu-item "Evaluate Buffer" eval-buffer :help "Execute the current buffer as Lisp code")) (bindings--define-key menu-map [eval-region] '(menu-item "Evaluate Region" eval-region :help "Execute the region as Lisp code" :enable mark-active)) (bindings--define-key menu-map [eval-sexp] '(menu-item "Evaluate Last S-expression" eval-last-sexp :help "Evaluate sexp before point; print value in echo area")) (bindings--define-key menu-map [separator-format] menu-bar-separator) (bindings--define-key menu-map [comment-region] '(menu-item "Comment Out Region" comment-region :help "Comment or uncomment each line in the region" :enable mark-active)) (bindings--define-key menu-map [indent-region] '(menu-item "Indent Region" indent-region :help "Indent each nonblank line in the region" :enable mark-active)) (bindings--define-key menu-map [indent-line] '(menu-item "Indent Line" lisp-indent-line)) map))
                nil [1520 8595])
            ("emacs-lisp-byte-compile" function
               (:documentation "Byte compile the file containing the current buffer."
                :user-visible-flag t)
                nil [8597 8826])
            ("emacs-lisp-byte-compile-and-load" function
               (:documentation "Byte-compile the current file (if it has changed), then load compiled code."
                :user-visible-flag t)
                nil [8828 9304])
            ("emacs-lisp-macroexpand" function
               (:documentation "Macroexpand the form after point.
Comments in the form will be lost."
                :user-visible-flag t)
                nil [9306 9808])
            ("emacs-lisp-mode-hook" variable (:documentation "Hook run when entering Emacs Lisp mode.") nil [9810 9988])
            ("define-derived-mode" code nil nil [10005 11229])
            ("elisp--font-lock-flush-elisp-buffers" function (:arguments ("file")) nil [11257 11858])
            ("elisp--local-variables-1" function
               (:documentation "Return the vars locally bound around the witness, or nil if not found."
                :arguments ("vars" "sexp"))
                nil [11895 13960])
            ("warning-minimum-log-level" variable nil nil [13962 13996])
            ("elisp--local-variables" function (:documentation "Return a list of locally let-bound variables at point.") nil [13998 15638])
            ("elisp--local-variables-completion-table" variable (:default-value (let ((lastpos nil) (lastvars nil)) (letrec ((hookfun (lambda nil (setq lastpos nil) (remove-hook 'post-command-hook hookfun)))) (completion-table-dynamic (lambda (_string) (save-excursion (skip-syntax-backward "_w") (let ((newpos (cons (point) (current-buffer)))) (unless (equal lastpos newpos) (add-hook 'post-command-hook hookfun) (setq lastpos newpos) (setq lastvars (mapcar #'symbol-name (elisp--local-variables)))))) lastvars))))) nil [15640 16613])
            ("elisp--expect-function-p" function
               (:documentation "Return non-nil if the symbol at point is expected to be a function."
                :arguments ("pos"))
                nil [16615 17307])
            ("elisp--form-quoted-p" function
               (:documentation "Return non-nil if the form at POS is not evaluated.
It can be quoted, or be inside a quoted form."
                :arguments ("pos"))
                nil [17309 18158])
            ("elisp--company-doc-buffer" function (:arguments ("str")) nil [18744 19471])
            ("elisp--company-doc-string" function (:arguments ("str")) nil [19473 19792])
            ("declare-function" code nil nil [19844 19902])
            ("declare-function" code nil nil [19903 19982])
            ("elisp--company-location" function (:arguments ("str")) nil [19984 20408])
            ("elisp-completion-at-point" function (:documentation "Function used for `completion-at-point-functions' in `emacs-lisp-mode'.
If the context at point allows only a certain category of
symbols (e.g. functions, or variables) then the returned
completions are restricted to that category.  In contexts where
any symbol is possible (following a quote, for example),
functions are annotated with \"<f>\" via the
`:annotation-function' property.") nil [20410 27124])
            ("lisp-completion-at-point" function (:arguments ("_predicate")) nil [27126 27267])
            ("declare-function" code nil nil [27287 27347])
            ("declare-function" code nil nil [27348 27402])
            ("declare-function" code nil nil [27403 27465])
            ("elisp--xref-backend" function nil nil [27467 27504])
            ("elisp--xref-format" variable (:default-value (let ((str "(%s %s)")) (put-text-property 1 3 'face 'font-lock-keyword-face str) (put-text-property 4 6 'face 'font-lock-function-name-face str) str)) nil [27639 27830])
            ("elisp--xref-format-extra" variable (:default-value (let ((str "(%s %s %s)")) (put-text-property 1 3 'face 'font-lock-keyword-face str) (put-text-property 4 6 'face 'font-lock-function-name-face str) str)) nil [27965 28165])
            ("find-feature-regexp" variable nil nil [28167 28195])
            ("elisp--xref-make-xref" function
               (:documentation "Return an xref for TYPE SYMBOL in FILE.
TYPE must be a type in `find-function-regexp-alist' (use nil for
'defun).  If SUMMARY is non-nil, use it for the summary;
otherwise build the summary from TYPE and SYMBOL."
                :arguments ("type" "symbol" "file" "summary"))
                nil [28215 28629])
            ("elisp-xref-find-def-functions" variable (:documentation "List of functions to be run from `elisp--xref-find-definitions' to add additional xrefs.
Called with one arg; the symbol whose definition is desired.
Each function should return a list of xrefs, or nil; the first
non-nil result supercedes the xrefs produced by
`elisp--xref-find-definitions'.") nil [28631 28970])
            ("cl-defmethod" code nil nil [28972 29377])
            ("elisp--xref-find-definitions" function (:arguments ("symbol")) nil [29379 37086])
            ("declare-function" code nil nil [37088 37139])
            ("cl-defmethod" code nil nil [37141 37384])
            ("elisp--xref-identifier-completion-table" variable (:default-value (apply-partially #'completion-table-with-predicate obarray (lambda (sym) (or (boundp sym) (fboundp sym) (featurep sym) (facep sym))) 'strict)) nil [37386 37731])
            ("cl-defmethod" code nil nil [37733 37855])
            ("cl-defstruct" code nil nil [37857 38035])
            ("cl-defmethod" code nil nil [38037 38400])
            ("cl-defmethod" code nil nil [38402 38493])
            ("elisp-load-path-roots" function nil nil [38495 38615])
            ("lisp-interaction-mode-map" variable
               (:documentation "Keymap for Lisp Interaction mode.
All commands in `lisp-mode-shared-map' are inherited by this map."
                :default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp-Interaction"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" 'eval-defun) (define-key map "" 'indent-pp-sexp) (define-key map "	" 'completion-at-point) (define-key map "
" 'eval-print-last-sexp) (bindings--define-key map [menu-bar lisp-interaction] (cons "Lisp-Interaction" menu-map)) (bindings--define-key menu-map [eval-defun] '(menu-item "Evaluate Defun" eval-defun :help "Evaluate the top-level form containing point, or after point")) (bindings--define-key menu-map [eval-print-last-sexp] '(menu-item "Evaluate and Print" eval-print-last-sexp :help "Evaluate sexp before point; print value into current buffer")) (bindings--define-key menu-map [edebug-defun-lisp-interaction] '(menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x")) (bindings--define-key menu-map [indent-pp-sexp] '(menu-item "Indent or Pretty-Print" indent-pp-sexp :help "Indent each line of the list starting just after point, or prettyprint it")) (bindings--define-key menu-map [complete-symbol] '(menu-item "Complete Lisp Symbol" completion-at-point :help "Perform completion on Lisp symbol preceding point")) map))
                nil [38645 40191])
            ("define-derived-mode" code nil nil [40193 40757])
            ("emacs-lisp-byte-code-comment-re" variable
               (:documentation "Regular expression matching a dynamic doc string comment."
                :constant-flag t
                :default-value (concat "\\(#\\)@\\([0-9]+\\) " "\\(?:[^(]\\|([^\"]\\)"))
                nil [40810 41064])
            ("elisp--byte-code-comment" function
               (:documentation "Try to syntactically mark the #@NNN ....^_ docstrings in byte-code files."
                :arguments ("end" "_point"))
                nil [41067 42335])
            ("elisp-byte-code-syntax-propertize" function (:arguments ("start" "end")) nil [42337 42605])
            ("add-to-list" code nil nil [42622 42690])
            ("define-derived-mode" code nil nil [42706 43022])
            ("eval-print-last-sexp" function
               (:documentation "Evaluate sexp before point; print value into current buffer.

Normally, this function truncates long output according to the value
of the variables `eval-expression-print-length' and
`eval-expression-print-level'.  With a prefix argument of zero,
however, there is no such truncation.  Such a prefix argument
also causes integers to be printed in several additional formats
(octal, hexadecimal, and character).

If `eval-expression-debug-on-error' is non-nil, which is the default,
this command arranges for all errors to enter the debugger."
                :user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [43064 43826])
            ("last-sexp-setup-props" function
               (:documentation "Set up text properties for the output of `elisp--eval-last-sexp'.
BEG and END are the start and end of the output in current-buffer.
VALUE is the Lisp value printed, ALT1 and ALT2 are strings for the
alternative printed representations that can be displayed."
                :arguments ("beg" "end" "value" "alt1" "alt2"))
                nil [43829 44621])
            ("elisp-last-sexp-toggle-display" function
               (:documentation "Toggle between abbreviated and unabbreviated printed representations."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [44624 45404])
            ("prin1-char" function
               (:documentation "Return a string representing CHAR as a character rather than as an integer.
If CHAR is not a character, return nil."
                :arguments ("char"))
                nil [45406 46574])
            ("elisp--preceding-sexp" function (:documentation "Return sexp before the point.") nil [46576 48813])
            ("define-obsolete-function-alias" code nil nil [48814 48892])
            ("elisp--eval-last-sexp" function
               (:documentation "Evaluate sexp before point; print value in the echo area.
If EVAL-LAST-SEXP-ARG-INTERNAL is non-nil, print output into
current buffer.  If EVAL-LAST-SEXP-ARG-INTERNAL is `0', print
output with no limit on the length and level of lists, and
include additional formats for integers (octal, hexadecimal, and
character)."
                :arguments ("eval-last-sexp-arg-internal"))
                nil [48894 49718])
            ("elisp--eval-last-sexp-print-value" function (:arguments ("value" "output" "no-truncate" "char-print-limit")) nil [49720 50662])
            ("elisp--eval-last-sexp-fake-value" variable (:default-value (make-symbol "t")) nil [50665 50724])
            ("eval-sexp-add-defvars" function
               (:documentation "Prepend EXP with all the `defvar's that precede it in the buffer.
POS specifies the starting position where EXP was found and defaults to point."
                :arguments ("exp" "pos"))
                nil [50726 51511])
            ("eval-last-sexp" function
               (:documentation "Evaluate sexp before point; print value in the echo area.
Interactively, with a non `-' prefix argument, print output into
current buffer.

Normally, this function truncates long output according to the
value of the variables `eval-expression-print-length' and
`eval-expression-print-level'.  With a prefix argument of zero,
however, there is no such truncation.
Integer values are printed in several formats (decimal, octal,
and hexadecimal).  When the prefix argument is -1 or the value
doesn't exceed `eval-expression-print-maximum-character', an
integer value is also printed as a character of that codepoint.

If `eval-expression-debug-on-error' is non-nil, which is the default,
this command arranges for all errors to enter the debugger."
                :user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [51513 52722])
            ("elisp--eval-defun-1" function
               (:documentation "Treat some expressions specially.
Reset the `defvar' and `defcustom' variables to the initial value.
(For `defcustom', use the :set function if there is one.)
Reinitialize the face according to the `defface' specification."
                :arguments ("form"))
                nil [52724 54673])
            ("elisp--eval-defun" function (:documentation "Evaluate defun that point is in or before.
The value is displayed in the echo area.
If the current defun is actually a call to `defvar',
then reset the variable using the initial value expression
even if the variable already has some other value.
(Normally `defvar' does not change the variable's value
if it already has a value.)

Return the result of evaluation.") nil [54675 56436])
            ("eval-defun" function
               (:documentation "Evaluate the top-level form containing point, or after point.

If the current defun is actually a call to `defvar' or `defcustom',
evaluating it this way resets the variable using its initial value
expression (using the defcustom's :set function if there is one), even
if the variable already has some other value.  (Normally `defvar' and
`defcustom' do not alter the value if there already is one.)  In an
analogous way, evaluating a `defface' overrides any customizations of
the face, so that it becomes defined exactly as the `defface' expression
says.

If `eval-expression-debug-on-error' is non-nil, which is the default,
this command arranges for all errors to enter the debugger.

With a prefix argument, instrument the code for Edebug.

If acting on a `defun' for FUNCTION, and the function was
instrumented, `Edebug: FUNCTION' is printed in the echo area.  If not
instrumented, just FUNCTION is printed.

If not acting on a `defun', the result of evaluation is displayed in
the echo area.  This display is controlled by the variables
`eval-expression-print-length' and `eval-expression-print-level',
which see."
                :user-visible-flag t
                :arguments ("edebug-it"))
                nil [56438 58055])
            ("elisp--eldoc-last-data" variable
               (:documentation "Bookkeeping; elements are as follows:
  0 - contains the last symbol read from the buffer.
  1 - contains the string last displayed in the echo area for variables,
      or argument string for functions.
  2 - `function' if function args, `variable' if variable documentation."
                :default-value (make-vector 3 nil))
                nil [58076 58408])
            ("elisp-eldoc-documentation-function" function (:documentation "`eldoc-documentation-function' (which see) for Emacs Lisp.") nil [58410 58932])
            ("elisp-get-fnsym-args-string" function
               (:documentation "Return a string containing the parameter list of the function SYM.
If SYM is a subr and no arglist is obtainable from the docstring
or elsewhere, return a 1-line docstring."
                :arguments ("sym" "index" "prefix"))
                nil [58934 60407])
            ("elisp--highlight-function-argument" function
               (:documentation "Highlight argument INDEX in ARGS list for function SYM.
In the absence of INDEX, just call `eldoc-docstring-format-sym-doc'."
                :arguments ("sym" "args" "index" "prefix"))
                nil [60409 65729])
            ("elisp-get-var-docstring" function (:arguments ("sym")) nil [65822 66391])
            ("elisp--last-data-store" function (:arguments ("symbol" "doc" "type")) nil [66393 66565])
            ("elisp--docstring-first-line" function (:arguments ("doc")) nil [66676 67147])
            ("elisp--fnsym-in-current-sexp" function nil nil [67212 67630])
            ("elisp--beginning-of-sexp" function nil nil [67740 68291])
            ("elisp--current-symbol" function nil nil [68351 68509])
            ("elisp-function-argstring" function
               (:documentation "Return ARGLIST as a string enclosed by ().
ARGLIST is either a string, or a list of strings or symbols."
                :arguments ("arglist"))
                nil [68511 68973])
            ("checkdoc-create-error-function" variable nil nil [69175 69214])
            ("checkdoc-autofix-flag" variable nil nil [69215 69245])
            ("checkdoc-generate-compile-warnings-flag" variable nil nil [69246 69294])
            ("checkdoc-diagnostic-buffer" variable nil nil [69295 69330])
            ("elisp-flymake-checkdoc" function
               (:documentation "A Flymake backend for `checkdoc'.
Calls REPORT-FN directly."
                :arguments ("report-fn" "_args"))
                nil [69347 70494])
            ("elisp-flymake--byte-compile-done" function (:arguments ("report-fn" "source-buffer" "output-buffer")) nil [70496 71770])
            ("defvar-local" code nil nil [71772 71890])
            ("elisp-flymake-byte-compile" function
               (:documentation "A Flymake backend for elisp byte compilation.
Spawn an Emacs process that byte-compiles a file representing the
current buffer state and calls REPORT-FN when done."
                :arguments ("report-fn" "_args"))
                nil [71907 74249])
            ("elisp-flymake--batch-compile-for-flymake" function
               (:documentation "Helper for `elisp-flymake-byte-compile'.
Runs in a batch-mode Emacs.  Interactively use variable
`buffer-file-name' for FILE."
                :user-visible-flag t
                :arguments ("file"))
                nil [74251 75294])
            ("elisp-mode" package nil nil [75296 75317]))          
      :file "elisp-mode.el.gz"
      :pointmax 75346
      :fsize 19775
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 41064 . 41065) (symbol 40791 . 40807) (open-paren 40790 . 40791) (close-paren 1094 . 1095) (symbol 1059 . 1076) (open-paren 1058 . 1059)))
    (semanticdb-table "semanticdb-table-1909f04"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dabbrev-case-fold-search" variable nil nil [1912 1945])
            ("gud-find-expr-function" variable nil nil [1946 1977])
            ("imenu-case-fold-search" variable nil nil [1978 2009])
            ("imenu-syntax-alist" variable nil nil [2010 2037])
            ("comment-region-function" variable nil nil [2038 2070])
            ("uncomment-region-function" variable nil nil [2071 2105])
            ("fortran" customgroup
               (:documentation "Major mode for editing fixed format Fortran code."
                :user-visible-flag t)
                nil [2107 2319])
            ("fortran-indent" customgroup
               (:documentation "Indentation variables in Fortran mode."
                :user-visible-flag t)
                nil [2321 2433])
            ("fortran-comment" customgroup
               (:documentation "Comment-handling variables in Fortran mode."
                :user-visible-flag t)
                nil [2435 2553])
            ("fortran-tab-mode-default" variable (:documentation "Default tabbing/carriage control style for empty files in Fortran mode.
A non-nil value specifies tab-digit style of continuation control.
A value of nil specifies that continuation lines are marked
with a character in column 6.") nil [2556 2891])
            ("fortran-tab-mode-string" variable
               (:documentation "String to appear in mode line in TAB format buffers.
See Info node `(emacs)ForIndent Cont'."
                :default-value (propertize "/t" 'help-echo "This buffer is in Fortran TAB mode" 'mouse-face 'mode-line-highlight 'local-map (make-mode-line-mouse-map 'mouse-1 (lambda nil (interactive) (describe-variable 'fortran-tab-mode-string)))))
                nil [2952 3564])
            ("fortran-do-indent" variable
               (:documentation "Extra indentation applied to DO blocks."
                :default-value 3)
                nil [3566 3703])
            ("fortran-if-indent" variable
               (:documentation "Extra indentation applied to IF, SELECT CASE and WHERE blocks."
                :default-value 3)
                nil [3705 3865])
            ("fortran-structure-indent" variable
               (:documentation "Extra indentation applied to STRUCTURE, UNION, MAP and INTERFACE blocks."
                :default-value 3)
                nil [3867 4044])
            ("fortran-continuation-indent" variable
               (:documentation "Extra indentation applied to continuation lines."
                :default-value 5)
                nil [4046 4202])
            ("fortran-comment-indent-style" variable
               (:documentation "How to indent comments.
nil forces comment lines not to be touched;
`fixed' indents to `fortran-comment-line-extra-indent' columns beyond
  `fortran-minimum-statement-indent-fixed' (if `indent-tabs-mode' nil), or
  `fortran-minimum-statement-indent-tab' (if `indent-tabs-mode' non-nil);
`relative' indents to current Fortran indentation plus
  `fortran-comment-line-extra-indent'."
                :default-value 'fixed)
                nil [4204 4800])
            ("fortran-comment-line-extra-indent" variable (:documentation "Amount of extra indentation for text within full-line comments.") nil [4802 5005])
            ("fortran-comment-line-start" variable
               (:documentation "Delimiter inserted to start new full-line comment.
You might want to change this to \"*\", for instance; or \"!\" to
allow trailing comments on a line."
                :default-value "C")
                nil [5007 5290])
            ("fortran-comment-line-start-skip" variable
               (:documentation "Regexp to match the start of a full-line comment."
                :default-value "^[CcDd*!]\\(\\([^ 	
]\\)\\2+\\)?[ 	]*")
                nil [5402 5629])
            ("fortran-directive-re" variable
               (:documentation "Regexp to match a directive line.
The matching text will be fontified with `font-lock-preprocessor-face'.
The matching line will be given zero indentation."
                :default-value "^[ 	]*#.*")
                nil [5631 5922])
            ("fortran-minimum-statement-indent-fixed" variable
               (:documentation "Minimum statement indentation for fixed format continuation style."
                :default-value 6)
                nil [5924 6109])
            ("fortran-minimum-statement-indent-tab" variable
               (:documentation "Minimum statement indentation for TAB format continuation style."
                :default-value (max tab-width 6))
                nil [6111 6308])
            ("fortran-comment-indent-char" variable
               (:documentation "Single-character string inserted for Fortran comment indentation.
Normally a space."
                :default-value " ")
                nil [6494 6790])
            ("fortran-line-number-indent" variable
               (:documentation "Maximum indentation for Fortran line numbers.
5 means right-justify them within their five-column field."
                :default-value 1)
                nil [6792 7003])
            ("fortran-check-all-num-for-matching-do" variable (:documentation "Non-nil causes all numbered lines to be treated as possible DO loop ends.") nil [7005 7191])
            ("fortran-blink-matching-if" variable (:documentation "Non-nil causes \\[fortran-indent-line] on ENDIF to blink on matching IF.
Also, from an ENDDO statement blink on matching DO [WHILE] statement.") nil [7193 7436])
            ("fortran-continuation-string" variable
               (:documentation "Single-character string used for Fortran continuation lines.
In fixed format continuation style, this character is inserted in
column 6 by \\[fortran-split-line] to begin a continuation line.
Also, if \\[fortran-indent-line] finds this at the beginning of a
line, it will convert the line into a continuation line of the
appropriate style.  Normally \"$\"."
                :default-value "$")
                nil [7438 7946])
            ("fortran-comment-region" variable
               (:documentation "String inserted by \\[fortran-comment-region] at start of each line in region."
                :default-value "c$$$")
                nil [7948 8135])
            ("fortran-electric-line-number" variable
               (:documentation "Non-nil causes line numbers to be moved to the correct column as typed."
                :default-value t)
                nil [8137 8310])
            ("fortran-column-ruler-fixed" variable
               (:documentation "String displayed above current line by \\[fortran-column-ruler].
This variable is used in fixed format mode.
See the variable `fortran-column-ruler-tab' for TAB format mode."
                :default-value "0   4 6  10        20        30        40        50        60        70
[   ]|{   |    |    |    |    |    |    |    |    |    |    |    |    |}
")
                nil [8354 8781])
            ("fortran-column-ruler-tab" variable
               (:documentation "String displayed above current line by \\[fortran-column-ruler].
This variable is used in TAB format mode.
See the variable `fortran-column-ruler-fixed' for fixed format mode."
                :default-value "0       810        20        30        40        50        60        70
[   ]|  { |    |    |    |    |    |    |    |    |    |    |    |    |}
")
                nil [8825 9252])
            ("fortran-analyze-depth" variable
               (:documentation "Number of lines to scan to identify fixed or TAB format style."
                :default-value 100)
                nil [9254 9413])
            ("fortran-break-before-delimiters" variable
               (:documentation "Non-nil causes filling to break lines before delimiters.
Delimiters are characters matching the regexp `fortran-break-delimiters-re'."
                :default-value t)
                nil [9415 9653])
            ("fortran-line-length" variable
               (:documentation "Maximum number of characters in a line of fixed-form Fortran code.
Characters beyond this point are treated as comments.  Setting
this variable directly (after fortran mode is loaded) does not
take effect.  Use either \\[customize] (which affects all Fortran
buffers and the default) or the function
`fortran-line-length' (which can also operate on just the current
buffer).  This corresponds to the g77 compiler option
`-ffixed-line-length-N'."
                :default-value 72)
                nil [9690 10409])
            ("make-variable-buffer-local" code nil nil [10411 10460])
            ("fortran-mode-hook" variable (:documentation "Hook run when entering Fortran mode.") nil [10462 10569])
            ("fortran-break-delimiters-re" variable
               (:documentation "Regexp matching delimiter characters at which lines may be broken.
There are certain tokens comprised entirely of characters
matching this regexp that should not be split, and these are
specified by the constant `fortran-no-break-re'."
                :constant-flag t
                :default-value "[-+*/><=, 	]")
                nil [10573 10866])
            ("fortran-no-break-re" variable
               (:documentation "Regexp specifying where not to break lines when filling.
This regexp matches certain tokens comprised entirely of
characters matching the regexp `fortran-break-delimiters-re' that should
not be split by filling.  Each element is assumed to be two
characters long."
                :constant-flag t
                :default-value (regexp-opt '("**" "//" "=>" ">=" "<=" "==" "/=") 'paren))
                nil [10922 11280])
            ("fortran-if-start-re" variable
               (:documentation "Regexp matching the start of an IF statement."
                :constant-flag t
                :default-value "\\(\\(\\sw\\|\\s_\\)+:[ 	]*\\)?if[ 	]*(")
                nil [11282 11406])
            ("fortran-start-prog-re" variable
               (:documentation "Regexp matching the start of a subprogram, from the line start."
                :constant-flag t
                :default-value "^[ 	]*\\(program\\|subroutine\\|function\\|[ 	a-z0-9*()]*[ 	]+function\\|\\(block[ 	]*data\\)\\)")
                nil [11458 11667])
            ("fortran-end-prog-re1" variable
               (:documentation "Regexp possibly matching the end of a subprogram."
                :constant-flag t
                :default-value "end\\([ 	]*\\(program\\|subroutine\\|function\\|block[ 	]*data\\)\\>\\([ 	]*\\(\\sw\\|\\s_\\)+\\)?\\)?")
                nil [11669 11868])
            ("fortran-end-prog-re" variable
               (:documentation "Regexp possibly matching the end of a subprogram, from the line start.
See also `fortran-end-prog-re1'."
                :constant-flag t
                :default-value (concat "^[ 	0-9]*" fortran-end-prog-re1))
                nil [11870 12053])
            ("fortran-type-types" variable
               (:documentation "Regexp matching Fortran types."
                :constant-flag t
                :default-value (concat "\\<" (mapconcat 'identity (split-string (regexp-opt (let ((simple-types '("character" "byte" "integer" "logical" "none" "real" "complex" "double precision" "double complex")) (structured-types '("structure" "union" "map")) (other-types '("record" "dimension" "parameter" "common" "save" "external" "intrinsic" "data" "equivalence"))) (append (mapcar (lambda (x) (concat "implicit " x)) simple-types) simple-types (mapcar (lambda (x) (concat "end " x)) structured-types) structured-types other-types)) 'paren)) "[ 	]*") "\\>"))
                nil [12055 13288])
            ("fortran-font-lock-keywords-1" variable
               (:documentation "Subdued level highlighting for Fortran mode."
                :default-value '(("\\<\\(block[ 	]*data\\|call\\|entry\\|function\\|program\\|subroutine\\)\\>[ 	]*\\(\\sw+\\)?" (1 font-lock-keyword-face) (2 font-lock-function-name-face nil t))))
                nil [13290 13622])
            ("fortran-font-lock-keywords-2" variable
               (:documentation "Medium level highlighting for Fortran mode."
                :default-value (append fortran-font-lock-keywords-1 (list (cons fortran-type-types 'font-lock-type-face) (concat "\\<" (regexp-opt '("continue" "format" "end" "enddo" "if" "then" "else" "endif" "elseif" "while" "inquire" "stop" "return" "include" "open" "close" "read" "write" "format" "print" "select" "case" "cycle" "exit" "rewind" "backspace" "where" "elsewhere") 'paren) "\\>") (concat "\\." (regexp-opt '("and" "eq" "eqv" "false" "ge" "gt" "le" "lt" "ne" "neqv" "not" "or" "true") 'paren) "\\.") '("\\<\\(do\\|go *to\\)\\>[ 	]*\\([0-9]+\\)?" (1 font-lock-keyword-face) (2 font-lock-constant-face nil t)) '("^ *\\([0-9]+\\)" . font-lock-constant-face))))
                nil [13624 14983])
            ("fortran-match-and-skip-declaration" function
               (:documentation "Like `font-lock-match-c-style-declaration-item-and-skip-to-next'.
The only difference is, it returns t in a case when the default returns nil."
                :arguments ("limit"))
                nil [15049 15933])
            ("fortran-font-lock-keywords-3" variable
               (:documentation "Gaudy level highlighting for Fortran mode."
                :default-value (append fortran-font-lock-keywords-1 (list (list (concat fortran-type-types "[ 	(/]*\\(*\\)?") '(1 font-lock-type-face) `(fortran-match-and-skip-declaration (condition-case nil (and (match-beginning ,(1+ (regexp-opt-depth fortran-type-types))) (forward-sexp) (forward-sexp)) (error nil)) nil (1 font-lock-variable-name-face nil t)))) (list '(", *\\(e\\(nd\\|rr\\)\\)\\> *\\(= *\\([0-9]+\\)\\)?" (1 font-lock-keyword-face) (4 font-lock-constant-face nil t)) '("^ \\{5\\}\\([^ 0
]\\)" 1 font-lock-string-face) '("^	\\([1-9]\\)" 1 font-lock-string-face)) `((,fortran-directive-re (0 font-lock-preprocessor-face t))) (cdr (nthcdr (length fortran-font-lock-keywords-1) fortran-font-lock-keywords-2))))
                nil [15935 17527])
            ("fortran-font-lock-keywords-4" variable
               (:documentation "Maximum highlighting for Fortran mode.
Consists of level 3 plus all other intrinsics not already highlighted."
                :default-value (append fortran-font-lock-keywords-3 (list (list (concat "\\<" (regexp-opt '("int" "ifix" "idint" "real" "float" "sngl" "dble" "cmplx" "ichar" "char" "aint" "dint" "anint" "dnint" "nint" "idnint" "iabs" "abs" "dabs" "cabs" "mod" "amod" "dmod" "isign" "sign" "dsign" "idim" "dim" "ddim" "dprod" "max" "max0" "amax1" "dmax1" "amax0" "max1" "min" "min0" "amin1" "dmin1" "amin0" "min1" "len" "index" "lge" "lgt" "lle" "llt" "aimag" "conjg" "sqrt" "dsqrt" "csqrt" "exp" "dexp" "cexp" "log" "alog" "dlog" "clog" "log10" "alog10" "dlog10" "sin" "dsin" "csin" "cos" "dcos" "ccos" "tan" "dtan" "asin" "dasin" "acos" "dacos" "atan" "datan" "atan2" "datan2" "sinh" "dsinh" "cosh" "dcosh" "tanh" "dtanh") 'paren) "[ 	]*(") '(1 font-lock-builtin-face)))))
                nil [17529 18893])
            ("fortran-make-syntax-propertize-function" function
               (:documentation "Return a value for `syntax-propertize-function' in Fortran mode.
This varies according to the value of LINE-LENGTH.
This is used to fontify fixed-format Fortran comments."
                :arguments ("line-length"))
                nil [19213 20136])
            ("fortran-font-lock-keywords" variable
               (:documentation "Default expressions to highlight in Fortran mode."
                :default-value fortran-font-lock-keywords-1)
                nil [20138 20256])
            ("fortran-imenu-generic-expression" variable
               (:documentation "Value for `imenu-generic-expression' in Fortran mode."
                :default-value (list (list nil (concat "^\\s-+\\(" "\\(\\sw\\|\\s-\\|[*()+]\\)*" "\\<function\\|subroutine\\|entry\\|block\\s-*data\\|program\\)" "[ 	" fortran-continuation-string "]+" "\\(\\sw+\\)") 3) '(nil "^\\s-+\\(block\\s-*data\\)\\s-*$" 1)))
                nil [20258 21108])
            ("fortran-blocks-re" variable
               (:documentation "Regexp potentially indicating the start or end of a Fortran \"block\".
Omits naked END statements, and DO-loops closed by anything other
than ENDDO."
                :constant-flag t
                :default-value (concat "block[ 	]*data\\|select[ 	]*case\\|" (regexp-opt '("do" "if" "interface" "function" "map" "program" "structure" "subroutine" "union" "where"))))
                nil [21133 21505])
            ("fortran-end-block-re" variable
               (:documentation "Regexp matching the end of a Fortran \"block\", from the line start.
Note that only ENDDO is handled for the end of a DO-loop.  Used
in the Fortran entry in `hs-special-modes-alist'."
                :constant-flag t
                :default-value (concat "^[ 	0-9]*\\<end[ 	]*\\(" fortran-blocks-re "\\|!\\|$\\)"))
                nil [21507 21993])
            ("fortran-start-block-re" variable
               (:documentation "Regexp matching the start of a Fortran \"block\", from the line start.
A simple regexp cannot do this in fully correct fashion, so this
tries to strike a compromise between complexity and flexibility.
Used in the Fortran entry in `hs-special-modes-alist'."
                :constant-flag t
                :default-value (concat "^[ 	0-9]*\\(" "\\(\\(\\sw+[ 	]*:[ 	]*\\)?" "\\(if[ 	]*(\\(.*\\|" ".*
\\([^if]*\\([^i].\\|.[^f]\\|.\\>\\)\\)\\)\\<then\\|" "do\\|select[ 	]*case\\|where\\)\\)\\|" (regexp-opt '("interface" "function" "map" "program" "structure" "subroutine" "union")) "\\|block[ 	]*data\\)[ 	]*"))
                nil [21995 23608])
            ("add-to-list" code nil nil [23610 23785])
            ("fortran-mode-syntax-table" variable
               (:documentation "Syntax table used in Fortran mode."
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 59 "." table) (modify-syntax-entry 13 " " table) (modify-syntax-entry 43 "." table) (modify-syntax-entry 45 "." table) (modify-syntax-entry 61 "." table) (modify-syntax-entry 42 "." table) (modify-syntax-entry 47 "." table) (modify-syntax-entry 37 "." table) (modify-syntax-entry 39 "\"" table) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 92 "\\" table) (modify-syntax-entry 46 "_" table) (modify-syntax-entry 95 "_" table) (modify-syntax-entry 36 "_" table) (modify-syntax-entry 33 "<" table) (modify-syntax-entry 10 ">" table) table))
                nil [23789 24947])
            ("fortran-gud-syntax-table" variable
               (:documentation "Syntax table used to parse Fortran expressions for printing in GUD."
                :default-value (let ((st (make-syntax-table fortran-mode-syntax-table))) (modify-syntax-entry 10 "." st) st))
                nil [24949 25159])
            ("fortran-mode-map" variable
               (:documentation "Keymap used in Fortran mode."
                :default-value (let ((map (make-sparse-keymap))) (define-key map ";" 'fortran-abbrev-start) (define-key map ";" 'fortran-comment-region) (define-key map "\212" 'fortran-split-line) (define-key map "\216" 'fortran-end-of-block) (define-key map "\220" 'fortran-beginning-of-block) (define-key map "\221" 'fortran-indent-subprogram) (define-key map "" 'fortran-window-create-momentarily) (define-key map "" 'fortran-column-ruler) (define-key map "" 'fortran-previous-statement) (define-key map "" 'fortran-next-statement) (define-key map "" 'fortran-join-line) (define-key map "\336" 'fortran-join-line) (define-key map "0" 'fortran-electric-line-number) (define-key map "1" 'fortran-electric-line-number) (define-key map "2" 'fortran-electric-line-number) (define-key map "3" 'fortran-electric-line-number) (define-key map "4" 'fortran-electric-line-number) (define-key map "5" 'fortran-electric-line-number) (define-key map "6" 'fortran-electric-line-number) (define-key map "7" 'fortran-electric-line-number) (define-key map "8" 'fortran-electric-line-number) (define-key map "9" 'fortran-electric-line-number) (easy-menu-define fortran-menu map "Menu for Fortran mode." `("Fortran" ["Manual" (info "(emacs)Fortran") :active t :help "Read the Emacs manual chapter on Fortran mode"] ("Customization" ,(custom-menu-create 'fortran) ["Set" Custom-set :active t :help "Set current value of all edited settings in the buffer"] ["Save" Custom-save :active t :help "Set and save all edited settings"] ["Reset to Current" Custom-reset-current :active t :help "Reset all edited settings to current"] ["Reset to Saved" Custom-reset-saved :active t :help "Reset all edited or set settings to saved"] ["Reset to Standard Settings" Custom-reset-standard :active t :help "Erase all customizations in buffer"]) "--" ["Comment Region" fortran-comment-region mark-active] ["Uncomment Region" (fortran-comment-region (region-beginning) (region-end) 1) mark-active] ["Indent Region" indent-region mark-active] ["Indent Subprogram" fortran-indent-subprogram t] "--" ["Beginning of Subprogram" fortran-beginning-of-subprogram :active t :help "Move point to the start of the current subprogram"] ["End of Subprogram" fortran-end-of-subprogram :active t :help "Move point to the end of the current subprogram"] ("Mark" :help "Mark a region of code" ["Subprogram" mark-defun t] ["IF Block" fortran-mark-if t] ["DO Block" fortran-mark-do t]) ["Narrow to Subprogram" narrow-to-defun t] ["Widen" widen t] "--" ["Temporary Column Ruler" fortran-column-ruler :active t :help "Briefly display Fortran column numbers"] ["72-column Window" fortran-window-create :active t :help "Set window width to Fortran line length"] ["Full Width Window" (enlarge-window-horizontally (- (frame-width) (window-width))) :active (not (window-full-width-p)) :help "Make window full width"] ["Momentary 72-Column Window" fortran-window-create-momentarily :active t :help "Briefly set window width to Fortran line length"] "--" ["Break Line at Point" fortran-split-line :active t :help "Break the current line at point"] ["Join Line" fortran-join-line :active t :help "Join the current line to the previous one"] ["Fill Statement/Comment" fill-paragraph t] "--" ["Toggle Auto Fill" auto-fill-mode :selected auto-fill-function :style toggle :help "Automatically fill text while typing in this buffer"] ["Toggle Abbrev Mode" abbrev-mode :selected abbrev-mode :style toggle :help "Expand abbreviations while typing in this buffer"] ["Add Imenu Menu" imenu-add-menubar-index :active (not (lookup-key (current-local-map) [menu-bar index])) :included (fboundp 'imenu-add-to-menubar) :help "Add an index menu to the menu-bar"])) map))
                nil [25161 29911])
            ("define-abbrev-table" code nil nil [29915 32823])
            ("define-derived-mode" code nil nil [32842 38961])
            ("fortran-line-length" function
               (:documentation "Set the length of fixed-form Fortran lines to NCHARS.
By default this only affects the current buffer, which must be in
Fortran mode.  If the optional argument GLOBAL is non-nil, it affects
all Fortran buffers, and also the default.  The default value of NCHARS
is the current column.  A numeric prefix argument specifies a value to
use instead of the current column.  A non-numeric prefix argument prompts
for the value to use."
                :user-visible-flag t
                :arguments ("nchars" "global"))
                nil [38965 40281])
            ("fortran-hack-local-variables" function (:documentation "Fortran mode adds this to `hack-local-variables-hook'.") nil [40283 40425])
            ("declare-function" code nil nil [40427 40474])
            ("fortran-gud-find-expr" function nil nil [40476 40630])
            ("fortran-comment-indent" function (:documentation "Return the indentation appropriate for the current comment line.
This is 0 for a line matching `fortran-comment-line-start-skip', else
the value of `comment-column' (leaving at least one space after code).") nil [40632 41036])
            ("fortran-indent-comment" function
               (:documentation "Align or create comment on current line.
Existing comments of all types are recognized and aligned.
If the line has no comment, a side-by-side comment is inserted and aligned,
if the value of `comment-start' is not nil and allows such comments.
Otherwise, a separate-line comment is inserted, on this line
or on a new line inserted before this line if this line is not blank."
                :user-visible-flag t)
                nil [41038 42785])
            ("fortran-comment-region" function
               (:documentation "Comment every line in the region.
Inserts the string variable `fortran-comment-region' at the beginning of
every line in the region.
BEG-REGION and END-REGION specify the region boundaries.
With non-nil ARG, uncomments the region."
                :user-visible-flag t
                :arguments ("beg-region" "end-region" "arg"))
                nil [42787 43877])
            ("fortran-uncomment-region" function
               (:documentation "Uncomment every line in the region."
                :arguments ("start" "end" "ignored"))
                nil [43923 44064])
            ("fortran-abbrev-start" function
               (:documentation "Typing ;\\[help-command] or ;? lists all the Fortran abbrevs.
Any other key combination is executed normally."
                :user-visible-flag t)
                nil [44068 44556])
            ("fortran-abbrev-help" function
               (:documentation "List the currently defined abbrevs in Fortran mode."
                :user-visible-flag t)
                nil [44558 44796])
            ("fortran-prepare-abbrev-list-buffer" function (:documentation "Create a buffer listing the Fortran mode abbreviations.") nil [44798 45163])
            ("fortran-column-ruler" function
               (:documentation "Insert a column ruler momentarily above current line, till next keystroke.
The ruler is defined by the value of `fortran-column-ruler-fixed' in fixed
format mode, and `fortran-column-ruler-tab' in TAB format mode.
The next key typed is executed unless it is SPC."
                :user-visible-flag t)
                nil [45165 45788])
            ("fortran-window-create" function
               (:documentation "Make the window `fortran-line-length' (default 72) columns wide.
See also `fortran-window-create-momentarily'."
                :user-visible-flag t)
                nil [45790 46504])
            ("fortran-window-create-momentarily" function
               (:documentation "Momentarily make the window `fortran-line-length' (default 72) columns wide.
Optional ARG non-nil and non-unity disables the momentary feature.
See also `fortran-window-create'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [46506 47181])
            ("fortran-split-line" function
               (:documentation "Break line at point and insert continuation marker and alignment."
                :user-visible-flag t)
                nil [47183 47737])
            ("fortran-remove-continuation" function (:documentation "Delete any Fortran continuation characters at point.
Returns t if anything actually deleted.") nil [47785 48034])
            ("fortran-join-line" function
               (:documentation "Join current line to the previous one and re-indent.
With a prefix argument, repeat this operation that many times.
If the prefix argument ARG is negative, join the next -ARG lines.
Continuation lines are correctly handled."
                :user-visible-flag t
                :arguments ("arg"))
                nil [48036 48586])
            ("fortran-numerical-continuation-char" function (:documentation "Return a digit for tab-digit style of continuation lines.
If previous line is a tab-digit continuation line, return that digit
plus one, otherwise return 1.  Zero not allowed.") nil [48588 48950])
            ("put" code nil nil [48952 49007])
            ("fortran-electric-line-number" function
               (:documentation "Self insert, but if part of a Fortran line number indent it automatically.
Auto-indent does not happen if a numeric ARG is used."
                :user-visible-flag t
                :arguments ("arg"))
                nil [49008 50465])
            ("fortran-check-end-prog-re" function (:documentation "Check a preliminary match against `fortran-end-prog-re'.") nil [50469 51007])
            ("fortran-beginning-of-subprogram" function
               (:documentation "Move point to the beginning of the current Fortran subprogram."
                :user-visible-flag t)
                nil [51554 52586])
            ("fortran-end-of-subprogram" function
               (:documentation "Move point to the end of the current Fortran subprogram."
                :user-visible-flag t)
                nil [52683 53016])
            ("fortran-previous-statement" function
               (:documentation "Move point to beginning of the previous Fortran statement.
Returns `first-statement' if that statement is the first
non-comment Fortran statement in the file, and nil otherwise.
Directive lines are treated as comments."
                :user-visible-flag t)
                nil [53018 54443])
            ("fortran-next-statement" function
               (:documentation "Move point to beginning of the next Fortran statement.
Returns `last-statement' if that statement is the last
non-comment Fortran statement in the file, and nil otherwise.
Directive lines are treated as comments."
                :user-visible-flag t)
                nil [54445 55217])
            ("fortran-looking-at-if-then" function (:documentation "Return non-nil if at the start of a line with an IF ... THEN statement.") nil [55219 55523])
            ("fortran-end-of-block" function
               (:documentation "Move point forward to the end of the current code block.
With optional argument NUM, go forward that many balanced blocks.
If NUM is negative, go backward to the start of a block.  Does
not check for consistency of block types.  Interactively, pushes
mark before moving point."
                :user-visible-flag t
                :arguments ("num"))
                nil [55560 57032])
            ("fortran-beginning-of-block" function
               (:documentation "Move point backwards to the start of the current code block.
With optional argument NUM, go backward that many balanced
blocks.  If NUM is negative, go forward to the end of a block.
Does not check for consistency of block types.  Interactively,
pushes mark before moving point."
                :user-visible-flag t
                :arguments ("num"))
                nil [57034 58545])
            ("fortran-blink-match" function
               (:documentation "From a line matching REGEX, blink matching KEYWORD statement line.
Use function FIND-BEGIN to match it."
                :arguments ("regex" "keyword" "find-begin"))
                nil [58549 59568])
            ("fortran-blink-matching-if" function (:documentation "From an ENDIF or ELSE statement, blink the matching IF statement.") nil [59570 59795])
            ("fortran-blink-matching-do" function (:documentation "From an ENDDO statement, blink the matching DO or DO WHILE statement.") nil [59797 59976])
            ("fortran-mark-do" function
               (:documentation "Put mark at end of Fortran DO [WHILE]-ENDDO construct, point at beginning.
The marks are pushed."
                :user-visible-flag t)
                nil [59978 60382])
            ("fortran-end-do" function (:documentation "Search forward for first unmatched ENDDO.
Return point or nil.") nil [60384 61463])
            ("fortran-beginning-do" function (:documentation "Search backwards for first unmatched DO [WHILE].
Return point or nil.  Ignores labeled DO loops (ie DO 10 ... 10 CONTINUE).") nil [61465 62664])
            ("fortran-mark-if" function
               (:documentation "Put mark at end of Fortran IF-ENDIF construct, point at beginning.
The marks are pushed."
                :user-visible-flag t)
                nil [62666 63097])
            ("fortran-end-if" function (:documentation "Search forwards for first unmatched ENDIF.
Return point or nil.") nil [63099 64975])
            ("fortran-beginning-if" function (:documentation "Search backwards for first unmatched IF-THEN.
Return point or nil.") nil [64977 67815])
            ("fortran-indent-line" function
               (:documentation "Indent current Fortran line based on its contents and on previous lines."
                :user-visible-flag t)
                nil [67819 68794])
            ("fortran-auto-fill" function (:documentation "Function to use for `normal-auto-fill-function' in Fortran mode.") nil [68796 69612])
            ("defalias" code nil nil [69754 69823])
            ("fortran-indent-subprogram" function
               (:documentation "Properly indent the Fortran subprogram containing point."
                :user-visible-flag t)
                nil [69825 70100])
            ("fortran-calculate-indent" function (:documentation "Calculates the Fortran indent column based on previous lines.") nil [70102 76280])
            ("fortran-current-line-indentation" function (:documentation "Indentation of current line, ignoring Fortran line number or continuation.
This is the column position of the first non-whitespace character
aside from the line number and/or column 5/8 line-continuation character.
For comment lines, returns indentation of the first
non-indentation text within the comment.") nil [76284 77237])
            ("fortran-indent-to-column" function
               (:documentation "Indent current line to column COL.
notes: 1) A non-zero/non-blank character in column 5 indicates a continuation
          line, and this continuation character is retained on indentation;
       2) If `fortran-continuation-string' is the first non-whitespace
          character, this is a continuation line;
       3) A non-continuation line which has a number as the first
          non-whitespace character is a numbered line.
       4) A TAB followed by a digit indicates a continuation line."
                :arguments ("col"))
                nil [77239 80382])
            ("fortran-line-number-indented-correctly-p" function (:documentation "Return t if current line's line number is correctly indented.
Do not call if there is no line number.") nil [80384 80827])
            ("fortran-check-for-matching-do" function (:documentation "When called from a numbered statement, return t if matching DO is found.
Otherwise return nil.") nil [80829 81846])
            ("fortran-find-comment-start-skip" function
               (:documentation "Move to past `comment-start-skip' found on current line.
Return non-nil if `comment-start-skip' found, nil if not.
If ALL is nil, only match comments that start in column > 0."
                :arguments ("all"))
                nil [81848 82888])
            ("fortran-is-in-string-p" function
               (:documentation "Return non-nil if WHERE (a buffer position) is inside a Fortran string."
                :arguments ("where"))
                nil [82981 85675])
            ("defalias" code nil nil [85698 85748])
            ("fortran-fill" function (:documentation "Fill the current line at an appropriate point(s).") nil [85750 90120])
            ("fortran-break-line" function (:documentation "Call `fortran-split-line'.  Joins continuation lines first, then refills.") nil [90122 91034])
            ("fortran-analyze-file-format" function (:documentation "Return nil if fixed format is used, t if TAB formatting is used.
Use `fortran-tab-mode-default' if no non-comment statements are found
before the end or in the first `fortran-analyze-depth' lines.") nil [91036 91690])
            ("fortran-fill-paragraph" function
               (:documentation "Fill surrounding comment block as paragraphs, else fill statement.
Intended as the value of `fill-paragraph-function'.
A comment block is filled by calling `fill-comment-paragraph' with
argument JUSTIFY, otherwise `fortran-fill-statement' is called.
Always returns non-nil (to prevent `fill-paragraph' being called)."
                :user-visible-flag t
                :arguments ("justify"))
                nil [91692 92163])
            ("fortran-fill-statement" function
               (:documentation "Fill a Fortran statement up to `fill-column'."
                :user-visible-flag t)
                nil [92165 93063])
            ("fortran-strip-sequence-nos" function
               (:documentation "Delete all text in column `fortran-line-length' (default 72) and up.
This is assumed to be sequence numbers.  Normally also deletes
trailing whitespace after stripping such text.  Supplying prefix
arg DO-SPACE prevents stripping the whitespace."
                :user-visible-flag t
                :arguments ("do-space"))
                nil [93065 93644])
            ("fortran-current-defun" function (:documentation "Function to use for `add-log-current-defun-function' in Fortran mode.") nil [93722 94717])
            ("fortran" package nil nil [94719 94737]))          
      :file "fortran.el.gz"
      :pointmax 94764
      :fsize 22212
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1909f24"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1214 1429])
            ("cc-require" code nil nil [1432 1453])
            ("cc-eval-when-compile" code nil nil [1455 1517])
            ("when" code nil nil [1760 2004])
            ("c-constant-symbol" function
               (:documentation "Create an uneditable symbol for customization buffers.
SYM is the name of the symbol, LEN the length of the field (in
characters) the symbol will be displayed in.  LEN must be big
enough.

This returns a (const ....) structure, suitable for embedding
within a customization type."
                :arguments ("sym" "len"))
                nil [2075 2648])
            ("define-widget" code nil nil [2651 3271])
            ("define-widget" code nil nil [3273 3453])
            ("define-widget" code nil nil [3455 4360])
            ("c-style-variables" variable
               (:documentation "List of the style variables."
                :default-value '(c-basic-offset c-comment-only-line-offset c-indent-comment-alist c-indent-comments-syntactically-p c-block-comment-prefix c-comment-prefix-regexp c-doc-comment-style c-cleanup-list c-hanging-braces-alist c-hanging-colons-alist c-hanging-semi&comma-criteria c-backslash-column c-backslash-max-column c-special-indent-hook c-label-minimum-indentation c-offsets-alist))
                nil [4362 4811])
            ("c-fallback-style" variable nil nil [4813 4842])
            ("c-set-stylevar-fallback" function (:arguments ("name" "val")) nil [4844 4993])
            ("defcustom-c-stylevar" function
               (:documentation "Define a style variable NAME with VAL and DOC.
More precisely, convert the given `:type FOO', mined out of ARGS,
to an aggregate `:type (radio STYLE (PREAMBLE FOO))', append
some boilerplate documentation to DOC, arrange for the fallback
value of NAME to be VAL, and call `custom-declare-variable' to
do the rest of the work.

STYLE stands for the choice where the value is taken from some
style setting.  PREAMBLE is optionally prepended to FOO; that is,
if FOO contains :tag or :value, the respective two-element list
component is ignored."
                :arguments ("name" "val" "doc" "args"))
                nil [4995 6810])
            ("c-valid-offset" function
               (:documentation "Return non-nil if OFFSET is a valid offset for a syntactic symbol.
See `c-offsets-alist'."
                :arguments ("offset"))
                nil [6812 7558])
            ("c-string-list-p" function
               (:documentation "Return non-nil if VAL is a list of strings."
                :arguments ("val"))
                nil [7560 7766])
            ("c-string-or-string-list-p" function
               (:documentation "Return non-nil if VAL is a string or a list of strings."
                :arguments ("val"))
                nil [7768 7916])
            ("c-strict-syntax-p" variable (:documentation "If non-nil, all syntactic symbols must be found in `c-offsets-alist'.
If the syntactic symbol for a particular line does not match a symbol
in the offsets alist, or if no non-nil offset value can be determined
for a symbol, an error is generated, otherwise no error is reported
and the syntactic symbol is ignored.

This variable is considered obsolete; it doesn't work well with lineup
functions that return nil to support the feature of using lists on
syntactic symbols in `c-offsets-alist'.  Please keep it set to nil.") nil [7939 8527])
            ("c-echo-syntactic-information-p" variable (:documentation "If non-nil, syntactic info is echoed when the line is indented.") nil [8529 8672])
            ("c-report-syntactic-errors" variable (:documentation "If non-nil, certain syntactic errors are reported with a ding
and a message, for example when an \"else\" is indented for which
there's no corresponding \"if\".

Note however that CC Mode doesn't make any special effort to check for
syntactic errors; that's the job of the compiler.  The reason it can
report cases like the one above is that it can't find the correct
anchoring position to indent the line in that case.") nil [8674 9168])
            ("defcustom-c-stylevar" code nil nil [9170 9384])
            ("c-tab-always-indent" variable
               (:documentation "Controls the operation of the TAB key.
If t, hitting TAB always just indents the current line.  If nil, hitting
TAB indents the current line if point is at the left margin or in the
line's indentation, otherwise it inserts a `real' tab character (see
note).  If some other value (not nil or t), then tab is inserted only
within literals (comments and strings), but the line is always
reindented.

Note: The value of `indent-tabs-mode' will determine whether a real
tab character will be inserted, or the equivalent number of spaces.
When inserting a tab, actually the function stored in the variable
`c-insert-tab-function' is called.

Note: indentation of lines containing only comments is also controlled
by the `c-comment-only-line-offset' variable."
                :default-value t)
                nil [9454 10489])
            ("c-insert-tab-function" variable
               (:documentation "Function used when inserting a tab for \\[c-indent-command].
Only used when `c-tab-always-indent' indicates a `real' tab character
should be inserted.  Value must be a function taking no arguments.
The default, `insert-tab', inserts either a tab or the equivalent
number of spaces depending on the value of `indent-tabs-mode'."
                :default-value 'insert-tab)
                nil [10491 10897])
            ("c-syntactic-indentation" variable
               (:documentation "Whether the indentation should be controlled by the syntactic context.

If t, the indentation functions indent according to the syntactic
context, using the style settings specified by `c-offsets-alist'.

If nil, every line is just indented to the same level as the previous
one, and the \\[c-indent-command] command adjusts the indentation in
steps specified by `c-basic-offset'.  The indentation style has no
effect in this mode, nor any of the indentation associated variables,
e.g. `c-special-indent-hook'."
                :default-value t)
                nil [10899 11480])
            ("make-variable-buffer-local" code nil nil [11481 11534])
            ("put" code nil nil [11535 11596])
            ("c-syntactic-indentation-in-macros" variable
               (:documentation "Enable syntactic analysis inside macros.
If this is nil, all lines inside macro definitions are analyzed as
`cpp-macro-cont'.  Otherwise they are analyzed syntactically, just
like normal code, and `cpp-define-intro' is used to create the
additional indentation of the bodies of \"#define\" macros.

Having this enabled simplifies editing of large multiline macros, but
it might complicate editing if CC Mode doesn't recognize the context
of the macro content.  The default context inside the macro is the
same as the top level, so if it contains \"bare\" statements they
might be indented wrongly, although there are special cases that
handle this in most cases.  If this problem occurs, it's usually
countered easily by surrounding the statements by a block (or even
better with the \"do { ... } while (0)\" trick)."
                :default-value t)
                nil [11598 12497])
            ("put" code nil nil [12498 12569])
            ("c-defun-tactic" variable
               (:documentation "Whether functions are recognized inside, e.g., a class.
This is used by `c-beginning-of-defun' and like functions.

Its value is one of:
 t           -- Functions are recognized only at the top level.
 go-outward  -- Nested functions are also recognized.  Should a function
                command hit the beginning/end of a nested scope, it will
                carry on at the less nested level."
                :default-value 'go-outward)
                nil [12571 13194])
            ("defcustom-c-stylevar" code nil nil [13196 14044])
            ("defcustom-c-stylevar" code nil nil [14046 16946])
            ("defcustom-c-stylevar" code nil nil [16948 17397])
            ("make-obsolete-variable" code nil nil [17399 17487])
            ("defcustom-c-stylevar" code nil nil [17821 18636])
            ("defcustom-c-stylevar" code nil nil [18638 21143])
            ("defcustom-c-stylevar" code nil nil [21145 24034])
            ("c-ignore-auto-fill" variable
               (:documentation "List of contexts in which automatic filling never occurs.
If Auto Fill mode is active, it will be temporarily disabled if point
is in any context on this list.  It's e.g. useful to enable Auto Fill
in comments only, but not in strings or normal code.  The valid
contexts are:

 string  -- inside a string or character literal
 c       -- inside a C style block comment
 c++     -- inside a C++ style line comment
 cpp     -- inside a preprocessor directive
 code    -- anywhere else, i.e. in normal code"
                :default-value '(string cpp code))
                nil [24036 24831])
            ("defcustom-c-stylevar" code nil nil [24833 29623])
            ("defcustom-c-stylevar" code nil nil [29625 32474])
            ("c-max-one-liner-length" variable
               (:documentation "Maximum length of line that clean-up \"one-liner-defun\" will compact to.
Zero or nil means no limit."
                :default-value 80)
                nil [32476 32648])
            ("defcustom-c-stylevar" code nil nil [32650 33453])
            ("defcustom-c-stylevar" code nil nil [33455 34260])
            ("defcustom-c-stylevar" code nil nil [34262 34676])
            ("defcustom-c-stylevar" code nil nil [34749 35129])
            ("c-auto-align-backslashes" variable
               (:documentation "Align automatically inserted line continuation backslashes.
When line continuation backslashes are inserted automatically for line
breaks in multiline macros, e.g. by \\[c-context-line-break], they are
aligned with the other backslashes in the same macro if this flag is
set.  Otherwise the inserted backslashes are preceded by a single
space."
                :default-value t)
                nil [35131 35546])
            ("c-backspace-function" variable
               (:documentation "Function called by `c-electric-backspace' when deleting backwards."
                :default-value 'backward-delete-char-untabify)
                nil [35548 35712])
            ("c-delete-function" variable
               (:documentation "Function called by `c-electric-delete-forward' when deleting forwards."
                :default-value 'delete-char)
                nil [35714 35861])
            ("c-require-final-newline" variable
               (:documentation "Controls whether a final newline is ensured when the file is saved.
The value is an association list that for each language mode specifies
the value to give to `require-final-newline' at mode initialization;
see that variable for details about the value.  If a language isn't
present on the association list, CC Mode won't touch
`require-final-newline' in buffers for that language."
                :default-value '((c-mode . t) (c++-mode . t) (objc-mode . t)))
                nil [35863 37502])
            ("c-electric-pound-behavior" variable (:documentation "List of behaviors for electric pound insertion.
Only currently supported behavior is `alignleft'.") nil [37504 37692])
            ("c-special-indent-hook" variable (:documentation "Hook for user defined special indentation adjustments.
This hook gets called after each line is indented by the mode.  It is only
called when `c-syntactic-indentation' is non-nil.") nil [37694 37941])
            ("defcustom-c-stylevar" code nil nil [37943 38330])
            ("c-progress-interval" variable
               (:documentation "Interval used to update progress status during long re-indentation.
If a number, percentage complete gets updated after each interval of
that many seconds.  To inhibit all messages during indentation, set
this variable to nil."
                :default-value 5)
                nil [38332 38625])
            ("c-objc-method-arg-min-delta-to-bracket" variable
               (:documentation "Minimum number of chars to the opening bracket.

Consider this ObjC snippet:

	[foo blahBlah: fred
	|<-x->|barBaz: barney

If `x' is less than this number then `c-lineup-ObjC-method-call-colons'
will defer the indentation decision to the next function.  By default
this is `c-lineup-ObjC-method-call', which would align it like:

	[foo blahBlahBlah: fred
	     thisIsTooDamnLong: barney

This behavior can be overridden by customizing the indentation of
`objc-method-call-cont' in the \"objc\" style."
                :default-value 2)
                nil [38627 39213])
            ("c-objc-method-arg-unfinished-offset" variable
               (:documentation "Offset relative to bracket if first selector is on a new line.

    [aaaaaaaaa
    |<-x->|bbbbbbb:  cccccc
             ddddd: eeee];"
                :default-value 4)
                nil [39215 39431])
            ("c-objc-method-parameter-offset" variable
               (:documentation "Offset for selector parameter on a new line (relative to first selector.

    [aaaaaaa bbbbbbbbbb:
	     |<-x->|cccccccc
                    ddd: eeee
                   ffff: ggg];"
                :default-value 4)
                nil [39433 39692])
            ("c-default-style" variable
               (:documentation "Style which gets installed by default when a file is visited.

The value of this variable can be any style defined in
`c-style-alist', including styles you add.  The value can also be an
association list of major mode symbols to style names.

When the value is a string, all CC Mode major modes will install this
style by default.

When the value is an alist, the major mode symbol is looked up in it
and the associated style is installed.  If the major mode is not
listed in the alist, then the symbol `other' is looked up in it, and
if found, the style in that entry is used.  If `other' is not found in
the alist, then \"gnu\" style is used.

The default style gets installed before your mode hooks run, so you
can always override the use of `c-default-style' by making calls to
`c-set-style' in the appropriate mode hook."
                :default-value '((java-mode . "java") (awk-mode . "awk") (other . "gnu")))
                nil [39694 41400])
            ("c-set-stylevar-fallback" code nil nil [41831 50165])
            ("c-offsets-alist" variable (:documentation "Association list of syntactic element symbols and indentation offsets.
As described below, each cons cell in this list has the form:

    (SYNTACTIC-SYMBOL . OFFSET)

When a line is indented, CC Mode first determines the syntactic
context of it by generating a list of symbols called syntactic
elements.  The global variable `c-syntactic-context' is bound to that
list.  Each element in the list is in turn a list where the first
element is a syntactic symbol which tells what kind of construct the
indentation point is located within.  More elements in the syntactic
element lists are optional.  If there is one more and it isn't nil,
then it's the anchor position for that construct.

After generating the syntactic context for the line, CC Mode
calculates the absolute indentation: First the base indentation is
found by using the anchor position for the first syntactic element
that provides one.  If none does, zero is used as base indentation.
Then CC Mode looks at each syntactic element in the context in turn.
It compares the car of the syntactic element against the
SYNTACTIC-SYMBOL's in `c-offsets-alist'.  When it finds a match, it
adds OFFSET to the base indentation.  The sum of this calculation is
the absolute offset for line being indented.

If the syntactic element does not match any in the `c-offsets-alist',
the element is ignored.

OFFSET can specify an offset in several different ways:

  If OFFSET is nil then it's ignored.

  If OFFSET is an integer then it's used as relative offset, i.e. it's
  added to the base indentation.

  If OFFSET is one of the symbols `+', `-', `++', `--', `*', or `/'
  then a positive or negative multiple of `c-basic-offset' is added to
  the base indentation; 1, -1, 2, -2, 0.5, and -0.5, respectively.

  If OFFSET is a symbol with a value binding then that value, which
  must be an integer, is used as relative offset.

  If OFFSET is a vector then its first element, which must be an
  integer, is used as an absolute indentation column.  This overrides
  the previous base indentation and the relative offsets applied to
  it, and it becomes the new base indentation.

  If OFFSET is a function or a lambda expression then it's called with
  a single argument containing the cons of the syntactic symbol and
  the anchor position (or nil if there is none).  The return value
  from the function is then reinterpreted as an offset specification.

  If OFFSET is a list then its elements are evaluated recursively as
  offset specifications.  If the first element is any of the symbols
  below then it isn't evaluated but instead specifies how the
  remaining offsets in the list should be combined.  If it's something
  else then the list is combined according the method `first'.  The
  valid combination methods are:

  `first' -- Use the first offset (that doesn't evaluate to nil).
  `min'   -- Use the minimum of all the offsets.  All must be either
             relative or absolute - they can't be mixed.
  `max'   -- Use the maximum of all the offsets.  All must be either
             relative or absolute - they can't be mixed.
  `add'   -- Add all the evaluated offsets together.  Exactly one of
             them may be absolute, in which case the result is
             absolute.  Any relative offsets that preceded the
             absolute one in the list will be ignored in that case.

`c-offsets-alist' is a style variable.  This means that the offsets on
this variable are normally taken from the style system in CC Mode
(see `c-default-style' and `c-style-alist').  However, any offsets
put explicitly on this list will override the style system when a CC
Mode buffer is initialized (there is a variable
`c-old-style-variable-behavior' that changes this, though).

Here is the current list of valid syntactic element symbols:

 string                 -- Inside multi-line string.
 c                      -- Inside a multi-line C style block comment.
 defun-open             -- Brace that opens a function definition.
 defun-close            -- Brace that closes a function definition.
 defun-block-intro      -- The first line in a top-level defun.
 class-open             -- Brace that opens a class definition.
 class-close            -- Brace that closes a class definition.
 inline-open            -- Brace that opens an in-class inline method.
 inline-close           -- Brace that closes an in-class inline method.
 func-decl-cont         -- The region between a function definition's
                           argument list and the function opening brace
                           (excluding K&R argument declarations).  In C, you
                           cannot put anything but whitespace and comments
                           between them; in C++ and Java, throws declarations
                           and other things can appear in this context.
 knr-argdecl-intro      -- First line of a K&R C argument declaration.
 knr-argdecl		-- Subsequent lines in a K&R C argument declaration.
 topmost-intro		-- The first line in a topmost construct definition.
 topmost-intro-cont	-- Topmost definition continuation lines.
 annotation-top-cont    -- Topmost definition continuation line where only
 			   annotations are on previous lines.
 annotation-var-cont    -- A continuation of a C (or like) statement where
 			   only annotations are on previous lines.
 member-init-intro	-- First line in a member initialization list.
 member-init-cont	-- Subsequent member initialization list lines.
 inher-intro		-- First line of a multiple inheritance list.
 inher-cont             -- Subsequent multiple inheritance lines.
 block-open             -- Statement block open brace.
 block-close            -- Statement block close brace.
 brace-list-open        -- Open brace of an enum or static array list.
 brace-list-close       -- Close brace of an enum or static array list.
 brace-list-intro       -- First line in an enum or static array list.
 brace-list-entry       -- Subsequent lines in an enum or static array list.
 brace-entry-open       -- Subsequent lines in an enum or static array
                           list that start with an open brace.
 statement              -- A C (or like) statement.
 statement-cont         -- A continuation of a C (or like) statement.
 statement-block-intro  -- The first line in a new statement block.
 statement-case-intro   -- The first line in a case \"block\".
 statement-case-open    -- The first line in a case block starting with brace.
 substatement           -- The first line after an if/while/for/do/else.
 substatement-open      -- The brace that opens a substatement block.
 substatement-label     -- Labeled line after an if/while/for/do/else.
 case-label             -- A \"case\" or \"default\" label.
 access-label           -- C++ private/protected/public access label.
 label                  -- Any ordinary label.
 do-while-closure       -- The \"while\" that ends a do/while construct.
 else-clause            -- The \"else\" of an if/else construct.
 catch-clause           -- The \"catch\" or \"finally\" of a try/catch construct.
 comment-intro          -- A line containing only a comment introduction.
 arglist-intro          -- The first line in an argument list.
 arglist-cont           -- Subsequent argument list lines when no
                           arguments follow on the same line as the
                           arglist opening paren.
 arglist-cont-nonempty  -- Subsequent argument list lines when at
                           least one argument follows on the same
                           line as the arglist opening paren.
 arglist-close          -- The solo close paren of an argument list.
 stream-op              -- Lines continuing a stream operator construct.
 inclass                -- The construct is nested inside a class definition.
                           Used together with e.g. `topmost-intro'.
 cpp-macro              -- The start of a C preprocessor macro definition.
 cpp-macro-cont         -- Inside a multi-line C preprocessor macro definition.
 friend                 -- A C++ friend declaration.
 objc-method-intro      -- The first line of an Objective-C method definition.
 objc-method-args-cont  -- Lines continuing an Objective-C method definition.
 objc-method-call-cont  -- Lines continuing an Objective-C method call.
 extern-lang-open       -- Brace that opens an \"extern\" block.
 extern-lang-close      -- Brace that closes an \"extern\" block.
 inextern-lang          -- Analogous to the `inclass' syntactic symbol,
                           but used inside \"extern\" blocks.
 namespace-open, namespace-close, innamespace
                        -- Similar to the three `extern-lang' symbols, but for
                           C++ \"namespace\" blocks.
 module-open, module-close, inmodule
                        -- Similar to the three `extern-lang' symbols, but for
                           CORBA IDL \"module\" blocks.
 composition-open, composition-close, incomposition
                        -- Similar to the three `extern-lang' symbols, but for
                           CORBA CIDL \"composition\" blocks.
 template-args-cont     -- C++ template argument list continuations.
 inlambda               -- In the header or body of a lambda function.
 lambda-intro-cont      -- Continuation of the header of a lambda function.
 inexpr-statement       -- The statement is inside an expression.
 inexpr-class           -- The class is inside an expression.  Used e.g. for
                           Java anonymous classes.") nil [50166 60216])
            ("c-inside-block-syms" variable
               (:constant-flag t
                :default-value '(defun-block-intro block-open block-close statement statement-cont statement-block-intro statement-case-intro statement-case-open substatement substatement-open substatement-label case-label label do-while-closure else-clause catch-clause inlambda annotation-var-cont))
                nil [60313 60627])
            ("c-style-variables-are-local-p" variable
               (:documentation "Whether style variables should be buffer local by default.
If non-nil, then all indentation style related variables will be made
buffer local by default.  If nil, they will remain global.  Variables
are made buffer local when this file is loaded, and once buffer
localized, they cannot be made global again.

This variable must be set appropriately before CC Mode is loaded.

The list of variables to buffer localize are:
    c-basic-offset
    c-comment-only-line-offset
    c-indent-comment-alist
    c-indent-comments-syntactically-p
    c-block-comment-prefix
    c-comment-prefix-regexp
    c-doc-comment-style
    c-cleanup-list
    c-hanging-braces-alist
    c-hanging-colons-alist
    c-hanging-semi&comma-criteria
    c-backslash-column
    c-backslash-max-column
    c-label-minimum-indentation
    c-offsets-alist
    c-special-indent-hook
    c-indentation-style"
                :default-value t)
                nil [60629 61598])
            ("c-mode-hook" variable (:documentation "Hook called by `c-mode'.") nil [61600 61682])
            ("c++-mode-hook" variable (:documentation "Hook called by `c++-mode'.") nil [61684 61770])
            ("objc-mode-hook" variable (:documentation "Hook called by `objc-mode'.") nil [61772 61860])
            ("java-mode-hook" variable (:documentation "Hook called by `java-mode'.") nil [61862 61950])
            ("idl-mode-hook" variable (:documentation "Hook called by `idl-mode'.") nil [61952 62038])
            ("pike-mode-hook" variable (:documentation "Hook called by `pike-mode'.") nil [62040 62128])
            ("awk-mode-hook" variable (:documentation "Hook called by `awk-mode'.") nil [62130 62216])
            ("c-mode-common-hook" variable (:documentation "Hook called by all CC Mode modes for common initializations.") nil [62218 62343])
            ("c-initialization-hook" variable (:documentation "Hook called when the CC Mode package gets initialized.
This hook is only run once per Emacs session and can be used as a
`load-hook' or in place of using `eval-after-load'.") nil [62345 62585])
            ("c-enable-xemacs-performance-kludge-p" variable (:documentation "Enables a XEmacs only hack that may improve speed for some coding styles.
For styles that hang top-level opening braces (as is common with JDK
Java coding styles) this can improve performance between 3 and 60
times for core indentation functions (e.g. `c-parse-state').  For
styles that conform to the Emacs recommendation of putting these
braces in column zero, this can degrade performance about as much.
This variable only has effect in XEmacs.") nil [62587 63120])
            ("c-old-style-variable-behavior" variable (:documentation "Enables the old style variable behavior when non-nil.

Normally the values of the style variables will override the style
settings specified by the variables `c-default-style' and
`c-style-alist'.  However, in CC Mode 5.25 and earlier, it was the
other way around, meaning that changes made to the style variables
from e.g. Customize would not take effect unless special precautions
were taken.  That was confusing, especially for novice users.

It's believed that despite this change, the new behavior will still
produce the same results for most old CC Mode configurations, since
all style variables are per default set in a special non-override
state.  Set this variable only if your configuration has stopped
working due to this change.") nil [63122 63941])
            ("define-widget" code nil nil [63943 64127])
            ("c-make-font-lock-extra-types-blurb" function
               (:documentation "*List of extra types (aside from the type keywords) to recognize in "
                :arguments ("mode1" "mode2" "example"))
                nil [64129 65195])
            ("c-font-lock-extra-types" variable (:default-value '("\\sw+_t" "bool" "complex" "imaginary" "FILE" "lconv" "tm" "va_list" "jmp_buf" "Lisp_Object")) nil [65514 66236])
            ("c++-font-lock-extra-types" variable (:default-value '("\\sw+_t" "FILE" "lconv" "tm" "va_list" "jmp_buf" "istream" "istreambuf" "ostream" "ostreambuf" "ifstream" "ofstream" "fstream" "strstream" "strstreambuf" "istrstream" "ostrstream" "ios" "string" "rope" "list" "slist" "deque" "vector" "bit_vector" "set" "multiset" "map" "multimap" "hash" "hash_set" "hash_multiset" "hash_map" "hash_multimap" "stack" "queue" "priority_queue" "type_info" "iterator" "const_iterator" "reverse_iterator" "const_reverse_iterator" "reference" "const_reference")) nil [66238 67351])
            ("objc-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [67353 67779])
            ("java-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw"))) nil [67781 68196])
            ("idl-font-lock-extra-types" variable nil nil [68198 68340])
            ("pike-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [68342 68768])
            ("c-asymmetry-fontification-flag" variable
               (:documentation "Whether to fontify certain ambiguous constructs by white space asymmetry.

In the fontification engine, it is sometimes impossible to determine
whether a construct is a declaration or an expression.  This happens
particularly in C++, due to ambiguities in the language.  When such a
construct is like \"foo * bar\" or \"foo &bar\", and this variable is non-nil
(the default), the construct will be fontified as a declaration if there is
white space either before or after the operator, but not both."
                :default-value t)
                nil [68770 69366])
            ("c-noise-macro-with-parens-name-re" variable (:default-value "a\\`") nil [69428 69477])
            ("c-noise-macro-name-re" variable (:default-value "a\\`") nil [69478 69515])
            ("c-noise-macro-names" variable (:documentation "A list of names of macros which expand to nothing, or compiler extensions
like \"????\" which are syntactic noise.  Such a macro/extension is complete in
itself, never having parentheses.  All these names must be syntactically valid
identifiers.

If you change this variable's value, call the function
`c-make-noise-macro-regexps' to set the necessary internal variables (or do
this implicitly by reinitializing C/C++/Objc Mode on any buffer).") nil [69517 70076])
            ("put" code nil nil [70077 70142])
            ("c-noise-macro-with-parens-names" variable (:documentation "A list of names of macros (or compiler extensions like \"__attribute__\")
which optionally have arguments in parentheses, and which expand to nothing.
These are recognized by CC Mode only in declarations.") nil [70144 70494])
            ("put" code nil nil [70495 70572])
            ("c-make-noise-macro-regexps" function nil nil [70574 71676])
            ("c-macro-with-semi-re" variable nil nil [71749 71983])
            ("make-variable-buffer-local" code nil nil [71984 72034])
            ("c-macro-names-with-semicolon" variable
               (:documentation "List of #defined symbols whose expansion ends with a semicolon.
Alternatively it can be a string, a regular expression which
matches all such symbols.

The \"symbols\" must be syntactically valid identifiers in the
target language (C, C++, Objective C), or (as the case may be)
the regular expression must match only valid identifiers.

If you change this variable's value, call the function
`c-make-macros-with-semi-re' to set the necessary internal
variables."
                :default-value '("Q_OBJECT" "Q_PROPERTY" "Q_DECLARE" "Q_ENUMS"))
                nil [72036 72592])
            ("make-variable-buffer-local" code nil nil [72593 72651])
            ("put" code nil nil [72652 72741])
            ("c-make-macro-with-semi-re" function nil nil [72743 73483])
            ("c-file-style" variable (:documentation "Variable interface for setting style via File Local Variables.
In a file's Local Variable section, you can set this variable to a
string suitable for `c-set-style'.  When the file is visited, CC Mode
will set the style of the file to this value automatically.

Note that file style settings are applied before file offset settings
as designated in the variable `c-file-offsets'.") nil [73485 73893])
            ("make-variable-buffer-local" code nil nil [73894 73936])
            ("c-file-offsets" variable (:documentation "Variable interface for setting offsets via File Local Variables.
In a file's Local Variable section, you can set this variable to an
association list similar to the values allowed in `c-offsets-alist'.
When the file is visited, CC Mode will institute these offset settings
automatically.

Note that file offset settings are applied after file style settings
as designated in the variable `c-file-style'.") nil [74011 74446])
            ("make-variable-buffer-local" code nil nil [74447 74491])
            ("cc-bytecomp-defvar" code nil nil [74950 74990])
            ("c-syntactic-context" variable nil nil [74991 75019])
            ("put" code nil nil [75020 75628])
            ("cc-bytecomp-defvar" code nil nil [75631 75671])
            ("c-syntactic-element" variable nil nil [75672 75700])
            ("put" code nil nil [75701 76549])
            ("c-indentation-style" variable (:documentation "Name of the currently installed style.
Don't change this directly; call `c-set-style' instead, or set the variable
`c-file-style' in the file's Local Variable list.") nil [76551 76752])
            ("c-current-comment-prefix" variable (:documentation "The current comment prefix regexp.
Set from `c-comment-prefix-regexp' at mode initialization.") nil [76754 76889])
            ("make-variable-buffer-local" code nil nil [76890 76944])
            ("c-string-par-start" variable
               (:documentation "Value of paragraph-start used when scanning strings.
It treats escaped EOLs as whitespace."
                :default-value "\\|[ 	]*\\\\?$")
                nil [77133 77350])
            ("c-string-par-separate" variable
               (:documentation "Value of paragraph-separate used when scanning strings.
It treats escaped EOLs as whitespace."
                :default-value "[ 	]*\\\\?$")
                nil [77352 77575])
            ("c-sentence-end-with-esc-eol" variable
               (:documentation "Value used like sentence-end used when scanning strings.
It treats escaped EOLs as whitespace."
                :default-value (concat "\\(\\(" (c-default-value-sentence-end) "\\)" "\\|" "[.?!][]\"')}]* ?\\\\\\($\\)[ 	
]*" "\\)"))
                nil [77577 77890])
            ("cc-provide" code nil nil [77894 77915]))          
      :file "cc-vars.el.gz"
      :pointmax 78009
      :fsize 21654
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 2648 . 2649) (symbol 2056 . 2072) (open-paren 2055 . 2056) (close-paren 1429 . 1430) (symbol 1194 . 1211) (open-paren 1193 . 1194)))
    (semanticdb-table "semanticdb-table-1909f44"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [12247 12268])
            ("cl-lib" include nil nil [12269 12286])
            ("comint" include nil nil [12287 12304])
            ("json" include nil nil [12305 12320])
            ("tramp-sh" include nil nil [12321 12340])
            ("view-return-to-alist" variable nil nil [12369 12398])
            ("compilation-error-regexp-alist" variable nil nil [12399 12438])
            ("outline-heading-end-regexp" variable nil nil [12439 12474])
            ("comint-mode" function (:prototype-flag t) nil [12476 12508])
            ("help-function-arglist" function (:prototype-flag t) nil [12509 12553])
            ("add-to-list" code nil nil [12570 12647])
            ("add-to-list" code nil nil [12663 12747])
            ("python" customgroup
               (:documentation "Python Language's flying circus support for Emacs."
                :user-visible-flag t)
                nil [12749 12905])
            ("unless" code nil nil [13028 13318])
            ("unless" code nil nil [12947 13025])
            ("inferior-python-mode-hook" variable nil nil [13453 13487])
            ("python-mode-map" variable
               (:documentation "Keymap for `python-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [remap backward-sentence] 'python-nav-backward-block) (define-key map [remap forward-sentence] 'python-nav-forward-block) (define-key map [remap backward-up-list] 'python-nav-backward-up-list) (define-key map [remap mark-defun] 'python-mark-defun) (define-key map "
" 'imenu) (define-key map "" 'python-indent-dedent-line-backspace) (define-key map (kbd "<backtab>") 'python-indent-dedent-line) (define-key map "<" 'python-indent-shift-left) (define-key map ">" 'python-indent-shift-right) (define-key map "c" 'python-skeleton-class) (define-key map "d" 'python-skeleton-def) (define-key map "f" 'python-skeleton-for) (define-key map "i" 'python-skeleton-if) (define-key map "m" 'python-skeleton-import) (define-key map "t" 'python-skeleton-try) (define-key map "w" 'python-skeleton-while) (define-key map "" 'run-python) (define-key map "" 'python-shell-send-string) (define-key map "" 'python-shell-send-region) (define-key map "\230" 'python-shell-send-defun) (define-key map "" 'python-shell-send-buffer) (define-key map "" 'python-shell-send-file) (define-key map "" 'python-shell-switch-to-shell) (define-key map "" 'python-check) (define-key map "" 'python-eldoc-at-point) (define-key map "" 'python-describe-at-point) (substitute-key-definition 'complete-symbol 'completion-at-point map global-map) (easy-menu-define python-menu map "Python Mode menu" `("Python" :help "Python-specific Features" ["Shift region left" python-indent-shift-left :active mark-active :help "Shift region left by a single indentation step"] ["Shift region right" python-indent-shift-right :active mark-active :help "Shift region right by a single indentation step"] "-" ["Start of def/class" beginning-of-defun :help "Go to start of outermost definition around point"] ["End of def/class" end-of-defun :help "Go to end of definition around point"] ["Mark def/class" mark-defun :help "Mark outermost definition around point"] ["Jump to def/class" imenu :help "Jump to a class or function definition"] "--" ("Skeletons") "---" ["Start interpreter" run-python :help "Run inferior Python process in a separate buffer"] ["Switch to shell" python-shell-switch-to-shell :help "Switch to running inferior Python process"] ["Eval string" python-shell-send-string :help "Eval string in inferior Python session"] ["Eval buffer" python-shell-send-buffer :help "Eval buffer in inferior Python session"] ["Eval region" python-shell-send-region :help "Eval region in inferior Python session"] ["Eval defun" python-shell-send-defun :help "Eval defun in inferior Python session"] ["Eval file" python-shell-send-file :help "Eval file in inferior Python session"] ["Debugger" pdb :help "Run pdb under GUD"] "----" ["Check file" python-check :help "Check file for errors"] ["Help on symbol" python-eldoc-at-point :help "Get help on symbol at point"] ["Complete symbol" completion-at-point :help "Complete symbol before point"])) map))
                nil [13505 17265])
            ("python-rx" function
               (:documentation "Python mode specialized rx macro.
This variant of `rx' supports common Python named REGEXPS."
                :arguments ("regexps"))
                nil [21120 21531])
            ("python-rx-constituents" variable
               (:documentation "Additional Python specific sexps for `python-rx'"
                :constant-flag t
                :default-value `((block-start \, (rx symbol-start (or "def" "class" "if" "elif" "else" "try" "except" "finally" "for" "while" "with" (and "async" (+ space) (or "def" "for" "with"))) symbol-end)) (dedenter \, (rx symbol-start (or "elif" "else" "except" "finally") symbol-end)) (block-ender \, (rx symbol-start (or "break" "continue" "pass" "raise" "return") symbol-end)) (decorator \, (rx line-start (* space) 64 (any letter 95) (* (any word 95)))) (defun \, (rx symbol-start (or "def" "class" (and "async" (+ space) "def")) symbol-end)) (if-name-main \, (rx line-start "if" (+ space) "__name__" (+ space) "==" (+ space) (any 39 34) "__main__" (any 39 34) (* space) 58)) (symbol-name \, (rx (any letter 95) (* (any word 95)))) (open-paren \, (rx (or "{" "[" "("))) (close-paren \, (rx (or "}" "]" ")"))) (simple-operator \, (rx (any 43 45 47 38 94 126 124 42 60 62 61 37))) (not-simple-operator \, (rx (not (any 43 45 47 38 94 126 124 42 60 62 61 37)))) (operator \, (rx (or "+" "-" "/" "&" "^" "~" "|" "*" "<" ">" "=" "%" "**" "//" "<<" ">>" "<=" "!=" "==" ">=" "is" "not"))) (assignment-operator \, (rx (or "=" "+=" "-=" "*=" "/=" "//=" "%=" "**=" ">>=" "<<=" "&=" "^=" "|="))) (string-delimiter \, (rx (and (or (not (any 92 39 34)) point (and (or (not (any 92)) point) 92 (* 92 92) (any 39 34))) (* 92 92) (group (or "\"" "\"\"\"" "'" "'''"))))) (coding-cookie \, (rx line-start 35 (* space) (or (: "coding" (or 58 61) (* space) (group-n 1 (+ (or word 45)))) (: "-*-" (* space) "coding:" (* space) (group-n 1 (+ (or word 45))) (* space) "-*-") (: "vim:" (* space) "set" (+ space) "fileencoding" (* space) 61 (* space) (group-n 1 (+ (or word 45))) (* space) ":"))))))
                nil [17316 21116])
            ("python-syntax--context-compiler-macro" function (:arguments ("form" "type" "syntax-ppss")) nil [21582 21986])
            ("python-syntax-context" function
               (:documentation "Return non-nil if point is on TYPE using SYNTAX-PPSS.
TYPE can be `comment', `string' or `paren'.  It returns the start
character address of the specified TYPE."
                :arguments ("type" "syntax-ppss"))
                nil [21989 22483])
            ("python-syntax-context-type" function
               (:documentation "Return the context type using SYNTAX-PPSS.
The type returned can be `comment', `string' or `paren'."
                :arguments ("syntax-ppss"))
                nil [22485 22788])
            ("python-syntax-comment-or-string-p" function
               (:documentation "Return non-nil if PPSS is inside comment or string."
                :arguments ("ppss"))
                nil [22790 22941])
            ("python-syntax-closing-paren-p" function (:documentation "Return non-nil if char after point is a closing paren.") nil [22943 23136])
            ("define-obsolete-function-alias" code nil nil [23138 23229])
            ("define-obsolete-function-alias" code nil nil [23231 23332])
            ("define-obsolete-function-alias" code nil nil [23334 23451])
            ("python-font-lock-syntactic-face-function" function
               (:documentation "Return syntactic face given STATE."
                :arguments ("state"))
                nil [23453 23698])
            ("python-font-lock-keywords-level-1" variable
               (:documentation "Font lock keywords to use in python-mode for level 1 decoration.

This is the minimum decoration level, including function and
class declarations."
                :default-value `((,(rx symbol-start "def" (1+ space) (group (1+ (or word 95)))) (1 font-lock-function-name-face)) (,(rx symbol-start "class" (1+ space) (group (1+ (or word 95)))) (1 font-lock-type-face))))
                nil [23700 24099])
            ("python-font-lock-keywords-level-2" variable
               (:documentation "Font lock keywords to use in python-mode for level 2 decoration.

This is the medium decoration level, including everything in
`python-font-lock-keywords-level-1', as well as keywords and
builtins."
                :default-value `(,@python-font-lock-keywords-level-1 ,(rx symbol-start (or "and" "del" "from" "not" "while" "as" "elif" "global" "or" "with" "assert" "else" "if" "pass" "yield" "break" "except" "import" "class" "in" "raise" "continue" "finally" "is" "return" "def" "for" "lambda" "try" "print" "exec" "nonlocal" (and "async" (+ space) (or "def" "for" "with")) "await" "self") symbol-end) (,(rx symbol-start (or "abs" "all" "any" "bin" "bool" "callable" "chr" "classmethod" "compile" "complex" "delattr" "dict" "dir" "divmod" "enumerate" "eval" "filter" "float" "format" "frozenset" "getattr" "globals" "hasattr" "hash" "help" "hex" "id" "input" "int" "isinstance" "issubclass" "iter" "len" "list" "locals" "map" "max" "memoryview" "min" "next" "object" "oct" "open" "ord" "pow" "print" "property" "range" "repr" "reversed" "round" "set" "setattr" "slice" "sorted" "staticmethod" "str" "sum" "super" "tuple" "type" "vars" "zip" "__import__" "basestring" "cmp" "execfile" "file" "long" "raw_input" "reduce" "reload" "unichr" "unicode" "xrange" "apply" "buffer" "coerce" "intern" "ascii" "bytearray" "bytes" "exec" "__all__" "__doc__" "__name__" "__package__") symbol-end) . font-lock-builtin-face)))
                nil [24101 26263])
            ("python-font-lock-keywords-maximum-decoration" variable
               (:documentation "Font lock keywords to use in python-mode for maximum decoration.

This decoration level includes everything in
`python-font-lock-keywords-level-2', as well as constants,
decorators, exceptions, and assignments."
                :default-value `(,@python-font-lock-keywords-level-2 (,(rx symbol-start (or "Ellipsis" "False" "None" "NotImplemented" "True" "__debug__" "copyright" "credits" "exit" "license" "quit") symbol-end) . font-lock-constant-face) (,(rx line-start (* (any " 	")) (group "@" (1+ (or word 95)) (0+ "." (1+ (or word 95))))) (1 font-lock-type-face)) (,(rx symbol-start (or "ArithmeticError" "AssertionError" "AttributeError" "BaseException" "BufferError" "BytesWarning" "DeprecationWarning" "EOFError" "EnvironmentError" "Exception" "FloatingPointError" "FutureWarning" "GeneratorExit" "IOError" "ImportError" "ImportWarning" "IndentationError" "IndexError" "KeyError" "KeyboardInterrupt" "LookupError" "MemoryError" "NameError" "NotImplementedError" "OSError" "OverflowError" "PendingDeprecationWarning" "ReferenceError" "RuntimeError" "RuntimeWarning" "StopIteration" "SyntaxError" "SyntaxWarning" "SystemError" "SystemExit" "TabError" "TypeError" "UnboundLocalError" "UnicodeDecodeError" "UnicodeEncodeError" "UnicodeError" "UnicodeTranslateError" "UnicodeWarning" "UserWarning" "ValueError" "Warning" "ZeroDivisionError" "StandardError" "BlockingIOError" "BrokenPipeError" "ChildProcessError" "ConnectionAbortedError" "ConnectionError" "ConnectionRefusedError" "ConnectionResetError" "FileExistsError" "FileNotFoundError" "InterruptedError" "IsADirectoryError" "NotADirectoryError" "PermissionError" "ProcessLookupError" "RecursionError" "ResourceWarning" "StopAsyncIteration" "TimeoutError" "VMSError" "WindowsError") symbol-end) . font-lock-type-face) (,(lambda (limit) (let ((re (python-rx (group (+ (any word 46 95))) (32 91 (+ (not (any 93))) 93) (* space) assignment-operator)) (res nil)) (while (and (setq res (re-search-forward re limit t)) (or (python-syntax-context 'paren) (equal (char-after (point)) 61)))) res)) (1 font-lock-variable-name-face nil nil)) (,(lambda (limit) (let ((re (python-rx (group (+ (any word 46 95))) (* space) (* 44 (* space) (+ (any word 46 95)) (* space)) 44 (* space) (+ (any word 46 95)) (* space) assignment-operator)) (res nil)) (while (and (setq res (re-search-forward re limit t)) (goto-char (match-end 1)) (python-syntax-context 'paren))) res)) (1 font-lock-variable-name-face nil nil))))
                nil [26265 29860])
            ("python-font-lock-keywords" variable
               (:documentation "List of font lock keyword specifications to use in python-mode.

Which one will be chosen depends on the value of
`font-lock-maximum-decoration'."
                :default-value '(python-font-lock-keywords-level-1 python-font-lock-keywords-level-1 python-font-lock-keywords-level-2 python-font-lock-keywords-maximum-decoration))
                nil [29862 30543])
            ("python-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ((python-rx string-delimiter) (0 (ignore (python-syntax-stringify))))))
                nil [30546 30695])
            ("define-obsolete-variable-alias" code nil nil [30697 30801])
            ("python-prettify-symbols-alist" variable
               (:documentation "Value for `prettify-symbols-alist' in `python-mode'."
                :default-value '(("lambda" . 955) ("and" . 8743) ("or" . 8744)))
                nil [30803 30953])
            ("python-syntax-count-quotes" function
               (:documentation "Count number of quotes around point (max is 3).
QUOTE-CHAR is the quote char to count.  Optional argument POINT is
the point where scan starts (defaults to current point), and LIMIT
is used to limit the scan."
                :arguments ("quote-char" "point" "limit"))
                nil [30955 31422])
            ("python-syntax-stringify" function (:documentation "Put `syntax-table' property correctly on single/triple quotes.") nil [31424 33054])
            ("python-mode-syntax-table" variable
               (:documentation "Syntax table for Python files."
                :default-value (let ((table (make-syntax-table))) (let ((symbol (string-to-syntax "_")) (sst (standard-syntax-table))) (dotimes (i 128) (unless (= i 95) (if (equal symbol (aref sst i)) (modify-syntax-entry i "." table))))) (modify-syntax-entry 36 "." table) (modify-syntax-entry 37 "." table) (modify-syntax-entry 35 "<" table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 39 "\"" table) (modify-syntax-entry 96 "$" table) table))
                nil [33056 33769])
            ("python-dotty-syntax-table" variable
               (:documentation "Dotty syntax table for Python files.
It makes underscores and dots word constituent chars."
                :default-value (let ((table (make-syntax-table python-mode-syntax-table))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) table))
                nil [33771 34051])
            ("define-obsolete-variable-alias" code nil nil [34072 34150])
            ("python-indent-offset" variable
               (:documentation "Default indentation offset for Python."
                :default-value 4)
                nil [34152 34281])
            ("define-obsolete-variable-alias" code nil nil [34283 34380])
            ("python-indent-guess-indent-offset" variable
               (:documentation "Non-nil tells Python mode to guess `python-indent-offset' value."
                :default-value t)
                nil [34382 34550])
            ("python-indent-guess-indent-offset-verbose" variable
               (:documentation "Non-nil means to emit a warning when indentation guessing fails."
                :default-value t)
                nil [34552 34746])
            ("python-indent-trigger-commands" variable
               (:documentation "Commands that might trigger a `python-indent-line' call."
                :default-value '(indent-for-tab-command yas-expand yas/expand))
                nil [34748 34943])
            ("python-indent-def-block-scale" variable
               (:documentation "Multiplier applied to indentation inside multi-line def blocks."
                :default-value 2)
                nil [34945 35108])
            ("python-indent-current-level" variable (:documentation "Deprecated var available for compatibility.") nil [35110 35196])
            ("python-indent-levels" variable
               (:documentation "Deprecated var available for compatibility."
                :default-value '(0))
                nil [35198 35280])
            ("make-obsolete-variable" code nil nil [35282 35639])
            ("make-obsolete-variable" code nil nil [35641 35991])
            ("python-indent-guess-indent-offset" function
               (:documentation "Guess and set `python-indent-offset' for the current buffer."
                :user-visible-flag t)
                nil [35993 37602])
            ("python-indent-context" function (:documentation "Get information about the current indentation context.
Context is returned in a cons with the form (STATUS . START).

STATUS can be one of the following:

keyword
-------

:after-comment
 - Point is after a comment line.
 - START is the position of the \"#\" character.
:inside-string
 - Point is inside string.
 - START is the position of the first quote that starts it.
:no-indent
 - No possible indentation case matches.
 - START is always zero.

:inside-paren
 - Fallback case when point is inside paren.
 - START is the first non space char position *after* the open paren.
:inside-paren-at-closing-nested-paren
 - Point is on a line that contains a nested paren closer.
 - START is the position of the open paren it closes.
:inside-paren-at-closing-paren
 - Point is on a line that contains a paren closer.
 - START is the position of the open paren.
:inside-paren-newline-start
 - Point is inside a paren with items starting in their own line.
 - START is the position of the open paren.
:inside-paren-newline-start-from-block
 - Point is inside a paren with items starting in their own line
   from a block start.
 - START is the position of the open paren.

:after-backslash
 - Fallback case when point is after backslash.
 - START is the char after the position of the backslash.
:after-backslash-assignment-continuation
 - Point is after a backslashed assignment.
 - START is the char after the position of the backslash.
:after-backslash-block-continuation
 - Point is after a backslashed block continuation.
 - START is the char after the position of the backslash.
:after-backslash-dotted-continuation
 - Point is after a backslashed dotted continuation.  Previous
   line must contain a dot to align with.
 - START is the char after the position of the backslash.
:after-backslash-first-line
 - First line following a backslashed continuation.
 - START is the char after the position of the backslash.

:after-block-end
 - Point is after a line containing a block ender.
 - START is the position where the ender starts.
:after-block-start
 - Point is after a line starting a block.
 - START is the position where the block starts.
:after-line
 - Point is after a simple line.
 - START is the position where the previous line starts.
:at-dedenter-block-start
 - Point is on a line starting a dedenter block.
 - START is the position where the dedenter block starts.") nil [37604 46234])
            ("python-indent--calculate-indentation" function (:documentation "Internal implementation of `python-indent-calculate-indentation'.
May return an integer for the maximum possible indentation at
current context or a list of integers.  The latter case is only
happening for :at-dedenter-block-start context since the
possibilities can be narrowed to specific indentation points.") nil [46236 48819])
            ("python-indent--calculate-levels" function
               (:documentation "Calculate levels list given INDENTATION.
Argument INDENTATION can either be an integer or a list of
integers.  Levels are returned in ascending order, and in the
case INDENTATION is a list, this order is enforced."
                :arguments ("indentation"))
                nil [48821 49310])
            ("python-indent--previous-level" function
               (:documentation "Return previous level from LEVELS relative to INDENTATION."
                :arguments ("levels" "indentation"))
                nil [49312 49662])
            ("python-indent-calculate-indentation" function
               (:documentation "Calculate indentation.
Get indentation of PREVIOUS level when argument is non-nil.
Return the max level of the cycle when indentation reaches the
minimum."
                :arguments ("previous"))
                nil [49664 50179])
            ("python-indent-line" function
               (:documentation "Internal implementation of `python-indent-line-function'.
Use the PREVIOUS level when argument is non-nil, otherwise indent
to the maximum available level.  When indentation is the minimum
possible and PREVIOUS is non-nil, cycle back to the maximum
level."
                :arguments ("previous"))
                nil [50181 50952])
            ("python-indent-calculate-levels" function (:documentation "Return possible indentation levels.") nil [50954 51113])
            ("python-indent-line-function" function (:documentation "`indent-line-function' for Python mode.
When the variable `last-command' is equal to one of the symbols
inside `python-indent-trigger-commands' it cycles possible
indentation levels from right to left.") nil [51115 51481])
            ("python-indent-dedent-line" function
               (:documentation "De-indent current line."
                :user-visible-flag t)
                nil [51483 51739])
            ("python-indent-dedent-line-backspace" function
               (:documentation "De-indent current line.
Argument ARG is passed to `backward-delete-char-untabify' when
point is not in between the indentation."
                :user-visible-flag t
                :arguments ("arg"))
                nil [51741 52022])
            ("put" code nil nil [52024 52095])
            ("python-indent-region" function
               (:documentation "Indent a Python region automagically.

Called from a program, START and END specify the region to indent."
                :arguments ("start" "end"))
                nil [52097 53993])
            ("python-indent-shift-left" function
               (:documentation "Shift lines contained in region START END by COUNT columns to the left.
COUNT defaults to `python-indent-offset'.  If region isn't
active, the current line is shifted.  The shifted region includes
the lines in which START and END lie.  An error is signaled if
any lines in the region are indented less than COUNT columns."
                :user-visible-flag t
                :arguments ("start" "end" "count"))
                nil [53995 55023])
            ("python-indent-shift-right" function
               (:documentation "Shift lines contained in region START END by COUNT columns to the right.
COUNT defaults to `python-indent-offset'.  If region isn't
active, the current line is shifted.  The shifted region includes
the lines in which START and END lie."
                :user-visible-flag t
                :arguments ("start" "end" "count"))
                nil [55025 55669])
            ("python-indent-post-self-insert-function" function (:documentation "Adjust indentation after insertion of some characters.
This function is intended to be added to `post-self-insert-hook.'
If a line renders a paren alone, after adding a char before it,
the line will be re-indented automatically if needed.") nil [55671 58013])
            ("python-mark-defun" function
               (:documentation "Put mark at end of this defun, point at beginning.
The defun marked is the one that contains point or follows point.

Interactively (or with ALLOW-EXTEND non-nil), if this command is
repeated or (in Transient Mark mode) if the mark is active, it
marks the next defun after the ones already marked."
                :user-visible-flag t
                :arguments ("allow-extend"))
                nil [58027 58500])
            ("python-nav-beginning-of-defun-regexp" variable
               (:documentation "Regexp matching class or function definition.
The name of the defun should be grouped so it can be retrieved
via `match-string'."
                :default-value (python-rx line-start (* space) defun (+ space) (group symbol-name)))
                nil [58520 58769])
            ("python-nav--beginning-of-defun" function
               (:documentation "Internal implementation of `python-nav-beginning-of-defun'.
With positive ARG search backwards, else search forwards."
                :arguments ("arg"))
                nil [58771 60774])
            ("python-nav-beginning-of-defun" function
               (:documentation "Move point to `beginning-of-defun'.
With positive ARG search backwards else search forward.
ARG nil or 0 defaults to 1.  When searching backwards,
nested defuns are handled with care depending on current
point position.  Return non-nil if point is moved to
`beginning-of-defun'."
                :arguments ("arg"))
                nil [60776 61506])
            ("python-nav-end-of-defun" function
               (:documentation "Move point to the end of def or class.
Returns nil if point is not in a def or class."
                :user-visible-flag t)
                nil [61508 62274])
            ("python-nav--syntactically" function
               (:documentation "Move point using FN avoiding places with specific context.
FN must take no arguments.  POSCOMPFN is a two arguments function
used to compare current and previous point after it is moved
using FN, this is normally a less-than or greater-than
comparison.  Optional argument CONTEXTFN defaults to
`python-syntax-context-type' and is used for checking current
point context, it must return a non-nil value if this point must
be skipped."
                :arguments ("fn" "poscompfn" "contextfn"))
                nil [62276 63499])
            ("python-nav--forward-defun" function
               (:documentation "Internal implementation of python-nav-{backward,forward}-defun.
Uses ARG to define which function to call, and how many times
repeat it."
                :arguments ("arg"))
                nil [63501 64326])
            ("python-nav-backward-defun" function
               (:documentation "Navigate to closer defun backward ARG times.
Unlikely `python-nav-beginning-of-defun' this doesn't care about
nested definitions."
                :user-visible-flag t
                :arguments ("arg"))
                nil [64328 64577])
            ("python-nav-forward-defun" function
               (:documentation "Navigate to closer defun forward ARG times.
Unlikely `python-nav-beginning-of-defun' this doesn't care about
nested definitions."
                :user-visible-flag t
                :arguments ("arg"))
                nil [64579 64822])
            ("python-nav-beginning-of-statement" function
               (:documentation "Move to start of current statement."
                :user-visible-flag t)
                nil [64824 65470])
            ("python-nav-end-of-statement" function
               (:documentation "Move to end of current statement.
Optional argument NOEND is internal and makes the logic to not
jump to the end of line when moving forward searching for the end
of the statement."
                :user-visible-flag t
                :arguments ("noend"))
                nil [65472 67765])
            ("python-nav-backward-statement" function
               (:documentation "Move backward to previous statement.
With ARG, repeat.  See `python-nav-forward-statement'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [67767 68002])
            ("python-nav-forward-statement" function
               (:documentation "Move forward to next statement.
With ARG, repeat.  With negative argument, move ARG times
backward to previous statement."
                :user-visible-flag t
                :arguments ("arg"))
                nil [68004 68540])
            ("python-nav-beginning-of-block" function
               (:documentation "Move to start of current block."
                :user-visible-flag t)
                nil [68542 69514])
            ("python-nav-end-of-block" function
               (:documentation "Move to end of current block."
                :user-visible-flag t)
                nil [69516 70116])
            ("python-nav-backward-block" function
               (:documentation "Move backward to previous block of code.
With ARG, repeat.  See `python-nav-forward-block'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [70118 70345])
            ("python-nav-forward-block" function
               (:documentation "Move forward to next block of code.
With ARG, repeat.  With negative argument, move ARG times
backward to previous block."
                :user-visible-flag t
                :arguments ("arg"))
                nil [70347 71299])
            ("python-nav--lisp-forward-sexp" function
               (:documentation "Standard version `forward-sexp'.
It ignores completely the value of `forward-sexp-function' by
setting it to nil before calling `forward-sexp'.  With positive
ARG move forward only one sexp, else move backwards."
                :arguments ("arg"))
                nil [71301 71676])
            ("python-nav--lisp-forward-sexp-safe" function
               (:documentation "Safe version of standard `forward-sexp'.
When at end of sexp (i.e. looking at an opening/closing paren)
skips it instead of throwing an error.  With positive ARG move
forward only one sexp, else move backwards."
                :arguments ("arg"))
                nil [71678 72379])
            ("python-nav--forward-sexp" function
               (:documentation "Move to forward sexp.
With positive optional argument DIR direction move forward, else
backwards.  When optional argument SAFE is non-nil do not throw
errors when at end of sexp, skip it instead.  With optional
argument SKIP-PARENS-P force sexp motion to ignore parenthesized
expressions when looking at them in either direction."
                :arguments ("dir" "safe" "skip-parens-p"))
                nil [72381 77306])
            ("python-nav-forward-sexp" function
               (:documentation "Move forward across expressions.
With ARG, do it that many times.  Negative arg -N means move
backward N times.  When optional argument SAFE is non-nil do not
throw errors when at end of sexp, skip it instead.  With optional
argument SKIP-PARENS-P force sexp motion to ignore parenthesized
expressions when looking at them in either direction (forced to t
in interactive calls)."
                :user-visible-flag t
                :arguments ("arg" "safe" "skip-parens-p"))
                nil [77308 78875])
            ("python-nav-backward-sexp" function
               (:documentation "Move backward across expressions.
With ARG, do it that many times.  Negative arg -N means move
forward N times.  When optional argument SAFE is non-nil do not
throw errors when at end of sexp, skip it instead.  With optional
argument SKIP-PARENS-P force sexp motion to ignore parenthesized
expressions when looking at them in either direction (forced to t
in interactive calls)."
                :user-visible-flag t
                :arguments ("arg" "safe" "skip-parens-p"))
                nil [78877 79427])
            ("python-nav-forward-sexp-safe" function
               (:documentation "Move forward safely across expressions.
With ARG, do it that many times.  Negative arg -N means move
backward N times.  With optional argument SKIP-PARENS-P force
sexp motion to ignore parenthesized expressions when looking at
them in either direction (forced to t in interactive calls)."
                :user-visible-flag t
                :arguments ("arg" "skip-parens-p"))
                nil [79429 79856])
            ("python-nav-backward-sexp-safe" function
               (:documentation "Move backward safely across expressions.
With ARG, do it that many times.  Negative arg -N means move
forward N times.  With optional argument SKIP-PARENS-P force sexp
motion to ignore parenthesized expressions when looking at them in
either direction (forced to t in interactive calls)."
                :user-visible-flag t
                :arguments ("arg" "skip-parens-p"))
                nil [79858 80287])
            ("python-nav--up-list" function
               (:documentation "Internal implementation of `python-nav-up-list'.
DIR is always 1 or -1 and comes sanitized from
`python-nav-up-list' calls."
                :arguments ("dir"))
                nil [80289 81872])
            ("python-nav-up-list" function
               (:documentation "Move forward out of one level of parentheses (or blocks).
With ARG, do this that many times.
A negative argument means move backward but still to a less deep spot.
This command assumes point is not in a string or comment."
                :user-visible-flag t
                :arguments ("arg"))
                nil [81874 82332])
            ("python-nav-backward-up-list" function
               (:documentation "Move backward out of one level of parentheses (or blocks).
With ARG, do this that many times.
A negative argument means move forward but still to a less deep spot.
This command assumes point is not in a string or comment."
                :user-visible-flag t
                :arguments ("arg"))
                nil [82334 82687])
            ("python-nav-if-name-main" function
               (:documentation "Move point at the beginning the __main__ block.
When \"if __name__ == \\='__main__\\=':\" is found returns its
position, else returns nil."
                :user-visible-flag t)
                nil [82689 83601])
            ("python-shell-buffer-name" variable
               (:documentation "Default buffer name for Python interpreter."
                :default-value "Python")
                nil [83628 83771])
            ("python-shell-interpreter" variable
               (:documentation "Default Python interpreter for shell."
                :default-value "python")
                nil [83773 83893])
            ("python-shell-internal-buffer-name" variable
               (:documentation "Default buffer name for the Internal Python interpreter."
                :default-value "Python Internal")
                nil [83895 84069])
            ("python-shell-interpreter-args" variable
               (:documentation "Default arguments for the Python interpreter."
                :default-value "-i")
                nil [84071 84200])
            ("python-shell-interpreter-interactive-arg" variable
               (:documentation "Interpreter argument to force it to run interactively."
                :default-value "-i")
                nil [84202 84352])
            ("python-shell-prompt-detect-enabled" variable
               (:documentation "Non-nil enables autodetection of interpreter prompts."
                :default-value t)
                nil [84354 84513])
            ("python-shell-prompt-detect-failure-warning" variable
               (:documentation "Non-nil enables warnings when detection of prompts fail."
                :default-value t)
                nil [84515 84685])
            ("python-shell-prompt-input-regexps" variable
               (:documentation "List of regular expressions matching input prompts."
                :default-value '(">>> " "\\.\\.\\. " "In \\[[0-9]+\\]: " "   \\.\\.\\.: " "In : " "\\.\\.\\.: "))
                nil [84687 85147])
            ("python-shell-prompt-output-regexps" variable
               (:documentation "List of regular expressions matching output prompts."
                :default-value '("" "Out\\[[0-9]+\\]: " "Out :"))
                nil [85149 85451])
            ("python-shell-prompt-regexp" variable
               (:documentation "Regular expression matching top level input prompt of Python shell.
It should not contain a caret (^) at the beginning."
                :default-value ">>> ")
                nil [85453 85638])
            ("python-shell-prompt-block-regexp" variable
               (:documentation "Regular expression matching block input prompt of Python shell.
It should not contain a caret (^) at the beginning."
                :default-value "\\.\\.\\. ")
                nil [85640 85833])
            ("python-shell-prompt-output-regexp" variable (:documentation "Regular expression matching output prompt of Python shell.
It should not contain a caret (^) at the beginning.") nil [85835 86014])
            ("python-shell-prompt-pdb-regexp" variable
               (:documentation "Regular expression matching pdb input prompt of Python shell.
It should not contain a caret (^) at the beginning."
                :default-value "[(<]*[Ii]?[Pp]db[>)]+ ")
                nil [86016 86217])
            ("define-obsolete-variable-alias" code nil nil [86219 86322])
            ("python-shell-font-lock-enable" variable
               (:documentation "Should syntax highlighting be enabled in the Python shell buffer?
Restart the Python shell after changing this variable for it to take effect."
                :default-value t)
                nil [86324 86566])
            ("python-shell-unbuffered" variable
               (:documentation "Should shell output be unbuffered?.
When non-nil, this may prevent delayed and missing output in the
Python shell.  See commentary for details."
                :default-value t)
                nil [86568 86805])
            ("python-shell-process-environment" variable (:documentation "List of overridden environment variables for subprocesses to inherit.
Each element should be a string of the form ENVVARNAME=VALUE.
When this variable is non-nil, values are exported into the
process environment before starting it.  Any variables already
present in the current environment are superseded by variables
set here.") nil [86807 87229])
            ("python-shell-extra-pythonpaths" variable (:documentation "List of extra pythonpaths for Python shell.
When this variable is non-nil, values added at the beginning of
the PYTHONPATH before starting processes.  Any values present
here that already exists in PYTHONPATH are moved to the beginning
of the list so that they are prioritized when looking for
modules.") nil [87231 87626])
            ("python-shell-exec-path" variable (:documentation "List of paths for searching executables.
When this variable is non-nil, values added at the beginning of
the PATH before starting processes.  Any values present here that
already exists in PATH are moved to the beginning of the list so
that they are prioritized when looking for executables.") nil [87628 88004])
            ("python-shell-remote-exec-path" variable (:documentation "List of paths to be ensured remotely for searching executables.
When this variable is non-nil, values are exported into remote
hosts PATH before starting processes.  Values defined in
`python-shell-exec-path' will take precedence to paths defined
here.  Normally you wont use this variable directly unless you
plan to ensure a particular set of paths to all Python shell
executed through tramp connections.") nil [88006 88522])
            ("define-obsolete-variable-alias" code nil nil [88524 88625])
            ("python-shell-virtualenv-root" variable (:documentation "Path to virtualenv root.
This variable, when set to a string, makes the environment to be
modified such that shells are started within the specified
virtualenv.") nil [88627 88890])
            ("python-shell-setup-codes" variable (:documentation "List of code run by `python-shell-send-setup-codes'.") nil [88892 89031])
            ("python-shell-compilation-regexp-alist" variable
               (:documentation "`compilation-error-regexp-alist' for inferior Python."
                :default-value `((,(rx line-start (1+ (any " 	")) "File \"" (group (1+ (not (any "\"<")))) "\", line " (group (1+ digit))) 1 2) (,(rx " in file " (group (1+ not-newline)) " on line " (group (1+ digit))) 1 2) (,(rx line-start "> " (group (1+ (not (any "(\"<")))) "(" (group (1+ digit)) ")" (1+ (not (any "("))) "()") 1 2)))
                nil [89033 89575])
            ("python-shell--add-to-path-with-priority" function
               (:documentation "Modify PATHVAR and ensure PATHS are added only once at beginning."
                :arguments ("pathvar" "paths"))
                nil [89577 89844])
            ("python-shell-calculate-pythonpath" function (:documentation "Calculate the PYTHONPATH using `python-shell-extra-pythonpaths'.") nil [89846 90212])
            ("python-shell-calculate-process-environment" function (:documentation "Calculate `process-environment' or `tramp-remote-process-environment'.
Prepends `python-shell-process-environment', sets extra
pythonpaths from `python-shell-extra-pythonpaths' and sets a few
virtualenv related vars.  If `default-directory' points to a
remote host, the returned value is intended for
`tramp-remote-process-environment'.") nil [90214 91428])
            ("python-shell-calculate-exec-path" function (:documentation "Calculate `exec-path'.
Prepends `python-shell-exec-path' and adds the binary directory
for virtualenv if `python-shell-virtualenv-root' is set - this
will use the python interpreter from inside the virtualenv when
starting the shell.  If `default-directory' points to a remote host,
the returned value appends `python-shell-remote-exec-path' instead
of `exec-path'.") nil [91430 92483])
            ("python-shell-tramp-refresh-remote-path" function
               (:documentation "Update VEC's remote-path giving PATHS priority."
                :arguments ("vec" "paths"))
                nil [92485 92864])
            ("python-shell-tramp-refresh-process-environment" function
               (:documentation "Update VEC's process environment with ENV."
                :arguments ("vec" "env"))
                nil [92866 94060])
            ("python-shell-with-environment" function
               (:documentation "Modify shell environment during execution of BODY.
Temporarily sets `process-environment' and `exec-path' during
execution of body.  If `default-directory' points to a remote
machine then modifies `tramp-remote-process-environment' and
`python-shell-remote-exec-path' instead."
                :arguments ("body"))
                nil [94062 96111])
            ("python-shell--prompt-calculated-input-regexp" variable (:documentation "Calculated input prompt regexp for inferior python shell.
Do not set this variable directly, instead use
`python-shell-prompt-set-calculated-regexps'.") nil [96113 96325])
            ("python-shell--block-prompt" variable (:documentation "Input block prompt for inferior python shell.
Do not set this variable directly, instead use
`python-shell-prompt-set-calculated-regexps'.") nil [96327 96509])
            ("python-shell--prompt-calculated-output-regexp" variable (:documentation "Calculated output prompt regexp for inferior python shell.
Do not set this variable directly, instead use
`python-shell-set-prompt-regexp'.") nil [96511 96713])
            ("python-shell-prompt-detect" function (:documentation "Detect prompts for the current `python-shell-interpreter'.
When prompts can be retrieved successfully from the
`python-shell-interpreter' run with
`python-shell-interpreter-interactive-arg', returns a list of
three elements, where the first two are input prompts and the
last one is an output prompt.  When no prompts can be detected
and `python-shell-prompt-detect-failure-warning' is non-nil,
shows a warning with instructions to avoid hangs and returns nil.
When `python-shell-prompt-detect-enabled' is nil avoids any
detection and just returns nil.") nil [96715 100789])
            ("python-shell-prompt-validate-regexps" function (:documentation "Validate all user provided regexps for prompts.
Signals `user-error' if any of these vars contain invalid
regexps: `python-shell-prompt-regexp',
`python-shell-prompt-block-regexp',
`python-shell-prompt-pdb-regexp',
`python-shell-prompt-output-regexp',
`python-shell-prompt-input-regexps',
`python-shell-prompt-output-regexps'.") nil [100791 101832])
            ("python-shell-prompt-set-calculated-regexps" function (:documentation "Detect and set input and output prompt regexps.
Build and set the values for `python-shell-input-prompt-regexp'
and `python-shell-output-prompt-regexp' using the values from
`python-shell-prompt-regexp', `python-shell-prompt-block-regexp',
`python-shell-prompt-pdb-regexp',
`python-shell-prompt-output-regexp',
`python-shell-prompt-input-regexps',
`python-shell-prompt-output-regexps' and detected prompts from
`python-shell-prompt-detect'.") nil [101834 104631])
            ("python-shell-get-process-name" function
               (:documentation "Calculate the appropriate process name for inferior Python process.
If DEDICATED is t returns a string with the form
`python-shell-buffer-name'[`buffer-name'] else returns the value
of `python-shell-buffer-name'."
                :arguments ("dedicated"))
                nil [104633 105008])
            ("python-shell-internal-get-process-name" function (:documentation "Calculate the appropriate process name for Internal Python process.
The name is calculated from `python-shell-global-buffer-name' and
the `buffer-name'.") nil [105010 105284])
            ("python-shell-calculate-command" function (:documentation "Calculate the string used to execute the inferior Python process.") nil [105286 105657])
            ("define-obsolete-function-alias" code nil nil [105659 105763])
            ("python-shell--package-depth" variable (:default-value 10) nil [105765 105804])
            ("python-shell-package-enable" function
               (:documentation "Add DIRECTORY parent to $PYTHONPATH and enable PACKAGE."
                :user-visible-flag t
                :arguments ("directory" "package"))
                nil [105806 106589])
            ("python-shell-accept-process-output" function
               (:documentation "Accept PROCESS output with TIMEOUT until REGEXP is found.
Optional argument TIMEOUT is the timeout argument to
`accept-process-output' calls.  Optional argument REGEXP
overrides the regexp to match the end of output, defaults to
`comint-prompt-regexp'.  Returns non-nil when output was
properly captured.

This utility is useful in situations where the output may be
received in chunks, since `accept-process-output' gives no
guarantees they will be grabbed in a single call.  An example use
case for this would be the CPython shell start-up, where the
banner and the initial prompt are received separately."
                :arguments ("process" "timeout" "regexp"))
                nil [106591 107575])
            ("python-shell-comint-end-of-output-p" function
               (:documentation "Return non-nil if OUTPUT ends with input prompt."
                :arguments ("output"))
                nil [107577 108025])
            ("define-obsolete-function-alias" code nil nil [108027 108135])
            ("python-comint-postoutput-scroll-to-bottom" function
               (:documentation "Faster version of `comint-postoutput-scroll-to-bottom'.
Avoids `recenter' calls until OUTPUT is completely sent."
                :arguments ("output"))
                nil [108137 108508])
            ("python-shell--parent-buffer" variable nil nil [108510 108550])
            ("python-shell-with-shell-buffer" function
               (:documentation "Execute the forms in BODY with the shell buffer temporarily current.
Signals an error if no shell buffer is available for current buffer."
                :arguments ("body"))
                nil [108552 108980])
            ("python-shell--font-lock-buffer" variable nil nil [108982 109025])
            ("python-shell-font-lock-get-or-create-buffer" function (:documentation "Get or create a font-lock buffer for current inferior process.") nil [109027 109436])
            ("python-shell-font-lock-kill-buffer" function (:documentation "Kill the font-lock buffer safely.") nil [109438 109774])
            ("python-shell-font-lock-with-font-lock-buffer" function
               (:documentation "Execute the forms in BODY in the font-lock buffer.
The value returned is the value of the last form in BODY.  See
also `with-current-buffer'."
                :arguments ("body"))
                nil [109776 110635])
            ("python-shell-font-lock-cleanup-buffer" function
               (:documentation "Cleanup the font-lock buffer.
Provided as a command because this might be handy if something
goes wrong and syntax highlighting in the shell gets messed up."
                :user-visible-flag t)
                nil [110637 110969])
            ("python-shell-font-lock-comint-output-filter-function" function
               (:documentation "Clean up the font-lock buffer after any OUTPUT."
                :arguments ("output"))
                nil [110971 111675])
            ("python-shell-font-lock-post-command-hook" function (:documentation "Fontifies current line in shell buffer.") nil [111677 113725])
            ("python-shell-font-lock-turn-on" function
               (:documentation "Turn on shell font-lock.
With argument MSG show activation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [113727 114419])
            ("python-shell-font-lock-turn-off" function
               (:documentation "Turn off shell font-lock.
With argument MSG show deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [114421 115348])
            ("python-shell-font-lock-toggle" function
               (:documentation "Toggle font-lock for shell.
With argument MSG show activation/deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [115350 115816])
            ("python-shell--first-prompt-received-output-buffer" variable nil nil [115818 115880])
            ("python-shell--first-prompt-received" variable nil nil [115881 115929])
            ("python-shell-first-prompt-hook" variable (:documentation "Hook run upon first (non-pdb) shell prompt detection.
This is the place for shell setup functions that need to wait for
output.  Since the first prompt is ensured, this helps the
current process to not hang while waiting.  This is useful to
safely attach setup code for long-running processes that
eventually provide a shell.") nil [115931 116356])
            ("python-shell-comint-watch-for-first-prompt-output-filter" function
               (:documentation "Run `python-shell-first-prompt-hook' when first prompt is found in OUTPUT."
                :arguments ("output"))
                nil [116358 117445])
            ("python-shell--interpreter" variable nil nil [117620 117654])
            ("python-shell--interpreter-args" variable nil nil [117655 117694])
            ("define-derived-mode" code nil nil [117696 120757])
            ("python-shell-make-comint" function
               (:documentation "Create a Python shell comint buffer.
CMD is the Python command to be executed and PROC-NAME is the
process name the comint buffer will get.  After the comint buffer
is created the `inferior-python-mode' is activated.  When
optional argument SHOW is non-nil the buffer is shown.  When
optional argument INTERNAL is non-nil this process is run on a
buffer with a name that starts with a space, following the Emacs
convention for temporary/internal buffers, and also makes sure
the user is not queried for confirmation when the process is
killed."
                :arguments ("cmd" "proc-name" "show" "internal"))
                nil [120759 122723])
            ("run-python" function
               (:documentation "Run an inferior Python process.

Argument CMD defaults to `python-shell-calculate-command' return
value.  When called interactively with `prefix-arg', it allows
the user to edit such value and choose whether the interpreter
should be DEDICATED for the current buffer.  When numeric prefix
arg is other than 0 or 4 do not SHOW.

For a given buffer and same values of DEDICATED, if a process is
already running for it, it will do nothing.  This means that if
the current buffer is using a global process, the user is still
able to switch it to use a dedicated one.

Runs the hook `inferior-python-mode-hook' after
`comint-mode-hook' is run.  (Type \\[describe-mode] in the
process buffer for a list of commands.)"
                :user-visible-flag t
                :arguments ("cmd" "dedicated" "show"))
                nil [122740 124014])
            ("run-python-internal" function (:documentation "Run an inferior Internal Python process.
Input and output via buffer named after
`python-shell-internal-buffer-name' and what
`python-shell-internal-get-process-name' returns.

This new kind of shell is intended to be used for generic
communication related to defined configurations; the main
difference with global or dedicated shells is that these ones are
attached to a configuration, not a buffer.  This means that can
be used for example to retrieve the sys.path and other stuff,
without messing with user shells.  Note that
`python-shell-font-lock-enable' and `inferior-python-mode-hook'
are set to nil for these shells, so setup codes are not sent at
startup.") nil [124016 124952])
            ("python-shell-get-buffer" function (:documentation "Return inferior Python buffer for current buffer.
If current buffer is in `inferior-python-mode', return it.") nil [124954 125752])
            ("python-shell-get-process" function (:documentation "Return inferior Python process for current buffer.") nil [125754 125893])
            ("python-shell-get-process-or-error" function
               (:documentation "Return inferior Python process for current buffer or signal error.
When argument INTERACTIVEP is non-nil, use `user-error' instead
of `error' with a user-friendly message."
                :arguments ("interactivep"))
                nil [125895 126495])
            ("python-shell-get-or-create-process" function
               (:documentation "Get or create an inferior Python process for current buffer and return it.
Arguments CMD, DEDICATED and SHOW are those of `run-python' and
are used to start the shell.  If those arguments are not
provided, `run-python' is called interactively and the user will
be asked for their values."
                :arguments ("cmd" "dedicated" "show"))
                nil [126497 127213])
            ("make-obsolete" code nil nil [127215 127350])
            ("define-obsolete-variable-alias" code nil nil [127352 127438])
            ("python-shell-internal-buffer" variable (:documentation "Current internal shell buffer for the current buffer.
This is really not necessary at all for the code to work but it's
there for compatibility with CEDET.") nil [127440 127641])
            ("define-obsolete-variable-alias" code nil nil [127643 127744])
            ("python-shell-internal-last-output" variable (:documentation "Last output captured by the internal shell.
This is really not necessary at all for the code to work but it's
there for compatibility with CEDET.") nil [127746 127942])
            ("python-shell-internal-get-or-create-process" function (:documentation "Get or create an inferior Internal Python process.") nil [127944 128212])
            ("define-obsolete-function-alias" code nil nil [128214 128313])
            ("python-shell--save-temp-file" function (:arguments ("string")) nil [128315 128766])
            ("python-shell-send-string" function
               (:documentation "Send STRING to inferior Python PROCESS.
When optional argument MSG is non-nil, forces display of a
user-friendly message if there's no process running; defaults to
t when called interactively."
                :user-visible-flag t
                :arguments ("string" "process" "msg"))
                nil [128768 129621])
            ("python-shell-output-filter-in-progress" variable nil nil [129623 129674])
            ("python-shell-output-filter-buffer" variable nil nil [129675 129721])
            ("python-shell-output-filter" function
               (:documentation "Filter used in `python-shell-send-string-no-output' to grab output.
STRING is the output received to this point from the process.
This filter saves received output from the process in
`python-shell-output-filter-buffer' and stops receiving it after
detecting a prompt at the end of the buffer."
                :arguments ("string"))
                nil [129723 130956])
            ("python-shell-send-string-no-output" function
               (:documentation "Send STRING to PROCESS and inhibit output.
Return the output."
                :arguments ("string" "process"))
                nil [130958 131863])
            ("python-shell-internal-send-string" function
               (:documentation "Send STRING to the Internal Python interpreter.
Returns the output.  See `python-shell-send-string-no-output'."
                :arguments ("string"))
                nil [131865 132450])
            ("define-obsolete-function-alias" code nil nil [132452 132549])
            ("define-obsolete-function-alias" code nil nil [132551 132647])
            ("python-shell-buffer-substring" function
               (:documentation "Send buffer substring from START to END formatted for shell.
This is a wrapper over `buffer-substring' that takes care of
different transformations for the code sent to be evaluated in
the python shell:
  1. When optional argument NOMAIN is non-nil everything under an
     \"if __name__ == \\='__main__\\='\" block will be removed.
  2. When a subregion of the buffer is sent, it takes care of
     appending extra empty lines so tracebacks are correct.
  3. When the region sent is a substring of the current buffer, a
     coding cookie is added.
  4. Wraps indented regions under an \"if True:\" block so the
     interpreter evaluates them correctly."
                :arguments ("start" "end" "nomain"))
                nil [132649 135969])
            ("python-shell-send-region" function
               (:documentation "Send the region delimited by START and END to inferior Python process.
When optional argument SEND-MAIN is non-nil, allow execution of
code inside blocks delimited by \"if __name__== \\='__main__\\=':\".
When called interactively SEND-MAIN defaults to nil, unless it's
called with prefix argument.  When optional argument MSG is
non-nil, forces display of a user-friendly message if there's no
process running; defaults to t when called interactively."
                :user-visible-flag t
                :arguments ("start" "end" "send-main" "msg"))
                nil [135971 136949])
            ("python-shell-send-buffer" function
               (:documentation "Send the entire buffer to inferior Python process.
When optional argument SEND-MAIN is non-nil, allow execution of
code inside blocks delimited by \"if __name__== \\='__main__\\=':\".
When called interactively SEND-MAIN defaults to nil, unless it's
called with prefix argument.  When optional argument MSG is
non-nil, forces display of a user-friendly message if there's no
process running; defaults to t when called interactively."
                :user-visible-flag t
                :arguments ("send-main" "msg"))
                nil [136951 137591])
            ("python-shell-send-defun" function
               (:documentation "Send the current defun to inferior Python process.
When argument ARG is non-nil do not include decorators.  When
optional argument MSG is non-nil, forces display of a
user-friendly message if there's no process running; defaults to
t when called interactively."
                :user-visible-flag t
                :arguments ("arg" "msg"))
                nil [137593 138566])
            ("python-shell-send-file" function
               (:documentation "Send FILE-NAME to inferior Python PROCESS.
If TEMP-FILE-NAME is passed then that file is used for processing
instead, while internally the shell will continue to use
FILE-NAME.  If TEMP-FILE-NAME and DELETE are non-nil, then
TEMP-FILE-NAME is deleted after evaluation is performed.  When
optional argument MSG is non-nil, forces display of a
user-friendly message if there's no process running; defaults to
t when called interactively."
                :user-visible-flag t
                :arguments ("file-name" "process" "temp-file-name" "delete" "msg"))
                nil [138568 140360])
            ("python-shell-switch-to-shell" function
               (:documentation "Switch to inferior Python process buffer.
When optional argument MSG is non-nil, forces display of a
user-friendly message if there's no process running; defaults to
t when called interactively."
                :user-visible-flag t
                :arguments ("msg"))
                nil [140362 140717])
            ("python-shell-send-setup-code" function (:documentation "Send all setup code for shell.
This function takes the list of setup code to send from the
`python-shell-setup-codes' list.") nil [140719 141399])
            ("add-hook" code nil nil [141401 141484])
            ("python-shell-completion-setup-code" variable
               (:documentation "Code used to setup completion in inferior Python processes."
                :default-value "
def __PYTHON_EL_get_completions(text):
    completions = []
    completer = None

    try:
        import readline

        try:
            import __builtin__
        except ImportError:
            # Python 3
            import builtins as __builtin__
        builtins = dir(__builtin__)

        is_ipython = ('__IPYTHON__' in builtins or
                      '__IPYTHON__active' in builtins)
        splits = text.split()
        is_module = splits and splits[0] in ('from', 'import')

        if is_ipython and is_module:
            from IPython.core.completerlib import module_completion
            completions = module_completion(text.strip())
        elif is_ipython and '__IP' in builtins:
            completions = __IP.complete(text)
        elif is_ipython and 'get_ipython' in builtins:
            completions = get_ipython().Completer.all_completions(text)
        else:
            # Try to reuse current completer.
            completer = readline.get_completer()
            if not completer:
                # importing rlcompleter sets the completer, use it as a
                # last resort to avoid breaking customizations.
                import rlcompleter
                completer = readline.get_completer()
            if getattr(completer, 'PYTHON_EL_WRAPPED', False):
                completer.print_mode = False
            i = 0
            while True:
                completion = completer(text, i)
                if not completion:
                    break
                i += 1
                completions.append(completion)
    except:
        pass
    finally:
        if getattr(completer, 'PYTHON_EL_WRAPPED', False):
            completer.print_mode = True
    return completions")
                nil [141510 143385])
            ("define-obsolete-variable-alias" code nil nil [143387 143572])
            ("define-obsolete-variable-alias" code nil nil [143574 143746])
            ("python-shell-completion-string-code" variable
               (:documentation "Python code used to get a string of completions separated by semicolons.
The string passed to the function is the current python name or
the full statement in the case of imports."
                :default-value "';'.join(__PYTHON_EL_get_completions('''%s'''))")
                nil [143748 144064])
            ("python-shell-completion-native-disabled-interpreters" variable
               (:documentation "List of disabled interpreters.
When a match is found, native completion is disabled."
                :default-value (if (eq system-type 'windows-nt) '("") '("pypy" "ipython")))
                nil [144066 144531])
            ("python-shell-completion-native-enable" variable
               (:documentation "Enable readline based native completion."
                :default-value t)
                nil [144533 144664])
            ("python-shell-completion-native-output-timeout" variable
               (:documentation "Time in seconds to wait for completion output before giving up."
                :default-value 5.0)
                nil [144666 144828])
            ("python-shell-completion-native-try-output-timeout" variable
               (:documentation "Time in seconds to wait for *trying* native completion output."
                :default-value 1.0)
                nil [144830 144995])
            ("python-shell-completion-native-redirect-buffer" variable
               (:documentation "Buffer to be used to redirect output of readline commands."
                :default-value " *Python completions redirect*")
                nil [144997 145150])
            ("python-shell-completion-native-interpreter-disabled-p" function (:documentation "Return non-nil if interpreter has native completion disabled.") nil [145152 145489])
            ("python-shell-completion-native-try" function (:documentation "Return non-nil if can trigger native completion.") nil [145491 145865])
            ("python-shell-completion-native-setup" function (:documentation "Try to setup native completion, return non-nil on success.") nil [145867 151173])
            ("python-shell-completion-native-turn-off" function
               (:documentation "Turn off shell native completions.
With argument MSG show deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [151175 151537])
            ("python-shell-completion-native-turn-on" function
               (:documentation "Turn on shell native completions.
With argument MSG show deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [151539 151867])
            ("python-shell-completion-native-turn-on-maybe" function
               (:documentation "Turn on native completions if enabled and available.
With argument MSG show activation/deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [151869 152997])
            ("python-shell-completion-native-turn-on-maybe-with-msg" function (:documentation "Like `python-shell-completion-native-turn-on-maybe' but force messages.") nil [152999 153190])
            ("add-hook" code nil nil [153192 153300])
            ("python-shell-completion-native-toggle" function
               (:documentation "Toggle shell native completion.
With argument MSG show activation/deactivation message."
                :user-visible-flag t
                :arguments ("msg"))
                nil [153302 153704])
            ("python-shell-completion-native-get-completions" function
               (:documentation "Get completions using native readline for PROCESS.
When IMPORT is non-nil takes precedence over INPUT for
completion."
                :arguments ("process" "import" "input"))
                nil [153706 156737])
            ("python-shell-completion-get-completions" function
               (:documentation "Do completion at point using PROCESS for IMPORT or INPUT.
When IMPORT is non-nil takes precedence over INPUT for
completion."
                :arguments ("process" "import" "input"))
                nil [156739 157440])
            ("python-shell-completion-at-point" function
               (:documentation "Function for `completion-at-point-functions' in `inferior-python-mode'.
Optional argument PROCESS forces completions to be retrieved
using that one instead of current buffer's process."
                :arguments ("process"))
                nil [157442 160424])
            ("define-obsolete-function-alias" code nil nil [160426 160548])
            ("python-shell-completion-complete-or-indent" function
               (:documentation "Complete or indent depending on the context.
If content before pointer is all whitespace, indent.
If not try to complete."
                :user-visible-flag t)
                nil [160550 160959])
            ("python-pdbtrack-activate" variable
               (:documentation "Non-nil makes Python shell enable pdbtracking."
                :default-value t)
                nil [160990 161131])
            ("python-pdbtrack-stacktrace-info-regexp" variable
               (:documentation "Regular expression matching stacktrace information.
Used to extract the current line and module being inspected."
                :default-value "> \\([^\"(<]+\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_<>]+\\)()")
                nil [161133 161409])
            ("python-pdbtrack-tracked-buffer" variable (:documentation "Variable containing the value of the current tracked buffer.
Never set this variable directly, use
`python-pdbtrack-set-tracked-buffer' instead.") nil [161411 161603])
            ("python-pdbtrack-buffers-to-kill" variable (:documentation "List of buffers to be deleted after tracking finishes.") nil [161605 161708])
            ("python-pdbtrack-set-tracked-buffer" function
               (:documentation "Set the buffer for FILE-NAME as the tracked buffer.
Internally it uses the `python-pdbtrack-tracked-buffer' variable.
Returns the tracked buffer."
                :arguments ("file-name"))
                nil [161710 162672])
            ("python-pdbtrack-comint-output-filter-function" function
               (:documentation "Move overlay arrow to current pdb line in tracked buffer.
Argument OUTPUT is a string with the output from the comint process."
                :arguments ("output"))
                nil [162674 165538])
            ("python-completion-at-point" function (:documentation "Function for `completion-at-point-functions' in `python-mode'.
For this to work as best as possible you should call
`python-shell-send-buffer' from time to time so context in
inferior Python process is updated properly.") nil [165565 165941])
            ("define-obsolete-function-alias" code nil nil [165943 166053])
            ("python-fill-comment-function" variable
               (:documentation "Function to fill comments.
This is the function used by `python-fill-paragraph' to
fill comments."
                :default-value 'python-fill-comment)
                nil [166077 166273])
            ("python-fill-string-function" variable
               (:documentation "Function to fill strings.
This is the function used by `python-fill-paragraph' to
fill strings."
                :default-value 'python-fill-string)
                nil [166275 166467])
            ("python-fill-decorator-function" variable
               (:documentation "Function to fill decorators.
This is the function used by `python-fill-paragraph' to
fill decorators."
                :default-value 'python-fill-decorator)
                nil [166469 166673])
            ("python-fill-paren-function" variable
               (:documentation "Function to fill parens.
This is the function used by `python-fill-paragraph' to
fill parens."
                :default-value 'python-fill-paren)
                nil [166675 166863])
            ("python-fill-docstring-style" variable
               (:documentation "Style used to fill docstrings.
This affects `python-fill-string' behavior with regards to
triple quotes positioning.

Possible values are `django', `onetwo', `pep-257', `pep-257-nn',
`symmetric', and nil.  A value of nil won't care about quotes
position and will treat docstrings a normal string, any other
value may result in one of the following docstring styles:

`django':

    \"\"\"
    Process foo, return bar.
    \"\"\"

    \"\"\"
    Process foo, return bar.

    If processing fails throw ProcessingError.
    \"\"\"

`onetwo':

    \"\"\"Process foo, return bar.\"\"\"

    \"\"\"
    Process foo, return bar.

    If processing fails throw ProcessingError.

    \"\"\"

`pep-257':

    \"\"\"Process foo, return bar.\"\"\"

    \"\"\"Process foo, return bar.

    If processing fails throw ProcessingError.

    \"\"\"

`pep-257-nn':

    \"\"\"Process foo, return bar.\"\"\"

    \"\"\"Process foo, return bar.

    If processing fails throw ProcessingError.
    \"\"\"

`symmetric':

    \"\"\"Process foo, return bar.\"\"\"

    \"\"\"
    Process foo, return bar.

    If processing fails throw ProcessingError.
    \"\"\""
                :default-value 'pep-257)
                nil [166865 168585])
            ("python-fill-paragraph" function
               (:documentation "`fill-paragraph-function' handling multi-line strings and possibly comments.
If any of the current line is in or at the end of a multi-line string,
fill the string or the paragraph of it that point is in, preserving
the string's indentation.
Optional argument JUSTIFY defines if the paragraph should be justified."
                :user-visible-flag t
                :arguments ("justify"))
                nil [168587 169852])
            ("python-fill-comment" function
               (:documentation "Comment fill function for `python-fill-paragraph'.
JUSTIFY should be used (if applicable) as in `fill-paragraph'."
                :arguments ("justify"))
                nil [169854 170054])
            ("python-fill-string" function
               (:documentation "String fill function for `python-fill-paragraph'.
JUSTIFY should be used (if applicable) as in `fill-paragraph'."
                :arguments ("justify"))
                nil [170056 173026])
            ("python-fill-decorator" function
               (:documentation "Decorator fill function for `python-fill-paragraph'.
JUSTIFY should be used (if applicable) as in `fill-paragraph'."
                :arguments ("_justify"))
                nil [173028 173202])
            ("python-fill-paren" function
               (:documentation "Paren fill function for `python-fill-paragraph'.
JUSTIFY should be used (if applicable) as in `fill-paragraph'."
                :arguments ("justify"))
                nil [173204 174340])
            ("define-obsolete-variable-alias" code nil nil [174359 174450])
            ("python-skeleton-autoinsert" variable (:documentation "Non-nil means template skeletons will be automagically inserted.
This happens when pressing \"if<SPACE>\", for example, to prompt for
the if condition.") nil [174452 174702])
            ("python-skeleton-available" variable
               (:documentation "Internal list of available skeletons."
                :default-value 'nil)
                nil [174704 174784])
            ("define-abbrev-table" code nil nil [174786 175185])
            ("python-skeleton-define" function
               (:documentation "Define a `python-mode' skeleton using NAME DOC and SKEL.
The skeleton will be bound to python-skeleton-NAME and will
be added to `python-mode-skeleton-abbrev-table'."
                :arguments ("name" "doc" "skel"))
                nil [175187 175881])
            ("define-abbrev-table" code nil nil [175883 176019])
            ("python-define-auxiliary-skeleton" function
               (:documentation "Define a `python-mode' auxiliary skeleton using NAME DOC and SKEL.
The skeleton will be bound to python-skeleton-NAME."
                :arguments ("name" "doc" "skel"))
                nil [176021 176787])
            ("python-define-auxiliary-skeleton" code nil nil [176789 176828])
            ("python-define-auxiliary-skeleton" code nil nil [176830 176871])
            ("python-define-auxiliary-skeleton" code nil nil [176873 176915])
            ("python-skeleton-define" code nil nil [176917 177090])
            ("python-skeleton-define" code nil nil [177092 177204])
            ("python-skeleton-define" code nil nil [177206 177319])
            ("python-skeleton-define" code nil nil [177321 177454])
            ("python-skeleton-define" code nil nil [177456 177680])
            ("python-skeleton-define" code nil nil [177682 177925])
            ("python-skeleton-define" code nil nil [177927 178159])
            ("python-skeleton-add-menu-items" function (:documentation "Add menu items to Python->Skeletons menu.") nil [178161 178522])
            ("python-ffap-setup-code" variable
               (:documentation "Python code to get a module path."
                :default-value "
def __FFAP_get_module_path(objstr):
    try:
        import inspect
        import os.path
        # NameError exceptions are delayed until this point.
        obj = eval(objstr)
        module = inspect.getmodule(obj)
        filename = module.__file__
        ext = os.path.splitext(filename)[1]
        if ext in ('.pyc', '.pyo'):
            # Point to the source file.
            filename = filename[:-1]
        if os.path.exists(filename):
            return filename
        return ''
    except:
        return ''")
                nil [178535 179169])
            ("python-ffap-string-code" variable
               (:documentation "Python code used to get a string with the path of a module."
                :default-value "__FFAP_get_module_path('''%s''')")
                nil [179171 179340])
            ("python-ffap-module-path" function
               (:documentation "Function for `ffap-alist' to return path for MODULE."
                :arguments ("module"))
                nil [179342 179995])
            ("ffap-alist" variable nil nil [179997 180016])
            ("eval-after-load" code nil nil [180018 180190])
            ("python-check-command" variable
               (:documentation "Command used to check a Python file."
                :default-value (or (executable-find "pyflakes") (executable-find "epylint") "install pyflakes, pylint or something else"))
                nil [180210 180437])
            ("python-check-buffer-name" variable
               (:documentation "Buffer name used for check commands."
                :default-value "*Python check: %s*")
                nil [180439 180572])
            ("python-check-custom-command" variable (:documentation "Internal use.") nil [180574 180632])
            ("make-variable-buffer-local" code nil nil [180689 180746])
            ("python-check" function
               (:documentation "Check a Python file (default current buffer's file).
Runs COMMAND, a shell command, as if by `compile'.
See `python-check-command' for the default."
                :user-visible-flag t
                :arguments ("command"))
                nil [180748 181716])
            ("python-eldoc-setup-code" variable
               (:documentation "Python code to setup documentation retrieval."
                :default-value "def __PYDOC_get_help(obj):
    try:
        import inspect
        try:
            str_type = basestring
            argspec_function = inspect.getargspec
        except NameError:
            str_type = str
            argspec_function = inspect.getfullargspec
        if isinstance(obj, str_type):
            obj = eval(obj, globals())
        doc = inspect.getdoc(obj)
        if not doc and callable(obj):
            target = None
            if inspect.isclass(obj) and hasattr(obj, '__init__'):
                target = obj.__init__
                objtype = 'class'
            else:
                target = obj
                objtype = 'def'
            if target:
                args = inspect.formatargspec(*argspec_function(target))
                name = obj.__name__
                doc = '{objtype} {name}{args}'.format(
                    objtype=objtype, name=name, args=args
                )
        else:
            doc = doc.splitlines()[0]
    except:
        doc = ''
    return doc")
                nil [181731 182866])
            ("python-eldoc-string-code" variable
               (:documentation "Python code used to get a string with the documentation of an object."
                :default-value "__PYDOC_get_help('''%s''')")
                nil [182868 183042])
            ("python-eldoc--get-symbol-at-point" function (:documentation "Get the current symbol for eldoc.
Returns the current symbol handling point within arguments.") nil [183044 183541])
            ("python-eldoc--get-doc-at-point" function
               (:documentation "Internal implementation to get documentation at point.
If not FORCE-INPUT is passed then what `python-eldoc--get-symbol-at-point'
returns will be used.  If not FORCE-PROCESS is passed what
`python-shell-get-process' returns is used."
                :arguments ("force-input" "force-process"))
                nil [183543 184530])
            ("defvar-local" code nil nil [184532 184778])
            ("python-eldoc-function-timeout" variable
               (:documentation "Timeout for `python-eldoc-function' in seconds."
                :default-value 1)
                nil [184780 184927])
            ("python-eldoc-function-timeout-permanent" variable
               (:documentation "Non-nil means that when `python-eldoc-function' times out
`python-eldoc-get-doc' will be set to nil"
                :default-value t)
                nil [184929 185138])
            ("python-eldoc-function" function (:documentation "`eldoc-documentation-function' for Python.
For this to work as best as possible you should call
`python-shell-send-buffer' from time to time so context in
inferior Python process is updated properly.

If `python-eldoc-function-timeout' seconds elapse before this
function returns then if
`python-eldoc-function-timeout-permanent' is non-nil
`python-eldoc-get-doc' will be set to nil and eldoc will no
longer return the documentation at the point automatically.

Set `python-eldoc-get-doc' to t to reenable eldoc documentation
fetching") nil [185140 186198])
            ("python-eldoc-at-point" function
               (:documentation "Get help on SYMBOL using `help'.
Interactively, prompt for symbol."
                :user-visible-flag t
                :arguments ("symbol"))
                nil [186200 186675])
            ("python-describe-at-point" function (:arguments ("symbol" "process")) nil [186677 186889])
            ("python-hideshow-forward-sexp-function" function
               (:documentation "Python specific `forward-sexp' function for `hs-minor-mode'.
Argument ARG is ignored."
                :arguments ("arg"))
                nil [186907 187175])
            ("python-imenu-format-item-label-function" variable
               (:documentation "Imenu function used to format an item label.
It must be a function with two arguments: TYPE and NAME."
                :default-value 'python-imenu-format-item-label)
                nil [187190 187378])
            ("python-imenu-format-parent-item-label-function" variable
               (:documentation "Imenu function used to format a parent item label.
It must be a function with two arguments: TYPE and NAME."
                :default-value 'python-imenu-format-parent-item-label)
                nil [187380 187588])
            ("python-imenu-format-parent-item-jump-label-function" variable
               (:documentation "Imenu function used to format a parent jump item label.
It must be a function with two arguments: TYPE and NAME."
                :default-value 'python-imenu-format-parent-item-jump-label)
                nil [187590 187813])
            ("python-imenu-format-item-label" function
               (:documentation "Return Imenu label for single node using TYPE and NAME."
                :arguments ("type" "name"))
                nil [187815 187956])
            ("python-imenu-format-parent-item-label" function
               (:documentation "Return Imenu label for parent node using TYPE and NAME."
                :arguments ("type" "name"))
                nil [187958 188137])
            ("python-imenu-format-parent-item-jump-label" function
               (:documentation "Return Imenu label for parent node jump using TYPE and NAME."
                :arguments ("type" "_name"))
                nil [188139 188352])
            ("python-imenu--get-defun-type-name" function (:documentation "Return defun type and name at current position.") nil [188354 188709])
            ("python-imenu--put-parent" function
               (:documentation "Add the parent with TYPE, NAME and POS to TREE."
                :arguments ("type" "name" "pos" "tree"))
                nil [188711 189103])
            ("python-imenu--build-tree" function
               (:documentation "Recursively build the tree of nested definitions of a node.
Arguments MIN-INDENT, PREV-INDENT and TREE are internal and should
not be passed explicitly unless you know what you are doing."
                :arguments ("min-indent" "prev-indent" "tree"))
                nil [189105 190983])
            ("python-imenu-create-index" function (:documentation "Return tree Imenu alist for the current Python buffer.
Change `python-imenu-format-item-label-function',
`python-imenu-format-parent-item-label-function',
`python-imenu-format-parent-item-jump-label-function' to
customize how labels are formatted.") nil [190985 191430])
            ("python-imenu-create-flat-index" function
               (:documentation "Return flat outline of the current Python buffer for Imenu.
Optional argument ALIST is the tree to be flattened; when nil
`python-imenu-build-index' is used with
`python-imenu-format-parent-item-jump-label-function'
`python-imenu-format-parent-item-label-function'
`python-imenu-format-item-label-function' set to
  (lambda (type name) name)
Optional argument PREFIX is used in recursive calls and should
not be passed explicitly.

Converts this:

    ((\"Foo\" . 103)
     (\"Bar\" . 138)
     (\"decorator\"
      (\"decorator\" . 173)
      (\"wrap\"
       (\"wrap\" . 353)
       (\"wrapped_f\" . 393))))

To this:

    ((\"Foo\" . 103)
     (\"Bar\" . 138)
     (\"decorator\" . 173)
     (\"decorator.wrap\" . 353)
     (\"decorator.wrapped_f\" . 393))"
                :arguments ("alist" "prefix"))
                nil [191432 193067])
            ("python-info-current-defun" function
               (:documentation "Return name of surrounding function with Python compatible dotty syntax.
Optional argument INCLUDE-TYPE indicates to include the type of the defun.
This function can be used as the value of `add-log-current-defun-function'
since it returns nil if point is not inside a defun."
                :arguments ("include-type"))
                nil [193089 196122])
            ("python-info-current-symbol" function
               (:documentation "Return current symbol using dotty syntax.
With optional argument REPLACE-SELF convert \"self\" to current
parent defun name."
                :arguments ("replace-self"))
                nil [196124 197048])
            ("python-info-statement-starts-block-p" function (:documentation "Return non-nil if current statement opens a block.") nil [197050 197252])
            ("python-info-statement-ends-block-p" function (:documentation "Return non-nil if point is at end of block.") nil [197254 197656])
            ("python-info-beginning-of-statement-p" function (:documentation "Return non-nil if point is at beginning of statement.") nil [197658 197868])
            ("python-info-end-of-statement-p" function (:documentation "Return non-nil if point is at end of statement.") nil [197870 198062])
            ("python-info-beginning-of-block-p" function (:documentation "Return non-nil if point is at beginning of block.") nil [198064 198254])
            ("python-info-end-of-block-p" function (:documentation "Return non-nil if point is at end of block.") nil [198256 198426])
            ("define-obsolete-function-alias" code nil nil [198428 198543])
            ("python-info-dedenter-opening-block-position" function (:documentation "Return the point of the closest block the current line closes.
Returns nil if point is not on a dedenter statement or no opening
block can be detected.  The latter case meaning current file is
likely an invalid python file.") nil [198545 199229])
            ("python-info-dedenter-opening-block-positions" function (:documentation "Return points of blocks the current line may close sorted by closer.
Returns nil if point is not on a dedenter statement or no opening
block can be detected.  The latter case meaning current file is
likely an invalid python file.") nil [199231 202015])
            ("define-obsolete-function-alias" code nil nil [202017 202139])
            ("python-info-dedenter-opening-block-message" function (:documentation "Message the first line of the block the current statement closes.") nil [202141 202552])
            ("python-info-dedenter-statement-p" function (:documentation "Return point if current statement is a dedenter.
Sets `match-data' to the keyword that starts the dedenter
statement.") nil [202554 202893])
            ("python-info-line-ends-backslash-p" function
               (:documentation "Return non-nil if current line ends with backslash.
With optional argument LINE-NUMBER, check that line instead."
                :arguments ("line-number"))
                nil [202895 203442])
            ("python-info-beginning-of-backslash" function
               (:documentation "Return the point where the backslashed line starts.
Optional argument LINE-NUMBER forces the line number to check against."
                :arguments ("line-number"))
                nil [203444 203991])
            ("python-info-continuation-line-p" function (:documentation "Check if current line is continuation of another.
When current line is continuation of another return the point
where the continued line ends.") nil [203993 205512])
            ("python-info-block-continuation-line-p" function (:documentation "Return non-nil if current line is a continuation of a block.") nil [205514 205816])
            ("python-info-assignment-statement-p" function
               (:documentation "Check if current line is an assignment.
With argument CURRENT-LINE-ONLY is non-nil, don't follow any
continuations, just check the if current line is an assignment."
                :arguments ("current-line-only"))
                nil [205818 206803])
            ("python-info-assignment-continuation-line-p" function (:documentation "Check if current line is the first continuation of an assignment.
When current line is continuation of another with an assignment
return the point of the first non-blank character after the
operator.") nil [206939 207329])
            ("python-info-looking-at-beginning-of-defun" function
               (:documentation "Check if point is at `beginning-of-defun' using SYNTAX-PPSS."
                :arguments ("syntax-ppss"))
                nil [207331 207657])
            ("python-info-current-line-comment-p" function (:documentation "Return non-nil if current line is a comment line.") nil [207659 207855])
            ("python-info-current-line-empty-p" function (:documentation "Return non-nil if current line is empty, ignoring whitespace.") nil [207857 208204])
            ("python-info-docstring-p" function
               (:documentation "Return non-nil if point is in a docstring.
When optional argument SYNTAX-PPSS is given, use that instead of
point's current `syntax-ppss'."
                :arguments ("syntax-ppss"))
                nil [208206 210400])
            ("python-info-encoding-from-cookie" function (:documentation "Detect current buffer's encoding from its coding cookie.
Returns the encoding as a symbol.") nil [210402 210936])
            ("python-info-encoding" function (:documentation "Return encoding for file.
Try `python-info-encoding-from-cookie', if none is found then
default to utf-8.") nil [210938 211406])
            ("python-util-goto-line" function
               (:documentation "Move point to LINE-NUMBER."
                :arguments ("line-number"))
                nil [211433 211567])
            ("python-util-clone-local-variables" function
               (:documentation "Clone local variables from FROM-BUFFER.
Optional argument REGEXP selects variables to clone and defaults
to \"^python-\"."
                :arguments ("from-buffer" "regexp"))
                nil [211593 212063])
            ("comint-last-prompt-overlay" variable nil nil [212065 212100])
            ("python-util-comint-last-prompt" function (:documentation "Return comint last prompt overlay start and end.
This is for compatibility with Emacs < 24.4.") nil [212132 212535])
            ("python-util-forward-comment" function
               (:documentation "Python mode specific version of `forward-comment'.
Optional argument DIRECTION defines the direction to move to."
                :arguments ("direction"))
                nil [212537 212952])
            ("python-util-list-directories" function
               (:documentation "List DIRECTORY subdirs, filtered by PREDICATE and limited by MAX-DEPTH.
Argument PREDICATE defaults to `identity' and must be a function
that takes one argument (a full path) and returns non-nil for
allowed files.  When optional argument MAX-DEPTH is non-nil, stop
searching when depth is reached, else don't limit."
                :arguments ("directory" "predicate" "max-depth"))
                nil [212954 214159])
            ("python-util-list-files" function
               (:documentation "List files in DIR, filtering with PREDICATE.
Argument PREDICATE defaults to `identity' and must be a function
that takes one argument (a full path) and returns non-nil for
allowed files."
                :arguments ("dir" "predicate"))
                nil [214161 214880])
            ("python-util-list-packages" function
               (:documentation "List packages in DIR, limited by MAX-DEPTH.
When optional argument MAX-DEPTH is non-nil, stop searching when
depth is reached, else don't limit."
                :arguments ("dir" "max-depth"))
                nil [214882 215667])
            ("python-util-popn" function
               (:documentation "Return LST first N elements.
N should be an integer, when negative its opposite is used.
When N is bigger than the length of LST, the list is
returned as is."
                :arguments ("lst" "n"))
                nil [215669 216099])
            ("python-util-strip-string" function
               (:documentation "Strip STRING whitespace and newlines from end and beginning."
                :arguments ("string"))
                nil [216101 216366])
            ("python-util-valid-regexp-p" function
               (:documentation "Return non-nil if REGEXP is valid."
                :arguments ("regexp"))
                nil [216368 216495])
            ("python-flymake" customgroup
               (:documentation "Integration between Python and Flymake."
                :user-visible-flag t)
                nil [216524 216684])
            ("python-flymake-command" variable
               (:documentation "The external tool that will be used to perform the syntax check.
This is a non empty list of strings, the checker tool possibly followed by
required arguments.  Once launched it will receive the Python source to be
checked as its standard input.
To use `flake8' you would set this to (\"flake8\" \"-\")."
                :default-value '("pyflakes"))
                nil [216686 217110])
            ("python-flymake-command-output-pattern" variable
               (:documentation "Specify how to parse the output of `python-flymake-command'.
The value has the form (REGEXP LINE COLUMN TYPE MESSAGE): if
REGEXP matches, the LINE'th subexpression gives the line number,
the COLUMN'th subexpression gives the column number on that line,
the TYPE'th subexpression gives the type of the message and the
MESSAGE'th gives the message text itself.

If COLUMN or TYPE are nil or that index didn't match, that
information is not present on the matched line and a default will
be used."
                :default-value (list "^\\(?:<?stdin>?\\):\\(?1:[0-9]+\\):\\(?:\\(?2:[0-9]+\\):\\)? \\(?3:.*\\)$" 1 2 nil 3))
                nil [217330 218367])
            ("python-flymake-msg-alist" variable
               (:documentation "Alist used to associate messages to their types.
Each element should be a cons-cell (REGEXP . TYPE), where TYPE
should be a diagnostic type symbol like `:error', `:warning' or
`:note'.  For example, when using `flake8' a possible
configuration could be:

  ((\"\\(^redefinition\\|.*unused.*\\|used$\\)\" . :warning)
   (\"^E999\" . :error)
   (\"^[EW][0-9]+\" . :note))

By default messages are considered errors."
                :default-value '(("\\(^redefinition\\|.*unused.*\\|used$\\)" . :warning)))
                nil [218369 219000])
            ("defvar-local" code nil nil [219002 219041])
            ("python--flymake-parse-output" function
               (:documentation "Collect diagnostics parsing checker tool's output line by line."
                :arguments ("source" "proc" "report-fn"))
                nil [219043 220638])
            ("python-flymake" function
               (:documentation "Flymake backend for Python.
This backend uses `python-flymake-command' (which see) to launch a process
that is passed the current buffer's content via stdin.
REPORT-FN is Flymake's callback function."
                :arguments ("report-fn" "_args"))
                nil [220640 221935])
            ("python-electric-pair-string-delimiter" function nil nil [221939 222356])
            ("electric-indent-inhibit" variable nil nil [222358 222390])
            ("prettify-symbols-alist" variable nil nil [222391 222422])
            ("define-derived-mode" code nil nil [222439 226144])
            ("python" package nil nil [226147 226164]))          
      :file "python.el.gz"
      :pointmax 226244
      :fsize 52544
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 21986 . 21987) (symbol 21563 . 21579) (open-paren 21562 . 21563) (close-paren 21531 . 21532) (symbol 17297 . 17313) (open-paren 17296 . 17297) (close-paren 13318 . 13319) (symbol 12928 . 12944) (open-paren 12927 . 12928)))
    (semanticdb-table "semanticdb-table-17d1940"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1196 1213])
            ("cl-lib" include nil nil [1159 1176])
            ("prog-mode" customgroup
               (:documentation "Generic programming mode, from which others derive."
                :user-visible-flag t)
                nil [1216 1316])
            ("prog-mode-hook" variable (:documentation "Normal hook run when entering programming modes.") nil [1318 1558])
            ("prog-mode-map" variable
               (:documentation "Keymap used for programming modes."
                :default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] 'prog-indent-sexp) map))
                nil [1560 1716])
            ("prog-indentation-context" variable (:documentation "When non-nil, provides context for indenting embedded code chunks.

There are languages where part of the code is actually written in
a sub language, e.g., a Yacc/Bison or ANTLR grammar can also include
JS or Python code.  This variable enables the primary mode of the
main language to use the indentation engine of the sub-mode for
lines in code chunks written in the sub-mode's language.

When a major mode of such a main language decides to delegate the
indentation of a line/region to the indentation engine of the sub
mode, it should bind this variable to non-nil around the call.

The non-nil value should be a list of the form:

   (FIRST-COLUMN . REST)

FIRST-COLUMN is the column the indentation engine of the sub-mode
should use for top-level language constructs inside the code
chunk (instead of 0).

REST is currently unused.") nil [1718 2597])
            ("prog-indent-sexp" function
               (:documentation "Indent the expression after point.
When interactively called with prefix, indent the enclosing defun
instead."
                :user-visible-flag t
                :arguments ("defun"))
                nil [2599 2964])
            ("prog-first-column" function (:documentation "Return the indentation column normally used for top-level constructs.") nil [2966 3108])
            ("defvar-local" code nil nil [3110 3493])
            ("prettify-symbols-default-compose-p" function
               (:documentation "Return true iff the symbol MATCH should be composed.
The symbol starts at position START and ends at position END.
This is the default for `prettify-symbols-compose-predicate'
which is suitable for most programming languages such as C or Lisp."
                :arguments ("start" "end" "_match"))
                nil [3495 4306])
            ("defvar-local" code nil nil [4308 4649])
            ("prettify-symbols--compose-symbol" function
               (:documentation "Compose a sequence of characters into a symbol.
Regexp match data 0 specifies the characters to be composed."
                :arguments ("alist"))
                nil [4651 5814])
            ("prettify-symbols--make-keywords" function nil nil [5816 6033])
            ("defvar-local" code nil nil [6035 6080])
            ("defvar-local" code nil nil [6082 6140])
            ("prettify-symbols-unprettify-at-point" variable (:documentation "If non-nil, show the non-prettified version of a symbol when point is on it.
If set to the symbol `right-edge', also unprettify if point
is immediately after the symbol.  The prettification will be
reapplied as soon as point moves away from the symbol.  If
set to nil, the prettification persists even when point is
on the symbol.") nil [6142 6779])
            ("prettify-symbols--post-command-hook" function nil nil [6781 8100])
            ("define-minor-mode" code nil nil [8117 9999])
            ("turn-on-prettify-symbols-mode" function nil nil [10001 10170])
            ("define-globalized-minor-mode" code nil nil [10187 10300])
            ("define-derived-mode" code nil nil [10317 10653])
            ("prog-mode" package nil nil [10655 10675]))          
      :file "prog-mode.el.gz"
      :pointmax 10704
      :fsize 3614
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 1213 . 1214) (symbol 1141 . 1158) (open-paren 1140 . 1141)))
    (semanticdb-table "semanticdb-table-1c74428"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("add-log" include nil nil [4453 4471])
            ("dabbrev" include nil nil [4432 4450])
            ("imenu" include nil nil [4413 4429])
            ("comint" include nil nil [4474 4491])
            ("tcl" customgroup
               (:documentation "Major mode for editing Tcl source in Emacs."
                :user-visible-flag t)
                nil [4519 4679])
            ("tcl-indent-level" variable
               (:documentation "Indentation of Tcl statements with respect to containing block."
                :default-value 4)
                nil [4681 4810])
            ("put" code nil nil [4811 4865])
            ("tcl-continued-indent-level" variable
               (:documentation "Indentation of continuation line relative to first line of command."
                :default-value 4)
                nil [4867 5010])
            ("put" code nil nil [5011 5075])
            ("tcl-auto-newline" variable (:documentation "Non-nil means automatically newline before and after braces you insert.") nil [5077 5216])
            ("tcl-tab-always-indent" variable
               (:documentation "Control effect of TAB key.
If t (the default), always indent current line.
If nil and point is not in the indentation area at the beginning of
the line, a TAB is inserted.
Other values cause the first possible action from the following list
to take place:

  1. Move from beginning of line to correct indentation.
  2. Delete an empty comment.
  3. Move forward to start of comment, indenting if necessary.
  4. Move forward to end of line, indenting if necessary.
  5. Create an empty comment.
  6. Move backward to start of comment, indenting if necessary."
                :default-value tab-always-indent)
                nil [5218 5984])
            ("tcl-electric-hash-style" variable (:documentation "Style of electric hash insertion to use.
Possible values are `backslash', meaning that `\\' quoting should be
done; `quote', meaning that `\"' quoting should be done; `smart',
meaning that the choice between `backslash' and `quote' should be
made depending on the number of hashes inserted; or nil, meaning that
no quoting should be done.  Any other value for this variable is
taken to mean `smart'.  The default is nil.") nil [5987 6551])
            ("tcl-help-directory-list" variable (:documentation "List of topmost directories containing TclX help files.") nil [6553 6694])
            ("tcl-use-smart-word-finder" variable
               (:documentation "If not nil, use smart way to find current word, for Tcl help feature."
                :default-value t)
                nil [6696 6840])
            ("tcl-application" variable
               (:documentation "Name of Tcl program to run in inferior Tcl mode."
                :default-value "wish")
                nil [6842 6959])
            ("tcl-command-switches" variable (:documentation "List of switches to supply to the `tcl-application' program.") nil [6961 7101])
            ("tcl-prompt-regexp" variable
               (:documentation "If not nil, a regexp that will match the prompt in the inferior process.
If nil, the prompt is the name of the application with \">\" appended.

The default is \"^\\(% \\|\\)\", which will match the default primary
and secondary prompts for tclsh and wish."
                :default-value "^\\(% \\|\\)")
                nil [7103 7438])
            ("inferior-tcl-source-command" variable
               (:documentation "Format-string for building a Tcl command to load a file.
This format string should use `%s' to substitute a file name
and should result in a Tcl expression that will command the
inferior Tcl to load that file.  The filename will be appropriately
quoted for Tcl."
                :default-value "source %s
")
                nil [7440 7789])
            ("tcl-escaped-newline" variable
               (:documentation "Face used for (non-escaped) backslash at end of a line in Tcl mode."
                :default-value '((t :inherit font-lock-string-face))
                :type "face")
                nil [7791 7962])
            ("tcl-mode-map" variable
               (:documentation "Keymap used in `tcl-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "{" 'tcl-electric-char) (define-key map "}" 'tcl-electric-brace) (define-key map "[" 'tcl-electric-char) (define-key map "]" 'tcl-electric-char) (define-key map ";" 'tcl-electric-char) (define-key map "#" 'tcl-electric-hash) (define-key map "" 'tcl-indent-exp) (define-key map "" 'backward-delete-char-untabify) (define-key map "	" 'tcl-indent-command) (define-key map "\230" 'tcl-eval-defun) (define-key map "	" 'tcl-help-on-word) (define-key map "" 'tcl-eval-defun) (define-key map "" 'tcl-load-file) (define-key map "" 'inferior-tcl) (define-key map "" 'tcl-eval-region) (define-key map "" 'switch-to-tcl) map))
                nil [8007 8870])
            ("tcl-mode-syntax-table" variable
               (:documentation "Syntax table in use in `tcl-mode' buffers."
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "_" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 38 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 43 "_" st) (modify-syntax-entry 45 "_" st) (modify-syntax-entry 46 "_" st) (modify-syntax-entry 58 "_" st) (modify-syntax-entry 33 "_" st) (modify-syntax-entry 36 "_" st) (modify-syntax-entry 47 "_" st) (modify-syntax-entry 126 "_" st) (modify-syntax-entry 60 "_" st) (modify-syntax-entry 61 "_" st) (modify-syntax-entry 62 "_" st) (modify-syntax-entry 124 "_" st) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 59 "." st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 35 "<" st) st))
                nil [8872 9847])
            ("inferior-tcl-mode-map" variable
               (:documentation "Keymap used in `inferior-tcl-mode'."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'completion-at-point) (define-key map "\277" 'comint-dynamic-list-filename-completions) (define-key map "" 'backward-delete-char-untabify) (define-key map "\230" 'tcl-eval-defun) (define-key map "	" 'tcl-help-on-word) (define-key map "" 'tcl-eval-defun) (define-key map "" 'tcl-load-file) (define-key map "" 'inferior-tcl) (define-key map "" 'tcl-eval-region) (define-key map "" 'switch-to-tcl) map))
                nil [9849 10633])
            ("easy-menu-define" code nil nil [10635 11517])
            ("inferior-tcl-buffer" variable (:documentation "The current inferior-tcl process buffer.

MULTIPLE PROCESS SUPPORT
===========================================================================
To run multiple Tcl processes, you start the first up with
\\[inferior-tcl].  It will be in a buffer named `*inferior-tcl*'.
Rename this buffer with \\[rename-buffer].  You may now start up a new
process with another \\[inferior-tcl].  It will be in a new buffer,
named `*inferior-tcl*'.  You can switch between the different process
buffers with \\[switch-to-buffer].

Commands that send text from source buffers to Tcl processes -- like
`tcl-eval-defun' or `tcl-load-file' -- have to choose a process to
send to, when you have more than one Tcl process around.  This is
determined by the global variable `inferior-tcl-buffer'.  Suppose you
have three inferior Lisps running:
    Buffer              Process
    foo                 inferior-tcl
    bar                 inferior-tcl<2>
    *inferior-tcl*      inferior-tcl<3>
If you do a \\[tcl-eval-defun] command on some Lisp source code, what
process do you send it to?

- If you're in a process buffer (foo, bar, or *inferior-tcl*),
  you send it to that process.
- If you're in some other buffer (e.g., a source file), you
  send it to the process attached to buffer `inferior-tcl-buffer'.
This process selection is performed by function `inferior-tcl-proc'.

Whenever \\[inferior-tcl] fires up a new process, it resets
`inferior-tcl-buffer' to be the new process's buffer.  If you only run
one process, this does the right thing.  If you run multiple
processes, you might need to set `inferior-tcl-buffer' to
whichever process buffer you want to use.") nil [11519 13205])
            ("tcl-mode-hook" variable (:documentation "Hook run on entry to Tcl mode.

Several functions exist which are useful to run from your
`tcl-mode-hook' (see each function's documentation for more
information):

  `tcl-guess-application'
    Guesses a default setting for `tcl-application' based on any
    \"#!\" line at the top of the file.
  `tcl-hashify-buffer'
    Quotes all \"#\" characters that don't correspond to actual
    Tcl comments.  (Useful when editing code not originally created
    with this mode).

Add functions to the hook with `add-hook':

   (add-hook 'tcl-mode-hook 'tcl-guess-application)") nil [13248 13847])
            ("tcl-proc-list" variable
               (:documentation "List of commands whose first argument defines something.
This exists because some people (eg, me) use `defvar' et al.
Call `tcl-set-proc-regexp' and `tcl-set-font-lock-keywords'
after changing this list."
                :default-value '("proc" "method" "itcl_class" "body" "configbody" "class" "namespace"))
                nil [13850 14154])
            ("tcl-proc-regexp" variable (:documentation "Regexp to use when matching proc headers.") nil [14156 14230])
            ("tcl-typeword-list" variable
               (:documentation "List of Tcl keywords denoting \"type\".  Used only for highlighting.
Call `tcl-set-font-lock-keywords' after changing this list."
                :default-value '("global" "upvar" "inherit" "public" "protected" "private" "common" "itk_option" "variable"))
                nil [14232 14491])
            ("tcl-keyword-list" variable
               (:documentation "List of Tcl keywords.  Used only for highlighting.
Default list includes some TclX keywords.
Call `tcl-set-font-lock-keywords' after changing this list."
                :default-value '("if" "then" "else" "elseif" "for" "foreach" "break" "continue" "while" "eval" "case" "in" "switch" "default" "exit" "error" "proc" "return" "uplevel" "constructor" "destructor" "itcl_class" "loop" "for_array_keys" "for_recursive_glob" "for_file" "method" "body" "configbody" "class" "chain"))
                nil [14552 15046])
            ("tcl-builtin-list" variable
               (:documentation "List of Tcl commands.  Used only for highlighting.
Call `tcl-set-font-lock-keywords' after changing this list.
This list excludes those commands already found in `tcl-proc-list' and
`tcl-keyword-list'."
                :default-value '("after" "append" "array" "bgerror" "binary" "catch" "cd" "clock" "close" "concat" "console" "dde" "encoding" "eof" "exec" "expr" "fblocked" "fconfigure" "fcopy" "file" "fileevent" "flush" "format" "gets" "glob" "history" "incr" "info" "interp" "join" "lappend" "lindex" "linsert" "list" "llength" "load" "lrange" "lreplace" "lsort" "namespace" "open" "package" "pid" "puts" "pwd" "read" "regexp" "registry" "regsub" "rename" "scan" "seek" "set" "socket" "source" "split" "string" "subst" "tell" "time" "trace" "unknown" "unset" "vwait"))
                nil [15048 15852])
            ("tcl-font-lock-keywords" variable (:documentation "Keywords to highlight for Tcl.  See variable `font-lock-keywords'.
This variable is generally set from `tcl-proc-regexp',
`tcl-typeword-list', and `tcl-keyword-list' by the function
`tcl-set-font-lock-keywords'.") nil [15854 16105])
            ("tcl-syntax-propertize-function" variable
               (:documentation "Syntactic keywords for `tcl-mode'."
                :constant-flag t
                :default-value (syntax-propertize-rules ("[^;[{ 	
][ 	]*\\(#\\)" (1 "."))))
                nil [16107 16308])
            ("tcl-type-alist" variable
               (:documentation "Alist that controls indentation.
(Actually, this really only controls what happens on continuation lines).
Each entry looks like `(KEYWORD TYPE ...)'.
Each type entry describes a sexp after the keyword, and can be one of:
* nil, meaning that this sexp has no particular type.
* tcl-expr, meaning that this sexp is an arithmetic expression.
* tcl-commands, meaning that this sexp holds Tcl commands.
* a string, which must exactly match the string at the corresponding
  position for a match to be made.

For example, the entry for the \"loop\" command is:

   (\"loop\" nil tcl-expr tcl-commands)

This means that the \"loop\" command has three arguments.  The first
argument is ignored (for indentation purposes).  The second argument
is a Tcl expression, and the last argument is Tcl commands."
                :default-value '(("proc" nil tcl-expr tcl-commands) ("method" nil tcl-expr tcl-commands) ("destructor" tcl-commands) ("constructor" tcl-commands) ("expr" tcl-expr) ("catch" tcl-commands) ("if" tcl-expr "then" tcl-commands) ("elseif" tcl-expr "then" tcl-commands) ("elseif" tcl-expr tcl-commands) ("if" tcl-expr tcl-commands) ("while" tcl-expr tcl-commands) ("for" tcl-commands tcl-expr tcl-commands tcl-commands) ("foreach" nil nil tcl-commands) ("for_file" nil nil tcl-commands) ("for_array_keys" nil nil tcl-commands) ("for_recursive_glob" nil nil nil tcl-commands) ("loop" nil tcl-expr tcl-expr tcl-commands) ("loop" nil tcl-expr tcl-commands)))
                nil [16397 18080])
            ("tcl-explain-indentation" variable (:documentation "If non-nil, debugging message will be printed during indentation.") nil [18082 18188])
            ("tcl-omit-ws-regexp" variable
               (:constant-flag t
                :default-value "^[^]\" 	
#}][^
\"#]+[ 	]+")
                nil [18679 18740])
            ("tcl-set-proc-regexp" function (:documentation "Set `tcl-proc-regexp' from variable `tcl-proc-list'.") nil [18778 18947])
            ("tcl-set-font-lock-keywords" function (:documentation "Set `tcl-font-lock-keywords'.
Uses variables `tcl-proc-regexp' and `tcl-keyword-list'.") nil [18949 20562])
            ("if" code nil nil [20564 20615])
            ("if" code nil nil [20617 20682])
            ("tcl-imenu-generic-expression" variable
               (:documentation "Imenu generic expression for `tcl-mode'.  See `imenu-generic-expression'."
                :default-value `((nil ,(concat tcl-proc-regexp "\\([-A-Za-z0-9_:+*]+\\)") 2)))
                nil [20685 20865])
            ("outline-regexp" variable nil nil [20897 20920])
            ("outline-level" variable nil nil [20921 20943])
            ("define-derived-mode" code nil nil [20960 24025])
            ("tcl-electric-char" function
               (:documentation "Insert character and correct line's indentation."
                :user-visible-flag t
                :arguments ("arg"))
                nil [24138 24450])
            ("tcl-electric-brace" function
               (:documentation "Insert character and correct line's indentation."
                :user-visible-flag t
                :arguments ("arg"))
                nil [24658 25263])
            ("tcl-indent-command" function
               (:documentation "Indent current line as Tcl code, or in some cases insert a tab character.
If `tcl-tab-always-indent' is t (the default), always indent current line.
If `tcl-tab-always-indent' is nil and point is not in the indentation
area at the beginning of the line, a TAB is inserted.
Other values of `tcl-tab-always-indent' cause the first possible action
from the following list to take place:

  1. Move from beginning of line to correct indentation.
  2. Delete an empty comment.
  3. Move forward to start of comment, indenting if necessary.
  4. Move forward to end of line, indenting if necessary.
  5. Create an empty comment.
  6. Move backward to start of comment, indenting if necessary."
                :user-visible-flag t
                :arguments ("_arg"))
                nil [25268 27429])
            ("tcl-indent-line" function (:documentation "Indent current line as Tcl code.
Return the amount the indentation changed by.") nil [27431 28517])
            ("tcl-figure-type" function (:documentation "Determine type of sexp at point.
This is either `tcl-expr', `tcl-commands', or nil.  Puts point at start
of sexp that indicates types.

See documentation for variable `tcl-type-alist' for more information.") nil [28519 29826])
            ("tcl-calculate-indent" function
               (:documentation "Return appropriate indentation for current line as Tcl code.
In usual case returns an integer: the column to indent to.
Returns nil if line starts inside a string, t if in a comment."
                :arguments ("parse-start"))
                nil [29828 33713])
            ("tcl-indent-exp" function
               (:documentation "Indent each line of the Tcl grouping following point."
                :user-visible-flag t)
                nil [33718 36744])
            ("tcl-beginning-of-defun-function" function
               (:documentation "`beginning-of-defun-function' for Tcl mode."
                :arguments ("arg"))
                nil [36789 37334])
            ("tcl-end-of-defun-function" function (:documentation "`end-of-defun-function' for Tcl mode.") nil [37336 37968])
            ("tcl-add-log-defun" function (:documentation "Return name of Tcl function point is in, or nil.") nil [37970 38409])
            ("tcl-outline-level" function nil nil [38411 38510])
            ("inferior-tcl-delete-prompt-marker" variable nil nil [38871 38917])
            ("tcl-filter" function (:arguments ("proc" "string")) nil [38919 39370])
            ("tcl-send-string" function (:arguments ("proc" "string")) nil [39372 39702])
            ("tcl-send-region" function (:arguments ("proc" "start" "end")) nil [39704 40040])
            ("switch-to-tcl" function
               (:documentation "Switch to inferior Tcl process buffer.
With argument, positions cursor at end of buffer."
                :user-visible-flag t
                :arguments ("eob-p"))
                nil [40042 40368])
            ("inferior-tcl-proc" function (:documentation "Return current inferior Tcl process.
See variable `inferior-tcl-buffer'.") nil [40370 40685])
            ("tcl-eval-region" function
               (:documentation "Send the current region to the inferior Tcl process.
Prefix argument means switch to the Tcl buffer afterwards."
                :user-visible-flag t
                :arguments ("start" "end" "and-go"))
                nil [40687 41213])
            ("tcl-eval-defun" function
               (:documentation "Send the current defun to the inferior Tcl process.
Prefix argument means switch to the Tcl buffer afterwards."
                :user-visible-flag t
                :arguments ("and-go"))
                nil [41215 41550])
            ("define-derived-mode" code nil nil [41591 42948])
            ("inferior-tcl" function
               (:documentation "Run inferior Tcl process.
Prefix arg means enter program name interactively.
See documentation for function `inferior-tcl-mode' for more information."
                :user-visible-flag t
                :arguments ("cmd"))
                nil [42965 43857])
            ("defalias" code nil nil [43859 43892])
            ("tcl-real-command-p" function (:documentation "Return nil if point is not at the beginning of a command.
A command is the first word on an otherwise empty line, or the
first word following a semicolon, opening brace, or opening bracket.") nil [43926 44471])
            ("tcl-real-comment-p" function (:documentation "Return t if point is just after the `#' beginning a real comment.
Does not check to see if previous char is actually `#'.
A real comment is either at the beginning of the buffer,
preceded only by whitespace on the line, or has a preceding
semicolon, opening brace, or opening bracket on the same line.") nil [44525 44924])
            ("tcl-hairy-scan-for-comment" function
               (:documentation "Determine if point is in a comment.
Returns a list of the form `(FLAG . STATE)'.  STATE can be used
as input to future invocations.  FLAG is nil if not in comment,
t otherwise.  If in comment, leaves point at beginning of comment."
                :arguments ("state" "end" "always-stop"))
                nil [44926 46501])
            ("tcl-in-comment" function (:documentation "Return t if point is in a comment, and leave point at beginning of comment.") nil [46503 46710])
            ("tcl-help-saved-dirs" variable (:documentation "Saved help directories.
If `tcl-help-directory-list' changes, this allows `tcl-help-on-word'
to update the alist.") nil [46744 46894])
            ("tcl-help-alist" variable (:documentation "Alist with command names as keys and filenames as values.") nil [46896 46985])
            ("tcl-files-alist" function
               (:documentation "Recursively add all pairs (FILE . PATH) under DIR to ALIST."
                :arguments ("dir" "alist"))
                nil [46987 47362])
            ("tcl-help-snarf-commands" function
               (:documentation "Return alist of commands and filenames."
                :arguments ("dirlist"))
                nil [47364 47582])
            ("tcl-reread-help-files" function
               (:documentation "Set up to re-read files, and then do it."
                :user-visible-flag t)
                nil [47584 47900])
            ("tcl-word-no-props" function (:documentation "Like `current-word', but strips properties.") nil [47902 48070])
            ("tcl-current-word" function
               (:documentation "Return current command word, or nil.
If FLAG is nil, just uses `current-word'.
Otherwise scans backward for most likely Tcl command word."
                :arguments ("flag"))
                nil [48072 48634])
            ("tcl-help-on-word" function
               (:documentation "Get help on Tcl command.  Default is word at point.
Prefix argument means invert sense of `tcl-use-smart-word-finder'."
                :user-visible-flag t
                :arguments ("command" "arg"))
                nil [48651 50025])
            ("tcl-previous-dir/file" variable (:documentation "Record last directory and file used in loading.
This holds a cons cell of the form `(DIRECTORY . FILE)'
describing the last `tcl-load-file' command.") nil [50065 50252])
            ("tcl-load-file" function
               (:documentation "Load a Tcl file into the inferior Tcl process.
Prefix argument means switch to the Tcl buffer afterwards."
                :user-visible-flag t
                :arguments ("file" "and-go"))
                nil [50254 50971])
            ("tcl-restart-with-file" function
               (:documentation "Restart inferior Tcl with file.
If an inferior Tcl process exists, it is killed first.
Prefix argument means switch to the Tcl buffer afterwards."
                :user-visible-flag t
                :arguments ("file" "and-go"))
                nil [50973 52167])
            ("tcl-auto-fill-mode" function
               (:documentation "Like `auto-fill-mode', but sets `comment-auto-fill-only-comments'."
                :arguments ("arg"))
                nil [52169 52579])
            ("tcl-electric-hash" function
               (:documentation "Insert a `#' and quote if it does not start a real comment.
Prefix arg is number of `#'s to insert.
See variable `tcl-electric-hash-style' for description of quoting
styles."
                :user-visible-flag t
                :arguments ("count"))
                nil [52581 53583])
            ("tcl-hashify-buffer" function
               (:documentation "Quote all `#'s in current buffer that aren't Tcl comments."
                :user-visible-flag t)
                nil [53585 54034])
            ("tcl-comment-indent" function (:documentation "Return the desired indentation, but be careful to add a `;' if needed.") nil [54036 54502])
            ("tcl-guess-application" function (:documentation "Attempt to guess Tcl application by looking at first line.
The first line is assumed to look like \"#!.../program ...\".") nil [54986 55319])
            ("tcl-popup-menu" function (:arguments ("_e")) nil [55555 55632])
            ("tcl-quote" function
               (:documentation "Quote STRING according to Tcl rules."
                :arguments ("string"))
                nil [55804 56044])
            ("defalias" code nil nil [56114 56164])
            ("defalias" code nil nil [56165 56215])
            ("defalias" code nil nil [56216 56264])
            ("defalias" code nil nil [56265 56307])
            ("defalias" code nil nil [56308 56362])
            ("defalias" code nil nil [56363 56417])
            ("defalias" code nil nil [56418 56460])
            ("defalias" code nil nil [56461 56499])
            ("tcl-mark" function nil nil [56500 56528])
            ("tcl" package nil nil [56530 56544]))          
      :file "tcl.el.gz"
      :pointmax 56567
      :fsize 17273
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax '((close-paren 4471 . 4472) (symbol 4393 . 4410) (open-paren 4392 . 4393)))
    (semanticdb-table "semanticdb-table-169c1c8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [970 985])
            ("button" include nil nil [986 1003])
            ("xref" include nil nil [1004 1019])
            ("tags-file-name" variable (:documentation "File name of tags table.
To switch to a new tags table, do not set this variable; instead,
invoke `visit-tags-table', which is the only reliable way of
setting the value of this variable, whether buffer-local or global.
Use the `etags' program to make a tags table file.") nil [1036 1338])
            ("etags" customgroup
               (:documentation "Tags tables."
                :user-visible-flag t)
                nil [1566 1617])
            ("tags-case-fold-search" variable
               (:documentation "Whether tags operations should be case-sensitive.
A value of t means case-insensitive, a value of nil means case-sensitive.
Any other value means use the setting of `case-fold-search'."
                :default-value 'default)
                nil [1634 2026])
            ("tags-table-list" variable (:documentation "List of file names of tags tables to search.
An element that is a directory means the file \"TAGS\" in that directory.
To switch to a new list of tags tables, setting this variable is sufficient.
If you set this variable, do not also set `tags-file-name'.
Use the `etags' program to make a tags table file.") nil [2119 2500])
            ("tags-compression-info-list" variable
               (:documentation "List of extensions tried by etags when `auto-compression-mode' is on.
An empty string means search the non-compressed file."
                :default-value (purecopy '("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))
                nil [2517 2806])
            ("tags-add-tables" variable
               (:documentation "Control whether to add a new tags table to the current list.
t means do; nil means don't (always start a new list).
Any other value means ask the user whether to add a new tags table
to the current list (as opposed to starting a new list)."
                :default-value 'ask-user)
                nil [3299 3693])
            ("tags-revert-without-query" variable (:documentation "Non-nil means reread a TAGS table without querying, if it has changed.") nil [3695 3844])
            ("tags-table-computed-list" variable (:documentation "List of tags tables to search, computed from `tags-table-list'.
This includes tables implicitly included by other tables.  The list is not
always complete: the included tables of a table are not known until that
table is read into core.  An element that is t is a placeholder
indicating that the preceding element is a table that has not been read
into core and might contain included tables to search.
See `tags-table-check-computed-list'.") nil [3846 4328])
            ("tags-table-computed-list-for" variable (:documentation "Value of `tags-table-list' that `tags-table-computed-list' corresponds to.
If `tags-table-list' changes, `tags-table-computed-list' is thrown away and
recomputed; see `tags-table-check-computed-list'.") nil [4330 4576])
            ("tags-table-list-pointer" variable (:documentation "Pointer into `tags-table-computed-list' for the current state of searching.
Use `visit-tags-table-buffer' to cycle through tags tables in this list.") nil [4578 4767])
            ("tags-table-list-started-at" variable (:documentation "Pointer into `tags-table-computed-list', where the current search started.") nil [4769 4887])
            ("tags-table-set-list" variable (:documentation "List of sets of tags table which have been used together in the past.
Each element is a list of strings which are file names.") nil [4889 5051])
            ("find-tag-hook" variable (:documentation "Hook to be run by \\[find-tag] after finding a tag.  See `run-hooks'.
The value in the buffer in which \\[find-tag] is done is used,
not the value in the buffer \\[find-tag] goes to.") nil [5068 5314])
            ("find-tag-default-function" variable (:documentation "A function of no arguments used by \\[find-tag] to pick a default tag.
If nil, and the symbol that is the value of `major-mode'
has a `find-tag-default-function' property (see `put'), that is used.
Otherwise, `find-tag-default' is used.") nil [5331 5668])
            ("define-obsolete-variable-alias" code nil nil [5670 5765])
            ("tags-tag-face" variable
               (:documentation "Face for tags in the output of `tags-apropos'."
                :default-value 'default)
                nil [5767 5900])
            ("tags-apropos-verbose" variable (:documentation "If non-nil, print the name of the tags file in the *Tags List* buffer.") nil [5902 6064])
            ("tags-apropos-additional-actions" variable (:documentation "Specify additional actions for `tags-apropos'.

If non-nil, value should be a list of triples (TITLE FUNCTION
TO-SEARCH).  For each triple, `tags-apropos' processes TO-SEARCH and
lists tags from it.  TO-SEARCH should be an alist, obarray, or symbol.
If it is a symbol, the symbol's value is used.
TITLE, a string, is a title used to label the additional list of tags.
FUNCTION is a function to call when a symbol is selected in the
*Tags List* buffer.  It will be called with one argument SYMBOL which
is the symbol being selected.

Example value:

   ((\"Emacs Lisp\" Info-goto-emacs-command-node obarray)
    (\"Common Lisp\" common-lisp-hyperspec common-lisp-hyperspec-obarray)
    (\"SCWM\" scwm-documentation scwm-obarray))") nil [6066 6983])
            ("defvaralias" code nil nil [6985 7039])
            ("make-obsolete-variable" code nil nil [7040 7163])
            ("default-tags-table-function" variable (:documentation "If non-nil, a function to choose a default tags file for a buffer.
This function receives no arguments and should return the default
tags table file to use for the current buffer.") nil [7165 7389])
            ("tags-location-ring" variable
               (:documentation "Ring of markers which are locations visited by \\[find-tag].
Pop back to the last location with \\[negative-argument] \\[find-tag]."
                :default-value (make-ring xref-marker-ring-length))
                nil [7391 7590])
            ("tags-table-files" variable (:documentation "List of file names covered by current tags table.
nil means it has not yet been computed;
use function `tags-table-files' to do so.") nil [7667 7832])
            ("tags-completion-table" variable (:documentation "List of tag names defined in current tags table.") nil [7834 7921])
            ("tags-included-tables" variable (:documentation "List of tags tables included by the current tags table.") nil [7923 8016])
            ("next-file-list" variable (:documentation "List of files for \\[next-file] to process.") nil [8018 8093])
            ("tags-table-format-functions" variable
               (:documentation "Hook to be called in a tags table buffer to identify the type of tags table.
The functions are called in order, with no arguments,
until one returns non-nil.  The function should make buffer-local bindings
of the format-parsing tags function variables if successful."
                :default-value '(etags-recognize-tags-table tags-recognize-empty-tags-table))
                nil [8124 8503])
            ("file-of-tag-function" variable (:documentation "Function to do the work of `file-of-tag' (which see).
One optional argument, a boolean specifying to return complete path (nil) or
relative path (non-nil).") nil [8505 8698])
            ("tags-table-files-function" variable (:documentation "Function to do the work of function `tags-table-files' (which see).") nil [8699 8809])
            ("tags-completion-table-function" variable (:documentation "Function to build the `tags-completion-table'.") nil [8810 8904])
            ("snarf-tag-function" variable (:documentation "Function to get info about a matched tag for `goto-tag-location-function'.
One optional argument, specifying to use explicit tag (non-nil) or not (nil).
The default is nil.") nil [8905 9113])
            ("goto-tag-location-function" variable (:documentation "Function of to go to the location in the buffer specified by a tag.
One argument, the tag info returned by `snarf-tag-function'.") nil [9114 9286])
            ("find-tag-regexp-search-function" variable (:documentation "Search function passed to `find-tag-in-order' for finding a regexp tag.") nil [9287 9407])
            ("find-tag-regexp-tag-order" variable (:documentation "Tag order passed to `find-tag-in-order' for finding a regexp tag.") nil [9408 9516])
            ("find-tag-regexp-next-line-after-failure-p" variable (:documentation "Flag passed to `find-tag-in-order' for finding a regexp tag.") nil [9517 9636])
            ("find-tag-search-function" variable (:documentation "Search function passed to `find-tag-in-order' for finding a tag.") nil [9637 9743])
            ("find-tag-tag-order" variable (:documentation "Tag order passed to `find-tag-in-order' for finding a tag.") nil [9744 9838])
            ("find-tag-next-line-after-failure-p" variable (:documentation "Flag passed to `find-tag-in-order' for finding a tag.") nil [9839 9944])
            ("list-tags-function" variable (:documentation "Function to do the work of `list-tags' (which see).") nil [9945 10032])
            ("tags-apropos-function" variable (:documentation "Function to do the work of `tags-apropos' (which see).") nil [10033 10126])
            ("tags-included-tables-function" variable (:documentation "Function to do the work of function `tags-included-tables' (which see).") nil [10127 10245])
            ("verify-tags-table-function" variable (:documentation "Function to return t if current buffer contains valid tags file.") nil [10246 10354])
            ("initialize-new-tags-table" function (:documentation "Initialize the tags table in the current buffer.
Return non-nil if it is a valid tags table, and
in that case, also make the tags table state variables
buffer-local and set them to nil.") nil [10357 11028])
            ("define-derived-mode" code nil nil [11045 11210])
            ("visit-tags-table" function
               (:documentation "Tell tags commands to use tags table file FILE.
FILE should be the name of a file created with the `etags' program.
A directory name is ok too; it means file TAGS in that directory.

Normally \\[visit-tags-table] sets the global value of `tags-file-name'.
With a prefix arg, set the buffer-local value instead.  When called
from Lisp, if the optional arg LOCAL is non-nil, set the local value.
When you find a tag with \\[find-tag], the buffer it finds the tag
in is given a local value of this variable which is the name of the tags
file the tag was in."
                :user-visible-flag t
                :arguments ("file" "local"))
                nil [11227 13309])
            ("tags-table-check-computed-list" function (:documentation "Compute `tags-table-computed-list' from `tags-table-list' if necessary.") nil [13311 15180])
            ("tags-table-extend-computed-list" function (:documentation "Extend `tags-table-computed-list' to remove the first t placeholder.

An element of the list that is t is a placeholder indicating that the
preceding element is a table that has not been read in and might
contain included tables to search.  This function reads in the first
such table and puts its included tables into the list.") nil [15182 16893])
            ("tags-expand-table-name" function
               (:documentation "Expand tags table name FILE into a complete file name."
                :arguments ("file"))
                nil [16895 17106])
            ("tags-table-list-member" function
               (:documentation "Like (member FILE LIST) after applying `tags-expand-table-name'.
More precisely, apply `tags-expand-table-name' to FILE
and each element of LIST, returning the link whose car is the first match.
If an element of LIST is t, ignore it."
                :arguments ("file" "list"))
                nil [17238 17708])
            ("tags-verify-table" function
               (:documentation "Read FILE into a buffer and verify that it is a valid tags table.
Sets the current buffer to one visiting FILE (if it exists).
Returns non-nil if it is a valid table."
                :arguments ("file"))
                nil [17710 19569])
            ("tags-table-including" function
               (:documentation "Search current tags tables for tags for THIS-FILE.
Subroutine of `visit-tags-table-buffer'.
Looks for a tags table that has such tags or that includes a table
that has them.  Returns the name of the first such table.
Non-nil CORE-ONLY means check only tags tables that are already in
buffers.  If CORE-ONLY is nil, it is ignored."
                :arguments ("this-file" "core-only"))
                nil [19980 22022])
            ("tags-next-table" function (:documentation "Move `tags-table-list-pointer' along and set `tags-file-name'.
Subroutine of `visit-tags-table-buffer'.Returns nil when out of tables.") nil [22024 22864])
            ("visit-tags-table-buffer" function
               (:documentation "Select the buffer containing the current tags table.
Optional arg CONT specifies which tags table to visit.
If CONT is a string, visit that file as a tags table.
If CONT is t, visit the next table in `tags-table-list'.
If CONT is the atom `same', don't look for a new table;
 just select the buffer visiting `tags-file-name'.
If CONT is nil or absent, choose a first buffer from information in
 `tags-file-name', `tags-table-list', `tags-table-list-pointer'.
Optional second arg CBUF, if non-nil, specifies the initial buffer,
which is important if that buffer has a local value of `tags-file-name'.
Returns t if it visits a tags table, or nil if there are no more in the list."
                :arguments ("cont" "cbuf"))
                nil [22881 29536])
            ("tags-reset-tags-tables" function
               (:documentation "Reset tags state to cancel effect of any previous \\[visit-tags-table] or \\[find-tag]."
                :user-visible-flag t)
                nil [29538 30192])
            ("file-of-tag" function
               (:documentation "Return the file name of the file whose tags point is within.
Assumes the tags table is the current buffer.
If RELATIVE is non-nil, file name returned is relative to tags
table file's directory. If RELATIVE is nil, file name returned
is complete."
                :arguments ("relative"))
                nil [30195 30527])
            ("tags-table-files" function (:documentation "Return a list of files in the current tags table.
Assumes the tags table is the current buffer.  The file names are returned
as they appeared in the `etags' command that created the table, usually
without directory names.") nil [30544 30892])
            ("tags-included-tables" function (:documentation "Return a list of tags tables included by the current table.
Assumes the tags table is the current buffer.") nil [30894 31137])
            ("tags-completion-table" function
               (:documentation "Build `tags-completion-table' on demand for a buffer's tags tables.
Optional argument BUF specifies the buffer for which to build
`tags-completion-table', and defaults to the current buffer.
The tags included in the completion table are those in the current
tags table for BUF and its (recursively) included tags tables."
                :arguments ("buf"))
                nil [31140 32537])
            ("tags-lazy-completion-table" function nil nil [32554 33010])
            ("tags-completion-at-point-function" function (:documentation "Using tags, return a completion table for the text around point.
If no tags table is loaded, do nothing and return nil.") nil [33257 34042])
            ("find-tag-tag" function
               (:documentation "Read a tag name, with defaulting and completion."
                :arguments ("string"))
                nil [34045 34613])
            ("find-tag--default" function nil nil [34615 34778])
            ("last-tag" variable (:documentation "Last tag found by \\[find-tag].") nil [34780 34837])
            ("find-tag-interactive" function
               (:documentation "Get interactive arguments for tag functions.
The functions using this are `find-tag-noselect',
`find-tag-other-window', and `find-tag-regexp'."
                :arguments ("prompt" "no-default"))
                nil [34839 35252])
            ("find-tag-history" variable nil nil [35254 35283])
            ("etags-case-fold-search" variable nil nil [35319 35350])
            ("etags-syntax-table" variable nil nil [35351 35378])
            ("local-find-tag-hook" variable nil nil [35379 35407])
            ("find-tag-noselect" function
               (:documentation "Find tag (in current tags table) whose name contains TAGNAME.
Returns the buffer containing the tag's definition and moves its point there,
but does not select the buffer.
The default for TAGNAME is the expression in the buffer near point.

If second arg NEXT-P is t (interactively, with prefix arg), search for
another tag that matches the last tagname or regexp used.  When there are
multiple matches for a tag, more exact matches are found first.  If NEXT-P
is the atom `-' (interactively, with prefix arg that is a negative number
or just \\[negative-argument]), pop back to the previous tag gone to.

If third arg REGEXP-P is non-nil, treat TAGNAME as a regexp.

A marker representing the point when this command is invoked is pushed
onto a ring and may be popped back to with \\[pop-tag-mark].
Contrast this with the ring of marks gone to by the command.

See documentation of variable `tags-file-name'."
                :user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [35424 38521])
            ("find-tag" function
               (:documentation "Find tag (in current tags table) whose name contains TAGNAME.
Select the buffer containing the tag's definition, and move point there.
The default for TAGNAME is the expression in the buffer around or before point.

If second arg NEXT-P is t (interactively, with prefix arg), search for
another tag that matches the last tagname or regexp used.  When there are
multiple matches for a tag, more exact matches are found first.  If NEXT-P
is the atom `-' (interactively, with prefix arg that is a negative number
or just \\[negative-argument]), pop back to the previous tag gone to.

If third arg REGEXP-P is non-nil, treat TAGNAME as a regexp.

A marker representing the point when this command is invoked is pushed
onto a ring and may be popped back to with \\[pop-tag-mark].
Contrast this with the ring of marks gone to by the command.

See documentation of variable `tags-file-name'."
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [38538 39789])
            ("find-tag-other-window" function
               (:documentation "Find tag (in current tags table) whose name contains TAGNAME.
Select the buffer containing the tag's definition in another window, and
move point there.  The default for TAGNAME is the expression in the buffer
around or before point.

If second arg NEXT-P is t (interactively, with prefix arg), search for
another tag that matches the last tagname or regexp used.  When there are
multiple matches for a tag, more exact matches are found first.  If NEXT-P
is negative (interactively, with prefix arg that is a negative number or
just \\[negative-argument]), pop back to the previous tag gone to.

If third arg REGEXP-P is non-nil, treat TAGNAME as a regexp.

A marker representing the point when this command is invoked is pushed
onto a ring and may be popped back to with \\[pop-tag-mark].
Contrast this with the ring of marks gone to by the command.

See documentation of variable `tags-file-name'."
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [39806 41717])
            ("find-tag-other-frame" function
               (:documentation "Find tag (in current tags table) whose name contains TAGNAME.
Select the buffer containing the tag's definition in another frame, and
move point there.  The default for TAGNAME is the expression in the buffer
around or before point.

If second arg NEXT-P is t (interactively, with prefix arg), search for
another tag that matches the last tagname or regexp used.  When there are
multiple matches for a tag, more exact matches are found first.  If NEXT-P
is negative (interactively, with prefix arg that is a negative number or
just \\[negative-argument]), pop back to the previous tag gone to.

If third arg REGEXP-P is non-nil, treat TAGNAME as a regexp.

A marker representing the point when this command is invoked is pushed
onto a ring and may be popped back to with \\[pop-tag-mark].
Contrast this with the ring of marks gone to by the command.

See documentation of variable `tags-file-name'."
                :arguments ("tagname" "next-p"))
                nil [41734 42891])
            ("find-tag-regexp" function
               (:documentation "Find tag (in current tags table) whose name matches REGEXP.
Select the buffer containing the tag's definition and move point there.

If second arg NEXT-P is t (interactively, with prefix arg), search for
another tag that matches the last tagname or regexp used.  When there are
multiple matches for a tag, more exact matches are found first.  If NEXT-P
is negative (interactively, with prefix arg that is a negative number or
just \\[negative-argument]), pop back to the previous tag gone to.

If third arg OTHER-WINDOW is non-nil, select the buffer in another window.

A marker representing the point when this command is invoked is pushed
onto a ring and may be popped back to with \\[pop-tag-mark].
Contrast this with the ring of marks gone to by the command.

See documentation of variable `tags-file-name'."
                :arguments ("regexp" "next-p" "other-window"))
                nil [42908 44053])
            ("defalias" code nil nil [44070 44117])
            ("tag-lines-already-matched" variable (:documentation "Matches remembered between calls.") nil [44121 44197])
            ("find-tag-in-order" function
               (:documentation "Internal tag-finding function.
PATTERN is a string to pass to arg SEARCH-FORWARD-FUNC, and to any
member of the function list ORDER.  If ORDER is nil, use saved state
to continue a previous search.

Arg NEXT-LINE-AFTER-FAILURE-P is non-nil if after a failed match,
point should be moved to the next line.

Arg MATCHING is a string, an English `-ing' word, to be used in an
error message."
                :arguments ("pattern" "search-forward-func" "order" "next-line-after-failure-p" "matching" "first-search"))
                nil [44228 48604])
            ("tag-find-file-of-tag-noselect" function
               (:documentation "Find the right line in the specified FILE."
                :arguments ("file"))
                nil [48606 50450])
            ("tag-find-file-of-tag" function (:arguments ("file")) nil [50452 50637])
            ("etags-recognize-tags-table" function (:documentation "If `etags-verify-tags-table', make buffer-local format variables.
If current buffer is a valid etags TAGS file, then give it
buffer-local values of tags table format variables.") nil [50678 52307])
            ("etags-verify-tags-table" function (:documentation "Return non-nil if the current buffer is a valid etags TAGS file.") nil [52309 52505])
            ("etags-file-of-tag" function (:arguments ("relative")) nil [52507 52839])
            ("etags-tags-completion-table" function nil nil [52842 53923])
            ("etags-snarf-tag" function (:arguments ("use-explicit")) nil [53925 55492])
            ("etags-goto-tag-location" function
               (:documentation "Go to location of tag specified by TAG-INFO.
TAG-INFO is a cons (TEXT LINE . POSITION).
TEXT is the initial part of a line containing the tag.
LINE is the line number.
POSITION is the (one-based) char position of TEXT within the file.

If TEXT is t, it means the tag refers to exactly LINE or POSITION,
whichever is present, LINE having preference, no searching.
Either LINE or POSITION can be nil.  POSITION is used if present.

If the tag isn't exactly at the given position, then look near that
position using a search window that expands progressively until it
hits the start of file."
                :arguments ("tag-info"))
                nil [55494 58304])
            ("etags-list-tags" function (:arguments ("file")) nil [58306 59579])
            ("tags-with-face" function
               (:documentation "Execute BODY, give output to `standard-output' face FACE."
                :arguments ("face" "body"))
                nil [59581 59912])
            ("etags-tags-apropos-additional" function
               (:documentation "Display tags matching REGEXP from `tags-apropos-additional-actions'."
                :arguments ("regexp"))
                nil [59914 61151])
            ("etags-tags-apropos" function (:arguments ("string")) nil [61153 63420])
            ("etags-tags-table-files" function nil nil [63422 63817])
            ("etags-tags-included-tables" function nil nil [63858 64366])
            ("tags-recognize-empty-tags-table" function (:documentation "Return non-nil if current buffer is empty.
If empty, make buffer-local values of the tags table format variables
that do nothing.") nil [64398 64997])
            ("tag-exact-file-name-match-p" function
               (:documentation "Return non-nil if TAG matches complete file name.
Any directory part of the file name is also matched."
                :arguments ("tag"))
                nil [65544 65812])
            ("tag-file-name-match-p" function
               (:documentation "Return non-nil if TAG matches file name, excluding directory part."
                :arguments ("tag"))
                nil [65937 66159])
            ("tag-exact-match-p" function
               (:documentation "Return non-nil if current tag line matches TAG exactly.
Point should be just after a string that matches TAG."
                :arguments ("tag"))
                nil [66493 66944])
            ("tag-implicit-name-match-p" function
               (:documentation "Return non-nil if current tag line has an implicit name.
Point should be just after a string that matches TAG."
                :arguments ("tag"))
                nil [67061 67617])
            ("tag-symbol-match-p" function
               (:documentation "Return non-nil if current tag line matches TAG as a symbol.
Point should be just after a string that matches TAG."
                :arguments ("tag"))
                nil [67746 68064])
            ("tag-word-match-p" function
               (:documentation "Return non-nil if current tag line matches TAG as a word.
Point should be just after a string that matches TAG."
                :arguments ("tag"))
                nil [68182 68442])
            ("tag-partial-file-name-match-p" function
               (:documentation "Return non-nil if current tag matches file name.
This is a substring match, and it can include directory separators.
Point should be just after a string that matches TAG."
                :arguments ("_tag"))
                nil [68580 68949])
            ("tag-any-match-p" function
               (:documentation "Return non-nil if current tag line contains TAG as a substring."
                :arguments ("_tag"))
                nil [69024 69146])
            ("tag-re-match-p" function
               (:documentation "Return non-nil if current tag line matches regexp RE."
                :arguments ("re"))
                nil [69208 69454])
            ("tags-loop-revert-buffers" variable (:documentation "Non-nil means tags-scanning loops should offer to reread changed files.
These loops normally read each file into Emacs, but when a file
is already visited, they use the existing buffer.
When this flag is non-nil, they offer to revert the existing buffer
in the case where the file has changed since you visited it.") nil [69457 69849])
            ("next-file" function
               (:documentation "Select next file among files in current tags table.

A first argument of t (prefix arg, if interactive) initializes to the
beginning of the list of files in the tags table.  If the argument is
neither nil nor t, it is evalled to initialize the list of files.

Non-nil second argument NOVISIT means use a temporary buffer
 to save time and avoid uninteresting warnings.

Value is nil if the file was already visited;
if the file was newly read in, the value is the filename."
                :user-visible-flag t
                :arguments ("initialize" "novisit"))
                nil [69866 73038])
            ("tags-loop-operate" variable (:documentation "Form for `tags-loop-continue' to eval to change one file.") nil [73040 73132])
            ("tags-loop-scan" variable
               (:documentation "Form for `tags-loop-continue' to eval to scan one file.
If it returns non-nil, this file needs processing by evalling
`tags-loop-operate'.  Otherwise, move on to the next file."
                :default-value '(user-error "%s" (substitute-command-keys "No \\[tags-search] or \\[tags-query-replace] in progress")))
                nil [73134 73461])
            ("tags-loop-eval" function
               (:documentation "Evaluate FORM and return its result.
Bind `case-fold-search' during the evaluation, depending on the value of
`tags-case-fold-search'."
                :arguments ("form"))
                nil [73463 73774])
            ("tags-loop-continue" function
               (:documentation "Continue last \\[tags-search] or \\[tags-query-replace] command.
Used noninteractively with non-nil argument to begin such a command (the
argument is passed to `next-file', which see).

Two variables control the processing we do on each file: the value of
`tags-loop-scan' is a form to be executed on each file to see if it is
interesting (it returns non-nil if so) and `tags-loop-operate' is a form to
evaluate to operate on an interesting file.  If the latter evaluates to
nil, we exit; otherwise we scan the next file."
                :user-visible-flag t
                :arguments ("first-time"))
                nil [73792 76060])
            ("tags-search" function
               (:documentation "Search through all files listed in tags table for match for REGEXP.
Stops when a match is found.
To continue searching for next match, use command \\[tags-loop-continue].

If FILE-LIST-FORM is non-nil, it should be a form that, when
evaluated, will return a list of file names.  The search will be
restricted to these files.

Also see the documentation of the `tags-file-name' variable."
                :user-visible-flag t
                :arguments ("regexp" "file-list-form"))
                nil [76077 76886])
            ("tags-query-replace" function
               (:documentation "Do `query-replace-regexp' of FROM with TO on all files listed in tags table.
Third arg DELIMITED (prefix arg) means replace only word-delimited matches.
If you exit (\\[keyboard-quit], RET or q), you can resume the query replace
with the command \\[tags-loop-continue].
Fourth arg FILE-LIST-FORM non-nil means initialize the replacement loop.

If FILE-LIST-FORM is non-nil, it is a form to evaluate to
produce the list of files to search.

See also the documentation of the variable `tags-file-name'."
                :user-visible-flag t
                :arguments ("from" "to" "delimited" "file-list-form"))
                nil [76903 78010])
            ("tags-complete-tags-table-file" function (:arguments ("string" "predicate" "what")) nil [78013 78375])
            ("list-tags" function
               (:documentation "Display list of tags in file FILE.
This searches only the first table in the list, and no included tables.
FILE should be as it appeared in the `etags' command, usually without a
directory specification."
                :user-visible-flag t
                :arguments ("file" "_next-match"))
                nil [78392 79421])
            ("tags-apropos" function
               (:documentation "Display list of all tags in tags table REGEXP matches."
                :arguments ("regexp"))
                nil [79438 80333])
            ("define-button-type" code nil nil [80362 80511])
            ("select-tags-table" function
               (:documentation "Select a tags table file from a menu of those you have already used.
The list of tags tables to select from is stored in `tags-table-set-list';
see the doc of that variable if you want to add names to the list."
                :user-visible-flag t)
                nil [80601 82726])
            ("select-tags-table-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map button-buffer-map) (define-key map "t" 'push-button) (define-key map " " 'next-line) (define-key map "" 'previous-line) (define-key map "n" 'next-line) (define-key map "p" 'previous-line) (define-key map "q" 'select-tags-table-quit) map)) nil [82728 83109])
            ("define-derived-mode" code nil nil [83111 83268])
            ("select-tags-table-select" function
               (:documentation "Select the tags table named on this line."
                :user-visible-flag t
                :arguments ("button"))
                nil [83270 83634])
            ("select-tags-table-quit" function
               (:documentation "Kill the buffer and delete the selected window."
                :user-visible-flag t)
                nil [83636 83773])
            ("complete-tag" function
               (:documentation "Perform tags completion on the text around point.
Completes to the set of names listed in the current tags table.
The string to complete is chosen in the same way as the default
for \\[find-tag] (which see)."
                :user-visible-flag t)
                nil [83791 84480])
            ("etags--xref-limit" variable
               (:constant-flag t
                :default-value 1000)
                nil [84732 84765])
            ("etags-xref-find-definitions-tag-order" variable
               (:documentation "Tag order used in `xref-backend-definitions' to look for definitions."
                :default-value '(tag-exact-match-p tag-implicit-name-match-p))
                nil [84767 84982])
            ("etags--xref-backend" function nil nil [84999 85036])
            ("cl-defmethod" code nil nil [85038 85132])
            ("cl-defmethod" code nil nil [85134 85245])
            ("cl-defmethod" code nil nil [85247 85358])
            ("cl-defmethod" code nil nil [85360 85469])
            ("etags--xref-find-definitions" function (:arguments ("pattern" "regexp?")) nil [85471 87221])
            ("xref-etags-location" type
               (:documentation "Location of an etags tag."
                :typemodifiers (":documentation" "\"Location of an etags tag.\"")
                :superclasses "xref-location"
                :members 
                  ( ("tag-info" variable (:type "list") nil nil)
                    ("file" variable (:type "string") nil nil))                  
                :type "class")
                nil [87223 87444])
            ("xref-make-etags-location" function (:arguments ("tag-info" "file")) nil [87446 87599])
            ("cl-defmethod" code nil nil [87601 87872])
            ("cl-defmethod" code nil nil [87874 87982])
            ("etags" package nil nil [87986 88002]))          
      :file "etags.el.gz"
      :pointmax 88027
      :fsize 23133
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c6349c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("custom" include nil nil [3701 3718])
            ("font-lock" include nil nil [3719 3739])
            ("cc-mode" include nil nil [3740 3758])
            ("cwarn" customgroup
               (:documentation "Highlight suspicious C and C++ constructions."
                :user-visible-flag t)
                nil [3783 3887])
            ("cwarn-configuration" variable
               (:documentation "List of items each describing which features are enable for a mode.
Each item is on the form (mode featurelist), where featurelist can be
on one of three forms:

* A list of enabled features.
* A list starting with the atom `not' followed by the features
  which are not enabled.
* The atom t, that represent that all features are enabled.

See variable `cwarn-font-lock-feature-keywords-alist' for available
features."
                :default-value '((c-mode (not reference)) (c++-mode t)))
                nil [3889 4429])
            ("cwarn-font-lock-feature-keywords-alist" variable
               (:documentation "An alist mapping a CWarn feature to font-lock keywords.
The keywords could either a font-lock keyword list or a symbol.
If it is a symbol it is assumed to be a variable containing a font-lock
keyword list."
                :default-value '((assign . cwarn-font-lock-assignment-keywords) (semicolon . cwarn-font-lock-semicolon-keywords) (reference . cwarn-font-lock-reference-keywords)))
                nil [4431 5001])
            ("cwarn-verbose" variable
               (:documentation "When nil, CWarn mode will not generate any messages.

Currently, messages are generated when the mode is activated and
deactivated."
                :default-value t)
                nil [5003 5199])
            ("cwarn-mode-text" variable
               (:documentation "String to display in the mode line when CWarn mode is active.

(When the string is not empty, make sure that it has a leading space.)"
                :default-value " CWarn")
                nil [5201 5483])
            ("cwarn-load-hook" variable (:documentation "Functions to run when CWarn mode is first loaded.") nil [5485 5619])
            ("define-minor-mode" code nil nil [5659 6089])
            ("define-obsolete-function-alias" code nil nil [6106 6177])
            ("cwarn-is-enabled" function
               (:documentation "Non-nil if CWarn FEATURE is enabled for MODE.
FEATURE is an atom representing one construction to highlight.

Check if any feature is enabled for MODE if no feature is specified.

The valid features are described by the variable
`cwarn-font-lock-feature-keywords-alist'."
                :arguments ("mode" "feature"))
                nil [6207 6847])
            ("cwarn-inside-macro" function (:documentation "True if point is inside a C macro definition.") nil [6849 7094])
            ("cwarn-font-lock-keywords" function
               (:documentation "Install/remove keywords into current buffer.
If ADDP is non-nil, install else remove."
                :arguments ("addp"))
                nil [7096 7558])
            ("cwarn-font-lock-match" function
               (:documentation "Match RE but only if BODY holds."
                :arguments ("re" "body"))
                nil [8464 8860])
            ("cwarn-font-lock-assignment-keywords" variable
               (:constant-flag t
                :default-value '((cwarn-font-lock-match-assignment-in-expression (1 font-lock-warning-face))))
                nil [8895 9027])
            ("cwarn-font-lock-match-assignment-in-expression" function
               (:documentation "Match assignments inside expressions."
                :arguments ("limit"))
                nil [9029 9463])
            ("cwarn-font-lock-semicolon-keywords" variable
               (:constant-flag t
                :default-value '((cwarn-font-lock-match-dangerous-semicolon (0 font-lock-warning-face))))
                nil [9488 9609])
            ("cwarn-font-lock-match-dangerous-semicolon" function
               (:documentation "Match semicolons directly after `for', `while', and `if'.
The semicolon after a `do { ... } while (x);' construction is not matched."
                :arguments ("limit"))
                nil [9611 10088])
            ("cwarn-font-lock-reference-keywords" variable
               (:constant-flag t
                :default-value '((cwarn-font-lock-match-reference (1 font-lock-warning-face))))
                nil [10113 10224])
            ("cwarn-font-lock-match-reference" function
               (:documentation "Font-lock matcher for C++ reference parameters."
                :arguments ("limit"))
                nil [10226 10479])
            ("turn-on-cwarn-mode-if-enabled" function (:documentation "Turn on CWarn mode in the current buffer if applicable.
The mode is turned if some feature is enabled for the current
`major-mode' in `cwarn-configuration'.") nil [10509 10764])
            ("define-globalized-minor-mode" code nil nil [10781 10872])
            ("cwarn" package nil nil [10874 10890])
            ("run-hooks" code nil nil [10892 10920]))          
      :file "cwarn.el.gz"
      :pointmax 10952
      :fsize 4216
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-231f968"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("hideshow" customgroup
               (:documentation "Minor mode for hiding and showing program and comment blocks."
                :user-visible-flag t)
                nil [10030 10155])
            ("hs-hide-comments-when-hiding-all" variable
               (:documentation "Hide the comments too when you do an `hs-hide-all'."
                :default-value t)
                nil [10157 10295])
            ("hs-minor-mode-hook" variable (:documentation "Hook called when hideshow minor mode is activated or deactivated.") nil [10297 10452])
            ("hs-isearch-open" variable
               (:documentation "What kind of hidden blocks to open when doing `isearch'.
One of the following symbols:

  code    -- open only code blocks
  comment -- open only comment blocks
  t       -- open both code and comment blocks
  nil     -- open neither code nor comment blocks

This has effect only if `search-invisible' is set to `open'."
                :default-value 'code)
                nil [10454 11082])
            ("hs-special-modes-alist" variable
               (:documentation "Alist for initializing the hideshow variables for different modes.
Each element has the form
  (MODE START END COMMENT-START FORWARD-SEXP-FUNC ADJUST-BEG-FUNC).

If non-nil, hideshow will use these values as regexps to define blocks
and comments, respectively for major mode MODE.

START, END and COMMENT-START are regular expressions.  A block is
defined as text surrounded by START and END.

As a special case, START may be a list of the form (COMPLEX-START
MDATA-SELECTOR), where COMPLEX-START is a regexp w/ multiple parts and
MDATA-SELECTOR an integer that specifies which sub-match is the proper
place to adjust point, before calling `hs-forward-sexp-func'.  Point
is adjusted to the beginning of the specified match.  For example,
see the `hs-special-modes-alist' entry for `bibtex-mode'.

For some major modes, `forward-sexp' does not work properly.  In those
cases, FORWARD-SEXP-FUNC specifies another function to use instead.

See the documentation for `hs-adjust-block-beginning' to see what is the
use of ADJUST-BEG-FUNC.

If any of the elements is left nil or omitted, hideshow tries to guess
appropriate values.  The regexps should not contain leading or trailing
whitespace.  Case does not matter."
                :default-value (mapcar 'purecopy '((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))
                nil [11099 12560])
            ("hs-hide-all-non-comment-function" variable (:documentation "Function called if non-nil when doing `hs-hide-all' for non-comments.") nil [12562 12681])
            ("hs-allow-nesting" variable (:documentation "If non-nil, hiding remembers internal blocks.
This means that when the outer block is shown again,
any previously hidden internal blocks remain hidden.") nil [12683 12868])
            ("hs-hide-hook" variable (:documentation "Hook called (with `run-hooks') at the end of commands to hide text.
These commands include the toggling commands (when the result is to hide
a block), `hs-hide-all', `hs-hide-block' and `hs-hide-level'.") nil [12870 13102])
            ("hs-show-hook" variable (:documentation "Hook called (with `run-hooks') at the end of commands to show text.
These commands include the toggling commands (when the result is to show
a block), `hs-show-all' and `hs-show-block'.") nil [13104 13319])
            ("hs-set-up-overlay" variable (:documentation "Function called with one arg, OV, a newly initialized overlay.
Hideshow puts a unique overlay on each range of text to be hidden
in the buffer.  Here is a simple example of how to use this variable:

  (defun display-code-line-counts (ov)
    (when (eq \\='code (overlay-get ov \\='hs))
      (overlay-put ov \\='display
                   (format \"... / %d\"
                           (count-lines (overlay-start ov)
                                        (overlay-end ov))))))

  (setq hs-set-up-overlay \\='display-code-line-counts)

This example shows how to get information from the overlay as well
as how to set its `display' property.  See `hs-make-overlay' and
info node `(elisp)Overlays'.") nil [13321 14056])
            ("hs-minor-mode" variable (:documentation "Non-nil if using hideshow mode as a minor mode of some other mode.
Use the command `hs-minor-mode' to toggle or set this variable.") nil [14159 14320])
            ("hs-minor-mode-map" variable
               (:documentation "Keymap for hideshow minor mode."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "@" 'hs-hide-block) (define-key map "@" 'hs-show-block) (define-key map "@\210" 'hs-hide-all) (define-key map "@\223" 'hs-show-all) (define-key map "@" 'hs-hide-level) (define-key map "@" 'hs-toggle-hiding) (define-key map "@" 'hs-show-all) (define-key map "@" 'hs-hide-all) (define-key map "@" 'hs-hide-block) (define-key map "@" 'hs-toggle-hiding) (define-key map [(shift mouse-2)] 'hs-mouse-toggle-hiding) map))
                nil [14322 15096])
            ("easy-menu-define" code nil nil [15098 16836])
            ("defvar-local" code nil nil [16838 16999])
            ("defvar-local" code nil nil [17001 17076])
            ("defvar-local" code nil nil [17078 17352])
            ("defvar-local" code nil nil [17354 17421])
            ("defvar-local" code nil nil [17423 17789])
            ("defvar-local" code nil nil [17791 18530])
            ("hs-headline" variable (:documentation "Text of the line where a hidden block begins, set during isearch.
You can display this in the mode line by adding the symbol `hs-headline'
to the variable `mode-line-format'.  For example,

  (unless (memq \\='hs-headline mode-line-format)
    (setq mode-line-format
          (append \\='(\"-\" hs-headline) mode-line-format)))

Note that `mode-line-format' is buffer-local.") nil [18532 18936])
            ("hs-discard-overlays" function
               (:documentation "Delete hideshow overlays in region defined by FROM and TO.
Skip \"internal\" overlays if `hs-allow-nesting' is non-nil."
                :arguments ("from" "to"))
                nil [19038 19588])
            ("hs-make-overlay" function
               (:documentation "Return a new overlay in region defined by B and E with type KIND.
KIND is either `code' or `comment'.  Optional fourth arg B-OFFSET
when added to B specifies the actual buffer position where the block
begins.  Likewise for optional fifth arg E-OFFSET.  If unspecified
they are taken to be 0 (zero).  The following properties are set
in the overlay: `invisible' `hs' `hs-b-offset' `hs-e-offset'.  Also,
depending on variable `hs-isearch-open', the following properties may
be present: `isearch-open-invisible' `isearch-open-invisible-temporary'.
If variable `hs-set-up-overlay' is non-nil it should specify a function
to call with the newly initialized overlay."
                :arguments ("b" "e" "kind" "b-offset" "e-offset"))
                nil [19590 21012])
            ("hs-isearch-show" function
               (:documentation "Delete overlay OV, and set `hs-headline' to nil.

This function is meant to be used as the `isearch-open-invisible'
property of an overlay."
                :arguments ("ov"))
                nil [21014 21233])
            ("hs-isearch-show-temporary" function
               (:documentation "Hide or show overlay OV, and set `hs-headline', all depending on HIDE-P.
If HIDE-P is non-nil, `hs-headline' is set to nil and overlay OV is hidden.
Otherwise, `hs-headline' is set to the line of text at the head of OV, and
OV is shown.

This function is meant to be used as the `isearch-open-invisible-temporary'
property of an overlay."
                :arguments ("ov" "hide-p"))
                nil [21235 22465])
            ("hs-looking-at-block-start-p" function (:documentation "Return non-nil if the point is at the block start.") nil [22467 22656])
            ("hs-forward-sexp" function
               (:documentation "Adjust point based on MATCH-DATA and call `hs-forward-sexp-func' w/ ARG.
Original match data is restored upon return."
                :arguments ("match-data" "arg"))
                nil [22658 22973])
            ("hs-hide-comment-region" function
               (:documentation "Hide a region from BEG to END, marking it as a comment.
Optional arg REPOS-END means reposition at end."
                :arguments ("beg" "end" "repos-end"))
                nil [22975 23403])
            ("hs-hide-block-at-point" function
               (:documentation "Hide block if on block beginning.
Optional arg END means reposition at end.
Optional arg COMMENT-REG is a list of the form (BEGIN END) and
specifies the limits of the comment, or nil if the block is not
a comment.

The block beginning is adjusted by `hs-adjust-block-beginning'
and then further adjusted to be at the end of the line."
                :arguments ("end" "comment-reg"))
                nil [23405 24815])
            ("hs-inside-comment-p" function (:documentation "Return non-nil if point is inside a comment, otherwise nil.
Actually, return a list containing the buffer position of the start
and the end of the comment.  A comment block can be hidden only if on
its starting line there is only whitespace preceding the actual comment
beginning.  If we are inside of a comment but this condition is not met,
we return a list having a nil as its car and the end of comment position
as cdr.") nil [24817 27357])
            ("hs-grok-mode-type" function (:documentation "Set up hideshow variables for new buffers.
If `hs-special-modes-alist' has information associated with the
current buffer's major mode, use that.
Otherwise, guess start, end and `comment-start' regexps; `forward-sexp'
function; and adjust-block-beginning function.") nil [27359 29022])
            ("hs-find-block-beginning" function (:documentation "Reposition point at block-start.
Return point, or nil if original point was not in a block.") nil [29024 29718])
            ("hs-hide-level-recursive" function
               (:documentation "Recursively hide blocks ARG levels below point in region (MINP MAXP)."
                :arguments ("arg" "minp" "maxp"))
                nil [29720 30484])
            ("hs-life-goes-on" function
               (:documentation "Evaluate BODY forms if variable `hs-minor-mode' is non-nil.
In the dynamic context of this macro, `inhibit-point-motion-hooks'
and `case-fold-search' are both t."
                :arguments ("body"))
                nil [30486 30805])
            ("put" code nil nil [30807 30861])
            ("hs-overlay-at" function
               (:documentation "Return hideshow overlay at POSITION, or nil if none to be found."
                :arguments ("position"))
                nil [30863 31175])
            ("hs-already-hidden-p" function (:documentation "Return non-nil if point is in an already-hidden block, otherwise nil.") nil [31177 31737])
            ("hs-c-like-adjust-block-beginning" function
               (:documentation "Adjust INITIAL, the buffer position after `hs-block-start-regexp'.
Actually, point is never moved; a new position is returned that is
the end of the C-function header.  This adjustment function is meant
to be assigned to `hs-adjust-block-beginning' for C-like modes."
                :arguments ("initial"))
                nil [31787 32208])
            ("hs-hide-all" function
               (:documentation "Hide all top level blocks, displaying only first and last lines.
Move point to the beginning of the line, and run the normal hook
`hs-hide-hook'.  See documentation for `run-hooks'.
If `hs-hide-comments-when-hiding-all' is non-nil, also hide the comments."
                :user-visible-flag t)
                nil [32301 34274])
            ("hs-show-all" function
               (:documentation "Show everything then run `hs-show-hook'.  See `run-hooks'."
                :user-visible-flag t)
                nil [34276 34592])
            ("hs-hide-block" function
               (:documentation "Select a block and hide it.  With prefix arg, reposition at END.
Upon completion, point is repositioned and the normal hook
`hs-hide-hook' is run.  See documentation for `run-hooks'."
                :user-visible-flag t
                :arguments ("end"))
                nil [34594 35245])
            ("hs-show-block" function
               (:documentation "Select a block and show it.
With prefix arg, reposition at END.  Upon completion, point is
repositioned and the normal hook `hs-show-hook' is run.
See documentation for functions `hs-hide-block' and `run-hooks'."
                :user-visible-flag t
                :arguments ("end"))
                nil [35247 36531])
            ("hs-hide-level" function
               (:documentation "Hide all blocks ARG levels below this block.
The hook `hs-hide-hook' is run; see `run-hooks'."
                :user-visible-flag t
                :arguments ("arg"))
                nil [36533 36881])
            ("hs-toggle-hiding" function
               (:documentation "Toggle hiding/showing of a block.
See `hs-hide-block' and `hs-show-block'."
                :user-visible-flag t)
                nil [36883 37099])
            ("hs-mouse-toggle-hiding" function
               (:documentation "Toggle hiding/showing of a block.
This command should be bound to a mouse key.
Argument E is a mouse event used by `mouse-set-point'.
See `hs-hide-block' and `hs-show-block'."
                :user-visible-flag t
                :arguments ("e"))
                nil [37101 37400])
            ("hs-hide-initial-comment-block" function
               (:documentation "Hide the first block of comments in a file.
This can be useful if you have huge RCS logs in those comments."
                :user-visible-flag t)
                nil [37402 37971])
            ("define-minor-mode" code nil nil [37988 39325])
            ("turn-off-hideshow" function (:documentation "Unconditionally turn off `hs-minor-mode'.") nil [39342 39437])
            ("hideshow" package nil nil [39531 39550]))          
      :file "hideshow.el.gz"
      :pointmax 39578
      :fsize 11831
      :lastmodtime '(23443 29219 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
