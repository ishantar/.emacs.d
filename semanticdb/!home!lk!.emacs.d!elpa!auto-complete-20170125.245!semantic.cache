;; Object semanticdb-project-database-file-1a6a514
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1a6a514"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1a6a4d4"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "auto-complete-autoloads.el"
      :pointmax 365
      :fsize 2331
      :lastmodtime '(23398 10650 230703 928000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1a6a4f4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ac-version" variable
               (:documentation "Version of auto-complete in string format.
Use `version-to-list' to get version component."
                :constant-flag t
                :default-value "1.5.1")
                nil [1379 1503])
            ("ac-version-major" variable
               (:documentation "Major version number of auto-complete"
                :constant-flag t
                :default-value (car (version-to-list ac-version)))
                nil [1505 1609])
            ("ac-version-minor" variable
               (:documentation "Minor version number of auto-complete"
                :constant-flag t
                :default-value (cadr (version-to-list ac-version)))
                nil [1611 1716])
            ("cl-lib" include nil nil [1718 1735])
            ("popup" include nil nil [1736 1752])
            ("ac-error" function
               (:documentation "Report an error and disable `auto-complete-mode'."
                :arguments ("var"))
                nil [1773 1957])
            ("auto-complete" customgroup
               (:documentation "Auto completion."
                :user-visible-flag t)
                nil [1982 2068])
            ("ac-delay" variable
               (:documentation "Delay to completions will be available."
                :default-value 0.1)
                nil [2070 2177])
            ("ac-auto-show-menu" variable
               (:documentation "Non-nil means completion menu will be automatically shown."
                :default-value 0.8)
                nil [2179 2418])
            ("ac-show-menu-immediately-on-auto-complete" variable
               (:documentation "Non-nil means menu will be showed immediately on `auto-complete'."
                :default-value t)
                nil [2420 2586])
            ("ac-expand-on-auto-complete" variable
               (:documentation "Non-nil means expand whole common part on first time `auto-complete'."
                :default-value t)
                nil [2588 2743])
            ("ac-disable-faces" variable
               (:documentation "Non-nil means disable automatic completion on specified faces."
                :default-value '(font-lock-comment-face font-lock-string-face font-lock-doc-face))
                nil [2745 2956])
            ("ac-stop-flymake-on-completing" variable
               (:documentation "Non-nil means disble flymake temporarily on completing."
                :default-value t)
                nil [2958 3102])
            ("ac-flycheck-poll-completion-end-interval" variable
               (:documentation "Polling interval to restart automatically flycheck's checking after completion is end."
                :default-value 0.5)
                nil [3104 3290])
            ("ac-use-fuzzy" variable
               (:documentation "Non-nil means use fuzzy matching."
                :default-value (and (locate-library "fuzzy") t))
                nil [3292 3428])
            ("ac-fuzzy-cursor-color" variable
               (:documentation "Cursor color in fuzzy mode."
                :default-value "red")
                nil [3430 3541])
            ("ac-use-comphist" variable
               (:documentation "Non-nil means use intelligent completion history."
                :default-value t)
                nil [3543 3667])
            ("ac-comphist-threshold" variable
               (:documentation "Percentage of ignoring low scored candidates."
                :default-value 0.7)
                nil [3669 3795])
            ("ac-comphist-file" variable
               (:documentation "Completion history file name."
                :default-value (expand-file-name (concat (if (boundp 'user-emacs-directory) user-emacs-directory "~/.emacs.d/") "/ac-comphist.dat")))
                nil [3797 4109])
            ("ac-user-dictionary" variable (:documentation "User defined dictionary") nil [4111 4222])
            ("ac-dictionary-files" variable
               (:documentation "Dictionary files."
                :default-value '("~/.dict"))
                nil [4224 4339])
            ("defvaralias" code nil nil [4340 4400])
            ("ac-dictionary-directories" variable
               (:documentation "Dictionary directories."
                :default-value (ignore-errors (when load-file-name (let ((installed-dir (file-name-directory load-file-name))) (cl-loop for name in '("ac-dict" "dict") for dir = (concat installed-dir name) if (file-directory-p dir) collect dir)))))
                nil [4402 4795])
            ("ac-use-quick-help" variable
               (:documentation "Non-nil means use quick help."
                :default-value t)
                nil [4797 4903])
            ("ac-quick-help-delay" variable
               (:documentation "Delay to show quick help."
                :default-value 1.5)
                nil [4905 5009])
            ("ac-menu-height" variable
               (:documentation "Max height of candidate menu."
                :default-value 10)
                nil [5011 5115])
            ("defvaralias" code nil nil [5116 5171])
            ("ac-quick-help-height" variable
               (:documentation "Max height of quick help."
                :default-value 20)
                nil [5173 5279])
            ("ac-quick-help-prefer-pos-tip" variable
               (:documentation "Prefer native tooltip with pos-tip than overlay popup for displaying quick help."
                :default-value t)
                nil [5281 5449])
            ("defvaralias" code nil nil [5450 5517])
            ("ac-candidate-limit" variable (:documentation "Limit number of candidates. Non-integer means no limit.") nil [5519 5654])
            ("defvaralias" code nil nil [5655 5706])
            ("ac-modes" variable
               (:documentation "Major modes `auto-complete-mode' can run on."
                :default-value '(emacs-lisp-mode lisp-mode lisp-interaction-mode slime-repl-mode nim-mode c-mode cc-mode c++-mode objc-mode swift-mode go-mode java-mode malabar-mode clojure-mode clojurescript-mode scala-mode scheme-mode ocaml-mode tuareg-mode coq-mode haskell-mode agda-mode agda2-mode perl-mode cperl-mode python-mode ruby-mode lua-mode tcl-mode ecmascript-mode javascript-mode js-mode js-jsx-mode js2-mode js2-jsx-mode coffee-mode php-mode css-mode scss-mode less-css-mode elixir-mode makefile-mode sh-mode fortran-mode f90-mode ada-mode xml-mode sgml-mode web-mode ts-mode sclang-mode verilog-mode qml-mode apples-mode))
                nil [5708 6502])
            ("ac-compatible-packages-regexp" variable
               (:documentation "Regexp to indicate what packages can work with auto-complete."
                :default-value "^ac-")
                nil [6504 6660])
            ("ac-non-trigger-commands" variable
               (:documentation "Commands that can't be used as triggers of `auto-complete'."
                :default-value '(*table--cell-self-insert-command electric-buffer-list))
                nil [6662 6873])
            ("ac-trigger-commands" variable
               (:documentation "Trigger commands that specify whether `auto-complete' should start or not."
                :default-value '(self-insert-command))
                nil [6875 7059])
            ("ac-trigger-commands-on-completing" variable
               (:documentation "Trigger commands that specify whether `auto-complete' should continue or not."
                :default-value '(delete-backward-char backward-delete-char backward-delete-char-untabify autopair-backspace paredit-backward-delete paredit-backward-delete-word))
                nil [7061 7437])
            ("ac-trigger-key" variable (:documentation "Non-nil means `auto-complete' will start by typing this key.
If you specify this TAB, for example, `auto-complete' will start by typing TAB,
and if there is no completions, an original command will be fallbacked.") nil [7439 7972])
            ("ac-auto-start" variable
               (:documentation "Non-nil means completion will be started automatically.
Positive integer means if a length of a word you entered is larger than the value,
completion will be started automatically.
If you specify `nil', never be started automatically."
                :default-value 2)
                nil [7974 8387])
            ("ac-stop-words" variable (:documentation "List of string to stop completion.") nil [8389 8506])
            ("defvaralias" code nil nil [8507 8547])
            ("ac-use-dictionary-as-stop-words" variable
               (:documentation "Non-nil means a buffer related dictionary will be thought of as stop words."
                :default-value t)
                nil [8549 8715])
            ("ac-ignore-case" variable
               (:documentation "Non-nil means auto-complete ignores case.
If this value is `smart', auto-complete ignores case only when
a prefix doesn't contain any upper case letters."
                :default-value 'smart)
                nil [8717 9054])
            ("ac-dwim" variable
               (:documentation "Non-nil means `auto-complete' works based on Do What I Mean."
                :default-value t)
                nil [9056 9183])
            ("ac-use-menu-map" variable (:documentation "Non-nil means a special keymap `ac-menu-map' on completing menu will be used.") nil [9185 9339])
            ("ac-use-overriding-local-map" variable (:documentation "Non-nil means `overriding-local-map' will be used to hack for overriding key events on auto-completion.") nil [9341 9533])
            ("ac-disable-inline" variable (:documentation "Non-nil disable inline completion visibility") nil [9535 9658])
            ("ac-candidate-menu-min" variable
               (:documentation "Number of candidates required to display menu"
                :default-value 1)
                nil [9660 9786])
            ("ac-max-width" variable (:documentation "Maximum width for auto-complete menu to have") nil [9788 10041])
            ("ac-completion-face" variable
               (:documentation "Face for inline completion"
                :default-value '((t (:foreground "darkgray" :underline t)))
                :type "face")
                nil [10043 10173])
            ("ac-candidate-face" variable
               (:documentation "Face for candidate."
                :default-value '((t (:inherit popup-face)))
                :type "face")
                nil [10175 10281])
            ("ac-candidate-mouse-face" variable
               (:documentation "Mouse face for candidate."
                :default-value '((t (:inherit popup-menu-mouse-face)))
                :type "face")
                nil [10283 10412])
            ("ac-selection-face" variable
               (:documentation "Face for selected candidate."
                :default-value '((t (:inherit popup-menu-selection-face)))
                :type "face")
                nil [10414 10544])
            ("auto-complete-mode-hook" variable (:documentation "Hook for `auto-complete-mode'.") nil [10546 10617])
            ("auto-complete-mode" variable (:documentation "Dummy variable to suppress compiler warnings.") nil [10647 10728])
            ("ac-cursor-color" variable (:documentation "Old cursor color.") nil [10730 10780])
            ("ac-inline" variable (:documentation "Inline completion instance.") nil [10782 10836])
            ("ac-menu" variable (:documentation "Menu instance.") nil [10838 10877])
            ("ac-show-menu" variable (:documentation "Flag to show menu on timer tick.") nil [10879 10941])
            ("ac-last-completion" variable (:documentation "Cons of prefix marker and selected item of last completion.") nil [10943 11038])
            ("ac-quick-help" variable (:documentation "Quick help instance") nil [11040 11090])
            ("ac-completing" variable (:documentation "Non-nil means `auto-complete-mode' is now working on completion.") nil [11092 11187])
            ("ac-buffer" variable (:documentation "Buffer where auto-complete is started.") nil [11189 11254])
            ("ac-point" variable (:documentation "Start point of prefix.") nil [11256 11304])
            ("ac-last-point" variable (:documentation "Last point of updating pattern.") nil [11306 11368])
            ("ac-prefix" variable (:documentation "Prefix string.") nil [11370 11411])
            ("defvaralias" code nil nil [11412 11447])
            ("ac-selected-candidate" variable (:documentation "Last selected candidate.") nil [11449 11512])
            ("ac-common-part" variable (:documentation "Common part string of meaningful candidates.
If there is no common part, this will be nil.") nil [11514 11636])
            ("ac-whole-common-part" variable (:documentation "Common part string of whole candidates.
If there is no common part, this will be nil.") nil [11638 11761])
            ("ac-prefix-overlay" variable (:documentation "Overlay for prefix string.") nil [11763 11824])
            ("ac-timer" variable (:documentation "Completion idle timer.") nil [11826 11874])
            ("ac-show-menu-timer" variable (:documentation "Show menu idle timer.") nil [11876 11933])
            ("ac-quick-help-timer" variable (:documentation "Quick help idle timer.") nil [11935 11994])
            ("ac-triggered" variable (:documentation "Flag to update.") nil [11996 12041])
            ("ac-limit" variable (:documentation "Limit number of candidates for each sources.") nil [12043 12113])
            ("ac-candidates" variable (:documentation "Current candidates.") nil [12115 12165])
            ("ac-candidates-cache" variable (:documentation "Candidates cache for individual sources.") nil [12167 12244])
            ("ac-fuzzy-enable" variable (:documentation "Non-nil means fuzzy matching is enabled.") nil [12246 12319])
            ("ac-dwim-enable" variable (:documentation "Non-nil means DWIM completion will be allowed.") nil [12321 12399])
            ("ac-mode-map" variable
               (:documentation "Auto-complete mode map. It is also used for trigger key command. See also `ac-trigger-key'."
                :default-value (make-sparse-keymap))
                nil [12401 12538])
            ("ac-completing-map" variable
               (:documentation "Keymap for completion."
                :default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'ac-expand) (define-key map [tab] 'ac-expand) (define-key map "" 'ac-complete) (define-key map (kbd "M-TAB") 'auto-complete) (define-key map "\356" 'ac-next) (define-key map "\360" 'ac-previous) (define-key map [down] 'ac-next) (define-key map [up] 'ac-previous) (define-key map [f1] 'ac-help) (define-key map [M-f1] 'ac-persist-help) (define-key map (kbd "C-?") 'ac-help) (define-key map (kbd "C-M-?") 'ac-persist-help) (define-key map [C-down] 'ac-quick-help-scroll-down) (define-key map [C-up] 'ac-quick-help-scroll-up) (define-key map "\216" 'ac-quick-help-scroll-down) (define-key map "\220" 'ac-quick-help-scroll-up) (dotimes (i 9) (let ((symbol (intern (format "ac-complete-select-%d" (1+ i))))) (fset symbol `(lambda nil (interactive) (when (and (ac-menu-live-p) (popup-select ac-menu ,i)) (ac-complete)))) (define-key map (read-kbd-macro (format "M-%s" (1+ i))) symbol))) map))
                nil [12540 13709])
            ("defvaralias" code nil nil [13710 13764])
            ("ac-menu-map" variable
               (:documentation "Keymap for completion on completing menu."
                :default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ac-completing-map) (define-key map (kbd "RET") 'ac-complete) (define-key map "" 'ac-next) (define-key map "" 'ac-previous) (define-key map "" 'ac-isearch) (define-key map [mouse-1] 'ac-mouse-1) (define-key map [down-mouse-1] 'ac-ignore) (define-key map [mouse-4] 'ac-mouse-4) (define-key map [mouse-5] 'ac-mouse-5) map))
                nil [13766 14263])
            ("ac-current-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ac-completing-map) map)) nil [14265 14379])
            ("ac-match-function" variable
               (:documentation "Default match function."
                :default-value 'all-completions)
                nil [14381 14452])
            ("ac-prefix-definitions" variable
               (:documentation "Prefix definitions for common use."
                :default-value '((symbol . ac-prefix-symbol) (file . ac-prefix-file) (valid-file . ac-prefix-valid-file) (c-dot . ac-prefix-c-dot) (c-dot-ref . ac-prefix-c-dot-ref) (cc-member . ac-prefix-cc-member)))
                nil [14454 14730])
            ("ac-sources" variable
               (:documentation "Sources for completion."
                :default-value '(ac-source-words-in-same-mode-buffers))
                nil [14732 14819])
            ("make-variable-buffer-local" code nil nil [14820 14860])
            ("ac-compiled-sources" variable (:documentation "Compiled source of `ac-sources'.") nil [14862 14931])
            ("ac-current-sources" variable (:documentation "Current working sources. This is sublist of `ac-compiled-sources'.") nil [14933 15035])
            ("ac-omni-completion-sources" variable (:documentation "Do not use this anymore.") nil [15037 15105])
            ("ac-current-prefix-def" variable nil nil [15107 15141])
            ("ac-ignoring-prefix-def" variable nil nil [15143 15178])
            ("ac-comphist" variable (:documentation "Database of completion history.") nil [15220 15280])
            ("ac-comphist-make-tab" function nil nil [15282 15349])
            ("ac-comphist-tab" function (:arguments ("db")) nil [15351 15395])
            ("ac-comphist-cache" function (:arguments ("db")) nil [15397 15443])
            ("ac-comphist-make" function (:arguments ("tab")) nil [15445 15569])
            ("ac-comphist-get" function (:arguments ("db" "string" "create")) nil [15571 15830])
            ("ac-comphist-add" function (:arguments ("db" "string" "prefix")) nil [15832 16128])
            ("ac-comphist-score" function (:arguments ("db" "string" "prefix")) nil [16130 17288])
            ("ac-comphist-sort" function (:arguments ("db" "collection" "prefix" "threshold")) nil [17290 18211])
            ("ac-comphist-serialize" function (:arguments ("db")) nil [18213 18382])
            ("ac-comphist-deserialize" function (:arguments ("sexp")) nil [18384 18750])
            ("ac-comphist-init" function nil nil [18752 18848])
            ("ac-comphist-load" function nil nil [18850 19239])
            ("ac-comphist-save" function nil nil [19241 19467])
            ("ac-buffer-dictionary" variable nil nil [19488 19521])
            ("ac-file-dictionary" variable (:default-value (make-hash-table :test 'equal)) nil [19522 19580])
            ("ac-clear-dictionary-cache" function nil nil [19582 19838])
            ("ac-file-dictionary" function (:arguments ("filename")) nil [19840 20247])
            ("ac-mode-dictionary" function (:arguments ("mode")) nil [20249 20637])
            ("ac-buffer-dictionary" function (:arguments ("buffer")) nil [20639 21087])
            ("ac-menu-at-wrapper-line-p" function (:documentation "Return non-nil if current line is long and wrapped to next visual line.") nil [21124 21403])
            ("ac-stop-word-p" function (:arguments ("word")) nil [21405 21559])
            ("ac-prefix-default" function (:documentation "Same as `ac-prefix-symbol' but ignore a number prefix.") nil [21561 21902])
            ("ac-prefix-symbol" function (:documentation "Default prefix definition function.") nil [21904 22042])
            ("ac-prefix-file" function (:documentation "File prefix.") nil [22044 22174])
            ("ac-windows-remote-file-p" function (:arguments ("file")) nil [22176 22329])
            ("ac-prefix-valid-file" function (:documentation "Existed (or to be existed) file prefix.") nil [22331 22990])
            ("ac-prefix-c-dot" function (:documentation "C-like languages dot(.) prefix.") nil [22992 23162])
            ("ac-prefix-c-dot-ref" function (:documentation "C-like languages dot(.) and reference(->) prefix.") nil [23164 23369])
            ("ac-prefix-cc-member" function (:documentation "C-like languages member(.)(->)(::) prefix.") nil [23371 23574])
            ("ac-define-prefix" function
               (:documentation "Define new prefix definition.
You can not use it in source definition like (prefix . `NAME')."
                :arguments ("name" "prefix"))
                nil [23576 23762])
            ("ac-match-substring" function (:arguments ("prefix" "candidates")) nil [23764 23972])
            ("ac-source-entity" function (:arguments ("source")) nil [23974 24073])
            ("ac-source-available-p" function (:arguments ("source")) nil [24075 24985])
            ("ac-compile-sources" function
               (:documentation "Compiled `SOURCES' into expanded sources style."
                :arguments ("sources"))
                nil [24987 25779])
            ("ac-compiled-sources" function nil nil [25781 25915])
            ("ac-menu-live-p" function nil nil [25917 25970])
            ("ac-menu-create" function (:arguments ("point" "width" "height")) nil [25972 26485])
            ("ac-menu-delete" function nil nil [26487 26579])
            ("ac-inline-overlay" function nil nil [26581 26632])
            ("ac-inline-live-p" function nil nil [26634 26704])
            ("ac-inline-show" function (:arguments ("point" "string")) nil [26706 28639])
            ("ac-inline-delete" function nil nil [28641 28783])
            ("ac-inline-hide" function nil nil [28785 29121])
            ("ac-inline-update" function nil nil [29123 29551])
            ("ac-put-prefix-overlay" function nil nil [29553 30059])
            ("ac-remove-prefix-overlay" function nil nil [30061 30376])
            ("ac-activate-completing-map" function nil nil [30378 30765])
            ("ac-deactivate-completing-map" function nil nil [30767 31107])
            ("ac-selected-candidate" function nil nil [31109 31195])
            ("ac-prefix" function (:arguments ("requires" "ignore-list")) nil [31197 33013])
            ("ac-init" function (:documentation "Initialize current sources to start completion.") nil [33015 33412])
            ("ac-candidates-1" function (:arguments ("source")) nil [33414 35648])
            ("ac-delete-duplicated-candidates" function (:arguments ("candidates")) nil [35650 36031])
            ("ac-reduce-candidates" function (:arguments ("candidates")) nil [36033 36548])
            ("ac-candidates" function (:documentation "Produce candidates for current sources.") nil [36550 38471])
            ("ac-update-candidates" function
               (:documentation "Update candidates of menu to `ac-candidates' and redraw it."
                :arguments ("cursor" "scroll-top"))
                nil [38473 39157])
            ("ac-reposition" function (:documentation "Force to redraw candidate menu with current `ac-candidates'.") nil [39159 39519])
            ("ac-cleanup" function (:documentation "Cleanup auto completion.") nil [39521 40974])
            ("ac-abort" function (:documentation "Abort completion.") nil [40976 41035])
            ("ac-extend-region-to-delete" function
               (:documentation "Determine the boundary of the region to delete before
inserting the completed string. This will be either the position
of current point, or the end of the symbol at point, if the text
from point to end of symbol is the right part of the completed
string."
                :arguments ("string"))
                nil [41037 41774])
            ("ac-expand-string" function
               (:documentation "Expand `STRING' into the buffer and update `ac-prefix' to `STRING'.
This function records deletion and insertion sequences by `undo-boundary'.
If `remove-undo-boundary' is non-nil, this function also removes `undo-boundary'
that have been made before in this function.  When `buffer-undo-list' is
`t', `remove-undo-boundary' has no effect."
                :arguments ("string" "remove-undo-boundary"))
                nil [41776 43329])
            ("ac-set-trigger-key" function
               (:documentation "Set `ac-trigger-key' to `KEY'. It is recommemded to use this function instead of calling `setq'."
                :arguments ("key"))
                nil [43331 43715])
            ("ac-set-timer" function nil nil [43717 43838])
            ("ac-cancel-timer" function nil nil [43840 43945])
            ("ac-update" function (:arguments ("force")) nil [43947 44779])
            ("ac-update-greedy" function (:arguments ("force")) nil [44781 45097])
            ("ac-set-show-menu-timer" function nil nil [45099 45349])
            ("ac-cancel-show-menu-timer" function nil nil [45351 45496])
            ("ac-show-menu" function nil nil [45498 45648])
            ("ac-help" function (:arguments ("persist")) nil [45650 45765])
            ("ac-persist-help" function nil nil [45767 45823])
            ("ac-last-help" function (:arguments ("persist")) nil [45825 45973])
            ("ac-last-persist-help" function nil nil [45975 46041])
            ("ac-set-quick-help-timer" function nil nil [46043 46258])
            ("ac-cancel-quick-help-timer" function nil nil [46260 46409])
            ("ac-pos-tip-show-quick-help" function (:arguments ("menu" "item" "args")) nil [46411 47383])
            ("ac-quick-help-use-pos-tip-p" function nil nil [47385 47508])
            ("ac-quick-help" function (:arguments ("force")) nil [47510 48234])
            ("ac-remove-quick-help" function nil nil [48236 48435])
            ("ac-last-quick-help" function nil nil [48437 49035])
            ("ac-define-quick-help-command" function (:arguments ("name" "arglist" "body")) nil [49037 49214])
            ("ac-define-quick-help-command" code nil nil [49216 49352])
            ("ac-define-quick-help-command" code nil nil [49354 49486])
            ("ac-isearch-callback" function (:arguments ("list")) nil [49521 49600])
            ("ac-isearch" function nil nil [49602 50147])
            ("cl-defun" code nil nil [50183 51170])
            ("auto-complete" function
               (:documentation "Start auto-completion at current point."
                :user-visible-flag t
                :arguments ("sources"))
                nil [51187 51325])
            ("ac-fuzzy-complete" function
               (:documentation "Start fuzzy completion at current point."
                :user-visible-flag t)
                nil [51327 51936])
            ("ac-next" function
               (:documentation "Select next candidate."
                :user-visible-flag t)
                nil [51938 52175])
            ("ac-previous" function
               (:documentation "Select previous candidate."
                :user-visible-flag t)
                nil [52177 52430])
            ("ac-expand" function
               (:documentation "Try expand, and if expanded twice, select next candidate.
If given a prefix argument, select the previous candidate."
                :user-visible-flag t
                :arguments ("arg"))
                nil [52432 53228])
            ("ac-expand-previous" function
               (:documentation "Like `ac-expand', but select previous candidate."
                :user-visible-flag t
                :arguments ("arg"))
                nil [53230 53359])
            ("ac-expand-common" function
               (:documentation "Try to expand meaningful common part."
                :user-visible-flag t)
                nil [53361 53702])
            ("ac-complete-1" function (:arguments ("candidate")) nil [53704 54314])
            ("ac-complete" function
               (:documentation "Try complete."
                :user-visible-flag t)
                nil [54316 54414])
            ("cl-defun" code nil nil [54416 55914])
            ("ac-stop" function
               (:documentation "Stop completing."
                :user-visible-flag t)
                nil [55916 56019])
            ("ac-ignore" function
               (:documentation "Same as `ignore'."
                :user-visible-flag t
                :arguments ("ignore"))
                nil [56021 56091])
            ("ac-mouse-1" function (:arguments ("event")) nil [56093 56217])
            ("ac-mouse-4" function (:arguments ("event")) nil [56219 56281])
            ("ac-mouse-5" function (:arguments ("event")) nil [56283 56341])
            ("ac-trigger-key-command" function (:arguments ("force")) nil [56343 56623])
            ("ac-clear-variables-every-minute-timer" variable nil nil [56655 56705])
            ("ac-clear-variables-after-save" variable nil nil [56706 56748])
            ("ac-clear-variables-every-minute" variable nil nil [56749 56793])
            ("ac-minutes-counter" variable nil nil [56794 56823])
            ("ac-clear-variable-after-save" function (:arguments ("variable" "pred")) nil [56825 56955])
            ("ac-clear-variables-after-save" function nil nil [56957 57139])
            ("ac-clear-variable-every-minutes" function (:arguments ("variable" "minutes")) nil [57141 57272])
            ("ac-clear-variable-every-minute" function (:arguments ("variable")) nil [57274 57370])
            ("ac-clear-variable-every-10-minutes" function (:arguments ("variable")) nil [57372 57473])
            ("ac-clear-variables-every-minute" function nil nil [57475 57677])
            ("ac-cursor-on-diable-face-p" function (:arguments ("point")) nil [57707 57830])
            ("ac-trigger-command-p" function
               (:documentation "Return non-nil if `COMMAND' is a trigger command."
                :arguments ("command"))
                nil [57832 58178])
            ("ac-fallback-key-sequence" function nil nil [58180 58364])
            ("ac-fallback-command" function (:arguments ("except-command")) nil [58366 58702])
            ("ac-compatible-package-command-p" function
               (:documentation "Return non-nil if `COMMAND' is compatible with auto-complete."
                :arguments ("command"))
                nil [58704 58919])
            ("ac-handle-pre-command" function nil nil [58921 59913])
            ("ac-handle-post-command" function nil nil [59915 60304])
            ("ac-flycheck-poll-completion-end-timer" variable (:documentation "Timer to poll end of completion.") nil [60306 60393])
            ("ac-syntax-checker-workaround" function nil nil [60395 61400])
            ("ac-setup" function nil nil [61402 61720])
            ("define-minor-mode" code nil nil [61737 62378])
            ("auto-complete-mode-maybe" function (:documentation "What buffer `auto-complete-mode' prefers.") nil [62380 62578])
            ("define-global-minor-mode" code nil nil [62595 62717])
            ("ac-flyspell-workaround" function
               (:documentation "Flyspell uses `sit-for' for delaying its process. Unfortunatelly,
it stops auto completion which is trigger with `run-with-idle-timer'.
This workaround avoid flyspell processes when auto completion is being started."
                :user-visible-flag t)
                nil [62766 63158])
            ("ac-linum-workaround" function
               (:documentation "linum-mode tries to display the line numbers even for the
completion menu. This workaround stops that annoying behavior."
                :user-visible-flag t)
                nil [63160 63445])
            ("ac-define-source" function
               (:documentation "Source definition macro. It defines a complete command also."
                :arguments ("name" "source"))
                nil [63473 64060])
            ("ac-word-index" variable nil nil [64088 64114])
            ("ac-candidate-words-in-buffer" function (:arguments ("point" "prefix" "limit")) nil [64116 65022])
            ("ac-incremental-update-word-index" function nil nil [65024 65575])
            ("ac-update-word-index-1" function nil nil [65577 65998])
            ("ac-update-word-index" function nil nil [66000 66214])
            ("ac-word-candidates" function (:arguments ("buffer-pred")) nil [66216 66854])
            ("ac-define-source" code nil nil [66856 66929])
            ("ac-define-source" code nil nil [66931 67042])
            ("ac-define-source" code nil nil [67044 67279])
            ("ac-symbols-cache" variable nil nil [67304 67333])
            ("ac-clear-variable-every-10-minutes" code nil nil [67334 67388])
            ("ac-symbol-file" function (:arguments ("symbol" "type")) nil [67390 68874])
            ("ac-symbol-documentation" function (:arguments ("symbol")) nil [68876 70650])
            ("ac-symbol-candidates" function nil nil [70652 70953])
            ("ac-define-source" code nil nil [70955 71094])
            ("ac-functions-cache" variable nil nil [71121 71152])
            ("ac-clear-variable-every-10-minutes" code nil nil [71153 71209])
            ("ac-function-candidates" function nil nil [71211 71429])
            ("ac-define-source" code nil nil [71431 71619])
            ("ac-variables-cache" variable nil nil [71646 71677])
            ("ac-clear-variable-every-10-minutes" code nil nil [71678 71734])
            ("ac-variable-candidates" function nil nil [71736 71953])
            ("ac-define-source" code nil nil [71955 72098])
            ("ac-emacs-lisp-features" variable nil nil [72124 72159])
            ("ac-clear-variable-every-10-minutes" code nil nil [72160 72220])
            ("ac-emacs-lisp-feature-candidates" function nil nil [72222 72907])
            ("ac-define-source" code nil nil [72909 73086])
            ("defvaralias" code nil nil [73088 73152])
            ("ac-define-source" code nil nil [73171 73366])
            ("ac-define-source" code nil nil [73405 73512])
            ("ac-filename-cache" variable nil nil [73533 73563])
            ("ac-filename-candidate" function nil nil [73565 74356])
            ("ac-define-source" code nil nil [74358 74556])
            ("ac-define-source" code nil nil [74579 74668])
            ("auto-complete" package nil nil [74670 74694]))          
      :file "auto-complete.el"
      :pointmax 74726
      :fsize 74725
      :lastmodtime '(23398 10647 674011 339000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1855780"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [892 909])
            ("auto-complete" include nil nil [910 934])
            ("declare-function" code nil nil [936 1006])
            ("declare-function" code nil nil [1007 1059])
            ("declare-function" code nil nil [1060 1125])
            ("declare-function" code nil nil [1126 1187])
            ("declare-function" code nil nil [1188 1249])
            ("declare-function" code nil nil [1250 1299])
            ("declare-function" code nil nil [1300 1342])
            ("ac-imenu-index" variable nil nil [1382 1409])
            ("ac-clear-variable-every-10-minutes" code nil nil [1411 1463])
            ("ac-imenu-candidates" function nil nil [1465 2788])
            ("ac-define-source" code nil nil [2790 2893])
            ("ac-gtags-candidate-face" variable
               (:documentation "Face for gtags candidate"
                :default-value '((t (:inherit ac-candidate-face :foreground "navy")))
                :type "face")
                nil [2905 3048])
            ("ac-gtags-selection-face" variable
               (:documentation "Face for the gtags selected candidate."
                :default-value '((t (:inherit ac-selection-face :background "navy")))
                :type "face")
                nil [3050 3207])
            ("ac-gtags-candidate" function nil nil [3209 3342])
            ("ac-define-source" code nil nil [3344 3539])
            ("ac-yasnippet-candidate-face" variable
               (:documentation "Face for yasnippet candidate."
                :default-value '((t (:inherit ac-candidate-face :background "sandybrown" :foreground "black")))
                :type "face")
                nil [3555 3750])
            ("ac-yasnippet-selection-face" variable
               (:documentation "Face for the yasnippet selected candidate."
                :default-value '((t (:inherit ac-selection-face :background "coral3")))
                :type "face")
                nil [3752 3919])
            ("ac-yasnippet-table-hash" function (:arguments ("table")) nil [3921 4101])
            ("ac-yasnippet-table-parent" function (:arguments ("table")) nil [4103 4293])
            ("ac-yasnippet-candidate-1" function (:arguments ("table")) nil [4295 4790])
            ("ac-yasnippet-candidates" function nil nil [4792 5695])
            ("ac-define-source" code nil nil [5697 5940])
            ("ac-semantic-candidates" function (:arguments ("prefix")) nil [5955 6464])
            ("ac-semantic-doc" function (:arguments ("symbol")) nil [6466 6745])
            ("ac-semantic-action" function nil nil [6747 7627])
            ("ac-define-source" code nil nil [7629 7943])
            ("ac-define-source" code nil nil [7945 8219])
            ("ac-eclim-candidates" function nil nil [8231 8358])
            ("ac-define-source" code nil nil [8360 8483])
            ("ac-css-property-alist" variable
               (:documentation "A list of CSS properties and their possible values."
                :constant-flag t
                :default-value '(("azimuth" angle "left-side" "far-left" "left" "center-left" "center" "center-right" "right" "far-right" "right-side" "behind" "leftwards" "rightwards") ("background" background-color background-image background-repeat background-attachment background-position) ("background-attachment" "scroll" "fixed") ("background-color" color "transparent") ("background-image" uri "none") ("background-position" percentage length "left" "center" "right" percentage length "top" "center" "bottom" "left" "center" "right" "top" "center" "bottom") ("background-repeat" "repeat" "repeat-x" "repeat-y" "no-repeat") ("border" border-width border-style border-color) ("border-bottom" border) ("border-bottom-color" border-color) ("border-bottom-style" border-style) ("border-bottom-width" border-width) ("border-collapse" "collapse" "separate") ("border-color" color "transparent") ("border-left" border) ("border-left-color" border-color) ("border-left-style" border-style) ("border-left-width" border-width) ("border-right" border) ("border-right-color" border-color) ("border-right-style" border-style) ("border-right-width" border-width) ("border-spacing" length length) ("border-style" border-style) ("border-top" border) ("border-top-color" border-color) ("border-top-style" border-style) ("border-top-width" border-width) ("border-width" border-width) ("bottom" length percentage "auto") ("caption-side" "top" "bottom") ("clear" "none" "left" "right" "both") ("clip" shape "auto") ("color" color) ("content" "normal" "none" string uri counter "attr()" "open-quote" "close-quote" "no-open-quote" "no-close-quote") ("counter-increment" identifier integer "none") ("counter-reset" identifier integer "none") ("cue" cue-before cue-after) ("cue-after" uri "none") ("cue-before" uri "none") ("cursor" uri "*" "auto" "crosshair" "default" "pointer" "move" "e-resize" "ne-resize" "nw-resize" "n-resize" "se-resize" "sw-resize" "s-resize" "w-resize" "text" "wait" "help" "progress") ("direction" "ltr" "rtl") ("display" "inline" "block" "list-item" "run-in" "inline-block" "table" "inline-table" "table-row-group" "table-header-group" "table-footer-group" "table-row" "table-column-group" "table-column" "table-cell" "table-caption" "none") ("elevation" angle "below" "level" "above" "higher" "lower") ("empty-cells" "show" "hide") ("float" "left" "right" "none") ("font" font-style font-variant font-weight font-size "/" line-height font-family "caption" "icon" "menu" "message-box" "small-caption" "status-bar") ("font-family" family-name generic-family) ("font-size" absolute-size relative-size length percentage) ("font-style" "normal" "italic" "oblique") ("font-variant" "normal" "small-caps") ("font-weight" "normal" "bold" "bolder" "lighter" "100" "200" "300" "400" "500" "600" "700" "800" "900") ("height" length percentage "auto") ("left" length percentage "auto") ("letter-spacing" "normal" length) ("line-height" "normal" number length percentage) ("list-style" list-style-type list-style-position list-style-image) ("list-style-image" uri "none") ("list-style-position" "inside" "outside") ("list-style-type" "disc" "circle" "square" "decimal" "decimal-leading-zero" "lower-roman" "upper-roman" "lower-greek" "lower-latin" "upper-latin" "armenian" "georgian" "lower-alpha" "upper-alpha" "none") ("margin" margin-width) ("margin-bottom" margin-width) ("margin-left" margin-width) ("margin-right" margin-width) ("margin-top" margin-width) ("max-height" length percentage "none") ("max-width" length percentage "none") ("min-height" length percentage) ("min-width" length percentage) ("orphans" integer) ("outline" outline-color outline-style outline-width) ("outline-color" color "invert") ("outline-style" border-style) ("outline-width" border-width) ("overflow" "visible" "hidden" "scroll" "auto") ("padding" padding-width) ("padding-bottom" padding-width) ("padding-left" padding-width) ("padding-right" padding-width) ("padding-top" padding-width) ("page-break-after" "auto" "always" "avoid" "left" "right") ("page-break-before" "auto" "always" "avoid" "left" "right") ("page-break-inside" "avoid" "auto") ("pause" time percentage) ("pause-after" time percentage) ("pause-before" time percentage) ("pitch" frequency "x-low" "low" "medium" "high" "x-high") ("pitch-range" number) ("play-during" uri "mix" "repeat" "auto" "none") ("position" "static" "relative" "absolute" "fixed") ("quotes" string string "none") ("richness" number) ("right" length percentage "auto") ("speak" "normal" "none" "spell-out") ("speak-header" "once" "always") ("speak-numeral" "digits" "continuous") ("speak-punctuation" "code" "none") ("speech-rate" number "x-slow" "slow" "medium" "fast" "x-fast" "faster" "slower") ("stress" number) ("table-layout" "auto" "fixed") ("text-align" "left" "right" "center" "justify") ("text-decoration" "none" "underline" "overline" "line-through" "blink") ("text-indent" length percentage) ("text-transform" "capitalize" "uppercase" "lowercase" "none") ("top" length percentage "auto") ("unicode-bidi" "normal" "embed" "bidi-override") ("vertical-align" "baseline" "sub" "super" "top" "text-top" "middle" "bottom" "text-bottom" percentage length) ("visibility" "visible" "hidden" "collapse") ("voice-family" specific-voice generic-voice "*" specific-voice generic-voice) ("volume" number percentage "silent" "x-soft" "soft" "medium" "loud" "x-loud") ("white-space" "normal" "pre" "nowrap" "pre-wrap" "pre-line") ("widows" integer) ("width" length percentage "auto") ("word-spacing" "normal" length) ("z-index" "auto" integer)))
                nil [8523 14753])
            ("ac-css-value-classes" variable
               (:documentation "A list of CSS property value classes and their contents."
                :constant-flag t
                :default-value '((absolute-size "xx-small" "x-small" "small" "medium" "large" "x-large" "xx-large") (border-style "none" "hidden" "dotted" "dashed" "solid" "double" "groove" "ridge" "inset" "outset") (color "aqua" "black" "blue" "fuchsia" "gray" "green" "lime" "maroon" "navy" "olive" "orange" "purple" "red" "silver" "teal" "white" "yellow" "rgb") (counter "counter") (family-name "Courier" "Helvetica" "Times") (generic-family "serif" "sans-serif" "cursive" "fantasy" "monospace") (generic-voice "male" "female" "child") (margin-width "auto") (relative-size "larger" "smaller") (shape "rect") (uri "url")))
                nil [14755 15562])
            ("ac-css-pseudo-classes" variable
               (:documentation "Identifiers for CSS pseudo-elements and pseudo-classes."
                :constant-flag t
                :default-value '("active" "after" "before" "first" "first-child" "first-letter" "first-line" "focus" "hover" "lang" "left" "link" "right" "visited"))
                nil [15564 15796])
            ("ac-css-property" variable (:documentation "Current editing property.") nil [15798 15856])
            ("ac-css-prefix" function nil nil [15858 16049])
            ("ac-css-property-candidates" function nil nil [16051 16721])
            ("ac-define-source" code nil nil [16723 16849])
            ("ac-define-source" code nil nil [16860 16998])
            ("ac-define-source" code nil nil [17011 17137])
            ("ac-ropemacs-loaded" variable nil nil [17184 17215])
            ("ac-ropemacs-require" function nil nil [17216 17466])
            ("ac-ropemacs-setup" function nil nil [17468 17654])
            ("ac-ropemacs-initialize" function nil nil [17656 17937])
            ("ac-ropemacs-completions-cache" variable nil nil [17939 17981])
            ("ac-source-ropemacs" variable (:default-value '((init lambda nil (setq ac-ropemacs-completions-cache (mapcar (lambda (completion) (concat ac-prefix completion)) (ignore-errors (rope-completions))))) (candidates . ac-ropemacs-completions-cache))) nil [17982 18314])
            ("ac-source-rcodetools" variable (:default-value '((init lambda nil (require 'rcodetools) (condition-case x (save-excursion (rct-exec-and-eval rct-complete-command-name "--completion-emacs-icicles")) (error) (setq rct-method-completion-table nil))) (candidates lambda nil (all-completions ac-prefix (mapcar (lambda (completion) (replace-regexp-in-string "	.*$" "" (car completion))) rct-method-completion-table))))) nil [18331 18951])
            ("ac-common-setup" function nil nil [18979 19057])
            ("ac-emacs-lisp-mode-setup" function nil nil [19059 19234])
            ("ac-cc-mode-setup" function nil nil [19236 19342])
            ("ac-ruby-mode-setup" function nil nil [19344 19373])
            ("ac-css-mode-setup" function nil nil [19375 19469])
            ("ac-config-default" function nil nil [19486 19915])
            ("auto-complete-config" package nil nil [19917 19948]))          
      :file "auto-complete-config.el"
      :pointmax 19987
      :fsize 19986
      :lastmodtime '(23398 10647 730678 581000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!auto-complete-20170125.245!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
