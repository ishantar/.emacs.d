;; Object semanticdb-project-database-file-1560954
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1560954"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1560934"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "irony-autoloads.el"
      :pointmax 349
      :fsize 5264
      :lastmodtime '(23450 12738 334444 751000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1751f80"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("irony" include nil nil [1031 1047])
            ("irony-snippet" include nil nil [1048 1072])
            ("cl-lib" include nil nil [1074 1091])
            ("irony-completion" customgroup
               (:documentation "Irony's completion interface."
                :user-visible-flag t)
                nil [1128 1209])
            ("irony-completion-trigger-commands" variable
               (:documentation "List of commands to watch for asynchronous completion triggering."
                :default-value '(self-insert-command newline-and-indent c-context-line-break c-scope-operator c-electric-backspace c-electric-brace c-electric-colon c-electric-lt-gt c-electric-paren c-electric-pound c-electric-semi&comma c-electric-slash c-electric-star))
                nil [1211 2253])
            ("irony-completion-availability-filter" variable
               (:documentation "For completion, only accept candidates whose availability is in the list.

Maps to libclang's CXAvailabilityKind:
- https://clang.llvm.org/doxygen/group__CINDEX.html#gada331ea0195e952c8f181ecf15e83d71

Due to a bug in
Clang (https://bugs.llvm.org//show_bug.cgi?id=24329), candidates
that can be validly accessed are deemed not-accessible."
                :default-value '(available deprecated))
                nil [2255 2768])
            ("irony-completion-symbol-bounds" function nil nil [2800 3668])
            ("irony-completion-beginning-of-symbol" function nil nil [3670 3758])
            ("irony-completion-end-of-symbol" function nil nil [3760 3842])
            ("irony-completion--skip-whitespaces-backward" function nil nil [3844 4002])
            ("irony-completion--parse-context-position" function (:arguments ("pos")) nil [4004 4186])
            ("irony--completion-line-column" function (:arguments ("pos")) nil [4188 4565])
            ("irony-completion--enter" function nil nil [4589 4700])
            ("irony-completion--exit" function nil nil [4702 4811])
            ("irony-completion--post-complete-yas-snippet" function (:arguments ("str" "placeholders")) nil [4813 5552])
            ("irony-iotask-define-task" code nil nil [5594 5876])
            ("irony--complete-task-1" function (:arguments ("buffer" "pos")) nil [5878 6334])
            ("irony--complete-task" function (:arguments ("buffer" "pos")) nil [6336 6604])
            ("irony-iotask-define-task" code nil nil [6606 6973])
            ("irony--candidates-task" function (:arguments ("buffer" "pos" "prefix" "style")) nil [6975 7165])
            ("irony-completion-typed-text" function (:arguments ("candidate")) nil [7206 7273])
            ("irony-completion-priority" function (:arguments ("candidate")) nil [7275 7340])
            ("irony-completion-type" function (:arguments ("candidate")) nil [7342 7403])
            ("irony-completion-brief" function (:arguments ("candidate")) nil [7405 7467])
            ("irony-completion-annotation" function (:arguments ("candidate")) nil [7469 7566])
            ("irony-completion-post-comp-str" function (:arguments ("candidate")) nil [7568 7644])
            ("irony-completion-post-comp-placeholders" function (:arguments ("candidate")) nil [7646 7731])
            ("irony-completion-availability" function
               (:documentation "See `irony-completion-availability-filter'"
                :arguments ("candidate"))
                nil [7733 7849])
            ("irony-completion--filter-candidates" function (:arguments ("candidates")) nil [7851 8068])
            ("irony-completion-candidates" function
               (:documentation "Return the list of candidates at point.

A candidate is composed of the following elements:
 0. The typed text. Multiple candidates can share the same string
    because of overloaded functions, default arguments, etc.
 1. The priority.
 2. The [result-]type of the candidate, if any.
 3. If non-nil, contains the Doxygen brief documentation of the
    candidate.
 4. The signature of the candidate excluding the result-type
    which is available separately.
    Example: \"foo(int a, int b) const\"
 5. The annotation start, a 0-based index in the prototype string.
 6. Post-completion data. The text to insert followed by 0 or
    more indices. These indices work by pairs and describe ranges
    of placeholder text.
    Example: (\"(int a, int b)\" 1 6 8 13)
 7. The availability of the candidate."
                :arguments ("prefix" "style"))
                nil [8070 9109])
            ("irony-completion-candidates-async" function (:arguments ("callback" "prefix" "style")) nil [9111 9532])
            ("irony-completion-post-complete" function (:arguments ("candidate")) nil [9534 9929])
            ("irony-completion-at-trigger-point-p" function nil nil [9931 11996])
            ("irony-completion--capf-candidate" function (:arguments ("candidate")) nil [12021 12122])
            ("irony-completion--capf-annotate" function (:arguments ("candidate")) nil [12124 12255])
            ("irony-completion--capf-postcomp-commonprefix" function (:arguments ("candidates")) nil [12257 12931])
            ("irony-completion--capf-postcomp-all-equal-p" function (:arguments ("candidates")) nil [12933 13475])
            ("irony-completion--capf-exit-function" function
               (:documentation "Insert post completion string or snippet after STR has been completed."
                :arguments ("candidates" "str" "status"))
                nil [13477 15413])
            ("irony-completion-at-point" function nil nil [15430 16433])
            ("irony-completion" package nil nil [16435 16462]))          
      :file "irony-completion.el"
      :pointmax 16572
      :fsize 16571
      :lastmodtime '(23450 12737 727770 674000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-13f3ce4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("irony-iotask" include nil nil [1699 1722])
            ("irony-completion--enter" function (:prototype-flag t) nil [1724 1778])
            ("irony-completion--exit" function (:prototype-flag t) nil [1779 1832])
            ("cl-lib" include nil nil [1834 1851])
            ("find-library-name" function (:prototype-flag t) nil [1853 1894])
            ("lm-version" function (:prototype-flag t) nil [1895 1928])
            ("unless" code nil nil [2310 2740])
            ("unless" code nil nil [2064 2255])
            ("irony" customgroup
               (:documentation "C/C++ minor mode powered by libclang."
                :user-visible-flag t)
                nil [2802 2876])
            ("irony-lighter" variable
               (:documentation "Text to display in the mode line when irony mode is on."
                :default-value " irony")
                nil [2878 3004])
            ("irony-extra-cmake-args" variable (:documentation "Extra arguments to CMake when compiling the server.") nil [3006 3141])
            ("irony-user-dir" variable
               (:documentation "Directory containing the Irony generated files.

The slash is expected at the end."
                :default-value (locate-user-emacs-file "irony/"))
                nil [3143 3336])
            ("irony-supported-major-modes" variable
               (:documentation "List of modes known to be compatible with Irony."
                :default-value '(c++-mode c-mode objc-mode))
                nil [3338 3582])
            ("irony-additional-clang-options" variable (:documentation "Additional command line options to pass down to libclang.

Please, do NOT use this variable to add header search paths, only
additional warnings or compiler options.

These compiler options will be prepended to the command line, in
order to not override the value coming from a compilation
database.") nil [3599 4022])
            ("irony-lang-compile-option-alist" variable
               (:documentation "Alist to decide the language option to used based on the `major-mode'."
                :default-value '((c++-mode . "c++") (c-mode . "c") (objc-mode . "objective-c")))
                nil [4024 4290])
            ("irony-cmake-executable" variable
               (:documentation "Name or path of the CMake executable."
                :default-value "cmake")
                nil [4292 4408])
            ("irony-server-source-dir" variable (:documentation "Points to the irony-server source directory.

This should point to the directory that contains the top-most
CMakeLists.txt used to build the server.

By default it will find the directory based on the irony.el directory.") nil [4410 4747])
            ("irony-server-build-dir" variable (:documentation "Build directory for irony-server.

If set to nil the default is to create a build directory in
`temporary-file-directory'/build-irony-server-`(irony-version)'.") nil [4749 4986])
            ("irony-server-install-prefix" variable
               (:documentation "Installation prefix used to install irony-server.

The irony-server executable is expected to be in
`irony-server-install-prefix'/bin/."
                :default-value irony-user-dir)
                nil [4988 5217])
            ("irony-server-w32-pipe-buffer-size" variable (:documentation "Windows-only setting,
the buffer size to use for the irony-server process pipe on Windows.

Larger values can improve performances on large buffers.

If non-nil, `w32-pipe-buffer-size' will be let-bound to this value
during the creation of the irony-server process.") nil [5219 5538])
            ("defvar-local" code nil nil [5817 5976])
            ("defvar-local" code nil nil [6042 6140])
            ("irony--eot" variable
               (:documentation "String sent by the server to signal the end of a response."
                :constant-flag t
                :default-value "
;;EOT
")
                nil [6369 6465])
            ("irony--define-error" function
               (:documentation "Define NAME as a new error signal.
MESSAGE is a string that will be output to the echo area if such an error
is signaled without being caught by a `condition-case'.
PARENT is either a signal or a list of signals from which it inherits.
Defaults to `error'."
                :arguments ("name" "message" "parent"))
                nil [6562 7481])
            ("irony--define-error" code nil nil [7483 7536])
            ("irony--define-error" code nil nil [7537 7617])
            ("irony--define-error" code nil nil [7618 7698])
            ("irony--aif" function (:arguments ("test" "if-expr" "else-body")) nil [7815 7970])
            ("irony--awhen" function (:arguments ("test" "body")) nil [8050 8173])
            ("irony--assoc-all" function (:arguments ("key" "list")) nil [8175 8345])
            ("irony--without-narrowing" function
               (:documentation "Remove the effect of narrowing for the current buffer.

Note: If `save-excursion' is needed for BODY, it should be used
before calling this macro."
                :arguments ("body"))
                nil [8347 8634])
            ("irony--buffer-size-in-bytes" function (:documentation "Return the buffer size, in bytes.") nil [8636 8748])
            ("irony--read-char-choice" function
               (:documentation "Wrapper around `read-char-choice', available since Emacs 24."
                :arguments ("prompt" "chars"))
                nil [8750 9185])
            ("irony--shorten-path" function
               (:documentation "Make PATH as short as possible.

The given path can be considered understandable by human but not
necessary a valid path string to use in code. Its only purpose is
to be displayed to the user."
                :arguments ("path"))
                nil [9187 9614])
            ("irony--split-command-line-1" function
               (:documentation "Remove the escaped quotes and backlash from a QUOTED-STR.

Return a list of the final characters in the reverse order.

Only to be consumed by `irony--split-command-line'."
                :arguments ("quoted-str"))
                nil [9616 10258])
            ("irony--split-command-line" function
               (:documentation "Split CMD-LINE into a list of arguments.

Takes care of double quotes as well as backslash.

Sadly I had to write this because `split-string-and-unquote'
breaks with escaped quotes in compile_commands.json, such as in:

    /usr/bin/c++ -DLLVM_VERSION_INFO=\\\\\\\"3.2svn\\\\\\\" <args>"
                :arguments ("cmd-line"))
                nil [10428 12423])
            ("irony--get-buffer-path-for-server" function
               (:documentation "Get the path of the current buffer to send to irony-server.

If no such file exists on the filesystem the special file '-' is
  returned instead."
                :arguments ("buffer"))
                nil [12425 12742])
            ("irony-mode-map" variable
               (:documentation "Keymap used in `irony-mode' buffers."
                :default-value (make-sparse-keymap))
                nil [12761 12846])
            ("define-minor-mode" code nil nil [12863 13079])
            ("irony--mode-enter" function nil nil [13081 13785])
            ("irony--mode-exit" function nil nil [13787 13841])
            ("irony-version" function
               (:documentation "Return the version number of the file irony.el.

If called interactively display the version in the echo area."
                :user-visible-flag t
                :arguments ("show-version"))
                nil [13858 14268])
            ("irony--lang-compile-option" function nil nil [14307 14441])
            ("irony--extract-working-directory-option" function
               (:documentation "Return working directory specified on the command line, if
any."
                :arguments ("flags"))
                nil [14443 14911])
            ("irony--adjust-compile-options" function (:documentation "The compile options to send to libclang.") nil [14913 15469])
            ("irony--extract-user-search-paths" function
               (:documentation "Retrieve the user search paths present in COMPILE-OPTIONS.

Relative paths are expanded to be relative to WORK-DIR.

The returned paths are returned as
directory (`file-name-as-directory').

Note: WORK-DIR is not used when the compile option
'-working-directory=<directory>' is detected in COMPILE-OPTIONS."
                :arguments ("compile-options" "work-dir"))
                nil [15471 16598])
            ("irony--server-install-command-history" variable nil nil [16631 16681])
            ("irony--install-server-read-command" function (:arguments ("command")) nil [16682 16952])
            ("irony-install-server" function
               (:documentation "Install or reinstall the Irony server.

The installation requires CMake and the libclang developpement package."
                :user-visible-flag t
                :arguments ("command"))
                nil [16954 18875])
            ("irony--server-install-finish-function" function (:arguments ("buffer" "msg")) nil [18877 19097])
            ("irony--find-server-executable" function (:documentation "Return the path to the irony-server executable.

Throw an `irony-server-error' if a proper executable cannot be
found.") nil [19099 20896])
            ("irony--server-executable" variable nil nil [20943 20980])
            ("irony--server-process" variable nil nil [20981 21015])
            ("irony--server-buffer" variable
               (:documentation "The name of the buffer for the irony process to run in.

When using a leading space, the buffer is hidden from the buffer
list (and undo information is not kept)."
                :default-value " *Irony*")
                nil [21016 21223])
            ("irony--start-server-process" function nil nil [21225 22260])
            ("irony-server-kill" function
               (:documentation "Kill the running irony-server process, if any."
                :user-visible-flag t)
                nil [22277 22498])
            ("irony--get-server-process-create" function nil nil [22500 22680])
            ("irony--run-task" function (:arguments ("task")) nil [22682 22773])
            ("irony--run-task-asynchronously" function (:arguments ("task" "callback")) nil [22775 22904])
            ("irony--quote-strings" function
               (:documentation "Like `combine-and-quote-strings', but when the string is \"\" or nil,
`irony--quote-strings' will convert it to \"\" instead of <SPC>.
That is:

  (irony--quote-strings '(\"a\" \"\" \"b\"))            => \"a \\\"\\\" b\"
  (combine-and-quote-strings '(\"a\" \"\" \"b\"))       => \"a  b\"
"
                :arguments ("strings" "separator"))
                nil [22906 23604])
            ("irony--server-send-command" function (:arguments ("command" "args")) nil [23606 24086])
            ("irony--server-command-update" function (:arguments ("_args")) nil [24193 24829])
            ("irony--server-query-update" function (:arguments ("_args")) nil [24999 25416])
            ("irony-iotask-define-task" code nil nil [25446 25694])
            ("irony--get-compile-options-task" function (:arguments ("build-dir" "file")) nil [25696 25826])
            ("cl-defstruct" code nil nil [25828 25957])
            ("irony--buffer-state-create" function (:arguments ("buffer")) nil [25959 26312])
            ("irony--buffer-state-compare" function (:arguments ("old" "new")) nil [26314 26608])
            ("irony-iotask-define-task" code nil nil [26610 28174])
            ("irony--set-unsaved-task" function (:arguments ("process" "buffer" "buf-state")) nil [28176 28310])
            ("irony-iotask-define-task" code nil nil [28312 29005])
            ("irony--reset-unsaved-task" function (:arguments ("process" "buffer")) nil [29007 29125])
            ("irony--list-unsaved-irony-mode-buffers" function (:arguments ("ignore-list")) nil [29127 29478])
            ("irony--get-buffer-change-alist" function
               (:documentation "Return a list of (buffer . old-state).

old-state can be nil if the old state isn't known."
                :arguments ("process"))
                nil [29480 29896])
            ("irony--unsaved-buffers-tasks" function nil nil [29898 30723])
            ("irony-iotask-define-task" code nil nil [30725 30974])
            ("irony--parse-task-1" function (:arguments ("buffer")) nil [30976 31252])
            ("irony--parse-task" function (:arguments ("buffer")) nil [31254 31499])
            ("irony-iotask-define-task" code nil nil [31501 31688])
            ("irony--diagnostics-task" function (:arguments ("buffer")) nil [31690 31845])
            ("irony-iotask-define-task" code nil nil [31847 32048])
            ("irony--get-type-task" function (:arguments ("buffer" "pos")) nil [32050 32337])
            ("irony-get-type" function
               (:documentation "Get the type of symbol under cursor."
                :user-visible-flag t)
                nil [32354 32710])
            ("irony-parse-buffer-async" function
               (:documentation "Parse the current buffer sending results to an optional
  CALLBACK function."
                :arguments ("callback"))
                nil [32712 32958])
            ("irony" package nil nil [32960 32976]))          
      :file "irony.el"
      :pointmax 33075
      :fsize 33074
      :lastmodtime '(23456 32311 485399 525000)
      :unmatched-syntax '((close-paren 2744 . 2745) (symbol 1957 . 1973) (open-paren 1956 . 1957)))
    (semanticdb-table "semanticdb-table-13f3d04"
      :file "irony-snippet.el"
      :fsize 4839
      :lastmodtime '(23450 12737 677770 63000))
    (semanticdb-table "semanticdb-table-1423350"
      :file "irony-iotask.el"
      :fsize 17214
      :lastmodtime '(23450 12737 927773 117000)))
  :file "!home!lk!.emacs.d!elpa!irony-20180703.1740!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
