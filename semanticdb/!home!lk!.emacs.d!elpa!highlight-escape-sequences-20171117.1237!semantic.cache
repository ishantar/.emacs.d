;; Object semanticdb-project-database-file-20d6760
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-20d6760"
  :tables
  (list
    (semanticdb-table "semanticdb-table-20d6740"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "highlight-escape-sequences-autoloads.el"
      :pointmax 391
      :fsize 1606
      :lastmodtime '(23398 9879 666199 368000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1c9381c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("hes-mode" customgroup
               (:documentation "Highlight escape sequences."
                :user-visible-flag t)
                nil [1720 1797])
            ("hes-escape-backslash-face" variable
               (:documentation "Face to highlight an escape backslash."
                :default-value '((default :inherit font-lock-regexp-grouping-backslash))
                :type "face")
                nil [1799 1937])
            ("hes-escape-sequence-face" variable
               (:documentation "Face to highlight an escape sequence."
                :default-value '((default :inherit font-lock-regexp-grouping-construct))
                :type "face")
                nil [1939 2075])
            ("hes-common-escape-sequence-re" variable
               (:documentation "Regexp to match the most common escape sequences.

Currently handles:
- octals (\\0 to \\777),
- hexadecimals (\\x00 to \\xFF),
- unicodes (\\u0000 to \\uFFFF),
- and backslash followed by one of \"'\\bfnrtv."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (repeat 1 3 (in "0-7")) (and 120 (repeat 2 xdigit)) (and 117 (repeat 4 xdigit)) (any "\"'\\bfnrtv")))))))
                nil [2077 2561])
            ("hes-c/c++/objc-escape-sequence-re" variable
               (:documentation "Regexp to match C/C++/ObjC escape sequences.

Currently handles:
- octals (\\0 to \\777),
- hexadecimals (\\x0 to \\xF..),
- unicodes (\\u0000 to \\uFFFF, \\U00000000 to \\UFFFFFFFF),
- and backslash followed by one of \"'?\\abfnrtv."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (repeat 1 3 (in "0-7")) (and 120 (1+ xdigit)) (and 117 (repeat 4 xdigit)) (and 85 (repeat 8 xdigit)) (any "\"'?\\abfnrtv")))))))
                nil [2563 3122])
            ("hes-java-escape-sequence-re" variable
               (:documentation "Regexp to match Java escape sequences.

Currently handles:
- octals (\\0 to \\777),
- unicodes (\\u0000 to \\uFFFF),
- and backslash followed by one of \"'\\bfnrt."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (repeat 1 3 (in "0-7")) (and 117 (repeat 4 xdigit)) (any "\"'\\bfnrt")))))))
                nil [3124 3512])
            ("hes-js-escape-sequence-re" variable
               (:documentation "Regexp to match JavaScript escape sequences.

Currently handles:
- octals (\\0 to \\777),
- hexadecimals (\\x00 to \\xFF),
- unicodes (\\u0000 to \\uFFFF),
- and backslash followed by anything else."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (repeat 1 3 (in "0-7")) (and 120 (repeat 2 xdigit)) (and 117 (repeat 4 xdigit)) not-newline))))))
                nil [3514 4033])
            ("hes-ruby-escape-sequence-re" variable
               (:documentation "Regexp to match Ruby escape sequences.

Currently handles:
- octals (\\0 to \\777),
- hexadecimals (\\x0 to \\xFF),
- unicodes (\\u0000 to \\uFFFF),
- unicodes in the \\u{} form,
- and backslash followed by anything else.

Currently doesn't handle \\C-, \\M-, etc."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (repeat 1 3 (in "0-7")) (and 120 (repeat 1 2 xdigit)) (and 117 (or (repeat 4 xdigit) (and 123 (repeat 1 6 xdigit) (0+ (1+ space) (repeat 1 6 xdigit)) 125))) not-newline))))))
                nil [4035 4838])
            ("hes-ruby-escape-sequence-keywords" variable
               (:constant-flag t
                :default-value `((,hes-ruby-escape-sequence-re (0 (let* ((state (syntax-ppss)) (term (nth 3 state))) (when (or (and (eq term 39) (member (match-string 2) '("\\" "'"))) (if (fboundp 'ruby-syntax-expansion-allowed-p) (ruby-syntax-expansion-allowed-p state) (memq term '(34 47 10 96 t)))) (font-lock-prepend-text-property (match-beginning 1) (match-end 1) 'face 'hes-escape-backslash-face) (font-lock-prepend-text-property (match-beginning 2) (match-end 2) 'face 'hes-escape-sequence-face) nil)) prepend))))
                nil [4840 5759])
            ("hes-elisp-escape-sequence-re" variable
               (:documentation "Regexp to match Emacs Lisp escape sequences.

Currently handles:
- unicodes (\\uNNNN and \\U00NNNNNN)
- hexadecimal (\\x...) and octal (\\0-7), variable number of digits
- backslash followed by anything else."
                :constant-flag t
                :default-value (rx (submatch (and 92 (submatch (or (and 117 (repeat 4 xdigit)) (and 85 48 48 (repeat 6 xdigit)) (and 120 (+ xdigit)) (+ (in "0-7")) not-newline))))))
                nil [5761 6346])
            ("hes-make-simple-escape-sequence-keywords" function (:arguments ("re")) nil [6348 6592])
            ("hes-mode-alist" variable
               (:documentation "Alist of regexps or `font-lock-keywords' elements for major modes."
                :default-value `((c-mode \, hes-c/c++/objc-escape-sequence-re) (c++-mode \, hes-c/c++/objc-escape-sequence-re) (objc-mode \, hes-c/c++/objc-escape-sequence-re) (go-mode \, hes-c/c++/objc-escape-sequence-re) (java-mode \, hes-java-escape-sequence-re) (clojure-mode \, hes-java-escape-sequence-re) (js-mode \, hes-js-escape-sequence-re) (js2-mode \, hes-js-escape-sequence-re) (ruby-mode \, hes-ruby-escape-sequence-keywords) (emacs-lisp-mode \, hes-elisp-escape-sequence-re)))
                nil [6594 7507])
            ("turn-on-hes-mode" function
               (:documentation "Turn on highlighting of escape sequences."
                :user-visible-flag t)
                nil [7524 8074])
            ("turn-off-hes-mode" function
               (:documentation "Turn off highlighting of escape sequences"
                :user-visible-flag t)
                nil [8091 8609])
            ("define-minor-mode" code nil nil [8626 8788])
            ("highlight-escape-sequences" package nil nil [8790 8827]))          
      :file "highlight-escape-sequences.el"
      :pointmax 8873
      :fsize 8872
      :lastmodtime '(23398 9879 519531 201000)
      :unmatched-syntax nil))
  :file "!home!lk!.emacs.d!elpa!highlight-escape-sequences-20171117.1237!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
