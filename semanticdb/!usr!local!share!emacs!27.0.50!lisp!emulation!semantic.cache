;; Object semanticdb-project-database-file-1905f0c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1905f0c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-205062c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("viper-version" variable
               (:documentation "The current version of Viper"
                :constant-flag t
                :default-value "3.14.2 of July 4, 2013")
                nil [627 709])
            ("cl-lib" include nil nil [13694 13711])
            ("mark-even-if-inactive" variable nil nil [13734 13764])
            ("quail-mode" variable nil nil [13765 13784])
            ("viper-expert-level" variable nil nil [13785 13812])
            ("viper-mode-string" variable nil nil [13813 13839])
            ("viper-major-mode-modifier-list" variable nil nil [13840 13879])
            ("viper-init" include nil nil [13897 13918])
            ("viper-keym" include nil nil [13919 13940])
            ("viper-custom-file-name" variable
               (:documentation "Viper customization file.
If set by the user, this must be done _before_ Viper is loaded in `~/.emacs'."
                :default-value (locate-user-emacs-file "viper" ".viper"))
                nil [13990 14171])
            ("viper" customgroup
               (:documentation "Vi emulation within Emacs.
NOTE: Viper customization should be saved in `viper-custom-file-name'."
                :user-visible-flag t)
                nil [14173 14335])
            ("viper-cmd" include nil nil [14337 14357])
            ("viper-misc" customgroup
               (:documentation "Miscellaneous Viper customization."
                :user-visible-flag t)
                nil [14359 14458])
            ("viper-always" variable
               (:documentation "Non-nil means, arrange for vi-state to be a default when appropriate.
This is different from `viper-mode' variable in that `viper-mode' determines
whether to use Viper in the first place, while `viper-always', if nil, lets
user decide when to invoke Viper in a major mode."
                :default-value t)
                nil [14461 14810])
            ("viper-saved-non-viper-variables" variable nil nil [14907 14951])
            ("viper-mode" variable
               (:documentation "To Viperize or not to Viperize.
If t, viperize Emacs.  If nil -- don't.  If `ask', ask the user.
This variable is used primarily when Viper is being loaded.

Must be set in your init file before Viper is loaded.
DO NOT set this variable interactively, unless you are using the customization
widget."
                :default-value (cond (noninteractive nil) (t 'ask)))
                nil [14953 15409])
            ("viper-vi-state-mode-list" variable
               (:documentation "Major modes that require Vi command state."
                :default-value '(fundamental-mode makefile-mode awk-mode m4-mode xrdb-mode winmgr-mode autoconf-mode cvs-edit-mode html-mode html-helper-mode emacs-lisp-mode lisp-mode lisp-interaction-mode jde-mode java-mode cc-mode c-mode c++-mode objc-mode fortran-mode f90-mode basic-mode bat-mode asm-mode prolog-mode flora-mode sql-mode text-mode indented-text-mode tex-mode latex-mode bibtex-mode ps-mode diff-mode idl-mode perl-mode cperl-mode javascript-mode tcl-mode python-mode sh-mode ksh-mode csh-mode gnus-article-mode mh-show-mode))
                nil [15411 16201])
            ("viper-emacs-state-mode-list" variable
               (:documentation "A list of major modes that should come up in Emacs state.
Normally, Viper would bring buffers up in Emacs state, unless the corresponding
major mode has been placed on `viper-vi-state-mode-list' or
`viper-insert-state-mode-list'.  So, don't place a new mode on this list,
unless it is coming up in a wrong Viper state."
                :default-value '(Custom-mode dired-mode efs-mode tar-mode egg-status-buffer-mode browse-kill-ring-mode recentf-mode recentf-dialog-mode occur-mode mh-folder-mode gnus-group-mode gnus-summary-mode completion-list-mode help-mode Info-mode Buffer-menu-mode compilation-mode rcirc-mode jde-javadoc-checker-report-mode view-mode vm-mode vm-summary-mode))
                nil [16203 17018])
            ("viper-insert-state-mode-list" variable
               (:documentation "A list of major modes that should come up in Vi Insert state."
                :default-value '(internal-ange-ftp-mode comint-mode gud-mode inferior-emacs-lisp-mode erc-mode eshell-mode shell-mode))
                nil [17020 17281])
            ("viper-apply-major-mode-modifiers" function (:arguments ("symbol" "value")) nil [17343 17620])
            ("viper-major-mode-modifier-list" variable
               (:documentation "List specifying how to modify the various major modes to enable some Viperisms.
The list has the structure: ((mode viper-state keymap) (mode viper-state
keymap) ...).  If `mode' is on the list, the `keymap' will be made active (on
the minor-mode-map-alist) in the specified viper state.
If you change this list, have to restart Emacs for the change to take effect.
However, if you did the change through the customization widget, then Emacs
needs to be restarted only if you deleted a triple mode-state-keymap from the
list.  No need to restart Emacs in case of insertion or modification of an
existing triple."
                :default-value '((help-mode emacs-state viper-slash-and-colon-map) (comint-mode insert-state viper-comint-mode-modifier-map) (comint-mode vi-state viper-comint-mode-modifier-map) (gud-mode insert-state viper-comint-mode-modifier-map) (shell-mode insert-state viper-comint-mode-modifier-map) (inferior-emacs-lisp-mode insert-state viper-comint-mode-modifier-map) (shell-mode vi-state viper-comint-mode-modifier-map) (ange-ftp-shell-mode insert-state viper-comint-mode-modifier-map) (ange-ftp-shell-mode vi-state viper-comint-mode-modifier-map) (internal-ange-ftp-mode insert-state viper-comint-mode-modifier-map) (internal-ange-ftp-mode vi-state viper-comint-mode-modifier-map) (dired-mode emacs-state viper-dired-modifier-map) (tar-mode emacs-state viper-slash-and-colon-map) (mh-folder-mode emacs-state viper-slash-and-colon-map) (gnus-group-mode emacs-state viper-gnus-modifier-map) (gnus-summary-mode emacs-state viper-gnus-modifier-map) (Info-mode emacs-state viper-slash-and-colon-map) (Buffer-menu-mode emacs-state viper-slash-and-colon-map) (erc-mode insert-state viper-comint-mode-modifier-map) (erc-mode vi-state viper-comint-mode-modifier-map)))
                nil [17748 19789])
            ("toggle-viper-mode" function
               (:documentation "Toggle Viper on/off.
If Viper is enabled, turn it off.  Otherwise, turn it on."
                :user-visible-flag t)
                nil [19809 20026])
            ("viper-mode" function
               (:documentation "Turn on Viper emulation of Vi in Emacs. See Info node `(viper)Top'."
                :user-visible-flag t)
                nil [20043 23382])
            ("this-major-mode-requires-vi-state" function (:arguments ("mode")) nil [23498 23904])
            ("viper-comint-mode-hook" function nil nil [23981 24167])
            ("viper-remove-hooks" function (:arguments ("symbol")) nil [24204 24845])
            ("viper-delocalize-var" function (:arguments ("symbol")) nil [24959 25092])
            ("viper--advice-list" variable nil nil [25094 25125])
            ("viper--advice-add" function (:arguments ("function" "where" "advice")) nil [25127 25264])
            ("viper--deactivate-advice-list" function nil nil [25266 25451])
            ("viper-go-away" function
               (:documentation "De-Viperize Emacs.
This function tries to do as good a job as possible.  However, it may undo some
user customization, unrelated to Viper.  For instance, if the user advised
`read-file-name', `describe-key', and some others, then this advice will be
undone.
It also can't undo some Viper settings."
                :user-visible-flag t)
                nil [25453 30405])
            ("viper-new-major-mode-buffer-list" variable nil nil [30546 30591])
            ("set-viper-state-in-major-mode" function nil nil [30659 31722])
            ("viper-major-mode-change-sentinel" function nil nil [31811 32141])
            ("viper--tty-ESC-filter" function (:arguments ("map")) nil [32865 33029])
            ("viper--lookup-key" function
               (:documentation "Kind of like `lookup-key'.
Two differences:
- KEY is a single key, not a sequence.
- the result is the \"raw\" binding, so it can be a `menu-item', rather than the
  binding contained in that menu item."
                :arguments ("map" "key"))
                nil [33031 33362])
            ("viper-catch-tty-ESC" function (:documentation "Setup key mappings of current terminal to turn a tty's ESC into `escape'.") nil [33364 33690])
            ("viper-uncatch-tty-ESC" function (:documentation "Don't hack ESC into `escape' any more.") nil [33692 33978])
            ("viper-setup-ESC-to-escape" function (:arguments ("enable")) nil [33980 34426])
            ("viper-set-hooks" function nil nil [34492 40542])
            ("viper-non-hook-settings" function nil nil [40623 42599])
            ("cond" code nil nil [42703 43786])
            ("viper-load-custom-file" function nil nil [43788 43934])
            ("if" code nil nil [43989 44573])
            ("if" code nil nil [44729 45873])
            ("if" code nil nil [46040 46695])
            ("define-key" code nil nil [46823 46898])
            ("define-key" code nil nil [46899 46978])
            ("define-key" code nil nil [47204 47281])
            ("define-key" code nil nil [47282 47366])
            ("when" code nil nil [47621 49796])
            ("run-hooks" code nil nil [49800 49828])
            ("viper" package nil nil [49868 49884]))          
      :file "viper.el.gz"
      :pointmax 49998
      :fsize 14792
      :lastmodtime '(23451 3115 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!27.0.50!lisp!emulation!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
