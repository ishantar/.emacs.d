;;-*-coding: utf-8;-*-
(define-abbrev-table 'Rd-mode-abbrev-table
  '(
    ("`ag" "\\arguments" nil :count 0)
    ("`al" "\\alias" nil :count 0)
    ("`au" "\\author" nil :count 0)
    ("`bf" "\\bold" nil :count 0)
    ("`co" "\\code" nil :count 0)
    ("`de" "\\describe" nil :count 0)
    ("`dn" "\\description" nil :count 0)
    ("`dt" "\\details" nil :count 0)
    ("`em" "\\emph" nil :count 0)
    ("`en" "\\enumerate" nil :count 0)
    ("`ex" "\\examples" nil :count 0)
    ("`fi" "\\file" nil :count 0)
    ("`fo" "\\format" nil :count 0)
    ("`it" "\\item" nil :count 0)
    ("`iz" "\\itemize" nil :count 0)
    ("`kw" "\\keyword" nil :count 0)
    ("`li" "\\link" nil :count 0)
    ("`me" "\\method" nil :count 0)
    ("`na" "\\name" nil :count 0)
    ("`no" "\\note" nil :count 0)
    ("`re" "\\references" nil :count 0)
    ("`sa" "\\seealso" nil :count 0)
    ("`se" "\\section" nil :count 0)
    ("`so" "\\source" nil :count 0)
    ("`ss" "\\subsection" nil :count 0)
    ("`sy" "\\synopsis" nil :count 0)
    ("`ta" "\\tabular" nil :count 0)
    ("`ti" "\\title" nil :count 0)
    ("`us" "\\usage" nil :count 0)
    ("`va" "\\value" nil :count 0)
   ))

(define-abbrev-table 'xah-elisp-mode-abbrev-table
  '(
    ("abbreviate-file-name" "(abbreviate-file-name ▮)" xah-elisp--ahf :count 0)
    ("add-hook" "(add-hook 'HOOK▮ 'FUNCTION)" xah-elisp--ahf :count 0)
    ("add-text-properties" "(add-text-properties START▮ END PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("add-to-list" "(add-to-list LIST-VAR▮ ELEMENT &optional APPEND COMPARE-FN)" xah-elisp--ahf :count 0)
    ("ah" "add-hook" xah-elisp--ahf :count 0)
    ("alist-get" "(alist-get key▮ value &optional default)" xah-elisp--ahf :count 0)
    ("and" "(and ▮)" xah-elisp--ahf :count 0)
    ("append" "(append ▮)" xah-elisp--ahf :count 0)
    ("append-to-file" "(append-to-file START▮ END FILENAME)" xah-elisp--ahf :count 0)
    ("apply" "(apply ▮)" xah-elisp--ahf :count 0)
    ("aref" "(aref ARRAY▮ INDEX)" xah-elisp--ahf :count 0)
    ("aset" "(aset ARRAY▮ IDX NEWELT)" xah-elisp--ahf :count 0)
    ("ask-user-about-supersession-threat" "(ask-user-about-supersession-threat FILENAME▮)" xah-elisp--ahf :count 0)
    ("assoc" "(assoc KEY▮ LIST)" xah-elisp--ahf :count 0)
    ("assoc-default" "(assoc-default key▮ alist &optional test default)" xah-elisp--ahf :count 0)
    ("assoc-string" "(assoc-string key▮ alist &optional case-fold)" xah-elisp--ahf :count 0)
    ("assq" "(assq key▮ alist)" xah-elisp--ahf :count 0)
    ("assq-delete-all" "(assq-delete-all key▮ alist)" xah-elisp--ahf :count 0)
    ("atf" "append-to-file" xah-elisp--ahf :count 0)
    ("autoload" "(autoload 'FUNCNAME▮ \"FILENAME\" &optional \"DOCSTRING\" INTERACTIVE TYPE)" xah-elisp--ahf :count 0)
    ("backward-char" "(backward-char ▮)" xah-elisp--ahf :count 0)
    ("backward-up-list" "(backward-up-list &optional ARG▮ 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)" xah-elisp--ahf :count 0)
    ("backward-word" "(backward-word ▮)" xah-elisp--ahf :count 0)
    ("barf-if-buffer-read-only" "(barf-if-buffer-read-only)" xah-elisp--ahf :count 0)
    ("bc" "backward-char" xah-elisp--ahf :count 0)
    ("beginning-of-line" "(beginning-of-line)" xah-elisp--ahf :count 0)
    ("bfn" "buffer-file-name" xah-elisp--ahf :count 0)
    ("bmp" "buffer-modified-p" xah-elisp--ahf :count 0)
    ("bol" "beginning-of-line" xah-elisp--ahf :count 0)
    ("botap" "bounds-of-thing-at-point" xah-elisp--ahf :count 0)
    ("boundp" "(boundp '▮)" xah-elisp--ahf :count 0)
    ("bounds-of-thing-at-point" "(bounds-of-thing-at-point 'symbol▮ 'filename 'word 'whitespace 'line)" xah-elisp--ahf :count 0)
    ("bs" "buffer-substring" xah-elisp--ahf :count 0)
    ("bsnp" "(buffer-substring-no-properties START▮ END)" xah-elisp--ahf :count 0)
    ("buffer-base-buffer" "(buffer-base-buffer &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-chars-modified-tick" "(buffer-chars-modified-tick &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-file-name" "(buffer-file-name)" xah-elisp--ahf :count 0)
    ("buffer-list" "(buffer-list &optional FRAME▮)" xah-elisp--ahf :count 0)
    ("buffer-live-p" "(buffer-live-p OBJECT▮)" xah-elisp--ahf :count 0)
    ("buffer-modified-p" "(buffer-modified-p ▮)" xah-elisp--ahf :count 0)
    ("buffer-modified-tick" "(buffer-modified-tick &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-name" "(buffer-name BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-substring" "(buffer-substring START▮ END)" xah-elisp--ahf :count 0)
    ("buffer-substring-no-properties" "(buffer-substring-no-properties START▮ END)" xah-elisp--ahf :count 0)
    ("buffer-swap-text" "(buffer-swap-text BUFFER▮)" xah-elisp--ahf :count 0)
    ("bufferp" "(bufferp ▮)" xah-elisp--ahf :count 0)
    ("bury-buffer" "(bury-buffer &optional BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("bw" "backward-word" xah-elisp--ahf :count 0)
    ("c" "concat" xah-elisp--ahf :count 0)
    ("ca" "char-after" xah-elisp--ahf :count 0)
    ("call-interactively" "(call-interactively 'FUNCTION▮ &optional RECORD-FLAG KEYS)" xah-elisp--ahf :count 0)
    ("called-interactively-p" "(called-interactively-p 'interactive▮)" xah-elisp--ahf :count 0)
    ("car" "(car ▮)" xah-elisp--ahf :count 0)
    ("catch" "(catch 'TAG▮ BODY)" xah-elisp--ahf :count 0)
    ("cb" "current-buffer" xah-elisp--ahf :count 0)
    ("cc" "condition-case" xah-elisp--ahf :count 0)
    ("cd" "copy-directory" xah-elisp--ahf :count 0)
    ("cdr" "(cdr ▮)" xah-elisp--ahf :count 0)
    ("cf" "copy-file" xah-elisp--ahf :count 0)
    ("char-after" "(char-after &optional ▮POS)" xah-elisp--ahf :count 0)
    ("char-before" "(char-before &optional ▮POS)" xah-elisp--ahf :count 0)
    ("char-equal" "(char-equal char1▮ char1)" xah-elisp--ahf :count 0)
    ("char-to-string" "(char-to-string CHAR▮) " xah-elisp--ahf :count 0)
    ("clear-image-cache" "(clear-image-cache &optional FILTER▮)" xah-elisp--ahf :count 0)
    ("clear-visited-file-modtime" "(clear-visited-file-modtime)" xah-elisp--ahf :count 0)
    ("clone-indirect-buffer" "(clone-indirect-buffer NEWNAME▮ DISPLAY-FLAG &optional NORECORD)" xah-elisp--ahf :count 0)
    ("clrhash" "(clrhash ▮)" xah-elisp--ahf :count 0)
    ("compare-strings" "(compare-strings string1▮ start1 end1 string2 start2 end2)" xah-elisp--ahf :count 0)
    ("concat" "(concat \"▮\" \"▮\")" xah-elisp--ahf :count 0)
    ("cond" "(cond
(CONDITION▮ BODY)
(CONDITION BODY)
)" xah-elisp--ahf :count 0)
    ("condition-case" "(condition-case ▮)" xah-elisp--ahf :count 0)
    ("cons" "(cons CAR▮ CDR)" xah-elisp--ahf :count 0)
    ("consp" "(consp ▮)" xah-elisp--ahf :count 0)
    ("constrain-to-field" "(constrain-to-field NEW-POS▮ OLD-POS &optional ESCAPE-FROM-EDGE ONLY-IN-LINE INHIBIT-CAPTURE-PROPERTY)" xah-elisp--ahf :count 0)
    ("copy-alist" "(copy-alist alist▮)" xah-elisp--ahf :count 0)
    ("copy-directory" "(copy-directory ▮ NEWNAME &optional KEEP-TIME PARENTS)" xah-elisp--ahf :count 0)
    ("copy-file" "(copy-file FILE▮ NEWNAME &optional OK-IF-ALREADY-EXISTS KEEP-TIME PRESERVE-UID-GID)" xah-elisp--ahf :count 0)
    ("create-image" "(create-image FILE-OR-DATA▮ &optional TYPE DATA-P &rest)" xah-elisp--ahf :count 0)
    ("cts" "(char-to-string CHAR▮) " xah-elisp--ahf :count 0)
    ("current-buffer" "(current-buffer)" xah-elisp--ahf :count 0)
    ("current-word" "(current-word)" xah-elisp--ahf :count 0)
    ("custom-autoload" "(custom-autoload ▮ SYMBOL LOAD &optional NOSET)" xah-elisp--ahf :count 0)
    ("cw" "current-word" xah-elisp--ahf :count 0)
    ("d" "defun" xah-elisp--ahf :count 0)
    ("daer" "delete-and-extract-region" xah-elisp--ahf :count 0)
    ("dc" "delete-char" xah-elisp--ahf :count 0)
    ("dd" "delete-directory" xah-elisp--ahf :count 0)
    ("defalias" "(defalias 'SYMBOL▮ 'DEFINITION &optional DOCSTRING)" xah-elisp--ahf :count 0)
    ("defconst" "(defconst ▮ INITVALUE \"DOCSTRING\")" xah-elisp--ahf :count 0)
    ("defcustom" "(defcustom ▮ VALUE \"DOC\" &optional ARGS)" xah-elisp--ahf :count 0)
    ("defface" "(defface FACE▮ SPEC \"DOC\" &rest ARGS)" xah-elisp--ahf :count 0)
    ("defimage" "(defimage SYMBOL▮ SPECS &optional DOC)" xah-elisp--ahf :count 0)
    ("define-key" "(define-key KEYMAPNAME▮ (kbd \"M-b\") 'FUNCNAME)" xah-elisp--ahf :count 0)
    ("define-minor-mode" "(define-minor-mode MODE▮ \"DOC\" &optional INIT-VALUE LIGHTER KEYMAP &rest BODY)" xah-elisp--ahf :count 0)
    ("defsubst" "(defsubst ▮)" xah-elisp--ahf :count 0)
    ("defun" "(defun ▮ ()
  \"DOCSTRING\"
  (interactive)
  (let (VAR)

  ))" xah-elisp--ahf :count 0)
    ("defvar" "(defvar ▮ &optional INITVALUE \"DOCSTRING\")" xah-elisp--ahf :count 0)
    ("delete" "(delete OBJECT▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("delete-and-extract-region" "(delete-and-extract-region ▮ pos2)" xah-elisp--ahf :count 0)
    ("delete-char" "(delete-char ▮)" xah-elisp--ahf :count 0)
    ("delete-directory" "(delete-directory ▮ &optional RECURSIVE)" xah-elisp--ahf :count 0)
    ("delete-dups" "(delete-dups LIST▮)" xah-elisp--ahf :count 0)
    ("delete-field" "(delete-field &optional POS▮)" xah-elisp--ahf :count 0)
    ("delete-file" "(delete-file ▮)" xah-elisp--ahf :count 0)
    ("delete-region" "(delete-region pos1▮ pos2)" xah-elisp--ahf :count 0)
    ("delq" "(delq ELT▮ LIST)" xah-elisp--ahf :count 0)
    ("df" "delete-file" xah-elisp--ahf :count 0)
    ("dfr" "directory-files-recursively" xah-elisp--ahf :count 0)
    ("directory-file-name" "(directory-file-name ▮)" xah-elisp--ahf :count 0)
    ("directory-files" "(directory-files ▮ &optional FULL MATCH NOSORT)" xah-elisp--ahf :count 0)
    ("directory-files-recursively" "(directory-files-recursively DIR▮ REGEXP &optional INCLUDE-DIRECTORIES)" xah-elisp--ahf :count 0)
    ("directory-name-p" "(directory-name-p ▮)" xah-elisp--ahf :count 0)
    ("dk" "define-key" xah-elisp--ahf :count 0)
    ("dolist" "(dolist (x LIST▮ [RESULT]) BODY)" xah-elisp--ahf :count 0)
    ("dotimes" "(dotimes (i COUNT▮ [RESULT]) BODY)" xah-elisp--ahf :count 0)
    ("dr" "delete-region" xah-elisp--ahf :count 0)
    ("dv" "defvar" xah-elisp--ahf :count 0)
    ("eb" "erase-buffer" xah-elisp--ahf :count 0)
    ("efn" "expand-file-name" xah-elisp--ahf :count 0)
    ("elt" "(elt SEQUENCE▮ N)" xah-elisp--ahf :count 0)
    ("end-of-line" "(end-of-line ▮&optional N)" xah-elisp--ahf :count 0)
    ("eol" "end-of-line" xah-elisp--ahf :count 0)
    ("eq" "(eq ▮)" xah-elisp--ahf :count 0)
    ("equal" "(equal ▮)" xah-elisp--ahf :count 0)
    ("erase-buffer" "(erase-buffer)" xah-elisp--ahf :count 0)
    ("error" "(error \"%s\" ▮)" xah-elisp--ahf :count 0)
    ("expand-file-name" "(expand-file-name ▮ &optional relativedir)" xah-elisp--ahf :count 0)
    ("f" "format" xah-elisp--ahf :count 0)
    ("fa" "fillarray" xah-elisp--ahf :count 0)
    ("fboundp" "(fboundp '▮)" xah-elisp--ahf :count 0)
    ("fc" "forward-char" xah-elisp--ahf :count 0)
    ("featurep" "(featurep 'FEATURE▮)" xah-elisp--ahf :count 0)
    ("fep" "file-exists-p" xah-elisp--ahf :count 0)
    ("ff" "find-file" xah-elisp--ahf :count 0)
    ("field-beginning" "(field-beginning &optional POS▮ ESCAPE-FROM-EDGE LIMIT)" xah-elisp--ahf :count 0)
    ("field-end" "(field-end &optional POS▮ ESCAPE-FROM-EDGE LIMIT)" xah-elisp--ahf :count 0)
    ("field-string" "(field-string &optional POS▮)" xah-elisp--ahf :count 0)
    ("field-string-no-properties" "(field-string-no-properties &optional POS▮)" xah-elisp--ahf :count 0)
    ("file-directory-p" "(file-directory-p ▮)" xah-elisp--ahf :count 0)
    ("file-exists-p" "(file-exists-p ▮)" xah-elisp--ahf :count 0)
    ("file-name-absolute-p" "(file-name-absolute-p ▮)" xah-elisp--ahf :count 0)
    ("file-name-as-directory" "(file-name-as-directory ▮)" xah-elisp--ahf :count 0)
    ("file-name-directory" "(file-name-directory ▮)" xah-elisp--ahf :count 0)
    ("file-name-extension" "(file-name-extension ▮ &optional PERIOD)" xah-elisp--ahf :count 0)
    ("file-name-nondirectory" "(file-name-nondirectory ▮)" xah-elisp--ahf :count 0)
    ("file-name-sans-extension" "(file-name-sans-extension ▮)" xah-elisp--ahf :count 0)
    ("file-regular-p" "(file-regular-p ▮)" xah-elisp--ahf :count 0)
    ("file-relative-name" "(file-relative-name ▮)" xah-elisp--ahf :count 0)
    ("fillarray" "(fillarray ARRAY▮ 0)" xah-elisp--ahf :count 0)
    ("find-buffer-visiting" "(find-buffer-visiting FILENAME▮ &optional PREDICATE)" xah-elisp--ahf :count 0)
    ("find-file" "(find-file ▮)" xah-elisp--ahf :count 0)
    ("find-image" "(find-image SPECS▮)" xah-elisp--ahf :count 0)
    ("fl" "forward-line" xah-elisp--ahf :count 0)
    ("fnd" "file-name-directory" xah-elisp--ahf :count 0)
    ("fne" "file-name-extension" xah-elisp--ahf :count 0)
    ("fnn" "file-name-nondirectory" xah-elisp--ahf :count 0)
    ("fnse" "file-name-sans-extension" xah-elisp--ahf :count 0)
    ("font-lock-add-keywords" "(font-lock-add-keywords MODE▮ KEYWORDS &optional HOW)" xah-elisp--ahf :count 0)
    ("font-lock-fontify-buffer" "(font-lock-fontify-buffer ▮)" xah-elisp--ahf :count 0)
    ("format" "(format \"▮\" &optional OBJECTS)" xah-elisp--ahf :count 0)
    ("forward-char" "(forward-char ▮)" xah-elisp--ahf :count 0)
    ("forward-line" "(forward-line ▮)" xah-elisp--ahf :count 0)
    ("forward-word" "(forward-word ▮)" xah-elisp--ahf :count 0)
    ("frn" "file-relative-name" xah-elisp--ahf :count 0)
    ("funcall" "(funcall 'FUNCTION▮ &rest ARGUMENTS)" xah-elisp--ahf :count 0)
    ("function" "(function ▮)" xah-elisp--ahf :count 0)
    ("fw" "forward-word" xah-elisp--ahf :count 0)
    ("gap-position" "(gap-position)" xah-elisp--ahf :count 0)
    ("gap-size" "(gap-size)" xah-elisp--ahf :count 0)
    ("gb" "get-buffer" xah-elisp--ahf :count 0)
    ("gbc" "get-buffer-create" xah-elisp--ahf :count 0)
    ("gc" "goto-char" xah-elisp--ahf :count 0)
    ("generate-new-buffer" "(generate-new-buffer ▮)" xah-elisp--ahf :count 0)
    ("generate-new-buffer-name" "(generate-new-buffer-name STARTING-NAME▮ &optional IGNORE)" xah-elisp--ahf :count 0)
    ("get" "(get SYMBOL▮ 'PROPNAME)" xah-elisp--ahf :count 0)
    ("get-buffer" "(get-buffer BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("get-buffer-create" "(get-buffer-create BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("get-char-code-property" "(get-char-code-property CHAR▮ PROPNAME)" xah-elisp--ahf :count 0)
    ("get-char-property" "(get-char-property POSITION▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("get-char-property-and-overlay" "(get-char-property-and-overlay POSITION▮ PROP &optional)" xah-elisp--ahf :count 0)
    ("get-file-buffer" "(get-file-buffer FILENAME▮)" xah-elisp--ahf :count 0)
    ("get-pos-property" "(get-pos-property POSITION▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("get-text-property" "(get-text-property POS▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("gethash" "(gethash KEY▮ TABLE &optional DFLT)" xah-elisp--ahf :count 0)
    ("global-set-key" "(global-set-key (kbd \"C-▮\") 'COMMAND)" xah-elisp--ahf :count 0)
    ("gnb" "generate-new-buffer" xah-elisp--ahf :count 0)
    ("goto-char" "(goto-char ▮)" xah-elisp--ahf :count 0)
    ("gsk" "global-set-key" xah-elisp--ahf :count 0)
    ("i" "insert" xah-elisp--ahf :count 0)
    ("if" "(if ▮
    (progn )
  (progn )
)" xah-elisp--ahf :count 0)
    ("ifc" "insert-file-contents" xah-elisp--ahf :count 0)
    ("image-flush" "(image-flush SPEC▮ &optional FRAME)" xah-elisp--ahf :count 0)
    ("image-load-path-for-library" "(image-load-path-for-library LIBRARY▮ IMAGE &optional PATH)" xah-elisp--ahf :count 0)
    ("image-size" "(image-size SPEC▮ &optional PIXELS FRAME)" xah-elisp--ahf :count 0)
    ("insert" "(insert ▮)" xah-elisp--ahf :count 0)
    ("insert-and-inherit" "(insert-and-inherit ▮)" xah-elisp--ahf :count 0)
    ("insert-before-markers-and-inherit" "(insert-before-markers-and-inherit ▮)" xah-elisp--ahf :count 0)
    ("insert-char" "(insert-char CHARACTER▮ &optional COUNT INHERIT)" xah-elisp--ahf :count 0)
    ("insert-file-contents" "(insert-file-contents ▮ &optional VISIT BEG END REPLACE)" xah-elisp--ahf :count 0)
    ("insert-image" "(insert-image IMAGE▮ &optional STRING AREA SLICE)" xah-elisp--ahf :count 0)
    ("insert-sliced-image" "(insert-sliced-image IMAGE▮ &optional STRING AREA ROWS COLS)" xah-elisp--ahf :count 0)
    ("interactive" "(interactive)" xah-elisp--ahf :count 0)
    ("kb" "kill-buffer" xah-elisp--ahf :count 0)
    ("kbd" "(kbd \"▮\")" xah-elisp--ahf :count 0)
    ("kill-append" "(kill-append STRING▮ BEFORE-P)" xah-elisp--ahf :count 0)
    ("kill-buffer" "(kill-buffer ▮)" xah-elisp--ahf :count 0)
    ("kill-region" "(kill-region BEG▮ END &optional REGION)" xah-elisp--ahf :count 0)
    ("kr" "kill-region" xah-elisp--ahf :count 0)
    ("l" "let" xah-elisp--ahf :count 0)
    ("la" "looking-at" xah-elisp--ahf :count 0)
    ("lam" "lambda" xah-elisp--ahf :count 0)
    ("lambda" "(lambda (x▮) BODY)" xah-elisp--ahf :count 0)
    ("last-buffer" "(last-buffer &optional BUFFER▮ VISIBLE-OK FRAME)" xah-elisp--ahf :count 0)
    ("lb" "looking-back" xah-elisp--ahf :count 0)
    ("lbp" "(line-beginning-position)" xah-elisp--ahf :count 0)
    ("lc" "left-char" xah-elisp--ahf :count 0)
    ("left-char" "(left-char ▮)" xah-elisp--ahf :count 0)
    ("len" "length" xah-elisp--ahf :count 0)
    ("length" "(length ▮)" xah-elisp--ahf :count 0)
    ("lep" "(line-end-position)" xah-elisp--ahf :count 0)
    ("let" "(let (▮)
 x
)" xah-elisp--ahf :count 0)
    ("let*" "(let* (▮)
 x
)" xah-elisp--ahf :count 0)
    ("line-beginning-position" "(line-beginning-position)" xah-elisp--ahf :count 0)
    ("line-end-position" "(line-end-position)" xah-elisp--ahf :count 0)
    ("list" "(list ▮)" xah-elisp--ahf :count 0)
    ("load" "(load FILE▮ &optional NOERROR NOMESSAGE NOSUFFIX MUST-SUFFIX)" xah-elisp--ahf :count 0)
    ("load-file" "(load-file FILE▮)" xah-elisp--ahf :count 0)
    ("looking-at" "(looking-at \"REGEXP▮\")" xah-elisp--ahf :count 0)
    ("looking-back" "(looking-back \"REGEXP▮\" LIMIT &optional GREEDY)" xah-elisp--ahf :count 0)
    ("m" "message" xah-elisp--ahf :count 0)
    ("make-directory" "(make-directory ▮ &optional PARENTS)" xah-elisp--ahf :count 0)
    ("make-hash-table" "(make-hash-table :test 'equal ▮ &rest KEYWORD-ARGS)" xah-elisp--ahf :count 0)
    ("make-indirect-buffer" "(make-indirect-buffer BASE-BUFFER▮ NAME &optional CLONE)" xah-elisp--ahf :count 0)
    ("make-list" "(make-list LENGTH▮ INIT)" xah-elisp--ahf :count 0)
    ("make-local-variable" "(make-local-variable ▮)" xah-elisp--ahf :count 0)
    ("make-string" "(make-string count character)" xah-elisp--ahf :count 0)
    ("make-vector" "(make-vector 5▮ 0)" xah-elisp--ahf :count 0)
    ("mapc" "(mapc '▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("mapcar" "(mapcar '▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("mapconcat" "(mapconcat FUNCTION▮ SEQUENCE SEPARATOR)" xah-elisp--ahf :count 0)
    ("maphash" "(maphash FUNCTION▮ TABLE)" xah-elisp--ahf :count 0)
    ("match-beginning" "(match-beginning N▮)" xah-elisp--ahf :count 0)
    ("match-data" "(match-data &optional INTEGERS▮ REUSE RESEAT)" xah-elisp--ahf :count 0)
    ("match-end" "(match-end N▮)" xah-elisp--ahf :count 0)
    ("match-string" "(match-string NUM▮ &optional STRING)" xah-elisp--ahf :count 0)
    ("mb" "match-beginning" xah-elisp--ahf :count 0)
    ("mc" "mapcar" xah-elisp--ahf :count 0)
    ("md" "make-directory" xah-elisp--ahf :count 0)
    ("me" "match-end" xah-elisp--ahf :count 0)
    ("member" "(member OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("member-ignore-case" "(member-ignore-case OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("memq" "(memq ELT▮ LIST)" xah-elisp--ahf :count 0)
    ("memql" "(memql OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("message" "(message \"%s▮\" ARGS)" xah-elisp--ahf :count 0)
    ("ml" "make-list" xah-elisp--ahf :count 0)
    ("mlv" "make-local-variable" xah-elisp--ahf :count 0)
    ("ms" "match-string" xah-elisp--ahf :count 0)
    ("mv" "make-vector" xah-elisp--ahf :count 0)
    ("narrow-to-region" "(narrow-to-region START▮ END)" xah-elisp--ahf :count 0)
    ("next-char-property-change" "(next-char-property-change POS &optional LIMIT)" xah-elisp--ahf :count 0)
    ("next-property-change" "(next-property-change POS &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("next-single-char-property-change" "(next-single-char-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("next-single-property-change" "(next-single-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("not" "(not ▮)" xah-elisp--ahf :count 0)
    ("not-modified" "(not-modified &optional ARG▮)" xah-elisp--ahf :count 0)
    ("ns" "number-sequence" xah-elisp--ahf :count 0)
    ("nth" "(nth N▮ LIST)" xah-elisp--ahf :count 0)
    ("ntr" "narrow-to-region" xah-elisp--ahf :count 0)
    ("nts" "number-to-string" xah-elisp--ahf :count 0)
    ("null" "(null ▮)" xah-elisp--ahf :count 0)
    ("number-sequence" "(number-sequence FROM▮ &optional TO INC)" xah-elisp--ahf :count 0)
    ("number-to-string" "(number-to-string ▮)" xah-elisp--ahf :count 0)
    ("o" "&optional " xah-elisp--ahf :count 0)
    ("or" "(or ▮)" xah-elisp--ahf :count 0)
    ("other-buffer" "(other-buffer &optional BUFFER▮ VISIBLE-OK FRAME)" xah-elisp--ahf :count 0)
    ("p" "point" xah-elisp--ahf :count 0)
    ("pm" "point-min" xah-elisp--ahf :count 0)
    ("pmi" "point-min" xah-elisp--ahf :count 0)
    ("pn" "progn" xah-elisp--ahf :count 0)
    ("point" "(point)" xah-elisp--ahf :count 0)
    ("point-max" "(point-max)" xah-elisp--ahf :count 0)
    ("point-min" "(point-min)" xah-elisp--ahf :count 0)
    ("pop" "(pop ▮)" xah-elisp--ahf :count 0)
    ("previous-char-property-change" "(previous-char-property-change POS &optional LIMIT)" xah-elisp--ahf :count 0)
    ("previous-property-change" "(previous-property-change POS &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("previous-single-char-property-change" "(previous-single-char-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("previous-single-property-change" "(previous-single-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("prin1" "(prin1 ▮)" xah-elisp--ahf :count 0)
    ("prin1-to-string" "(prin1-to-string▮ OBJECT &optional NOESCAPE)" xah-elisp--ahf :count 0)
    ("princ" "(princ ▮)" xah-elisp--ahf :count 0)
    ("print" "(print ▮)" xah-elisp--ahf :count 0)
    ("prog1" "(prog1
▮)" xah-elisp--ahf :count 0)
    ("prog2" "(prog2
▮)" xah-elisp--ahf :count 0)
    ("progn" "(progn
▮)" xah-elisp--ahf :count 0)
    ("propertize" "(propertize STRING▮ &rest PROPERTIES)" xah-elisp--ahf :count 0)
    ("push" "(push NEWELT▮ PLACE)" xah-elisp--ahf :count 0)
    ("push-mark" "(push-mark ▮&optional LOCATION NOMSG ACTIVATE)" xah-elisp--ahf :count 0)
    ("put" "(put 'SYMBOL▮ 'PROPNAME VALUE)" xah-elisp--ahf :count 0)
    ("put-image" "(put-image IMAGE▮ POS &optional STRING AREA)" xah-elisp--ahf :count 0)
    ("put-text-property" "(put-text-property START▮ END PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("puthash" "(puthash KEY▮ VALUE TABLE)" xah-elisp--ahf :count 0)
    ("px" "point-max" xah-elisp--ahf :count 0)
    ("random" "(random ▮)" xah-elisp--ahf :count 0)
    ("rap" "region-active-p" xah-elisp--ahf :count 0)
    ("rassoc" "(rassoc value▮ alist)" xah-elisp--ahf :count 0)
    ("rassq" "(rassq value▮ alist)" xah-elisp--ahf :count 0)
    ("rassq-delete-all" "(rassq-delete-all value▮ alist)" xah-elisp--ahf :count 0)
    ("rb" "region-beginning" xah-elisp--ahf :count 0)
    ("rc" "right-char" xah-elisp--ahf :count 0)
    ("rdn" "read-directory-name" xah-elisp--ahf :count 0)
    ("re" "region-end" xah-elisp--ahf :count 0)
    ("re-search-backward" "(re-search-backward \"REGEXP▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("re-search-forward" "(re-search-forward \"REGEXP▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("read-directory-name" "(read-directory-name \"▮\" &optional DIR DEFAULT-DIRNAME MUSTMATCH INITIAL)" xah-elisp--ahf :count 0)
    ("read-file-name" "(read-file-name \"▮\" &optional DIR DEFAULT-FILENAME MUSTMATCH INITIAL PREDICATE)" xah-elisp--ahf :count 0)
    ("read-regexp" "(read-regexp \"▮\" &optional DEFAULT-VALUE)" xah-elisp--ahf :count 0)
    ("read-string" "(read-string \"▮\" &optional INITIAL-INPUT HISTORY DEFAULT-VALUE INHERIT-INPUT-METHOD)" xah-elisp--ahf :count 0)
    ("regexp-opt" "(regexp-opt STRINGS▮ &optional PAREN)" xah-elisp--ahf :count 0)
    ("regexp-quote" "(regexp-quote ▮)" xah-elisp--ahf :count 0)
    ("region-active-p" "(region-active-p)" xah-elisp--ahf :count 0)
    ("region-beginning" "(region-beginning)" xah-elisp--ahf :count 0)
    ("region-end" "(region-end)" xah-elisp--ahf :count 0)
    ("remhash" "(remhash KEY▮ TABLE)" xah-elisp--ahf :count 0)
    ("remove" "(remove OBJECT▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("remove-images" "(remove-images START▮ END &optional BUFFER)" xah-elisp--ahf :count 0)
    ("remove-list-of-text-properties" "(remove-list-of-text-properties START▮ END LIST OF PROPERTIES &optional OBJECT)" xah-elisp--ahf :count 0)
    ("remove-text-properties" "(remove-text-properties START▮ END PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("remq" "(remq OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("rename-buffer" "(rename-buffer NEWNAME▮ &optional UNIQUE)" xah-elisp--ahf :count 0)
    ("rename-file" "(rename-file FILE▮ NEWNAME &optional OK-IF-ALREADY-EXISTS)" xah-elisp--ahf :count 0)
    ("repeat" "(repeat ▮)" xah-elisp--ahf :count 0)
    ("replace-match" "(replace-match NEWTEXT▮ &optional FIXEDCASE LITERAL \"STRING\" SUBEXP)" xah-elisp--ahf :count 0)
    ("replace-regexp" "(replace-regexp \"REGEXP▮\" TO-STRING &optional DELIMITED START END)" xah-elisp--ahf :count 0)
    ("replace-regexp-in-string" "(replace-regexp-in-string \"REGEXP▮\" REP \"STRING\" &optional FIXEDCASE LITERAL SUBEXP START)" xah-elisp--ahf :count 0)
    ("require" "(require ▮)" xah-elisp--ahf :count 0)
    ("restore-buffer-modified-p" "(restore-buffer-modified-p FLAG▮)" xah-elisp--ahf :count 0)
    ("reverse" "(reverse ▮)" xah-elisp--ahf :count 0)
    ("rf" "rename-file" xah-elisp--ahf :count 0)
    ("rfn" "read-file-name" xah-elisp--ahf :count 0)
    ("right-char" "(right-char ▮)" xah-elisp--ahf :count 0)
    ("rm" "replace-match" xah-elisp--ahf :count 0)
    ("rq" "regexp-quote" xah-elisp--ahf :count 0)
    ("rr" "replace-regexp" xah-elisp--ahf :count 0)
    ("rris" "replace-regexp-in-string" xah-elisp--ahf :count 0)
    ("rs" "read-string" xah-elisp--ahf :count 0)
    ("rsb" "re-search-backward" xah-elisp--ahf :count 0)
    ("rsf" "re-search-forward" xah-elisp--ahf :count 0)
    ("run-with-timer" "(run-with-timer SECS▮ REPEAT FUNCTION &rest ARGS)" xah-elisp--ahf :count 0)
    ("s" "setq" xah-elisp--ahf :count 0)
    ("save-buffer" "(save-buffer &optional ARG▮)" xah-elisp--ahf :count 0)
    ("save-current-buffer" "(save-current-buffer ▮)" xah-elisp--ahf :count 0)
    ("save-excursion" "(save-excursion ▮)" xah-elisp--ahf :count 0)
    ("save-restriction" "(save-restriction ▮)" xah-elisp--ahf :count 0)
    ("sb" "search-backward" xah-elisp--ahf :count 0)
    ("sbr" "search-backward-regexp" xah-elisp--ahf :count 0)
    ("sc" "shell-command" xah-elisp--ahf :count 0)
    ("scb" "skip-chars-backward" xah-elisp--ahf :count 0)
    ("scf" "skip-chars-forward" xah-elisp--ahf :count 0)
    ("se" "save-excursion" xah-elisp--ahf :count 0)
    ("search-backward" "(search-backward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-backward-regexp" "(search-backward-regexp \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-forward" "(search-forward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-forward-regexp" "(search-forward-regexp \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("set-buffer" "(set-buffer ▮)" xah-elisp--ahf :count 0)
    ("set-buffer-modified-p" "(set-buffer-modified-p FLAG▮)" xah-elisp--ahf :count 0)
    ("set-file-modes" "(set-file-modes ▮ MODE)" xah-elisp--ahf :count 0)
    ("set-mark" "(set-mark ▮)" xah-elisp--ahf :count 0)
    ("set-syntax-table" "(set-syntax-table ▮)" xah-elisp--ahf :count 0)
    ("set-text-properties" "(set-text-properties START▮ END PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("set-visited-file-modtime" "(set-visited-file-modtime &optional TIME▮)" xah-elisp--ahf :count 0)
    ("set-visited-file-name" "(set-visited-file-name FILENAME▮ &optional NO-QUERY ALONG-WITH-FILE)" xah-elisp--ahf :count 0)
    ("setq" "(setq xx▮ VAL)" xah-elisp--ahf :count 0)
    ("sf" "search-forward" xah-elisp--ahf :count 0)
    ("sfm" "set-file-modes" xah-elisp--ahf :count 0)
    ("sfr" "search-forward-regexp" xah-elisp--ahf :count 0)
    ("shell-command" "(shell-command ▮ &optional OUTPUT-BUFFER ERROR-BUFFER)" xah-elisp--ahf :count 0)
    ("shell-quote-argument" "(shell-quote-argument ▮)" xah-elisp--ahf :count 0)
    ("skip-chars-backward" "(skip-chars-backward \"▮\" &optional LIM)" xah-elisp--ahf :count 0)
    ("skip-chars-forward" "(skip-chars-forward \"▮\" &optional LIM)" xah-elisp--ahf :count 0)
    ("sm" "string-match" xah-elisp--ahf :count 0)
    ("split-string" "(split-string ▮ &optional SEPARATORS OMIT-NULLS)" xah-elisp--ahf :count 0)
    ("sqa" "shell-quote-argument" xah-elisp--ahf :count 0)
    ("sr" "save-restriction" xah-elisp--ahf :count 0)
    ("ss" "split-string" xah-elisp--ahf :count 0)
    ("stb" "switch-to-buffer" xah-elisp--ahf :count 0)
    ("stc" "(string-to-char \"▮\")" xah-elisp--ahf :count 0)
    ("ste" "(string-equal str1▮ str2)" xah-elisp--ahf :count 0)
    ("stn" "string-to-number" xah-elisp--ahf :count 0)
    ("string-collate-equalp" "(string-collate-equalp string1▮ string2 &optional locale)" xah-elisp--ahf :count 0)
    ("string-collate-lessp" "(string-collate-lessp string1▮ string2 &optional locale)" xah-elisp--ahf :count 0)
    ("string-equal" "(string-equal str1▮ str2)" xah-elisp--ahf :count 0)
    ("string-greaterp" "(string-greaterp string1▮ string2)" xah-elisp--ahf :count 0)
    ("string-lessp" "(string-lessp string1▮ string2)" xah-elisp--ahf :count 0)
    ("string-match" "(string-match \"REGEXP▮\" \"STRING\" &optional START)" xah-elisp--ahf :count 0)
    ("string-match-p" "(string-match-p \"REGEXP▮\" \"STRING\" &optional START)" xah-elisp--ahf :count 0)
    ("string-prefix-p" "(string-prefix-p string1▮ string2 &optional ignore-case)" xah-elisp--ahf :count 0)
    ("string-suffix-p" "(string-suffix-p suffix▮ string &optional ignore-case)" xah-elisp--ahf :count 0)
    ("string-to-char" "(string-to-char \"▮\")" xah-elisp--ahf :count 0)
    ("string-to-number" "(string-to-number \"▮\")" xah-elisp--ahf :count 0)
    ("string=" "(string-equal str1▮ str2)" xah-elisp--ahf :count 0)
    ("stringp" "(stringp ▮)" xah-elisp--ahf :count 0)
    ("substring" "(substring STRING▮ FROM &optional TO)" xah-elisp--ahf :count 0)
    ("substring-no-properties" "(substring-no-properties ▮ FROM TO)" xah-elisp--ahf :count 0)
    ("switch-to-buffer" "(switch-to-buffer ▮ &optional NORECORD FORCE-SAME-WINDOW)" xah-elisp--ahf :count 0)
    ("tap" "thing-at-point" xah-elisp--ahf :count 0)
    ("terpri" "(terpri ▮)" xah-elisp--ahf :count 0)
    ("text-properties-at" "(text-properties-at POSITION▮ &optional OBJECT)" xah-elisp--ahf :count 0)
    ("text-property-any" "(text-property-any START END PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("text-property-not-all" "(text-property-not-all START END PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("thing-at-point" "(thing-at-point 'word▮ 'symbol 'list 'sexp 'defun 'filename 'url 'email 'sentence 'whitespace 'line 'number 'page)" xah-elisp--ahf :count 0)
    ("throw" "(throw 'TAG▮ VALUE)" xah-elisp--ahf :count 0)
    ("toggle-read-only" "(toggle-read-only &optional ARG▮)" xah-elisp--ahf :count 0)
    ("unbury-buffer" "(unbury-buffer)" xah-elisp--ahf :count 0)
    ("unless" "(unless ▮)" xah-elisp--ahf :count 0)
    ("urp" "use-region-p" xah-elisp--ahf :count 0)
    ("use-region-p" "(use-region-p)" xah-elisp--ahf :count 0)
    ("user-error" "(user-error \"%s▮\" &rest ARGS)" xah-elisp--ahf :count 0)
    ("vc" "vconcat" xah-elisp--ahf :count 0)
    ("vconcat" "(vconcat SEQUENCES▮)" xah-elisp--ahf :count 0)
    ("vector" "(vector ▮)" xah-elisp--ahf :count 0)
    ("verify-visited-file-modtime" "(verify-visited-file-modtime BUFFER▮)" xah-elisp--ahf :count 0)
    ("version<" "(version< \"24.4\" emacs-version)" xah-elisp--ahf :count 0)
    ("version<=" "(version<= \"24.4\" emacs-version)" xah-elisp--ahf :count 0)
    ("visited-file-modtime" "(visited-file-modtime)" xah-elisp--ahf :count 0)
    ("w" "when" xah-elisp--ahf :count 0)
    ("wcb" "with-current-buffer" xah-elisp--ahf :count 0)
    ("wg" "widget-get" xah-elisp--ahf :count 0)
    ("when" "(when ▮)" xah-elisp--ahf :count 0)
    ("while" "(while (< i▮ 9)
  (setq i (1+ i)))" xah-elisp--ahf :count 0)
    ("widen" "(widen)" xah-elisp--ahf :count 0)
    ("widget-get" "(widget-get ▮)" xah-elisp--ahf :count 0)
    ("with-current-buffer" "(with-current-buffer BUFFER-OR-NAME▮ BODY)" xah-elisp--ahf :count 0)
    ("with-output-to-string" "(with-output-to-string BODY▮)" xah-elisp--ahf :count 0)
    ("with-output-to-temp-buffer" "(with-output-to-temp-buffer BUFNAME▮ &rest BODY)" xah-elisp--ahf :count 0)
    ("with-temp-buffer" "(with-temp-buffer ▮)" xah-elisp--ahf :count 0)
    ("with-temp-file" "(with-temp-file FILE▮ BODY)" xah-elisp--ahf :count 0)
    ("wr" "write-region" xah-elisp--ahf :count 0)
    ("write-char" "(write-char CHARACTER▮ &optional STREAM)" xah-elisp--ahf :count 0)
    ("write-file" "(write-file FILENAME▮ &optional CONFIRM)" xah-elisp--ahf :count 0)
    ("write-region" "(write-region (point-min) (point-max) FILENAME▮ &optional APPEND VISIT LOCKNAME MUSTBENEW)" xah-elisp--ahf :count 0)
    ("wtb" "with-temp-buffer" xah-elisp--ahf :count 0)
    ("wtf" "with-temp-file" xah-elisp--ahf :count 0)
    ("y-or-n-p" "(y-or-n-p \"PROMPT▮ \")" xah-elisp--ahf :count 0)
    ("yes-or-no-p" "(yes-or-no-p \"PROMPT▮ \")" xah-elisp--ahf :count 0)
    ("yonp" "yes-or-no-p" xah-elisp--ahf :count 0)
   ))

